
/Users/jasonmerlo/Projects/muse/muse/target/2.1.0/photon/muse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000af20  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080aaf40  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080aaf44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001440  2000006c  2000006c  0004006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080aafb0  080aafb0  0003afb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080aafd8  080aafd8  0003afd8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001ae488  00000000  00000000  0003afdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001d6f4  00000000  00000000  001e9464  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000242ac  00000000  00000000  00206b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002840  00000000  00000000  0022ae04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000067f0  00000000  00000000  0022d644  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00030ca6  00000000  00000000  00233e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004239b  00000000  00000000  00264ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b9de5  00000000  00000000  002a6e75  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007504  00000000  00000000  00360c5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f00a f8dd 	bl	80aa1f0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f00a f8e5 	bl	80aa20c <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080aaf44 	.word	0x080aaf44
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	2000006c 	.word	0x2000006c
 80a0058:	200014ac 	.word	0x200014ac
 80a005c:	200014ac 	.word	0x200014ac

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f005 fa93 	bl	80a558c <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080aaf18 	.word	0x080aaf18
 80a0084:	080aaf40 	.word	0x080aaf40

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f002 b90c 	b.w	80a22a4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f002 f9f9 	bl	80a2484 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f005 ba3b 	b.w	80a5510 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f003 bf27 	b.w	80a3eec <malloc>

080a009e <_Znaj>:
 80a009e:	f003 bf25 	b.w	80a3eec <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f003 bf2b 	b.w	80a3efc <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_ZN10Bar_Matrix5decayEd>:
/* ================================================================== *
 * Function: decay
 * Description: slowly fades out matrix values
 * Parameters: [float] factor - decay factor to be multiplied by
 * ================================================================== */
void Bar_Matrix::decay(double factor) {
 80a00b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a00bc:	4692      	mov	sl, r2
 80a00be:	469b      	mov	fp, r3
 80a00c0:	2600      	movs	r6, #0
    for (char i = 0; i < disp_width; i++) {
        for (char j = 0; j < disp_height; j++) {
            unsigned int color = bars[i]->getPixelColor(j);
 80a00c2:	4f28      	ldr	r7, [pc, #160]	; (80a0164 <_ZN10Bar_Matrix5decayEd+0xac>)
void Bar_Matrix::decay(double factor) {
 80a00c4:	b087      	sub	sp, #28
    for (char i = 0; i < disp_width; i++) {
 80a00c6:	4a28      	ldr	r2, [pc, #160]	; (80a0168 <_ZN10Bar_Matrix5decayEd+0xb0>)
 80a00c8:	b2f3      	uxtb	r3, r6
 80a00ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 80a00ce:	4293      	cmp	r3, r2
 80a00d0:	da44      	bge.n	80a015c <_ZN10Bar_Matrix5decayEd+0xa4>
            unsigned int color = bars[i]->getPixelColor(j);
 80a00d2:	f04f 0900 	mov.w	r9, #0
 80a00d6:	ea4f 0883 	mov.w	r8, r3, lsl #2
        for (char j = 0; j < disp_height; j++) {
 80a00da:	4b24      	ldr	r3, [pc, #144]	; (80a016c <_ZN10Bar_Matrix5decayEd+0xb4>)
 80a00dc:	fa5f f489 	uxtb.w	r4, r9
 80a00e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a00e4:	f109 0901 	add.w	r9, r9, #1
 80a00e8:	429c      	cmp	r4, r3
 80a00ea:	da35      	bge.n	80a0158 <_ZN10Bar_Matrix5decayEd+0xa0>
            unsigned int color = bars[i]->getPixelColor(j);
 80a00ec:	683b      	ldr	r3, [r7, #0]
 80a00ee:	b2a4      	uxth	r4, r4
 80a00f0:	f853 0008 	ldr.w	r0, [r3, r8]
 80a00f4:	4621      	mov	r1, r4
 80a00f6:	f003 fa26 	bl	80a3546 <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
 80a00fa:	4605      	mov	r5, r0
            bars[i]->setPixelColor(j, (char)(color >> 16) * factor,
            (char)(color >> 8) * factor,
 80a00fc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80a0100:	f009 f986 	bl	80a9410 <__aeabi_i2d>
 80a0104:	4652      	mov	r2, sl
 80a0106:	465b      	mov	r3, fp
 80a0108:	f009 f9ec 	bl	80a94e4 <__aeabi_dmul>
            bars[i]->setPixelColor(j, (char)(color >> 16) * factor,
 80a010c:	f009 fcc2 	bl	80a9a94 <__aeabi_d2uiz>
 80a0110:	b2c3      	uxtb	r3, r0
 80a0112:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80a0116:	9303      	str	r3, [sp, #12]
 80a0118:	f009 f97a 	bl	80a9410 <__aeabi_i2d>
 80a011c:	4652      	mov	r2, sl
 80a011e:	465b      	mov	r3, fp
 80a0120:	f009 f9e0 	bl	80a94e4 <__aeabi_dmul>
 80a0124:	f009 fcb6 	bl	80a9a94 <__aeabi_d2uiz>
 80a0128:	b2c3      	uxtb	r3, r0
 80a012a:	9304      	str	r3, [sp, #16]
 80a012c:	683b      	ldr	r3, [r7, #0]
            (char)(color) * factor);
 80a012e:	b2e8      	uxtb	r0, r5
            bars[i]->setPixelColor(j, (char)(color >> 16) * factor,
 80a0130:	9305      	str	r3, [sp, #20]
            (char)(color) * factor);
 80a0132:	f009 f96d 	bl	80a9410 <__aeabi_i2d>
 80a0136:	4652      	mov	r2, sl
 80a0138:	465b      	mov	r3, fp
 80a013a:	f009 f9d3 	bl	80a94e4 <__aeabi_dmul>
            bars[i]->setPixelColor(j, (char)(color >> 16) * factor,
 80a013e:	f009 fca9 	bl	80a9a94 <__aeabi_d2uiz>
 80a0142:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80a0146:	b2c0      	uxtb	r0, r0
 80a0148:	9000      	str	r0, [sp, #0]
 80a014a:	9805      	ldr	r0, [sp, #20]
 80a014c:	4621      	mov	r1, r4
 80a014e:	f850 0008 	ldr.w	r0, [r0, r8]
 80a0152:	f003 f9a1 	bl	80a3498 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        for (char j = 0; j < disp_height; j++) {
 80a0156:	e7c0      	b.n	80a00da <_ZN10Bar_Matrix5decayEd+0x22>
    for (char i = 0; i < disp_width; i++) {
 80a0158:	3601      	adds	r6, #1
 80a015a:	e7b4      	b.n	80a00c6 <_ZN10Bar_Matrix5decayEd+0xe>
        }
    }
}
 80a015c:	b007      	add	sp, #28
 80a015e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0162:	bf00      	nop
 80a0164:	20000070 	.word	0x20000070
 80a0168:	2000007e 	.word	0x2000007e
 80a016c:	2000007c 	.word	0x2000007c

080a0170 <_ZN10Bar_Matrix12decay_to_rgbEdiii>:
 * Parameters: [float] factor - decay factor to be multiplied by
 *             [int] r - the red value to fade to
 *             [int] g - the green value to fade to
 *             [int] b - the blue value to fade to
 * ================================================================== */
void Bar_Matrix::decay_to_rgb(double factor, int r, int g, int b) {
 80a0170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0174:	f04f 0900 	mov.w	r9, #0
 80a0178:	b085      	sub	sp, #20
 80a017a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    for (char i = 0; i < disp_width; i++) {
        for (char j = 0; j < disp_height; j++) {
            unsigned int color = bars[i]->getPixelColor(j);
 80a017e:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 80a023c <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xcc>
    for (char i = 0; i < disp_width; i++) {
 80a0182:	4b2c      	ldr	r3, [pc, #176]	; (80a0234 <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xc4>)
 80a0184:	fa5f f489 	uxtb.w	r4, r9
 80a0188:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a018c:	429c      	cmp	r4, r3
 80a018e:	da4d      	bge.n	80a022c <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xbc>
            unsigned int color = bars[i]->getPixelColor(j);
 80a0190:	f04f 0a00 	mov.w	sl, #0
 80a0194:	00a4      	lsls	r4, r4, #2
        for (char j = 0; j < disp_height; j++) {
 80a0196:	4b28      	ldr	r3, [pc, #160]	; (80a0238 <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xc8>)
 80a0198:	fa5f f58a 	uxtb.w	r5, sl
 80a019c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a01a0:	f10a 0a01 	add.w	sl, sl, #1
 80a01a4:	429d      	cmp	r5, r3
 80a01a6:	da3e      	bge.n	80a0226 <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xb6>
            unsigned int color = bars[i]->getPixelColor(j);
 80a01a8:	f8db 3000 	ldr.w	r3, [fp]
 80a01ac:	b2ad      	uxth	r5, r5
 80a01ae:	5918      	ldr	r0, [r3, r4]
 80a01b0:	4629      	mov	r1, r5
 80a01b2:	f003 f9c8 	bl	80a3546 <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
 80a01b6:	4680      	mov	r8, r0

            // Decay and do bounds checking on rgb values
            int rx = (int) ((char)(color >> 16) * factor);
 80a01b8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80a01bc:	f009 f928 	bl	80a9410 <__aeabi_i2d>
 80a01c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a01c4:	f009 f98e 	bl	80a94e4 <__aeabi_dmul>
 80a01c8:	f009 fc3c 	bl	80a9a44 <__aeabi_d2iz>
 80a01cc:	4606      	mov	r6, r0
            int gx = (int) ((char)(color >>  8) * factor);
 80a01ce:	f3c8 2007 	ubfx	r0, r8, #8, #8
 80a01d2:	f009 f91d 	bl	80a9410 <__aeabi_i2d>
 80a01d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a01da:	f009 f983 	bl	80a94e4 <__aeabi_dmul>
 80a01de:	f009 fc31 	bl	80a9a44 <__aeabi_d2iz>
 80a01e2:	4607      	mov	r7, r0
            int bx = (int) ((char)(color      ) * factor);
 80a01e4:	fa5f f088 	uxtb.w	r0, r8
 80a01e8:	f009 f912 	bl	80a9410 <__aeabi_i2d>
 80a01ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a01f0:	f009 f978 	bl	80a94e4 <__aeabi_dmul>
 80a01f4:	f009 fc26 	bl	80a9a44 <__aeabi_d2iz>
            if (rx < r) { rx = r; }
            if (gx < g) { gx = g; }
            if (bx < b) { bx = b; }

            bars[i]->setPixelColor(j, rx, gx, bx);
 80a01f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a01fa:	429f      	cmp	r7, r3
 80a01fc:	bfb8      	it	lt
 80a01fe:	461f      	movlt	r7, r3
 80a0200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a0202:	429e      	cmp	r6, r3
 80a0204:	bfb8      	it	lt
 80a0206:	461e      	movlt	r6, r3
 80a0208:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a020a:	b2f2      	uxtb	r2, r6
 80a020c:	4283      	cmp	r3, r0
 80a020e:	bfb8      	it	lt
 80a0210:	4603      	movlt	r3, r0
 80a0212:	f8db 0000 	ldr.w	r0, [fp]
 80a0216:	b2d9      	uxtb	r1, r3
 80a0218:	9100      	str	r1, [sp, #0]
 80a021a:	5900      	ldr	r0, [r0, r4]
 80a021c:	4629      	mov	r1, r5
 80a021e:	b2fb      	uxtb	r3, r7
 80a0220:	f003 f93a 	bl	80a3498 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        for (char j = 0; j < disp_height; j++) {
 80a0224:	e7b7      	b.n	80a0196 <_ZN10Bar_Matrix12decay_to_rgbEdiii+0x26>
    for (char i = 0; i < disp_width; i++) {
 80a0226:	f109 0901 	add.w	r9, r9, #1
 80a022a:	e7aa      	b.n	80a0182 <_ZN10Bar_Matrix12decay_to_rgbEdiii+0x12>
        }
    }
}
 80a022c:	b005      	add	sp, #20
 80a022e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0232:	bf00      	nop
 80a0234:	2000007e 	.word	0x2000007e
 80a0238:	2000007c 	.word	0x2000007c
 80a023c:	20000070 	.word	0x20000070

080a0240 <_ZN10Bar_Matrix8fill_barEiiii>:

void Bar_Matrix::fill_bar(int bar, int r, int g, int b) {
 80a0240:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a0244:	4616      	mov	r6, r2
    for (int j =0; j < disp_height; j++) {
 80a0246:	2400      	movs	r4, #0
 80a0248:	f8df 8030 	ldr.w	r8, [pc, #48]	; 80a027c <_ZN10Bar_Matrix8fill_barEiiii+0x3c>
        bars[bar]->setPixelColor(j, (uint8_t)r, (uint8_t)g, (uint8_t)b);
 80a024c:	f8df 9030 	ldr.w	r9, [pc, #48]	; 80a0280 <_ZN10Bar_Matrix8fill_barEiiii+0x40>
 80a0250:	008d      	lsls	r5, r1, #2
 80a0252:	b2df      	uxtb	r7, r3
    for (int j =0; j < disp_height; j++) {
 80a0254:	f9b8 3000 	ldrsh.w	r3, [r8]
 80a0258:	42a3      	cmp	r3, r4
 80a025a:	dd0c      	ble.n	80a0276 <_ZN10Bar_Matrix8fill_barEiiii+0x36>
        bars[bar]->setPixelColor(j, (uint8_t)r, (uint8_t)g, (uint8_t)b);
 80a025c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a025e:	f8d9 0000 	ldr.w	r0, [r9]
 80a0262:	b2db      	uxtb	r3, r3
 80a0264:	9300      	str	r3, [sp, #0]
 80a0266:	b2a1      	uxth	r1, r4
 80a0268:	463b      	mov	r3, r7
 80a026a:	5940      	ldr	r0, [r0, r5]
 80a026c:	b2f2      	uxtb	r2, r6
 80a026e:	f003 f913 	bl	80a3498 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    for (int j =0; j < disp_height; j++) {
 80a0272:	3401      	adds	r4, #1
 80a0274:	e7ee      	b.n	80a0254 <_ZN10Bar_Matrix8fill_barEiiii+0x14>
    }
}
 80a0276:	b003      	add	sp, #12
 80a0278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a027c:	2000007c 	.word	0x2000007c
 80a0280:	20000070 	.word	0x20000070

080a0284 <_ZN10Bar_Matrix11fill_matrixE11Color_Value>:
/* ================================================================== *
 * Function: fill_matrix
 * Description: Sets all pixel values in matrix to given color value
 * Parameters: [Color]* color - color to set matrix to
 * ================================================================== */
void Bar_Matrix::fill_matrix(Color_Value c) {
 80a0284:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    for (int i = 0; i < disp_width; i++) {
 80a0288:	2400      	movs	r4, #0
void Bar_Matrix::fill_matrix(Color_Value c) {
 80a028a:	ab02      	add	r3, sp, #8
 80a028c:	e903 0006 	stmdb	r3, {r1, r2}
    for (int i = 0; i < disp_width; i++) {
 80a0290:	4e0e      	ldr	r6, [pc, #56]	; (80a02cc <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x48>)
        for (int j =0; j< disp_height; j++) {
            bars[i]->setPixelColor(j, c.c);
 80a0292:	4f0f      	ldr	r7, [pc, #60]	; (80a02d0 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x4c>)
    for (int i = 0; i < disp_width; i++) {
 80a0294:	f9b6 3000 	ldrsh.w	r3, [r6]
 80a0298:	42a3      	cmp	r3, r4
 80a029a:	dd13      	ble.n	80a02c4 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x40>
        for (int j =0; j< disp_height; j++) {
 80a029c:	2500      	movs	r5, #0
 80a029e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 80a02d4 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x50>
 80a02a2:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80a02a6:	f9b9 3000 	ldrsh.w	r3, [r9]
 80a02aa:	42ab      	cmp	r3, r5
 80a02ac:	dd08      	ble.n	80a02c0 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x3c>
            bars[i]->setPixelColor(j, c.c);
 80a02ae:	683b      	ldr	r3, [r7, #0]
 80a02b0:	b2a9      	uxth	r1, r5
 80a02b2:	9a00      	ldr	r2, [sp, #0]
 80a02b4:	f853 0008 	ldr.w	r0, [r3, r8]
 80a02b8:	f003 f917 	bl	80a34ea <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        for (int j =0; j< disp_height; j++) {
 80a02bc:	3501      	adds	r5, #1
 80a02be:	e7f2      	b.n	80a02a6 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x22>
    for (int i = 0; i < disp_width; i++) {
 80a02c0:	3401      	adds	r4, #1
 80a02c2:	e7e7      	b.n	80a0294 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x10>
        }
    }
}
 80a02c4:	b003      	add	sp, #12
 80a02c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a02ca:	bf00      	nop
 80a02cc:	2000007e 	.word	0x2000007e
 80a02d0:	20000070 	.word	0x20000070
 80a02d4:	2000007c 	.word	0x2000007c

080a02d8 <_ZN10Bar_Matrix11init_matrixEv>:

/* ================================================================== *
 * Function: init_matrix
 * Description: Initializes the matrix to off
 * ================================================================== */
void Bar_Matrix::init_matrix() {
 80a02d8:	b570      	push	{r4, r5, r6, lr}
    for (int i = 0; i < disp_width; i++) {
 80a02da:	2400      	movs	r4, #0
 80a02dc:	4e09      	ldr	r6, [pc, #36]	; (80a0304 <_ZN10Bar_Matrix11init_matrixEv+0x2c>)
        // switch height and width based on orientation
        bars[i]->begin();
 80a02de:	4d0a      	ldr	r5, [pc, #40]	; (80a0308 <_ZN10Bar_Matrix11init_matrixEv+0x30>)
    for (int i = 0; i < disp_width; i++) {
 80a02e0:	f9b6 3000 	ldrsh.w	r3, [r6]
 80a02e4:	42a3      	cmp	r3, r4
 80a02e6:	dd0b      	ble.n	80a0300 <_ZN10Bar_Matrix11init_matrixEv+0x28>
        bars[i]->begin();
 80a02e8:	682b      	ldr	r3, [r5, #0]
 80a02ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80a02ee:	f002 f95a 	bl	80a25a6 <_ZN17Adafruit_NeoPixel5beginEv>
        bars[i]->show();
 80a02f2:	682b      	ldr	r3, [r5, #0]
 80a02f4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80a02f8:	f002 f962 	bl	80a25c0 <_ZN17Adafruit_NeoPixel4showEv>
    for (int i = 0; i < disp_width; i++) {
 80a02fc:	3401      	adds	r4, #1
 80a02fe:	e7ef      	b.n	80a02e0 <_ZN10Bar_Matrix11init_matrixEv+0x8>
    }
}
 80a0300:	bd70      	pop	{r4, r5, r6, pc}
 80a0302:	bf00      	nop
 80a0304:	2000007e 	.word	0x2000007e
 80a0308:	20000070 	.word	0x20000070

080a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>:

void Bar_Matrix::mix_pixel(unsigned char bar, unsigned short pixel, float factor, unsigned char r, unsigned char g, unsigned char b) {
 80a030c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0310:	460f      	mov	r7, r1
 80a0312:	4690      	mov	r8, r2
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a0314:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80a03e4 <_ZN10Bar_Matrix9mix_pixelEhtfhhh+0xd8>
void Bar_Matrix::mix_pixel(unsigned char bar, unsigned short pixel, float factor, unsigned char r, unsigned char g, unsigned char b) {
 80a0318:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a031c:	f8db 0000 	ldr.w	r0, [fp]
void Bar_Matrix::mix_pixel(unsigned char bar, unsigned short pixel, float factor, unsigned char r, unsigned char g, unsigned char b) {
 80a0320:	461c      	mov	r4, r3
 80a0322:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a0326:	4641      	mov	r1, r8
 80a0328:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
void Bar_Matrix::mix_pixel(unsigned char bar, unsigned short pixel, float factor, unsigned char r, unsigned char g, unsigned char b) {
 80a032c:	9300      	str	r3, [sp, #0]
 80a032e:	9201      	str	r2, [sp, #4]
 80a0330:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a0334:	f003 f907 	bl	80a3546 <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a0338:	4621      	mov	r1, r4
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a033a:	4606      	mov	r6, r0
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a033c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a0340:	f009 fc1c 	bl	80a9b7c <__aeabi_fsub>
 80a0344:	4605      	mov	r5, r0
    (char)(color >> 8) * (1-factor) + g * factor,
 80a0346:	f3c6 2007 	ubfx	r0, r6, #8, #8
 80a034a:	f009 fccd 	bl	80a9ce8 <__aeabi_i2f>
 80a034e:	4629      	mov	r1, r5
 80a0350:	f009 fd1e 	bl	80a9d90 <__aeabi_fmul>
 80a0354:	4681      	mov	r9, r0
 80a0356:	4650      	mov	r0, sl
 80a0358:	f009 fcc6 	bl	80a9ce8 <__aeabi_i2f>
 80a035c:	4621      	mov	r1, r4
 80a035e:	f009 fd17 	bl	80a9d90 <__aeabi_fmul>
 80a0362:	4601      	mov	r1, r0
 80a0364:	4648      	mov	r0, r9
 80a0366:	f009 fc0b 	bl	80a9b80 <__addsf3>
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a036a:	f009 ff13 	bl	80aa194 <__aeabi_f2uiz>
 80a036e:	fa5f fa80 	uxtb.w	sl, r0
 80a0372:	f3c6 4007 	ubfx	r0, r6, #16, #8
 80a0376:	f009 fcb7 	bl	80a9ce8 <__aeabi_i2f>
 80a037a:	4629      	mov	r1, r5
 80a037c:	f009 fd08 	bl	80a9d90 <__aeabi_fmul>
 80a0380:	9a01      	ldr	r2, [sp, #4]
 80a0382:	4681      	mov	r9, r0
 80a0384:	4610      	mov	r0, r2
 80a0386:	f009 fcaf 	bl	80a9ce8 <__aeabi_i2f>
 80a038a:	4621      	mov	r1, r4
 80a038c:	f009 fd00 	bl	80a9d90 <__aeabi_fmul>
 80a0390:	4601      	mov	r1, r0
 80a0392:	4648      	mov	r0, r9
 80a0394:	f009 fbf4 	bl	80a9b80 <__addsf3>
 80a0398:	f009 fefc 	bl	80aa194 <__aeabi_f2uiz>
 80a039c:	fa5f f980 	uxtb.w	r9, r0
    (char)(color) * (1-factor) + b * factor);
 80a03a0:	b2f0      	uxtb	r0, r6
 80a03a2:	f009 fca1 	bl	80a9ce8 <__aeabi_i2f>
 80a03a6:	4629      	mov	r1, r5
 80a03a8:	f009 fcf2 	bl	80a9d90 <__aeabi_fmul>
 80a03ac:	9b00      	ldr	r3, [sp, #0]
 80a03ae:	4605      	mov	r5, r0
 80a03b0:	4618      	mov	r0, r3
 80a03b2:	f009 fc99 	bl	80a9ce8 <__aeabi_i2f>
 80a03b6:	4621      	mov	r1, r4
 80a03b8:	f009 fcea 	bl	80a9d90 <__aeabi_fmul>
 80a03bc:	4601      	mov	r1, r0
 80a03be:	4628      	mov	r0, r5
 80a03c0:	f009 fbde 	bl	80a9b80 <__addsf3>
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a03c4:	f009 fee6 	bl	80aa194 <__aeabi_f2uiz>
 80a03c8:	4653      	mov	r3, sl
 80a03ca:	464a      	mov	r2, r9
 80a03cc:	4641      	mov	r1, r8
 80a03ce:	f8db b000 	ldr.w	fp, [fp]
 80a03d2:	b2c0      	uxtb	r0, r0
 80a03d4:	900c      	str	r0, [sp, #48]	; 0x30
 80a03d6:	f85b 0027 	ldr.w	r0, [fp, r7, lsl #2]
}
 80a03da:	b003      	add	sp, #12
 80a03dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a03e0:	f003 b85a 	b.w	80a3498 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
 80a03e4:	20000070 	.word	0x20000070

080a03e8 <_ZN10Bar_Matrix12clear_matrixEv>:

/* ================================================================== *
 * Function: clear_matrix
 * Description: Sets all pixel values to (0, 0, 0)
 * ================================================================== */
void Bar_Matrix::clear_matrix() {
 80a03e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for (int i = 0; i < disp_width; i++) {
 80a03ec:	2400      	movs	r4, #0
 80a03ee:	4e0e      	ldr	r6, [pc, #56]	; (80a0428 <_ZN10Bar_Matrix12clear_matrixEv+0x40>)
        for (int j =0; j< disp_height; j++) {
            bars[i]->setPixelColor(j, 0);
 80a03f0:	4f0e      	ldr	r7, [pc, #56]	; (80a042c <_ZN10Bar_Matrix12clear_matrixEv+0x44>)
    for (int i = 0; i < disp_width; i++) {
 80a03f2:	f9b6 3000 	ldrsh.w	r3, [r6]
 80a03f6:	42a3      	cmp	r3, r4
 80a03f8:	dd13      	ble.n	80a0422 <_ZN10Bar_Matrix12clear_matrixEv+0x3a>
        for (int j =0; j< disp_height; j++) {
 80a03fa:	2500      	movs	r5, #0
 80a03fc:	f8df 9030 	ldr.w	r9, [pc, #48]	; 80a0430 <_ZN10Bar_Matrix12clear_matrixEv+0x48>
 80a0400:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80a0404:	f9b9 3000 	ldrsh.w	r3, [r9]
 80a0408:	42ab      	cmp	r3, r5
 80a040a:	dd08      	ble.n	80a041e <_ZN10Bar_Matrix12clear_matrixEv+0x36>
            bars[i]->setPixelColor(j, 0);
 80a040c:	683b      	ldr	r3, [r7, #0]
 80a040e:	b2a9      	uxth	r1, r5
 80a0410:	2200      	movs	r2, #0
 80a0412:	f853 0008 	ldr.w	r0, [r3, r8]
 80a0416:	f003 f868 	bl	80a34ea <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        for (int j =0; j< disp_height; j++) {
 80a041a:	3501      	adds	r5, #1
 80a041c:	e7f2      	b.n	80a0404 <_ZN10Bar_Matrix12clear_matrixEv+0x1c>
    for (int i = 0; i < disp_width; i++) {
 80a041e:	3401      	adds	r4, #1
 80a0420:	e7e7      	b.n	80a03f2 <_ZN10Bar_Matrix12clear_matrixEv+0xa>
        }
    }
}
 80a0422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0426:	bf00      	nop
 80a0428:	2000007e 	.word	0x2000007e
 80a042c:	20000070 	.word	0x20000070
 80a0430:	2000007c 	.word	0x2000007c

080a0434 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection>:
Bar_Matrix::Bar_Matrix(short num_bars, short bar_len, const char led_type, const char* pins, Beat_Detection* beat_detection) {
 80a0434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0438:	4604      	mov	r4, r0
 80a043a:	b097      	sub	sp, #92	; 0x5c
 80a043c:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 80a0440:	460d      	mov	r5, r1
 80a0442:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a0446:	f003 f949 	bl	80a36dc <_ZN10PongPaddleC1Ev>
 80a044a:	f504 70c8 	add.w	r0, r4, #400	; 0x190
 80a044e:	f003 f945 	bl	80a36dc <_ZN10PongPaddleC1Ev>
 80a0452:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 80a0456:	f003 f8bd 	bl	80a35d4 <_ZN8PongBallC1Ev>
    disp_height = bar_len; //(orientation) ? bar_len : num_bars;
 80a045a:	4b95      	ldr	r3, [pc, #596]	; (80a06b0 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x27c>)
 80a045c:	9908      	ldr	r1, [sp, #32]
    disp_width = num_bars; //(orientation) ? num_bars : bar_len;
 80a045e:	4a95      	ldr	r2, [pc, #596]	; (80a06b4 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x280>)
    disp_height = bar_len; //(orientation) ? bar_len : num_bars;
 80a0460:	8019      	strh	r1, [r3, #0]
    display = new unsigned long*[disp_width];
 80a0462:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
 80a0466:	428d      	cmp	r5, r1
 80a0468:	bf2c      	ite	cs
 80a046a:	f04f 3aff 	movcs.w	sl, #4294967295	; 0xffffffff
 80a046e:	ea4f 0a85 	movcc.w	sl, r5, lsl #2
 80a0472:	4650      	mov	r0, sl
 80a0474:	4690      	mov	r8, r2
 80a0476:	4699      	mov	r9, r3
    disp_width = num_bars; //(orientation) ? num_bars : bar_len;
 80a0478:	8015      	strh	r5, [r2, #0]
    display = new unsigned long*[disp_width];
 80a047a:	f7ff fe10 	bl	80a009e <_Znaj>
    for (int i = 0; i < disp_width; i++)
 80a047e:	2600      	movs	r6, #0
    display[i] = new unsigned long[disp_height];
 80a0480:	f06f 4b60 	mvn.w	fp, #3758096384	; 0xe0000000
    display = new unsigned long*[disp_width];
 80a0484:	4f8c      	ldr	r7, [pc, #560]	; (80a06b8 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x284>)
 80a0486:	6038      	str	r0, [r7, #0]
    for (int i = 0; i < disp_width; i++)
 80a0488:	f9b8 2000 	ldrsh.w	r2, [r8]
 80a048c:	42b2      	cmp	r2, r6
 80a048e:	dd0f      	ble.n	80a04b0 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x7c>
    display[i] = new unsigned long[disp_height];
 80a0490:	f9b9 0000 	ldrsh.w	r0, [r9]
 80a0494:	683b      	ldr	r3, [r7, #0]
 80a0496:	4558      	cmp	r0, fp
 80a0498:	bf2c      	ite	cs
 80a049a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a049e:	0080      	lslcc	r0, r0, #2
 80a04a0:	9307      	str	r3, [sp, #28]
 80a04a2:	f7ff fdfc 	bl	80a009e <_Znaj>
 80a04a6:	9b07      	ldr	r3, [sp, #28]
 80a04a8:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    for (int i = 0; i < disp_width; i++)
 80a04ac:	3601      	adds	r6, #1
 80a04ae:	e7eb      	b.n	80a0488 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x54>
    bars = new Adafruit_NeoPixel*[num_bars];
 80a04b0:	4650      	mov	r0, sl
 80a04b2:	f7ff fdf4 	bl	80a009e <_Znaj>
 80a04b6:	4b81      	ldr	r3, [pc, #516]	; (80a06bc <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x288>)
 80a04b8:	4626      	mov	r6, r4
 80a04ba:	2700      	movs	r7, #0
 80a04bc:	469a      	mov	sl, r3
        bouncing_line_speeds[i] = (float)random(5, 10) / 15.0;
 80a04be:	f8df 9214 	ldr.w	r9, [pc, #532]	; 80a06d4 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x2a0>
        bouncing_line_colors[i][0] = bd->r();
 80a04c2:	f8df b20c 	ldr.w	fp, [pc, #524]	; 80a06d0 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x29c>
    bars = new Adafruit_NeoPixel*[num_bars];
 80a04c6:	6018      	str	r0, [r3, #0]
    for(short i = 0; i < num_bars; i++) {
 80a04c8:	f1a4 0804 	sub.w	r8, r4, #4
 80a04cc:	b23b      	sxth	r3, r7
 80a04ce:	429d      	cmp	r5, r3
 80a04d0:	dd49      	ble.n	80a0566 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x132>
        bars[i] = new Adafruit_NeoPixel(bar_len, pins[i], led_type);
 80a04d2:	2010      	movs	r0, #16
 80a04d4:	f7ff fde1 	bl	80a009a <_Znwj>
 80a04d8:	9007      	str	r0, [sp, #28]
 80a04da:	b130      	cbz	r0, 80a04ea <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0xb6>
 80a04dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80a04de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a04e0:	5dd2      	ldrb	r2, [r2, r7]
 80a04e2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80a04e6:	f002 f847 	bl	80a2578 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a04ea:	f8da 3000 	ldr.w	r3, [sl]
 80a04ee:	9a07      	ldr	r2, [sp, #28]
        bouncing_line_lengths[i] = random(10, STRIP_LENGTH / 2);
 80a04f0:	211d      	movs	r1, #29
        bars[i] = new Adafruit_NeoPixel(bar_len, pins[i], led_type);
 80a04f2:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
        bouncing_line_lengths[i] = random(10, STRIP_LENGTH / 2);
 80a04f6:	200a      	movs	r0, #10
 80a04f8:	f004 f979 	bl	80a47ee <_Z6randomii>
        bouncing_line_positions[i] = random(0, STRIP_LENGTH);
 80a04fc:	213a      	movs	r1, #58	; 0x3a
        bouncing_line_lengths[i] = random(10, STRIP_LENGTH / 2);
 80a04fe:	f848 0f04 	str.w	r0, [r8, #4]!
        bouncing_line_positions[i] = random(0, STRIP_LENGTH);
 80a0502:	2000      	movs	r0, #0
 80a0504:	f004 f973 	bl	80a47ee <_Z6randomii>
 80a0508:	f009 fbee 	bl	80a9ce8 <__aeabi_i2f>
        if (random(0, 10) > 5) bouncing_line_directions[i] = 1;
 80a050c:	210a      	movs	r1, #10
        bouncing_line_positions[i] = random(0, STRIP_LENGTH);
 80a050e:	f8c8 0020 	str.w	r0, [r8, #32]
        if (random(0, 10) > 5) bouncing_line_directions[i] = 1;
 80a0512:	2000      	movs	r0, #0
 80a0514:	f004 f96b 	bl	80a47ee <_Z6randomii>
        else                bouncing_line_directions[i] = -1;
 80a0518:	2805      	cmp	r0, #5
 80a051a:	bfcc      	ite	gt
 80a051c:	2301      	movgt	r3, #1
 80a051e:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
        bouncing_line_speeds[i] = (float)random(5, 10) / 15.0;
 80a0522:	210a      	movs	r1, #10
 80a0524:	f8c8 3060 	str.w	r3, [r8, #96]	; 0x60
 80a0528:	2005      	movs	r0, #5
 80a052a:	f004 f960 	bl	80a47ee <_Z6randomii>
 80a052e:	f009 fbdb 	bl	80a9ce8 <__aeabi_i2f>
 80a0532:	4649      	mov	r1, r9
 80a0534:	f009 fce0 	bl	80a9ef8 <__aeabi_fdiv>
 80a0538:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
        bouncing_line_colors[i][0] = bd->r();
 80a053c:	f8db 0000 	ldr.w	r0, [fp]
 80a0540:	f001 fdcf 	bl	80a20e2 <_ZN14Beat_Detection1rEv>
 80a0544:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80
        bouncing_line_colors[i][1] = bd->g();
 80a0548:	f8db 0000 	ldr.w	r0, [fp]
 80a054c:	f001 fdcb 	bl	80a20e6 <_ZN14Beat_Detection1gEv>
 80a0550:	f8c6 0084 	str.w	r0, [r6, #132]	; 0x84
        bouncing_line_colors[i][2] = bd->b();
 80a0554:	f8db 0000 	ldr.w	r0, [fp]
 80a0558:	f001 fdc7 	bl	80a20ea <_ZN14Beat_Detection1bEv>
 80a055c:	3701      	adds	r7, #1
 80a055e:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
    for(short i = 0; i < num_bars; i++) {
 80a0562:	360c      	adds	r6, #12
 80a0564:	e7b2      	b.n	80a04cc <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x98>
    snakes[0] = Snake(1, 30, -30, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0566:	2301      	movs	r3, #1
 80a0568:	2519      	movs	r5, #25
 80a056a:	2132      	movs	r1, #50	; 0x32
 80a056c:	221e      	movs	r2, #30
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a056e:	2764      	movs	r7, #100	; 0x64
    snakes[0] = Snake(1, 30, -30, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0570:	e9c4 3238 	strd	r3, r2, [r4, #224]	; 0xe0
 80a0574:	e9c4 513d 	strd	r5, r1, [r4, #244]	; 0xf4
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0578:	204b      	movs	r0, #75	; 0x4b
 80a057a:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    snakes[0] = Snake(1, 30, -30, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a057e:	f06f 021d 	mvn.w	r2, #29
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0582:	2196      	movs	r1, #150	; 0x96
    snakes[0] = Snake(1, 30, -30, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0584:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0588:	e9c4 7146 	strd	r7, r1, [r4, #280]	; 0x118
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a058c:	e9c4 014d 	strd	r0, r1, [r4, #308]	; 0x134
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0590:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0594:	21e1      	movs	r1, #225	; 0xe1
    snakes[3] = Snake(-1, 15, NUM_BARS*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0596:	f04f 0a0f 	mov.w	sl, #15
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a059a:	e9c4 023f 	strd	r0, r2, [r4, #252]	; 0xfc
    snakes[3] = Snake(-1, 15, NUM_BARS*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a059e:	e9c4 124f 	strd	r1, r2, [r4, #316]	; 0x13c
 80a05a2:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05a6:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
 80a05aa:	25e8      	movs	r5, #232	; 0xe8
    snakes[3] = Snake(-1, 15, NUM_BARS*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05ac:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
 80a05b0:	e9c4 a251 	strd	sl, r2, [r4, #324]	; 0x144
 80a05b4:	222e      	movs	r2, #46	; 0x2e
    snakes[0].posTicks = 0;
 80a05b6:	f04f 0800 	mov.w	r8, #0
    pongPaddles[0] = PongPaddle(15, 0, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a05ba:	f04f 0900 	mov.w	r9, #0
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05be:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05c2:	2614      	movs	r6, #20
 80a05c4:	25b9      	movs	r5, #185	; 0xb9
    color_table_idx++;
 80a05c6:	2104      	movs	r1, #4
    snakes[3] = Snake(-1, 15, NUM_BARS*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05c8:	e9c4 c256 	strd	ip, r2, [r4, #344]	; 0x158
    pongPaddles[0] = PongPaddle(15, 0, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a05cc:	f8df b108 	ldr.w	fp, [pc, #264]	; 80a06d8 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x2a4>
    color_table_idx++;
 80a05d0:	4a3b      	ldr	r2, [pc, #236]	; (80a06c0 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x28c>)
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05d2:	e9c4 6549 	strd	r6, r5, [r4, #292]	; 0x124
    snakes[0].ticksNeeded = 1;
 80a05d6:	e9c4 833b 	strd	r8, r3, [r4, #236]	; 0xec
    snakes[1].ticksNeeded = 1;
 80a05da:	e9c4 8343 	strd	r8, r3, [r4, #268]	; 0x10c
    snakes[2].ticksNeeded = 1;
 80a05de:	e9c4 834b 	strd	r8, r3, [r4, #300]	; 0x12c
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05e2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    snakes[3] = Snake(-1, 15, NUM_BARS*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05e6:	f8c4 7154 	str.w	r7, [r4, #340]	; 0x154
    color_table_idx++;
 80a05ea:	6011      	str	r1, [r2, #0]
    pongPaddles[0] = PongPaddle(15, 0, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a05ec:	a80a      	add	r0, sp, #40	; 0x28
    snakes[3].ticksNeeded = 1;
 80a05ee:	e9c4 8353 	strd	r8, r3, [r4, #332]	; 0x14c
    pongPaddles[0] = PongPaddle(15, 0, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a05f2:	464a      	mov	r2, r9
 80a05f4:	4651      	mov	r1, sl
 80a05f6:	e9cd 7704 	strd	r7, r7, [sp, #16]
 80a05fa:	e9cd a702 	strd	sl, r7, [sp, #8]
 80a05fe:	4b31      	ldr	r3, [pc, #196]	; (80a06c4 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x290>)
 80a0600:	f8cd b004 	str.w	fp, [sp, #4]
 80a0604:	f8cd 9000 	str.w	r9, [sp]
 80a0608:	f504 76b0 	add.w	r6, r4, #352	; 0x160
 80a060c:	ad0a      	add	r5, sp, #40	; 0x28
 80a060e:	f003 f866 	bl	80a36de <_ZN10PongPaddleC1Eiffffjiii>
 80a0612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0614:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a0616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0618:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a061a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80a061e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    pongPaddles[1] = PongPaddle(15, NUM_BARS-1, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a0622:	4651      	mov	r1, sl
 80a0624:	4b27      	ldr	r3, [pc, #156]	; (80a06c4 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x290>)
 80a0626:	4a28      	ldr	r2, [pc, #160]	; (80a06c8 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x294>)
 80a0628:	f8cd b004 	str.w	fp, [sp, #4]
 80a062c:	f8cd 9000 	str.w	r9, [sp]
 80a0630:	a80a      	add	r0, sp, #40	; 0x28
 80a0632:	e9cd 7704 	strd	r7, r7, [sp, #16]
 80a0636:	e9cd a702 	strd	sl, r7, [sp, #8]
 80a063a:	f504 76c8 	add.w	r6, r4, #400	; 0x190
 80a063e:	f003 f84e 	bl	80a36de <_ZN10PongPaddleC1Eiffffjiii>
 80a0642:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80a0646:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80a064a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a064c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80a0650:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a0652:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80a0656:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    pongBall = PongBall(3, 0.0625, 0.80, 15, 100, 100, 100);
 80a065a:	e9cd 7702 	strd	r7, r7, [sp, #8]
 80a065e:	e9cd a700 	strd	sl, r7, [sp]
 80a0662:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 80a0666:	2103      	movs	r1, #3
 80a0668:	4b18      	ldr	r3, [pc, #96]	; (80a06cc <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x298>)
 80a066a:	a80a      	add	r0, sp, #40	; 0x28
 80a066c:	f504 77e0 	add.w	r7, r4, #448	; 0x1c0
 80a0670:	ae0a      	add	r6, sp, #40	; 0x28
 80a0672:	f002 ffb1 	bl	80a35d8 <_ZN8PongBallC1Eiffjiii>
 80a0676:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a0678:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80a067a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a067c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80a067e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80a0682:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    last_beat_count = 0;
 80a0686:	f8c4 81f0 	str.w	r8, [r4, #496]	; 0x1f0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a068a:	f003 f9f1 	bl	80a3a70 <HAL_Timer_Get_Milli_Seconds>
    bass_slide_ema = 0.0;
 80a068e:	f8c4 9214 	str.w	r9, [r4, #532]	; 0x214
    bass_slide_millis = millis();
 80a0692:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
    init_matrix();
 80a0696:	4620      	mov	r0, r4
 80a0698:	f7ff fe1e 	bl	80a02d8 <_ZN10Bar_Matrix11init_matrixEv>
    clear_matrix();
 80a069c:	4620      	mov	r0, r4
 80a069e:	f7ff fea3 	bl	80a03e8 <_ZN10Bar_Matrix12clear_matrixEv>
}
 80a06a2:	4620      	mov	r0, r4
    bd = beat_detection;
 80a06a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80a06a6:	4b0a      	ldr	r3, [pc, #40]	; (80a06d0 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x29c>)
 80a06a8:	601a      	str	r2, [r3, #0]
}
 80a06aa:	b017      	add	sp, #92	; 0x5c
 80a06ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a06b0:	2000007c 	.word	0x2000007c
 80a06b4:	2000007e 	.word	0x2000007e
 80a06b8:	20000080 	.word	0x20000080
 80a06bc:	20000070 	.word	0x20000070
 80a06c0:	20000078 	.word	0x20000078
 80a06c4:	41e80000 	.word	0x41e80000
 80a06c8:	40e00000 	.word	0x40e00000
 80a06cc:	3f4ccccd 	.word	0x3f4ccccd
 80a06d0:	20000074 	.word	0x20000074
 80a06d4:	41700000 	.word	0x41700000
 80a06d8:	3f666666 	.word	0x3f666666

080a06dc <_ZN10Bar_Matrix8show_allEv>:

/* ================================================================== *
 * Function: show_all
 * Description: drives pixels in physical matrix to current values
 * ================================================================== */
void Bar_Matrix::show_all() {
 80a06dc:	2300      	movs	r3, #0
 80a06de:	b570      	push	{r4, r5, r6, lr}
    for (char i = 0; i < disp_width; i++) {
 80a06e0:	4e07      	ldr	r6, [pc, #28]	; (80a0700 <_ZN10Bar_Matrix8show_allEv+0x24>)
        bars[i]->show();
 80a06e2:	4d08      	ldr	r5, [pc, #32]	; (80a0704 <_ZN10Bar_Matrix8show_allEv+0x28>)
    for (char i = 0; i < disp_width; i++) {
 80a06e4:	f9b6 2000 	ldrsh.w	r2, [r6]
 80a06e8:	1c5c      	adds	r4, r3, #1
 80a06ea:	b2db      	uxtb	r3, r3
 80a06ec:	4293      	cmp	r3, r2
 80a06ee:	da06      	bge.n	80a06fe <_ZN10Bar_Matrix8show_allEv+0x22>
        bars[i]->show();
 80a06f0:	682a      	ldr	r2, [r5, #0]
 80a06f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80a06f6:	f001 ff63 	bl	80a25c0 <_ZN17Adafruit_NeoPixel4showEv>
    for (char i = 0; i < disp_width; i++) {
 80a06fa:	4623      	mov	r3, r4
 80a06fc:	e7f2      	b.n	80a06e4 <_ZN10Bar_Matrix8show_allEv+0x8>
    }
}
 80a06fe:	bd70      	pop	{r4, r5, r6, pc}
 80a0700:	2000007e 	.word	0x2000007e
 80a0704:	20000070 	.word	0x20000070

080a0708 <_ZN10Bar_Matrix8bar_testEv>:
/* ================================================================== *
 * Function: bar_test
 * Description: Turns on bars in order to test wiring
 * Parameters: None
 * ================================================================== */
void Bar_Matrix::bar_test() {
 80a0708:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    for (int i = 0; i < STRIP_LENGTH; i++)
 80a070c:	2400      	movs	r4, #0
    bars[int(millis()/1000) % NUM_BARS]->setPixelColor(i, 64, 64, 64);
 80a070e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80a0712:	2640      	movs	r6, #64	; 0x40
 80a0714:	f8df 802c 	ldr.w	r8, [pc, #44]	; 80a0744 <_ZN10Bar_Matrix8bar_testEv+0x3c>
 80a0718:	f8d8 5000 	ldr.w	r5, [r8]
 80a071c:	f003 f9a8 	bl	80a3a70 <HAL_Timer_Get_Milli_Seconds>
 80a0720:	fbb0 f0f7 	udiv	r0, r0, r7
 80a0724:	2340      	movs	r3, #64	; 0x40
 80a0726:	9600      	str	r6, [sp, #0]
 80a0728:	f000 0007 	and.w	r0, r0, #7
 80a072c:	b2a1      	uxth	r1, r4
 80a072e:	461a      	mov	r2, r3
 80a0730:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    for (int i = 0; i < STRIP_LENGTH; i++)
 80a0734:	3401      	adds	r4, #1
    bars[int(millis()/1000) % NUM_BARS]->setPixelColor(i, 64, 64, 64);
 80a0736:	f002 feaf 	bl	80a3498 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    for (int i = 0; i < STRIP_LENGTH; i++)
 80a073a:	2c3a      	cmp	r4, #58	; 0x3a
 80a073c:	d1ec      	bne.n	80a0718 <_ZN10Bar_Matrix8bar_testEv+0x10>
}
 80a073e:	b002      	add	sp, #8
 80a0740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0744:	20000070 	.word	0x20000070

080a0748 <_ZN10Bar_Matrix14bouncing_linesEv>:
/* ================================================================== *
 * Function: bouncing_lines
 * Description: Bounces a solid line of LEDs up and down in each matrix bar
 * Parameters: none
 * ================================================================== */
void Bar_Matrix::bouncing_lines() {
 80a0748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a074c:	4606      	mov	r6, r0
 80a074e:	4605      	mov	r5, r0
    for (int i = 0; i < disp_width; i++) {
 80a0750:	2700      	movs	r7, #0
        if (bouncing_line_directions[i] == 1) {
            if (bottom > 0) mix_pixel(i, bottom-1, 1, 0, 0, 0);
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, bouncing_line_colors[i][0], bouncing_line_colors[i][1], bouncing_line_colors[i][2]);//bd->r(), bd->g(), bd->b());
        } else {
            if (bottom > 0) mix_pixel(i, bottom-1, 1, bouncing_line_colors[i][0], bouncing_line_colors[i][1], bouncing_line_colors[i][2]);//bd->r(), bd->g(), bd->b());
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, 0, 0, 0);
 80a0752:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
void Bar_Matrix::bouncing_lines() {
 80a0756:	b087      	sub	sp, #28
 80a0758:	1f04      	subs	r4, r0, #4
    for (int i = 0; i < disp_width; i++) {
 80a075a:	4b6d      	ldr	r3, [pc, #436]	; (80a0910 <_ZN10Bar_Matrix14bouncing_linesEv+0x1c8>)
 80a075c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a0760:	42bb      	cmp	r3, r7
 80a0762:	f340 80d1 	ble.w	80a0908 <_ZN10Bar_Matrix14bouncing_linesEv+0x1c0>
        int bottom = bouncing_line_positions[i];
 80a0766:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0768:	f009 fcee 	bl	80aa148 <__aeabi_f2iz>
        if (bouncing_line_directions[i] == 1) {
 80a076c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80a076e:	fa5f f987 	uxtb.w	r9, r7
 80a0772:	2b01      	cmp	r3, #1
 80a0774:	fa1f f880 	uxth.w	r8, r0
 80a0778:	f040 8091 	bne.w	80a089e <_ZN10Bar_Matrix14bouncing_linesEv+0x156>
            if (bottom > 0) mix_pixel(i, bottom-1, 1, 0, 0, 0);
 80a077c:	2800      	cmp	r0, #0
 80a077e:	dd0b      	ble.n	80a0798 <_ZN10Bar_Matrix14bouncing_linesEv+0x50>
 80a0780:	2300      	movs	r3, #0
 80a0782:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80a0786:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a078a:	9300      	str	r3, [sp, #0]
 80a078c:	4649      	mov	r1, r9
 80a078e:	4653      	mov	r3, sl
 80a0790:	4630      	mov	r0, r6
 80a0792:	b292      	uxth	r2, r2
 80a0794:	f7ff fdba 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, bouncing_line_colors[i][0], bouncing_line_colors[i][1], bouncing_line_colors[i][2]);//bd->r(), bd->g(), bd->b());
 80a0798:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 80a079c:	6862      	ldr	r2, [r4, #4]
 80a079e:	9302      	str	r3, [sp, #8]
 80a07a0:	f895 3084 	ldrb.w	r3, [r5, #132]	; 0x84
 80a07a4:	3201      	adds	r2, #1
 80a07a6:	9301      	str	r3, [sp, #4]
 80a07a8:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 80a07ac:	4442      	add	r2, r8
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, 0, 0, 0);
 80a07ae:	b292      	uxth	r2, r2
 80a07b0:	4649      	mov	r1, r9
 80a07b2:	4630      	mov	r0, r6
 80a07b4:	9300      	str	r3, [sp, #0]
 80a07b6:	4653      	mov	r3, sl
 80a07b8:	f7ff fda8 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        }

        // Move the line
        bouncing_line_positions[i] += bouncing_line_directions[i] * bouncing_line_speeds[i];
 80a07bc:	f8d4 b064 	ldr.w	fp, [r4, #100]	; 0x64
 80a07c0:	4658      	mov	r0, fp
 80a07c2:	f009 fa91 	bl	80a9ce8 <__aeabi_i2f>
 80a07c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80a07c8:	f009 fae2 	bl	80a9d90 <__aeabi_fmul>
 80a07cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80a07ce:	f009 f9d7 	bl	80a9b80 <__addsf3>
 80a07d2:	6260      	str	r0, [r4, #36]	; 0x24

        // Ensure we are moving in the proper direction
        if (bouncing_line_positions[i] < -.5*bouncing_line_lengths[i] && bouncing_line_directions[i] < 0) {
 80a07d4:	f008 fe2e 	bl	80a9434 <__aeabi_f2d>
 80a07d8:	4680      	mov	r8, r0
 80a07da:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80a07de:	4689      	mov	r9, r1
 80a07e0:	f008 fe16 	bl	80a9410 <__aeabi_i2d>
 80a07e4:	4602      	mov	r2, r0
 80a07e6:	460b      	mov	r3, r1
 80a07e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a07ec:	2200      	movs	r2, #0
 80a07ee:	4b49      	ldr	r3, [pc, #292]	; (80a0914 <_ZN10Bar_Matrix14bouncing_linesEv+0x1cc>)
 80a07f0:	f008 fe78 	bl	80a94e4 <__aeabi_dmul>
 80a07f4:	4602      	mov	r2, r0
 80a07f6:	460b      	mov	r3, r1
 80a07f8:	4640      	mov	r0, r8
 80a07fa:	4649      	mov	r1, r9
 80a07fc:	f009 f8e4 	bl	80a99c8 <__aeabi_dcmplt>
 80a0800:	2800      	cmp	r0, #0
 80a0802:	d066      	beq.n	80a08d2 <_ZN10Bar_Matrix14bouncing_linesEv+0x18a>
 80a0804:	f1bb 0f00 	cmp.w	fp, #0
 80a0808:	da63      	bge.n	80a08d2 <_ZN10Bar_Matrix14bouncing_linesEv+0x18a>
            bouncing_line_directions[i] = 1;
 80a080a:	2301      	movs	r3, #1
            if (random(0, 10) > 5) {
 80a080c:	210a      	movs	r1, #10
 80a080e:	2000      	movs	r0, #0
            bouncing_line_directions[i] = 1;
 80a0810:	6623      	str	r3, [r4, #96]	; 0x60
            if (random(0, 10) > 5) {
 80a0812:	f003 ffec 	bl	80a47ee <_Z6randomii>
 80a0816:	2805      	cmp	r0, #5
 80a0818:	dd1a      	ble.n	80a0850 <_ZN10Bar_Matrix14bouncing_linesEv+0x108>
                int newlength = random(10, STRIP_LENGTH / 2);
 80a081a:	211d      	movs	r1, #29
 80a081c:	200a      	movs	r0, #10
 80a081e:	f003 ffe6 	bl	80a47ee <_Z6randomii>
                if (newlength > bouncing_line_lengths[i]) {
 80a0822:	6822      	ldr	r2, [r4, #0]
 80a0824:	0fc3      	lsrs	r3, r0, #31
 80a0826:	4282      	cmp	r2, r0
                    bouncing_line_positions[i] = (-1*newlength/2) - (newlength/2 - bouncing_line_lengths[i]/2);
 80a0828:	4403      	add	r3, r0
 80a082a:	bfb8      	it	lt
 80a082c:	eb02 72d2 	addlt.w	r2, r2, r2, lsr #31
                int newlength = random(10, STRIP_LENGTH / 2);
 80a0830:	4680      	mov	r8, r0
                    bouncing_line_positions[i] = (-1*newlength/2) - (newlength/2 - bouncing_line_lengths[i]/2);
 80a0832:	bfb8      	it	lt
 80a0834:	1052      	asrlt	r2, r2, #1
 80a0836:	ea4f 0063 	mov.w	r0, r3, asr #1
 80a083a:	f1c0 0000 	rsb	r0, r0, #0
 80a083e:	bfbc      	itt	lt
 80a0840:	ebc2 0363 	rsblt	r3, r2, r3, asr #1
 80a0844:	1ac0      	sublt	r0, r0, r3
                } else {
                    bouncing_line_positions[i] = -1 * newlength / 2;
 80a0846:	f009 fa4f 	bl	80a9ce8 <__aeabi_i2f>
                }

                bouncing_line_lengths[i] = newlength;
 80a084a:	f8c4 8000 	str.w	r8, [r4]
 80a084e:	6220      	str	r0, [r4, #32]
            }

            if (random(0, 10) > 7) {
 80a0850:	210a      	movs	r1, #10
 80a0852:	2000      	movs	r0, #0
 80a0854:	f003 ffcb 	bl	80a47ee <_Z6randomii>
 80a0858:	2807      	cmp	r0, #7
 80a085a:	dd09      	ble.n	80a0870 <_ZN10Bar_Matrix14bouncing_linesEv+0x128>
                bouncing_line_speeds[i] = (float)random(5, 10) / 15.0;
 80a085c:	210a      	movs	r1, #10
 80a085e:	2005      	movs	r0, #5
 80a0860:	f003 ffc5 	bl	80a47ee <_Z6randomii>
 80a0864:	f009 fa40 	bl	80a9ce8 <__aeabi_i2f>
 80a0868:	492b      	ldr	r1, [pc, #172]	; (80a0918 <_ZN10Bar_Matrix14bouncing_linesEv+0x1d0>)
 80a086a:	f009 fb45 	bl	80a9ef8 <__aeabi_fdiv>
 80a086e:	6420      	str	r0, [r4, #64]	; 0x40
            bouncing_line_colors[i][1] = bd->g();
            bouncing_line_colors[i][2] = bd->b();
        } else if (bouncing_line_positions[i] > STRIP_LENGTH-.5*bouncing_line_lengths[i] && bouncing_line_directions[i] > 0) {
            bouncing_line_directions[i] = -1;

            bouncing_line_colors[i][0] = bd->r();
 80a0870:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80a0924 <_ZN10Bar_Matrix14bouncing_linesEv+0x1dc>
 80a0874:	f8d8 0000 	ldr.w	r0, [r8]
 80a0878:	f001 fc33 	bl	80a20e2 <_ZN14Beat_Detection1rEv>
 80a087c:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
            bouncing_line_colors[i][1] = bd->g();
 80a0880:	f8d8 0000 	ldr.w	r0, [r8]
 80a0884:	f001 fc2f 	bl	80a20e6 <_ZN14Beat_Detection1gEv>
 80a0888:	f8c5 0084 	str.w	r0, [r5, #132]	; 0x84
            bouncing_line_colors[i][2] = bd->b();
 80a088c:	f8d8 0000 	ldr.w	r0, [r8]
 80a0890:	f001 fc2b 	bl	80a20ea <_ZN14Beat_Detection1bEv>
 80a0894:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
    for (int i = 0; i < disp_width; i++) {
 80a0898:	3701      	adds	r7, #1
 80a089a:	350c      	adds	r5, #12
 80a089c:	e75d      	b.n	80a075a <_ZN10Bar_Matrix14bouncing_linesEv+0x12>
            if (bottom > 0) mix_pixel(i, bottom-1, 1, bouncing_line_colors[i][0], bouncing_line_colors[i][1], bouncing_line_colors[i][2]);//bd->r(), bd->g(), bd->b());
 80a089e:	2800      	cmp	r0, #0
 80a08a0:	dd10      	ble.n	80a08c4 <_ZN10Bar_Matrix14bouncing_linesEv+0x17c>
 80a08a2:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 80a08a6:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80a08aa:	9302      	str	r3, [sp, #8]
 80a08ac:	f895 3084 	ldrb.w	r3, [r5, #132]	; 0x84
 80a08b0:	4649      	mov	r1, r9
 80a08b2:	9301      	str	r3, [sp, #4]
 80a08b4:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 80a08b8:	4630      	mov	r0, r6
 80a08ba:	9300      	str	r3, [sp, #0]
 80a08bc:	b292      	uxth	r2, r2
 80a08be:	4653      	mov	r3, sl
 80a08c0:	f7ff fd24 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, 0, 0, 0);
 80a08c4:	2300      	movs	r3, #0
 80a08c6:	6862      	ldr	r2, [r4, #4]
 80a08c8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a08cc:	3201      	adds	r2, #1
 80a08ce:	4442      	add	r2, r8
 80a08d0:	e76d      	b.n	80a07ae <_ZN10Bar_Matrix14bouncing_linesEv+0x66>
        } else if (bouncing_line_positions[i] > STRIP_LENGTH-.5*bouncing_line_lengths[i] && bouncing_line_directions[i] > 0) {
 80a08d2:	2200      	movs	r2, #0
 80a08d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a08d8:	4b10      	ldr	r3, [pc, #64]	; (80a091c <_ZN10Bar_Matrix14bouncing_linesEv+0x1d4>)
 80a08da:	f008 fe03 	bl	80a94e4 <__aeabi_dmul>
 80a08de:	4602      	mov	r2, r0
 80a08e0:	460b      	mov	r3, r1
 80a08e2:	2000      	movs	r0, #0
 80a08e4:	490e      	ldr	r1, [pc, #56]	; (80a0920 <_ZN10Bar_Matrix14bouncing_linesEv+0x1d8>)
 80a08e6:	f008 fc45 	bl	80a9174 <__aeabi_dsub>
 80a08ea:	4602      	mov	r2, r0
 80a08ec:	460b      	mov	r3, r1
 80a08ee:	4640      	mov	r0, r8
 80a08f0:	4649      	mov	r1, r9
 80a08f2:	f009 f887 	bl	80a9a04 <__aeabi_dcmpgt>
 80a08f6:	2800      	cmp	r0, #0
 80a08f8:	d0ce      	beq.n	80a0898 <_ZN10Bar_Matrix14bouncing_linesEv+0x150>
 80a08fa:	f1bb 0f00 	cmp.w	fp, #0
 80a08fe:	ddcb      	ble.n	80a0898 <_ZN10Bar_Matrix14bouncing_linesEv+0x150>
            bouncing_line_directions[i] = -1;
 80a0900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a0904:	6623      	str	r3, [r4, #96]	; 0x60
 80a0906:	e7b3      	b.n	80a0870 <_ZN10Bar_Matrix14bouncing_linesEv+0x128>
        }
    }
}
 80a0908:	b007      	add	sp, #28
 80a090a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a090e:	bf00      	nop
 80a0910:	2000007e 	.word	0x2000007e
 80a0914:	bfe00000 	.word	0xbfe00000
 80a0918:	41700000 	.word	0x41700000
 80a091c:	3fe00000 	.word	0x3fe00000
 80a0920:	404d0000 	.word	0x404d0000
 80a0924:	20000074 	.word	0x20000074

080a0928 <_ZN10Bar_Matrix10pixel_testEv>:
/* ================================================================== *
 * Function: bar_test
 * Description: Turns on lights from top to check length of srip
 * Parameters: None
 * ================================================================== */
void Bar_Matrix::pixel_test() {
 80a0928:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    clear_matrix();
 80a092c:	f7ff fd5c 	bl	80a03e8 <_ZN10Bar_Matrix12clear_matrixEv>
 80a0930:	2400      	movs	r4, #0
    for (int i = 0; i < NUM_BARS; i++)
    bars[i]->setPixelColor(STRIP_LENGTH-int(millis()/1000)%10, 64, 64, 64);
 80a0932:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80a0936:	250a      	movs	r5, #10
 80a0938:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80a0970 <_ZN10Bar_Matrix10pixel_testEv+0x48>
 80a093c:	f8d8 3000 	ldr.w	r3, [r8]
 80a0940:	591e      	ldr	r6, [r3, r4]
 80a0942:	f003 f895 	bl	80a3a70 <HAL_Timer_Get_Milli_Seconds>
 80a0946:	fbb0 f0f7 	udiv	r0, r0, r7
 80a094a:	fbb0 f1f5 	udiv	r1, r0, r5
 80a094e:	2340      	movs	r3, #64	; 0x40
 80a0950:	fb05 0111 	mls	r1, r5, r1, r0
 80a0954:	f1c1 013a 	rsb	r1, r1, #58	; 0x3a
 80a0958:	461a      	mov	r2, r3
 80a095a:	4630      	mov	r0, r6
 80a095c:	9300      	str	r3, [sp, #0]
 80a095e:	b289      	uxth	r1, r1
 80a0960:	3404      	adds	r4, #4
 80a0962:	f002 fd99 	bl	80a3498 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    for (int i = 0; i < NUM_BARS; i++)
 80a0966:	2c20      	cmp	r4, #32
 80a0968:	d1e8      	bne.n	80a093c <_ZN10Bar_Matrix10pixel_testEv+0x14>
}
 80a096a:	b002      	add	sp, #8
 80a096c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0970:	20000070 	.word	0x20000070

080a0974 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80a0974:	b570      	push	{r4, r5, r6, lr}
 80a0976:	4606      	mov	r6, r0
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80a0978:	4608      	mov	r0, r1
 80a097a:	f008 fd49 	bl	80a9410 <__aeabi_i2d>
 80a097e:	4604      	mov	r4, r0
 80a0980:	460d      	mov	r5, r1
 80a0982:	4630      	mov	r0, r6
 80a0984:	f008 fd56 	bl	80a9434 <__aeabi_f2d>
 80a0988:	4622      	mov	r2, r4
 80a098a:	462b      	mov	r3, r5
    }
 80a098c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return pow(__type(__x), __type(__y));
 80a0990:	f005 b8c8 	b.w	80a5b24 <pow>
 80a0994:	0000      	movs	r0, r0
	...

080a0998 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb>:
/* ================================================================== *
 * Function: visualizer_bars
 * Description: Sets all pixel values to given color value
 * Parameters: [audio_bins]* bins - frequency bins read from chip
 * ================================================================== */
 void Bar_Matrix::visualizer_bars(audio_bins* bins, float in_factor, float out_factor, bool strobe) {
 80a0998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a099c:	b08f      	sub	sp, #60	; 0x3c
 80a099e:	920c      	str	r2, [sp, #48]	; 0x30
 80a09a0:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 80a09a4:	4681      	mov	r9, r0
   decay(out_factor);
 80a09a6:	4618      	mov	r0, r3
 void Bar_Matrix::visualizer_bars(audio_bins* bins, float in_factor, float out_factor, bool strobe) {
 80a09a8:	9209      	str	r2, [sp, #36]	; 0x24
 80a09aa:	460c      	mov	r4, r1
   decay(out_factor);
 80a09ac:	f008 fd42 	bl	80a9434 <__aeabi_f2d>
 80a09b0:	4602      	mov	r2, r0
 80a09b2:	460b      	mov	r3, r1
 80a09b4:	4648      	mov	r0, r9
 80a09b6:	f7ff fb7f 	bl	80a00b8 <_ZN10Bar_Matrix5decayEd>
   float bass_level = 0;
   int red, green, blue;

   if (strobe)
 80a09ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a09bc:	2b00      	cmp	r3, #0
 80a09be:	d04a      	beq.n	80a0a56 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xbe>
     bass_level = (log(((bins->left[LEFT_63]+bins->right[LEFT_63])/2.0f)/BINS_MAX)+0.7f) * 5 * 255.0f;
 80a09c0:	69e3      	ldr	r3, [r4, #28]
 80a09c2:	6820      	ldr	r0, [r4, #0]
 80a09c4:	4418      	add	r0, r3
 80a09c6:	f009 f98f 	bl	80a9ce8 <__aeabi_i2f>
 80a09ca:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a09ce:	f009 f9df 	bl	80a9d90 <__aeabi_fmul>
 80a09d2:	49b1      	ldr	r1, [pc, #708]	; (80a0c98 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x300>)
 80a09d4:	f009 fa90 	bl	80a9ef8 <__aeabi_fdiv>
  { return __builtin_logf(__x); }
 80a09d8:	f005 faa2 	bl	80a5f20 <logf>
 80a09dc:	49af      	ldr	r1, [pc, #700]	; (80a0c9c <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x304>)
 80a09de:	f009 f8cf 	bl	80a9b80 <__addsf3>
 80a09e2:	49af      	ldr	r1, [pc, #700]	; (80a0ca0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x308>)
 80a09e4:	f009 f9d4 	bl	80a9d90 <__aeabi_fmul>
 80a09e8:	49ae      	ldr	r1, [pc, #696]	; (80a0ca4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x30c>)
 80a09ea:	f009 f9d1 	bl	80a9d90 <__aeabi_fmul>
 80a09ee:	9008      	str	r0, [sp, #32]
   float bass_level = 0;
 80a09f0:	f04f 0b00 	mov.w	fp, #0

   for (char i = 0; i < disp_width; i++) {
 80a09f4:	4bac      	ldr	r3, [pc, #688]	; (80a0ca8 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x310>)
 80a09f6:	fa5f f58b 	uxtb.w	r5, fp
 80a09fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a09fe:	429d      	cmp	r5, r3
 80a0a00:	f280 8133 	bge.w	80a0c6a <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2d2>
 80a0a04:	2300      	movs	r3, #0
 80a0a06:	9307      	str	r3, [sp, #28]
     for (char j = 0; j < disp_height; j++) {
 80a0a08:	4ba8      	ldr	r3, [pc, #672]	; (80a0cac <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x314>)
 80a0a0a:	f89d a01c 	ldrb.w	sl, [sp, #28]
 80a0a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a0a12:	459a      	cmp	sl, r3
 80a0a14:	f280 8126 	bge.w	80a0c64 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2cc>
       // get bin
       //int level = (i < disp_width/2) ? bar_levels[i] : bar_levels[7-i];

       if (strobe)
 80a0a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a0a1a:	b16b      	cbz	r3, 80a0a38 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xa0>
         mix_pixel(i, j, 0.5f, bass_level, bass_level, bass_level);
 80a0a1c:	9808      	ldr	r0, [sp, #32]
 80a0a1e:	f009 fbb9 	bl	80aa194 <__aeabi_f2uiz>
 80a0a22:	b2c0      	uxtb	r0, r0
 80a0a24:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80a0a28:	9000      	str	r0, [sp, #0]
 80a0a2a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80a0a2e:	4652      	mov	r2, sl
 80a0a30:	4629      	mov	r1, r5
 80a0a32:	4648      	mov	r0, r9
 80a0a34:	f7ff fc6a 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>

       // Set bar levels
       int level = 0;
       if (disp_width == 8) {
 80a0a38:	4b9b      	ldr	r3, [pc, #620]	; (80a0ca8 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x310>)
 80a0a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a0a3e:	2b08      	cmp	r3, #8
 80a0a40:	f040 809e 	bne.w	80a0b80 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x1e8>
        switch(i) {
 80a0a44:	2d07      	cmp	r5, #7
 80a0a46:	f200 80bb 	bhi.w	80a0bc0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x228>
 80a0a4a:	e8df f005 	tbb	[pc, r5]
 80a0a4e:	8b07      	.short	0x8b07
 80a0a50:	93918f8d 	.word	0x93918f8d
 80a0a54:	9795      	.short	0x9795
   float bass_level = 0;
 80a0a56:	2300      	movs	r3, #0
 80a0a58:	9308      	str	r3, [sp, #32]
 80a0a5a:	e7c9      	b.n	80a09f0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x58>
            case 0:
            level = bins->left[LEFT_160];
 80a0a5c:	6860      	ldr	r0, [r4, #4]
            level = bins->right[RIGHT_160];
            break;
        }  
       }

       level *= FREQ_GAIN;
 80a0a5e:	f009 f943 	bl	80a9ce8 <__aeabi_i2f>
 80a0a62:	f009 fb71 	bl	80aa148 <__aeabi_f2iz>
 80a0a66:	900d      	str	r0, [sp, #52]	; 0x34
       // set bar
       if (j < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH)) {
 80a0a68:	f009 f93e 	bl	80a9ce8 <__aeabi_i2f>
 80a0a6c:	498a      	ldr	r1, [pc, #552]	; (80a0c98 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x300>)
 80a0a6e:	f009 fa43 	bl	80a9ef8 <__aeabi_fdiv>
 80a0a72:	2102      	movs	r1, #2
 80a0a74:	f7ff ff7e 	bl	80a0974 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a0a78:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a0a7c:	4650      	mov	r0, sl
 80a0a7e:	f008 fcc7 	bl	80a9410 <__aeabi_i2d>
 80a0a82:	2200      	movs	r2, #0
 80a0a84:	4607      	mov	r7, r0
 80a0a86:	4688      	mov	r8, r1
 80a0a88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a0a8c:	4b88      	ldr	r3, [pc, #544]	; (80a0cb0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x318>)
 80a0a8e:	f008 fd29 	bl	80a94e4 <__aeabi_dmul>
 80a0a92:	4602      	mov	r2, r0
 80a0a94:	460b      	mov	r3, r1
 80a0a96:	4638      	mov	r0, r7
 80a0a98:	4641      	mov	r1, r8
 80a0a9a:	f008 ff95 	bl	80a99c8 <__aeabi_dcmplt>
 80a0a9e:	2800      	cmp	r0, #0
 80a0aa0:	d05c      	beq.n	80a0b5c <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x1c4>
       //if (j < (float)(level)/(float)(BINS_MAX) * (STRIP_LENGTH))

         float val = level*2*PI/BINS_MAX;
 80a0aa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a0aa4:	0058      	lsls	r0, r3, #1
 80a0aa6:	f008 fcb3 	bl	80a9410 <__aeabi_i2d>
 80a0aaa:	a371      	add	r3, pc, #452	; (adr r3, 80a0c70 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2d8>)
 80a0aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ab0:	f008 fd18 	bl	80a94e4 <__aeabi_dmul>
 80a0ab4:	a370      	add	r3, pc, #448	; (adr r3, 80a0c78 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2e0>)
 80a0ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0aba:	f008 fe3d 	bl	80a9738 <__aeabi_ddiv>
 80a0abe:	f009 f809 	bl	80a9ad4 <__aeabi_d2f>

         // Select colors
         switch(bd->num_beats() % 3) {
 80a0ac2:	4b7c      	ldr	r3, [pc, #496]	; (80a0cb4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x31c>)
         float val = level*2*PI/BINS_MAX;
 80a0ac4:	4680      	mov	r8, r0
         switch(bd->num_beats() % 3) {
 80a0ac6:	6818      	ldr	r0, [r3, #0]
 80a0ac8:	f001 fb09 	bl	80a20de <_ZN14Beat_Detection9num_beatsEv>
 80a0acc:	2303      	movs	r3, #3
 80a0ace:	fb90 f3f3 	sdiv	r3, r0, r3
 80a0ad2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a0ad6:	1ac0      	subs	r0, r0, r3
 80a0ad8:	2801      	cmp	r0, #1
 80a0ada:	d073      	beq.n	80a0bc4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x22c>
 80a0adc:	2802      	cmp	r0, #2
 80a0ade:	f000 8092 	beq.w	80a0c06 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x26e>
 80a0ae2:	bb68      	cbnz	r0, 80a0b40 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x1a8>
  { return __builtin_cosf(__x); }
 80a0ae4:	4640      	mov	r0, r8
 80a0ae6:	f004 ffe1 	bl	80a5aac <cosf>
           case 0:
             red = cos(val)*255;
 80a0aea:	496e      	ldr	r1, [pc, #440]	; (80a0ca4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x30c>)
 80a0aec:	f009 f950 	bl	80a9d90 <__aeabi_fmul>
 80a0af0:	f009 fb2a 	bl	80aa148 <__aeabi_f2iz>
 80a0af4:	9005      	str	r0, [sp, #20]
             green = cos(val - 2*PI/3)*255;
 80a0af6:	4640      	mov	r0, r8
 80a0af8:	f008 fc9c 	bl	80a9434 <__aeabi_f2d>
 80a0afc:	a360      	add	r3, pc, #384	; (adr r3, 80a0c80 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2e8>)
 80a0afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0b02:	4606      	mov	r6, r0
 80a0b04:	460f      	mov	r7, r1
 80a0b06:	f008 fb35 	bl	80a9174 <__aeabi_dsub>
 80a0b0a:	f004 ff79 	bl	80a5a00 <cos>
 80a0b0e:	a35e      	add	r3, pc, #376	; (adr r3, 80a0c88 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f0>)
 80a0b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0b14:	f008 fce6 	bl	80a94e4 <__aeabi_dmul>
 80a0b18:	f008 ff94 	bl	80a9a44 <__aeabi_d2iz>
             blue = cos(val - 4*PI/3)*255;
 80a0b1c:	a35c      	add	r3, pc, #368	; (adr r3, 80a0c90 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f8>)
 80a0b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
             green = cos(val - 2*PI/3)*255;
 80a0b22:	9006      	str	r0, [sp, #24]
             break;
           case 1:
             red = cos(val - 4*PI/3)*255;
             green = cos(val)*255;
             blue = cos(val - 2*PI/3)*255;
 80a0b24:	4630      	mov	r0, r6
 80a0b26:	4639      	mov	r1, r7
 80a0b28:	f008 fb24 	bl	80a9174 <__aeabi_dsub>
 80a0b2c:	f004 ff68 	bl	80a5a00 <cos>
 80a0b30:	a355      	add	r3, pc, #340	; (adr r3, 80a0c88 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f0>)
 80a0b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0b36:	f008 fcd5 	bl	80a94e4 <__aeabi_dmul>
 80a0b3a:	f008 ff83 	bl	80a9a44 <__aeabi_d2iz>
 80a0b3e:	4606      	mov	r6, r0
             green = cos(val - 4*PI/3)*255;
             blue = cos(val)*255;
             break;
         }

         mix_pixel(i, j, in_factor, red, green, blue);
 80a0b40:	b2f3      	uxtb	r3, r6
 80a0b42:	9302      	str	r3, [sp, #8]
 80a0b44:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80a0b48:	4652      	mov	r2, sl
 80a0b4a:	9301      	str	r3, [sp, #4]
 80a0b4c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80a0b50:	4629      	mov	r1, r5
 80a0b52:	9300      	str	r3, [sp, #0]
 80a0b54:	4648      	mov	r0, r9
 80a0b56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a0b58:	f7ff fbd8 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
     for (char j = 0; j < disp_height; j++) {
 80a0b5c:	9b07      	ldr	r3, [sp, #28]
 80a0b5e:	3301      	adds	r3, #1
 80a0b60:	9307      	str	r3, [sp, #28]
 80a0b62:	e751      	b.n	80a0a08 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x70>
            level = bins->left[LEFT_1000];
 80a0b64:	68e0      	ldr	r0, [r4, #12]
            break;
 80a0b66:	e77a      	b.n	80a0a5e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->left[LEFT_6250];
 80a0b68:	6960      	ldr	r0, [r4, #20]
            break;
 80a0b6a:	e778      	b.n	80a0a5e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->left[LEFT_16000];
 80a0b6c:	69a0      	ldr	r0, [r4, #24]
            break;
 80a0b6e:	e776      	b.n	80a0a5e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->right[RIGHT_16000];
 80a0b70:	6b60      	ldr	r0, [r4, #52]	; 0x34
            break;
 80a0b72:	e774      	b.n	80a0a5e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->right[RIGHT_6250];
 80a0b74:	6b20      	ldr	r0, [r4, #48]	; 0x30
            break;
 80a0b76:	e772      	b.n	80a0a5e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->right[RIGHT_1000];
 80a0b78:	6aa0      	ldr	r0, [r4, #40]	; 0x28
            break;
 80a0b7a:	e770      	b.n	80a0a5e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->right[RIGHT_160];
 80a0b7c:	6a20      	ldr	r0, [r4, #32]
            break;
 80a0b7e:	e76e      	b.n	80a0a5e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
       } else if (disp_width == 10) {
 80a0b80:	2b0a      	cmp	r3, #10
 80a0b82:	d11d      	bne.n	80a0bc0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x228>
         switch(i) {
 80a0b84:	2d09      	cmp	r5, #9
 80a0b86:	d81b      	bhi.n	80a0bc0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x228>
 80a0b88:	a301      	add	r3, pc, #4	; (adr r3, 80a0b90 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x1f8>)
 80a0b8a:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 80a0b8e:	bf00      	nop
 80a0b90:	080a0a5d 	.word	0x080a0a5d
 80a0b94:	080a0bb9 	.word	0x080a0bb9
 80a0b98:	080a0b65 	.word	0x080a0b65
 80a0b9c:	080a0b69 	.word	0x080a0b69
 80a0ba0:	080a0b6d 	.word	0x080a0b6d
 80a0ba4:	080a0b71 	.word	0x080a0b71
 80a0ba8:	080a0b75 	.word	0x080a0b75
 80a0bac:	080a0b79 	.word	0x080a0b79
 80a0bb0:	080a0bbd 	.word	0x080a0bbd
 80a0bb4:	080a0b7d 	.word	0x080a0b7d
            level = bins->left[LEFT_400];
 80a0bb8:	68a0      	ldr	r0, [r4, #8]
            break;
 80a0bba:	e750      	b.n	80a0a5e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->right[RIGHT_400];
 80a0bbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
            break;
 80a0bbe:	e74e      	b.n	80a0a5e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
       } else if (disp_width == 10) {
 80a0bc0:	2000      	movs	r0, #0
 80a0bc2:	e74c      	b.n	80a0a5e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
             red = cos(val - 4*PI/3)*255;
 80a0bc4:	4640      	mov	r0, r8
 80a0bc6:	f008 fc35 	bl	80a9434 <__aeabi_f2d>
 80a0bca:	a331      	add	r3, pc, #196	; (adr r3, 80a0c90 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f8>)
 80a0bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0bd0:	4606      	mov	r6, r0
 80a0bd2:	460f      	mov	r7, r1
 80a0bd4:	f008 face 	bl	80a9174 <__aeabi_dsub>
 80a0bd8:	f004 ff12 	bl	80a5a00 <cos>
 80a0bdc:	a32a      	add	r3, pc, #168	; (adr r3, 80a0c88 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f0>)
 80a0bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0be2:	f008 fc7f 	bl	80a94e4 <__aeabi_dmul>
 80a0be6:	f008 ff2d 	bl	80a9a44 <__aeabi_d2iz>
 80a0bea:	9005      	str	r0, [sp, #20]
 80a0bec:	4640      	mov	r0, r8
 80a0bee:	f004 ff5d 	bl	80a5aac <cosf>
             green = cos(val)*255;
 80a0bf2:	492c      	ldr	r1, [pc, #176]	; (80a0ca4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x30c>)
 80a0bf4:	f009 f8cc 	bl	80a9d90 <__aeabi_fmul>
 80a0bf8:	f009 faa6 	bl	80aa148 <__aeabi_f2iz>
             blue = cos(val - 2*PI/3)*255;
 80a0bfc:	a320      	add	r3, pc, #128	; (adr r3, 80a0c80 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2e8>)
 80a0bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
             green = cos(val)*255;
 80a0c02:	9006      	str	r0, [sp, #24]
             blue = cos(val - 2*PI/3)*255;
 80a0c04:	e78e      	b.n	80a0b24 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x18c>
             red = cos(val - 2*PI/3)*255;
 80a0c06:	4640      	mov	r0, r8
 80a0c08:	f008 fc14 	bl	80a9434 <__aeabi_f2d>
 80a0c0c:	a31c      	add	r3, pc, #112	; (adr r3, 80a0c80 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2e8>)
 80a0c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0c12:	4606      	mov	r6, r0
 80a0c14:	460f      	mov	r7, r1
 80a0c16:	f008 faad 	bl	80a9174 <__aeabi_dsub>
 80a0c1a:	f004 fef1 	bl	80a5a00 <cos>
 80a0c1e:	a31a      	add	r3, pc, #104	; (adr r3, 80a0c88 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f0>)
 80a0c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0c24:	f008 fc5e 	bl	80a94e4 <__aeabi_dmul>
 80a0c28:	f008 ff0c 	bl	80a9a44 <__aeabi_d2iz>
             green = cos(val - 4*PI/3)*255;
 80a0c2c:	a318      	add	r3, pc, #96	; (adr r3, 80a0c90 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f8>)
 80a0c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
             red = cos(val - 2*PI/3)*255;
 80a0c32:	9005      	str	r0, [sp, #20]
             green = cos(val - 4*PI/3)*255;
 80a0c34:	4639      	mov	r1, r7
 80a0c36:	4630      	mov	r0, r6
 80a0c38:	f008 fa9c 	bl	80a9174 <__aeabi_dsub>
 80a0c3c:	f004 fee0 	bl	80a5a00 <cos>
 80a0c40:	a311      	add	r3, pc, #68	; (adr r3, 80a0c88 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f0>)
 80a0c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0c46:	f008 fc4d 	bl	80a94e4 <__aeabi_dmul>
 80a0c4a:	f008 fefb 	bl	80a9a44 <__aeabi_d2iz>
 80a0c4e:	9006      	str	r0, [sp, #24]
 80a0c50:	4640      	mov	r0, r8
 80a0c52:	f004 ff2b 	bl	80a5aac <cosf>
             blue = cos(val)*255;
 80a0c56:	4913      	ldr	r1, [pc, #76]	; (80a0ca4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x30c>)
 80a0c58:	f009 f89a 	bl	80a9d90 <__aeabi_fmul>
 80a0c5c:	f009 fa74 	bl	80aa148 <__aeabi_f2iz>
 80a0c60:	4606      	mov	r6, r0
             break;
 80a0c62:	e76d      	b.n	80a0b40 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x1a8>
   for (char i = 0; i < disp_width; i++) {
 80a0c64:	f10b 0b01 	add.w	fp, fp, #1
 80a0c68:	e6c4      	b.n	80a09f4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x5c>
                                    bins->left[1]/(64-(bins->left[2]/128)),
                                    bins->left[2]/(64-(bins->left[0]/128)));*/
       }
     }
   }
 }
 80a0c6a:	b00f      	add	sp, #60	; 0x3c
 80a0c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0c70:	fc8b007a 	.word	0xfc8b007a
 80a0c74:	400921fa 	.word	0x400921fa
 80a0c78:	00000000 	.word	0x00000000
 80a0c7c:	40affe00 	.word	0x40affe00
 80a0c80:	fdb20051 	.word	0xfdb20051
 80a0c84:	4000c151 	.word	0x4000c151
 80a0c88:	00000000 	.word	0x00000000
 80a0c8c:	406fe000 	.word	0x406fe000
 80a0c90:	fdb20051 	.word	0xfdb20051
 80a0c94:	4010c151 	.word	0x4010c151
 80a0c98:	457ff000 	.word	0x457ff000
 80a0c9c:	3f333333 	.word	0x3f333333
 80a0ca0:	40a00000 	.word	0x40a00000
 80a0ca4:	437f0000 	.word	0x437f0000
 80a0ca8:	2000007e 	.word	0x2000007e
 80a0cac:	2000007c 	.word	0x2000007c
 80a0cb0:	404d0000 	.word	0x404d0000
 80a0cb4:	20000074 	.word	0x20000074

080a0cb8 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff>:
 * Function: visualizer_bars_middle
 * Description: Bars start at the middle and go to the edges.
 *              One channel fills up, the other fills down.
 * Parameters: none.
 * ================================================================== */
void Bar_Matrix::visualizer_bars_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0cbc:	4606      	mov	r6, r0
 80a0cbe:	b089      	sub	sp, #36	; 0x24
    decay(out_factor);
 80a0cc0:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_bars_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0cc2:	4690      	mov	r8, r2
 80a0cc4:	460c      	mov	r4, r1
    decay(out_factor);
 80a0cc6:	f008 fbb5 	bl	80a9434 <__aeabi_f2d>

    if (bd->beat_on_bin(0) || bd->beat_on_bin(1)) {
 80a0cca:	4d66      	ldr	r5, [pc, #408]	; (80a0e64 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1ac>)
    decay(out_factor);
 80a0ccc:	4602      	mov	r2, r0
 80a0cce:	460b      	mov	r3, r1
 80a0cd0:	4630      	mov	r0, r6
 80a0cd2:	f7ff f9f1 	bl	80a00b8 <_ZN10Bar_Matrix5decayEd>
    if (bd->beat_on_bin(0) || bd->beat_on_bin(1)) {
 80a0cd6:	2100      	movs	r1, #0
 80a0cd8:	6828      	ldr	r0, [r5, #0]
 80a0cda:	f001 f9fc 	bl	80a20d6 <_ZN14Beat_Detection11beat_on_binEi>
 80a0cde:	b308      	cbz	r0, 80a0d24 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x6c>
        //fill_bar(i, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
        color_table_idx = (color_table_idx+1) % 51;
 80a0ce0:	2033      	movs	r0, #51	; 0x33
 80a0ce2:	4961      	ldr	r1, [pc, #388]	; (80a0e68 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1b0>)
 80a0ce4:	680b      	ldr	r3, [r1, #0]
 80a0ce6:	3301      	adds	r3, #1
 80a0ce8:	fb93 f2f0 	sdiv	r2, r3, r0
 80a0cec:	fb00 3312 	mls	r3, r0, r2, r3
 80a0cf0:	600b      	str	r3, [r1, #0]
void Bar_Matrix::visualizer_bars_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0cf2:	2300      	movs	r3, #0
                case 6: level = bins->left[LEFT_1000];  break;
                case 7: level = bins->left[LEFT_16000]; break;
            }
            level *= FREQ_GAIN;
            // set bar
            float p = (float)(level)/(float)(BINS_MAX);
 80a0cf4:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80a0e74 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1bc>
            if (j < p*p * (STRIP_LENGTH/2)) {
 80a0cf8:	f8df a17c 	ldr.w	sl, [pc, #380]	; 80a0e78 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1c0>
void Bar_Matrix::visualizer_bars_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0cfc:	9305      	str	r3, [sp, #20]
    for (char i = 0; i < disp_width; i++) {
 80a0cfe:	4b5b      	ldr	r3, [pc, #364]	; (80a0e6c <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1b4>)
 80a0d00:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80a0d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a0d08:	429d      	cmp	r5, r3
 80a0d0a:	f280 80a7 	bge.w	80a0e5c <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1a4>
 80a0d0e:	2700      	movs	r7, #0
                //j < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
                float val = level*2*PI/BINS_MAX;
                //mix_pixel(i, STRIP_LENGTH/2 - j, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                //mix_pixel(i, STRIP_LENGTH/2 - j, in_factor, bd->r(), bd->g(), bd->b());
                mix_pixel(i, STRIP_LENGTH/2 - j, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0d10:	f8df b154 	ldr.w	fp, [pc, #340]	; 80a0e68 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1b0>
            switch(i) {
 80a0d14:	2d07      	cmp	r5, #7
 80a0d16:	d858      	bhi.n	80a0dca <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x112>
 80a0d18:	e8df f005 	tbb	[pc, r5]
 80a0d1c:	4f4d4b0b 	.word	0x4f4d4b0b
 80a0d20:	554f5351 	.word	0x554f5351
    if (bd->beat_on_bin(0) || bd->beat_on_bin(1)) {
 80a0d24:	2101      	movs	r1, #1
 80a0d26:	6828      	ldr	r0, [r5, #0]
 80a0d28:	f001 f9d5 	bl	80a20d6 <_ZN14Beat_Detection11beat_on_binEi>
 80a0d2c:	2800      	cmp	r0, #0
 80a0d2e:	d1d7      	bne.n	80a0ce0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x28>
 80a0d30:	e7df      	b.n	80a0cf2 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x3a>
                case 0: level = bins->left[LEFT_63];    break;
 80a0d32:	6820      	ldr	r0, [r4, #0]
            level *= FREQ_GAIN;
 80a0d34:	f008 ffd8 	bl	80a9ce8 <__aeabi_i2f>
 80a0d38:	f009 fa06 	bl	80aa148 <__aeabi_f2iz>
            float p = (float)(level)/(float)(BINS_MAX);
 80a0d3c:	f008 ffd4 	bl	80a9ce8 <__aeabi_i2f>
 80a0d40:	4649      	mov	r1, r9
 80a0d42:	f009 f8d9 	bl	80a9ef8 <__aeabi_fdiv>
 80a0d46:	9007      	str	r0, [sp, #28]
            if (j < p*p * (STRIP_LENGTH/2)) {
 80a0d48:	4638      	mov	r0, r7
 80a0d4a:	f008 ffcd 	bl	80a9ce8 <__aeabi_i2f>
 80a0d4e:	9907      	ldr	r1, [sp, #28]
 80a0d50:	9006      	str	r0, [sp, #24]
 80a0d52:	4608      	mov	r0, r1
 80a0d54:	f009 f81c 	bl	80a9d90 <__aeabi_fmul>
 80a0d58:	4651      	mov	r1, sl
 80a0d5a:	f009 f819 	bl	80a9d90 <__aeabi_fmul>
 80a0d5e:	9b06      	ldr	r3, [sp, #24]
 80a0d60:	4601      	mov	r1, r0
 80a0d62:	4618      	mov	r0, r3
 80a0d64:	f009 f9b2 	bl	80aa0cc <__aeabi_fcmplt>
 80a0d68:	b1a8      	cbz	r0, 80a0d96 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0xde>
                mix_pixel(i, STRIP_LENGTH/2 - j, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0d6a:	230c      	movs	r3, #12
 80a0d6c:	f8db 0000 	ldr.w	r0, [fp]
 80a0d70:	493f      	ldr	r1, [pc, #252]	; (80a0e70 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1b8>)
 80a0d72:	4343      	muls	r3, r0
 80a0d74:	18c8      	adds	r0, r1, r3
 80a0d76:	f890 c008 	ldrb.w	ip, [r0, #8]
 80a0d7a:	5ccb      	ldrb	r3, [r1, r3]
 80a0d7c:	7900      	ldrb	r0, [r0, #4]
 80a0d7e:	f1c7 021d 	rsb	r2, r7, #29
 80a0d82:	9001      	str	r0, [sp, #4]
 80a0d84:	9300      	str	r3, [sp, #0]
 80a0d86:	4629      	mov	r1, r5
 80a0d88:	4643      	mov	r3, r8
 80a0d8a:	4630      	mov	r0, r6
 80a0d8c:	f8cd c008 	str.w	ip, [sp, #8]
 80a0d90:	b292      	uxth	r2, r2
 80a0d92:	f7ff fabb 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = 0; j < STRIP_LENGTH/2; j++) {
 80a0d96:	3701      	adds	r7, #1
 80a0d98:	2f1d      	cmp	r7, #29
 80a0d9a:	d1bb      	bne.n	80a0d14 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x5c>
 80a0d9c:	2700      	movs	r7, #0
            if (j-STRIP_LENGTH/2 < p*p * (STRIP_LENGTH/2)) {
                //j-STRIP_LENGTH/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
                float val = level*2*PI/BINS_MAX;
                //mix_pixel(i, j, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                //mix_pixel(i, j, in_factor, bd->r(), bd->g(), bd->b());//reds[i], greens[i], blues[i]);
                mix_pixel(i, j, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0d9e:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 80a0e68 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1b0>
            switch(i) {
 80a0da2:	2d07      	cmp	r5, #7
 80a0da4:	d858      	bhi.n	80a0e58 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1a0>
 80a0da6:	e8df f005 	tbb	[pc, r5]
 80a0daa:	4b12      	.short	0x4b12
 80a0dac:	53514f4d 	.word	0x53514f4d
 80a0db0:	554f      	.short	0x554f
                case 1: level = bins->left[LEFT_160];   break;
 80a0db2:	6860      	ldr	r0, [r4, #4]
 80a0db4:	e7be      	b.n	80a0d34 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
                case 2: level = bins->left[LEFT_400];   break;
 80a0db6:	68a0      	ldr	r0, [r4, #8]
 80a0db8:	e7bc      	b.n	80a0d34 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
                case 3: level = bins->left[LEFT_1000];  break;
 80a0dba:	68e0      	ldr	r0, [r4, #12]
 80a0dbc:	e7ba      	b.n	80a0d34 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
                case 4: level = bins->left[LEFT_2500];  break;
 80a0dbe:	6920      	ldr	r0, [r4, #16]
 80a0dc0:	e7b8      	b.n	80a0d34 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
                case 5: level = bins->left[LEFT_6250];  break;
 80a0dc2:	6960      	ldr	r0, [r4, #20]
 80a0dc4:	e7b6      	b.n	80a0d34 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
                case 7: level = bins->left[LEFT_16000]; break;
 80a0dc6:	69a0      	ldr	r0, [r4, #24]
 80a0dc8:	e7b4      	b.n	80a0d34 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
 80a0dca:	2000      	movs	r0, #0
 80a0dcc:	e7b2      	b.n	80a0d34 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
                case 0: level = bins->right[RIGHT_63];    break;
 80a0dce:	69e0      	ldr	r0, [r4, #28]
            level *= FREQ_GAIN;
 80a0dd0:	f008 ff8a 	bl	80a9ce8 <__aeabi_i2f>
 80a0dd4:	f009 f9b8 	bl	80aa148 <__aeabi_f2iz>
            float p = (float)(level)/(float)(BINS_MAX);
 80a0dd8:	f008 ff86 	bl	80a9ce8 <__aeabi_i2f>
 80a0ddc:	4649      	mov	r1, r9
 80a0dde:	f009 f88b 	bl	80a9ef8 <__aeabi_fdiv>
 80a0de2:	9007      	str	r0, [sp, #28]
            if (j-STRIP_LENGTH/2 < p*p * (STRIP_LENGTH/2)) {
 80a0de4:	4638      	mov	r0, r7
 80a0de6:	f008 ff7f 	bl	80a9ce8 <__aeabi_i2f>
 80a0dea:	9907      	ldr	r1, [sp, #28]
 80a0dec:	9006      	str	r0, [sp, #24]
 80a0dee:	4608      	mov	r0, r1
 80a0df0:	f008 ffce 	bl	80a9d90 <__aeabi_fmul>
 80a0df4:	4651      	mov	r1, sl
 80a0df6:	f008 ffcb 	bl	80a9d90 <__aeabi_fmul>
 80a0dfa:	9b06      	ldr	r3, [sp, #24]
 80a0dfc:	4601      	mov	r1, r0
 80a0dfe:	4618      	mov	r0, r3
 80a0e00:	f009 f964 	bl	80aa0cc <__aeabi_fcmplt>
 80a0e04:	b1a8      	cbz	r0, 80a0e32 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x17a>
                mix_pixel(i, j, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0e06:	230c      	movs	r3, #12
 80a0e08:	f8db 0000 	ldr.w	r0, [fp]
 80a0e0c:	4918      	ldr	r1, [pc, #96]	; (80a0e70 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1b8>)
 80a0e0e:	4343      	muls	r3, r0
 80a0e10:	18c8      	adds	r0, r1, r3
 80a0e12:	f890 c008 	ldrb.w	ip, [r0, #8]
 80a0e16:	5ccb      	ldrb	r3, [r1, r3]
 80a0e18:	7900      	ldrb	r0, [r0, #4]
 80a0e1a:	f107 021d 	add.w	r2, r7, #29
 80a0e1e:	9001      	str	r0, [sp, #4]
 80a0e20:	9300      	str	r3, [sp, #0]
 80a0e22:	4629      	mov	r1, r5
 80a0e24:	4643      	mov	r3, r8
 80a0e26:	4630      	mov	r0, r6
 80a0e28:	f8cd c008 	str.w	ip, [sp, #8]
 80a0e2c:	b292      	uxth	r2, r2
 80a0e2e:	f7ff fa6d 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = STRIP_LENGTH/2; j < STRIP_LENGTH; j++) {
 80a0e32:	3701      	adds	r7, #1
 80a0e34:	2f1d      	cmp	r7, #29
 80a0e36:	d1b4      	bne.n	80a0da2 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0xea>
    for (char i = 0; i < disp_width; i++) {
 80a0e38:	9b05      	ldr	r3, [sp, #20]
 80a0e3a:	3301      	adds	r3, #1
 80a0e3c:	9305      	str	r3, [sp, #20]
 80a0e3e:	e75e      	b.n	80a0cfe <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x46>
                case 1: level = bins->right[RIGHT_160];   break;
 80a0e40:	6a20      	ldr	r0, [r4, #32]
 80a0e42:	e7c5      	b.n	80a0dd0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
                case 2: level = bins->right[RIGHT_400];   break;
 80a0e44:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0e46:	e7c3      	b.n	80a0dd0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
                case 3: level = bins->right[RIGHT_1000];  break;
 80a0e48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0e4a:	e7c1      	b.n	80a0dd0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
                case 4: level = bins->right[RIGHT_2500];  break;
 80a0e4c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a0e4e:	e7bf      	b.n	80a0dd0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
                case 5: level = bins->right[RIGHT_6250];  break;
 80a0e50:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80a0e52:	e7bd      	b.n	80a0dd0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
                case 7: level = bins->right[RIGHT_16000]; break;
 80a0e54:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80a0e56:	e7bb      	b.n	80a0dd0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
 80a0e58:	2000      	movs	r0, #0
 80a0e5a:	e7b9      	b.n	80a0dd0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
            }
        }
    }
}
 80a0e5c:	b009      	add	sp, #36	; 0x24
 80a0e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0e62:	bf00      	nop
 80a0e64:	20000074 	.word	0x20000074
 80a0e68:	20000078 	.word	0x20000078
 80a0e6c:	2000007e 	.word	0x2000007e
 80a0e70:	080aa34c 	.word	0x080aa34c
 80a0e74:	457ff000 	.word	0x457ff000
 80a0e78:	41e80000 	.word	0x41e80000

080a0e7c <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff>:
/* ================================================================== *
 * Function: visualizer_bass_middle
 * Description: All bars react to bass beats. Bulge in middle of display
 * Parameters: none.
 * ================================================================== */
void Bar_Matrix::visualizer_bass_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0e80:	4604      	mov	r4, r0
 80a0e82:	b089      	sub	sp, #36	; 0x24
    decay(out_factor);
 80a0e84:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_bass_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0e86:	4690      	mov	r8, r2
 80a0e88:	460d      	mov	r5, r1
    decay(out_factor);
 80a0e8a:	f008 fad3 	bl	80a9434 <__aeabi_f2d>

    if (bd->num_beats() != last_beat_count) {
 80a0e8e:	4e43      	ldr	r6, [pc, #268]	; (80a0f9c <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x120>)
    decay(out_factor);
 80a0e90:	4602      	mov	r2, r0
 80a0e92:	460b      	mov	r3, r1
 80a0e94:	4620      	mov	r0, r4
 80a0e96:	f7ff f90f 	bl	80a00b8 <_ZN10Bar_Matrix5decayEd>
    if (bd->num_beats() != last_beat_count) {
 80a0e9a:	6830      	ldr	r0, [r6, #0]
 80a0e9c:	f001 f91f 	bl	80a20de <_ZN14Beat_Detection9num_beatsEv>
 80a0ea0:	f8d4 31f0 	ldr.w	r3, [r4, #496]	; 0x1f0
 80a0ea4:	4298      	cmp	r0, r3
 80a0ea6:	d00d      	beq.n	80a0ec4 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x48>
        last_beat_count = bd->num_beats();
 80a0ea8:	6830      	ldr	r0, [r6, #0]
 80a0eaa:	f001 f918 	bl	80a20de <_ZN14Beat_Detection9num_beatsEv>
 80a0eae:	f8c4 01f0 	str.w	r0, [r4, #496]	; 0x1f0
        color_table_idx++;
        color_table_idx %= 51;
 80a0eb2:	2033      	movs	r0, #51	; 0x33
 80a0eb4:	493a      	ldr	r1, [pc, #232]	; (80a0fa0 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x124>)
        color_table_idx++;
 80a0eb6:	680b      	ldr	r3, [r1, #0]
 80a0eb8:	3301      	adds	r3, #1
        color_table_idx %= 51;
 80a0eba:	fb93 f2f0 	sdiv	r2, r3, r0
 80a0ebe:	fb00 3312 	mls	r3, r0, r2, r3
 80a0ec2:	600b      	str	r3, [r1, #0]
    }

    // Average all 4 low frequency bins
    float energy = bins->right[RIGHT_63] + bins->left[LEFT_63] + bins->right[RIGHT_160] + bins->left[LEFT_160];
 80a0ec4:	682b      	ldr	r3, [r5, #0]
 80a0ec6:	69e8      	ldr	r0, [r5, #28]
    energy /= 4.0;
    energy /= (float) BINS_MAX;
    energy *= energy;
    // Use the "energy" of the low frequency bins to determine number of LEDs to light
    // Add 0.5 forces round to nearest integer
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
 80a0ec8:	2607      	movs	r6, #7
    float energy = bins->right[RIGHT_63] + bins->left[LEFT_63] + bins->right[RIGHT_160] + bins->left[LEFT_160];
 80a0eca:	4418      	add	r0, r3
 80a0ecc:	6a2b      	ldr	r3, [r5, #32]
    for (int x = 0; x < NUM_BARS / 2; x++) {
        int num_lit = max_lit / (NUM_BARS/2 - x);
        int y = (STRIP_LENGTH / 2) - (num_lit / 2);

        for (int i = 0; i < num_lit; i++) {
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0ece:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 80a0fa0 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x124>
    float energy = bins->right[RIGHT_63] + bins->left[LEFT_63] + bins->right[RIGHT_160] + bins->left[LEFT_160];
 80a0ed2:	4418      	add	r0, r3
 80a0ed4:	686b      	ldr	r3, [r5, #4]
    for (int x = 0; x < NUM_BARS / 2; x++) {
 80a0ed6:	2500      	movs	r5, #0
    float energy = bins->right[RIGHT_63] + bins->left[LEFT_63] + bins->right[RIGHT_160] + bins->left[LEFT_160];
 80a0ed8:	4418      	add	r0, r3
 80a0eda:	f008 ff05 	bl	80a9ce8 <__aeabi_i2f>
    energy /= 4.0;
 80a0ede:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a0ee2:	f008 ff55 	bl	80a9d90 <__aeabi_fmul>
    energy /= (float) BINS_MAX;
 80a0ee6:	492f      	ldr	r1, [pc, #188]	; (80a0fa4 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x128>)
 80a0ee8:	f009 f806 	bl	80a9ef8 <__aeabi_fdiv>
 80a0eec:	4601      	mov	r1, r0
    energy *= energy;
 80a0eee:	f008 ff4f 	bl	80a9d90 <__aeabi_fmul>
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
 80a0ef2:	492d      	ldr	r1, [pc, #180]	; (80a0fa8 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x12c>)
 80a0ef4:	f008 ff4c 	bl	80a9d90 <__aeabi_fmul>
 80a0ef8:	f008 fa9c 	bl	80a9434 <__aeabi_f2d>
 80a0efc:	2200      	movs	r2, #0
 80a0efe:	4b2b      	ldr	r3, [pc, #172]	; (80a0fac <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x130>)
 80a0f00:	f008 f93a 	bl	80a9178 <__adddf3>
 80a0f04:	f008 fd9e 	bl	80a9a44 <__aeabi_d2iz>
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0f08:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80a0fb0 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x134>
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
 80a0f0c:	9004      	str	r0, [sp, #16]
        int num_lit = max_lit / (NUM_BARS/2 - x);
 80a0f0e:	9b04      	ldr	r3, [sp, #16]
 80a0f10:	f1c5 0704 	rsb	r7, r5, #4
 80a0f14:	fb93 f7f7 	sdiv	r7, r3, r7
        for (int i = 0; i < num_lit; i++) {
 80a0f18:	f04f 0a00 	mov.w	sl, #0
        int y = (STRIP_LENGTH / 2) - (num_lit / 2);
 80a0f1c:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
 80a0f20:	105b      	asrs	r3, r3, #1
 80a0f22:	f1c3 031d 	rsb	r3, r3, #29
 80a0f26:	9305      	str	r3, [sp, #20]
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0f28:	b2eb      	uxtb	r3, r5
 80a0f2a:	9306      	str	r3, [sp, #24]
        for (int i = 0; i < num_lit; i++) {
 80a0f2c:	45ba      	cmp	sl, r7
 80a0f2e:	da2c      	bge.n	80a0f8a <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x10e>
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0f30:	210c      	movs	r1, #12
 80a0f32:	9b05      	ldr	r3, [sp, #20]
 80a0f34:	eb03 020a 	add.w	r2, r3, sl
 80a0f38:	f8db 3000 	ldr.w	r3, [fp]
 80a0f3c:	b292      	uxth	r2, r2
 80a0f3e:	434b      	muls	r3, r1
 80a0f40:	eb09 0103 	add.w	r1, r9, r3
 80a0f44:	7a08      	ldrb	r0, [r1, #8]
 80a0f46:	f819 3003 	ldrb.w	r3, [r9, r3]
 80a0f4a:	7909      	ldrb	r1, [r1, #4]
 80a0f4c:	9002      	str	r0, [sp, #8]
 80a0f4e:	9101      	str	r1, [sp, #4]
 80a0f50:	4620      	mov	r0, r4
 80a0f52:	9906      	ldr	r1, [sp, #24]
 80a0f54:	9300      	str	r3, [sp, #0]
 80a0f56:	4643      	mov	r3, r8
 80a0f58:	9207      	str	r2, [sp, #28]
 80a0f5a:	f7ff f9d7 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(NUM_BARS-x-1, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0f5e:	210c      	movs	r1, #12
 80a0f60:	f8db 3000 	ldr.w	r3, [fp]
 80a0f64:	9a07      	ldr	r2, [sp, #28]
 80a0f66:	434b      	muls	r3, r1
 80a0f68:	eb09 0103 	add.w	r1, r9, r3
 80a0f6c:	7a08      	ldrb	r0, [r1, #8]
 80a0f6e:	f819 3003 	ldrb.w	r3, [r9, r3]
 80a0f72:	7909      	ldrb	r1, [r1, #4]
 80a0f74:	9002      	str	r0, [sp, #8]
 80a0f76:	9101      	str	r1, [sp, #4]
 80a0f78:	9300      	str	r3, [sp, #0]
 80a0f7a:	4631      	mov	r1, r6
 80a0f7c:	4643      	mov	r3, r8
 80a0f7e:	4620      	mov	r0, r4
 80a0f80:	f7ff f9c4 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (int i = 0; i < num_lit; i++) {
 80a0f84:	f10a 0a01 	add.w	sl, sl, #1
 80a0f88:	e7d0      	b.n	80a0f2c <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0xb0>
    for (int x = 0; x < NUM_BARS / 2; x++) {
 80a0f8a:	3501      	adds	r5, #1
 80a0f8c:	3e01      	subs	r6, #1
 80a0f8e:	2d04      	cmp	r5, #4
 80a0f90:	b2f6      	uxtb	r6, r6
 80a0f92:	d1bc      	bne.n	80a0f0e <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x92>
        }
    }
}
 80a0f94:	b009      	add	sp, #36	; 0x24
 80a0f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0f9a:	bf00      	nop
 80a0f9c:	20000074 	.word	0x20000074
 80a0fa0:	20000078 	.word	0x20000078
 80a0fa4:	457ff000 	.word	0x457ff000
 80a0fa8:	42680000 	.word	0x42680000
 80a0fac:	3fe00000 	.word	0x3fe00000
 80a0fb0:	080aa34c 	.word	0x080aa34c

080a0fb4 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff>:
/* ================================================================== *
 * Function: visualizer_bass_slide
 * Description: All bars react to bass beats. Bulge in middle of display
 * Parameters: none.
 * ================================================================== */
void Bar_Matrix::visualizer_bass_slide(audio_bins* bins, float in_factor, float out_factor) {
 80a0fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0fb8:	4604      	mov	r4, r0
 80a0fba:	b089      	sub	sp, #36	; 0x24
    decay(out_factor);
 80a0fbc:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_bass_slide(audio_bins* bins, float in_factor, float out_factor) {
 80a0fbe:	4617      	mov	r7, r2
 80a0fc0:	460d      	mov	r5, r1
    decay(out_factor);
 80a0fc2:	f008 fa37 	bl	80a9434 <__aeabi_f2d>

    if (bd->num_beats() != last_beat_count) {
 80a0fc6:	4e6c      	ldr	r6, [pc, #432]	; (80a1178 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1c4>)
    decay(out_factor);
 80a0fc8:	4602      	mov	r2, r0
 80a0fca:	460b      	mov	r3, r1
 80a0fcc:	4620      	mov	r0, r4
 80a0fce:	f7ff f873 	bl	80a00b8 <_ZN10Bar_Matrix5decayEd>
    if (bd->num_beats() != last_beat_count) {
 80a0fd2:	6830      	ldr	r0, [r6, #0]
 80a0fd4:	f001 f883 	bl	80a20de <_ZN14Beat_Detection9num_beatsEv>
 80a0fd8:	f8d4 31f0 	ldr.w	r3, [r4, #496]	; 0x1f0
 80a0fdc:	4298      	cmp	r0, r3
 80a0fde:	d00d      	beq.n	80a0ffc <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x48>
        last_beat_count = bd->num_beats();
 80a0fe0:	6830      	ldr	r0, [r6, #0]
 80a0fe2:	f001 f87c 	bl	80a20de <_ZN14Beat_Detection9num_beatsEv>
 80a0fe6:	f8c4 01f0 	str.w	r0, [r4, #496]	; 0x1f0
        color_table_idx++;
        color_table_idx %= 51;
 80a0fea:	2033      	movs	r0, #51	; 0x33
 80a0fec:	4963      	ldr	r1, [pc, #396]	; (80a117c <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1c8>)
        color_table_idx++;
 80a0fee:	680b      	ldr	r3, [r1, #0]
 80a0ff0:	3301      	adds	r3, #1
        color_table_idx %= 51;
 80a0ff2:	fb93 f2f0 	sdiv	r2, r3, r0
 80a0ff6:	fb00 3312 	mls	r3, r0, r2, r3
 80a0ffa:	600b      	str	r3, [r1, #0]
    }

    // Average all 4 low frequency bins
    float energy = (bins->right[RIGHT_63] + bins->left[LEFT_63]) + (bins->right[RIGHT_160] + bins->left[LEFT_160])+ (bins->right[RIGHT_400] + bins->left[LEFT_400])+ (bins->right[RIGHT_1000] + bins->left[LEFT_1000])+ (bins->right[RIGHT_2500] + bins->left[LEFT_2500])+ (bins->right[RIGHT_6250] + bins->left[LEFT_6250])+ (bins->right[RIGHT_16000] + bins->left[LEFT_16000]);
 80a0ffc:	682a      	ldr	r2, [r5, #0]
 80a0ffe:	69eb      	ldr	r3, [r5, #28]
 80a1000:	6869      	ldr	r1, [r5, #4]
 80a1002:	4413      	add	r3, r2
 80a1004:	6a2a      	ldr	r2, [r5, #32]
 80a1006:	68e8      	ldr	r0, [r5, #12]
 80a1008:	440a      	add	r2, r1
 80a100a:	4413      	add	r3, r2
 80a100c:	68a9      	ldr	r1, [r5, #8]
 80a100e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80a1010:	440a      	add	r2, r1
 80a1012:	4413      	add	r3, r2
 80a1014:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a1016:	4402      	add	r2, r0
 80a1018:	4413      	add	r3, r2
 80a101a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80a101c:	692a      	ldr	r2, [r5, #16]
 80a101e:	4410      	add	r0, r2
 80a1020:	4403      	add	r3, r0
 80a1022:	696a      	ldr	r2, [r5, #20]
 80a1024:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80a1026:	4410      	add	r0, r2
 80a1028:	4403      	add	r3, r0
 80a102a:	69aa      	ldr	r2, [r5, #24]
 80a102c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80a102e:	4410      	add	r0, r2
 80a1030:	4418      	add	r0, r3
 80a1032:	f008 fe59 	bl	80a9ce8 <__aeabi_i2f>
    energy = energy / 2;
 80a1036:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a103a:	f008 fea9 	bl	80a9d90 <__aeabi_fmul>
    bass_slide_ema = 0.5 * energy + 0.5 * bass_slide_ema;
 80a103e:	f008 f9f9 	bl	80a9434 <__aeabi_f2d>
 80a1042:	2200      	movs	r2, #0
 80a1044:	4b4e      	ldr	r3, [pc, #312]	; (80a1180 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1cc>)
 80a1046:	f008 fa4d 	bl	80a94e4 <__aeabi_dmul>
 80a104a:	4680      	mov	r8, r0
 80a104c:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 80a1050:	4689      	mov	r9, r1
 80a1052:	f008 f9ef 	bl	80a9434 <__aeabi_f2d>
 80a1056:	2200      	movs	r2, #0
 80a1058:	4b49      	ldr	r3, [pc, #292]	; (80a1180 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1cc>)
 80a105a:	f008 fa43 	bl	80a94e4 <__aeabi_dmul>
 80a105e:	460b      	mov	r3, r1
 80a1060:	4602      	mov	r2, r0
 80a1062:	4649      	mov	r1, r9
 80a1064:	4640      	mov	r0, r8
 80a1066:	f008 f887 	bl	80a9178 <__adddf3>
 80a106a:	f008 fd33 	bl	80a9ad4 <__aeabi_d2f>
 80a106e:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
 80a1072:	4605      	mov	r5, r0
 80a1074:	f002 fcfc 	bl	80a3a70 <HAL_Timer_Get_Milli_Seconds>
    // Add 0.5 forces round to nearest integer
    //bass_slide_ema = 0.9 * energy + 0.1 * bass_slide_ema;
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
    int middle_led = STRIP_LENGTH / 2;

    if (millis() - bass_slide_millis > 35) {
 80a1078:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80a107c:	1ac0      	subs	r0, r0, r3
 80a107e:	2823      	cmp	r0, #35	; 0x23
 80a1080:	d92b      	bls.n	80a10da <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x126>
 80a1082:	f002 fcf5 	bl	80a3a70 <HAL_Timer_Get_Milli_Seconds>
        bass_slide_millis = millis();

        bass_slide_heights[0] = bass_slide_heights[1];
 80a1086:	f8d4 31f8 	ldr.w	r3, [r4, #504]	; 0x1f8
    energy /= 4.0;
 80a108a:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
        bass_slide_heights[0] = bass_slide_heights[1];
 80a108e:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
        bass_slide_heights[1] = bass_slide_heights[2];
 80a1092:	f8d4 31fc 	ldr.w	r3, [r4, #508]	; 0x1fc
        bass_slide_millis = millis();
 80a1096:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
        bass_slide_heights[1] = bass_slide_heights[2];
 80a109a:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
        bass_slide_heights[2] = bass_slide_heights[3];
 80a109e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    energy /= 4.0;
 80a10a2:	4628      	mov	r0, r5
        bass_slide_heights[2] = bass_slide_heights[3];
 80a10a4:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
        bass_slide_heights[3] = bass_slide_heights[4];
 80a10a8:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 80a10ac:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    energy /= 4.0;
 80a10b0:	f008 fe6e 	bl	80a9d90 <__aeabi_fmul>
    energy /= (float) BINS_MAX;
 80a10b4:	4933      	ldr	r1, [pc, #204]	; (80a1184 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1d0>)
 80a10b6:	f008 ff1f 	bl	80a9ef8 <__aeabi_fdiv>
 80a10ba:	4601      	mov	r1, r0
    energy *= energy;
 80a10bc:	f008 fe68 	bl	80a9d90 <__aeabi_fmul>
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
 80a10c0:	4931      	ldr	r1, [pc, #196]	; (80a1188 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1d4>)
 80a10c2:	f008 fe65 	bl	80a9d90 <__aeabi_fmul>
 80a10c6:	f008 f9b5 	bl	80a9434 <__aeabi_f2d>
 80a10ca:	2200      	movs	r2, #0
 80a10cc:	4b2c      	ldr	r3, [pc, #176]	; (80a1180 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1cc>)
 80a10ce:	f008 f853 	bl	80a9178 <__adddf3>
 80a10d2:	f008 fcb7 	bl	80a9a44 <__aeabi_d2iz>
 80a10d6:	f8c4 0204 	str.w	r0, [r4, #516]	; 0x204
void Bar_Matrix::visualizer_bass_slide(audio_bins* bins, float in_factor, float out_factor) {
 80a10da:	2507      	movs	r5, #7
 80a10dc:	2600      	movs	r6, #0
 80a10de:	f504 73fa 	add.w	r3, r4, #500	; 0x1f4
    for (int x = 0; x < NUM_BARS / 2; x++) {
        int num_lit = bass_slide_heights[x];// / (float)(NUM_BARS/2 - x);
        int y = (STRIP_LENGTH / 2) - (num_lit / 2);

        for (int i = 0; i < num_lit; i++) {
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a10e2:	f8df b098 	ldr.w	fp, [pc, #152]	; 80a117c <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1c8>
 80a10e6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80a118c <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1d8>
 80a10ea:	9304      	str	r3, [sp, #16]
        for (int i = 0; i < num_lit; i++) {
 80a10ec:	f04f 0900 	mov.w	r9, #0
        int num_lit = bass_slide_heights[x];// / (float)(NUM_BARS/2 - x);
 80a10f0:	9b04      	ldr	r3, [sp, #16]
 80a10f2:	f853 ab04 	ldr.w	sl, [r3], #4
 80a10f6:	9304      	str	r3, [sp, #16]
        int y = (STRIP_LENGTH / 2) - (num_lit / 2);
 80a10f8:	eb0a 73da 	add.w	r3, sl, sl, lsr #31
 80a10fc:	105b      	asrs	r3, r3, #1
 80a10fe:	f1c3 031d 	rsb	r3, r3, #29
 80a1102:	9305      	str	r3, [sp, #20]
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a1104:	b2f3      	uxtb	r3, r6
 80a1106:	9306      	str	r3, [sp, #24]
        for (int i = 0; i < num_lit; i++) {
 80a1108:	45d1      	cmp	r9, sl
 80a110a:	da2c      	bge.n	80a1166 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1b2>
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a110c:	210c      	movs	r1, #12
 80a110e:	9b05      	ldr	r3, [sp, #20]
 80a1110:	eb03 0209 	add.w	r2, r3, r9
 80a1114:	f8db 3000 	ldr.w	r3, [fp]
 80a1118:	b292      	uxth	r2, r2
 80a111a:	434b      	muls	r3, r1
 80a111c:	eb08 0103 	add.w	r1, r8, r3
 80a1120:	7a08      	ldrb	r0, [r1, #8]
 80a1122:	f818 3003 	ldrb.w	r3, [r8, r3]
 80a1126:	7909      	ldrb	r1, [r1, #4]
 80a1128:	9002      	str	r0, [sp, #8]
 80a112a:	9101      	str	r1, [sp, #4]
 80a112c:	4620      	mov	r0, r4
 80a112e:	9906      	ldr	r1, [sp, #24]
 80a1130:	9300      	str	r3, [sp, #0]
 80a1132:	463b      	mov	r3, r7
 80a1134:	9207      	str	r2, [sp, #28]
 80a1136:	f7ff f8e9 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(NUM_BARS-x-1, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a113a:	210c      	movs	r1, #12
 80a113c:	f8db 3000 	ldr.w	r3, [fp]
 80a1140:	9a07      	ldr	r2, [sp, #28]
 80a1142:	434b      	muls	r3, r1
 80a1144:	eb08 0103 	add.w	r1, r8, r3
 80a1148:	7a08      	ldrb	r0, [r1, #8]
 80a114a:	f818 3003 	ldrb.w	r3, [r8, r3]
 80a114e:	7909      	ldrb	r1, [r1, #4]
 80a1150:	9002      	str	r0, [sp, #8]
 80a1152:	9101      	str	r1, [sp, #4]
 80a1154:	9300      	str	r3, [sp, #0]
 80a1156:	4629      	mov	r1, r5
 80a1158:	463b      	mov	r3, r7
 80a115a:	4620      	mov	r0, r4
 80a115c:	f7ff f8d6 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (int i = 0; i < num_lit; i++) {
 80a1160:	f109 0901 	add.w	r9, r9, #1
 80a1164:	e7d0      	b.n	80a1108 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x154>
    for (int x = 0; x < NUM_BARS / 2; x++) {
 80a1166:	3601      	adds	r6, #1
 80a1168:	3d01      	subs	r5, #1
 80a116a:	2e04      	cmp	r6, #4
 80a116c:	b2ed      	uxtb	r5, r5
 80a116e:	d1bd      	bne.n	80a10ec <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x138>
            mix_pixel(NUM_BARS-x-1, i, in_factor, 255-COLOR_TABLE[color_table_idx][0], 255-COLOR_TABLE[color_table_idx][1], 255-COLOR_TABLE[color_table_idx][2]);
            mix_pixel(x, y+i+num_lit, in_factor, 255-COLOR_TABLE[color_table_idx][0], 255-COLOR_TABLE[color_table_idx][1], 255-COLOR_TABLE[color_table_idx][2]);
            mix_pixel(NUM_BARS-x-1, y+i+num_lit, in_factor, 255-COLOR_TABLE[color_table_idx][0], 255-COLOR_TABLE[color_table_idx][1], 255-COLOR_TABLE[color_table_idx][2]);
        }*/
    }
}
 80a1170:	b009      	add	sp, #36	; 0x24
 80a1172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1176:	bf00      	nop
 80a1178:	20000074 	.word	0x20000074
 80a117c:	20000078 	.word	0x20000078
 80a1180:	3fe00000 	.word	0x3fe00000
 80a1184:	457ff000 	.word	0x457ff000
 80a1188:	42680000 	.word	0x42680000
 80a118c:	080aa34c 	.word	0x080aa34c

080a1190 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff>:
/* ================================================================== *
 * Function: visualizer_classic
 * Description: Emulate Steven's original, pre-muse, visualizer.
 * Parameters: none.
 * ================================================================== */
void Bar_Matrix::visualizer_classic(audio_bins* bins, float in_factor, float out_factor) {
 80a1190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1194:	4605      	mov	r5, r0
 80a1196:	b085      	sub	sp, #20
    decay_to_rgb(out_factor, 0, 0, 10);
 80a1198:	4618      	mov	r0, r3
 80a119a:	f008 f94b 	bl	80a9434 <__aeabi_f2d>
 80a119e:	2400      	movs	r4, #0
 80a11a0:	460b      	mov	r3, r1
 80a11a2:	210a      	movs	r1, #10
 80a11a4:	4602      	mov	r2, r0
 80a11a6:	e9cd 4101 	strd	r4, r1, [sp, #4]
 80a11aa:	4628      	mov	r0, r5
 80a11ac:	9400      	str	r4, [sp, #0]
 80a11ae:	f7fe ffdf 	bl	80a0170 <_ZN10Bar_Matrix12decay_to_rgbEdiii>

    for (int i = 0; i < NUM_BINS; i++) {
        if (bd->beat_on_bin(i)) {
 80a11b2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80a1224 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x94>
            fill_bar(i, 200, 200, 200);
            //fill_bar(i, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
            color_table_idx = (color_table_idx+1) % 51;
 80a11b6:	4e1a      	ldr	r6, [pc, #104]	; (80a1220 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x90>)

            if (i == 6) {
                fill_bar(7, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a11b8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80a1228 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x98>
        if (bd->beat_on_bin(i)) {
 80a11bc:	4621      	mov	r1, r4
 80a11be:	f8d9 0000 	ldr.w	r0, [r9]
 80a11c2:	f000 ff88 	bl	80a20d6 <_ZN14Beat_Detection11beat_on_binEi>
 80a11c6:	b328      	cbz	r0, 80a1214 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x84>
            fill_bar(i, 200, 200, 200);
 80a11c8:	23c8      	movs	r3, #200	; 0xc8
            color_table_idx = (color_table_idx+1) % 51;
 80a11ca:	2733      	movs	r7, #51	; 0x33
            fill_bar(i, 200, 200, 200);
 80a11cc:	461a      	mov	r2, r3
 80a11ce:	9300      	str	r3, [sp, #0]
 80a11d0:	4621      	mov	r1, r4
 80a11d2:	4628      	mov	r0, r5
 80a11d4:	f7ff f834 	bl	80a0240 <_ZN10Bar_Matrix8fill_barEiiii>
            color_table_idx = (color_table_idx+1) % 51;
 80a11d8:	6833      	ldr	r3, [r6, #0]
            if (i == 6) {
 80a11da:	2c06      	cmp	r4, #6
            color_table_idx = (color_table_idx+1) % 51;
 80a11dc:	f103 0301 	add.w	r3, r3, #1
 80a11e0:	fb93 f2f7 	sdiv	r2, r3, r7
 80a11e4:	fb07 3312 	mls	r3, r7, r2, r3
 80a11e8:	6033      	str	r3, [r6, #0]
            if (i == 6) {
 80a11ea:	d113      	bne.n	80a1214 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x84>
                fill_bar(7, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a11ec:	220c      	movs	r2, #12
 80a11ee:	435a      	muls	r2, r3
 80a11f0:	eb08 0302 	add.w	r3, r8, r2
 80a11f4:	6899      	ldr	r1, [r3, #8]
 80a11f6:	f858 2002 	ldr.w	r2, [r8, r2]
 80a11fa:	685b      	ldr	r3, [r3, #4]
 80a11fc:	9100      	str	r1, [sp, #0]
 80a11fe:	4628      	mov	r0, r5
 80a1200:	2107      	movs	r1, #7
 80a1202:	f7ff f81d 	bl	80a0240 <_ZN10Bar_Matrix8fill_barEiiii>
                color_table_idx = (color_table_idx+1) % 51;
 80a1206:	6833      	ldr	r3, [r6, #0]
 80a1208:	3301      	adds	r3, #1
 80a120a:	fb93 f2f7 	sdiv	r2, r3, r7
 80a120e:	fb07 3712 	mls	r7, r7, r2, r3
 80a1212:	6037      	str	r7, [r6, #0]
    for (int i = 0; i < NUM_BINS; i++) {
 80a1214:	3401      	adds	r4, #1
 80a1216:	2c07      	cmp	r4, #7
 80a1218:	d1d0      	bne.n	80a11bc <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x2c>
            }
        }
    }
}
 80a121a:	b005      	add	sp, #20
 80a121c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1220:	20000078 	.word	0x20000078
 80a1224:	20000074 	.word	0x20000074
 80a1228:	080aa34c 	.word	0x080aa34c
 80a122c:	00000000 	.word	0x00000000

080a1230 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff>:
/* ================================================================== *
 * Function: decay
 * Description: slowly fades out matrix values
 * Parameters: [float] factor - decay factor to be multiplied by
 * ================================================================== */
void Bar_Matrix::visualizer_plasma(audio_bins* bins, float in_factor, float out_factor) {
 80a1230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1234:	4680      	mov	r8, r0
 80a1236:	b08b      	sub	sp, #44	; 0x2c
    decay(out_factor);
 80a1238:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_plasma(audio_bins* bins, float in_factor, float out_factor) {
 80a123a:	4691      	mov	r9, r2
 80a123c:	460d      	mov	r5, r1
    decay(out_factor);
 80a123e:	f008 f8f9 	bl	80a9434 <__aeabi_f2d>
 80a1242:	4602      	mov	r2, r0
 80a1244:	460b      	mov	r3, r1
 80a1246:	4640      	mov	r0, r8
 80a1248:	f7fe ff36 	bl	80a00b8 <_ZN10Bar_Matrix5decayEd>
 80a124c:	2300      	movs	r3, #0
 80a124e:	9305      	str	r3, [sp, #20]

    for (char i = 0; i < disp_width; i++) {
 80a1250:	4b69      	ldr	r3, [pc, #420]	; (80a13f8 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1c8>)
 80a1252:	f89d 7014 	ldrb.w	r7, [sp, #20]
 80a1256:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a125a:	429f      	cmp	r7, r3
 80a125c:	f280 80b8 	bge.w	80a13d0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1a0>
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a1260:	4b66      	ldr	r3, [pc, #408]	; (80a13fc <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1cc>)
            // Move wave up
            unsigned int color = bars[i]->getPixelColor(j-1);
 80a1262:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 80a1408 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1d8>
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a1266:	881c      	ldrh	r4, [r3, #0]
            unsigned int color = bars[i]->getPixelColor(j-1);
 80a1268:	00bb      	lsls	r3, r7, #2
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a126a:	3c01      	subs	r4, #1
 80a126c:	b224      	sxth	r4, r4
            unsigned int color = bars[i]->getPixelColor(j-1);
 80a126e:	9308      	str	r3, [sp, #32]
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a1270:	2c00      	cmp	r4, #0
 80a1272:	dd25      	ble.n	80a12c0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x90>
            unsigned int color = bars[i]->getPixelColor(j-1);
 80a1274:	b2a4      	uxth	r4, r4
 80a1276:	f8db 3000 	ldr.w	r3, [fp]
 80a127a:	9a08      	ldr	r2, [sp, #32]
 80a127c:	1e61      	subs	r1, r4, #1
 80a127e:	5898      	ldr	r0, [r3, r2]
 80a1280:	b289      	uxth	r1, r1
 80a1282:	f002 f960 	bl	80a3546 <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
            mix_pixel(i, j, in_factor, (char)(color >> 16), (char)(color >> 8), (char)(color));
 80a1286:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80a128a:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80a128e:	b2c6      	uxtb	r6, r0
 80a1290:	4622      	mov	r2, r4
 80a1292:	4639      	mov	r1, r7
 80a1294:	4640      	mov	r0, r8
 80a1296:	9306      	str	r3, [sp, #24]
 80a1298:	9300      	str	r3, [sp, #0]
 80a129a:	e9cd a601 	strd	sl, r6, [sp, #4]
 80a129e:	464b      	mov	r3, r9
 80a12a0:	f7ff f834 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(i, j+1, in_factor, (char)(color >> 16), (char)(color >> 8), (char)(color));
 80a12a4:	9b06      	ldr	r3, [sp, #24]
 80a12a6:	1c62      	adds	r2, r4, #1
 80a12a8:	9300      	str	r3, [sp, #0]
 80a12aa:	4639      	mov	r1, r7
 80a12ac:	464b      	mov	r3, r9
 80a12ae:	4640      	mov	r0, r8
 80a12b0:	e9cd a601 	strd	sl, r6, [sp, #4]
 80a12b4:	b292      	uxth	r2, r2
 80a12b6:	3c02      	subs	r4, #2
 80a12b8:	f7ff f828 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a12bc:	b224      	sxth	r4, r4
 80a12be:	e7d7      	b.n	80a1270 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x40>
        }

        // Set bar levels
        int level = 0;
        switch(i) {
 80a12c0:	2f07      	cmp	r7, #7
 80a12c2:	f200 8083 	bhi.w	80a13cc <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x19c>
 80a12c6:	e8df f007 	tbb	[pc, r7]
 80a12ca:	7304      	.short	0x7304
 80a12cc:	7b797775 	.word	0x7b797775
 80a12d0:	7f7d      	.short	0x7f7d
            case 0: level = bins->left[LEFT_160];       break;
 80a12d2:	6868      	ldr	r0, [r5, #4]
            case 5: level = bins->right[RIGHT_6250];    break;
            case 6: level = bins->right[RIGHT_1000];    break;
            case 7: level = bins->right[RIGHT_160];     break;
        }

        level *= FREQ_GAIN;
 80a12d4:	f008 fd08 	bl	80a9ce8 <__aeabi_i2f>
 80a12d8:	f008 ff36 	bl	80aa148 <__aeabi_f2iz>
 80a12dc:	4604      	mov	r4, r0
        // set bar
        float val = level*2*PI/BINS_MAX;
 80a12de:	0040      	lsls	r0, r0, #1
 80a12e0:	f008 f896 	bl	80a9410 <__aeabi_i2d>
 80a12e4:	a33c      	add	r3, pc, #240	; (adr r3, 80a13d8 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1a8>)
 80a12e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a12ea:	f008 f8fb 	bl	80a94e4 <__aeabi_dmul>
 80a12ee:	a33c      	add	r3, pc, #240	; (adr r3, 80a13e0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1b0>)
 80a12f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a12f4:	f008 fa20 	bl	80a9738 <__aeabi_ddiv>
 80a12f8:	f008 fbec 	bl	80a9ad4 <__aeabi_d2f>
 80a12fc:	4606      	mov	r6, r0
        //float intensity = (pow((float)(level)/(float)(BINS_MAX), 2))*255;
        float intensity = (level)/(BINS_MAX)*255.0f;
 80a12fe:	4620      	mov	r0, r4
 80a1300:	f008 fcf2 	bl	80a9ce8 <__aeabi_i2f>
 80a1304:	493e      	ldr	r1, [pc, #248]	; (80a1400 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1d0>)
 80a1306:	f008 fdf7 	bl	80a9ef8 <__aeabi_fdiv>
 80a130a:	493e      	ldr	r1, [pc, #248]	; (80a1404 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1d4>)
 80a130c:	f008 fd40 	bl	80a9d90 <__aeabi_fmul>
 80a1310:	4601      	mov	r1, r0
        intensity *= intensity;
 80a1312:	f008 fd3d 	bl	80a9d90 <__aeabi_fmul>
        if (intensity > 255) intensity = 255.0;
 80a1316:	493b      	ldr	r1, [pc, #236]	; (80a1404 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1d4>)
        intensity *= intensity;
 80a1318:	4604      	mov	r4, r0
        if (intensity > 255) intensity = 255.0;
 80a131a:	f008 fef5 	bl	80aa108 <__aeabi_fcmpgt>
 80a131e:	b100      	cbz	r0, 80a1322 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xf2>
 80a1320:	4c38      	ldr	r4, [pc, #224]	; (80a1404 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1d4>)
        mix_pixel(i, 0, in_factor, cos(val - 4*PI/3)*intensity, cos(val - 2*PI/3)*intensity, cos(val)*intensity);
 80a1322:	4630      	mov	r0, r6
 80a1324:	f008 f886 	bl	80a9434 <__aeabi_f2d>
 80a1328:	a32f      	add	r3, pc, #188	; (adr r3, 80a13e8 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1b8>)
 80a132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a132e:	4682      	mov	sl, r0
 80a1330:	468b      	mov	fp, r1
 80a1332:	f007 ff1f 	bl	80a9174 <__aeabi_dsub>
 80a1336:	f004 fb63 	bl	80a5a00 <cos>
 80a133a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a133e:	4620      	mov	r0, r4
 80a1340:	f008 f878 	bl	80a9434 <__aeabi_f2d>
 80a1344:	a32a      	add	r3, pc, #168	; (adr r3, 80a13f0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1c0>)
 80a1346:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a134a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a134e:	4650      	mov	r0, sl
 80a1350:	4659      	mov	r1, fp
 80a1352:	f007 ff0f 	bl	80a9174 <__aeabi_dsub>
 80a1356:	f004 fb53 	bl	80a5a00 <cos>
 80a135a:	4682      	mov	sl, r0
 80a135c:	4630      	mov	r0, r6
 80a135e:	468b      	mov	fp, r1
 80a1360:	f004 fba4 	bl	80a5aac <cosf>
 80a1364:	4601      	mov	r1, r0
 80a1366:	4620      	mov	r0, r4
 80a1368:	f008 fd12 	bl	80a9d90 <__aeabi_fmul>
 80a136c:	f008 ff12 	bl	80aa194 <__aeabi_f2uiz>
 80a1370:	b2c0      	uxtb	r0, r0
 80a1372:	4652      	mov	r2, sl
 80a1374:	465b      	mov	r3, fp
 80a1376:	9002      	str	r0, [sp, #8]
 80a1378:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a137c:	f008 f8b2 	bl	80a94e4 <__aeabi_dmul>
 80a1380:	f008 fb88 	bl	80a9a94 <__aeabi_d2uiz>
 80a1384:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a1388:	b2c0      	uxtb	r0, r0
 80a138a:	9001      	str	r0, [sp, #4]
 80a138c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a1390:	f008 f8a8 	bl	80a94e4 <__aeabi_dmul>
 80a1394:	f008 fb7e 	bl	80a9a94 <__aeabi_d2uiz>
 80a1398:	b2c0      	uxtb	r0, r0
 80a139a:	464b      	mov	r3, r9
 80a139c:	9000      	str	r0, [sp, #0]
 80a139e:	2200      	movs	r2, #0
 80a13a0:	4639      	mov	r1, r7
 80a13a2:	4640      	mov	r0, r8
 80a13a4:	f7fe ffb2 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
    for (char i = 0; i < disp_width; i++) {
 80a13a8:	9b05      	ldr	r3, [sp, #20]
 80a13aa:	3301      	adds	r3, #1
 80a13ac:	9305      	str	r3, [sp, #20]
 80a13ae:	e74f      	b.n	80a1250 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x20>
            case 1: level = bins->left[LEFT_1000];      break;
 80a13b0:	68e8      	ldr	r0, [r5, #12]
 80a13b2:	e78f      	b.n	80a12d4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
            case 2: level = bins->left[LEFT_6250];      break;
 80a13b4:	6968      	ldr	r0, [r5, #20]
 80a13b6:	e78d      	b.n	80a12d4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
            case 3: level = bins->left[LEFT_16000];     break;
 80a13b8:	69a8      	ldr	r0, [r5, #24]
 80a13ba:	e78b      	b.n	80a12d4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
            case 4: level = bins->right[RIGHT_16000];   break;
 80a13bc:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80a13be:	e789      	b.n	80a12d4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
            case 5: level = bins->right[RIGHT_6250];    break;
 80a13c0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80a13c2:	e787      	b.n	80a12d4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
            case 6: level = bins->right[RIGHT_1000];    break;
 80a13c4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80a13c6:	e785      	b.n	80a12d4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
            case 7: level = bins->right[RIGHT_160];     break;
 80a13c8:	6a28      	ldr	r0, [r5, #32]
 80a13ca:	e783      	b.n	80a12d4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a13cc:	2000      	movs	r0, #0
 80a13ce:	e781      	b.n	80a12d4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>

        //bars[i]->setPixelColor(0, cos(val - 2*PI/3)*intensity, cos(val)*intensity, cos(val - 4*PI/3)*intensity);

    }
}
 80a13d0:	b00b      	add	sp, #44	; 0x2c
 80a13d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a13d6:	bf00      	nop
 80a13d8:	fc8b007a 	.word	0xfc8b007a
 80a13dc:	400921fa 	.word	0x400921fa
 80a13e0:	00000000 	.word	0x00000000
 80a13e4:	40affe00 	.word	0x40affe00
 80a13e8:	fdb20051 	.word	0xfdb20051
 80a13ec:	4010c151 	.word	0x4010c151
 80a13f0:	fdb20051 	.word	0xfdb20051
 80a13f4:	4000c151 	.word	0x4000c151
 80a13f8:	2000007e 	.word	0x2000007e
 80a13fc:	2000007c 	.word	0x2000007c
 80a1400:	457ff000 	.word	0x457ff000
 80a1404:	437f0000 	.word	0x437f0000
 80a1408:	20000070 	.word	0x20000070

080a140c <_ZN10Bar_Matrix15visualizer_pongEf>:

void Bar_Matrix::visualizer_pong(float in_factor) {
 80a140c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1410:	4604      	mov	r4, r0
    pongPaddles[0].tick(&pongBall);
 80a1412:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
 80a1416:	f500 7ab0 	add.w	sl, r0, #352	; 0x160
void Bar_Matrix::visualizer_pong(float in_factor) {
 80a141a:	b085      	sub	sp, #20
    pongPaddles[0].tick(&pongBall);
 80a141c:	4650      	mov	r0, sl
void Bar_Matrix::visualizer_pong(float in_factor) {
 80a141e:	460f      	mov	r7, r1
    pongPaddles[1].tick(&pongBall);
 80a1420:	f504 79c8 	add.w	r9, r4, #400	; 0x190
    pongPaddles[0].tick(&pongBall);
 80a1424:	4631      	mov	r1, r6
 80a1426:	f002 f973 	bl	80a3710 <_ZN10PongPaddle4tickEP8PongBall>
    pongBall.tick();

    if (bd->num_beats() != last_beat_count) {
 80a142a:	4d51      	ldr	r5, [pc, #324]	; (80a1570 <_ZN10Bar_Matrix15visualizer_pongEf+0x164>)
    pongPaddles[1].tick(&pongBall);
 80a142c:	4631      	mov	r1, r6
 80a142e:	4648      	mov	r0, r9
 80a1430:	f002 f96e 	bl	80a3710 <_ZN10PongPaddle4tickEP8PongBall>
    pongBall.tick();
 80a1434:	4630      	mov	r0, r6
 80a1436:	f002 f8e9 	bl	80a360c <_ZN8PongBall4tickEv>
    if (bd->num_beats() != last_beat_count) {
 80a143a:	6828      	ldr	r0, [r5, #0]
 80a143c:	f000 fe4f 	bl	80a20de <_ZN14Beat_Detection9num_beatsEv>
 80a1440:	f8d4 31f0 	ldr.w	r3, [r4, #496]	; 0x1f0
 80a1444:	4298      	cmp	r0, r3
 80a1446:	d01b      	beq.n	80a1480 <_ZN10Bar_Matrix15visualizer_pongEf+0x74>
        last_beat_count = bd->num_beats();
 80a1448:	6828      	ldr	r0, [r5, #0]
 80a144a:	f000 fe48 	bl	80a20de <_ZN14Beat_Detection9num_beatsEv>
        if (random(0, 3) == 0 ) {
 80a144e:	2103      	movs	r1, #3
        last_beat_count = bd->num_beats();
 80a1450:	f8c4 01f0 	str.w	r0, [r4, #496]	; 0x1f0
        if (random(0, 3) == 0 ) {
 80a1454:	2000      	movs	r0, #0
 80a1456:	f003 f9ca 	bl	80a47ee <_Z6randomii>
 80a145a:	2800      	cmp	r0, #0
 80a145c:	d13a      	bne.n	80a14d4 <_ZN10Bar_Matrix15visualizer_pongEf+0xc8>
            pongPaddles[1].setColor(bd->r(), bd->g(), bd->b());
 80a145e:	6828      	ldr	r0, [r5, #0]
 80a1460:	f000 fe3f 	bl	80a20e2 <_ZN14Beat_Detection1rEv>
 80a1464:	4680      	mov	r8, r0
 80a1466:	6828      	ldr	r0, [r5, #0]
 80a1468:	f000 fe3d 	bl	80a20e6 <_ZN14Beat_Detection1gEv>
 80a146c:	4682      	mov	sl, r0
 80a146e:	6828      	ldr	r0, [r5, #0]
 80a1470:	f000 fe3b 	bl	80a20ea <_ZN14Beat_Detection1bEv>
 80a1474:	4652      	mov	r2, sl
 80a1476:	4603      	mov	r3, r0
 80a1478:	4641      	mov	r1, r8
 80a147a:	4648      	mov	r0, r9
 80a147c:	f002 f9f4 	bl	80a3868 <_ZN10PongPaddle8setColorEiii>
        } else {
            pongBall.setColor(bd->r(), bd->g(), bd->b());
        }
    }

    clear_matrix();
 80a1480:	4620      	mov	r0, r4
 80a1482:	f7fe ffb1 	bl	80a03e8 <_ZN10Bar_Matrix12clear_matrixEv>

    // Draw paddles
    for (int i = 0; i < 2; i++) {
 80a1486:	4625      	mov	r5, r4
 80a1488:	f104 0b60 	add.w	fp, r4, #96	; 0x60
        for (int y = 0; y < pongPaddles[i].len; y++) {
 80a148c:	f04f 0800 	mov.w	r8, #0
 80a1490:	f505 7ab0 	add.w	sl, r5, #352	; 0x160
 80a1494:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
 80a1498:	4543      	cmp	r3, r8
 80a149a:	dd44      	ble.n	80a1526 <_ZN10Bar_Matrix15visualizer_pongEf+0x11a>
            mix_pixel(pongPaddles[i].xPos(), pongPaddles[i].yPos()+y, in_factor, pongPaddles[i].r, pongPaddles[i].g, pongPaddles[i].b);
 80a149c:	4650      	mov	r0, sl
 80a149e:	f002 f9d9 	bl	80a3854 <_ZN10PongPaddle4xPosEv>
 80a14a2:	4681      	mov	r9, r0
 80a14a4:	4650      	mov	r0, sl
 80a14a6:	f002 f9da 	bl	80a385e <_ZN10PongPaddle4yPosEv>
 80a14aa:	f895 318c 	ldrb.w	r3, [r5, #396]	; 0x18c
 80a14ae:	eb00 0208 	add.w	r2, r0, r8
 80a14b2:	9302      	str	r3, [sp, #8]
 80a14b4:	f895 3188 	ldrb.w	r3, [r5, #392]	; 0x188
 80a14b8:	4620      	mov	r0, r4
 80a14ba:	9301      	str	r3, [sp, #4]
 80a14bc:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
 80a14c0:	b292      	uxth	r2, r2
 80a14c2:	9300      	str	r3, [sp, #0]
 80a14c4:	fa5f f189 	uxtb.w	r1, r9
 80a14c8:	463b      	mov	r3, r7
 80a14ca:	f7fe ff1f 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (int y = 0; y < pongPaddles[i].len; y++) {
 80a14ce:	f108 0801 	add.w	r8, r8, #1
 80a14d2:	e7df      	b.n	80a1494 <_ZN10Bar_Matrix15visualizer_pongEf+0x88>
        } else if (random(0, 2) == 0) {
 80a14d4:	2102      	movs	r1, #2
 80a14d6:	2000      	movs	r0, #0
 80a14d8:	f003 f989 	bl	80a47ee <_Z6randomii>
 80a14dc:	b988      	cbnz	r0, 80a1502 <_ZN10Bar_Matrix15visualizer_pongEf+0xf6>
            pongPaddles[0].setColor(bd->r(), bd->g(), bd->b());
 80a14de:	6828      	ldr	r0, [r5, #0]
 80a14e0:	f000 fdff 	bl	80a20e2 <_ZN14Beat_Detection1rEv>
 80a14e4:	4680      	mov	r8, r0
 80a14e6:	6828      	ldr	r0, [r5, #0]
 80a14e8:	f000 fdfd 	bl	80a20e6 <_ZN14Beat_Detection1gEv>
 80a14ec:	4681      	mov	r9, r0
 80a14ee:	6828      	ldr	r0, [r5, #0]
 80a14f0:	f000 fdfb 	bl	80a20ea <_ZN14Beat_Detection1bEv>
 80a14f4:	464a      	mov	r2, r9
 80a14f6:	4603      	mov	r3, r0
 80a14f8:	4641      	mov	r1, r8
 80a14fa:	4650      	mov	r0, sl
 80a14fc:	f002 f9b4 	bl	80a3868 <_ZN10PongPaddle8setColorEiii>
 80a1500:	e7be      	b.n	80a1480 <_ZN10Bar_Matrix15visualizer_pongEf+0x74>
            pongBall.setColor(bd->r(), bd->g(), bd->b());
 80a1502:	6828      	ldr	r0, [r5, #0]
 80a1504:	f000 fded 	bl	80a20e2 <_ZN14Beat_Detection1rEv>
 80a1508:	4680      	mov	r8, r0
 80a150a:	6828      	ldr	r0, [r5, #0]
 80a150c:	f000 fdeb 	bl	80a20e6 <_ZN14Beat_Detection1gEv>
 80a1510:	4681      	mov	r9, r0
 80a1512:	6828      	ldr	r0, [r5, #0]
 80a1514:	f000 fde9 	bl	80a20ea <_ZN14Beat_Detection1bEv>
 80a1518:	464a      	mov	r2, r9
 80a151a:	4603      	mov	r3, r0
 80a151c:	4641      	mov	r1, r8
 80a151e:	4630      	mov	r0, r6
 80a1520:	f002 f8d8 	bl	80a36d4 <_ZN8PongBall8setColorEiii>
 80a1524:	e7ac      	b.n	80a1480 <_ZN10Bar_Matrix15visualizer_pongEf+0x74>
    for (int i = 0; i < 2; i++) {
 80a1526:	3530      	adds	r5, #48	; 0x30
 80a1528:	455d      	cmp	r5, fp
 80a152a:	d1af      	bne.n	80a148c <_ZN10Bar_Matrix15visualizer_pongEf+0x80>
        }
    }

    // Draw Ball
    for (int i = 0; i < pongBall.len; i++) {
 80a152c:	2500      	movs	r5, #0
 80a152e:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 80a1532:	42ab      	cmp	r3, r5
 80a1534:	dd19      	ble.n	80a156a <_ZN10Bar_Matrix15visualizer_pongEf+0x15e>
        mix_pixel(pongBall.xPos(), pongBall.yPos()+i, in_factor, pongBall.r, pongBall.g, pongBall.b);
 80a1536:	4630      	mov	r0, r6
 80a1538:	f002 f8c2 	bl	80a36c0 <_ZN8PongBall4xPosEv>
 80a153c:	4680      	mov	r8, r0
 80a153e:	4630      	mov	r0, r6
 80a1540:	f002 f8c3 	bl	80a36ca <_ZN8PongBall4yPosEv>
 80a1544:	f894 31ec 	ldrb.w	r3, [r4, #492]	; 0x1ec
 80a1548:	1942      	adds	r2, r0, r5
 80a154a:	9302      	str	r3, [sp, #8]
 80a154c:	f894 31e8 	ldrb.w	r3, [r4, #488]	; 0x1e8
 80a1550:	4620      	mov	r0, r4
 80a1552:	9301      	str	r3, [sp, #4]
 80a1554:	f894 31e4 	ldrb.w	r3, [r4, #484]	; 0x1e4
 80a1558:	b292      	uxth	r2, r2
 80a155a:	9300      	str	r3, [sp, #0]
 80a155c:	fa5f f188 	uxtb.w	r1, r8
 80a1560:	463b      	mov	r3, r7
 80a1562:	f7fe fed3 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
    for (int i = 0; i < pongBall.len; i++) {
 80a1566:	3501      	adds	r5, #1
 80a1568:	e7e1      	b.n	80a152e <_ZN10Bar_Matrix15visualizer_pongEf+0x122>
    }
}
 80a156a:	b005      	add	sp, #20
 80a156c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1570:	20000074 	.word	0x20000074

080a1574 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff>:
/* ================================================================== *
 * Function: visualizer_pulse
 * Description: Creates pulses where sound appears to be originating from
 * Parameters:  None
 * ================================================================== */
void Bar_Matrix::visualizer_pulse(audio_bins* bins, float in_factor, float out_factor, float distance_x, float distance_y) {
 80a1574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1578:	4605      	mov	r5, r0
 80a157a:	b099      	sub	sp, #100	; 0x64
    decay (out_factor);
 80a157c:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_pulse(audio_bins* bins, float in_factor, float out_factor, float distance_x, float distance_y) {
 80a157e:	460c      	mov	r4, r1
 80a1580:	9207      	str	r2, [sp, #28]
    decay (out_factor);
 80a1582:	f007 ff57 	bl	80a9434 <__aeabi_f2d>
 80a1586:	1f26      	subs	r6, r4, #4
 80a1588:	4602      	mov	r2, r0
 80a158a:	460b      	mov	r3, r1
 80a158c:	4628      	mov	r0, r5
 80a158e:	f7fe fd93 	bl	80a00b8 <_ZN10Bar_Matrix5decayEd>
 80a1592:	4637      	mov	r7, r6
 80a1594:	3418      	adds	r4, #24
 80a1596:	f10d 0928 	add.w	r9, sp, #40	; 0x28

    // Calculate frequency pan and "fade"
    float pans[NUM_BINS]; // ratio left to right, 0-1
    float intensities[NUM_BINS]; // ratio low to high, 0-1
    for (char i = 0; i < NUM_BINS; i++)
    pans[i] = float(bins->left[i])/float(bins->right[i]);
 80a159a:	f857 0f04 	ldr.w	r0, [r7, #4]!
 80a159e:	f008 fba3 	bl	80a9ce8 <__aeabi_i2f>
 80a15a2:	4680      	mov	r8, r0
 80a15a4:	69f8      	ldr	r0, [r7, #28]
 80a15a6:	f008 fb9f 	bl	80a9ce8 <__aeabi_i2f>
 80a15aa:	4601      	mov	r1, r0
 80a15ac:	4640      	mov	r0, r8
 80a15ae:	f008 fca3 	bl	80a9ef8 <__aeabi_fdiv>
    for (char i = 0; i < NUM_BINS; i++)
 80a15b2:	42bc      	cmp	r4, r7
    pans[i] = float(bins->left[i])/float(bins->right[i]);
 80a15b4:	f849 0b04 	str.w	r0, [r9], #4
    for (char i = 0; i < NUM_BINS; i++)
 80a15b8:	d1ef      	bne.n	80a159a <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x26>
    for (char i = 0; i < NUM_BINS; i++)
    intensities[i] = ((float(bins->left[i])+float(bins->right[i]))/2.0f)/BINS_MAX;
 80a15ba:	f04f 597c 	mov.w	r9, #1056964608	; 0x3f000000
 80a15be:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80a16bc <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x148>
    for (char i = 0; i < NUM_BINS; i++)
 80a15c2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
    intensities[i] = ((float(bins->left[i])+float(bins->right[i]))/2.0f)/BINS_MAX;
 80a15c6:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80a15ca:	f008 fb8d 	bl	80a9ce8 <__aeabi_i2f>
 80a15ce:	4607      	mov	r7, r0
 80a15d0:	69f0      	ldr	r0, [r6, #28]
 80a15d2:	f008 fb89 	bl	80a9ce8 <__aeabi_i2f>
 80a15d6:	4601      	mov	r1, r0
 80a15d8:	4638      	mov	r0, r7
 80a15da:	f008 fad1 	bl	80a9b80 <__addsf3>
 80a15de:	4649      	mov	r1, r9
 80a15e0:	f008 fbd6 	bl	80a9d90 <__aeabi_fmul>
 80a15e4:	4641      	mov	r1, r8
 80a15e6:	f008 fc87 	bl	80a9ef8 <__aeabi_fdiv>
    for (char i = 0; i < NUM_BINS; i++)
 80a15ea:	42b4      	cmp	r4, r6
    intensities[i] = ((float(bins->left[i])+float(bins->right[i]))/2.0f)/BINS_MAX;
 80a15ec:	f84a 0b04 	str.w	r0, [sl], #4
    for (char i = 0; i < NUM_BINS; i++)
 80a15f0:	d1e9      	bne.n	80a15c6 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x52>
 80a15f2:	2700      	movs	r7, #0

    for (char i = 0; i < disp_width; i++) {
 80a15f4:	4b2e      	ldr	r3, [pc, #184]	; (80a16b0 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x13c>)
 80a15f6:	fa5f f987 	uxtb.w	r9, r7
 80a15fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a15fe:	4599      	cmp	r9, r3
 80a1600:	da53      	bge.n	80a16aa <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x136>
 80a1602:	f04f 0800 	mov.w	r8, #0
        for (char j = 0; j < disp_height; j++) {
 80a1606:	4b2b      	ldr	r3, [pc, #172]	; (80a16b4 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x140>)
 80a1608:	fa5f fa88 	uxtb.w	sl, r8
 80a160c:	f9b3 4000 	ldrsh.w	r4, [r3]
 80a1610:	4b27      	ldr	r3, [pc, #156]	; (80a16b0 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x13c>)
 80a1612:	45a2      	cmp	sl, r4
 80a1614:	f9b3 0000 	ldrsh.w	r0, [r3]
 80a1618:	da45      	bge.n	80a16a6 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x132>
            float level = 0;

            // Calculate level intensity
            for (char x = 0; x < NUM_BINS; x++) {
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a161a:	fb99 f0f0 	sdiv	r0, r9, r0
 80a161e:	f008 fb63 	bl	80a9ce8 <__aeabi_i2f>
 80a1622:	4683      	mov	fp, r0
 80a1624:	fb9a f0f4 	sdiv	r0, sl, r4
 80a1628:	f008 fb5e 	bl	80a9ce8 <__aeabi_i2f>
 80a162c:	4601      	mov	r1, r0
 80a162e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80a1630:	f008 fc62 	bl	80a9ef8 <__aeabi_fdiv>
            for (char x = 0; x < NUM_BINS; x++) {
 80a1634:	2400      	movs	r4, #0
            float level = 0;
 80a1636:	2600      	movs	r6, #0
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a1638:	aa0a      	add	r2, sp, #40	; 0x28
 80a163a:	9006      	str	r0, [sp, #24]
 80a163c:	ab11      	add	r3, sp, #68	; 0x44
 80a163e:	9205      	str	r2, [sp, #20]
                level += intensities[x] * distance;
 80a1640:	f853 2b04 	ldr.w	r2, [r3], #4
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a1644:	4659      	mov	r1, fp
                level += intensities[x] * distance;
 80a1646:	e9cd 2308 	strd	r2, r3, [sp, #32]
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a164a:	9b05      	ldr	r3, [sp, #20]
            for (char x = 0; x < NUM_BINS; x++) {
 80a164c:	3401      	adds	r4, #1
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a164e:	f853 0b04 	ldr.w	r0, [r3], #4
            for (char x = 0; x < NUM_BINS; x++) {
 80a1652:	b2e4      	uxtb	r4, r4
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a1654:	9305      	str	r3, [sp, #20]
 80a1656:	f008 fa91 	bl	80a9b7c <__aeabi_fsub>
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80a165a:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 80a165e:	9822      	ldr	r0, [sp, #136]	; 0x88
 80a1660:	f008 fc4a 	bl	80a9ef8 <__aeabi_fdiv>
 80a1664:	9906      	ldr	r1, [sp, #24]
 80a1666:	f008 fa8b 	bl	80a9b80 <__addsf3>
                level += intensities[x] * distance;
 80a166a:	9a08      	ldr	r2, [sp, #32]
 80a166c:	4611      	mov	r1, r2
 80a166e:	f008 fb8f 	bl	80a9d90 <__aeabi_fmul>
 80a1672:	4601      	mov	r1, r0
 80a1674:	4630      	mov	r0, r6
 80a1676:	f008 fa83 	bl	80a9b80 <__addsf3>
            for (char x = 0; x < NUM_BINS; x++) {
 80a167a:	2c07      	cmp	r4, #7
                level += intensities[x] * distance;
 80a167c:	4606      	mov	r6, r0
            for (char x = 0; x < NUM_BINS; x++) {
 80a167e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a1680:	d1de      	bne.n	80a1640 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0xcc>
            }

            //level *= 2*PI;
            //mix_pixel(i, j, in_factor, cos(level)*255*level, cos(level - 2*PI/3)*255*level, cos(level - 4*PI/3)*255*level);
            mix_pixel(i, j, in_factor, level*255, level*255, level*255);
 80a1682:	490d      	ldr	r1, [pc, #52]	; (80a16b8 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x144>)
 80a1684:	f008 fb84 	bl	80a9d90 <__aeabi_fmul>
 80a1688:	f008 fd84 	bl	80aa194 <__aeabi_f2uiz>
 80a168c:	b2c0      	uxtb	r0, r0
 80a168e:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80a1692:	9000      	str	r0, [sp, #0]
 80a1694:	4652      	mov	r2, sl
 80a1696:	4649      	mov	r1, r9
 80a1698:	4628      	mov	r0, r5
 80a169a:	9b07      	ldr	r3, [sp, #28]
 80a169c:	f7fe fe36 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = 0; j < disp_height; j++) {
 80a16a0:	f108 0801 	add.w	r8, r8, #1
 80a16a4:	e7af      	b.n	80a1606 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x92>
    for (char i = 0; i < disp_width; i++) {
 80a16a6:	3701      	adds	r7, #1
 80a16a8:	e7a4      	b.n	80a15f4 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x80>
        }
    }
}
 80a16aa:	b019      	add	sp, #100	; 0x64
 80a16ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a16b0:	2000007e 	.word	0x2000007e
 80a16b4:	2000007c 	.word	0x2000007c
 80a16b8:	437f0000 	.word	0x437f0000
 80a16bc:	457ff000 	.word	0x457ff000

080a16c0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff>:

void Bar_Matrix::visualizer_rainbow(audio_bins* bins, float in_factor, float out_factor) {
 80a16c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a16c4:	b08d      	sub	sp, #52	; 0x34
 80a16c6:	9005      	str	r0, [sp, #20]
    decay(out_factor);
 80a16c8:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_rainbow(audio_bins* bins, float in_factor, float out_factor) {
 80a16ca:	920a      	str	r2, [sp, #40]	; 0x28
 80a16cc:	468a      	mov	sl, r1
    decay(out_factor);
 80a16ce:	f007 feb1 	bl	80a9434 <__aeabi_f2d>
 80a16d2:	4602      	mov	r2, r0
 80a16d4:	460b      	mov	r3, r1
 80a16d6:	9805      	ldr	r0, [sp, #20]
 80a16d8:	f7fe fcee 	bl	80a00b8 <_ZN10Bar_Matrix5decayEd>
 80a16dc:	f04f 0b00 	mov.w	fp, #0

    for (char i = 0; i < disp_width/2; i++) {
 80a16e0:	4bb4      	ldr	r3, [pc, #720]	; (80a19b4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
 80a16e2:	fa5f f78b 	uxtb.w	r7, fp
 80a16e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a16ea:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80a16ee:	ebb7 0f63 	cmp.w	r7, r3, asr #1
 80a16f2:	ea4f 0463 	mov.w	r4, r3, asr #1
 80a16f6:	da6d      	bge.n	80a17d4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x114>
        int led_index = 0;
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a16f8:	2400      	movs	r4, #0
            // get bin
            int level = bins->left[j/10];
 80a16fa:	260a      	movs	r6, #10
        int led_index = 0;
 80a16fc:	46a0      	mov	r8, r4
            int level = bins->left[j/10];
 80a16fe:	fbb4 f3f6 	udiv	r3, r4, r6
            level *= FREQ_GAIN;
 80a1702:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 80a1706:	f008 faef 	bl	80a9ce8 <__aeabi_i2f>
 80a170a:	f008 fd1d 	bl	80aa148 <__aeabi_f2iz>
            // set bar
            if (i < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
 80a170e:	f008 faeb 	bl	80a9ce8 <__aeabi_i2f>
 80a1712:	49a9      	ldr	r1, [pc, #676]	; (80a19b8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f8>)
 80a1714:	f008 fbf0 	bl	80a9ef8 <__aeabi_fdiv>
 80a1718:	2102      	movs	r1, #2
 80a171a:	f7ff f92b 	bl	80a0974 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a171e:	4602      	mov	r2, r0
 80a1720:	460b      	mov	r3, r1
 80a1722:	4638      	mov	r0, r7
 80a1724:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a1728:	f007 fe72 	bl	80a9410 <__aeabi_i2d>
 80a172c:	4ba1      	ldr	r3, [pc, #644]	; (80a19b4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
 80a172e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a1732:	f9b3 0000 	ldrsh.w	r0, [r3]
 80a1736:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80a173a:	1040      	asrs	r0, r0, #1
 80a173c:	f007 fe68 	bl	80a9410 <__aeabi_i2d>
 80a1740:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a1744:	f007 fece 	bl	80a94e4 <__aeabi_dmul>
 80a1748:	4602      	mov	r2, r0
 80a174a:	460b      	mov	r3, r1
 80a174c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a1750:	f008 f93a 	bl	80a99c8 <__aeabi_dcmplt>
 80a1754:	2800      	cmp	r0, #0
 80a1756:	d030      	beq.n	80a17ba <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0xfa>
 80a1758:	fa1f f588 	uxth.w	r5, r8
 80a175c:	f105 0350 	add.w	r3, r5, #80	; 0x50
 80a1760:	b29b      	uxth	r3, r3
 80a1762:	9306      	str	r3, [sp, #24]
                float val = level*PI/BINS_MAX;
                for (int x = 0; x < 10; x++) {
                    //mix_pixel((disp_width/2)-i-1, x*NUM_BARS+led_index, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                    mix_pixel((disp_width/2)-i-1, x*NUM_BARS+led_index, in_factor, bd->r(), bd->g(), bd->b());
 80a1764:	43f9      	mvns	r1, r7
 80a1766:	4b93      	ldr	r3, [pc, #588]	; (80a19b4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
 80a1768:	f9b3 9000 	ldrsh.w	r9, [r3]
 80a176c:	4b93      	ldr	r3, [pc, #588]	; (80a19bc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
 80a176e:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
 80a1772:	6818      	ldr	r0, [r3, #0]
 80a1774:	eb01 0969 	add.w	r9, r1, r9, asr #1
 80a1778:	f000 fcb3 	bl	80a20e2 <_ZN14Beat_Detection1rEv>
 80a177c:	4b8f      	ldr	r3, [pc, #572]	; (80a19bc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
 80a177e:	900b      	str	r0, [sp, #44]	; 0x2c
 80a1780:	6818      	ldr	r0, [r3, #0]
 80a1782:	f000 fcb0 	bl	80a20e6 <_ZN14Beat_Detection1gEv>
 80a1786:	4b8d      	ldr	r3, [pc, #564]	; (80a19bc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
 80a1788:	9008      	str	r0, [sp, #32]
 80a178a:	6818      	ldr	r0, [r3, #0]
 80a178c:	f000 fcad 	bl	80a20ea <_ZN14Beat_Detection1bEv>
 80a1790:	9a08      	ldr	r2, [sp, #32]
 80a1792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a1794:	b2c0      	uxtb	r0, r0
 80a1796:	9002      	str	r0, [sp, #8]
 80a1798:	b2d0      	uxtb	r0, r2
 80a179a:	9001      	str	r0, [sp, #4]
 80a179c:	fa5f f989 	uxtb.w	r9, r9
 80a17a0:	b2d8      	uxtb	r0, r3
 80a17a2:	462a      	mov	r2, r5
 80a17a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a17a6:	9000      	str	r0, [sp, #0]
 80a17a8:	4649      	mov	r1, r9
 80a17aa:	9805      	ldr	r0, [sp, #20]
 80a17ac:	f7fe fdae 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
                for (int x = 0; x < 10; x++) {
 80a17b0:	3508      	adds	r5, #8
 80a17b2:	9b06      	ldr	r3, [sp, #24]
 80a17b4:	b2ad      	uxth	r5, r5
 80a17b6:	42ab      	cmp	r3, r5
 80a17b8:	d1d4      	bne.n	80a1764 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0xa4>
                }
            }

            led_index++;
 80a17ba:	f108 0301 	add.w	r3, r8, #1
            led_index = led_index%10;
 80a17be:	fbb3 f2f6 	udiv	r2, r3, r6
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a17c2:	340a      	adds	r4, #10
 80a17c4:	b2e4      	uxtb	r4, r4
 80a17c6:	2c3c      	cmp	r4, #60	; 0x3c
            led_index = led_index%10;
 80a17c8:	fb06 3812 	mls	r8, r6, r2, r3
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a17cc:	d197      	bne.n	80a16fe <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3e>
    for (char i = 0; i < disp_width/2; i++) {
 80a17ce:	f10b 0b01 	add.w	fp, fp, #1
 80a17d2:	e785      	b.n	80a16e0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x20>
            // set bar
            if (i-disp_width/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
                float val = level*PI/BINS_MAX;
                for (int x = 0; x < 10; x++) {
                    //mix_pixel(i, x*NUM_BARS+led_index, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                    mix_pixel(i, x*NUM_BARS+led_index, in_factor, bd->r(), bd->g(), bd->b());
 80a17d4:	4f79      	ldr	r7, [pc, #484]	; (80a19bc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
    for (char i = disp_width/2; i < disp_width; i++) {
 80a17d6:	b2e4      	uxtb	r4, r4
 80a17d8:	4b76      	ldr	r3, [pc, #472]	; (80a19b4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
 80a17da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a17de:	429c      	cmp	r4, r3
 80a17e0:	da69      	bge.n	80a18b6 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x1f6>
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a17e2:	2500      	movs	r5, #0
            int level = bins->right[j/10];
 80a17e4:	f04f 080a 	mov.w	r8, #10
        int led_index = 0;
 80a17e8:	462e      	mov	r6, r5
            int level = bins->right[j/10];
 80a17ea:	fbb5 f3f8 	udiv	r3, r5, r8
 80a17ee:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
            level *= FREQ_GAIN;
 80a17f2:	69d8      	ldr	r0, [r3, #28]
 80a17f4:	f008 fa78 	bl	80a9ce8 <__aeabi_i2f>
            if (i-disp_width/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
 80a17f8:	4b6e      	ldr	r3, [pc, #440]	; (80a19b4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
            level *= FREQ_GAIN;
 80a17fa:	4681      	mov	r9, r0
            if (i-disp_width/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
 80a17fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a1800:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80a1804:	eba4 0063 	sub.w	r0, r4, r3, asr #1
 80a1808:	f007 fe02 	bl	80a9410 <__aeabi_i2d>
 80a180c:	e9cd 0106 	strd	r0, r1, [sp, #24]
            level *= FREQ_GAIN;
 80a1810:	4648      	mov	r0, r9
 80a1812:	f008 fc99 	bl	80aa148 <__aeabi_f2iz>
            if (i-disp_width/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
 80a1816:	f008 fa67 	bl	80a9ce8 <__aeabi_i2f>
 80a181a:	4967      	ldr	r1, [pc, #412]	; (80a19b8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f8>)
 80a181c:	f008 fb6c 	bl	80a9ef8 <__aeabi_fdiv>
 80a1820:	2102      	movs	r1, #2
 80a1822:	f7ff f8a7 	bl	80a0974 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a1826:	4602      	mov	r2, r0
 80a1828:	460b      	mov	r3, r1
 80a182a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a182e:	4b61      	ldr	r3, [pc, #388]	; (80a19b4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
 80a1830:	f9b3 0000 	ldrsh.w	r0, [r3]
 80a1834:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80a1838:	1040      	asrs	r0, r0, #1
 80a183a:	f007 fde9 	bl	80a9410 <__aeabi_i2d>
 80a183e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a1842:	f007 fe4f 	bl	80a94e4 <__aeabi_dmul>
 80a1846:	4602      	mov	r2, r0
 80a1848:	460b      	mov	r3, r1
 80a184a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a184e:	f008 f8bb 	bl	80a99c8 <__aeabi_dcmplt>
 80a1852:	b320      	cbz	r0, 80a189e <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x1de>
 80a1854:	fa1f fb86 	uxth.w	fp, r6
 80a1858:	f10b 0950 	add.w	r9, fp, #80	; 0x50
 80a185c:	fa1f f989 	uxth.w	r9, r9
                    mix_pixel(i, x*NUM_BARS+led_index, in_factor, bd->r(), bd->g(), bd->b());
 80a1860:	6838      	ldr	r0, [r7, #0]
 80a1862:	f000 fc3e 	bl	80a20e2 <_ZN14Beat_Detection1rEv>
 80a1866:	9008      	str	r0, [sp, #32]
 80a1868:	6838      	ldr	r0, [r7, #0]
 80a186a:	f000 fc3c 	bl	80a20e6 <_ZN14Beat_Detection1gEv>
 80a186e:	9006      	str	r0, [sp, #24]
 80a1870:	6838      	ldr	r0, [r7, #0]
 80a1872:	f000 fc3a 	bl	80a20ea <_ZN14Beat_Detection1bEv>
 80a1876:	9a06      	ldr	r2, [sp, #24]
 80a1878:	9b08      	ldr	r3, [sp, #32]
 80a187a:	b2d2      	uxtb	r2, r2
 80a187c:	b2c0      	uxtb	r0, r0
 80a187e:	9201      	str	r2, [sp, #4]
 80a1880:	b2db      	uxtb	r3, r3
 80a1882:	465a      	mov	r2, fp
 80a1884:	f10b 0b08 	add.w	fp, fp, #8
 80a1888:	9002      	str	r0, [sp, #8]
 80a188a:	9300      	str	r3, [sp, #0]
 80a188c:	4621      	mov	r1, r4
 80a188e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1890:	9805      	ldr	r0, [sp, #20]
 80a1892:	fa1f fb8b 	uxth.w	fp, fp
 80a1896:	f7fe fd39 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
                for (int x = 0; x < 10; x++) {
 80a189a:	45d9      	cmp	r9, fp
 80a189c:	d1e0      	bne.n	80a1860 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x1a0>
                }
            }

            led_index++;
 80a189e:	3601      	adds	r6, #1
            led_index = led_index%10;
 80a18a0:	fbb6 f3f8 	udiv	r3, r6, r8
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a18a4:	350a      	adds	r5, #10
 80a18a6:	b2ed      	uxtb	r5, r5
 80a18a8:	2d3c      	cmp	r5, #60	; 0x3c
            led_index = led_index%10;
 80a18aa:	fb08 6613 	mls	r6, r8, r3, r6
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a18ae:	d19c      	bne.n	80a17ea <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x12a>
    for (char i = disp_width/2; i < disp_width; i++) {
 80a18b0:	3401      	adds	r4, #1
 80a18b2:	b2e4      	uxtb	r4, r4
 80a18b4:	e790      	b.n	80a17d8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x118>
 80a18b6:	2300      	movs	r3, #0
                break;
            }
            level *= FREQ_GAIN;

            // set bar
            if (j < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
 80a18b8:	4d3f      	ldr	r5, [pc, #252]	; (80a19b8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f8>)
 80a18ba:	930a      	str	r3, [sp, #40]	; 0x28
    for (char i = 0; i < disp_width; i++) {
 80a18bc:	4b3d      	ldr	r3, [pc, #244]	; (80a19b4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
 80a18be:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 80a18c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a18c6:	429c      	cmp	r4, r3
 80a18c8:	f280 80dc 	bge.w	80a1a84 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3c4>
 80a18cc:	f04f 0b00 	mov.w	fp, #0
            switch(i) {
 80a18d0:	2c07      	cmp	r4, #7
 80a18d2:	d86d      	bhi.n	80a19b0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f0>
 80a18d4:	e8df f004 	tbb	[pc, r4]
 80a18d8:	605d5a04 	.word	0x605d5a04
 80a18dc:	69606663 	.word	0x69606663
                level = bins->left[LEFT_63]; //1kHz
 80a18e0:	f8da 0000 	ldr.w	r0, [sl]
            level *= FREQ_GAIN;
 80a18e4:	f008 fa00 	bl	80a9ce8 <__aeabi_i2f>
 80a18e8:	f008 fc2e 	bl	80aa148 <__aeabi_f2iz>
            if (j < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
 80a18ec:	f008 f9fc 	bl	80a9ce8 <__aeabi_i2f>
 80a18f0:	4629      	mov	r1, r5
 80a18f2:	f008 fb01 	bl	80a9ef8 <__aeabi_fdiv>
 80a18f6:	2102      	movs	r1, #2
 80a18f8:	f7ff f83c 	bl	80a0974 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a18fc:	4680      	mov	r8, r0
 80a18fe:	4658      	mov	r0, fp
 80a1900:	4689      	mov	r9, r1
 80a1902:	f007 fd85 	bl	80a9410 <__aeabi_i2d>
 80a1906:	2200      	movs	r2, #0
 80a1908:	4606      	mov	r6, r0
 80a190a:	460f      	mov	r7, r1
 80a190c:	4b2c      	ldr	r3, [pc, #176]	; (80a19c0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x300>)
 80a190e:	4640      	mov	r0, r8
 80a1910:	4649      	mov	r1, r9
 80a1912:	f007 fde7 	bl	80a94e4 <__aeabi_dmul>
 80a1916:	4602      	mov	r2, r0
 80a1918:	460b      	mov	r3, r1
 80a191a:	4630      	mov	r0, r6
 80a191c:	4639      	mov	r1, r7
 80a191e:	f008 f853 	bl	80a99c8 <__aeabi_dcmplt>
 80a1922:	b300      	cbz	r0, 80a1966 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2a6>
                float val = level*2*PI/BINS_MAX;
                mix_pixel(i, STRIP_LENGTH/2 - j, .95, 255-bd->r(), 255-bd->g(), 255-bd->b());
 80a1924:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80a19bc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>
 80a1928:	f8d8 0000 	ldr.w	r0, [r8]
 80a192c:	f000 fbd9 	bl	80a20e2 <_ZN14Beat_Detection1rEv>
 80a1930:	4606      	mov	r6, r0
 80a1932:	f8d8 0000 	ldr.w	r0, [r8]
 80a1936:	f000 fbd6 	bl	80a20e6 <_ZN14Beat_Detection1gEv>
 80a193a:	4607      	mov	r7, r0
 80a193c:	f8d8 0000 	ldr.w	r0, [r8]
 80a1940:	f000 fbd3 	bl	80a20ea <_ZN14Beat_Detection1bEv>
 80a1944:	43ff      	mvns	r7, r7
 80a1946:	43c0      	mvns	r0, r0
 80a1948:	43f6      	mvns	r6, r6
 80a194a:	b2c0      	uxtb	r0, r0
 80a194c:	f1cb 021d 	rsb	r2, fp, #29
 80a1950:	b2ff      	uxtb	r7, r7
 80a1952:	b2f6      	uxtb	r6, r6
 80a1954:	9002      	str	r0, [sp, #8]
 80a1956:	4621      	mov	r1, r4
 80a1958:	4b1a      	ldr	r3, [pc, #104]	; (80a19c4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x304>)
 80a195a:	9805      	ldr	r0, [sp, #20]
 80a195c:	9701      	str	r7, [sp, #4]
 80a195e:	9600      	str	r6, [sp, #0]
 80a1960:	b292      	uxth	r2, r2
 80a1962:	f7fe fcd3 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = 0; j < STRIP_LENGTH/4; j++) {
 80a1966:	f10b 0b01 	add.w	fp, fp, #1
 80a196a:	f1bb 0f0e 	cmp.w	fp, #14
 80a196e:	d1af      	bne.n	80a18d0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x210>
 80a1970:	f04f 0b1d 	mov.w	fp, #29
            }
        }

        // Left bins, grow upwards
        for (char j = STRIP_LENGTH/2; j < STRIP_LENGTH*0.75f; j++) {
 80a1974:	f1bb 0f2c 	cmp.w	fp, #44	; 0x2c
 80a1978:	f000 8080 	beq.w	80a1a7c <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3bc>
            // get bin
            int level = 0;
            switch(i) {
 80a197c:	2c07      	cmp	r4, #7
 80a197e:	d87b      	bhi.n	80a1a78 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3b8>
 80a1980:	e8df f004 	tbb	[pc, r4]
 80a1984:	6e6b6822 	.word	0x6e6b6822
 80a1988:	776e7471 	.word	0x776e7471
                level = bins->left[LEFT_160]; //6.25kHz
 80a198c:	f8da 0004 	ldr.w	r0, [sl, #4]
                break;
 80a1990:	e7a8      	b.n	80a18e4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
                level = bins->left[LEFT_400]; //63Hz
 80a1992:	f8da 0008 	ldr.w	r0, [sl, #8]
                break;
 80a1996:	e7a5      	b.n	80a18e4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
                level = bins->left[LEFT_1000]; //400Hz
 80a1998:	f8da 000c 	ldr.w	r0, [sl, #12]
                break;
 80a199c:	e7a2      	b.n	80a18e4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
                level = bins->left[LEFT_2500]; //400Hz
 80a199e:	f8da 0010 	ldr.w	r0, [sl, #16]
                break;
 80a19a2:	e79f      	b.n	80a18e4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
                level = bins->left[LEFT_6250]; //63Hz
 80a19a4:	f8da 0014 	ldr.w	r0, [sl, #20]
                break;
 80a19a8:	e79c      	b.n	80a18e4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
                level = bins->left[LEFT_16000]; //1kHz
 80a19aa:	f8da 0018 	ldr.w	r0, [sl, #24]
                break;
 80a19ae:	e799      	b.n	80a18e4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
 80a19b0:	2000      	movs	r0, #0
 80a19b2:	e797      	b.n	80a18e4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
 80a19b4:	2000007e 	.word	0x2000007e
 80a19b8:	457ff000 	.word	0x457ff000
 80a19bc:	20000074 	.word	0x20000074
 80a19c0:	403d0000 	.word	0x403d0000
 80a19c4:	3f733333 	.word	0x3f733333
                case 0:
                level = bins->right[LEFT_63]; //1kHz
 80a19c8:	f8da 001c 	ldr.w	r0, [sl, #28]
                break;
                case 7:
                level = bins->right[LEFT_16000]; //1kHz
                break;
            }
            level *= FREQ_GAIN;
 80a19cc:	f008 f98c 	bl	80a9ce8 <__aeabi_i2f>
 80a19d0:	f008 fbba 	bl	80aa148 <__aeabi_f2iz>
            // set bar
            float p = (float)(level)/(float)(BINS_MAX);
 80a19d4:	f008 f988 	bl	80a9ce8 <__aeabi_i2f>
 80a19d8:	4629      	mov	r1, r5
 80a19da:	f008 fa8d 	bl	80a9ef8 <__aeabi_fdiv>
            if (j-STRIP_LENGTH/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
 80a19de:	2102      	movs	r1, #2
 80a19e0:	f7fe ffc8 	bl	80a0974 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a19e4:	4606      	mov	r6, r0
 80a19e6:	f1ab 001d 	sub.w	r0, fp, #29
 80a19ea:	460f      	mov	r7, r1
 80a19ec:	f007 fd10 	bl	80a9410 <__aeabi_i2d>
 80a19f0:	2200      	movs	r2, #0
 80a19f2:	4680      	mov	r8, r0
 80a19f4:	4689      	mov	r9, r1
 80a19f6:	4b25      	ldr	r3, [pc, #148]	; (80a1a8c <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3cc>)
 80a19f8:	4630      	mov	r0, r6
 80a19fa:	4639      	mov	r1, r7
 80a19fc:	f007 fd72 	bl	80a94e4 <__aeabi_dmul>
 80a1a00:	4602      	mov	r2, r0
 80a1a02:	460b      	mov	r3, r1
 80a1a04:	4640      	mov	r0, r8
 80a1a06:	4649      	mov	r1, r9
 80a1a08:	f007 ffde 	bl	80a99c8 <__aeabi_dcmplt>
 80a1a0c:	b1f8      	cbz	r0, 80a1a4e <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x38e>
                //j-STRIP_LENGTH/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
                float val = level*2*PI/BINS_MAX;
                //mix_pixel(i, j, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                mix_pixel(i, j, .95, 255-bd->r(), 255-bd->g(), 255-bd->b());//reds[i], greens[i], blues[i]);
 80a1a0e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80a1a94 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3d4>
 80a1a12:	f8d8 0000 	ldr.w	r0, [r8]
 80a1a16:	f000 fb64 	bl	80a20e2 <_ZN14Beat_Detection1rEv>
 80a1a1a:	4606      	mov	r6, r0
 80a1a1c:	f8d8 0000 	ldr.w	r0, [r8]
 80a1a20:	f000 fb61 	bl	80a20e6 <_ZN14Beat_Detection1gEv>
 80a1a24:	4607      	mov	r7, r0
 80a1a26:	f8d8 0000 	ldr.w	r0, [r8]
 80a1a2a:	f000 fb5e 	bl	80a20ea <_ZN14Beat_Detection1bEv>
 80a1a2e:	43ff      	mvns	r7, r7
 80a1a30:	43c0      	mvns	r0, r0
 80a1a32:	43f6      	mvns	r6, r6
 80a1a34:	b2c0      	uxtb	r0, r0
 80a1a36:	b2ff      	uxtb	r7, r7
 80a1a38:	b2f6      	uxtb	r6, r6
 80a1a3a:	9002      	str	r0, [sp, #8]
 80a1a3c:	4621      	mov	r1, r4
 80a1a3e:	4b14      	ldr	r3, [pc, #80]	; (80a1a90 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3d0>)
 80a1a40:	9805      	ldr	r0, [sp, #20]
 80a1a42:	9701      	str	r7, [sp, #4]
 80a1a44:	9600      	str	r6, [sp, #0]
 80a1a46:	fa1f f28b 	uxth.w	r2, fp
 80a1a4a:	f7fe fc5f 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = STRIP_LENGTH/2; j < STRIP_LENGTH*0.75f; j++) {
 80a1a4e:	f10b 0b01 	add.w	fp, fp, #1
 80a1a52:	e78f      	b.n	80a1974 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2b4>
                level = bins->right[LEFT_160]; //6.25kHz
 80a1a54:	f8da 0020 	ldr.w	r0, [sl, #32]
                break;
 80a1a58:	e7b8      	b.n	80a19cc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
                level = bins->right[LEFT_400]; //63Hz
 80a1a5a:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
                break;
 80a1a5e:	e7b5      	b.n	80a19cc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
                level = bins->right[LEFT_1000]; //400Hz
 80a1a60:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
                break;
 80a1a64:	e7b2      	b.n	80a19cc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
                level = bins->right[LEFT_2500]; //400Hz
 80a1a66:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
                break;
 80a1a6a:	e7af      	b.n	80a19cc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
                level = bins->right[LEFT_6250]; //63Hz
 80a1a6c:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
                break;
 80a1a70:	e7ac      	b.n	80a19cc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
                level = bins->right[LEFT_16000]; //1kHz
 80a1a72:	f8da 0034 	ldr.w	r0, [sl, #52]	; 0x34
                break;
 80a1a76:	e7a9      	b.n	80a19cc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
        for (char j = STRIP_LENGTH/2; j < STRIP_LENGTH*0.75f; j++) {
 80a1a78:	2000      	movs	r0, #0
 80a1a7a:	e7a7      	b.n	80a19cc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
    for (char i = 0; i < disp_width; i++) {
 80a1a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1a7e:	3301      	adds	r3, #1
 80a1a80:	930a      	str	r3, [sp, #40]	; 0x28
 80a1a82:	e71b      	b.n	80a18bc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x1fc>
            }
        }
    }
}
 80a1a84:	b00d      	add	sp, #52	; 0x34
 80a1a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1a8a:	bf00      	nop
 80a1a8c:	403d0000 	.word	0x403d0000
 80a1a90:	3f733333 	.word	0x3f733333
 80a1a94:	20000074 	.word	0x20000074

080a1a98 <_ZN10Bar_Matrix11snake_linesEf>:
    unsigned char r, g, b;

    // TODO: add code to convert from HSV to RGB and vice versa in
    //       constructor.
    Color_Value(unsigned char red, unsigned char green, unsigned char blue) :
    c((red << 16) | (green << 8) | blue), r(red), g(green), b(blue) {}
 80a1a98:	2300      	movs	r3, #0
/* ================================================================== *
 * Function: snake_lines
 * Description: Snake runs up and down each bar
 * Parameters: [float] speed - speed snake moves at
 * ================================================================== */
void Bar_Matrix::snake_lines(float speed) {
 80a1a9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1a9e:	4605      	mov	r5, r0
 80a1aa0:	b086      	sub	sp, #24
 80a1aa2:	9304      	str	r3, [sp, #16]
 80a1aa4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80a1aa8:	f88d 3016 	strb.w	r3, [sp, #22]
    bool noChange = true;

    fill_matrix(Color_Value(0, 0, 0));
 80a1aac:	ab06      	add	r3, sp, #24
 80a1aae:	e913 0006 	ldmdb	r3, {r1, r2}
 80a1ab2:	f7fe fbe7 	bl	80a0284 <_ZN10Bar_Matrix11fill_matrixE11Color_Value>

    for (int x = 0; x < NUM_SNAKES; x++) {
 80a1ab6:	462c      	mov	r4, r5
    bool noChange = true;
 80a1ab8:	2601      	movs	r6, #1
        Snake *s = &snakes[x];

        for (int i = 0; i < s->len; i++) {
            int b = (s->pos + i) / STRIP_LENGTH; // bar
 80a1aba:	273a      	movs	r7, #58	; 0x3a

            if (b % 2 == 1) {
                p = 69-p;
            }

            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1abc:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80a1bd4 <_ZN10Bar_Matrix11snake_linesEf+0x13c>
 80a1ac0:	f105 0880 	add.w	r8, r5, #128	; 0x80
        for (int i = 0; i < s->len; i++) {
 80a1ac4:	f04f 0a00 	mov.w	sl, #0
 80a1ac8:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 80a1acc:	4553      	cmp	r3, sl
 80a1ace:	dd21      	ble.n	80a1b14 <_ZN10Bar_Matrix11snake_linesEf+0x7c>
            int b = (s->pos + i) / STRIP_LENGTH; // bar
 80a1ad0:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1ad4:	4628      	mov	r0, r5
            int b = (s->pos + i) / STRIP_LENGTH; // bar
 80a1ad6:	4452      	add	r2, sl
 80a1ad8:	fb92 f1f7 	sdiv	r1, r2, r7
            if (b % 2 == 1) {
 80a1adc:	f001 0301 	and.w	r3, r1, #1
 80a1ae0:	2900      	cmp	r1, #0
 80a1ae2:	bfb8      	it	lt
 80a1ae4:	425b      	neglt	r3, r3
 80a1ae6:	2b01      	cmp	r3, #1
            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1ae8:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
            int p = (s->pos + i) % STRIP_LENGTH; // pixel
 80a1aec:	fb07 2211 	mls	r2, r7, r1, r2
            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1af0:	9302      	str	r3, [sp, #8]
 80a1af2:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
                p = 69-p;
 80a1af6:	bf08      	it	eq
 80a1af8:	f1c2 0245 	rsbeq	r2, r2, #69	; 0x45
            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1afc:	9301      	str	r3, [sp, #4]
 80a1afe:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 80a1b02:	b292      	uxth	r2, r2
 80a1b04:	9300      	str	r3, [sp, #0]
 80a1b06:	b2c9      	uxtb	r1, r1
 80a1b08:	464b      	mov	r3, r9
 80a1b0a:	f7fe fbff 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (int i = 0; i < s->len; i++) {
 80a1b0e:	f10a 0a01 	add.w	sl, sl, #1
 80a1b12:	e7d9      	b.n	80a1ac8 <_ZN10Bar_Matrix11snake_linesEf+0x30>
        }

        if (noChange && random(0, 10) > 7) {
 80a1b14:	b1b6      	cbz	r6, 80a1b44 <_ZN10Bar_Matrix11snake_linesEf+0xac>
 80a1b16:	210a      	movs	r1, #10
 80a1b18:	2000      	movs	r0, #0
 80a1b1a:	f002 fe68 	bl	80a47ee <_Z6randomii>
 80a1b1e:	2807      	cmp	r0, #7
 80a1b20:	dd10      	ble.n	80a1b44 <_ZN10Bar_Matrix11snake_linesEf+0xac>
            s->r = bd->r();
 80a1b22:	4e2a      	ldr	r6, [pc, #168]	; (80a1bcc <_ZN10Bar_Matrix11snake_linesEf+0x134>)
 80a1b24:	6830      	ldr	r0, [r6, #0]
 80a1b26:	f000 fadc 	bl	80a20e2 <_ZN14Beat_Detection1rEv>
 80a1b2a:	f8c4 00f4 	str.w	r0, [r4, #244]	; 0xf4
            s->g = bd->g();
 80a1b2e:	6830      	ldr	r0, [r6, #0]
 80a1b30:	f000 fad9 	bl	80a20e6 <_ZN14Beat_Detection1gEv>
 80a1b34:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
            s->b = bd->b();
 80a1b38:	6830      	ldr	r0, [r6, #0]
 80a1b3a:	f000 fad6 	bl	80a20ea <_ZN14Beat_Detection1bEv>
            noChange = false;
 80a1b3e:	2600      	movs	r6, #0
            s->b = bd->b();
 80a1b40:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
        }

        s->posTicks++;
 80a1b44:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
        if (s->posTicks >= s->ticksNeeded) {
 80a1b48:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
        s->posTicks++;
 80a1b4c:	3301      	adds	r3, #1
        if (s->posTicks >= s->ticksNeeded) {
 80a1b4e:	4293      	cmp	r3, r2
        s->posTicks++;
 80a1b50:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        if (s->posTicks >= s->ticksNeeded) {
 80a1b54:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 80a1b58:	db07      	blt.n	80a1b6a <_ZN10Bar_Matrix11snake_linesEf+0xd2>
            s->posTicks = 0;
 80a1b5a:	2300      	movs	r3, #0
 80a1b5c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
            s->pos += s->dir;
 80a1b60:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80a1b64:	4413      	add	r3, r2
 80a1b66:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
        }
        if ((s->dir > 0 && s->pos > NUM_BARS * STRIP_LENGTH +s->len) ||
 80a1b6a:	2a00      	cmp	r2, #0
 80a1b6c:	dd0d      	ble.n	80a1b8a <_ZN10Bar_Matrix11snake_linesEf+0xf2>
 80a1b6e:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 80a1b72:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
 80a1b76:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80a1b7a:	429a      	cmp	r2, r3
 80a1b7c:	dc0d      	bgt.n	80a1b9a <_ZN10Bar_Matrix11snake_linesEf+0x102>
    for (int x = 0; x < NUM_SNAKES; x++) {
 80a1b7e:	3420      	adds	r4, #32
 80a1b80:	45a0      	cmp	r8, r4
 80a1b82:	d19f      	bne.n	80a1ac4 <_ZN10Bar_Matrix11snake_linesEf+0x2c>
            color_table_idx = color_table_idx % 50;

            s->pos = s->dir > 0 ? -s->len : NUM_BARS * STRIP_LENGTH;
        }
    }
}
 80a1b84:	b006      	add	sp, #24
 80a1b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((s->dir > 0 && s->pos > NUM_BARS * STRIP_LENGTH +s->len) ||
 80a1b8a:	d0f8      	beq.n	80a1b7e <_ZN10Bar_Matrix11snake_linesEf+0xe6>
            (s->dir < 0 && s->pos < -s->len))
 80a1b8c:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 80a1b90:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
 80a1b94:	425b      	negs	r3, r3
 80a1b96:	429a      	cmp	r2, r3
 80a1b98:	daf1      	bge.n	80a1b7e <_ZN10Bar_Matrix11snake_linesEf+0xe6>
            color_table_idx += random(0, 10);
 80a1b9a:	210a      	movs	r1, #10
 80a1b9c:	2000      	movs	r0, #0
 80a1b9e:	f002 fe26 	bl	80a47ee <_Z6randomii>
            color_table_idx = color_table_idx % 50;
 80a1ba2:	2132      	movs	r1, #50	; 0x32
 80a1ba4:	4a0a      	ldr	r2, [pc, #40]	; (80a1bd0 <_ZN10Bar_Matrix11snake_linesEf+0x138>)
            color_table_idx += random(0, 10);
 80a1ba6:	6813      	ldr	r3, [r2, #0]
 80a1ba8:	4418      	add	r0, r3
            color_table_idx = color_table_idx % 50;
 80a1baa:	fb90 f3f1 	sdiv	r3, r0, r1
 80a1bae:	fb01 0013 	mls	r0, r1, r3, r0
 80a1bb2:	6010      	str	r0, [r2, #0]
            s->pos = s->dir > 0 ? -s->len : NUM_BARS * STRIP_LENGTH;
 80a1bb4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80a1bb8:	2b00      	cmp	r3, #0
 80a1bba:	bfd2      	itee	le
 80a1bbc:	f44f 73e8 	movle.w	r3, #464	; 0x1d0
 80a1bc0:	f8d4 30e4 	ldrgt.w	r3, [r4, #228]	; 0xe4
 80a1bc4:	425b      	neggt	r3, r3
 80a1bc6:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 80a1bca:	e7d8      	b.n	80a1b7e <_ZN10Bar_Matrix11snake_linesEf+0xe6>
 80a1bcc:	20000074 	.word	0x20000074
 80a1bd0:	20000078 	.word	0x20000078
 80a1bd4:	3f733333 	.word	0x3f733333

080a1bd8 <_ZN10Bar_Matrix16visualizer_wheelEff>:
 * Description: Sets all bars to a color while rotating through all
 *              hues in order of the rainbow
 * Parameters: [float] intensity - intensity of lights
 *             [float] speed - speed wheel rotates at
 * ================================================================== */
void Bar_Matrix::visualizer_wheel(float intensity, float speed) {
 80a1bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1bdc:	460c      	mov	r4, r1
 80a1bde:	4683      	mov	fp, r0
 80a1be0:	f001 ff46 	bl	80a3a70 <HAL_Timer_Get_Milli_Seconds>
    float val = fmod(millis()/10000.0f,1.0f)*2.0f*PI;
 80a1be4:	f008 f87c 	bl	80a9ce0 <__aeabi_ui2f>
 80a1be8:	493d      	ldr	r1, [pc, #244]	; (80a1ce0 <_ZN10Bar_Matrix16visualizer_wheelEff+0x108>)
 80a1bea:	f008 f985 	bl	80a9ef8 <__aeabi_fdiv>
  { return __builtin_fmodf(__x, __y); }
 80a1bee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a1bf2:	f004 f935 	bl	80a5e60 <fmodf>
 80a1bf6:	4601      	mov	r1, r0
 80a1bf8:	f007 ffc2 	bl	80a9b80 <__addsf3>
 80a1bfc:	f007 fc1a 	bl	80a9434 <__aeabi_f2d>
 80a1c00:	a32f      	add	r3, pc, #188	; (adr r3, 80a1cc0 <_ZN10Bar_Matrix16visualizer_wheelEff+0xe8>)
 80a1c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c06:	f007 fc6d 	bl	80a94e4 <__aeabi_dmul>
 80a1c0a:	f007 ff63 	bl	80a9ad4 <__aeabi_d2f>
 80a1c0e:	4605      	mov	r5, r0
  { return __builtin_cosf(__x); }
 80a1c10:	f003 ff4c 	bl	80a5aac <cosf>
    fill_matrix(Color_Value(cos(val)*255*intensity, cos(val - 2*PI/3)*255*intensity, cos(val - 4*PI/3)*255*intensity));
 80a1c14:	4933      	ldr	r1, [pc, #204]	; (80a1ce4 <_ZN10Bar_Matrix16visualizer_wheelEff+0x10c>)
 80a1c16:	f008 f8bb 	bl	80a9d90 <__aeabi_fmul>
 80a1c1a:	4621      	mov	r1, r4
 80a1c1c:	f008 f8b8 	bl	80a9d90 <__aeabi_fmul>
 80a1c20:	f008 fab8 	bl	80aa194 <__aeabi_f2uiz>
 80a1c24:	fa5f fa80 	uxtb.w	sl, r0
 80a1c28:	4628      	mov	r0, r5
 80a1c2a:	f007 fc03 	bl	80a9434 <__aeabi_f2d>
 80a1c2e:	a326      	add	r3, pc, #152	; (adr r3, 80a1cc8 <_ZN10Bar_Matrix16visualizer_wheelEff+0xf0>)
 80a1c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c34:	4606      	mov	r6, r0
 80a1c36:	460f      	mov	r7, r1
 80a1c38:	f007 fa9c 	bl	80a9174 <__aeabi_dsub>
 80a1c3c:	f003 fee0 	bl	80a5a00 <cos>
 80a1c40:	4680      	mov	r8, r0
 80a1c42:	4620      	mov	r0, r4
 80a1c44:	4689      	mov	r9, r1
 80a1c46:	f007 fbf5 	bl	80a9434 <__aeabi_f2d>
 80a1c4a:	a321      	add	r3, pc, #132	; (adr r3, 80a1cd0 <_ZN10Bar_Matrix16visualizer_wheelEff+0xf8>)
 80a1c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c50:	4604      	mov	r4, r0
 80a1c52:	460d      	mov	r5, r1
 80a1c54:	4640      	mov	r0, r8
 80a1c56:	4649      	mov	r1, r9
 80a1c58:	f007 fc44 	bl	80a94e4 <__aeabi_dmul>
 80a1c5c:	4622      	mov	r2, r4
 80a1c5e:	462b      	mov	r3, r5
 80a1c60:	f007 fc40 	bl	80a94e4 <__aeabi_dmul>
 80a1c64:	f007 ff16 	bl	80a9a94 <__aeabi_d2uiz>
 80a1c68:	a31b      	add	r3, pc, #108	; (adr r3, 80a1cd8 <_ZN10Bar_Matrix16visualizer_wheelEff+0x100>)
 80a1c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c6e:	fa5f f880 	uxtb.w	r8, r0
 80a1c72:	4639      	mov	r1, r7
 80a1c74:	4630      	mov	r0, r6
 80a1c76:	f007 fa7d 	bl	80a9174 <__aeabi_dsub>
 80a1c7a:	f003 fec1 	bl	80a5a00 <cos>
 80a1c7e:	a314      	add	r3, pc, #80	; (adr r3, 80a1cd0 <_ZN10Bar_Matrix16visualizer_wheelEff+0xf8>)
 80a1c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c84:	f007 fc2e 	bl	80a94e4 <__aeabi_dmul>
 80a1c88:	4622      	mov	r2, r4
 80a1c8a:	462b      	mov	r3, r5
 80a1c8c:	f007 fc2a 	bl	80a94e4 <__aeabi_dmul>
 80a1c90:	f007 ff00 	bl	80a9a94 <__aeabi_d2uiz>
 80a1c94:	ea4f 2308 	mov.w	r3, r8, lsl #8
 80a1c98:	b2c0      	uxtb	r0, r0
 80a1c9a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80a1c9e:	4303      	orrs	r3, r0
 80a1ca0:	f88d 0006 	strb.w	r0, [sp, #6]
 80a1ca4:	4658      	mov	r0, fp
 80a1ca6:	9300      	str	r3, [sp, #0]
 80a1ca8:	f88d a004 	strb.w	sl, [sp, #4]
 80a1cac:	f88d 8005 	strb.w	r8, [sp, #5]
 80a1cb0:	ab02      	add	r3, sp, #8
 80a1cb2:	e913 0006 	ldmdb	r3, {r1, r2}
}
 80a1cb6:	b003      	add	sp, #12
 80a1cb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fill_matrix(Color_Value(cos(val)*255*intensity, cos(val - 2*PI/3)*255*intensity, cos(val - 4*PI/3)*255*intensity));
 80a1cbc:	f7fe bae2 	b.w	80a0284 <_ZN10Bar_Matrix11fill_matrixE11Color_Value>
 80a1cc0:	fc8b007a 	.word	0xfc8b007a
 80a1cc4:	400921fa 	.word	0x400921fa
 80a1cc8:	fdb20051 	.word	0xfdb20051
 80a1ccc:	4000c151 	.word	0x4000c151
 80a1cd0:	00000000 	.word	0x00000000
 80a1cd4:	406fe000 	.word	0x406fe000
 80a1cd8:	fdb20051 	.word	0xfdb20051
 80a1cdc:	4010c151 	.word	0x4010c151
 80a1ce0:	461c4000 	.word	0x461c4000
 80a1ce4:	437f0000 	.word	0x437f0000

080a1ce8 <_ZN10Bar_Matrix4tickEP10audio_binsi>:
    switch (visualizer_type) {
 80a1ce8:	2a09      	cmp	r2, #9
void Bar_Matrix::tick(audio_bins * bins, int visualizer_type) {
 80a1cea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a1cec:	4604      	mov	r4, r0
    switch (visualizer_type) {
 80a1cee:	dc0b      	bgt.n	80a1d08 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x20>
 80a1cf0:	2a00      	cmp	r2, #0
 80a1cf2:	db10      	blt.n	80a1d16 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
 80a1cf4:	3a01      	subs	r2, #1
 80a1cf6:	2a08      	cmp	r2, #8
 80a1cf8:	d81e      	bhi.n	80a1d38 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x50>
 80a1cfa:	e8df f002 	tbb	[pc, r2]
 80a1cfe:	3924      	.short	0x3924
 80a1d00:	34524d43 	.word	0x34524d43
 80a1d04:	293f      	.short	0x293f
 80a1d06:	2e          	.byte	0x2e
 80a1d07:	00          	.byte	0x00
 80a1d08:	2a4e      	cmp	r2, #78	; 0x4e
 80a1d0a:	d053      	beq.n	80a1db4 <_ZN10Bar_Matrix4tickEP10audio_binsi+0xcc>
 80a1d0c:	dc0d      	bgt.n	80a1d2a <_ZN10Bar_Matrix4tickEP10audio_binsi+0x42>
 80a1d0e:	2a42      	cmp	r2, #66	; 0x42
 80a1d10:	d058      	beq.n	80a1dc4 <_ZN10Bar_Matrix4tickEP10audio_binsi+0xdc>
 80a1d12:	2a4d      	cmp	r2, #77	; 0x4d
 80a1d14:	d04b      	beq.n	80a1dae <_ZN10Bar_Matrix4tickEP10audio_binsi+0xc6>
    bd->frame_ticked();
 80a1d16:	4b33      	ldr	r3, [pc, #204]	; (80a1de4 <_ZN10Bar_Matrix4tickEP10audio_binsi+0xfc>)
 80a1d18:	6818      	ldr	r0, [r3, #0]
 80a1d1a:	f000 f9d3 	bl	80a20c4 <_ZN14Beat_Detection12frame_tickedEv>
    show_all();
 80a1d1e:	4620      	mov	r0, r4
}
 80a1d20:	b004      	add	sp, #16
 80a1d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    show_all();
 80a1d26:	f7fe bcd9 	b.w	80a06dc <_ZN10Bar_Matrix8show_allEv>
    switch (visualizer_type) {
 80a1d2a:	2a58      	cmp	r2, #88	; 0x58
 80a1d2c:	d047      	beq.n	80a1dbe <_ZN10Bar_Matrix4tickEP10audio_binsi+0xd6>
 80a1d2e:	2a63      	cmp	r2, #99	; 0x63
 80a1d30:	d1f1      	bne.n	80a1d16 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          pixel_test();
 80a1d32:	f7fe fdf9 	bl	80a0928 <_ZN10Bar_Matrix10pixel_testEv>
          break;
 80a1d36:	e7ee      	b.n	80a1d16 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_bars(bins, 0.15, 0.85, false);
 80a1d38:	2300      	movs	r3, #0
 80a1d3a:	4a2b      	ldr	r2, [pc, #172]	; (80a1de8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d3c:	9300      	str	r3, [sp, #0]
 80a1d3e:	4b2b      	ldr	r3, [pc, #172]	; (80a1dec <_ZN10Bar_Matrix4tickEP10audio_binsi+0x104>)
 80a1d40:	f7fe fe2a 	bl	80a0998 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb>
          break;
 80a1d44:	e7e7      	b.n	80a1d16 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_bars_middle(bins, 0.15, 0.85);
 80a1d46:	4b29      	ldr	r3, [pc, #164]	; (80a1dec <_ZN10Bar_Matrix4tickEP10audio_binsi+0x104>)
 80a1d48:	4a27      	ldr	r2, [pc, #156]	; (80a1de8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d4a:	f7fe ffb5 	bl	80a0cb8 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff>
          break;
 80a1d4e:	e7e2      	b.n	80a1d16 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_bass_middle(bins, 0.15, 0.80);
 80a1d50:	4b27      	ldr	r3, [pc, #156]	; (80a1df0 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x108>)
 80a1d52:	4a25      	ldr	r2, [pc, #148]	; (80a1de8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d54:	f7ff f892 	bl	80a0e7c <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff>
          break;
 80a1d58:	e7dd      	b.n	80a1d16 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_bass_slide(bins, 0.15, 0.75);
 80a1d5a:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80a1d5e:	4a22      	ldr	r2, [pc, #136]	; (80a1de8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d60:	f7ff f928 	bl	80a0fb4 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff>
          break;
 80a1d64:	e7d7      	b.n	80a1d16 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
            visualizer_classic(bins, 0.15, 0.9);
 80a1d66:	4b23      	ldr	r3, [pc, #140]	; (80a1df4 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x10c>)
 80a1d68:	4a1f      	ldr	r2, [pc, #124]	; (80a1de8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d6a:	f7ff fa11 	bl	80a1190 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff>
            break;
 80a1d6e:	e7d2      	b.n	80a1d16 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_plasma(bins, 0.5, 0.965);
 80a1d70:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80a1d74:	4b20      	ldr	r3, [pc, #128]	; (80a1df8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x110>)
 80a1d76:	f7ff fa5b 	bl	80a1230 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff>
          break;
 80a1d7a:	e7cc      	b.n	80a1d16 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_pong(0.965);
 80a1d7c:	491e      	ldr	r1, [pc, #120]	; (80a1df8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x110>)
 80a1d7e:	f7ff fb45 	bl	80a140c <_ZN10Bar_Matrix15visualizer_pongEf>
          break;
 80a1d82:	e7c8      	b.n	80a1d16 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_pulse(bins, 0.15, 0.8, 1.0f, 20.0f);
 80a1d84:	4b1d      	ldr	r3, [pc, #116]	; (80a1dfc <_ZN10Bar_Matrix4tickEP10audio_binsi+0x114>)
 80a1d86:	4a18      	ldr	r2, [pc, #96]	; (80a1de8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d88:	9301      	str	r3, [sp, #4]
 80a1d8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80a1d8e:	9300      	str	r3, [sp, #0]
 80a1d90:	4b17      	ldr	r3, [pc, #92]	; (80a1df0 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x108>)
 80a1d92:	f7ff fbef 	bl	80a1574 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff>
          break;
 80a1d96:	e7be      	b.n	80a1d16 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_rainbow(bins, 0.15, 0.8);
 80a1d98:	4b15      	ldr	r3, [pc, #84]	; (80a1df0 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x108>)
 80a1d9a:	4a13      	ldr	r2, [pc, #76]	; (80a1de8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d9c:	f7ff fc90 	bl	80a16c0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff>
          break;
 80a1da0:	e7b9      	b.n	80a1d16 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_wheel(0.25, 10);
 80a1da2:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a1da6:	4a16      	ldr	r2, [pc, #88]	; (80a1e00 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x118>)
 80a1da8:	f7ff ff16 	bl	80a1bd8 <_ZN10Bar_Matrix16visualizer_wheelEff>
          break;
 80a1dac:	e7b3      	b.n	80a1d16 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          bouncing_lines();
 80a1dae:	f7fe fccb 	bl	80a0748 <_ZN10Bar_Matrix14bouncing_linesEv>
          break;
 80a1db2:	e7b0      	b.n	80a1d16 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
            snake_lines(0.75);
 80a1db4:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 80a1db8:	f7ff fe6e 	bl	80a1a98 <_ZN10Bar_Matrix11snake_linesEf>
            break;
 80a1dbc:	e7ab      	b.n	80a1d16 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          bar_test();
 80a1dbe:	f7fe fca3 	bl	80a0708 <_ZN10Bar_Matrix8bar_testEv>
          break;
 80a1dc2:	e7a8      	b.n	80a1d16 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
    Color_Value(unsigned char red, unsigned char green, unsigned char blue) :
 80a1dc4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80a1dc8:	9302      	str	r3, [sp, #8]
 80a1dca:	23ff      	movs	r3, #255	; 0xff
 80a1dcc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a1dd0:	2300      	movs	r3, #0
 80a1dd2:	f88d 300e 	strb.w	r3, [sp, #14]
    fill_matrix(c);
 80a1dd6:	ab04      	add	r3, sp, #16
 80a1dd8:	e913 0006 	ldmdb	r3, {r1, r2}
 80a1ddc:	f7fe fa52 	bl	80a0284 <_ZN10Bar_Matrix11fill_matrixE11Color_Value>
          break;
 80a1de0:	e799      	b.n	80a1d16 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
 80a1de2:	bf00      	nop
 80a1de4:	20000074 	.word	0x20000074
 80a1de8:	3e19999a 	.word	0x3e19999a
 80a1dec:	3f59999a 	.word	0x3f59999a
 80a1df0:	3f4ccccd 	.word	0x3f4ccccd
 80a1df4:	3f666666 	.word	0x3f666666
 80a1df8:	3f770a3d 	.word	0x3f770a3d
 80a1dfc:	41a00000 	.word	0x41a00000
 80a1e00:	41200000 	.word	0x41200000

080a1e04 <_ZN14Beat_DetectionC1Ev>:

    red = 0;
    green = 0;
    blue = 0;
    beat_count = 0;
    beats_per_flip = 3;
 80a1e04:	2203      	movs	r2, #3
    beat_on = false;
 80a1e06:	2300      	movs	r3, #0
    beats_per_flip = 3;
 80a1e08:	6142      	str	r2, [r0, #20]
    sma_long_index = 0;
    sma_short_index = 0;

    bpm_long_total = 0.0;
 80a1e0a:	2200      	movs	r2, #0
    green = 0;
 80a1e0c:	e9c0 3301 	strd	r3, r3, [r0, #4]
    beat_count = 0;
 80a1e10:	e9c0 3303 	strd	r3, r3, [r0, #12]
    sma_short_index = 0;
 80a1e14:	e9c0 3307 	strd	r3, r3, [r0, #28]
Beat_Detection::Beat_Detection() {
 80a1e18:	b530      	push	{r4, r5, lr}
    beat_on = false;
 80a1e1a:	8003      	strh	r3, [r0, #0]
    flip_on = false;
 80a1e1c:	7083      	strb	r3, [r0, #2]
    bpm_long_total = 0.0;
 80a1e1e:	f8c0 2d8c 	str.w	r2, [r0, #3468]	; 0xd8c
    bpm_short_total = 0.0;
 80a1e22:	f8c0 2d90 	str.w	r2, [r0, #3472]	; 0xd90

    for (int i = 0; i < NUM_BINS; i++) {
 80a1e26:	f500 613a 	add.w	r1, r0, #2976	; 0xba0
 80a1e2a:	f600 34d8 	addw	r4, r0, #3032	; 0xbd8
 80a1e2e:	f600 35bc 	addw	r5, r0, #3004	; 0xbbc
        sma_long_totals[i] = 0.0;
 80a1e32:	f841 2b04 	str.w	r2, [r1], #4
        sma_short_totals[i] = 0.0;
 80a1e36:	618a      	str	r2, [r1, #24]
    for (int i = 0; i < NUM_BINS; i++) {
 80a1e38:	42a9      	cmp	r1, r5
        beat_on_bins[i] = false;
 80a1e3a:	f804 3b01 	strb.w	r3, [r4], #1
        beat_reporter_bins[i] = false;
 80a1e3e:	71a3      	strb	r3, [r4, #6]
    for (int i = 0; i < NUM_BINS; i++) {
 80a1e40:	d1f7      	bne.n	80a1e32 <_ZN14Beat_DetectionC1Ev+0x2e>
    }
}
 80a1e42:	bd30      	pop	{r4, r5, pc}
 80a1e44:	0000      	movs	r0, r0
	...

080a1e48 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi>:
    sma_long_index = sma_long_index % SMA_LONG_LENGTH;
    sma_short_index++;
    sma_short_index = sma_short_index % SMA_SHORT_LENGTH;
}

void Beat_Detection::tick_beat_detection(audio_bins * bins, int cur_bin) {
 80a1e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1e4c:	6a03      	ldr	r3, [r0, #32]
 80a1e4e:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 80a1e52:	441d      	add	r5, r3
 80a1e54:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 80a1e58:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80a1e5c:	4607      	mov	r7, r0
 80a1e5e:	460e      	mov	r6, r1
    sma_short_totals[cur_bin] -= sma_short_bins[cur_bin][sma_short_index];
 80a1e60:	f8d8 0bbc 	ldr.w	r0, [r8, #3004]	; 0xbbc
 80a1e64:	f8d5 1b14 	ldr.w	r1, [r5, #2836]	; 0xb14
void Beat_Detection::tick_beat_detection(audio_bins * bins, int cur_bin) {
 80a1e68:	4614      	mov	r4, r2
 80a1e6a:	ea4f 0a82 	mov.w	sl, r2, lsl #2
    sma_short_totals[cur_bin] -= sma_short_bins[cur_bin][sma_short_index];
 80a1e6e:	f007 fe85 	bl	80a9b7c <__aeabi_fsub>
 80a1e72:	f8c8 0bbc 	str.w	r0, [r8, #3004]	; 0xbbc
 80a1e76:	4681      	mov	r9, r0
    sma_short_bins[cur_bin][sma_short_index]  = (bins->left[cur_bin]*bins->left[cur_bin])/2;
 80a1e78:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80a1e7c:	44b2      	add	sl, r6
 80a1e7e:	4340      	muls	r0, r0
 80a1e80:	1040      	asrs	r0, r0, #1
 80a1e82:	f007 ff31 	bl	80a9ce8 <__aeabi_i2f>
 80a1e86:	4606      	mov	r6, r0
 80a1e88:	f8c5 0b14 	str.w	r0, [r5, #2836]	; 0xb14
    sma_short_bins[cur_bin][sma_short_index] += (bins->right[cur_bin]*bins->right[cur_bin])/2;
 80a1e8c:	f8da 001c 	ldr.w	r0, [sl, #28]
 80a1e90:	4340      	muls	r0, r0
 80a1e92:	1040      	asrs	r0, r0, #1
 80a1e94:	f007 ff28 	bl	80a9ce8 <__aeabi_i2f>
 80a1e98:	4631      	mov	r1, r6
 80a1e9a:	f007 fe71 	bl	80a9b80 <__addsf3>
 80a1e9e:	4606      	mov	r6, r0
    sma_short_totals[cur_bin] += sma_short_bins[cur_bin][sma_short_index];
 80a1ea0:	4601      	mov	r1, r0
    sma_short_bins[cur_bin][sma_short_index] += (bins->right[cur_bin]*bins->right[cur_bin])/2;
 80a1ea2:	f8c5 0b14 	str.w	r0, [r5, #2836]	; 0xb14
    sma_short_totals[cur_bin] += sma_short_bins[cur_bin][sma_short_index];
 80a1ea6:	4648      	mov	r0, r9
 80a1ea8:	f007 fe6a 	bl	80a9b80 <__addsf3>
 80a1eac:	2564      	movs	r5, #100	; 0x64
    float sma_short = sma_short_totals[cur_bin] / SMA_SHORT_LENGTH;
 80a1eae:	4924      	ldr	r1, [pc, #144]	; (80a1f40 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xf8>)
    sma_short_totals[cur_bin] += sma_short_bins[cur_bin][sma_short_index];
 80a1eb0:	f8c8 0bbc 	str.w	r0, [r8, #3004]	; 0xbbc
    float sma_short = sma_short_totals[cur_bin] / SMA_SHORT_LENGTH;
 80a1eb4:	f008 f820 	bl	80a9ef8 <__aeabi_fdiv>
 80a1eb8:	69fb      	ldr	r3, [r7, #28]
 80a1eba:	4681      	mov	r9, r0

    sma_long_totals[cur_bin] -= sma_long_bins[cur_bin][sma_long_index];
 80a1ebc:	fb05 3504 	mla	r5, r5, r4, r3
 80a1ec0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80a1ec4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80a1ec6:	f8d8 0ba0 	ldr.w	r0, [r8, #2976]	; 0xba0
 80a1eca:	f007 fe57 	bl	80a9b7c <__aeabi_fsub>
    sma_long_bins[cur_bin][sma_long_index] = sma_short_bins[cur_bin][sma_short_index];
 80a1ece:	626e      	str	r6, [r5, #36]	; 0x24
    sma_long_totals[cur_bin] -= sma_long_bins[cur_bin][sma_long_index];
 80a1ed0:	4601      	mov	r1, r0
    sma_long_totals[cur_bin] += sma_long_bins[cur_bin][sma_long_index];
 80a1ed2:	4630      	mov	r0, r6
 80a1ed4:	f007 fe54 	bl	80a9b80 <__addsf3>
    float sma_long = sma_long_totals[cur_bin] / SMA_LONG_LENGTH;
 80a1ed8:	491a      	ldr	r1, [pc, #104]	; (80a1f44 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xfc>)
    sma_long_totals[cur_bin] += sma_long_bins[cur_bin][sma_long_index];
 80a1eda:	f8c8 0ba0 	str.w	r0, [r8, #2976]	; 0xba0
    float sma_long = sma_long_totals[cur_bin] / SMA_LONG_LENGTH;
 80a1ede:	f008 f80b 	bl	80a9ef8 <__aeabi_fdiv>

    if (!beat_on_bins[cur_bin] && sma_short > 1.6*sma_long) {
 80a1ee2:	443c      	add	r4, r7
 80a1ee4:	f894 3bd8 	ldrb.w	r3, [r4, #3032]	; 0xbd8
    float sma_long = sma_long_totals[cur_bin] / SMA_LONG_LENGTH;
 80a1ee8:	4605      	mov	r5, r0
    if (!beat_on_bins[cur_bin] && sma_short > 1.6*sma_long) {
 80a1eea:	b9d3      	cbnz	r3, 80a1f22 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xda>
 80a1eec:	4648      	mov	r0, r9
 80a1eee:	f007 faa1 	bl	80a9434 <__aeabi_f2d>
 80a1ef2:	4606      	mov	r6, r0
 80a1ef4:	4628      	mov	r0, r5
 80a1ef6:	460f      	mov	r7, r1
 80a1ef8:	f007 fa9c 	bl	80a9434 <__aeabi_f2d>
 80a1efc:	a30e      	add	r3, pc, #56	; (adr r3, 80a1f38 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xf0>)
 80a1efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1f02:	f007 faef 	bl	80a94e4 <__aeabi_dmul>
 80a1f06:	4602      	mov	r2, r0
 80a1f08:	460b      	mov	r3, r1
 80a1f0a:	4630      	mov	r0, r6
 80a1f0c:	4639      	mov	r1, r7
 80a1f0e:	f007 fd79 	bl	80a9a04 <__aeabi_dcmpgt>
 80a1f12:	b120      	cbz	r0, 80a1f1e <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xd6>
        //beat detected
        // beat_reporter is used by visualizers, it is cleared after every frame
        // beat_on is used by beat detection, it is cleared whenever a beat ends
        beat_on_bins[cur_bin] = true;
 80a1f14:	2301      	movs	r3, #1
 80a1f16:	f884 3bd8 	strb.w	r3, [r4, #3032]	; 0xbd8
        beat_reporter_bins[cur_bin] = true;
 80a1f1a:	f884 3bdf 	strb.w	r3, [r4, #3039]	; 0xbdf
    } else if (beat_on_bins[cur_bin] && sma_short < 1.0*sma_long) {
        //beat reset
        beat_on_bins[cur_bin] = false;
    }
}
 80a1f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (beat_on_bins[cur_bin] && sma_short < 1.0*sma_long) {
 80a1f22:	4601      	mov	r1, r0
 80a1f24:	4648      	mov	r0, r9
 80a1f26:	f008 f8d1 	bl	80aa0cc <__aeabi_fcmplt>
 80a1f2a:	2800      	cmp	r0, #0
 80a1f2c:	d0f7      	beq.n	80a1f1e <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xd6>
        beat_on_bins[cur_bin] = false;
 80a1f2e:	2300      	movs	r3, #0
 80a1f30:	f884 3bd8 	strb.w	r3, [r4, #3032]	; 0xbd8
}
 80a1f34:	e7f3      	b.n	80a1f1e <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xd6>
 80a1f36:	bf00      	nop
 80a1f38:	9999999a 	.word	0x9999999a
 80a1f3c:	3ff99999 	.word	0x3ff99999
 80a1f40:	40a00000 	.word	0x40a00000
 80a1f44:	42c80000 	.word	0x42c80000

080a1f48 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins>:

void Beat_Detection::tick_bpm_detection(audio_bins * bins) {
 80a1f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1f4c:	6a06      	ldr	r6, [r0, #32]
 80a1f4e:	4604      	mov	r4, r0
 80a1f50:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80a1f54:	460d      	mov	r5, r1
    bpm_short_total -= bpm_short_values[sma_short_index];
 80a1f56:	f8d0 0d90 	ldr.w	r0, [r0, #3472]	; 0xd90
 80a1f5a:	f8d6 1d78 	ldr.w	r1, [r6, #3448]	; 0xd78
 80a1f5e:	f007 fe0d 	bl	80a9b7c <__aeabi_fsub>
 80a1f62:	f8c4 0d90 	str.w	r0, [r4, #3472]	; 0xd90
    bpm_short_values[sma_short_index] = (bins->left[0]*bins->left[0] + bins->right[0]*bins->right[0])/4;
 80a1f66:	69eb      	ldr	r3, [r5, #28]
    bpm_short_total -= bpm_short_values[sma_short_index];
 80a1f68:	4607      	mov	r7, r0
    bpm_short_values[sma_short_index] = (bins->left[0]*bins->left[0] + bins->right[0]*bins->right[0])/4;
 80a1f6a:	435b      	muls	r3, r3
 80a1f6c:	6828      	ldr	r0, [r5, #0]
 80a1f6e:	fb00 3000 	mla	r0, r0, r0, r3
 80a1f72:	1080      	asrs	r0, r0, #2
 80a1f74:	f007 feb8 	bl	80a9ce8 <__aeabi_i2f>
 80a1f78:	4680      	mov	r8, r0
 80a1f7a:	f8c6 0d78 	str.w	r0, [r6, #3448]	; 0xd78
    bpm_short_values[sma_short_index] += (bins->left[1]*bins->left[1] + bins->right[1]*bins->right[1])/4;
 80a1f7e:	6a2b      	ldr	r3, [r5, #32]
 80a1f80:	6868      	ldr	r0, [r5, #4]
 80a1f82:	435b      	muls	r3, r3
 80a1f84:	fb00 3000 	mla	r0, r0, r0, r3
 80a1f88:	1080      	asrs	r0, r0, #2
 80a1f8a:	f007 fead 	bl	80a9ce8 <__aeabi_i2f>
 80a1f8e:	4641      	mov	r1, r8
 80a1f90:	f007 fdf6 	bl	80a9b80 <__addsf3>
 80a1f94:	4605      	mov	r5, r0
    //bpm_short_values[sma_short_index] = (bins->left[0]*bins->left[0] + bins->left[1]*bins->left[1])/2;
    bpm_short_total += bpm_short_values[sma_short_index];
 80a1f96:	4601      	mov	r1, r0
    bpm_short_values[sma_short_index] += (bins->left[1]*bins->left[1] + bins->right[1]*bins->right[1])/4;
 80a1f98:	f8c6 0d78 	str.w	r0, [r6, #3448]	; 0xd78
    bpm_short_total += bpm_short_values[sma_short_index];
 80a1f9c:	4638      	mov	r0, r7
 80a1f9e:	f007 fdef 	bl	80a9b80 <__addsf3>
 80a1fa2:	69e7      	ldr	r7, [r4, #28]
 80a1fa4:	f8c4 0d90 	str.w	r0, [r4, #3472]	; 0xd90
    float sma_short = bpm_short_total / SMA_SHORT_LENGTH;
 80a1fa8:	eb04 0787 	add.w	r7, r4, r7, lsl #2

    bpm_long_total -= bpm_long_values[sma_long_index];
 80a1fac:	f8d7 1be8 	ldr.w	r1, [r7, #3048]	; 0xbe8
    bpm_short_total += bpm_short_values[sma_short_index];
 80a1fb0:	4606      	mov	r6, r0
    bpm_long_total -= bpm_long_values[sma_long_index];
 80a1fb2:	f8d4 0d8c 	ldr.w	r0, [r4, #3468]	; 0xd8c
 80a1fb6:	f007 fde1 	bl	80a9b7c <__aeabi_fsub>
    bpm_long_values[sma_long_index] = bpm_short_values[sma_short_index];
 80a1fba:	f8c7 5be8 	str.w	r5, [r7, #3048]	; 0xbe8
    bpm_long_total -= bpm_long_values[sma_long_index];
 80a1fbe:	4601      	mov	r1, r0
    bpm_long_total += bpm_long_values[sma_long_index];
 80a1fc0:	4628      	mov	r0, r5
 80a1fc2:	f007 fddd 	bl	80a9b80 <__addsf3>
    float sma_short = bpm_short_total / SMA_SHORT_LENGTH;
 80a1fc6:	492c      	ldr	r1, [pc, #176]	; (80a2078 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x130>)
    bpm_long_total += bpm_long_values[sma_long_index];
 80a1fc8:	4605      	mov	r5, r0
 80a1fca:	f8c4 0d8c 	str.w	r0, [r4, #3468]	; 0xd8c
    float sma_short = bpm_short_total / SMA_SHORT_LENGTH;
 80a1fce:	4630      	mov	r0, r6
 80a1fd0:	f007 ff92 	bl	80a9ef8 <__aeabi_fdiv>
 80a1fd4:	f007 fa2e 	bl	80a9434 <__aeabi_f2d>
 80a1fd8:	4606      	mov	r6, r0
 80a1fda:	460f      	mov	r7, r1
    float sma_long = bpm_long_total / SMA_LONG_LENGTH;
 80a1fdc:	4628      	mov	r0, r5
 80a1fde:	4927      	ldr	r1, [pc, #156]	; (80a207c <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x134>)
 80a1fe0:	f007 ff8a 	bl	80a9ef8 <__aeabi_fdiv>
 80a1fe4:	f007 fa26 	bl	80a9434 <__aeabi_f2d>

    if (!beat_on && sma_short > 1.40*sma_long) {
 80a1fe8:	7823      	ldrb	r3, [r4, #0]
 80a1fea:	bb83      	cbnz	r3, 80a204e <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x106>
 80a1fec:	a320      	add	r3, pc, #128	; (adr r3, 80a2070 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x128>)
 80a1fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1ff2:	f007 fa77 	bl	80a94e4 <__aeabi_dmul>
 80a1ff6:	4632      	mov	r2, r6
 80a1ff8:	463b      	mov	r3, r7
 80a1ffa:	f007 fce5 	bl	80a99c8 <__aeabi_dcmplt>
 80a1ffe:	b320      	cbz	r0, 80a204a <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x102>
        //beat detected
        beat_count++;
 80a2000:	6923      	ldr	r3, [r4, #16]

        if (beat_count % beats_per_flip == 0) {
 80a2002:	6961      	ldr	r1, [r4, #20]
        beat_count++;
 80a2004:	3301      	adds	r3, #1
        if (beat_count % beats_per_flip == 0) {
 80a2006:	fb93 f2f1 	sdiv	r2, r3, r1
        beat_count++;
 80a200a:	6123      	str	r3, [r4, #16]
        if (beat_count % beats_per_flip == 0) {
 80a200c:	fb01 3312 	mls	r3, r1, r2, r3
 80a2010:	b91b      	cbnz	r3, 80a201a <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0xd2>
            flip_on = !flip_on;
 80a2012:	78a3      	ldrb	r3, [r4, #2]
 80a2014:	f083 0301 	eor.w	r3, r3, #1
 80a2018:	70a3      	strb	r3, [r4, #2]
        }

        blue = (green+red) % 255;
 80a201a:	26ff      	movs	r6, #255	; 0xff
 80a201c:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
 80a2020:	442b      	add	r3, r5
 80a2022:	fb93 f2f6 	sdiv	r2, r3, r6
 80a2026:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80a202a:	1a9b      	subs	r3, r3, r2
        green = red;
 80a202c:	e9c4 5302 	strd	r5, r3, [r4, #8]
        red = (red+random(255)) % 255;
 80a2030:	4630      	mov	r0, r6
 80a2032:	f002 fbd1 	bl	80a47d8 <_Z6randomi>
 80a2036:	4405      	add	r5, r0
 80a2038:	fb95 f6f6 	sdiv	r6, r5, r6

        // beat_reporter is used by visualizers, it is cleared after every frame
        // beat_on is used by beat detection, it is cleared whenever a beat ends
        beat_on = true;
 80a203c:	f240 1301 	movw	r3, #257	; 0x101
        red = (red+random(255)) % 255;
 80a2040:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 80a2044:	1bad      	subs	r5, r5, r6
 80a2046:	6065      	str	r5, [r4, #4]
        beat_on = true;
 80a2048:	8023      	strh	r3, [r4, #0]
        beat_reporter = true;
    } else if (beat_on && sma_short < 1.20*sma_long) {
        //beat reset
        beat_on = false;
    }
}
 80a204a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (beat_on && sma_short < 1.20*sma_long) {
 80a204e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80a2052:	4b0b      	ldr	r3, [pc, #44]	; (80a2080 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x138>)
 80a2054:	f007 fa46 	bl	80a94e4 <__aeabi_dmul>
 80a2058:	4632      	mov	r2, r6
 80a205a:	463b      	mov	r3, r7
 80a205c:	f007 fcd2 	bl	80a9a04 <__aeabi_dcmpgt>
 80a2060:	2800      	cmp	r0, #0
 80a2062:	d0f2      	beq.n	80a204a <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x102>
        beat_on = false;
 80a2064:	2300      	movs	r3, #0
 80a2066:	7023      	strb	r3, [r4, #0]
}
 80a2068:	e7ef      	b.n	80a204a <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x102>
 80a206a:	bf00      	nop
 80a206c:	f3af 8000 	nop.w
 80a2070:	66666666 	.word	0x66666666
 80a2074:	3ff66666 	.word	0x3ff66666
 80a2078:	40a00000 	.word	0x40a00000
 80a207c:	42c80000 	.word	0x42c80000
 80a2080:	3ff33333 	.word	0x3ff33333

080a2084 <_ZN14Beat_Detection4tickEP10audio_bins>:
void Beat_Detection::tick(audio_bins* bins) {
 80a2084:	b570      	push	{r4, r5, r6, lr}
 80a2086:	4604      	mov	r4, r0
 80a2088:	460e      	mov	r6, r1
    for (int i = 0; i < NUM_BINS; i++) {
 80a208a:	2500      	movs	r5, #0
    tick_bpm_detection(bins);
 80a208c:	f7ff ff5c 	bl	80a1f48 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins>
        tick_beat_detection(bins, i);
 80a2090:	462a      	mov	r2, r5
 80a2092:	4631      	mov	r1, r6
 80a2094:	4620      	mov	r0, r4
    for (int i = 0; i < NUM_BINS; i++) {
 80a2096:	3501      	adds	r5, #1
        tick_beat_detection(bins, i);
 80a2098:	f7ff fed6 	bl	80a1e48 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi>
    for (int i = 0; i < NUM_BINS; i++) {
 80a209c:	2d07      	cmp	r5, #7
 80a209e:	d1f7      	bne.n	80a2090 <_ZN14Beat_Detection4tickEP10audio_bins+0xc>
    sma_long_index = sma_long_index % SMA_LONG_LENGTH;
 80a20a0:	2164      	movs	r1, #100	; 0x64
    sma_long_index++;
 80a20a2:	69e3      	ldr	r3, [r4, #28]
 80a20a4:	3301      	adds	r3, #1
    sma_long_index = sma_long_index % SMA_LONG_LENGTH;
 80a20a6:	fb93 f2f1 	sdiv	r2, r3, r1
 80a20aa:	fb01 3312 	mls	r3, r1, r2, r3
    sma_short_index = sma_short_index % SMA_SHORT_LENGTH;
 80a20ae:	2205      	movs	r2, #5
    sma_long_index = sma_long_index % SMA_LONG_LENGTH;
 80a20b0:	61e3      	str	r3, [r4, #28]
    sma_short_index++;
 80a20b2:	6a23      	ldr	r3, [r4, #32]
 80a20b4:	3301      	adds	r3, #1
    sma_short_index = sma_short_index % SMA_SHORT_LENGTH;
 80a20b6:	fb93 f2f2 	sdiv	r2, r3, r2
 80a20ba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80a20be:	1a9b      	subs	r3, r3, r2
 80a20c0:	6223      	str	r3, [r4, #32]
}
 80a20c2:	bd70      	pop	{r4, r5, r6, pc}

080a20c4 <_ZN14Beat_Detection12frame_tickedEv>:
 * Function: frame_ticked
 * Description: Clear all beat detection reporters
 * Parameters: none
 * ================================================================== */
void Beat_Detection::frame_ticked() {
    beat_reporter = false;
 80a20c4:	2300      	movs	r3, #0
 80a20c6:	7043      	strb	r3, [r0, #1]
    for (int i = 0; i < NUM_BINS; i++) {
        beat_reporter_bins[i] = false;
 80a20c8:	f880 3bdf 	strb.w	r3, [r0, #3039]	; 0xbdf
 80a20cc:	f8c0 3be0 	str.w	r3, [r0, #3040]	; 0xbe0
 80a20d0:	f8a0 3be4 	strh.w	r3, [r0, #3044]	; 0xbe4
    }
}
 80a20d4:	4770      	bx	lr

080a20d6 <_ZN14Beat_Detection11beat_on_binEi>:
 * Description: Returns the beat reporter for the given bin
 * Parameters: [int] bin - The bin to check
 * Returns: True if a beat was detected within the last frame, false otherwise.
 * ================================================================== */
bool Beat_Detection::beat_on_bin(int bin) {
    return beat_reporter_bins[bin];
 80a20d6:	4408      	add	r0, r1
}
 80a20d8:	f890 0bdf 	ldrb.w	r0, [r0, #3039]	; 0xbdf
 80a20dc:	4770      	bx	lr

080a20de <_ZN14Beat_Detection9num_beatsEv>:
 * Description: Returns the current number of beats detected
 * Parameters: none
 * ================================================================== */
int Beat_Detection::num_beats() {
    return beat_count;
}
 80a20de:	6900      	ldr	r0, [r0, #16]
 80a20e0:	4770      	bx	lr

080a20e2 <_ZN14Beat_Detection1rEv>:
 * Description: Returns the current red value
 * Parameters: none
 * ================================================================== */
int Beat_Detection::r() {
    return red;
}
 80a20e2:	6840      	ldr	r0, [r0, #4]
 80a20e4:	4770      	bx	lr

080a20e6 <_ZN14Beat_Detection1gEv>:
 * Description: Returns the current green value
 * Parameters: none
 * ================================================================== */
int Beat_Detection::g() {
    return green;
}
 80a20e6:	6880      	ldr	r0, [r0, #8]
 80a20e8:	4770      	bx	lr

080a20ea <_ZN14Beat_Detection1bEv>:
 * Description: Returns the current blue value
 * Parameters: none
 * ================================================================== */
int Beat_Detection::b() {
    return blue;
}
 80a20ea:	68c0      	ldr	r0, [r0, #12]
 80a20ec:	4770      	bx	lr

080a20ee <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a20ee:	b510      	push	{r4, lr}
 80a20f0:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a20f2:	6800      	ldr	r0, [r0, #0]
 80a20f4:	b108      	cbz	r0, 80a20fa <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80a20f6:	f001 ff01 	bl	80a3efc <free>
class SystemClass {
 80a20fa:	4620      	mov	r0, r4
 80a20fc:	bd10      	pop	{r4, pc}

080a20fe <_Z7init_eqv>:
/* ================================================================== *
 *  Function: init_eq
 *  Description: Sends reset sequence to MSGEQ7's allowing for data
 *  reading to begin
 * ================================================================== */
void init_eq() {
 80a20fe:	b508      	push	{r3, lr}
     *
     *  rst     _|‾‾‾‾‾|__
     *
     *  strobe  _|‾‾|__|‾‾
     */
    digitalWrite(rst, HIGH);
 80a2100:	2101      	movs	r1, #1
 80a2102:	200f      	movs	r0, #15
 80a2104:	f003 fad3 	bl	80a56ae <digitalWrite>
    digitalWrite(strobe, HIGH);
 80a2108:	2101      	movs	r1, #1
 80a210a:	200c      	movs	r0, #12
 80a210c:	f003 facf 	bl	80a56ae <digitalWrite>
    delay(1);
 80a2110:	2001      	movs	r0, #1
 80a2112:	f001 ff23 	bl	80a3f5c <delay>
    digitalWrite(strobe, LOW);
 80a2116:	2100      	movs	r1, #0
 80a2118:	200c      	movs	r0, #12
 80a211a:	f003 fac8 	bl	80a56ae <digitalWrite>
    delay(1);
 80a211e:	2001      	movs	r0, #1
 80a2120:	f001 ff1c 	bl	80a3f5c <delay>
    digitalWrite(rst, LOW);
 80a2124:	2100      	movs	r1, #0
 80a2126:	200f      	movs	r0, #15
 80a2128:	f003 fac1 	bl	80a56ae <digitalWrite>
    digitalWrite(strobe, HIGH);
 80a212c:	200c      	movs	r0, #12
 80a212e:	2101      	movs	r1, #1
 80a2130:	f003 fabd 	bl	80a56ae <digitalWrite>
    delay(1);
}
 80a2134:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(1);
 80a2138:	2001      	movs	r0, #1
 80a213a:	f001 bf0f 	b.w	80a3f5c <delay>
	...

080a2140 <_Z11sample_freqP10audio_bins>:
/* ================================================================== *
 *  Function: sample_freq
 *  Description: Reads bins from MSGEQ7's and stores them to struct
 *  Parameters:  [audio_bins]* bins - frequency bins read from chip
 * ================================================================== */
void sample_freq(audio_bins* bins) {
 80a2140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (int i = 0; i < NUM_BINS; i++) {
        digitalWrite(strobe, LOW);
        delayMicroseconds(40); // allow for EQ mux to fully switch

        // Moving average bins with new sample
        bins->left[i]  = analogRead(audio_l) * 0.8 + bins->left[i]  * 0.2;
 80a2144:	f20f 09b8 	addw	r9, pc, #184	; 0xb8
 80a2148:	e9d9 8900 	ldrd	r8, r9, [r9]
 80a214c:	a72e      	add	r7, pc, #184	; (adr r7, 80a2208 <_Z11sample_freqP10audio_bins+0xc8>)
 80a214e:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a2152:	f100 0318 	add.w	r3, r0, #24
 80a2156:	f1a0 0a04 	sub.w	sl, r0, #4
 80a215a:	9301      	str	r3, [sp, #4]
        digitalWrite(strobe, LOW);
 80a215c:	2100      	movs	r1, #0
 80a215e:	200c      	movs	r0, #12
 80a2160:	f003 faa5 	bl	80a56ae <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a2164:	2028      	movs	r0, #40	; 0x28
 80a2166:	f001 fc73 	bl	80a3a50 <HAL_Delay_Microseconds>
        bins->left[i]  = analogRead(audio_l) * 0.8 + bins->left[i]  * 0.2;
 80a216a:	200a      	movs	r0, #10
 80a216c:	f003 fab8 	bl	80a56e0 <analogRead>
 80a2170:	4683      	mov	fp, r0
 80a2172:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80a2176:	f007 f94b 	bl	80a9410 <__aeabi_i2d>
 80a217a:	4642      	mov	r2, r8
 80a217c:	464b      	mov	r3, r9
 80a217e:	f007 f9b1 	bl	80a94e4 <__aeabi_dmul>
 80a2182:	4604      	mov	r4, r0
 80a2184:	4658      	mov	r0, fp
 80a2186:	460d      	mov	r5, r1
 80a2188:	f007 f942 	bl	80a9410 <__aeabi_i2d>
 80a218c:	4632      	mov	r2, r6
 80a218e:	463b      	mov	r3, r7
 80a2190:	f007 f9a8 	bl	80a94e4 <__aeabi_dmul>
 80a2194:	4602      	mov	r2, r0
 80a2196:	460b      	mov	r3, r1
 80a2198:	4620      	mov	r0, r4
 80a219a:	4629      	mov	r1, r5
 80a219c:	f006 ffec 	bl	80a9178 <__adddf3>
 80a21a0:	f007 fc50 	bl	80a9a44 <__aeabi_d2iz>
 80a21a4:	f8ca 0000 	str.w	r0, [sl]
        bins->right[i] = analogRead(audio_r) * 0.8 + bins->right[i] * 0.2;
 80a21a8:	200b      	movs	r0, #11
 80a21aa:	f003 fa99 	bl	80a56e0 <analogRead>
 80a21ae:	4683      	mov	fp, r0
 80a21b0:	f8da 001c 	ldr.w	r0, [sl, #28]
 80a21b4:	f007 f92c 	bl	80a9410 <__aeabi_i2d>
 80a21b8:	4642      	mov	r2, r8
 80a21ba:	464b      	mov	r3, r9
 80a21bc:	f007 f992 	bl	80a94e4 <__aeabi_dmul>
 80a21c0:	4604      	mov	r4, r0
 80a21c2:	4658      	mov	r0, fp
 80a21c4:	460d      	mov	r5, r1
 80a21c6:	f007 f923 	bl	80a9410 <__aeabi_i2d>
 80a21ca:	4632      	mov	r2, r6
 80a21cc:	463b      	mov	r3, r7
 80a21ce:	f007 f989 	bl	80a94e4 <__aeabi_dmul>
 80a21d2:	460b      	mov	r3, r1
 80a21d4:	4602      	mov	r2, r0
 80a21d6:	4629      	mov	r1, r5
 80a21d8:	4620      	mov	r0, r4
 80a21da:	f006 ffcd 	bl	80a9178 <__adddf3>
 80a21de:	f007 fc31 	bl	80a9a44 <__aeabi_d2iz>

        digitalWrite(strobe, HIGH);
 80a21e2:	2101      	movs	r1, #1
        bins->right[i] = analogRead(audio_r) * 0.8 + bins->right[i] * 0.2;
 80a21e4:	f8ca 001c 	str.w	r0, [sl, #28]
        digitalWrite(strobe, HIGH);
 80a21e8:	200c      	movs	r0, #12
 80a21ea:	f003 fa60 	bl	80a56ae <digitalWrite>
 80a21ee:	2028      	movs	r0, #40	; 0x28
 80a21f0:	f001 fc2e 	bl	80a3a50 <HAL_Delay_Microseconds>
    for (int i = 0; i < NUM_BINS; i++) {
 80a21f4:	9b01      	ldr	r3, [sp, #4]
 80a21f6:	459a      	cmp	sl, r3
 80a21f8:	d1b0      	bne.n	80a215c <_Z11sample_freqP10audio_bins+0x1c>
        delayMicroseconds(40); // allow for EQ mux to fully switch
    }
}
 80a21fa:	b003      	add	sp, #12
 80a21fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2200:	9999999a 	.word	0x9999999a
 80a2204:	3fc99999 	.word	0x3fc99999
 80a2208:	9999999a 	.word	0x9999999a
 80a220c:	3fe99999 	.word	0x3fe99999

080a2210 <_Z15powered_on_tickv>:
/* ================================================================== *
 *  Function: powered_on_tick
 *  Description: Samples/beat detects/updates frame as needed
 *  Parameters:  none
 * ================================================================== */
void powered_on_tick() {
 80a2210:	b510      	push	{r4, lr}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a2212:	f001 fc2d 	bl	80a3a70 <HAL_Timer_Get_Milli_Seconds>
    // #if ENABLE_PSU_CONTROL
    // if (!psu_is_on) { psu_startup(); }
    // #endif

    #if ENABLE_MSGEQ7
    if (millis() - last_sample_millis >= SAMPLE_UPDATE_INTERVAL) {
 80a2216:	4c12      	ldr	r4, [pc, #72]	; (80a2260 <_Z15powered_on_tickv+0x50>)
 80a2218:	6823      	ldr	r3, [r4, #0]
 80a221a:	1ac0      	subs	r0, r0, r3
 80a221c:	2809      	cmp	r0, #9
 80a221e:	d909      	bls.n	80a2234 <_Z15powered_on_tickv+0x24>
 80a2220:	f001 fc26 	bl	80a3a70 <HAL_Timer_Get_Milli_Seconds>
        last_sample_millis = millis();
 80a2224:	6020      	str	r0, [r4, #0]
        sample_freq(&bins);
 80a2226:	480f      	ldr	r0, [pc, #60]	; (80a2264 <_Z15powered_on_tickv+0x54>)
 80a2228:	f7ff ff8a 	bl	80a2140 <_Z11sample_freqP10audio_bins>
        beat_detect.tick(&bins);
 80a222c:	490d      	ldr	r1, [pc, #52]	; (80a2264 <_Z15powered_on_tickv+0x54>)
 80a222e:	480e      	ldr	r0, [pc, #56]	; (80a2268 <_Z15powered_on_tickv+0x58>)
 80a2230:	f7ff ff28 	bl	80a2084 <_ZN14Beat_Detection4tickEP10audio_bins>
 80a2234:	f001 fc1c 	bl	80a3a70 <HAL_Timer_Get_Milli_Seconds>
    }
    #endif

    #if ENABLE_BARS
    if (millis() - last_display_update >= DISPLAY_UPDATE_INTERVAL) {
 80a2238:	4c0c      	ldr	r4, [pc, #48]	; (80a226c <_Z15powered_on_tickv+0x5c>)
 80a223a:	6823      	ldr	r3, [r4, #0]
 80a223c:	1ac0      	subs	r0, r0, r3
 80a223e:	280e      	cmp	r0, #14
 80a2240:	d90c      	bls.n	80a225c <_Z15powered_on_tickv+0x4c>
 80a2242:	f001 fc15 	bl	80a3a70 <HAL_Timer_Get_Milli_Seconds>
        last_display_update = millis();
        matrix->tick(&bins, STATIC_VISUALIZER);
 80a2246:	4b0a      	ldr	r3, [pc, #40]	; (80a2270 <_Z15powered_on_tickv+0x60>)
 80a2248:	2202      	movs	r2, #2
        last_display_update = millis();
 80a224a:	6020      	str	r0, [r4, #0]
        matrix->tick(&bins, STATIC_VISUALIZER);
 80a224c:	4905      	ldr	r1, [pc, #20]	; (80a2264 <_Z15powered_on_tickv+0x54>)
 80a224e:	6818      	ldr	r0, [r3, #0]
 80a2250:	f7ff fd4a 	bl	80a1ce8 <_ZN10Bar_Matrix4tickEP10audio_binsi>
        frame_count++;
 80a2254:	4a07      	ldr	r2, [pc, #28]	; (80a2274 <_Z15powered_on_tickv+0x64>)
 80a2256:	6813      	ldr	r3, [r2, #0]
 80a2258:	3301      	adds	r3, #1
 80a225a:	6013      	str	r3, [r2, #0]
    }
    #endif
}
 80a225c:	bd10      	pop	{r4, pc}
 80a225e:	bf00      	nop
 80a2260:	20000e74 	.word	0x20000e74
 80a2264:	20000094 	.word	0x20000094
 80a2268:	200000d4 	.word	0x200000d4
 80a226c:	20000e70 	.word	0x20000e70
 80a2270:	200000cc 	.word	0x200000cc
 80a2274:	20000e68 	.word	0x20000e68

080a2278 <_Z11psu_startupv>:
/* ================================================================== *
 *  Function: psu_startup
 *  Description: Turns the psu on
 *  Parameters:  none
 * ================================================================== */
void psu_startup() {
 80a2278:	b570      	push	{r4, r5, r6, lr}
    #if ENABLE_PSU_CONTROL
    if (!psu_is_on) {
 80a227a:	4c08      	ldr	r4, [pc, #32]	; (80a229c <_Z11psu_startupv+0x24>)
 80a227c:	7825      	ldrb	r5, [r4, #0]
 80a227e:	b955      	cbnz	r5, 80a2296 <_Z11psu_startupv+0x1e>
        matrix->clear_matrix();
 80a2280:	4e07      	ldr	r6, [pc, #28]	; (80a22a0 <_Z11psu_startupv+0x28>)
 80a2282:	6830      	ldr	r0, [r6, #0]
 80a2284:	f7fe f8b0 	bl	80a03e8 <_ZN10Bar_Matrix12clear_matrixEv>
        matrix->show_all();
 80a2288:	6830      	ldr	r0, [r6, #0]
 80a228a:	f7fe fa27 	bl	80a06dc <_ZN10Bar_Matrix8show_allEv>
        digitalWrite(ps_on, LOW);
 80a228e:	4629      	mov	r1, r5
 80a2290:	200e      	movs	r0, #14
 80a2292:	f003 fa0c 	bl	80a56ae <digitalWrite>
    }
    psu_is_on = true;
 80a2296:	2301      	movs	r3, #1
 80a2298:	7023      	strb	r3, [r4, #0]
    #endif
}
 80a229a:	bd70      	pop	{r4, r5, r6, pc}
 80a229c:	200000d1 	.word	0x200000d1
 80a22a0:	200000cc 	.word	0x200000cc

080a22a4 <setup>:
void setup() {
 80a22a4:	b530      	push	{r4, r5, lr}
    last_sample_millis = 0;
 80a22a6:	2400      	movs	r4, #0
void setup() {
 80a22a8:	b0a1      	sub	sp, #132	; 0x84
    pinMode(rst, OUTPUT);
 80a22aa:	2101      	movs	r1, #1
 80a22ac:	200f      	movs	r0, #15
 80a22ae:	f003 f9ed 	bl	80a568c <pinMode>
    pinMode(strobe, OUTPUT);
 80a22b2:	2101      	movs	r1, #1
 80a22b4:	200c      	movs	r0, #12
 80a22b6:	f003 f9e9 	bl	80a568c <pinMode>
    init_eq();
 80a22ba:	f7ff ff20 	bl	80a20fe <_Z7init_eqv>
    last_sample_millis = 0;
 80a22be:	4b54      	ldr	r3, [pc, #336]	; (80a2410 <setup+0x16c>)
    pinMode(ps_on, OUTPUT);
 80a22c0:	2101      	movs	r1, #1
 80a22c2:	200e      	movs	r0, #14
    last_sample_millis = 0;
 80a22c4:	601c      	str	r4, [r3, #0]
    pinMode(ps_on, OUTPUT);
 80a22c6:	f003 f9e1 	bl	80a568c <pinMode>
    psu_is_on = false;
 80a22ca:	4b52      	ldr	r3, [pc, #328]	; (80a2414 <setup+0x170>)
 80a22cc:	701c      	strb	r4, [r3, #0]
    psu_startup();
 80a22ce:	f7ff ffd3 	bl	80a2278 <_Z11psu_startupv>
    matrix = new Bar_Matrix(NUM_BARS, STRIP_LENGTH, LED_TYPE, matrix_pins, &beat_detect);
 80a22d2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80a22d6:	f7fd fee0 	bl	80a009a <_Znwj>
 80a22da:	4604      	mov	r4, r0
 80a22dc:	b140      	cbz	r0, 80a22f0 <setup+0x4c>
 80a22de:	4b4e      	ldr	r3, [pc, #312]	; (80a2418 <setup+0x174>)
 80a22e0:	223a      	movs	r2, #58	; 0x3a
 80a22e2:	9301      	str	r3, [sp, #4]
 80a22e4:	4b4d      	ldr	r3, [pc, #308]	; (80a241c <setup+0x178>)
 80a22e6:	2108      	movs	r1, #8
 80a22e8:	9300      	str	r3, [sp, #0]
 80a22ea:	2302      	movs	r3, #2
 80a22ec:	f7fe f8a2 	bl	80a0434 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection>
 80a22f0:	4b4b      	ldr	r3, [pc, #300]	; (80a2420 <setup+0x17c>)
    frame_count_publish = 0;
 80a22f2:	4d4c      	ldr	r5, [pc, #304]	; (80a2424 <setup+0x180>)
    matrix = new Bar_Matrix(NUM_BARS, STRIP_LENGTH, LED_TYPE, matrix_pins, &beat_detect);
 80a22f4:	601c      	str	r4, [r3, #0]
    last_display_update = 0;
 80a22f6:	2400      	movs	r4, #0
 80a22f8:	4b4b      	ldr	r3, [pc, #300]	; (80a2428 <setup+0x184>)
 80a22fa:	601c      	str	r4, [r3, #0]
    last_sound_seconds = Time.now();
 80a22fc:	f002 fed2 	bl	80a50a4 <_ZN9TimeClass3nowEv>
 80a2300:	4b4a      	ldr	r3, [pc, #296]	; (80a242c <setup+0x188>)
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a2302:	2202      	movs	r2, #2
 80a2304:	6018      	str	r0, [r3, #0]
    tick_count = 0;
 80a2306:	4b4a      	ldr	r3, [pc, #296]	; (80a2430 <setup+0x18c>)
 80a2308:	494a      	ldr	r1, [pc, #296]	; (80a2434 <setup+0x190>)
 80a230a:	601c      	str	r4, [r3, #0]
    last_tick_update = 0;
 80a230c:	4b4a      	ldr	r3, [pc, #296]	; (80a2438 <setup+0x194>)
 80a230e:	484b      	ldr	r0, [pc, #300]	; (80a243c <setup+0x198>)
 80a2310:	601c      	str	r4, [r3, #0]
    frame_count = 0;
 80a2312:	4b4b      	ldr	r3, [pc, #300]	; (80a2440 <setup+0x19c>)
    frame_count_publish = 0;
 80a2314:	602c      	str	r4, [r5, #0]
    frame_count = 0;
 80a2316:	601c      	str	r4, [r3, #0]
 80a2318:	4623      	mov	r3, r4
 80a231a:	f001 fd4f 	bl	80a3dbc <spark_variable>
 80a231e:	4623      	mov	r3, r4
 80a2320:	2202      	movs	r2, #2
 80a2322:	4629      	mov	r1, r5
 80a2324:	4847      	ldr	r0, [pc, #284]	; (80a2444 <setup+0x1a0>)
 80a2326:	f001 fd49 	bl	80a3dbc <spark_variable>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a232a:	4b47      	ldr	r3, [pc, #284]	; (80a2448 <setup+0x1a4>)
 80a232c:	4622      	mov	r2, r4
 80a232e:	6858      	ldr	r0, [r3, #4]
 80a2330:	4621      	mov	r1, r4
 80a2332:	f001 fd73 	bl	80a3e1c <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a2336:	1c81      	adds	r1, r0, #2
 80a2338:	a81a      	add	r0, sp, #104	; 0x68
 80a233a:	f002 f951 	bl	80a45e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
  String ipStr = String(myIP[0])+"."+String(myIP[1])+"."+String(myIP[2])+"."+String(myIP[3]);
 80a233e:	220a      	movs	r2, #10
 80a2340:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80a2344:	a806      	add	r0, sp, #24
 80a2346:	f002 faf5 	bl	80a4934 <_ZN6StringC1Ehh>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a234a:	a906      	add	r1, sp, #24
 80a234c:	a80a      	add	r0, sp, #40	; 0x28
 80a234e:	f002 fad5 	bl	80a48fc <_ZN6StringC1ERKS_>
 80a2352:	493e      	ldr	r1, [pc, #248]	; (80a244c <setup+0x1a8>)
 80a2354:	a80a      	add	r0, sp, #40	; 0x28
 80a2356:	f002 fb22 	bl	80a499e <_ZplRK15StringSumHelperPKc>
 80a235a:	4604      	mov	r4, r0
 80a235c:	220a      	movs	r2, #10
 80a235e:	f89d 106e 	ldrb.w	r1, [sp, #110]	; 0x6e
 80a2362:	a80e      	add	r0, sp, #56	; 0x38
 80a2364:	f002 fae6 	bl	80a4934 <_ZN6StringC1Ehh>
 80a2368:	4620      	mov	r0, r4
 80a236a:	a90e      	add	r1, sp, #56	; 0x38
 80a236c:	f002 fb0b 	bl	80a4986 <_ZplRK15StringSumHelperRK6String>
 80a2370:	4936      	ldr	r1, [pc, #216]	; (80a244c <setup+0x1a8>)
 80a2372:	f002 fb14 	bl	80a499e <_ZplRK15StringSumHelperPKc>
 80a2376:	4604      	mov	r4, r0
 80a2378:	220a      	movs	r2, #10
 80a237a:	f89d 106d 	ldrb.w	r1, [sp, #109]	; 0x6d
 80a237e:	a812      	add	r0, sp, #72	; 0x48
 80a2380:	f002 fad8 	bl	80a4934 <_ZN6StringC1Ehh>
 80a2384:	4620      	mov	r0, r4
 80a2386:	a912      	add	r1, sp, #72	; 0x48
 80a2388:	f002 fafd 	bl	80a4986 <_ZplRK15StringSumHelperRK6String>
 80a238c:	492f      	ldr	r1, [pc, #188]	; (80a244c <setup+0x1a8>)
 80a238e:	f002 fb06 	bl	80a499e <_ZplRK15StringSumHelperPKc>
 80a2392:	4604      	mov	r4, r0
 80a2394:	220a      	movs	r2, #10
 80a2396:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80a239a:	a816      	add	r0, sp, #88	; 0x58
 80a239c:	f002 faca 	bl	80a4934 <_ZN6StringC1Ehh>
 80a23a0:	4620      	mov	r0, r4
 80a23a2:	a916      	add	r1, sp, #88	; 0x58
 80a23a4:	f002 faef 	bl	80a4986 <_ZplRK15StringSumHelperRK6String>
 80a23a8:	4601      	mov	r1, r0
 80a23aa:	a802      	add	r0, sp, #8
 80a23ac:	f002 faa6 	bl	80a48fc <_ZN6StringC1ERKS_>
 80a23b0:	a816      	add	r0, sp, #88	; 0x58
 80a23b2:	f002 fa4a 	bl	80a484a <_ZN6StringD1Ev>
 80a23b6:	a812      	add	r0, sp, #72	; 0x48
 80a23b8:	f002 fa47 	bl	80a484a <_ZN6StringD1Ev>
 80a23bc:	a80e      	add	r0, sp, #56	; 0x38
 80a23be:	f002 fa44 	bl	80a484a <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a23c2:	a80a      	add	r0, sp, #40	; 0x28
 80a23c4:	f002 fa41 	bl	80a484a <_ZN6StringD1Ev>
 80a23c8:	a806      	add	r0, sp, #24
 80a23ca:	f002 fa3e 	bl	80a484a <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a23ce:	4b20      	ldr	r3, [pc, #128]	; (80a2450 <setup+0x1ac>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a23d0:	9a02      	ldr	r2, [sp, #8]
 80a23d2:	781b      	ldrb	r3, [r3, #0]
 80a23d4:	491f      	ldr	r1, [pc, #124]	; (80a2454 <setup+0x1b0>)
 80a23d6:	f88d 3000 	strb.w	r3, [sp]
 80a23da:	a816      	add	r0, sp, #88	; 0x58
 80a23dc:	233c      	movs	r3, #60	; 0x3c
 80a23de:	f001 ff1b 	bl	80a4218 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a23e2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80a23e4:	b17c      	cbz	r4, 80a2406 <setup+0x162>
      if (--_M_use_count == 0)
 80a23e6:	6863      	ldr	r3, [r4, #4]
 80a23e8:	3b01      	subs	r3, #1
 80a23ea:	6063      	str	r3, [r4, #4]
 80a23ec:	b95b      	cbnz	r3, 80a2406 <setup+0x162>
          _M_dispose();
 80a23ee:	6823      	ldr	r3, [r4, #0]
 80a23f0:	4620      	mov	r0, r4
 80a23f2:	689b      	ldr	r3, [r3, #8]
 80a23f4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a23f6:	68a3      	ldr	r3, [r4, #8]
 80a23f8:	3b01      	subs	r3, #1
 80a23fa:	60a3      	str	r3, [r4, #8]
 80a23fc:	b91b      	cbnz	r3, 80a2406 <setup+0x162>
            _M_destroy();
 80a23fe:	6823      	ldr	r3, [r4, #0]
 80a2400:	4620      	mov	r0, r4
 80a2402:	68db      	ldr	r3, [r3, #12]
 80a2404:	4798      	blx	r3
 80a2406:	a802      	add	r0, sp, #8
 80a2408:	f002 fa1f 	bl	80a484a <_ZN6StringD1Ev>
}
 80a240c:	b021      	add	sp, #132	; 0x84
 80a240e:	bd30      	pop	{r4, r5, pc}
 80a2410:	20000e74 	.word	0x20000e74
 80a2414:	200000d1 	.word	0x200000d1
 80a2418:	200000d4 	.word	0x200000d4
 80a241c:	080aa5c1 	.word	0x080aa5c1
 80a2420:	200000cc 	.word	0x200000cc
 80a2424:	20000e6c 	.word	0x20000e6c
 80a2428:	20000e70 	.word	0x20000e70
 80a242c:	20000090 	.word	0x20000090
 80a2430:	20000e7c 	.word	0x20000e7c
 80a2434:	20000e80 	.word	0x20000e80
 80a2438:	20000e78 	.word	0x20000e78
 80a243c:	080aa5a4 	.word	0x080aa5a4
 80a2440:	20000e68 	.word	0x20000e68
 80a2444:	080aa5ad 	.word	0x080aa5ad
 80a2448:	20001458 	.word	0x20001458
 80a244c:	080aa5b7 	.word	0x080aa5b7
 80a2450:	200000d0 	.word	0x200000d0
 80a2454:	080aa5b9 	.word	0x080aa5b9

080a2458 <_Z12psu_shutdownv>:
/* ================================================================== *
 *  Function: psu_shutdown
 *  Description: turns the psu off, sets psu_is_on to false
 *  Parameters:  none
 * ================================================================== */
void psu_shutdown() {
 80a2458:	b538      	push	{r3, r4, r5, lr}
    #if ENABLE_PSU_CONTROL
    if (psu_is_on) {
 80a245a:	4c08      	ldr	r4, [pc, #32]	; (80a247c <_Z12psu_shutdownv+0x24>)
 80a245c:	7822      	ldrb	r2, [r4, #0]
 80a245e:	b152      	cbz	r2, 80a2476 <_Z12psu_shutdownv+0x1e>
        digitalWrite(ps_on, HIGH);
        matrix->clear_matrix();
 80a2460:	4d07      	ldr	r5, [pc, #28]	; (80a2480 <_Z12psu_shutdownv+0x28>)
        digitalWrite(ps_on, HIGH);
 80a2462:	2101      	movs	r1, #1
 80a2464:	200e      	movs	r0, #14
 80a2466:	f003 f922 	bl	80a56ae <digitalWrite>
        matrix->clear_matrix();
 80a246a:	6828      	ldr	r0, [r5, #0]
 80a246c:	f7fd ffbc 	bl	80a03e8 <_ZN10Bar_Matrix12clear_matrixEv>
        matrix->show_all();
 80a2470:	6828      	ldr	r0, [r5, #0]
 80a2472:	f7fe f933 	bl	80a06dc <_ZN10Bar_Matrix8show_allEv>
    }
    psu_is_on = false;
 80a2476:	2300      	movs	r3, #0
 80a2478:	7023      	strb	r3, [r4, #0]
    #endif
}
 80a247a:	bd38      	pop	{r3, r4, r5, pc}
 80a247c:	200000d1 	.word	0x200000d1
 80a2480:	200000cc 	.word	0x200000cc

080a2484 <loop>:
void loop() {
 80a2484:	b538      	push	{r3, r4, r5, lr}
    powered_on_tick();
 80a2486:	f7ff fec3 	bl	80a2210 <_Z15powered_on_tickv>
        for (int i = 0; i < NUM_BINS; i++) {
 80a248a:	2200      	movs	r2, #0
            if (bins.right[i] > SCREENSAVER_MINIMUM || bins.left[i] > SCREENSAVER_MINIMUM) {
 80a248c:	f240 5114 	movw	r1, #1300	; 0x514
 80a2490:	4b20      	ldr	r3, [pc, #128]	; (80a2514 <loop+0x90>)
 80a2492:	69dc      	ldr	r4, [r3, #28]
 80a2494:	4618      	mov	r0, r3
 80a2496:	428c      	cmp	r4, r1
 80a2498:	dc03      	bgt.n	80a24a2 <loop+0x1e>
 80a249a:	6800      	ldr	r0, [r0, #0]
 80a249c:	3304      	adds	r3, #4
 80a249e:	4288      	cmp	r0, r1
 80a24a0:	dd33      	ble.n	80a250a <loop+0x86>
                if (!psu_is_on) { psu_startup(); }
 80a24a2:	4b1d      	ldr	r3, [pc, #116]	; (80a2518 <loop+0x94>)
 80a24a4:	781b      	ldrb	r3, [r3, #0]
 80a24a6:	b90b      	cbnz	r3, 80a24ac <loop+0x28>
 80a24a8:	f7ff fee6 	bl	80a2278 <_Z11psu_startupv>
                last_sound_seconds = Time.now();
 80a24ac:	f002 fdfa 	bl	80a50a4 <_ZN9TimeClass3nowEv>
 80a24b0:	4b1a      	ldr	r3, [pc, #104]	; (80a251c <loop+0x98>)
 80a24b2:	6018      	str	r0, [r3, #0]
        if (Time.now()-last_sound_seconds > SCREENSAVER_SECS_TO_PSU_OFF) {
 80a24b4:	f002 fdf6 	bl	80a50a4 <_ZN9TimeClass3nowEv>
 80a24b8:	4b18      	ldr	r3, [pc, #96]	; (80a251c <loop+0x98>)
 80a24ba:	681b      	ldr	r3, [r3, #0]
 80a24bc:	1ac0      	subs	r0, r0, r3
 80a24be:	281e      	cmp	r0, #30
 80a24c0:	d904      	bls.n	80a24cc <loop+0x48>
            if (psu_is_on) { psu_shutdown(); }
 80a24c2:	4b15      	ldr	r3, [pc, #84]	; (80a2518 <loop+0x94>)
 80a24c4:	781b      	ldrb	r3, [r3, #0]
 80a24c6:	b10b      	cbz	r3, 80a24cc <loop+0x48>
 80a24c8:	f7ff ffc6 	bl	80a2458 <_Z12psu_shutdownv>
    tick_count++;
 80a24cc:	4c14      	ldr	r4, [pc, #80]	; (80a2520 <loop+0x9c>)
    if (millis() - last_tick_update >= 10000) {
 80a24ce:	4d15      	ldr	r5, [pc, #84]	; (80a2524 <loop+0xa0>)
    tick_count++;
 80a24d0:	6823      	ldr	r3, [r4, #0]
 80a24d2:	3301      	adds	r3, #1
 80a24d4:	6023      	str	r3, [r4, #0]
 80a24d6:	f001 facb 	bl	80a3a70 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - last_tick_update >= 10000) {
 80a24da:	682b      	ldr	r3, [r5, #0]
 80a24dc:	1ac0      	subs	r0, r0, r3
 80a24de:	f242 730f 	movw	r3, #9999	; 0x270f
 80a24e2:	4298      	cmp	r0, r3
 80a24e4:	d90c      	bls.n	80a2500 <loop+0x7c>
 80a24e6:	f001 fac3 	bl	80a3a70 <HAL_Timer_Get_Milli_Seconds>
        tick_count_publish = tick_count;
 80a24ea:	6822      	ldr	r2, [r4, #0]
 80a24ec:	4b0e      	ldr	r3, [pc, #56]	; (80a2528 <loop+0xa4>)
        last_tick_update = millis();
 80a24ee:	6028      	str	r0, [r5, #0]
        tick_count_publish = tick_count;
 80a24f0:	601a      	str	r2, [r3, #0]
        frame_count_publish = frame_count;
 80a24f2:	4b0e      	ldr	r3, [pc, #56]	; (80a252c <loop+0xa8>)
 80a24f4:	4a0e      	ldr	r2, [pc, #56]	; (80a2530 <loop+0xac>)
 80a24f6:	6819      	ldr	r1, [r3, #0]
 80a24f8:	6011      	str	r1, [r2, #0]
        tick_count = 0;
 80a24fa:	2200      	movs	r2, #0
 80a24fc:	6022      	str	r2, [r4, #0]
        frame_count = 0;
 80a24fe:	601a      	str	r2, [r3, #0]
    delay(1);
 80a2500:	2001      	movs	r0, #1
}
 80a2502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(1);
 80a2506:	f001 bd29 	b.w	80a3f5c <delay>
        for (int i = 0; i < NUM_BINS; i++) {
 80a250a:	3201      	adds	r2, #1
 80a250c:	2a07      	cmp	r2, #7
 80a250e:	d1c0      	bne.n	80a2492 <loop+0xe>
 80a2510:	e7d0      	b.n	80a24b4 <loop+0x30>
 80a2512:	bf00      	nop
 80a2514:	20000094 	.word	0x20000094
 80a2518:	200000d1 	.word	0x200000d1
 80a251c:	20000090 	.word	0x20000090
 80a2520:	20000e7c 	.word	0x20000e7c
 80a2524:	20000e78 	.word	0x20000e78
 80a2528:	20000e80 	.word	0x20000e80
 80a252c:	20000e68 	.word	0x20000e68
 80a2530:	20000e6c 	.word	0x20000e6c

080a2534 <_GLOBAL__sub_I_SystemMode>:
        val_(val) {
 80a2534:	2001      	movs	r0, #1
 80a2536:	4b0b      	ldr	r3, [pc, #44]	; (80a2564 <_GLOBAL__sub_I_SystemMode+0x30>)
}
 80a2538:	b510      	push	{r4, lr}
 80a253a:	7018      	strb	r0, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
 80a253c:	2300      	movs	r3, #0
 80a253e:	4c0a      	ldr	r4, [pc, #40]	; (80a2568 <_GLOBAL__sub_I_SystemMode+0x34>)
 80a2540:	6023      	str	r3, [r4, #0]
 80a2542:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
 80a2544:	71a3      	strb	r3, [r4, #6]
 80a2546:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80a254a:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a254c:	f001 fbfa 	bl	80a3d44 <set_system_mode>
SYSTEM_MODE(AUTOMATIC);
 80a2550:	4620      	mov	r0, r4
 80a2552:	4a06      	ldr	r2, [pc, #24]	; (80a256c <_GLOBAL__sub_I_SystemMode+0x38>)
 80a2554:	4906      	ldr	r1, [pc, #24]	; (80a2570 <_GLOBAL__sub_I_SystemMode+0x3c>)
 80a2556:	f003 f933 	bl	80a57c0 <__aeabi_atexit>
}
 80a255a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Beat_Detection beat_detect;
 80a255e:	4805      	ldr	r0, [pc, #20]	; (80a2574 <_GLOBAL__sub_I_SystemMode+0x40>)
 80a2560:	f7ff bc50 	b.w	80a1e04 <_ZN14Beat_DetectionC1Ev>
 80a2564:	200000d0 	.word	0x200000d0
 80a2568:	20000084 	.word	0x20000084
 80a256c:	2000006c 	.word	0x2000006c
 80a2570:	080a20ef 	.word	0x080a20ef
 80a2574:	200000d4 	.word	0x200000d4

080a2578 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Core or Photon ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) : 
 80a2578:	b538      	push	{r3, r4, r5, lr}
 80a257a:	4604      	mov	r4, r0
  numLEDs(n), numBytes(n*3), pin(p), brightness(0), pixels(NULL), type(t), endTime(0)
 80a257c:	2500      	movs	r5, #0
 80a257e:	8001      	strh	r1, [r0, #0]
 80a2580:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a2584:	b288      	uxth	r0, r1
 80a2586:	e9c4 5502 	strd	r5, r5, [r4, #8]
 80a258a:	8060      	strh	r0, [r4, #2]
 80a258c:	7123      	strb	r3, [r4, #4]
 80a258e:	7162      	strb	r2, [r4, #5]
 80a2590:	71a5      	strb	r5, [r4, #6]
{
  if((pixels = (uint8_t *)malloc(numBytes))) {
 80a2592:	f001 fcab 	bl	80a3eec <malloc>
 80a2596:	60a0      	str	r0, [r4, #8]
 80a2598:	b118      	cbz	r0, 80a25a2 <_ZN17Adafruit_NeoPixelC1Ethh+0x2a>
    memset(pixels, 0, numBytes);
 80a259a:	4629      	mov	r1, r5
 80a259c:	8862      	ldrh	r2, [r4, #2]
 80a259e:	f007 fe35 	bl	80aa20c <memset>
  }
}
 80a25a2:	4620      	mov	r0, r4
 80a25a4:	bd38      	pop	{r3, r4, r5, pc}

080a25a6 <_ZN17Adafruit_NeoPixel5beginEv>:
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if(pixels) free(pixels);
  pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::begin(void) {
 80a25a6:	b510      	push	{r4, lr}
 80a25a8:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a25aa:	2101      	movs	r1, #1
 80a25ac:	7940      	ldrb	r0, [r0, #5]
 80a25ae:	f003 f86d 	bl	80a568c <pinMode>
  digitalWrite(pin, LOW);
 80a25b2:	7960      	ldrb	r0, [r4, #5]
 80a25b4:	2100      	movs	r1, #0
}
 80a25b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(pin, LOW);
 80a25ba:	f003 b878 	b.w	80a56ae <digitalWrite>
	...

080a25c0 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a25c0:	6883      	ldr	r3, [r0, #8]
 80a25c2:	2b00      	cmp	r3, #0
 80a25c4:	f000 856f 	beq.w	80a30a6 <_ZN17Adafruit_NeoPixel4showEv+0xae6>
void Adafruit_NeoPixel::show(void) {
 80a25c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a25ca:	7903      	ldrb	r3, [r0, #4]
 80a25cc:	4604      	mov	r4, r0
 80a25ce:	2b03      	cmp	r3, #3
void Adafruit_NeoPixel::show(void) {
 80a25d0:	b087      	sub	sp, #28
  switch(type) {
 80a25d2:	f000 8287 	beq.w	80a2ae4 <_ZN17Adafruit_NeoPixel4showEv+0x524>
 80a25d6:	2b04      	cmp	r3, #4
 80a25d8:	bf14      	ite	ne
 80a25da:	2532      	movne	r5, #50	; 0x32
 80a25dc:	f44f 75fa 	moveq.w	r5, #500	; 0x1f4
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a25e0:	f001 fa3e 	bl	80a3a60 <HAL_Timer_Get_Micro_Seconds>
    case WS2811: // WS2811 = 50us reset pulse
    default:     // default = 50us reset pulse
      wait_time = 50L;
      break;
  }
  while((micros() - endTime) < wait_time);
 80a25e4:	68e3      	ldr	r3, [r4, #12]
 80a25e6:	1ac0      	subs	r0, r0, r3
 80a25e8:	42a8      	cmp	r0, r5
 80a25ea:	d3f9      	bcc.n	80a25e0 <_ZN17Adafruit_NeoPixel4showEv+0x20>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a25ec:	b672      	cpsid	i
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit pixel color
    mask; // 8-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a25ee:	8863      	ldrh	r3, [r4, #2]
   *ptr = pixels,   // Pointer to next byte
    g,              // Current green byte value
    r,              // Current red byte value
    b;              // Current blue byte value

  if(type == WS2812B) { // same as WS2812, 800 KHz bitstream
 80a25f0:	7921      	ldrb	r1, [r4, #4]
  volatile uint16_t i = numBytes; // Output loop counter
 80a25f2:	f8ad 300a 	strh.w	r3, [sp, #10]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a25f6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  if(type == WS2812B) { // same as WS2812, 800 KHz bitstream
 80a25fa:	2902      	cmp	r1, #2
   *ptr = pixels,   // Pointer to next byte
 80a25fc:	68a5      	ldr	r5, [r4, #8]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a25fe:	b29b      	uxth	r3, r3
  if(type == WS2812B) { // same as WS2812, 800 KHz bitstream
 80a2600:	f000 813a 	beq.w	80a2878 <_ZN17Adafruit_NeoPixel4showEv+0x2b8>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2) { // WS2812B with DWT timer
 80a2604:	2905      	cmp	r1, #5
 80a2606:	f000 826f 	beq.w	80a2ae8 <_ZN17Adafruit_NeoPixel4showEv+0x528>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a260a:	2900      	cmp	r1, #0
 80a260c:	f000 82e5 	beq.w	80a2bda <_ZN17Adafruit_NeoPixel4showEv+0x61a>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a2610:	2903      	cmp	r1, #3
 80a2612:	f000 8549 	beq.w	80a30a8 <_ZN17Adafruit_NeoPixel4showEv+0xae8>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2616:	2b00      	cmp	r3, #0
 80a2618:	f000 8128 	beq.w	80a286c <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a261c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a2620:	2600      	movs	r6, #0
 80a2622:	4a18      	ldr	r2, [pc, #96]	; (80a2684 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
      mask = 0x800000; // reset the mask
 80a2624:	9104      	str	r1, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a2626:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      pinSet(pin, LOW); // LOW
 80a262a:	7960      	ldrb	r0, [r4, #5]
      i = i-3;      // decrement bytes remaining
 80a262c:	3b03      	subs	r3, #3
 80a262e:	b29b      	uxth	r3, r3
 80a2630:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a2634:	782b      	ldrb	r3, [r5, #0]
      pinSet(pin, LOW); // LOW
 80a2636:	6817      	ldr	r7, [r2, #0]
      r = *ptr++;   // Next red byte value
 80a2638:	b2db      	uxtb	r3, r3
 80a263a:	f88d 3008 	strb.w	r3, [sp, #8]
      b = *ptr++;   // Next blue byte value
 80a263e:	786b      	ldrb	r3, [r5, #1]
      pinSet(pin, LOW); // LOW
 80a2640:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
      b = *ptr++;   // Next blue byte value
 80a2644:	b2db      	uxtb	r3, r3
 80a2646:	f88d 3009 	strb.w	r3, [sp, #9]
      g = *ptr++;   // Next green byte value
 80a264a:	78ab      	ldrb	r3, [r5, #2]
      pinSet(pin, LOW); // LOW
 80a264c:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
      g = *ptr++;   // Next green byte value
 80a2650:	b2db      	uxtb	r3, r3
 80a2652:	f88d 3007 	strb.w	r3, [sp, #7]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a2656:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a265a:	f89d 3009 	ldrb.w	r3, [sp, #9]
      pinSet(pin, LOW); // LOW
 80a265e:	f8bc c004 	ldrh.w	ip, [ip, #4]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a2662:	021b      	lsls	r3, r3, #8
 80a2664:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80a2668:	f89d e007 	ldrb.w	lr, [sp, #7]
      pinSet(pin, LOW); // LOW
 80a266c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a2670:	ea43 030e 	orr.w	r3, r3, lr
 80a2674:	9303      	str	r3, [sp, #12]
      g = *ptr++;   // Next green byte value
 80a2676:	3503      	adds	r5, #3
      j = 0;        // reset the 24-bit counter
 80a2678:	f88d 6006 	strb.w	r6, [sp, #6]
      pinSet(pin, LOW); // LOW
 80a267c:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a2680:	e07d      	b.n	80a277e <_ZN17Adafruit_NeoPixel4showEv+0x1be>
 80a2682:	bf00      	nop
 80a2684:	20000e84 	.word	0x20000e84
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a2688:	9b04      	ldr	r3, [sp, #16]
 80a268a:	085b      	lsrs	r3, r3, #1
 80a268c:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a268e:	4600      	mov	r0, r0
 80a2690:	bf00      	nop
 80a2692:	bf00      	nop
 80a2694:	bf00      	nop
 80a2696:	bf00      	nop
 80a2698:	bf00      	nop
 80a269a:	bf00      	nop
 80a269c:	bf00      	nop
 80a269e:	bf00      	nop
 80a26a0:	bf00      	nop
 80a26a2:	bf00      	nop
 80a26a4:	bf00      	nop
 80a26a6:	bf00      	nop
 80a26a8:	bf00      	nop
 80a26aa:	bf00      	nop
 80a26ac:	bf00      	nop
 80a26ae:	bf00      	nop
 80a26b0:	bf00      	nop
 80a26b2:	bf00      	nop
 80a26b4:	bf00      	nop
 80a26b6:	bf00      	nop
 80a26b8:	bf00      	nop
 80a26ba:	bf00      	nop
 80a26bc:	bf00      	nop
 80a26be:	bf00      	nop
 80a26c0:	bf00      	nop
 80a26c2:	bf00      	nop
 80a26c4:	bf00      	nop
 80a26c6:	bf00      	nop
 80a26c8:	bf00      	nop
 80a26ca:	bf00      	nop
 80a26cc:	bf00      	nop
 80a26ce:	bf00      	nop
 80a26d0:	bf00      	nop
 80a26d2:	bf00      	nop
 80a26d4:	bf00      	nop
 80a26d6:	bf00      	nop
 80a26d8:	bf00      	nop
 80a26da:	bf00      	nop
 80a26dc:	bf00      	nop
 80a26de:	bf00      	nop
 80a26e0:	bf00      	nop
 80a26e2:	bf00      	nop
 80a26e4:	bf00      	nop
 80a26e6:	bf00      	nop
 80a26e8:	bf00      	nop
 80a26ea:	bf00      	nop
 80a26ec:	bf00      	nop
 80a26ee:	bf00      	nop
 80a26f0:	bf00      	nop
 80a26f2:	bf00      	nop
 80a26f4:	bf00      	nop
 80a26f6:	bf00      	nop
 80a26f8:	bf00      	nop
 80a26fa:	bf00      	nop
 80a26fc:	bf00      	nop
 80a26fe:	bf00      	nop
 80a2700:	bf00      	nop
 80a2702:	bf00      	nop
 80a2704:	bf00      	nop
 80a2706:	bf00      	nop
 80a2708:	bf00      	nop
 80a270a:	bf00      	nop
 80a270c:	bf00      	nop
 80a270e:	bf00      	nop
 80a2710:	bf00      	nop
 80a2712:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a2714:	7960      	ldrb	r0, [r4, #5]
 80a2716:	6817      	ldr	r7, [r2, #0]
          j++;
 80a2718:	f89d 3006 	ldrb.w	r3, [sp, #6]
          pinSet(pin, HIGH); // HIGH
 80a271c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a2720:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
 80a2724:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a2728:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
          j++;
 80a272c:	3301      	adds	r3, #1
 80a272e:	b2db      	uxtb	r3, r3
 80a2730:	f88d 3006 	strb.w	r3, [sp, #6]
          pinSet(pin, HIGH); // HIGH
 80a2734:	f8a0 c018 	strh.w	ip, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2738:	4600      	mov	r0, r0
 80a273a:	bf00      	nop
 80a273c:	bf00      	nop
 80a273e:	bf00      	nop
 80a2740:	bf00      	nop
 80a2742:	bf00      	nop
 80a2744:	bf00      	nop
 80a2746:	bf00      	nop
 80a2748:	bf00      	nop
 80a274a:	bf00      	nop
 80a274c:	bf00      	nop
 80a274e:	bf00      	nop
 80a2750:	bf00      	nop
 80a2752:	bf00      	nop
 80a2754:	bf00      	nop
 80a2756:	bf00      	nop
 80a2758:	bf00      	nop
 80a275a:	bf00      	nop
 80a275c:	bf00      	nop
 80a275e:	bf00      	nop
 80a2760:	bf00      	nop
          if(j==24) break;
 80a2762:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a2766:	2b18      	cmp	r3, #24
 80a2768:	d07a      	beq.n	80a2860 <_ZN17Adafruit_NeoPixel4showEv+0x2a0>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a276a:	7963      	ldrb	r3, [r4, #5]
 80a276c:	6810      	ldr	r0, [r2, #0]
 80a276e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2772:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2776:	88bf      	ldrh	r7, [r7, #4]
 80a2778:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a277c:	835f      	strh	r7, [r3, #26]
        if (c & mask) { // if masked bit is high
 80a277e:	9803      	ldr	r0, [sp, #12]
 80a2780:	9b04      	ldr	r3, [sp, #16]
 80a2782:	4218      	tst	r0, r3
 80a2784:	d180      	bne.n	80a2688 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            ::: "r0", "cc", "memory");
 80a2786:	4600      	mov	r0, r0
 80a2788:	bf00      	nop
 80a278a:	bf00      	nop
 80a278c:	bf00      	nop
 80a278e:	bf00      	nop
 80a2790:	bf00      	nop
 80a2792:	bf00      	nop
 80a2794:	bf00      	nop
 80a2796:	bf00      	nop
 80a2798:	bf00      	nop
 80a279a:	bf00      	nop
 80a279c:	bf00      	nop
 80a279e:	bf00      	nop
 80a27a0:	bf00      	nop
 80a27a2:	bf00      	nop
 80a27a4:	bf00      	nop
 80a27a6:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a27a8:	7963      	ldrb	r3, [r4, #5]
 80a27aa:	6810      	ldr	r0, [r2, #0]
 80a27ac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a27b0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a27b4:	88bf      	ldrh	r7, [r7, #4]
 80a27b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a27ba:	831f      	strh	r7, [r3, #24]
          j++;
 80a27bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a27c0:	3301      	adds	r3, #1
 80a27c2:	b2db      	uxtb	r3, r3
 80a27c4:	f88d 3006 	strb.w	r3, [sp, #6]
          mask >>= 1; // Do this task during the long delay of this bit
 80a27c8:	9b04      	ldr	r3, [sp, #16]
 80a27ca:	085b      	lsrs	r3, r3, #1
 80a27cc:	9304      	str	r3, [sp, #16]
            ::: "r0", "cc", "memory");
 80a27ce:	4600      	mov	r0, r0
 80a27d0:	bf00      	nop
 80a27d2:	bf00      	nop
 80a27d4:	bf00      	nop
 80a27d6:	bf00      	nop
 80a27d8:	bf00      	nop
 80a27da:	bf00      	nop
 80a27dc:	bf00      	nop
 80a27de:	bf00      	nop
 80a27e0:	bf00      	nop
 80a27e2:	bf00      	nop
 80a27e4:	bf00      	nop
 80a27e6:	bf00      	nop
 80a27e8:	bf00      	nop
 80a27ea:	bf00      	nop
 80a27ec:	bf00      	nop
 80a27ee:	bf00      	nop
 80a27f0:	bf00      	nop
 80a27f2:	bf00      	nop
 80a27f4:	bf00      	nop
 80a27f6:	bf00      	nop
 80a27f8:	bf00      	nop
 80a27fa:	bf00      	nop
 80a27fc:	bf00      	nop
 80a27fe:	bf00      	nop
 80a2800:	bf00      	nop
 80a2802:	bf00      	nop
 80a2804:	bf00      	nop
 80a2806:	bf00      	nop
 80a2808:	bf00      	nop
 80a280a:	bf00      	nop
 80a280c:	bf00      	nop
 80a280e:	bf00      	nop
 80a2810:	bf00      	nop
 80a2812:	bf00      	nop
 80a2814:	bf00      	nop
 80a2816:	bf00      	nop
 80a2818:	bf00      	nop
 80a281a:	bf00      	nop
 80a281c:	bf00      	nop
 80a281e:	bf00      	nop
 80a2820:	bf00      	nop
 80a2822:	bf00      	nop
 80a2824:	bf00      	nop
 80a2826:	bf00      	nop
 80a2828:	bf00      	nop
 80a282a:	bf00      	nop
 80a282c:	bf00      	nop
 80a282e:	bf00      	nop
 80a2830:	bf00      	nop
 80a2832:	bf00      	nop
 80a2834:	bf00      	nop
 80a2836:	bf00      	nop
 80a2838:	bf00      	nop
 80a283a:	bf00      	nop
 80a283c:	bf00      	nop
 80a283e:	bf00      	nop
 80a2840:	bf00      	nop
 80a2842:	bf00      	nop
 80a2844:	bf00      	nop
 80a2846:	bf00      	nop
 80a2848:	bf00      	nop
 80a284a:	bf00      	nop
 80a284c:	bf00      	nop
 80a284e:	bf00      	nop
 80a2850:	bf00      	nop
 80a2852:	bf00      	nop
 80a2854:	bf00      	nop
 80a2856:	bf00      	nop
          if(j==24) break;
 80a2858:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a285c:	2b18      	cmp	r3, #24
 80a285e:	d184      	bne.n	80a276a <_ZN17Adafruit_NeoPixel4showEv+0x1aa>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2860:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a2864:	b29b      	uxth	r3, r3
 80a2866:	2b00      	cmp	r3, #0
 80a2868:	f47f aedc 	bne.w	80a2624 <_ZN17Adafruit_NeoPixel4showEv+0x64>
  __ASM volatile ("cpsie i");
 80a286c:	b662      	cpsie	i
 80a286e:	f001 f8f7 	bl	80a3a60 <HAL_Timer_Get_Micro_Seconds>
      }
    } // end while(i) ... no more pixels
  }

  __enable_irq();
  endTime = micros(); // Save EOD time for latch on next call
 80a2872:	60e0      	str	r0, [r4, #12]
}
 80a2874:	b007      	add	sp, #28
 80a2876:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2878:	2b00      	cmp	r3, #0
 80a287a:	d0f7      	beq.n	80a286c <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a287c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a2880:	2600      	movs	r6, #0
 80a2882:	4a13      	ldr	r2, [pc, #76]	; (80a28d0 <_ZN17Adafruit_NeoPixel4showEv+0x310>)
      mask = 0x800000; // reset the mask
 80a2884:	9104      	str	r1, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a2886:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a288a:	3503      	adds	r5, #3
      i = i-3;      // decrement bytes remaining
 80a288c:	3b03      	subs	r3, #3
 80a288e:	b29b      	uxth	r3, r3
 80a2890:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a2894:	f815 3c03 	ldrb.w	r3, [r5, #-3]
 80a2898:	b2db      	uxtb	r3, r3
 80a289a:	f88d 3007 	strb.w	r3, [sp, #7]
      r = *ptr++;   // Next red byte value
 80a289e:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 80a28a2:	b2db      	uxtb	r3, r3
 80a28a4:	f88d 3008 	strb.w	r3, [sp, #8]
      b = *ptr++;   // Next blue byte value
 80a28a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80a28ac:	b2db      	uxtb	r3, r3
 80a28ae:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a28b2:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a28b6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80a28ba:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a28be:	021b      	lsls	r3, r3, #8
 80a28c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a28c4:	4303      	orrs	r3, r0
 80a28c6:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a28c8:	f88d 6006 	strb.w	r6, [sp, #6]
 80a28cc:	e080      	b.n	80a29d0 <_ZN17Adafruit_NeoPixel4showEv+0x410>
 80a28ce:	bf00      	nop
 80a28d0:	20000e84 	.word	0x20000e84
            ::: "r0", "cc", "memory");
 80a28d4:	4600      	mov	r0, r0
 80a28d6:	bf00      	nop
 80a28d8:	bf00      	nop
 80a28da:	bf00      	nop
 80a28dc:	bf00      	nop
 80a28de:	bf00      	nop
 80a28e0:	bf00      	nop
 80a28e2:	bf00      	nop
 80a28e4:	bf00      	nop
 80a28e6:	bf00      	nop
 80a28e8:	bf00      	nop
 80a28ea:	bf00      	nop
 80a28ec:	bf00      	nop
 80a28ee:	bf00      	nop
 80a28f0:	bf00      	nop
 80a28f2:	bf00      	nop
 80a28f4:	bf00      	nop
 80a28f6:	bf00      	nop
 80a28f8:	bf00      	nop
 80a28fa:	bf00      	nop
 80a28fc:	bf00      	nop
 80a28fe:	bf00      	nop
 80a2900:	bf00      	nop
 80a2902:	bf00      	nop
 80a2904:	bf00      	nop
 80a2906:	bf00      	nop
 80a2908:	bf00      	nop
 80a290a:	bf00      	nop
 80a290c:	bf00      	nop
 80a290e:	bf00      	nop
 80a2910:	bf00      	nop
 80a2912:	bf00      	nop
 80a2914:	bf00      	nop
 80a2916:	bf00      	nop
 80a2918:	bf00      	nop
 80a291a:	bf00      	nop
 80a291c:	bf00      	nop
 80a291e:	bf00      	nop
 80a2920:	bf00      	nop
 80a2922:	bf00      	nop
 80a2924:	bf00      	nop
 80a2926:	bf00      	nop
 80a2928:	bf00      	nop
 80a292a:	bf00      	nop
 80a292c:	bf00      	nop
 80a292e:	bf00      	nop
 80a2930:	bf00      	nop
 80a2932:	bf00      	nop
 80a2934:	bf00      	nop
 80a2936:	bf00      	nop
 80a2938:	bf00      	nop
 80a293a:	bf00      	nop
 80a293c:	bf00      	nop
 80a293e:	bf00      	nop
 80a2940:	bf00      	nop
 80a2942:	bf00      	nop
 80a2944:	bf00      	nop
 80a2946:	bf00      	nop
 80a2948:	bf00      	nop
 80a294a:	bf00      	nop
 80a294c:	bf00      	nop
 80a294e:	bf00      	nop
 80a2950:	bf00      	nop
 80a2952:	bf00      	nop
 80a2954:	bf00      	nop
 80a2956:	bf00      	nop
 80a2958:	bf00      	nop
 80a295a:	bf00      	nop
 80a295c:	bf00      	nop
 80a295e:	bf00      	nop
 80a2960:	bf00      	nop
 80a2962:	bf00      	nop
 80a2964:	bf00      	nop
 80a2966:	bf00      	nop
 80a2968:	bf00      	nop
 80a296a:	bf00      	nop
 80a296c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a296e:	7963      	ldrb	r3, [r4, #5]
 80a2970:	6810      	ldr	r0, [r2, #0]
 80a2972:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2976:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a297a:	88bf      	ldrh	r7, [r7, #4]
 80a297c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2980:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a2982:	4600      	mov	r0, r0
 80a2984:	bf00      	nop
 80a2986:	bf00      	nop
 80a2988:	bf00      	nop
 80a298a:	bf00      	nop
 80a298c:	bf00      	nop
 80a298e:	bf00      	nop
 80a2990:	bf00      	nop
 80a2992:	bf00      	nop
 80a2994:	bf00      	nop
 80a2996:	bf00      	nop
 80a2998:	bf00      	nop
 80a299a:	bf00      	nop
 80a299c:	bf00      	nop
 80a299e:	bf00      	nop
 80a29a0:	bf00      	nop
 80a29a2:	bf00      	nop
 80a29a4:	bf00      	nop
 80a29a6:	bf00      	nop
 80a29a8:	bf00      	nop
 80a29aa:	bf00      	nop
 80a29ac:	bf00      	nop
 80a29ae:	bf00      	nop
 80a29b0:	bf00      	nop
 80a29b2:	bf00      	nop
 80a29b4:	bf00      	nop
 80a29b6:	bf00      	nop
        mask >>= 1;
 80a29b8:	9b04      	ldr	r3, [sp, #16]
 80a29ba:	085b      	lsrs	r3, r3, #1
 80a29bc:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a29be:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a29c2:	3301      	adds	r3, #1
 80a29c4:	b2db      	uxtb	r3, r3
 80a29c6:	2b17      	cmp	r3, #23
 80a29c8:	f88d 3006 	strb.w	r3, [sp, #6]
 80a29cc:	f200 8083 	bhi.w	80a2ad6 <_ZN17Adafruit_NeoPixel4showEv+0x516>
        pinSet(pin, HIGH); // HIGH
 80a29d0:	7963      	ldrb	r3, [r4, #5]
 80a29d2:	6810      	ldr	r0, [r2, #0]
 80a29d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a29d8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a29dc:	88bf      	ldrh	r7, [r7, #4]
 80a29de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a29e2:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a29e4:	9803      	ldr	r0, [sp, #12]
 80a29e6:	9b04      	ldr	r3, [sp, #16]
 80a29e8:	4218      	tst	r0, r3
 80a29ea:	f47f af73 	bne.w	80a28d4 <_ZN17Adafruit_NeoPixel4showEv+0x314>
            ::: "r0", "cc", "memory");
 80a29ee:	4600      	mov	r0, r0
 80a29f0:	bf00      	nop
 80a29f2:	bf00      	nop
 80a29f4:	bf00      	nop
 80a29f6:	bf00      	nop
 80a29f8:	bf00      	nop
 80a29fa:	bf00      	nop
 80a29fc:	bf00      	nop
 80a29fe:	bf00      	nop
 80a2a00:	bf00      	nop
 80a2a02:	bf00      	nop
 80a2a04:	bf00      	nop
 80a2a06:	bf00      	nop
 80a2a08:	bf00      	nop
 80a2a0a:	bf00      	nop
 80a2a0c:	bf00      	nop
 80a2a0e:	bf00      	nop
 80a2a10:	bf00      	nop
 80a2a12:	bf00      	nop
 80a2a14:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a2a16:	7963      	ldrb	r3, [r4, #5]
 80a2a18:	6810      	ldr	r0, [r2, #0]
 80a2a1a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2a1e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2a22:	88bf      	ldrh	r7, [r7, #4]
 80a2a24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2a28:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a2a2a:	4600      	mov	r0, r0
 80a2a2c:	bf00      	nop
 80a2a2e:	bf00      	nop
 80a2a30:	bf00      	nop
 80a2a32:	bf00      	nop
 80a2a34:	bf00      	nop
 80a2a36:	bf00      	nop
 80a2a38:	bf00      	nop
 80a2a3a:	bf00      	nop
 80a2a3c:	bf00      	nop
 80a2a3e:	bf00      	nop
 80a2a40:	bf00      	nop
 80a2a42:	bf00      	nop
 80a2a44:	bf00      	nop
 80a2a46:	bf00      	nop
 80a2a48:	bf00      	nop
 80a2a4a:	bf00      	nop
 80a2a4c:	bf00      	nop
 80a2a4e:	bf00      	nop
 80a2a50:	bf00      	nop
 80a2a52:	bf00      	nop
 80a2a54:	bf00      	nop
 80a2a56:	bf00      	nop
 80a2a58:	bf00      	nop
 80a2a5a:	bf00      	nop
 80a2a5c:	bf00      	nop
 80a2a5e:	bf00      	nop
 80a2a60:	bf00      	nop
 80a2a62:	bf00      	nop
 80a2a64:	bf00      	nop
 80a2a66:	bf00      	nop
 80a2a68:	bf00      	nop
 80a2a6a:	bf00      	nop
 80a2a6c:	bf00      	nop
 80a2a6e:	bf00      	nop
 80a2a70:	bf00      	nop
 80a2a72:	bf00      	nop
 80a2a74:	bf00      	nop
 80a2a76:	bf00      	nop
 80a2a78:	bf00      	nop
 80a2a7a:	bf00      	nop
 80a2a7c:	bf00      	nop
 80a2a7e:	bf00      	nop
 80a2a80:	bf00      	nop
 80a2a82:	bf00      	nop
 80a2a84:	bf00      	nop
 80a2a86:	bf00      	nop
 80a2a88:	bf00      	nop
 80a2a8a:	bf00      	nop
 80a2a8c:	bf00      	nop
 80a2a8e:	bf00      	nop
 80a2a90:	bf00      	nop
 80a2a92:	bf00      	nop
 80a2a94:	bf00      	nop
 80a2a96:	bf00      	nop
 80a2a98:	bf00      	nop
 80a2a9a:	bf00      	nop
 80a2a9c:	bf00      	nop
 80a2a9e:	bf00      	nop
 80a2aa0:	bf00      	nop
 80a2aa2:	bf00      	nop
 80a2aa4:	bf00      	nop
 80a2aa6:	bf00      	nop
 80a2aa8:	bf00      	nop
 80a2aaa:	bf00      	nop
 80a2aac:	bf00      	nop
 80a2aae:	bf00      	nop
 80a2ab0:	bf00      	nop
 80a2ab2:	bf00      	nop
 80a2ab4:	bf00      	nop
 80a2ab6:	bf00      	nop
 80a2ab8:	bf00      	nop
 80a2aba:	bf00      	nop
 80a2abc:	bf00      	nop
 80a2abe:	bf00      	nop
 80a2ac0:	bf00      	nop
 80a2ac2:	bf00      	nop
 80a2ac4:	bf00      	nop
 80a2ac6:	bf00      	nop
 80a2ac8:	bf00      	nop
 80a2aca:	bf00      	nop
 80a2acc:	bf00      	nop
 80a2ace:	bf00      	nop
 80a2ad0:	bf00      	nop
 80a2ad2:	bf00      	nop
 80a2ad4:	e770      	b.n	80a29b8 <_ZN17Adafruit_NeoPixel4showEv+0x3f8>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2ad6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a2ada:	b29b      	uxth	r3, r3
 80a2adc:	2b00      	cmp	r3, #0
 80a2ade:	f47f aed1 	bne.w	80a2884 <_ZN17Adafruit_NeoPixel4showEv+0x2c4>
 80a2ae2:	e6c3      	b.n	80a286c <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      wait_time = 24L;
 80a2ae4:	2518      	movs	r5, #24
 80a2ae6:	e57b      	b.n	80a25e0 <_ZN17Adafruit_NeoPixel4showEv+0x20>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2ae8:	2b00      	cmp	r3, #0
 80a2aea:	f43f aebf 	beq.w	80a286c <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a2aee:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a2af2:	2600      	movs	r6, #0
        pinSet(pin, HIGH); // HIGH
 80a2af4:	4b4e      	ldr	r3, [pc, #312]	; (80a2c30 <_ZN17Adafruit_NeoPixel4showEv+0x670>)
 80a2af6:	6819      	ldr	r1, [r3, #0]
        cyc = DWT->CYCCNT;
 80a2af8:	4b4e      	ldr	r3, [pc, #312]	; (80a2c34 <_ZN17Adafruit_NeoPixel4showEv+0x674>)
      mask = 0x800000; // reset the mask
 80a2afa:	f8cd e010 	str.w	lr, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a2afe:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a2b02:	3503      	adds	r5, #3
      i = i-3;      // decrement bytes remaining
 80a2b04:	3a03      	subs	r2, #3
 80a2b06:	b292      	uxth	r2, r2
 80a2b08:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a2b0c:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 80a2b10:	b2d2      	uxtb	r2, r2
 80a2b12:	f88d 2007 	strb.w	r2, [sp, #7]
      r = *ptr++;   // Next red byte value
 80a2b16:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80a2b1a:	b2d2      	uxtb	r2, r2
 80a2b1c:	f88d 2008 	strb.w	r2, [sp, #8]
      b = *ptr++;   // Next blue byte value
 80a2b20:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80a2b24:	b2d2      	uxtb	r2, r2
 80a2b26:	f88d 2009 	strb.w	r2, [sp, #9]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a2b2a:	f89d c007 	ldrb.w	ip, [sp, #7]
 80a2b2e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80a2b32:	f89d 7009 	ldrb.w	r7, [sp, #9]
 80a2b36:	0212      	lsls	r2, r2, #8
 80a2b38:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80a2b3c:	433a      	orrs	r2, r7
 80a2b3e:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a2b40:	f88d 6006 	strb.w	r6, [sp, #6]
        pinSet(pin, HIGH); // HIGH
 80a2b44:	7962      	ldrb	r2, [r4, #5]
        cyc = DWT->CYCCNT;
 80a2b46:	6858      	ldr	r0, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a2b48:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a2b4c:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 80a2b50:	88bf      	ldrh	r7, [r7, #4]
 80a2b52:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
        cyc = DWT->CYCCNT;
 80a2b56:	9005      	str	r0, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a2b58:	8317      	strh	r7, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a2b5a:	9f03      	ldr	r7, [sp, #12]
 80a2b5c:	9a04      	ldr	r2, [sp, #16]
 80a2b5e:	4217      	tst	r7, r2
 80a2b60:	d025      	beq.n	80a2bae <_ZN17Adafruit_NeoPixel4showEv+0x5ee>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a2b62:	685a      	ldr	r2, [r3, #4]
 80a2b64:	9f05      	ldr	r7, [sp, #20]
 80a2b66:	1bd2      	subs	r2, r2, r7
 80a2b68:	2a4f      	cmp	r2, #79	; 0x4f
 80a2b6a:	d9fa      	bls.n	80a2b62 <_ZN17Adafruit_NeoPixel4showEv+0x5a2>
          pinSet(pin, LOW);
 80a2b6c:	7962      	ldrb	r2, [r4, #5]
 80a2b6e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a2b72:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 80a2b76:	88bf      	ldrh	r7, [r7, #4]
 80a2b78:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a2b7c:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a2b7e:	685a      	ldr	r2, [r3, #4]
 80a2b80:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a2b82:	685a      	ldr	r2, [r3, #4]
 80a2b84:	9f05      	ldr	r7, [sp, #20]
 80a2b86:	1bd2      	subs	r2, r2, r7
 80a2b88:	2a07      	cmp	r2, #7
 80a2b8a:	d9fa      	bls.n	80a2b82 <_ZN17Adafruit_NeoPixel4showEv+0x5c2>
        mask >>= 1;
 80a2b8c:	9a04      	ldr	r2, [sp, #16]
 80a2b8e:	0852      	lsrs	r2, r2, #1
 80a2b90:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a2b92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a2b96:	3201      	adds	r2, #1
 80a2b98:	b2d2      	uxtb	r2, r2
 80a2b9a:	2a17      	cmp	r2, #23
 80a2b9c:	f88d 2006 	strb.w	r2, [sp, #6]
 80a2ba0:	d9d0      	bls.n	80a2b44 <_ZN17Adafruit_NeoPixel4showEv+0x584>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2ba2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a2ba6:	b292      	uxth	r2, r2
 80a2ba8:	2a00      	cmp	r2, #0
 80a2baa:	d1a6      	bne.n	80a2afa <_ZN17Adafruit_NeoPixel4showEv+0x53a>
 80a2bac:	e65e      	b.n	80a286c <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a2bae:	685a      	ldr	r2, [r3, #4]
 80a2bb0:	9f05      	ldr	r7, [sp, #20]
 80a2bb2:	1bd2      	subs	r2, r2, r7
 80a2bb4:	2a18      	cmp	r2, #24
 80a2bb6:	d9fa      	bls.n	80a2bae <_ZN17Adafruit_NeoPixel4showEv+0x5ee>
          pinSet(pin, LOW);
 80a2bb8:	7962      	ldrb	r2, [r4, #5]
 80a2bba:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a2bbe:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 80a2bc2:	88bf      	ldrh	r7, [r7, #4]
 80a2bc4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a2bc8:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a2bca:	685a      	ldr	r2, [r3, #4]
 80a2bcc:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a2bce:	685a      	ldr	r2, [r3, #4]
 80a2bd0:	9f05      	ldr	r7, [sp, #20]
 80a2bd2:	1bd2      	subs	r2, r2, r7
 80a2bd4:	2a45      	cmp	r2, #69	; 0x45
 80a2bd6:	d9fa      	bls.n	80a2bce <_ZN17Adafruit_NeoPixel4showEv+0x60e>
 80a2bd8:	e7d8      	b.n	80a2b8c <_ZN17Adafruit_NeoPixel4showEv+0x5cc>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2bda:	2b00      	cmp	r3, #0
 80a2bdc:	f43f ae46 	beq.w	80a286c <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a2be0:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 80a2be4:	4a12      	ldr	r2, [pc, #72]	; (80a2c30 <_ZN17Adafruit_NeoPixel4showEv+0x670>)
 80a2be6:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a2be8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a2bec:	3503      	adds	r5, #3
      i = i-3;      // decrement bytes remaining
 80a2bee:	3b03      	subs	r3, #3
 80a2bf0:	b29b      	uxth	r3, r3
 80a2bf2:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a2bf6:	f815 3c03 	ldrb.w	r3, [r5, #-3]
 80a2bfa:	b2db      	uxtb	r3, r3
 80a2bfc:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a2c00:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 80a2c04:	b2db      	uxtb	r3, r3
 80a2c06:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a2c0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80a2c0e:	b2db      	uxtb	r3, r3
 80a2c10:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a2c14:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a2c18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a2c1c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a2c20:	021b      	lsls	r3, r3, #8
 80a2c22:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a2c26:	4303      	orrs	r3, r0
 80a2c28:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a2c2a:	f88d 1006 	strb.w	r1, [sp, #6]
 80a2c2e:	e11a      	b.n	80a2e66 <_ZN17Adafruit_NeoPixel4showEv+0x8a6>
 80a2c30:	20000e84 	.word	0x20000e84
 80a2c34:	e0001000 	.word	0xe0001000
            ::: "r0", "cc", "memory");
 80a2c38:	4600      	mov	r0, r0
 80a2c3a:	bf00      	nop
 80a2c3c:	bf00      	nop
 80a2c3e:	bf00      	nop
 80a2c40:	bf00      	nop
 80a2c42:	bf00      	nop
 80a2c44:	bf00      	nop
 80a2c46:	bf00      	nop
 80a2c48:	bf00      	nop
 80a2c4a:	bf00      	nop
 80a2c4c:	bf00      	nop
 80a2c4e:	bf00      	nop
 80a2c50:	bf00      	nop
 80a2c52:	bf00      	nop
 80a2c54:	bf00      	nop
 80a2c56:	bf00      	nop
 80a2c58:	bf00      	nop
 80a2c5a:	bf00      	nop
 80a2c5c:	bf00      	nop
 80a2c5e:	bf00      	nop
 80a2c60:	bf00      	nop
 80a2c62:	bf00      	nop
 80a2c64:	bf00      	nop
 80a2c66:	bf00      	nop
 80a2c68:	bf00      	nop
 80a2c6a:	bf00      	nop
 80a2c6c:	bf00      	nop
 80a2c6e:	bf00      	nop
 80a2c70:	bf00      	nop
 80a2c72:	bf00      	nop
 80a2c74:	bf00      	nop
 80a2c76:	bf00      	nop
 80a2c78:	bf00      	nop
 80a2c7a:	bf00      	nop
 80a2c7c:	bf00      	nop
 80a2c7e:	bf00      	nop
 80a2c80:	bf00      	nop
 80a2c82:	bf00      	nop
 80a2c84:	bf00      	nop
 80a2c86:	bf00      	nop
 80a2c88:	bf00      	nop
 80a2c8a:	bf00      	nop
 80a2c8c:	bf00      	nop
 80a2c8e:	bf00      	nop
 80a2c90:	bf00      	nop
 80a2c92:	bf00      	nop
 80a2c94:	bf00      	nop
 80a2c96:	bf00      	nop
 80a2c98:	bf00      	nop
 80a2c9a:	bf00      	nop
 80a2c9c:	bf00      	nop
 80a2c9e:	bf00      	nop
 80a2ca0:	bf00      	nop
 80a2ca2:	bf00      	nop
 80a2ca4:	bf00      	nop
 80a2ca6:	bf00      	nop
 80a2ca8:	bf00      	nop
 80a2caa:	bf00      	nop
 80a2cac:	bf00      	nop
 80a2cae:	bf00      	nop
 80a2cb0:	bf00      	nop
 80a2cb2:	bf00      	nop
 80a2cb4:	bf00      	nop
 80a2cb6:	bf00      	nop
 80a2cb8:	bf00      	nop
 80a2cba:	bf00      	nop
 80a2cbc:	bf00      	nop
 80a2cbe:	bf00      	nop
 80a2cc0:	bf00      	nop
 80a2cc2:	bf00      	nop
 80a2cc4:	bf00      	nop
 80a2cc6:	bf00      	nop
 80a2cc8:	bf00      	nop
 80a2cca:	bf00      	nop
 80a2ccc:	bf00      	nop
 80a2cce:	bf00      	nop
 80a2cd0:	bf00      	nop
 80a2cd2:	bf00      	nop
 80a2cd4:	bf00      	nop
 80a2cd6:	bf00      	nop
 80a2cd8:	bf00      	nop
 80a2cda:	bf00      	nop
 80a2cdc:	bf00      	nop
 80a2cde:	bf00      	nop
 80a2ce0:	bf00      	nop
 80a2ce2:	bf00      	nop
 80a2ce4:	bf00      	nop
 80a2ce6:	bf00      	nop
 80a2ce8:	bf00      	nop
 80a2cea:	bf00      	nop
 80a2cec:	bf00      	nop
 80a2cee:	bf00      	nop
 80a2cf0:	bf00      	nop
 80a2cf2:	bf00      	nop
 80a2cf4:	bf00      	nop
 80a2cf6:	bf00      	nop
 80a2cf8:	bf00      	nop
 80a2cfa:	bf00      	nop
 80a2cfc:	bf00      	nop
 80a2cfe:	bf00      	nop
 80a2d00:	bf00      	nop
 80a2d02:	bf00      	nop
 80a2d04:	bf00      	nop
 80a2d06:	bf00      	nop
 80a2d08:	bf00      	nop
 80a2d0a:	bf00      	nop
 80a2d0c:	bf00      	nop
 80a2d0e:	bf00      	nop
 80a2d10:	bf00      	nop
 80a2d12:	bf00      	nop
 80a2d14:	bf00      	nop
 80a2d16:	bf00      	nop
 80a2d18:	bf00      	nop
 80a2d1a:	bf00      	nop
 80a2d1c:	bf00      	nop
 80a2d1e:	bf00      	nop
 80a2d20:	bf00      	nop
 80a2d22:	bf00      	nop
 80a2d24:	bf00      	nop
 80a2d26:	bf00      	nop
 80a2d28:	bf00      	nop
 80a2d2a:	bf00      	nop
 80a2d2c:	bf00      	nop
 80a2d2e:	bf00      	nop
 80a2d30:	bf00      	nop
 80a2d32:	bf00      	nop
 80a2d34:	bf00      	nop
 80a2d36:	bf00      	nop
 80a2d38:	bf00      	nop
 80a2d3a:	bf00      	nop
 80a2d3c:	bf00      	nop
 80a2d3e:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a2d40:	7963      	ldrb	r3, [r4, #5]
 80a2d42:	6810      	ldr	r0, [r2, #0]
 80a2d44:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2d48:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2d4c:	88bf      	ldrh	r7, [r7, #4]
 80a2d4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2d52:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a2d54:	4600      	mov	r0, r0
 80a2d56:	bf00      	nop
 80a2d58:	bf00      	nop
 80a2d5a:	bf00      	nop
 80a2d5c:	bf00      	nop
 80a2d5e:	bf00      	nop
 80a2d60:	bf00      	nop
 80a2d62:	bf00      	nop
 80a2d64:	bf00      	nop
 80a2d66:	bf00      	nop
 80a2d68:	bf00      	nop
 80a2d6a:	bf00      	nop
 80a2d6c:	bf00      	nop
 80a2d6e:	bf00      	nop
 80a2d70:	bf00      	nop
 80a2d72:	bf00      	nop
 80a2d74:	bf00      	nop
 80a2d76:	bf00      	nop
 80a2d78:	bf00      	nop
 80a2d7a:	bf00      	nop
 80a2d7c:	bf00      	nop
 80a2d7e:	bf00      	nop
 80a2d80:	bf00      	nop
 80a2d82:	bf00      	nop
 80a2d84:	bf00      	nop
 80a2d86:	bf00      	nop
 80a2d88:	bf00      	nop
 80a2d8a:	bf00      	nop
 80a2d8c:	bf00      	nop
 80a2d8e:	bf00      	nop
 80a2d90:	bf00      	nop
 80a2d92:	bf00      	nop
 80a2d94:	bf00      	nop
 80a2d96:	bf00      	nop
 80a2d98:	bf00      	nop
 80a2d9a:	bf00      	nop
 80a2d9c:	bf00      	nop
 80a2d9e:	bf00      	nop
 80a2da0:	bf00      	nop
 80a2da2:	bf00      	nop
 80a2da4:	bf00      	nop
 80a2da6:	bf00      	nop
 80a2da8:	bf00      	nop
 80a2daa:	bf00      	nop
 80a2dac:	bf00      	nop
 80a2dae:	bf00      	nop
 80a2db0:	bf00      	nop
 80a2db2:	bf00      	nop
 80a2db4:	bf00      	nop
 80a2db6:	bf00      	nop
 80a2db8:	bf00      	nop
 80a2dba:	bf00      	nop
 80a2dbc:	bf00      	nop
 80a2dbe:	bf00      	nop
 80a2dc0:	bf00      	nop
 80a2dc2:	bf00      	nop
 80a2dc4:	bf00      	nop
 80a2dc6:	bf00      	nop
 80a2dc8:	bf00      	nop
 80a2dca:	bf00      	nop
 80a2dcc:	bf00      	nop
 80a2dce:	bf00      	nop
 80a2dd0:	bf00      	nop
 80a2dd2:	bf00      	nop
 80a2dd4:	bf00      	nop
 80a2dd6:	bf00      	nop
 80a2dd8:	bf00      	nop
 80a2dda:	bf00      	nop
 80a2ddc:	bf00      	nop
 80a2dde:	bf00      	nop
 80a2de0:	bf00      	nop
 80a2de2:	bf00      	nop
 80a2de4:	bf00      	nop
 80a2de6:	bf00      	nop
 80a2de8:	bf00      	nop
 80a2dea:	bf00      	nop
 80a2dec:	bf00      	nop
 80a2dee:	bf00      	nop
 80a2df0:	bf00      	nop
 80a2df2:	bf00      	nop
 80a2df4:	bf00      	nop
 80a2df6:	bf00      	nop
 80a2df8:	bf00      	nop
 80a2dfa:	bf00      	nop
 80a2dfc:	bf00      	nop
 80a2dfe:	bf00      	nop
 80a2e00:	bf00      	nop
 80a2e02:	bf00      	nop
 80a2e04:	bf00      	nop
 80a2e06:	bf00      	nop
 80a2e08:	bf00      	nop
 80a2e0a:	bf00      	nop
 80a2e0c:	bf00      	nop
 80a2e0e:	bf00      	nop
 80a2e10:	bf00      	nop
 80a2e12:	bf00      	nop
 80a2e14:	bf00      	nop
 80a2e16:	bf00      	nop
 80a2e18:	bf00      	nop
 80a2e1a:	bf00      	nop
 80a2e1c:	bf00      	nop
 80a2e1e:	bf00      	nop
 80a2e20:	bf00      	nop
 80a2e22:	bf00      	nop
 80a2e24:	bf00      	nop
 80a2e26:	bf00      	nop
 80a2e28:	bf00      	nop
 80a2e2a:	bf00      	nop
 80a2e2c:	bf00      	nop
 80a2e2e:	bf00      	nop
 80a2e30:	bf00      	nop
 80a2e32:	bf00      	nop
 80a2e34:	bf00      	nop
 80a2e36:	bf00      	nop
 80a2e38:	bf00      	nop
 80a2e3a:	bf00      	nop
 80a2e3c:	bf00      	nop
 80a2e3e:	bf00      	nop
 80a2e40:	bf00      	nop
 80a2e42:	bf00      	nop
 80a2e44:	bf00      	nop
 80a2e46:	bf00      	nop
 80a2e48:	bf00      	nop
 80a2e4a:	bf00      	nop
 80a2e4c:	bf00      	nop
        mask >>= 1;
 80a2e4e:	9b04      	ldr	r3, [sp, #16]
 80a2e50:	085b      	lsrs	r3, r3, #1
 80a2e52:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a2e54:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a2e58:	3301      	adds	r3, #1
 80a2e5a:	b2db      	uxtb	r3, r3
 80a2e5c:	2b17      	cmp	r3, #23
 80a2e5e:	f88d 3006 	strb.w	r3, [sp, #6]
 80a2e62:	f200 8118 	bhi.w	80a3096 <_ZN17Adafruit_NeoPixel4showEv+0xad6>
        pinSet(pin, HIGH); // HIGH
 80a2e66:	7963      	ldrb	r3, [r4, #5]
 80a2e68:	6810      	ldr	r0, [r2, #0]
 80a2e6a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2e6e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2e72:	88bf      	ldrh	r7, [r7, #4]
 80a2e74:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2e78:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a2e7a:	9803      	ldr	r0, [sp, #12]
 80a2e7c:	9b04      	ldr	r3, [sp, #16]
 80a2e7e:	4218      	tst	r0, r3
 80a2e80:	f47f aeda 	bne.w	80a2c38 <_ZN17Adafruit_NeoPixel4showEv+0x678>
            ::: "r0", "cc", "memory");
 80a2e84:	4600      	mov	r0, r0
 80a2e86:	bf00      	nop
 80a2e88:	bf00      	nop
 80a2e8a:	bf00      	nop
 80a2e8c:	bf00      	nop
 80a2e8e:	bf00      	nop
 80a2e90:	bf00      	nop
 80a2e92:	bf00      	nop
 80a2e94:	bf00      	nop
 80a2e96:	bf00      	nop
 80a2e98:	bf00      	nop
 80a2e9a:	bf00      	nop
 80a2e9c:	bf00      	nop
 80a2e9e:	bf00      	nop
 80a2ea0:	bf00      	nop
 80a2ea2:	bf00      	nop
 80a2ea4:	bf00      	nop
 80a2ea6:	bf00      	nop
 80a2ea8:	bf00      	nop
 80a2eaa:	bf00      	nop
 80a2eac:	bf00      	nop
 80a2eae:	bf00      	nop
 80a2eb0:	bf00      	nop
 80a2eb2:	bf00      	nop
 80a2eb4:	bf00      	nop
 80a2eb6:	bf00      	nop
 80a2eb8:	bf00      	nop
 80a2eba:	bf00      	nop
 80a2ebc:	bf00      	nop
 80a2ebe:	bf00      	nop
 80a2ec0:	bf00      	nop
 80a2ec2:	bf00      	nop
 80a2ec4:	bf00      	nop
 80a2ec6:	bf00      	nop
 80a2ec8:	bf00      	nop
 80a2eca:	bf00      	nop
 80a2ecc:	bf00      	nop
 80a2ece:	bf00      	nop
 80a2ed0:	bf00      	nop
 80a2ed2:	bf00      	nop
 80a2ed4:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a2ed6:	7963      	ldrb	r3, [r4, #5]
 80a2ed8:	6810      	ldr	r0, [r2, #0]
 80a2eda:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2ede:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2ee2:	88bf      	ldrh	r7, [r7, #4]
 80a2ee4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2ee8:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a2eea:	4600      	mov	r0, r0
 80a2eec:	bf00      	nop
 80a2eee:	bf00      	nop
 80a2ef0:	bf00      	nop
 80a2ef2:	bf00      	nop
 80a2ef4:	bf00      	nop
 80a2ef6:	bf00      	nop
 80a2ef8:	bf00      	nop
 80a2efa:	bf00      	nop
 80a2efc:	bf00      	nop
 80a2efe:	bf00      	nop
 80a2f00:	bf00      	nop
 80a2f02:	bf00      	nop
 80a2f04:	bf00      	nop
 80a2f06:	bf00      	nop
 80a2f08:	bf00      	nop
 80a2f0a:	bf00      	nop
 80a2f0c:	bf00      	nop
 80a2f0e:	bf00      	nop
 80a2f10:	bf00      	nop
 80a2f12:	bf00      	nop
 80a2f14:	bf00      	nop
 80a2f16:	bf00      	nop
 80a2f18:	bf00      	nop
 80a2f1a:	bf00      	nop
 80a2f1c:	bf00      	nop
 80a2f1e:	bf00      	nop
 80a2f20:	bf00      	nop
 80a2f22:	bf00      	nop
 80a2f24:	bf00      	nop
 80a2f26:	bf00      	nop
 80a2f28:	bf00      	nop
 80a2f2a:	bf00      	nop
 80a2f2c:	bf00      	nop
 80a2f2e:	bf00      	nop
 80a2f30:	bf00      	nop
 80a2f32:	bf00      	nop
 80a2f34:	bf00      	nop
 80a2f36:	bf00      	nop
 80a2f38:	bf00      	nop
 80a2f3a:	bf00      	nop
 80a2f3c:	bf00      	nop
 80a2f3e:	bf00      	nop
 80a2f40:	bf00      	nop
 80a2f42:	bf00      	nop
 80a2f44:	bf00      	nop
 80a2f46:	bf00      	nop
 80a2f48:	bf00      	nop
 80a2f4a:	bf00      	nop
 80a2f4c:	bf00      	nop
 80a2f4e:	bf00      	nop
 80a2f50:	bf00      	nop
 80a2f52:	bf00      	nop
 80a2f54:	bf00      	nop
 80a2f56:	bf00      	nop
 80a2f58:	bf00      	nop
 80a2f5a:	bf00      	nop
 80a2f5c:	bf00      	nop
 80a2f5e:	bf00      	nop
 80a2f60:	bf00      	nop
 80a2f62:	bf00      	nop
 80a2f64:	bf00      	nop
 80a2f66:	bf00      	nop
 80a2f68:	bf00      	nop
 80a2f6a:	bf00      	nop
 80a2f6c:	bf00      	nop
 80a2f6e:	bf00      	nop
 80a2f70:	bf00      	nop
 80a2f72:	bf00      	nop
 80a2f74:	bf00      	nop
 80a2f76:	bf00      	nop
 80a2f78:	bf00      	nop
 80a2f7a:	bf00      	nop
 80a2f7c:	bf00      	nop
 80a2f7e:	bf00      	nop
 80a2f80:	bf00      	nop
 80a2f82:	bf00      	nop
 80a2f84:	bf00      	nop
 80a2f86:	bf00      	nop
 80a2f88:	bf00      	nop
 80a2f8a:	bf00      	nop
 80a2f8c:	bf00      	nop
 80a2f8e:	bf00      	nop
 80a2f90:	bf00      	nop
 80a2f92:	bf00      	nop
 80a2f94:	bf00      	nop
 80a2f96:	bf00      	nop
 80a2f98:	bf00      	nop
 80a2f9a:	bf00      	nop
 80a2f9c:	bf00      	nop
 80a2f9e:	bf00      	nop
 80a2fa0:	bf00      	nop
 80a2fa2:	bf00      	nop
 80a2fa4:	bf00      	nop
 80a2fa6:	bf00      	nop
 80a2fa8:	bf00      	nop
 80a2faa:	bf00      	nop
 80a2fac:	bf00      	nop
 80a2fae:	bf00      	nop
 80a2fb0:	bf00      	nop
 80a2fb2:	bf00      	nop
 80a2fb4:	bf00      	nop
 80a2fb6:	bf00      	nop
 80a2fb8:	bf00      	nop
 80a2fba:	bf00      	nop
 80a2fbc:	bf00      	nop
 80a2fbe:	bf00      	nop
 80a2fc0:	bf00      	nop
 80a2fc2:	bf00      	nop
 80a2fc4:	bf00      	nop
 80a2fc6:	bf00      	nop
 80a2fc8:	bf00      	nop
 80a2fca:	bf00      	nop
 80a2fcc:	bf00      	nop
 80a2fce:	bf00      	nop
 80a2fd0:	bf00      	nop
 80a2fd2:	bf00      	nop
 80a2fd4:	bf00      	nop
 80a2fd6:	bf00      	nop
 80a2fd8:	bf00      	nop
 80a2fda:	bf00      	nop
 80a2fdc:	bf00      	nop
 80a2fde:	bf00      	nop
 80a2fe0:	bf00      	nop
 80a2fe2:	bf00      	nop
 80a2fe4:	bf00      	nop
 80a2fe6:	bf00      	nop
 80a2fe8:	bf00      	nop
 80a2fea:	bf00      	nop
 80a2fec:	bf00      	nop
 80a2fee:	bf00      	nop
 80a2ff0:	bf00      	nop
 80a2ff2:	bf00      	nop
 80a2ff4:	bf00      	nop
 80a2ff6:	bf00      	nop
 80a2ff8:	bf00      	nop
 80a2ffa:	bf00      	nop
 80a2ffc:	bf00      	nop
 80a2ffe:	bf00      	nop
 80a3000:	bf00      	nop
 80a3002:	bf00      	nop
 80a3004:	bf00      	nop
 80a3006:	bf00      	nop
 80a3008:	bf00      	nop
 80a300a:	bf00      	nop
 80a300c:	bf00      	nop
 80a300e:	bf00      	nop
 80a3010:	bf00      	nop
 80a3012:	bf00      	nop
 80a3014:	bf00      	nop
 80a3016:	bf00      	nop
 80a3018:	bf00      	nop
 80a301a:	bf00      	nop
 80a301c:	bf00      	nop
 80a301e:	bf00      	nop
 80a3020:	bf00      	nop
 80a3022:	bf00      	nop
 80a3024:	bf00      	nop
 80a3026:	bf00      	nop
 80a3028:	bf00      	nop
 80a302a:	bf00      	nop
 80a302c:	bf00      	nop
 80a302e:	bf00      	nop
 80a3030:	bf00      	nop
 80a3032:	bf00      	nop
 80a3034:	bf00      	nop
 80a3036:	bf00      	nop
 80a3038:	bf00      	nop
 80a303a:	bf00      	nop
 80a303c:	bf00      	nop
 80a303e:	bf00      	nop
 80a3040:	bf00      	nop
 80a3042:	bf00      	nop
 80a3044:	bf00      	nop
 80a3046:	bf00      	nop
 80a3048:	bf00      	nop
 80a304a:	bf00      	nop
 80a304c:	bf00      	nop
 80a304e:	bf00      	nop
 80a3050:	bf00      	nop
 80a3052:	bf00      	nop
 80a3054:	bf00      	nop
 80a3056:	bf00      	nop
 80a3058:	bf00      	nop
 80a305a:	bf00      	nop
 80a305c:	bf00      	nop
 80a305e:	bf00      	nop
 80a3060:	bf00      	nop
 80a3062:	bf00      	nop
 80a3064:	bf00      	nop
 80a3066:	bf00      	nop
 80a3068:	bf00      	nop
 80a306a:	bf00      	nop
 80a306c:	bf00      	nop
 80a306e:	bf00      	nop
 80a3070:	bf00      	nop
 80a3072:	bf00      	nop
 80a3074:	bf00      	nop
 80a3076:	bf00      	nop
 80a3078:	bf00      	nop
 80a307a:	bf00      	nop
 80a307c:	bf00      	nop
 80a307e:	bf00      	nop
 80a3080:	bf00      	nop
 80a3082:	bf00      	nop
 80a3084:	bf00      	nop
 80a3086:	bf00      	nop
 80a3088:	bf00      	nop
 80a308a:	bf00      	nop
 80a308c:	bf00      	nop
 80a308e:	bf00      	nop
 80a3090:	bf00      	nop
 80a3092:	bf00      	nop
 80a3094:	e6db      	b.n	80a2e4e <_ZN17Adafruit_NeoPixel4showEv+0x88e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a3096:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a309a:	b29b      	uxth	r3, r3
 80a309c:	2b00      	cmp	r3, #0
 80a309e:	f47f ada2 	bne.w	80a2be6 <_ZN17Adafruit_NeoPixel4showEv+0x626>
 80a30a2:	f7ff bbe3 	b.w	80a286c <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
 80a30a6:	4770      	bx	lr
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a30a8:	2b00      	cmp	r3, #0
 80a30aa:	f43f abdf 	beq.w	80a286c <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a30ae:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a30b2:	2600      	movs	r6, #0
 80a30b4:	4a12      	ldr	r2, [pc, #72]	; (80a3100 <_ZN17Adafruit_NeoPixel4showEv+0xb40>)
      mask = 0x800000; // reset the mask
 80a30b6:	9104      	str	r1, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a30b8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next green byte value
 80a30bc:	3503      	adds	r5, #3
      i = i-3;      // decrement bytes remaining
 80a30be:	3b03      	subs	r3, #3
 80a30c0:	b29b      	uxth	r3, r3
 80a30c2:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a30c6:	f815 3c03 	ldrb.w	r3, [r5, #-3]
 80a30ca:	b2db      	uxtb	r3, r3
 80a30cc:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next blue byte value
 80a30d0:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 80a30d4:	b2db      	uxtb	r3, r3
 80a30d6:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next green byte value
 80a30da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80a30de:	b2db      	uxtb	r3, r3
 80a30e0:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a30e4:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a30e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a30ec:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a30f0:	021b      	lsls	r3, r3, #8
 80a30f2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a30f6:	4303      	orrs	r3, r0
 80a30f8:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a30fa:	f88d 6006 	strb.w	r6, [sp, #6]
 80a30fe:	e0e0      	b.n	80a32c2 <_ZN17Adafruit_NeoPixel4showEv+0xd02>
 80a3100:	20000e84 	.word	0x20000e84
            ::: "r0", "cc", "memory");
 80a3104:	4600      	mov	r0, r0
 80a3106:	bf00      	nop
 80a3108:	bf00      	nop
 80a310a:	bf00      	nop
 80a310c:	bf00      	nop
 80a310e:	bf00      	nop
 80a3110:	bf00      	nop
 80a3112:	bf00      	nop
 80a3114:	bf00      	nop
 80a3116:	bf00      	nop
 80a3118:	bf00      	nop
 80a311a:	bf00      	nop
 80a311c:	bf00      	nop
 80a311e:	bf00      	nop
 80a3120:	bf00      	nop
 80a3122:	bf00      	nop
 80a3124:	bf00      	nop
 80a3126:	bf00      	nop
 80a3128:	bf00      	nop
 80a312a:	bf00      	nop
 80a312c:	bf00      	nop
 80a312e:	bf00      	nop
 80a3130:	bf00      	nop
 80a3132:	bf00      	nop
 80a3134:	bf00      	nop
 80a3136:	bf00      	nop
 80a3138:	bf00      	nop
 80a313a:	bf00      	nop
 80a313c:	bf00      	nop
 80a313e:	bf00      	nop
 80a3140:	bf00      	nop
 80a3142:	bf00      	nop
 80a3144:	bf00      	nop
 80a3146:	bf00      	nop
 80a3148:	bf00      	nop
 80a314a:	bf00      	nop
 80a314c:	bf00      	nop
 80a314e:	bf00      	nop
 80a3150:	bf00      	nop
 80a3152:	bf00      	nop
 80a3154:	bf00      	nop
 80a3156:	bf00      	nop
 80a3158:	bf00      	nop
 80a315a:	bf00      	nop
 80a315c:	bf00      	nop
 80a315e:	bf00      	nop
 80a3160:	bf00      	nop
 80a3162:	bf00      	nop
 80a3164:	bf00      	nop
 80a3166:	bf00      	nop
 80a3168:	bf00      	nop
 80a316a:	bf00      	nop
 80a316c:	bf00      	nop
 80a316e:	bf00      	nop
 80a3170:	bf00      	nop
 80a3172:	bf00      	nop
 80a3174:	bf00      	nop
 80a3176:	bf00      	nop
 80a3178:	bf00      	nop
 80a317a:	bf00      	nop
 80a317c:	bf00      	nop
 80a317e:	bf00      	nop
 80a3180:	bf00      	nop
 80a3182:	bf00      	nop
 80a3184:	bf00      	nop
 80a3186:	bf00      	nop
 80a3188:	bf00      	nop
 80a318a:	bf00      	nop
 80a318c:	bf00      	nop
 80a318e:	bf00      	nop
 80a3190:	bf00      	nop
 80a3192:	bf00      	nop
 80a3194:	bf00      	nop
 80a3196:	bf00      	nop
 80a3198:	bf00      	nop
 80a319a:	bf00      	nop
 80a319c:	bf00      	nop
 80a319e:	bf00      	nop
 80a31a0:	bf00      	nop
 80a31a2:	bf00      	nop
 80a31a4:	bf00      	nop
 80a31a6:	bf00      	nop
 80a31a8:	bf00      	nop
 80a31aa:	bf00      	nop
 80a31ac:	bf00      	nop
 80a31ae:	bf00      	nop
 80a31b0:	bf00      	nop
 80a31b2:	bf00      	nop
 80a31b4:	bf00      	nop
 80a31b6:	bf00      	nop
 80a31b8:	bf00      	nop
 80a31ba:	bf00      	nop
 80a31bc:	bf00      	nop
 80a31be:	bf00      	nop
 80a31c0:	bf00      	nop
 80a31c2:	bf00      	nop
 80a31c4:	bf00      	nop
 80a31c6:	bf00      	nop
 80a31c8:	bf00      	nop
 80a31ca:	bf00      	nop
 80a31cc:	bf00      	nop
 80a31ce:	bf00      	nop
 80a31d0:	bf00      	nop
 80a31d2:	bf00      	nop
 80a31d4:	bf00      	nop
 80a31d6:	bf00      	nop
 80a31d8:	bf00      	nop
 80a31da:	bf00      	nop
 80a31dc:	bf00      	nop
 80a31de:	bf00      	nop
 80a31e0:	bf00      	nop
 80a31e2:	bf00      	nop
 80a31e4:	bf00      	nop
 80a31e6:	bf00      	nop
 80a31e8:	bf00      	nop
 80a31ea:	bf00      	nop
 80a31ec:	bf00      	nop
 80a31ee:	bf00      	nop
 80a31f0:	bf00      	nop
 80a31f2:	bf00      	nop
 80a31f4:	bf00      	nop
 80a31f6:	bf00      	nop
 80a31f8:	bf00      	nop
 80a31fa:	bf00      	nop
 80a31fc:	bf00      	nop
 80a31fe:	bf00      	nop
 80a3200:	bf00      	nop
 80a3202:	bf00      	nop
 80a3204:	bf00      	nop
 80a3206:	bf00      	nop
 80a3208:	bf00      	nop
 80a320a:	bf00      	nop
 80a320c:	bf00      	nop
 80a320e:	bf00      	nop
 80a3210:	bf00      	nop
 80a3212:	bf00      	nop
 80a3214:	bf00      	nop
 80a3216:	bf00      	nop
 80a3218:	bf00      	nop
 80a321a:	bf00      	nop
 80a321c:	bf00      	nop
 80a321e:	bf00      	nop
 80a3220:	bf00      	nop
 80a3222:	bf00      	nop
 80a3224:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a3226:	7963      	ldrb	r3, [r4, #5]
 80a3228:	6810      	ldr	r0, [r2, #0]
 80a322a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a322e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a3232:	88bf      	ldrh	r7, [r7, #4]
 80a3234:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3238:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a323a:	4600      	mov	r0, r0
 80a323c:	bf00      	nop
 80a323e:	bf00      	nop
 80a3240:	bf00      	nop
 80a3242:	bf00      	nop
 80a3244:	bf00      	nop
 80a3246:	bf00      	nop
 80a3248:	bf00      	nop
 80a324a:	bf00      	nop
 80a324c:	bf00      	nop
 80a324e:	bf00      	nop
 80a3250:	bf00      	nop
 80a3252:	bf00      	nop
 80a3254:	bf00      	nop
 80a3256:	bf00      	nop
 80a3258:	bf00      	nop
 80a325a:	bf00      	nop
 80a325c:	bf00      	nop
 80a325e:	bf00      	nop
 80a3260:	bf00      	nop
 80a3262:	bf00      	nop
 80a3264:	bf00      	nop
 80a3266:	bf00      	nop
 80a3268:	bf00      	nop
 80a326a:	bf00      	nop
 80a326c:	bf00      	nop
 80a326e:	bf00      	nop
 80a3270:	bf00      	nop
 80a3272:	bf00      	nop
 80a3274:	bf00      	nop
 80a3276:	bf00      	nop
 80a3278:	bf00      	nop
 80a327a:	bf00      	nop
 80a327c:	bf00      	nop
 80a327e:	bf00      	nop
 80a3280:	bf00      	nop
 80a3282:	bf00      	nop
 80a3284:	bf00      	nop
 80a3286:	bf00      	nop
 80a3288:	bf00      	nop
 80a328a:	bf00      	nop
 80a328c:	bf00      	nop
 80a328e:	bf00      	nop
 80a3290:	bf00      	nop
 80a3292:	bf00      	nop
 80a3294:	bf00      	nop
 80a3296:	bf00      	nop
 80a3298:	bf00      	nop
 80a329a:	bf00      	nop
 80a329c:	bf00      	nop
 80a329e:	bf00      	nop
 80a32a0:	bf00      	nop
 80a32a2:	bf00      	nop
 80a32a4:	bf00      	nop
 80a32a6:	bf00      	nop
 80a32a8:	bf00      	nop
        mask >>= 1;
 80a32aa:	9b04      	ldr	r3, [sp, #16]
 80a32ac:	085b      	lsrs	r3, r3, #1
 80a32ae:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a32b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a32b4:	3301      	adds	r3, #1
 80a32b6:	b2db      	uxtb	r3, r3
 80a32b8:	2b17      	cmp	r3, #23
 80a32ba:	f88d 3006 	strb.w	r3, [sp, #6]
 80a32be:	f200 80e3 	bhi.w	80a3488 <_ZN17Adafruit_NeoPixel4showEv+0xec8>
        pinSet(pin, HIGH); // HIGH
 80a32c2:	7963      	ldrb	r3, [r4, #5]
 80a32c4:	6810      	ldr	r0, [r2, #0]
 80a32c6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a32ca:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a32ce:	88bf      	ldrh	r7, [r7, #4]
 80a32d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a32d4:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a32d6:	9803      	ldr	r0, [sp, #12]
 80a32d8:	9b04      	ldr	r3, [sp, #16]
 80a32da:	4218      	tst	r0, r3
 80a32dc:	f47f af12 	bne.w	80a3104 <_ZN17Adafruit_NeoPixel4showEv+0xb44>
            ::: "r0", "cc", "memory");
 80a32e0:	4600      	mov	r0, r0
 80a32e2:	bf00      	nop
 80a32e4:	bf00      	nop
 80a32e6:	bf00      	nop
 80a32e8:	bf00      	nop
 80a32ea:	bf00      	nop
 80a32ec:	bf00      	nop
 80a32ee:	bf00      	nop
 80a32f0:	bf00      	nop
 80a32f2:	bf00      	nop
 80a32f4:	bf00      	nop
 80a32f6:	bf00      	nop
 80a32f8:	bf00      	nop
 80a32fa:	bf00      	nop
 80a32fc:	bf00      	nop
 80a32fe:	bf00      	nop
 80a3300:	bf00      	nop
 80a3302:	bf00      	nop
 80a3304:	bf00      	nop
 80a3306:	bf00      	nop
 80a3308:	bf00      	nop
 80a330a:	bf00      	nop
 80a330c:	bf00      	nop
 80a330e:	bf00      	nop
 80a3310:	bf00      	nop
 80a3312:	bf00      	nop
 80a3314:	bf00      	nop
 80a3316:	bf00      	nop
 80a3318:	bf00      	nop
 80a331a:	bf00      	nop
 80a331c:	bf00      	nop
 80a331e:	bf00      	nop
 80a3320:	bf00      	nop
 80a3322:	bf00      	nop
 80a3324:	bf00      	nop
 80a3326:	bf00      	nop
 80a3328:	bf00      	nop
 80a332a:	bf00      	nop
 80a332c:	bf00      	nop
 80a332e:	bf00      	nop
 80a3330:	bf00      	nop
 80a3332:	bf00      	nop
 80a3334:	bf00      	nop
 80a3336:	bf00      	nop
 80a3338:	bf00      	nop
 80a333a:	bf00      	nop
 80a333c:	bf00      	nop
 80a333e:	bf00      	nop
 80a3340:	bf00      	nop
 80a3342:	bf00      	nop
 80a3344:	bf00      	nop
 80a3346:	bf00      	nop
 80a3348:	bf00      	nop
 80a334a:	bf00      	nop
 80a334c:	bf00      	nop
 80a334e:	bf00      	nop
 80a3350:	bf00      	nop
 80a3352:	bf00      	nop
 80a3354:	bf00      	nop
 80a3356:	bf00      	nop
 80a3358:	bf00      	nop
 80a335a:	bf00      	nop
 80a335c:	bf00      	nop
 80a335e:	bf00      	nop
 80a3360:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a3362:	7963      	ldrb	r3, [r4, #5]
 80a3364:	6810      	ldr	r0, [r2, #0]
 80a3366:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a336a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a336e:	88bf      	ldrh	r7, [r7, #4]
 80a3370:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3374:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a3376:	4600      	mov	r0, r0
 80a3378:	bf00      	nop
 80a337a:	bf00      	nop
 80a337c:	bf00      	nop
 80a337e:	bf00      	nop
 80a3380:	bf00      	nop
 80a3382:	bf00      	nop
 80a3384:	bf00      	nop
 80a3386:	bf00      	nop
 80a3388:	bf00      	nop
 80a338a:	bf00      	nop
 80a338c:	bf00      	nop
 80a338e:	bf00      	nop
 80a3390:	bf00      	nop
 80a3392:	bf00      	nop
 80a3394:	bf00      	nop
 80a3396:	bf00      	nop
 80a3398:	bf00      	nop
 80a339a:	bf00      	nop
 80a339c:	bf00      	nop
 80a339e:	bf00      	nop
 80a33a0:	bf00      	nop
 80a33a2:	bf00      	nop
 80a33a4:	bf00      	nop
 80a33a6:	bf00      	nop
 80a33a8:	bf00      	nop
 80a33aa:	bf00      	nop
 80a33ac:	bf00      	nop
 80a33ae:	bf00      	nop
 80a33b0:	bf00      	nop
 80a33b2:	bf00      	nop
 80a33b4:	bf00      	nop
 80a33b6:	bf00      	nop
 80a33b8:	bf00      	nop
 80a33ba:	bf00      	nop
 80a33bc:	bf00      	nop
 80a33be:	bf00      	nop
 80a33c0:	bf00      	nop
 80a33c2:	bf00      	nop
 80a33c4:	bf00      	nop
 80a33c6:	bf00      	nop
 80a33c8:	bf00      	nop
 80a33ca:	bf00      	nop
 80a33cc:	bf00      	nop
 80a33ce:	bf00      	nop
 80a33d0:	bf00      	nop
 80a33d2:	bf00      	nop
 80a33d4:	bf00      	nop
 80a33d6:	bf00      	nop
 80a33d8:	bf00      	nop
 80a33da:	bf00      	nop
 80a33dc:	bf00      	nop
 80a33de:	bf00      	nop
 80a33e0:	bf00      	nop
 80a33e2:	bf00      	nop
 80a33e4:	bf00      	nop
 80a33e6:	bf00      	nop
 80a33e8:	bf00      	nop
 80a33ea:	bf00      	nop
 80a33ec:	bf00      	nop
 80a33ee:	bf00      	nop
 80a33f0:	bf00      	nop
 80a33f2:	bf00      	nop
 80a33f4:	bf00      	nop
 80a33f6:	bf00      	nop
 80a33f8:	bf00      	nop
 80a33fa:	bf00      	nop
 80a33fc:	bf00      	nop
 80a33fe:	bf00      	nop
 80a3400:	bf00      	nop
 80a3402:	bf00      	nop
 80a3404:	bf00      	nop
 80a3406:	bf00      	nop
 80a3408:	bf00      	nop
 80a340a:	bf00      	nop
 80a340c:	bf00      	nop
 80a340e:	bf00      	nop
 80a3410:	bf00      	nop
 80a3412:	bf00      	nop
 80a3414:	bf00      	nop
 80a3416:	bf00      	nop
 80a3418:	bf00      	nop
 80a341a:	bf00      	nop
 80a341c:	bf00      	nop
 80a341e:	bf00      	nop
 80a3420:	bf00      	nop
 80a3422:	bf00      	nop
 80a3424:	bf00      	nop
 80a3426:	bf00      	nop
 80a3428:	bf00      	nop
 80a342a:	bf00      	nop
 80a342c:	bf00      	nop
 80a342e:	bf00      	nop
 80a3430:	bf00      	nop
 80a3432:	bf00      	nop
 80a3434:	bf00      	nop
 80a3436:	bf00      	nop
 80a3438:	bf00      	nop
 80a343a:	bf00      	nop
 80a343c:	bf00      	nop
 80a343e:	bf00      	nop
 80a3440:	bf00      	nop
 80a3442:	bf00      	nop
 80a3444:	bf00      	nop
 80a3446:	bf00      	nop
 80a3448:	bf00      	nop
 80a344a:	bf00      	nop
 80a344c:	bf00      	nop
 80a344e:	bf00      	nop
 80a3450:	bf00      	nop
 80a3452:	bf00      	nop
 80a3454:	bf00      	nop
 80a3456:	bf00      	nop
 80a3458:	bf00      	nop
 80a345a:	bf00      	nop
 80a345c:	bf00      	nop
 80a345e:	bf00      	nop
 80a3460:	bf00      	nop
 80a3462:	bf00      	nop
 80a3464:	bf00      	nop
 80a3466:	bf00      	nop
 80a3468:	bf00      	nop
 80a346a:	bf00      	nop
 80a346c:	bf00      	nop
 80a346e:	bf00      	nop
 80a3470:	bf00      	nop
 80a3472:	bf00      	nop
 80a3474:	bf00      	nop
 80a3476:	bf00      	nop
 80a3478:	bf00      	nop
 80a347a:	bf00      	nop
 80a347c:	bf00      	nop
 80a347e:	bf00      	nop
 80a3480:	bf00      	nop
 80a3482:	bf00      	nop
 80a3484:	bf00      	nop
 80a3486:	e710      	b.n	80a32aa <_ZN17Adafruit_NeoPixel4showEv+0xcea>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a3488:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a348c:	b29b      	uxth	r3, r3
 80a348e:	2b00      	cmp	r3, #0
 80a3490:	f47f ae11 	bne.w	80a30b6 <_ZN17Adafruit_NeoPixel4showEv+0xaf6>
 80a3494:	f7ff b9ea 	b.w	80a286c <_ZN17Adafruit_NeoPixel4showEv+0x2ac>

080a3498 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  digitalWrite(p, LOW);
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a3498:	b570      	push	{r4, r5, r6, lr}
  if(n < numLEDs) {
 80a349a:	8805      	ldrh	r5, [r0, #0]
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a349c:	f89d 4010 	ldrb.w	r4, [sp, #16]
  if(n < numLEDs) {
 80a34a0:	428d      	cmp	r5, r1
 80a34a2:	d916      	bls.n	80a34d2 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3a>
    if(brightness) { // See notes in setBrightness()
 80a34a4:	7985      	ldrb	r5, [r0, #6]
 80a34a6:	b12d      	cbz	r5, 80a34b4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x1c>
      r = (r * brightness) >> 8;
 80a34a8:	436a      	muls	r2, r5
      g = (g * brightness) >> 8;
 80a34aa:	436b      	muls	r3, r5
      b = (b * brightness) >> 8;
 80a34ac:	436c      	muls	r4, r5
      r = (r * brightness) >> 8;
 80a34ae:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
 80a34b0:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
 80a34b2:	0a24      	lsrs	r4, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
 80a34b4:	6886      	ldr	r6, [r0, #8]
    switch(type) {
 80a34b6:	7900      	ldrb	r0, [r0, #4]
    uint8_t *p = &pixels[n * 3];
 80a34b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    switch(type) {
 80a34bc:	2804      	cmp	r0, #4
    uint8_t *p = &pixels[n * 3];
 80a34be:	eb06 0501 	add.w	r5, r6, r1
    switch(type) {
 80a34c2:	d007      	beq.n	80a34d4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3c>
 80a34c4:	2805      	cmp	r0, #5
 80a34c6:	d001      	beq.n	80a34cc <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x34>
 80a34c8:	2802      	cmp	r0, #2
 80a34ca:	d10a      	bne.n	80a34e2 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4a>
      case WS2812B: // WS2812 & WS2812B is GRB order.
      case WS2812B2:
        *p++ = g;
 80a34cc:	5473      	strb	r3, [r6, r1]
        *p++ = r;
 80a34ce:	706a      	strb	r2, [r5, #1]
        *p = b;
 80a34d0:	70ac      	strb	r4, [r5, #2]
        *p++ = g;
        *p = b;
        break;
    }
  }
}
 80a34d2:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = r;
 80a34d4:	2afe      	cmp	r2, #254	; 0xfe
 80a34d6:	bf28      	it	cs
 80a34d8:	22fe      	movcs	r2, #254	; 0xfe
 80a34da:	5472      	strb	r2, [r6, r1]
        *p++ = b;
 80a34dc:	706c      	strb	r4, [r5, #1]
        *p = g;
 80a34de:	70ab      	strb	r3, [r5, #2]
        break;
 80a34e0:	e7f7      	b.n	80a34d2 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3a>
        *p++ = r;
 80a34e2:	5472      	strb	r2, [r6, r1]
        *p++ = g;
 80a34e4:	706b      	strb	r3, [r5, #1]
        *p = b;
 80a34e6:	70ac      	strb	r4, [r5, #2]
}
 80a34e8:	e7f3      	b.n	80a34d2 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3a>

080a34ea <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a34ea:	b570      	push	{r4, r5, r6, lr}
  if(n < numLEDs) {
 80a34ec:	8803      	ldrh	r3, [r0, #0]
 80a34ee:	428b      	cmp	r3, r1
 80a34f0:	d91d      	bls.n	80a352e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x44>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a34f2:	7985      	ldrb	r5, [r0, #6]
 80a34f4:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a34f8:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a34fc:	b2d2      	uxtb	r2, r2
 80a34fe:	b13d      	cbz	r5, 80a3510 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
 80a3500:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a3502:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a3504:	436a      	muls	r2, r5
      r = (r * brightness) >> 8;
 80a3506:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a350a:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a350e:	0a12      	lsrs	r2, r2, #8
    }
    uint8_t *p = &pixels[n * 3];
 80a3510:	6886      	ldr	r6, [r0, #8]
    switch(type) {
 80a3512:	7900      	ldrb	r0, [r0, #4]
    uint8_t *p = &pixels[n * 3];
 80a3514:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    switch(type) {
 80a3518:	2804      	cmp	r0, #4
    uint8_t *p = &pixels[n * 3];
 80a351a:	eb06 0501 	add.w	r5, r6, r1
    switch(type) {
 80a351e:	d007      	beq.n	80a3530 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x46>
 80a3520:	2805      	cmp	r0, #5
 80a3522:	d001      	beq.n	80a3528 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x3e>
 80a3524:	2802      	cmp	r0, #2
 80a3526:	d10a      	bne.n	80a353e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>
      case WS2812B: // WS2812 & WS2812B is GRB order.
      case WS2812B2:
        *p++ = g;
 80a3528:	5474      	strb	r4, [r6, r1]
        *p++ = r;
 80a352a:	706b      	strb	r3, [r5, #1]
        *p = b;
 80a352c:	70aa      	strb	r2, [r5, #2]
        *p++ = g;
        *p = b;
        break;
    }
  }
}
 80a352e:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = r;
 80a3530:	2bfe      	cmp	r3, #254	; 0xfe
 80a3532:	bf28      	it	cs
 80a3534:	23fe      	movcs	r3, #254	; 0xfe
 80a3536:	5473      	strb	r3, [r6, r1]
        *p++ = b;
 80a3538:	706a      	strb	r2, [r5, #1]
        *p = g;
 80a353a:	70ac      	strb	r4, [r5, #2]
        break;
 80a353c:	e7f7      	b.n	80a352e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x44>
        *p++ = r;
 80a353e:	5473      	strb	r3, [r6, r1]
        *p++ = g;
 80a3540:	706c      	strb	r4, [r5, #1]
        *p = b;
 80a3542:	70aa      	strb	r2, [r5, #2]
}
 80a3544:	e7f3      	b.n	80a352e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x44>

080a3546 <_ZNK17Adafruit_NeoPixel13getPixelColorEt>:
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
 80a3546:	b513      	push	{r0, r1, r4, lr}
  if(n >= numLEDs) {
 80a3548:	8803      	ldrh	r3, [r0, #0]
 80a354a:	428b      	cmp	r3, r1
 80a354c:	d938      	bls.n	80a35c0 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x7a>
    // Out of bounds, return no color.
    return 0;
  }
  uint8_t *p = &pixels[n * 3];
 80a354e:	6882      	ldr	r2, [r0, #8]
  uint32_t c;

  switch(type) {
 80a3550:	7904      	ldrb	r4, [r0, #4]
  uint8_t *p = &pixels[n * 3];
 80a3552:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a3556:	1853      	adds	r3, r2, r1
  switch(type) {
 80a3558:	2c04      	cmp	r4, #4
 80a355a:	5c51      	ldrb	r1, [r2, r1]
 80a355c:	789a      	ldrb	r2, [r3, #2]
 80a355e:	785b      	ldrb	r3, [r3, #1]
 80a3560:	d022      	beq.n	80a35a8 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x62>
 80a3562:	2c05      	cmp	r4, #5
 80a3564:	d001      	beq.n	80a356a <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x24>
 80a3566:	2c02      	cmp	r4, #2
 80a3568:	d124      	bne.n	80a35b4 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x6e>
    case WS2812B: // WS2812 & WS2812B is GRB order.
    case WS2812B2:
      c = ((uint32_t)p[1] << 16) | ((uint32_t)p[0] <<  8) | (uint32_t)p[2];
 80a356a:	0209      	lsls	r1, r1, #8
 80a356c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80a3570:	4313      	orrs	r3, r2
 80a3572:	9301      	str	r3, [sp, #4]
      break;
  }

  // Adjust this back up to the true color, as setting a pixel color will
  // scale it back down again.
  if(brightness) { // See notes in setBrightness()
 80a3574:	7981      	ldrb	r1, [r0, #6]
 80a3576:	b1a1      	cbz	r1, 80a35a2 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x5c>
    //Cast the color to a byte array
    uint8_t * c_ptr =reinterpret_cast<uint8_t*>(&c);
    c_ptr[0] = (c_ptr[0] << 8)/brightness;
 80a3578:	f89d 2004 	ldrb.w	r2, [sp, #4]
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
 80a357c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c_ptr[0] = (c_ptr[0] << 8)/brightness;
 80a3580:	0212      	lsls	r2, r2, #8
 80a3582:	fbb2 f2f1 	udiv	r2, r2, r1
 80a3586:	f88d 2004 	strb.w	r2, [sp, #4]
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
 80a358a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
 80a358e:	021b      	lsls	r3, r3, #8
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
 80a3590:	0212      	lsls	r2, r2, #8
 80a3592:	fbb2 f2f1 	udiv	r2, r2, r1
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
 80a3596:	fbb3 f3f1 	udiv	r3, r3, r1
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
 80a359a:	f88d 2005 	strb.w	r2, [sp, #5]
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
 80a359e:	f88d 3006 	strb.w	r3, [sp, #6]
  }
  return c; // Pixel # is out of bounds
 80a35a2:	9801      	ldr	r0, [sp, #4]
}
 80a35a4:	b002      	add	sp, #8
 80a35a6:	bd10      	pop	{r4, pc}
      c = ((uint32_t)p[0] << 16) | ((uint32_t)p[2] <<  8) | (uint32_t)p[1];
 80a35a8:	0212      	lsls	r2, r2, #8
 80a35aa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80a35ae:	4313      	orrs	r3, r2
 80a35b0:	9301      	str	r3, [sp, #4]
      break;
 80a35b2:	e7df      	b.n	80a3574 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x2e>
      c = ((uint32_t)p[0] << 16) | ((uint32_t)p[1] <<  8) | (uint32_t)p[2];
 80a35b4:	021b      	lsls	r3, r3, #8
 80a35b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80a35ba:	4313      	orrs	r3, r2
 80a35bc:	9301      	str	r3, [sp, #4]
      break;
 80a35be:	e7d9      	b.n	80a3574 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x2e>
    return 0;
 80a35c0:	2000      	movs	r0, #0
 80a35c2:	e7ef      	b.n	80a35a4 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x5e>

080a35c4 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a35c4:	b508      	push	{r3, lr}
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a35c6:	f000 fa6b 	bl	80a3aa0 <HAL_Pin_Map>
 80a35ca:	4b01      	ldr	r3, [pc, #4]	; (80a35d0 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
 80a35cc:	6018      	str	r0, [r3, #0]
}
 80a35ce:	bd08      	pop	{r3, pc}
 80a35d0:	20000e84 	.word	0x20000e84

080a35d4 <_ZN8PongBallC1Ev>:
#include "pong_ball.h"
#include "muse.h"

PongBall::PongBall() {}
 80a35d4:	4770      	bx	lr
	...

080a35d8 <_ZN8PongBallC1Eiffjiii>:

PongBall::PongBall(int len, float velX, float velY, unsigned int tickTime, int r, int g, int b) {
 80a35d8:	b510      	push	{r4, lr}
    this->len = len;
    xVel = velX;
    yVel = velY;
 80a35da:	60c3      	str	r3, [r0, #12]
    x = NUM_BARS / 2;
 80a35dc:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80a35e0:	6103      	str	r3, [r0, #16]
    y = STRIP_LENGTH / 2;
 80a35e2:	4b09      	ldr	r3, [pc, #36]	; (80a3608 <_ZN8PongBallC1Eiffjiii+0x30>)
PongBall::PongBall(int len, float velX, float velY, unsigned int tickTime, int r, int g, int b) {
 80a35e4:	4604      	mov	r4, r0
    y = STRIP_LENGTH / 2;
 80a35e6:	6143      	str	r3, [r0, #20]

    tick_time = tickTime;
 80a35e8:	9b02      	ldr	r3, [sp, #8]
    this->len = len;
 80a35ea:	6181      	str	r1, [r0, #24]
    xVel = velX;
 80a35ec:	6082      	str	r2, [r0, #8]
    tick_time = tickTime;
 80a35ee:	6203      	str	r3, [r0, #32]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a35f0:	f000 fa3e 	bl	80a3a70 <HAL_Timer_Get_Milli_Seconds>

int PongBall::xPos() { return (int) x; }
int PongBall::yPos() { return (int) y; }

void PongBall::setColor(int r, int g, int b) {
    this->r = r;
 80a35f4:	9b03      	ldr	r3, [sp, #12]
    last_tick = millis();
 80a35f6:	61e0      	str	r0, [r4, #28]
    this->r = r;
 80a35f8:	6263      	str	r3, [r4, #36]	; 0x24
    this->g = g;
 80a35fa:	9b04      	ldr	r3, [sp, #16]
}
 80a35fc:	4620      	mov	r0, r4
    this->g = g;
 80a35fe:	62a3      	str	r3, [r4, #40]	; 0x28
    this->b = b;
 80a3600:	9b05      	ldr	r3, [sp, #20]
 80a3602:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80a3604:	bd10      	pop	{r4, pc}
 80a3606:	bf00      	nop
 80a3608:	41e80000 	.word	0x41e80000

080a360c <_ZN8PongBall4tickEv>:
void PongBall::tick() {
 80a360c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3610:	4604      	mov	r4, r0
 80a3612:	f000 fa2d 	bl	80a3a70 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - last_tick > tick_time) {
 80a3616:	69e3      	ldr	r3, [r4, #28]
 80a3618:	1ac0      	subs	r0, r0, r3
 80a361a:	6a23      	ldr	r3, [r4, #32]
 80a361c:	4298      	cmp	r0, r3
 80a361e:	d926      	bls.n	80a366e <_ZN8PongBall4tickEv+0x62>
 80a3620:	f000 fa26 	bl	80a3a70 <HAL_Timer_Get_Milli_Seconds>
        x += xVel;
 80a3624:	68a6      	ldr	r6, [r4, #8]
 80a3626:	6921      	ldr	r1, [r4, #16]
        last_tick = millis();
 80a3628:	61e0      	str	r0, [r4, #28]
        x += xVel;
 80a362a:	4630      	mov	r0, r6
 80a362c:	f006 faa8 	bl	80a9b80 <__addsf3>
        y += yVel;
 80a3630:	68e5      	ldr	r5, [r4, #12]
 80a3632:	6961      	ldr	r1, [r4, #20]
        x += xVel;
 80a3634:	4681      	mov	r9, r0
 80a3636:	6120      	str	r0, [r4, #16]
        y += yVel;
 80a3638:	4628      	mov	r0, r5
 80a363a:	f006 faa1 	bl	80a9b80 <__addsf3>
        if (x <= 0) {
 80a363e:	f04f 0800 	mov.w	r8, #0
        y += yVel;
 80a3642:	4607      	mov	r7, r0
 80a3644:	6160      	str	r0, [r4, #20]
        if (x <= 0) {
 80a3646:	4641      	mov	r1, r8
 80a3648:	4648      	mov	r0, r9
 80a364a:	f006 fd49 	bl	80aa0e0 <__aeabi_fcmple>
 80a364e:	b180      	cbz	r0, 80a3672 <_ZN8PongBall4tickEv+0x66>
            xVel = -xVel;
 80a3650:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
            x = 0;
 80a3654:	f8c4 8010 	str.w	r8, [r4, #16]
            xVel = -xVel;
 80a3658:	60a6      	str	r6, [r4, #8]
        if (y <= 0) {
 80a365a:	2100      	movs	r1, #0
 80a365c:	4638      	mov	r0, r7
 80a365e:	f006 fd3f 	bl	80aa0e0 <__aeabi_fcmple>
 80a3662:	b198      	cbz	r0, 80a368c <_ZN8PongBall4tickEv+0x80>
            yVel = -yVel;
 80a3664:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
            y = 0;
 80a3668:	f8c4 8014 	str.w	r8, [r4, #20]
            yVel = -yVel;
 80a366c:	60e5      	str	r5, [r4, #12]
}
 80a366e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        } else if (x >= NUM_BARS) {
 80a3672:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80a3676:	4648      	mov	r0, r9
 80a3678:	f006 fd3c 	bl	80aa0f4 <__aeabi_fcmpge>
 80a367c:	2800      	cmp	r0, #0
 80a367e:	d0ec      	beq.n	80a365a <_ZN8PongBall4tickEv+0x4e>
            x = NUM_BARS-1;
 80a3680:	4b0d      	ldr	r3, [pc, #52]	; (80a36b8 <_ZN8PongBall4tickEv+0xac>)
            xVel = -xVel;
 80a3682:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
            x = NUM_BARS-1;
 80a3686:	6123      	str	r3, [r4, #16]
            xVel = -xVel;
 80a3688:	60a6      	str	r6, [r4, #8]
 80a368a:	e7e6      	b.n	80a365a <_ZN8PongBall4tickEv+0x4e>
        } else if (y+len >= STRIP_LENGTH) {
 80a368c:	69a6      	ldr	r6, [r4, #24]
 80a368e:	4630      	mov	r0, r6
 80a3690:	f006 fb2a 	bl	80a9ce8 <__aeabi_i2f>
 80a3694:	4639      	mov	r1, r7
 80a3696:	f006 fa73 	bl	80a9b80 <__addsf3>
 80a369a:	4908      	ldr	r1, [pc, #32]	; (80a36bc <_ZN8PongBall4tickEv+0xb0>)
 80a369c:	f006 fd2a 	bl	80aa0f4 <__aeabi_fcmpge>
 80a36a0:	2800      	cmp	r0, #0
 80a36a2:	d0e4      	beq.n	80a366e <_ZN8PongBall4tickEv+0x62>
            y = STRIP_LENGTH-len;
 80a36a4:	f1c6 003a 	rsb	r0, r6, #58	; 0x3a
 80a36a8:	f006 fb1e 	bl	80a9ce8 <__aeabi_i2f>
            yVel = -yVel;
 80a36ac:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
            y = STRIP_LENGTH-len;
 80a36b0:	6160      	str	r0, [r4, #20]
            yVel = -yVel;
 80a36b2:	60e5      	str	r5, [r4, #12]
}
 80a36b4:	e7db      	b.n	80a366e <_ZN8PongBall4tickEv+0x62>
 80a36b6:	bf00      	nop
 80a36b8:	40e00000 	.word	0x40e00000
 80a36bc:	42680000 	.word	0x42680000

080a36c0 <_ZN8PongBall4xPosEv>:
int PongBall::xPos() { return (int) x; }
 80a36c0:	b508      	push	{r3, lr}
 80a36c2:	6900      	ldr	r0, [r0, #16]
 80a36c4:	f006 fd40 	bl	80aa148 <__aeabi_f2iz>
 80a36c8:	bd08      	pop	{r3, pc}

080a36ca <_ZN8PongBall4yPosEv>:
int PongBall::yPos() { return (int) y; }
 80a36ca:	b508      	push	{r3, lr}
 80a36cc:	6940      	ldr	r0, [r0, #20]
 80a36ce:	f006 fd3b 	bl	80aa148 <__aeabi_f2iz>
 80a36d2:	bd08      	pop	{r3, pc}

080a36d4 <_ZN8PongBall8setColorEiii>:
    this->g = g;
 80a36d4:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
    this->b = b;
 80a36d8:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80a36da:	4770      	bx	lr

080a36dc <_ZN10PongPaddleC1Ev>:
#include "pong_paddle.h"

#include "muse.h"

PongPaddle::PongPaddle() {}
 80a36dc:	4770      	bx	lr

080a36de <_ZN10PongPaddleC1Eiffffjiii>:

PongPaddle::PongPaddle(int len, float x, float y, float maxXVel, float maxYVel, unsigned int tickTime, int r, int g, int b) {
 80a36de:	b538      	push	{r3, r4, r5, lr}
 80a36e0:	4604      	mov	r4, r0
    this->len = len;
    this->x = x;
    this->y = y;
 80a36e2:	60a3      	str	r3, [r4, #8]

int PongPaddle::xPos() { return (int) x; }
int PongPaddle::yPos() { return (int) y; }

void PongPaddle::setColor(int r, int g, int b) {
    this->r = r;
 80a36e4:	9b07      	ldr	r3, [sp, #28]
PongPaddle::PongPaddle(int len, float x, float y, float maxXVel, float maxYVel, unsigned int tickTime, int r, int g, int b) {
 80a36e6:	9d04      	ldr	r5, [sp, #16]
    this->r = r;
 80a36e8:	6263      	str	r3, [r4, #36]	; 0x24
    this->g = g;
 80a36ea:	9b08      	ldr	r3, [sp, #32]
PongPaddle::PongPaddle(int len, float x, float y, float maxXVel, float maxYVel, unsigned int tickTime, int r, int g, int b) {
 80a36ec:	9805      	ldr	r0, [sp, #20]
    this->g = g;
 80a36ee:	62a3      	str	r3, [r4, #40]	; 0x28
    this->b = b;
 80a36f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    this->len = len;
 80a36f2:	6021      	str	r1, [r4, #0]
    this->b = b;
 80a36f4:	62e3      	str	r3, [r4, #44]	; 0x2c
    this->x = x;
 80a36f6:	6062      	str	r2, [r4, #4]
    this->maxXVel = maxXVel;
 80a36f8:	6165      	str	r5, [r4, #20]
    this->maxYVel = maxYVel;
 80a36fa:	61a0      	str	r0, [r4, #24]
    this->xVel = maxXVel;
 80a36fc:	60e5      	str	r5, [r4, #12]
    this->yVel = maxYVel;
 80a36fe:	6120      	str	r0, [r4, #16]
 80a3700:	f000 f9b6 	bl	80a3a70 <HAL_Timer_Get_Milli_Seconds>
    tick_time = tickTime;
 80a3704:	9b06      	ldr	r3, [sp, #24]
    last_tick = millis();
 80a3706:	61e0      	str	r0, [r4, #28]
    tick_time = tickTime;
 80a3708:	6223      	str	r3, [r4, #32]
}
 80a370a:	4620      	mov	r0, r4
 80a370c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3710 <_ZN10PongPaddle4tickEP8PongBall>:
void PongPaddle::tick(PongBall * pb) {
 80a3710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3714:	4604      	mov	r4, r0
 80a3716:	460d      	mov	r5, r1
 80a3718:	f000 f9aa 	bl	80a3a70 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - last_tick > tick_time) {
 80a371c:	69e3      	ldr	r3, [r4, #28]
 80a371e:	1ac0      	subs	r0, r0, r3
 80a3720:	6a23      	ldr	r3, [r4, #32]
 80a3722:	4298      	cmp	r0, r3
 80a3724:	d944      	bls.n	80a37b0 <_ZN10PongPaddle4tickEP8PongBall+0xa0>
 80a3726:	f000 f9a3 	bl	80a3a70 <HAL_Timer_Get_Milli_Seconds>
        last_tick = millis();
 80a372a:	61e0      	str	r0, [r4, #28]
        if ((x < pb->x && pb->xVel < 0) || (x > pb->x && pb->xVel > 0)) {
 80a372c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80a3730:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80a3734:	4640      	mov	r0, r8
 80a3736:	4649      	mov	r1, r9
 80a3738:	f006 fcc8 	bl	80aa0cc <__aeabi_fcmplt>
 80a373c:	2700      	movs	r7, #0
 80a373e:	6826      	ldr	r6, [r4, #0]
 80a3740:	b120      	cbz	r0, 80a374c <_ZN10PongPaddle4tickEP8PongBall+0x3c>
 80a3742:	4639      	mov	r1, r7
 80a3744:	68a8      	ldr	r0, [r5, #8]
 80a3746:	f006 fcc1 	bl	80aa0cc <__aeabi_fcmplt>
 80a374a:	b958      	cbnz	r0, 80a3764 <_ZN10PongPaddle4tickEP8PongBall+0x54>
 80a374c:	4649      	mov	r1, r9
 80a374e:	4640      	mov	r0, r8
 80a3750:	f006 fcda 	bl	80aa108 <__aeabi_fcmpgt>
 80a3754:	2800      	cmp	r0, #0
 80a3756:	d038      	beq.n	80a37ca <_ZN10PongPaddle4tickEP8PongBall+0xba>
 80a3758:	2100      	movs	r1, #0
 80a375a:	68a8      	ldr	r0, [r5, #8]
 80a375c:	f006 fcd4 	bl	80aa108 <__aeabi_fcmpgt>
 80a3760:	2800      	cmp	r0, #0
 80a3762:	d032      	beq.n	80a37ca <_ZN10PongPaddle4tickEP8PongBall+0xba>
            if (y+len < pb->y) { yVel = maxYVel; }
 80a3764:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80a3768:	696d      	ldr	r5, [r5, #20]
 80a376a:	6820      	ldr	r0, [r4, #0]
 80a376c:	f006 fabc 	bl	80a9ce8 <__aeabi_i2f>
 80a3770:	4641      	mov	r1, r8
 80a3772:	f006 fa05 	bl	80a9b80 <__addsf3>
 80a3776:	4629      	mov	r1, r5
 80a3778:	f006 fca8 	bl	80aa0cc <__aeabi_fcmplt>
 80a377c:	b1d0      	cbz	r0, 80a37b4 <_ZN10PongPaddle4tickEP8PongBall+0xa4>
 80a377e:	69a3      	ldr	r3, [r4, #24]
 80a3780:	6123      	str	r3, [r4, #16]
        y += yVel;
 80a3782:	6921      	ldr	r1, [r4, #16]
 80a3784:	68a0      	ldr	r0, [r4, #8]
 80a3786:	f006 f9fb 	bl	80a9b80 <__addsf3>
 80a378a:	4605      	mov	r5, r0
 80a378c:	60a0      	str	r0, [r4, #8]
        if ((y+len) >= STRIP_LENGTH) {
 80a378e:	4630      	mov	r0, r6
 80a3790:	f006 faaa 	bl	80a9ce8 <__aeabi_i2f>
 80a3794:	4629      	mov	r1, r5
 80a3796:	f006 f9f3 	bl	80a9b80 <__addsf3>
 80a379a:	492b      	ldr	r1, [pc, #172]	; (80a3848 <_ZN10PongPaddle4tickEP8PongBall+0x138>)
 80a379c:	f006 fcaa 	bl	80aa0f4 <__aeabi_fcmpge>
 80a37a0:	2800      	cmp	r0, #0
 80a37a2:	d048      	beq.n	80a3836 <_ZN10PongPaddle4tickEP8PongBall+0x126>
            y = STRIP_LENGTH-len;
 80a37a4:	f1c6 003a 	rsb	r0, r6, #58	; 0x3a
 80a37a8:	f006 fa9e 	bl	80a9ce8 <__aeabi_i2f>
            yVel = 0;
 80a37ac:	6127      	str	r7, [r4, #16]
            y = STRIP_LENGTH-len;
 80a37ae:	60a0      	str	r0, [r4, #8]
}
 80a37b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            else if (y > pb->y) { yVel = -maxYVel; }
 80a37b4:	4629      	mov	r1, r5
 80a37b6:	4640      	mov	r0, r8
 80a37b8:	f006 fca6 	bl	80aa108 <__aeabi_fcmpgt>
 80a37bc:	2800      	cmp	r0, #0
 80a37be:	d0e0      	beq.n	80a3782 <_ZN10PongPaddle4tickEP8PongBall+0x72>
 80a37c0:	69a3      	ldr	r3, [r4, #24]
 80a37c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a37c6:	6123      	str	r3, [r4, #16]
 80a37c8:	e7db      	b.n	80a3782 <_ZN10PongPaddle4tickEP8PongBall+0x72>
            if (abs(y+len/2 - STRIP_LENGTH/2) > len/4) {
 80a37ca:	eb06 70d6 	add.w	r0, r6, r6, lsr #31
 80a37ce:	1040      	asrs	r0, r0, #1
 80a37d0:	f006 fa8a 	bl	80a9ce8 <__aeabi_i2f>
 80a37d4:	68a1      	ldr	r1, [r4, #8]
 80a37d6:	f006 f9d3 	bl	80a9b80 <__addsf3>
 80a37da:	491c      	ldr	r1, [pc, #112]	; (80a384c <_ZN10PongPaddle4tickEP8PongBall+0x13c>)
 80a37dc:	4680      	mov	r8, r0
 80a37de:	f006 f9cd 	bl	80a9b7c <__aeabi_fsub>
 80a37e2:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80a37e6:	4630      	mov	r0, r6
 80a37e8:	2e00      	cmp	r6, #0
 80a37ea:	bfb8      	it	lt
 80a37ec:	1cf0      	addlt	r0, r6, #3
 80a37ee:	1080      	asrs	r0, r0, #2
 80a37f0:	f006 fa7a 	bl	80a9ce8 <__aeabi_i2f>
 80a37f4:	4601      	mov	r1, r0
 80a37f6:	4628      	mov	r0, r5
 80a37f8:	f006 fc86 	bl	80aa108 <__aeabi_fcmpgt>
 80a37fc:	b1c8      	cbz	r0, 80a3832 <_ZN10PongPaddle4tickEP8PongBall+0x122>
                if (y+len/2 > STRIP_LENGTH/2) { yVel = 1.0 < maxYVel ? -1.0 : -maxYVel; }
 80a37fe:	4913      	ldr	r1, [pc, #76]	; (80a384c <_ZN10PongPaddle4tickEP8PongBall+0x13c>)
 80a3800:	4640      	mov	r0, r8
 80a3802:	f006 fc81 	bl	80aa108 <__aeabi_fcmpgt>
 80a3806:	69a5      	ldr	r5, [r4, #24]
 80a3808:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a380c:	b148      	cbz	r0, 80a3822 <_ZN10PongPaddle4tickEP8PongBall+0x112>
 80a380e:	4628      	mov	r0, r5
 80a3810:	f006 fc7a 	bl	80aa108 <__aeabi_fcmpgt>
 80a3814:	b918      	cbnz	r0, 80a381e <_ZN10PongPaddle4tickEP8PongBall+0x10e>
 80a3816:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
                else { yVel = 1.0 < maxYVel ? 1.0 : maxYVel; }
 80a381a:	6125      	str	r5, [r4, #16]
 80a381c:	e7b1      	b.n	80a3782 <_ZN10PongPaddle4tickEP8PongBall+0x72>
                if (y+len/2 > STRIP_LENGTH/2) { yVel = 1.0 < maxYVel ? -1.0 : -maxYVel; }
 80a381e:	4d0c      	ldr	r5, [pc, #48]	; (80a3850 <_ZN10PongPaddle4tickEP8PongBall+0x140>)
 80a3820:	e7fb      	b.n	80a381a <_ZN10PongPaddle4tickEP8PongBall+0x10a>
                else { yVel = 1.0 < maxYVel ? 1.0 : maxYVel; }
 80a3822:	4628      	mov	r0, r5
 80a3824:	f006 fc70 	bl	80aa108 <__aeabi_fcmpgt>
 80a3828:	2800      	cmp	r0, #0
 80a382a:	d0f6      	beq.n	80a381a <_ZN10PongPaddle4tickEP8PongBall+0x10a>
 80a382c:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 80a3830:	e7f3      	b.n	80a381a <_ZN10PongPaddle4tickEP8PongBall+0x10a>
                yVel = 0;
 80a3832:	6127      	str	r7, [r4, #16]
 80a3834:	e7a5      	b.n	80a3782 <_ZN10PongPaddle4tickEP8PongBall+0x72>
        } else if (y <= 0) {
 80a3836:	2100      	movs	r1, #0
 80a3838:	4628      	mov	r0, r5
 80a383a:	f006 fc51 	bl	80aa0e0 <__aeabi_fcmple>
 80a383e:	2800      	cmp	r0, #0
 80a3840:	d0b6      	beq.n	80a37b0 <_ZN10PongPaddle4tickEP8PongBall+0xa0>
            y = 0;
 80a3842:	60a7      	str	r7, [r4, #8]
            yVel = 0;
 80a3844:	6127      	str	r7, [r4, #16]
}
 80a3846:	e7b3      	b.n	80a37b0 <_ZN10PongPaddle4tickEP8PongBall+0xa0>
 80a3848:	42680000 	.word	0x42680000
 80a384c:	41e80000 	.word	0x41e80000
 80a3850:	bf800000 	.word	0xbf800000

080a3854 <_ZN10PongPaddle4xPosEv>:
int PongPaddle::xPos() { return (int) x; }
 80a3854:	b508      	push	{r3, lr}
 80a3856:	6840      	ldr	r0, [r0, #4]
 80a3858:	f006 fc76 	bl	80aa148 <__aeabi_f2iz>
 80a385c:	bd08      	pop	{r3, pc}

080a385e <_ZN10PongPaddle4yPosEv>:
int PongPaddle::yPos() { return (int) y; }
 80a385e:	b508      	push	{r3, lr}
 80a3860:	6880      	ldr	r0, [r0, #8]
 80a3862:	f006 fc71 	bl	80aa148 <__aeabi_f2iz>
 80a3866:	bd08      	pop	{r3, pc}

080a3868 <_ZN10PongPaddle8setColorEiii>:
    this->g = g;
 80a3868:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
    this->b = b;
 80a386c:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80a386e:	4770      	bx	lr

080a3870 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a3870:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a3872:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a3874:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a3876:	b17c      	cbz	r4, 80a3898 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a3878:	6863      	ldr	r3, [r4, #4]
 80a387a:	3b01      	subs	r3, #1
 80a387c:	6063      	str	r3, [r4, #4]
 80a387e:	b95b      	cbnz	r3, 80a3898 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a3880:	6823      	ldr	r3, [r4, #0]
 80a3882:	4620      	mov	r0, r4
 80a3884:	689b      	ldr	r3, [r3, #8]
 80a3886:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a3888:	68a3      	ldr	r3, [r4, #8]
 80a388a:	3b01      	subs	r3, #1
 80a388c:	60a3      	str	r3, [r4, #8]
 80a388e:	b91b      	cbnz	r3, 80a3898 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a3890:	6823      	ldr	r3, [r4, #0]
 80a3892:	4620      	mov	r0, r4
 80a3894:	68db      	ldr	r3, [r3, #12]
 80a3896:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a3898:	4628      	mov	r0, r5
 80a389a:	bd38      	pop	{r3, r4, r5, pc}

080a389c <_ZN9WebServerD1Ev>:
                       URLPARAM_VALUE_OFLO,
                       URLPARAM_BOTH_OFLO,
                       URLPARAM_EOS         // No params left
};

class WebServer: public Print
 80a389c:	b538      	push	{r3, r4, r5, lr}
 80a389e:	4604      	mov	r4, r0
 80a38a0:	4b09      	ldr	r3, [pc, #36]	; (80a38c8 <_ZN9WebServerD1Ev+0x2c>)
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a38a2:	4d0a      	ldr	r5, [pc, #40]	; (80a38cc <_ZN9WebServerD1Ev+0x30>)
 80a38a4:	6003      	str	r3, [r0, #0]
 80a38a6:	6385      	str	r5, [r0, #56]	; 0x38
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a38a8:	3050      	adds	r0, #80	; 0x50
 80a38aa:	f7ff ffe1 	bl	80a3870 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    sock_handle_t _sock;
    TCPClient _client;

public:
    TCPServer(uint16_t, network_interface_t nif=0);
    ~TCPServer() { stop(); }
 80a38ae:	4620      	mov	r0, r4
 80a38b0:	4b07      	ldr	r3, [pc, #28]	; (80a38d0 <_ZN9WebServerD1Ev+0x34>)
 80a38b2:	f840 3f08 	str.w	r3, [r0, #8]!
 80a38b6:	f001 fb81 	bl	80a4fbc <_ZN9TCPServer4stopEv>
 80a38ba:	61e5      	str	r5, [r4, #28]
 80a38bc:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80a38c0:	f7ff ffd6 	bl	80a3870 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a38c4:	4620      	mov	r0, r4
 80a38c6:	bd38      	pop	{r3, r4, r5, pc}
 80a38c8:	080aa5ec 	.word	0x080aa5ec
 80a38cc:	080aa728 	.word	0x080aa728
 80a38d0:	080aa774 	.word	0x080aa774

080a38d4 <_ZN9WebServerD0Ev>:
 80a38d4:	b510      	push	{r4, lr}
 80a38d6:	4604      	mov	r4, r0
 80a38d8:	f7ff ffe0 	bl	80a389c <_ZN9WebServerD1Ev>
 80a38dc:	4620      	mov	r0, r4
 80a38de:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80a38e2:	f001 ff72 	bl	80a57ca <_ZdlPvj>
 80a38e6:	4620      	mov	r0, r4
 80a38e8:	bd10      	pop	{r4, pc}
	...

080a38ec <_GLOBAL__sub_I_webserver>:

        /* we don't output the body for a HEAD request */
        if (type == WebServer::GET) {
            server.printP(control_panel);
        }
}
 80a38ec:	b510      	push	{r4, lr}
WebServer webserver(PREFIX, 80);
 80a38ee:	4c06      	ldr	r4, [pc, #24]	; (80a3908 <_GLOBAL__sub_I_webserver+0x1c>)
 80a38f0:	2250      	movs	r2, #80	; 0x50
 80a38f2:	4620      	mov	r0, r4
 80a38f4:	4905      	ldr	r1, [pc, #20]	; (80a390c <_GLOBAL__sub_I_webserver+0x20>)
 80a38f6:	f000 f827 	bl	80a3948 <_ZN9WebServerC1EPKct>
 80a38fa:	4620      	mov	r0, r4
}
 80a38fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
WebServer webserver(PREFIX, 80);
 80a3900:	4a03      	ldr	r2, [pc, #12]	; (80a3910 <_GLOBAL__sub_I_webserver+0x24>)
 80a3902:	4904      	ldr	r1, [pc, #16]	; (80a3914 <_GLOBAL__sub_I_webserver+0x28>)
 80a3904:	f001 bf5c 	b.w	80a57c0 <__aeabi_atexit>
 80a3908:	20000e88 	.word	0x20000e88
 80a390c:	080aa5b8 	.word	0x080aa5b8
 80a3910:	2000006c 	.word	0x2000006c
 80a3914:	080a389d 	.word	0x080a389d

080a3918 <_ZN9WebServer5writeEh>:
{
  m_urlPathCmd = cmd;
}

size_t WebServer::write(uint8_t ch)
{
 80a3918:	b510      	push	{r4, lr}
  m_buffer[m_bufFill++] = ch;
 80a391a:	f890 3144 	ldrb.w	r3, [r0, #324]	; 0x144
{
 80a391e:	4604      	mov	r4, r0
  m_buffer[m_bufFill++] = ch;
 80a3920:	1c5a      	adds	r2, r3, #1
 80a3922:	b2d2      	uxtb	r2, r2
 80a3924:	4403      	add	r3, r0

  if(m_bufFill == sizeof(m_buffer))
 80a3926:	2a20      	cmp	r2, #32
  m_buffer[m_bufFill++] = ch;
 80a3928:	f880 2144 	strb.w	r2, [r0, #324]	; 0x144
 80a392c:	f883 1124 	strb.w	r1, [r3, #292]	; 0x124
  if(m_bufFill == sizeof(m_buffer))
 80a3930:	d107      	bne.n	80a3942 <_ZN9WebServer5writeEh+0x2a>
  {
    m_client.write(m_buffer, sizeof(m_buffer));
 80a3932:	f500 7192 	add.w	r1, r0, #292	; 0x124
 80a3936:	3038      	adds	r0, #56	; 0x38
 80a3938:	f001 f871 	bl	80a4a1e <_ZN9TCPClient5writeEPKhj>
    m_bufFill = 0;
 80a393c:	2300      	movs	r3, #0
 80a393e:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
  }

  return sizeof(ch);
}
 80a3942:	2001      	movs	r0, #1
 80a3944:	bd10      	pop	{r4, pc}
	...

080a3948 <_ZN9WebServerC1EPKct>:
WebServer::WebServer(const char *urlPrefix, uint16_t port) :
 80a3948:	b570      	push	{r4, r5, r6, lr}
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
 80a394a:	2500      	movs	r5, #0
 80a394c:	4604      	mov	r4, r0
 80a394e:	460e      	mov	r6, r1
  m_bufFill(0)
 80a3950:	4b0d      	ldr	r3, [pc, #52]	; (80a3988 <_ZN9WebServerC1EPKct+0x40>)
WebServer::WebServer(const char *urlPrefix, uint16_t port) :
 80a3952:	4611      	mov	r1, r2
 80a3954:	6045      	str	r5, [r0, #4]
  m_bufFill(0)
 80a3956:	462a      	mov	r2, r5
 80a3958:	f840 3b08 	str.w	r3, [r0], #8
 80a395c:	f001 fafe 	bl	80a4f5c <_ZN9TCPServerC1Etm>
 80a3960:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a3964:	f001 fa80 	bl	80a4e68 <_ZN9TCPClientC1Ev>
 80a3968:	4b08      	ldr	r3, [pc, #32]	; (80a398c <_ZN9WebServerC1EPKct+0x44>)
}
 80a396a:	4620      	mov	r0, r4
  m_bufFill(0)
 80a396c:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
 80a3970:	6566      	str	r6, [r4, #84]	; 0x54
 80a3972:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80a3976:	67e5      	str	r5, [r4, #124]	; 0x7c
 80a3978:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
 80a397c:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
 80a3980:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
}
 80a3984:	bd70      	pop	{r4, r5, r6, pc}
 80a3986:	bf00      	nop
 80a3988:	080aa5ec 	.word	0x080aa5ec
 80a398c:	080a3a0d 	.word	0x080a3a0d

080a3990 <_ZN9WebServer8flushBufEv>:
  flushBuf(); //Flush any buffered output
  return m_client.write(buffer, size);
}

void WebServer::flushBuf()
{
 80a3990:	b510      	push	{r4, lr}
  if(m_bufFill > 0)
 80a3992:	f890 2144 	ldrb.w	r2, [r0, #324]	; 0x144
{
 80a3996:	4604      	mov	r4, r0
  if(m_bufFill > 0)
 80a3998:	b13a      	cbz	r2, 80a39aa <_ZN9WebServer8flushBufEv+0x1a>
  {
    m_client.write(m_buffer, m_bufFill);
 80a399a:	f500 7192 	add.w	r1, r0, #292	; 0x124
 80a399e:	3038      	adds	r0, #56	; 0x38
 80a39a0:	f001 f83d 	bl	80a4a1e <_ZN9TCPClient5writeEPKhj>
    m_bufFill = 0;
 80a39a4:	2300      	movs	r3, #0
 80a39a6:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
  }
}
 80a39aa:	bd10      	pop	{r4, pc}

080a39ac <_ZN9WebServer5writeEPKhj>:
{
 80a39ac:	b570      	push	{r4, r5, r6, lr}
 80a39ae:	4604      	mov	r4, r0
 80a39b0:	460d      	mov	r5, r1
 80a39b2:	4616      	mov	r6, r2
  flushBuf(); //Flush any buffered output
 80a39b4:	f7ff ffec 	bl	80a3990 <_ZN9WebServer8flushBufEv>
  return m_client.write(buffer, size);
 80a39b8:	4632      	mov	r2, r6
 80a39ba:	4629      	mov	r1, r5
 80a39bc:	f104 0038 	add.w	r0, r4, #56	; 0x38
}
 80a39c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return m_client.write(buffer, size);
 80a39c4:	f001 b82b 	b.w	80a4a1e <_ZN9TCPClient5writeEPKhj>

080a39c8 <_ZN9WebServer6printPEPKh>:
    write(pgm_read_byte(data++));
  }
}

void WebServer::printP(const unsigned char *str)
{
 80a39c8:	b538      	push	{r3, r4, r5, lr}
 80a39ca:	4604      	mov	r4, r0
 80a39cc:	460d      	mov	r5, r1
  // copy data out of program memory into local storage

  while (uint8_t value = pgm_read_byte(str++))
 80a39ce:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a39d2:	b121      	cbz	r1, 80a39de <_ZN9WebServer6printPEPKh+0x16>
  {
    write(value);
 80a39d4:	6823      	ldr	r3, [r4, #0]
 80a39d6:	4620      	mov	r0, r4
 80a39d8:	689b      	ldr	r3, [r3, #8]
 80a39da:	4798      	blx	r3
  }
 80a39dc:	e7f7      	b.n	80a39ce <_ZN9WebServer6printPEPKh+0x6>
}
 80a39de:	bd38      	pop	{r3, r4, r5, pc}

080a39e0 <_ZN9WebServer8httpFailEv>:
     (0 == strcmp(authCredentials, m_authCredentials + 6))) return true;
  return false;
}

void WebServer::httpFail()
{
 80a39e0:	b510      	push	{r4, lr}
 80a39e2:	4604      	mov	r4, r0
  P(failMsg1) = "HTTP/1.0 400 Bad Request" CRLF;
  printP(failMsg1);
 80a39e4:	4906      	ldr	r1, [pc, #24]	; (80a3a00 <_ZN9WebServer8httpFailEv+0x20>)
 80a39e6:	f7ff ffef 	bl	80a39c8 <_ZN9WebServer6printPEPKh>

#ifndef WEBDUINO_SUPRESS_SERVER_HEADER
  printP(webServerHeader);
 80a39ea:	4620      	mov	r0, r4
 80a39ec:	4905      	ldr	r1, [pc, #20]	; (80a3a04 <_ZN9WebServer8httpFailEv+0x24>)
 80a39ee:	f7ff ffeb 	bl	80a39c8 <_ZN9WebServer6printPEPKh>
  P(failMsg2) =
    "Content-Type: text/html" CRLF
    CRLF
    WEBDUINO_FAIL_MESSAGE;

  printP(failMsg2);
 80a39f2:	4620      	mov	r0, r4
}
 80a39f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  printP(failMsg2);
 80a39f8:	4903      	ldr	r1, [pc, #12]	; (80a3a08 <_ZN9WebServer8httpFailEv+0x28>)
 80a39fa:	f7ff bfe5 	b.w	80a39c8 <_ZN9WebServer6printPEPKh>
 80a39fe:	bf00      	nop
 80a3a00:	080aa5fc 	.word	0x080aa5fc
 80a3a04:	080aa5cb 	.word	0x080aa5cb
 80a3a08:	080aa617 	.word	0x080aa617

080a3a0c <_ZN9WebServer14defaultFailCmdERS_NS_14ConnectionTypeEPcbPv>:
                               WebServer::ConnectionType type,
                               char *url_tail,
                               bool tail_complete,
                               void * obj)
{
  server.httpFail();
 80a3a0c:	f7ff bfe8 	b.w	80a39e0 <_ZN9WebServer8httpFailEv>

080a3a10 <os_thread_scheduling>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 80a3a10:	b508      	push	{r3, lr}
 80a3a12:	4b02      	ldr	r3, [pc, #8]	; (80a3a1c <os_thread_scheduling+0xc>)
 80a3a14:	681b      	ldr	r3, [r3, #0]
 80a3a16:	69db      	ldr	r3, [r3, #28]
 80a3a18:	9301      	str	r3, [sp, #4]
 80a3a1a:	bd08      	pop	{r3, pc}
 80a3a1c:	080601d0 	.word	0x080601d0

080a3a20 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a3a20:	b508      	push	{r3, lr}
 80a3a22:	4b02      	ldr	r3, [pc, #8]	; (80a3a2c <os_mutex_recursive_create+0xc>)
 80a3a24:	681b      	ldr	r3, [r3, #0]
 80a3a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3a28:	9301      	str	r3, [sp, #4]
 80a3a2a:	bd08      	pop	{r3, pc}
 80a3a2c:	080601d0 	.word	0x080601d0

080a3a30 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a3a30:	b508      	push	{r3, lr}
 80a3a32:	4b02      	ldr	r3, [pc, #8]	; (80a3a3c <os_mutex_recursive_destroy+0xc>)
 80a3a34:	681b      	ldr	r3, [r3, #0]
 80a3a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3a38:	9301      	str	r3, [sp, #4]
 80a3a3a:	bd08      	pop	{r3, pc}
 80a3a3c:	080601d0 	.word	0x080601d0

080a3a40 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a3a40:	b508      	push	{r3, lr}
 80a3a42:	4b02      	ldr	r3, [pc, #8]	; (80a3a4c <HAL_RNG_GetRandomNumber+0xc>)
 80a3a44:	681b      	ldr	r3, [r3, #0]
 80a3a46:	685b      	ldr	r3, [r3, #4]
 80a3a48:	9301      	str	r3, [sp, #4]
 80a3a4a:	bd08      	pop	{r3, pc}
 80a3a4c:	0806019c 	.word	0x0806019c

080a3a50 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a3a50:	b508      	push	{r3, lr}
 80a3a52:	4b02      	ldr	r3, [pc, #8]	; (80a3a5c <HAL_Delay_Microseconds+0xc>)
 80a3a54:	681b      	ldr	r3, [r3, #0]
 80a3a56:	68db      	ldr	r3, [r3, #12]
 80a3a58:	9301      	str	r3, [sp, #4]
 80a3a5a:	bd08      	pop	{r3, pc}
 80a3a5c:	0806019c 	.word	0x0806019c

080a3a60 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a3a60:	b508      	push	{r3, lr}
 80a3a62:	4b02      	ldr	r3, [pc, #8]	; (80a3a6c <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a3a64:	681b      	ldr	r3, [r3, #0]
 80a3a66:	691b      	ldr	r3, [r3, #16]
 80a3a68:	9301      	str	r3, [sp, #4]
 80a3a6a:	bd08      	pop	{r3, pc}
 80a3a6c:	0806019c 	.word	0x0806019c

080a3a70 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a3a70:	b508      	push	{r3, lr}
 80a3a72:	4b02      	ldr	r3, [pc, #8]	; (80a3a7c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a3a74:	681b      	ldr	r3, [r3, #0]
 80a3a76:	695b      	ldr	r3, [r3, #20]
 80a3a78:	9301      	str	r3, [sp, #4]
 80a3a7a:	bd08      	pop	{r3, pc}
 80a3a7c:	0806019c 	.word	0x0806019c

080a3a80 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a3a80:	b508      	push	{r3, lr}
 80a3a82:	4b02      	ldr	r3, [pc, #8]	; (80a3a8c <hal_rtc_time_is_valid+0xc>)
 80a3a84:	681b      	ldr	r3, [r3, #0]
 80a3a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3a88:	9301      	str	r3, [sp, #4]
 80a3a8a:	bd08      	pop	{r3, pc}
 80a3a8c:	0806019c 	.word	0x0806019c

080a3a90 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a3a90:	b508      	push	{r3, lr}
 80a3a92:	4b02      	ldr	r3, [pc, #8]	; (80a3a9c <hal_rtc_get_time+0xc>)
 80a3a94:	681b      	ldr	r3, [r3, #0]
 80a3a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a3a98:	9301      	str	r3, [sp, #4]
 80a3a9a:	bd08      	pop	{r3, pc}
 80a3a9c:	0806019c 	.word	0x0806019c

080a3aa0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a3aa0:	b508      	push	{r3, lr}
 80a3aa2:	4b02      	ldr	r3, [pc, #8]	; (80a3aac <HAL_Pin_Map+0xc>)
 80a3aa4:	681b      	ldr	r3, [r3, #0]
 80a3aa6:	681b      	ldr	r3, [r3, #0]
 80a3aa8:	9301      	str	r3, [sp, #4]
 80a3aaa:	bd08      	pop	{r3, pc}
 80a3aac:	080601b0 	.word	0x080601b0

080a3ab0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a3ab0:	b508      	push	{r3, lr}
 80a3ab2:	4b02      	ldr	r3, [pc, #8]	; (80a3abc <HAL_Validate_Pin_Function+0xc>)
 80a3ab4:	681b      	ldr	r3, [r3, #0]
 80a3ab6:	685b      	ldr	r3, [r3, #4]
 80a3ab8:	9301      	str	r3, [sp, #4]
 80a3aba:	bd08      	pop	{r3, pc}
 80a3abc:	080601b0 	.word	0x080601b0

080a3ac0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a3ac0:	b508      	push	{r3, lr}
 80a3ac2:	4b02      	ldr	r3, [pc, #8]	; (80a3acc <HAL_Pin_Mode+0xc>)
 80a3ac4:	681b      	ldr	r3, [r3, #0]
 80a3ac6:	689b      	ldr	r3, [r3, #8]
 80a3ac8:	9301      	str	r3, [sp, #4]
 80a3aca:	bd08      	pop	{r3, pc}
 80a3acc:	080601b0 	.word	0x080601b0

080a3ad0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a3ad0:	b508      	push	{r3, lr}
 80a3ad2:	4b02      	ldr	r3, [pc, #8]	; (80a3adc <HAL_Get_Pin_Mode+0xc>)
 80a3ad4:	681b      	ldr	r3, [r3, #0]
 80a3ad6:	68db      	ldr	r3, [r3, #12]
 80a3ad8:	9301      	str	r3, [sp, #4]
 80a3ada:	bd08      	pop	{r3, pc}
 80a3adc:	080601b0 	.word	0x080601b0

080a3ae0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a3ae0:	b508      	push	{r3, lr}
 80a3ae2:	4b02      	ldr	r3, [pc, #8]	; (80a3aec <HAL_GPIO_Write+0xc>)
 80a3ae4:	681b      	ldr	r3, [r3, #0]
 80a3ae6:	691b      	ldr	r3, [r3, #16]
 80a3ae8:	9301      	str	r3, [sp, #4]
 80a3aea:	bd08      	pop	{r3, pc}
 80a3aec:	080601b0 	.word	0x080601b0

080a3af0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a3af0:	b508      	push	{r3, lr}
 80a3af2:	4b02      	ldr	r3, [pc, #8]	; (80a3afc <hal_adc_read+0xc>)
 80a3af4:	681b      	ldr	r3, [r3, #0]
 80a3af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3af8:	9301      	str	r3, [sp, #4]
 80a3afa:	bd08      	pop	{r3, pc}
 80a3afc:	080601b0 	.word	0x080601b0

080a3b00 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a3b00:	b508      	push	{r3, lr}
 80a3b02:	4b02      	ldr	r3, [pc, #8]	; (80a3b0c <hal_i2c_write+0xc>)
 80a3b04:	681b      	ldr	r3, [r3, #0]
 80a3b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a3b08:	9301      	str	r3, [sp, #4]
 80a3b0a:	bd08      	pop	{r3, pc}
 80a3b0c:	080601ac 	.word	0x080601ac

080a3b10 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a3b10:	b508      	push	{r3, lr}
 80a3b12:	4b02      	ldr	r3, [pc, #8]	; (80a3b1c <hal_i2c_available+0xc>)
 80a3b14:	681b      	ldr	r3, [r3, #0]
 80a3b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a3b18:	9301      	str	r3, [sp, #4]
 80a3b1a:	bd08      	pop	{r3, pc}
 80a3b1c:	080601ac 	.word	0x080601ac

080a3b20 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a3b20:	b508      	push	{r3, lr}
 80a3b22:	4b02      	ldr	r3, [pc, #8]	; (80a3b2c <hal_i2c_read+0xc>)
 80a3b24:	681b      	ldr	r3, [r3, #0]
 80a3b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a3b28:	9301      	str	r3, [sp, #4]
 80a3b2a:	bd08      	pop	{r3, pc}
 80a3b2c:	080601ac 	.word	0x080601ac

080a3b30 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a3b30:	b508      	push	{r3, lr}
 80a3b32:	4b02      	ldr	r3, [pc, #8]	; (80a3b3c <hal_i2c_peek+0xc>)
 80a3b34:	681b      	ldr	r3, [r3, #0]
 80a3b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a3b38:	9301      	str	r3, [sp, #4]
 80a3b3a:	bd08      	pop	{r3, pc}
 80a3b3c:	080601ac 	.word	0x080601ac

080a3b40 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a3b40:	b508      	push	{r3, lr}
 80a3b42:	4b02      	ldr	r3, [pc, #8]	; (80a3b4c <hal_i2c_flush+0xc>)
 80a3b44:	681b      	ldr	r3, [r3, #0]
 80a3b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a3b48:	9301      	str	r3, [sp, #4]
 80a3b4a:	bd08      	pop	{r3, pc}
 80a3b4c:	080601ac 	.word	0x080601ac

080a3b50 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a3b50:	b508      	push	{r3, lr}
 80a3b52:	4b02      	ldr	r3, [pc, #8]	; (80a3b5c <hal_i2c_is_enabled+0xc>)
 80a3b54:	681b      	ldr	r3, [r3, #0]
 80a3b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a3b58:	9301      	str	r3, [sp, #4]
 80a3b5a:	bd08      	pop	{r3, pc}
 80a3b5c:	080601ac 	.word	0x080601ac

080a3b60 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a3b60:	b508      	push	{r3, lr}
 80a3b62:	4b03      	ldr	r3, [pc, #12]	; (80a3b70 <hal_i2c_init+0x10>)
 80a3b64:	681b      	ldr	r3, [r3, #0]
 80a3b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a3b6a:	9301      	str	r3, [sp, #4]
 80a3b6c:	bd08      	pop	{r3, pc}
 80a3b6e:	0000      	.short	0x0000
 80a3b70:	080601ac 	.word	0x080601ac

080a3b74 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a3b74:	b508      	push	{r3, lr}
 80a3b76:	4b02      	ldr	r3, [pc, #8]	; (80a3b80 <socket_active_status+0xc>)
 80a3b78:	681b      	ldr	r3, [r3, #0]
 80a3b7a:	681b      	ldr	r3, [r3, #0]
 80a3b7c:	9301      	str	r3, [sp, #4]
 80a3b7e:	bd08      	pop	{r3, pc}
 80a3b80:	080601bc 	.word	0x080601bc

080a3b84 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a3b84:	b508      	push	{r3, lr}
 80a3b86:	4b02      	ldr	r3, [pc, #8]	; (80a3b90 <socket_handle_valid+0xc>)
 80a3b88:	681b      	ldr	r3, [r3, #0]
 80a3b8a:	685b      	ldr	r3, [r3, #4]
 80a3b8c:	9301      	str	r3, [sp, #4]
 80a3b8e:	bd08      	pop	{r3, pc}
 80a3b90:	080601bc 	.word	0x080601bc

080a3b94 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a3b94:	b508      	push	{r3, lr}
 80a3b96:	4b02      	ldr	r3, [pc, #8]	; (80a3ba0 <socket_create+0xc>)
 80a3b98:	681b      	ldr	r3, [r3, #0]
 80a3b9a:	689b      	ldr	r3, [r3, #8]
 80a3b9c:	9301      	str	r3, [sp, #4]
 80a3b9e:	bd08      	pop	{r3, pc}
 80a3ba0:	080601bc 	.word	0x080601bc

080a3ba4 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a3ba4:	b508      	push	{r3, lr}
 80a3ba6:	4b02      	ldr	r3, [pc, #8]	; (80a3bb0 <socket_connect+0xc>)
 80a3ba8:	681b      	ldr	r3, [r3, #0]
 80a3baa:	68db      	ldr	r3, [r3, #12]
 80a3bac:	9301      	str	r3, [sp, #4]
 80a3bae:	bd08      	pop	{r3, pc}
 80a3bb0:	080601bc 	.word	0x080601bc

080a3bb4 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a3bb4:	b508      	push	{r3, lr}
 80a3bb6:	4b02      	ldr	r3, [pc, #8]	; (80a3bc0 <socket_receive+0xc>)
 80a3bb8:	681b      	ldr	r3, [r3, #0]
 80a3bba:	691b      	ldr	r3, [r3, #16]
 80a3bbc:	9301      	str	r3, [sp, #4]
 80a3bbe:	bd08      	pop	{r3, pc}
 80a3bc0:	080601bc 	.word	0x080601bc

080a3bc4 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a3bc4:	b508      	push	{r3, lr}
 80a3bc6:	4b02      	ldr	r3, [pc, #8]	; (80a3bd0 <socket_close+0xc>)
 80a3bc8:	681b      	ldr	r3, [r3, #0]
 80a3bca:	6a1b      	ldr	r3, [r3, #32]
 80a3bcc:	9301      	str	r3, [sp, #4]
 80a3bce:	bd08      	pop	{r3, pc}
 80a3bd0:	080601bc 	.word	0x080601bc

080a3bd4 <socket_create_tcp_server>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
 80a3bd4:	b508      	push	{r3, lr}
 80a3bd6:	4b02      	ldr	r3, [pc, #8]	; (80a3be0 <socket_create_tcp_server+0xc>)
 80a3bd8:	681b      	ldr	r3, [r3, #0]
 80a3bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3bdc:	9301      	str	r3, [sp, #4]
 80a3bde:	bd08      	pop	{r3, pc}
 80a3be0:	080601bc 	.word	0x080601bc

080a3be4 <socket_handle_invalid>:
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a3be4:	b508      	push	{r3, lr}
 80a3be6:	4b02      	ldr	r3, [pc, #8]	; (80a3bf0 <socket_handle_invalid+0xc>)
 80a3be8:	681b      	ldr	r3, [r3, #0]
 80a3bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3bec:	9301      	str	r3, [sp, #4]
 80a3bee:	bd08      	pop	{r3, pc}
 80a3bf0:	080601bc 	.word	0x080601bc

080a3bf4 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a3bf4:	b508      	push	{r3, lr}
 80a3bf6:	4b02      	ldr	r3, [pc, #8]	; (80a3c00 <socket_send_ex+0xc>)
 80a3bf8:	681b      	ldr	r3, [r3, #0]
 80a3bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3bfc:	9301      	str	r3, [sp, #4]
 80a3bfe:	bd08      	pop	{r3, pc}
 80a3c00:	080601bc 	.word	0x080601bc

080a3c04 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a3c04:	b508      	push	{r3, lr}
 80a3c06:	4b02      	ldr	r3, [pc, #8]	; (80a3c10 <hal_spi_init+0xc>)
 80a3c08:	681b      	ldr	r3, [r3, #0]
 80a3c0a:	69db      	ldr	r3, [r3, #28]
 80a3c0c:	9301      	str	r3, [sp, #4]
 80a3c0e:	bd08      	pop	{r3, pc}
 80a3c10:	080601b4 	.word	0x080601b4

080a3c14 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a3c14:	b508      	push	{r3, lr}
 80a3c16:	4b02      	ldr	r3, [pc, #8]	; (80a3c20 <hal_spi_is_enabled+0xc>)
 80a3c18:	681b      	ldr	r3, [r3, #0]
 80a3c1a:	6a1b      	ldr	r3, [r3, #32]
 80a3c1c:	9301      	str	r3, [sp, #4]
 80a3c1e:	bd08      	pop	{r3, pc}
 80a3c20:	080601b4 	.word	0x080601b4

080a3c24 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a3c24:	b508      	push	{r3, lr}
 80a3c26:	4b02      	ldr	r3, [pc, #8]	; (80a3c30 <hal_usart_init+0xc>)
 80a3c28:	681b      	ldr	r3, [r3, #0]
 80a3c2a:	699b      	ldr	r3, [r3, #24]
 80a3c2c:	9301      	str	r3, [sp, #4]
 80a3c2e:	bd08      	pop	{r3, pc}
 80a3c30:	080601c4 	.word	0x080601c4

080a3c34 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a3c34:	b508      	push	{r3, lr}
 80a3c36:	4b02      	ldr	r3, [pc, #8]	; (80a3c40 <hal_usart_write+0xc>)
 80a3c38:	681b      	ldr	r3, [r3, #0]
 80a3c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3c3c:	9301      	str	r3, [sp, #4]
 80a3c3e:	bd08      	pop	{r3, pc}
 80a3c40:	080601c4 	.word	0x080601c4

080a3c44 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a3c44:	b508      	push	{r3, lr}
 80a3c46:	4b02      	ldr	r3, [pc, #8]	; (80a3c50 <hal_usart_available+0xc>)
 80a3c48:	681b      	ldr	r3, [r3, #0]
 80a3c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3c4c:	9301      	str	r3, [sp, #4]
 80a3c4e:	bd08      	pop	{r3, pc}
 80a3c50:	080601c4 	.word	0x080601c4

080a3c54 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a3c54:	b508      	push	{r3, lr}
 80a3c56:	4b02      	ldr	r3, [pc, #8]	; (80a3c60 <hal_usart_read+0xc>)
 80a3c58:	681b      	ldr	r3, [r3, #0]
 80a3c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3c5c:	9301      	str	r3, [sp, #4]
 80a3c5e:	bd08      	pop	{r3, pc}
 80a3c60:	080601c4 	.word	0x080601c4

080a3c64 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a3c64:	b508      	push	{r3, lr}
 80a3c66:	4b02      	ldr	r3, [pc, #8]	; (80a3c70 <hal_usart_peek+0xc>)
 80a3c68:	681b      	ldr	r3, [r3, #0]
 80a3c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3c6c:	9301      	str	r3, [sp, #4]
 80a3c6e:	bd08      	pop	{r3, pc}
 80a3c70:	080601c4 	.word	0x080601c4

080a3c74 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a3c74:	b508      	push	{r3, lr}
 80a3c76:	4b02      	ldr	r3, [pc, #8]	; (80a3c80 <hal_usart_flush+0xc>)
 80a3c78:	681b      	ldr	r3, [r3, #0]
 80a3c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3c7c:	9301      	str	r3, [sp, #4]
 80a3c7e:	bd08      	pop	{r3, pc}
 80a3c80:	080601c4 	.word	0x080601c4

080a3c84 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a3c84:	b508      	push	{r3, lr}
 80a3c86:	4b02      	ldr	r3, [pc, #8]	; (80a3c90 <hal_usart_is_enabled+0xc>)
 80a3c88:	681b      	ldr	r3, [r3, #0]
 80a3c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a3c8c:	9301      	str	r3, [sp, #4]
 80a3c8e:	bd08      	pop	{r3, pc}
 80a3c90:	080601c4 	.word	0x080601c4

080a3c94 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a3c94:	b508      	push	{r3, lr}
 80a3c96:	4b02      	ldr	r3, [pc, #8]	; (80a3ca0 <hal_usart_available_data_for_write+0xc>)
 80a3c98:	681b      	ldr	r3, [r3, #0]
 80a3c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3c9c:	9301      	str	r3, [sp, #4]
 80a3c9e:	bd08      	pop	{r3, pc}
 80a3ca0:	080601c4 	.word	0x080601c4

080a3ca4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a3ca4:	b508      	push	{r3, lr}
 80a3ca6:	4b02      	ldr	r3, [pc, #8]	; (80a3cb0 <HAL_USB_USART_Init+0xc>)
 80a3ca8:	681b      	ldr	r3, [r3, #0]
 80a3caa:	681b      	ldr	r3, [r3, #0]
 80a3cac:	9301      	str	r3, [sp, #4]
 80a3cae:	bd08      	pop	{r3, pc}
 80a3cb0:	080601d8 	.word	0x080601d8

080a3cb4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a3cb4:	b508      	push	{r3, lr}
 80a3cb6:	4b02      	ldr	r3, [pc, #8]	; (80a3cc0 <HAL_USB_USART_Available_Data+0xc>)
 80a3cb8:	681b      	ldr	r3, [r3, #0]
 80a3cba:	691b      	ldr	r3, [r3, #16]
 80a3cbc:	9301      	str	r3, [sp, #4]
 80a3cbe:	bd08      	pop	{r3, pc}
 80a3cc0:	080601d8 	.word	0x080601d8

080a3cc4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a3cc4:	b508      	push	{r3, lr}
 80a3cc6:	4b02      	ldr	r3, [pc, #8]	; (80a3cd0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a3cc8:	681b      	ldr	r3, [r3, #0]
 80a3cca:	695b      	ldr	r3, [r3, #20]
 80a3ccc:	9301      	str	r3, [sp, #4]
 80a3cce:	bd08      	pop	{r3, pc}
 80a3cd0:	080601d8 	.word	0x080601d8

080a3cd4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3cd4:	b508      	push	{r3, lr}
 80a3cd6:	4b02      	ldr	r3, [pc, #8]	; (80a3ce0 <HAL_USB_USART_Receive_Data+0xc>)
 80a3cd8:	681b      	ldr	r3, [r3, #0]
 80a3cda:	699b      	ldr	r3, [r3, #24]
 80a3cdc:	9301      	str	r3, [sp, #4]
 80a3cde:	bd08      	pop	{r3, pc}
 80a3ce0:	080601d8 	.word	0x080601d8

080a3ce4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3ce4:	b508      	push	{r3, lr}
 80a3ce6:	4b02      	ldr	r3, [pc, #8]	; (80a3cf0 <HAL_USB_USART_Send_Data+0xc>)
 80a3ce8:	681b      	ldr	r3, [r3, #0]
 80a3cea:	69db      	ldr	r3, [r3, #28]
 80a3cec:	9301      	str	r3, [sp, #4]
 80a3cee:	bd08      	pop	{r3, pc}
 80a3cf0:	080601d8 	.word	0x080601d8

080a3cf4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a3cf4:	b508      	push	{r3, lr}
 80a3cf6:	4b02      	ldr	r3, [pc, #8]	; (80a3d00 <HAL_USB_USART_Flush_Data+0xc>)
 80a3cf8:	681b      	ldr	r3, [r3, #0]
 80a3cfa:	6a1b      	ldr	r3, [r3, #32]
 80a3cfc:	9301      	str	r3, [sp, #4]
 80a3cfe:	bd08      	pop	{r3, pc}
 80a3d00:	080601d8 	.word	0x080601d8

080a3d04 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a3d04:	b508      	push	{r3, lr}
 80a3d06:	4b02      	ldr	r3, [pc, #8]	; (80a3d10 <HAL_NET_SetNetWatchDog+0xc>)
 80a3d08:	681b      	ldr	r3, [r3, #0]
 80a3d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3d0c:	9301      	str	r3, [sp, #4]
 80a3d0e:	bd08      	pop	{r3, pc}
 80a3d10:	080601c0 	.word	0x080601c0

080a3d14 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a3d14:	b508      	push	{r3, lr}
 80a3d16:	4b02      	ldr	r3, [pc, #8]	; (80a3d20 <inet_gethostbyname+0xc>)
 80a3d18:	681b      	ldr	r3, [r3, #0]
 80a3d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3d1c:	9301      	str	r3, [sp, #4]
 80a3d1e:	bd08      	pop	{r3, pc}
 80a3d20:	080601c0 	.word	0x080601c0

080a3d24 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a3d24:	b508      	push	{r3, lr}
 80a3d26:	4b02      	ldr	r3, [pc, #8]	; (80a3d30 <log_message+0xc>)
 80a3d28:	681b      	ldr	r3, [r3, #0]
 80a3d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a3d2c:	9301      	str	r3, [sp, #4]
 80a3d2e:	bd08      	pop	{r3, pc}
 80a3d30:	080201a8 	.word	0x080201a8

080a3d34 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a3d34:	b508      	push	{r3, lr}
 80a3d36:	4b02      	ldr	r3, [pc, #8]	; (80a3d40 <system_mode+0xc>)
 80a3d38:	681b      	ldr	r3, [r3, #0]
 80a3d3a:	681b      	ldr	r3, [r3, #0]
 80a3d3c:	9301      	str	r3, [sp, #4]
 80a3d3e:	bd08      	pop	{r3, pc}
 80a3d40:	080601a4 	.word	0x080601a4

080a3d44 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a3d44:	b508      	push	{r3, lr}
 80a3d46:	4b02      	ldr	r3, [pc, #8]	; (80a3d50 <set_system_mode+0xc>)
 80a3d48:	681b      	ldr	r3, [r3, #0]
 80a3d4a:	685b      	ldr	r3, [r3, #4]
 80a3d4c:	9301      	str	r3, [sp, #4]
 80a3d4e:	bd08      	pop	{r3, pc}
 80a3d50:	080601a4 	.word	0x080601a4

080a3d54 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a3d54:	b508      	push	{r3, lr}
 80a3d56:	4b02      	ldr	r3, [pc, #8]	; (80a3d60 <system_delay_ms+0xc>)
 80a3d58:	681b      	ldr	r3, [r3, #0]
 80a3d5a:	695b      	ldr	r3, [r3, #20]
 80a3d5c:	9301      	str	r3, [sp, #4]
 80a3d5e:	bd08      	pop	{r3, pc}
 80a3d60:	080601a4 	.word	0x080601a4

080a3d64 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a3d64:	b508      	push	{r3, lr}
 80a3d66:	4b02      	ldr	r3, [pc, #8]	; (80a3d70 <application_thread_current+0xc>)
 80a3d68:	681b      	ldr	r3, [r3, #0]
 80a3d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a3d6c:	9301      	str	r3, [sp, #4]
 80a3d6e:	bd08      	pop	{r3, pc}
 80a3d70:	080601a4 	.word	0x080601a4

080a3d74 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a3d74:	b508      	push	{r3, lr}
 80a3d76:	4b02      	ldr	r3, [pc, #8]	; (80a3d80 <application_thread_invoke+0xc>)
 80a3d78:	681b      	ldr	r3, [r3, #0]
 80a3d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a3d7c:	9301      	str	r3, [sp, #4]
 80a3d7e:	bd08      	pop	{r3, pc}
 80a3d80:	080601a4 	.word	0x080601a4

080a3d84 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a3d84:	b508      	push	{r3, lr}
 80a3d86:	4b02      	ldr	r3, [pc, #8]	; (80a3d90 <system_thread_get_state+0xc>)
 80a3d88:	681b      	ldr	r3, [r3, #0]
 80a3d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3d8c:	9301      	str	r3, [sp, #4]
 80a3d8e:	bd08      	pop	{r3, pc}
 80a3d90:	080601a4 	.word	0x080601a4

080a3d94 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a3d94:	b508      	push	{r3, lr}
 80a3d96:	4b03      	ldr	r3, [pc, #12]	; (80a3da4 <system_ctrl_set_app_request_handler+0x10>)
 80a3d98:	681b      	ldr	r3, [r3, #0]
 80a3d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a3d9e:	9301      	str	r3, [sp, #4]
 80a3da0:	bd08      	pop	{r3, pc}
 80a3da2:	0000      	.short	0x0000
 80a3da4:	080601a4 	.word	0x080601a4

080a3da8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a3da8:	b508      	push	{r3, lr}
 80a3daa:	4b03      	ldr	r3, [pc, #12]	; (80a3db8 <system_ctrl_set_result+0x10>)
 80a3dac:	681b      	ldr	r3, [r3, #0]
 80a3dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a3db2:	9301      	str	r3, [sp, #4]
 80a3db4:	bd08      	pop	{r3, pc}
 80a3db6:	0000      	.short	0x0000
 80a3db8:	080601a4 	.word	0x080601a4

080a3dbc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a3dbc:	b508      	push	{r3, lr}
 80a3dbe:	4b02      	ldr	r3, [pc, #8]	; (80a3dc8 <spark_variable+0xc>)
 80a3dc0:	681b      	ldr	r3, [r3, #0]
 80a3dc2:	681b      	ldr	r3, [r3, #0]
 80a3dc4:	9301      	str	r3, [sp, #4]
 80a3dc6:	bd08      	pop	{r3, pc}
 80a3dc8:	080601cc 	.word	0x080601cc

080a3dcc <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a3dcc:	b508      	push	{r3, lr}
 80a3dce:	4b02      	ldr	r3, [pc, #8]	; (80a3dd8 <spark_process+0xc>)
 80a3dd0:	681b      	ldr	r3, [r3, #0]
 80a3dd2:	689b      	ldr	r3, [r3, #8]
 80a3dd4:	9301      	str	r3, [sp, #4]
 80a3dd6:	bd08      	pop	{r3, pc}
 80a3dd8:	080601cc 	.word	0x080601cc

080a3ddc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a3ddc:	b508      	push	{r3, lr}
 80a3dde:	4b02      	ldr	r3, [pc, #8]	; (80a3de8 <spark_cloud_flag_connected+0xc>)
 80a3de0:	681b      	ldr	r3, [r3, #0]
 80a3de2:	695b      	ldr	r3, [r3, #20]
 80a3de4:	9301      	str	r3, [sp, #4]
 80a3de6:	bd08      	pop	{r3, pc}
 80a3de8:	080601cc 	.word	0x080601cc

080a3dec <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a3dec:	b508      	push	{r3, lr}
 80a3dee:	4b02      	ldr	r3, [pc, #8]	; (80a3df8 <spark_send_event+0xc>)
 80a3df0:	681b      	ldr	r3, [r3, #0]
 80a3df2:	6a1b      	ldr	r3, [r3, #32]
 80a3df4:	9301      	str	r3, [sp, #4]
 80a3df6:	bd08      	pop	{r3, pc}
 80a3df8:	080601cc 	.word	0x080601cc

080a3dfc <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a3dfc:	b508      	push	{r3, lr}
 80a3dfe:	4b02      	ldr	r3, [pc, #8]	; (80a3e08 <spark_sync_time_pending+0xc>)
 80a3e00:	681b      	ldr	r3, [r3, #0]
 80a3e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3e04:	9301      	str	r3, [sp, #4]
 80a3e06:	bd08      	pop	{r3, pc}
 80a3e08:	080601cc 	.word	0x080601cc

080a3e0c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a3e0c:	b508      	push	{r3, lr}
 80a3e0e:	4b02      	ldr	r3, [pc, #8]	; (80a3e18 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a3e10:	681b      	ldr	r3, [r3, #0]
 80a3e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a3e14:	9301      	str	r3, [sp, #4]
 80a3e16:	bd08      	pop	{r3, pc}
 80a3e18:	080601cc 	.word	0x080601cc

080a3e1c <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a3e1c:	b508      	push	{r3, lr}
 80a3e1e:	4b02      	ldr	r3, [pc, #8]	; (80a3e28 <network_config+0xc>)
 80a3e20:	681b      	ldr	r3, [r3, #0]
 80a3e22:	681b      	ldr	r3, [r3, #0]
 80a3e24:	9301      	str	r3, [sp, #4]
 80a3e26:	bd08      	pop	{r3, pc}
 80a3e28:	080601c8 	.word	0x080601c8

080a3e2c <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3e2c:	b508      	push	{r3, lr}
 80a3e2e:	4b02      	ldr	r3, [pc, #8]	; (80a3e38 <network_connect+0xc>)
 80a3e30:	681b      	ldr	r3, [r3, #0]
 80a3e32:	685b      	ldr	r3, [r3, #4]
 80a3e34:	9301      	str	r3, [sp, #4]
 80a3e36:	bd08      	pop	{r3, pc}
 80a3e38:	080601c8 	.word	0x080601c8

080a3e3c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a3e3c:	b508      	push	{r3, lr}
 80a3e3e:	4b02      	ldr	r3, [pc, #8]	; (80a3e48 <network_connecting+0xc>)
 80a3e40:	681b      	ldr	r3, [r3, #0]
 80a3e42:	689b      	ldr	r3, [r3, #8]
 80a3e44:	9301      	str	r3, [sp, #4]
 80a3e46:	bd08      	pop	{r3, pc}
 80a3e48:	080601c8 	.word	0x080601c8

080a3e4c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a3e4c:	b508      	push	{r3, lr}
 80a3e4e:	4b02      	ldr	r3, [pc, #8]	; (80a3e58 <network_disconnect+0xc>)
 80a3e50:	681b      	ldr	r3, [r3, #0]
 80a3e52:	68db      	ldr	r3, [r3, #12]
 80a3e54:	9301      	str	r3, [sp, #4]
 80a3e56:	bd08      	pop	{r3, pc}
 80a3e58:	080601c8 	.word	0x080601c8

080a3e5c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a3e5c:	b508      	push	{r3, lr}
 80a3e5e:	4b02      	ldr	r3, [pc, #8]	; (80a3e68 <network_ready+0xc>)
 80a3e60:	681b      	ldr	r3, [r3, #0]
 80a3e62:	691b      	ldr	r3, [r3, #16]
 80a3e64:	9301      	str	r3, [sp, #4]
 80a3e66:	bd08      	pop	{r3, pc}
 80a3e68:	080601c8 	.word	0x080601c8

080a3e6c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3e6c:	b508      	push	{r3, lr}
 80a3e6e:	4b02      	ldr	r3, [pc, #8]	; (80a3e78 <network_on+0xc>)
 80a3e70:	681b      	ldr	r3, [r3, #0]
 80a3e72:	695b      	ldr	r3, [r3, #20]
 80a3e74:	9301      	str	r3, [sp, #4]
 80a3e76:	bd08      	pop	{r3, pc}
 80a3e78:	080601c8 	.word	0x080601c8

080a3e7c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3e7c:	b508      	push	{r3, lr}
 80a3e7e:	4b02      	ldr	r3, [pc, #8]	; (80a3e88 <network_off+0xc>)
 80a3e80:	681b      	ldr	r3, [r3, #0]
 80a3e82:	699b      	ldr	r3, [r3, #24]
 80a3e84:	9301      	str	r3, [sp, #4]
 80a3e86:	bd08      	pop	{r3, pc}
 80a3e88:	080601c8 	.word	0x080601c8

080a3e8c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a3e8c:	b508      	push	{r3, lr}
 80a3e8e:	4b02      	ldr	r3, [pc, #8]	; (80a3e98 <network_listen+0xc>)
 80a3e90:	681b      	ldr	r3, [r3, #0]
 80a3e92:	69db      	ldr	r3, [r3, #28]
 80a3e94:	9301      	str	r3, [sp, #4]
 80a3e96:	bd08      	pop	{r3, pc}
 80a3e98:	080601c8 	.word	0x080601c8

080a3e9c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a3e9c:	b508      	push	{r3, lr}
 80a3e9e:	4b02      	ldr	r3, [pc, #8]	; (80a3ea8 <network_listening+0xc>)
 80a3ea0:	681b      	ldr	r3, [r3, #0]
 80a3ea2:	6a1b      	ldr	r3, [r3, #32]
 80a3ea4:	9301      	str	r3, [sp, #4]
 80a3ea6:	bd08      	pop	{r3, pc}
 80a3ea8:	080601c8 	.word	0x080601c8

080a3eac <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a3eac:	b508      	push	{r3, lr}
 80a3eae:	4b02      	ldr	r3, [pc, #8]	; (80a3eb8 <network_set_listen_timeout+0xc>)
 80a3eb0:	681b      	ldr	r3, [r3, #0]
 80a3eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3eb4:	9301      	str	r3, [sp, #4]
 80a3eb6:	bd08      	pop	{r3, pc}
 80a3eb8:	080601c8 	.word	0x080601c8

080a3ebc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a3ebc:	b508      	push	{r3, lr}
 80a3ebe:	4b02      	ldr	r3, [pc, #8]	; (80a3ec8 <network_get_listen_timeout+0xc>)
 80a3ec0:	681b      	ldr	r3, [r3, #0]
 80a3ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3ec4:	9301      	str	r3, [sp, #4]
 80a3ec6:	bd08      	pop	{r3, pc}
 80a3ec8:	080601c8 	.word	0x080601c8

080a3ecc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a3ecc:	b508      	push	{r3, lr}
 80a3ece:	4b02      	ldr	r3, [pc, #8]	; (80a3ed8 <network_is_on+0xc>)
 80a3ed0:	681b      	ldr	r3, [r3, #0]
 80a3ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3ed4:	9301      	str	r3, [sp, #4]
 80a3ed6:	bd08      	pop	{r3, pc}
 80a3ed8:	080601c8 	.word	0x080601c8

080a3edc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a3edc:	b508      	push	{r3, lr}
 80a3ede:	4b02      	ldr	r3, [pc, #8]	; (80a3ee8 <network_is_off+0xc>)
 80a3ee0:	681b      	ldr	r3, [r3, #0]
 80a3ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3ee4:	9301      	str	r3, [sp, #4]
 80a3ee6:	bd08      	pop	{r3, pc}
 80a3ee8:	080601c8 	.word	0x080601c8

080a3eec <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a3eec:	b508      	push	{r3, lr}
 80a3eee:	4b02      	ldr	r3, [pc, #8]	; (80a3ef8 <malloc+0xc>)
 80a3ef0:	681b      	ldr	r3, [r3, #0]
 80a3ef2:	681b      	ldr	r3, [r3, #0]
 80a3ef4:	9301      	str	r3, [sp, #4]
 80a3ef6:	bd08      	pop	{r3, pc}
 80a3ef8:	080601a0 	.word	0x080601a0

080a3efc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a3efc:	b508      	push	{r3, lr}
 80a3efe:	4b02      	ldr	r3, [pc, #8]	; (80a3f08 <free+0xc>)
 80a3f00:	681b      	ldr	r3, [r3, #0]
 80a3f02:	685b      	ldr	r3, [r3, #4]
 80a3f04:	9301      	str	r3, [sp, #4]
 80a3f06:	bd08      	pop	{r3, pc}
 80a3f08:	080601a0 	.word	0x080601a0

080a3f0c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a3f0c:	b508      	push	{r3, lr}
 80a3f0e:	4b02      	ldr	r3, [pc, #8]	; (80a3f18 <realloc+0xc>)
 80a3f10:	681b      	ldr	r3, [r3, #0]
 80a3f12:	689b      	ldr	r3, [r3, #8]
 80a3f14:	9301      	str	r3, [sp, #4]
 80a3f16:	bd08      	pop	{r3, pc}
 80a3f18:	080601a0 	.word	0x080601a0

080a3f1c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a3f1c:	b508      	push	{r3, lr}
 80a3f1e:	4b02      	ldr	r3, [pc, #8]	; (80a3f28 <abort+0xc>)
 80a3f20:	681b      	ldr	r3, [r3, #0]
 80a3f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3f24:	9301      	str	r3, [sp, #4]
 80a3f26:	bd08      	pop	{r3, pc}
 80a3f28:	080601a0 	.word	0x080601a0

080a3f2c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a3f2c:	b508      	push	{r3, lr}
 80a3f2e:	4b02      	ldr	r3, [pc, #8]	; (80a3f38 <_malloc_r+0xc>)
 80a3f30:	681b      	ldr	r3, [r3, #0]
 80a3f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3f34:	9301      	str	r3, [sp, #4]
 80a3f36:	bd08      	pop	{r3, pc}
 80a3f38:	080601a0 	.word	0x080601a0

080a3f3c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a3f3c:	b508      	push	{r3, lr}
 80a3f3e:	4b02      	ldr	r3, [pc, #8]	; (80a3f48 <__errno+0xc>)
 80a3f40:	681b      	ldr	r3, [r3, #0]
 80a3f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a3f44:	9301      	str	r3, [sp, #4]
 80a3f46:	bd08      	pop	{r3, pc}
 80a3f48:	080601a0 	.word	0x080601a0

080a3f4c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a3f4c:	b508      	push	{r3, lr}
 80a3f4e:	4b02      	ldr	r3, [pc, #8]	; (80a3f58 <newlib_impure_ptr_callback+0xc>)
 80a3f50:	681b      	ldr	r3, [r3, #0]
 80a3f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3f54:	9301      	str	r3, [sp, #4]
 80a3f56:	bd08      	pop	{r3, pc}
 80a3f58:	080601a0 	.word	0x080601a0

080a3f5c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a3f5c:	2100      	movs	r1, #0
 80a3f5e:	f7ff bef9 	b.w	80a3d54 <system_delay_ms>

080a3f62 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a3f62:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3f64:	6883      	ldr	r3, [r0, #8]
 80a3f66:	4604      	mov	r4, r0
 80a3f68:	b90b      	cbnz	r3, 80a3f6e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a3f6a:	f001 fc32 	bl	80a57d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3f6e:	68c3      	ldr	r3, [r0, #12]
 80a3f70:	4798      	blx	r3
      if (_M_manager)
 80a3f72:	68a3      	ldr	r3, [r4, #8]
 80a3f74:	b11b      	cbz	r3, 80a3f7e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a3f76:	2203      	movs	r2, #3
 80a3f78:	4621      	mov	r1, r4
 80a3f7a:	4620      	mov	r0, r4
 80a3f7c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a3f7e:	4620      	mov	r0, r4
}
 80a3f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a3f84:	2110      	movs	r1, #16
 80a3f86:	f001 bc20 	b.w	80a57ca <_ZdlPvj>

080a3f8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a3f8a:	4770      	bx	lr

080a3f8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a3f8c:	2000      	movs	r0, #0
 80a3f8e:	4770      	bx	lr

080a3f90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a3f90:	b510      	push	{r4, lr}
 80a3f92:	4604      	mov	r4, r0
 80a3f94:	2110      	movs	r1, #16
 80a3f96:	f001 fc18 	bl	80a57ca <_ZdlPvj>
 80a3f9a:	4620      	mov	r0, r4
 80a3f9c:	bd10      	pop	{r4, pc}

080a3f9e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a3f9e:	b508      	push	{r3, lr}
      { delete this; }
 80a3fa0:	f7ff fff6 	bl	80a3f90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a3fa4:	bd08      	pop	{r3, pc}

080a3fa6 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a3fa6:	b510      	push	{r4, lr}
      if (_M_manager)
 80a3fa8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a3faa:	4604      	mov	r4, r0
      if (_M_manager)
 80a3fac:	b113      	cbz	r3, 80a3fb4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a3fae:	2203      	movs	r2, #3
 80a3fb0:	4601      	mov	r1, r0
 80a3fb2:	4798      	blx	r3
    }
 80a3fb4:	4620      	mov	r0, r4
 80a3fb6:	bd10      	pop	{r4, pc}

080a3fb8 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a3fb8:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a3fba:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a3fbc:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a3fc0:	6002      	str	r2, [r0, #0]
 80a3fc2:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a3fc4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3fc6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a3fc8:	680c      	ldr	r4, [r1, #0]
 80a3fca:	8085      	strh	r5, [r0, #4]
 80a3fcc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3fce:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a3fd0:	bd30      	pop	{r4, r5, pc}

080a3fd2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a3fd2:	b510      	push	{r4, lr}
 80a3fd4:	4604      	mov	r4, r0
    free((void*)msg_);
 80a3fd6:	6800      	ldr	r0, [r0, #0]
 80a3fd8:	f7ff ff90 	bl	80a3efc <free>
}
 80a3fdc:	4620      	mov	r0, r4
 80a3fde:	bd10      	pop	{r4, pc}

080a3fe0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a3fe0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a3fe2:	68c4      	ldr	r4, [r0, #12]
 80a3fe4:	b1f4      	cbz	r4, 80a4024 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a3fe6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a3fe8:	2b02      	cmp	r3, #2
 80a3fea:	d103      	bne.n	80a3ff4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a3fec:	f104 000c 	add.w	r0, r4, #12
 80a3ff0:	f7ff ffef 	bl	80a3fd2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a3ff4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a3ff6:	b135      	cbz	r5, 80a4006 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a3ff8:	4628      	mov	r0, r5
 80a3ffa:	f7ff ffd4 	bl	80a3fa6 <_ZNSt14_Function_baseD1Ev>
 80a3ffe:	2110      	movs	r1, #16
 80a4000:	4628      	mov	r0, r5
 80a4002:	f001 fbe2 	bl	80a57ca <_ZdlPvj>
 80a4006:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a4008:	b135      	cbz	r5, 80a4018 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a400a:	4628      	mov	r0, r5
 80a400c:	f7ff ffcb 	bl	80a3fa6 <_ZNSt14_Function_baseD1Ev>
 80a4010:	2110      	movs	r1, #16
 80a4012:	4628      	mov	r0, r5
 80a4014:	f001 fbd9 	bl	80a57ca <_ZdlPvj>
 80a4018:	4620      	mov	r0, r4
 80a401a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a401e:	2114      	movs	r1, #20
 80a4020:	f001 bbd3 	b.w	80a57ca <_ZdlPvj>
 80a4024:	bd38      	pop	{r3, r4, r5, pc}

080a4026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a4026:	680b      	ldr	r3, [r1, #0]
 80a4028:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a402a:	b113      	cbz	r3, 80a4032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a402c:	685a      	ldr	r2, [r3, #4]
 80a402e:	3201      	adds	r2, #1
 80a4030:	605a      	str	r2, [r3, #4]
      }
 80a4032:	4770      	bx	lr

080a4034 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a4034:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a4036:	460e      	mov	r6, r1
 80a4038:	4604      	mov	r4, r0
 80a403a:	f856 3b04 	ldr.w	r3, [r6], #4
 80a403e:	460d      	mov	r5, r1
 80a4040:	a801      	add	r0, sp, #4
 80a4042:	4631      	mov	r1, r6
 80a4044:	9300      	str	r3, [sp, #0]
 80a4046:	f7ff ffee 	bl	80a4026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a404a:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a404c:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a404e:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a4050:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a4052:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a4054:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a4056:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a4058:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a405a:	f7ff fc09 	bl	80a3870 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a405e:	4630      	mov	r0, r6
 80a4060:	f7ff fc06 	bl	80a3870 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a4064:	4628      	mov	r0, r5
 80a4066:	2108      	movs	r1, #8
 80a4068:	f001 fbaf 	bl	80a57ca <_ZdlPvj>
        return p;
    }
 80a406c:	4620      	mov	r0, r4
 80a406e:	b002      	add	sp, #8
 80a4070:	bd70      	pop	{r4, r5, r6, pc}

080a4072 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a4072:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4074:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a4076:	460b      	mov	r3, r1
 80a4078:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a407a:	c803      	ldmia	r0, {r0, r1}
 80a407c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a4080:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a4084:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a4088:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a408c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a4090:	b002      	add	sp, #8
 80a4092:	bd10      	pop	{r4, pc}

080a4094 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a4094:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a4096:	b510      	push	{r4, lr}
      if (_M_empty())
 80a4098:	b90a      	cbnz	r2, 80a409e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a409a:	f001 fb9a 	bl	80a57d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a409e:	68c3      	ldr	r3, [r0, #12]
    }
 80a40a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a40a4:	4718      	bx	r3

080a40a6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a40a6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a40a8:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a40aa:	f100 0110 	add.w	r1, r0, #16
 80a40ae:	f7ff fff1 	bl	80a4094 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a40b2:	bd08      	pop	{r3, pc}

080a40b4 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a40b4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a40b6:	b510      	push	{r4, lr}
      if (_M_empty())
 80a40b8:	b90a      	cbnz	r2, 80a40be <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a40ba:	f001 fb8a 	bl	80a57d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a40be:	68c3      	ldr	r3, [r0, #12]
    }
 80a40c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a40c4:	4718      	bx	r3

080a40c6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a40c6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a40c8:	6800      	ldr	r0, [r0, #0]
 80a40ca:	f100 0110 	add.w	r1, r0, #16
 80a40ce:	f7ff fff1 	bl	80a40b4 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a40d2:	bd08      	pop	{r3, pc}

080a40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a40d4:	b538      	push	{r3, r4, r5, lr}
 80a40d6:	2300      	movs	r3, #0
 80a40d8:	4604      	mov	r4, r0
 80a40da:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a40dc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a40de:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a40e0:	f7fb ffdb 	bl	80a009a <_Znwj>
 80a40e4:	b128      	cbz	r0, 80a40f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a40e6:	2301      	movs	r3, #1
 80a40e8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a40ec:	4b02      	ldr	r3, [pc, #8]	; (80a40f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a40ee:	60c5      	str	r5, [r0, #12]
 80a40f0:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a40f2:	6020      	str	r0, [r4, #0]
	}
 80a40f4:	4620      	mov	r0, r4
 80a40f6:	bd38      	pop	{r3, r4, r5, pc}
 80a40f8:	080aa650 	.word	0x080aa650

080a40fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a40fc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a40fe:	2300      	movs	r3, #0
 80a4100:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a4102:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a4104:	4604      	mov	r4, r0
 80a4106:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a4108:	b12b      	cbz	r3, 80a4116 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a410a:	2202      	movs	r2, #2
 80a410c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a410e:	68eb      	ldr	r3, [r5, #12]
 80a4110:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a4112:	68ab      	ldr	r3, [r5, #8]
 80a4114:	60a3      	str	r3, [r4, #8]
    }
 80a4116:	4620      	mov	r0, r4
 80a4118:	bd38      	pop	{r3, r4, r5, pc}
	...

080a411c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a411c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a411e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a4120:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a4122:	4668      	mov	r0, sp
 80a4124:	f7ff ff48 	bl	80a3fb8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a4128:	f04f 0302 	mov.w	r3, #2
 80a412c:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a4130:	2a00      	cmp	r2, #0
 80a4132:	d103      	bne.n	80a413c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a4134:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a4138:	2900      	cmp	r1, #0
 80a413a:	d1f7      	bne.n	80a412c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a413c:	d125      	bne.n	80a418a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a413e:	f104 050c 	add.w	r5, r4, #12
 80a4142:	4669      	mov	r1, sp
 80a4144:	4628      	mov	r0, r5
 80a4146:	f7ff ff37 	bl	80a3fb8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a414a:	2301      	movs	r3, #1
 80a414c:	f3bf 8f5b 	dmb	ish
 80a4150:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a4152:	2000      	movs	r0, #0
 80a4154:	f3bf 8f5b 	dmb	ish
 80a4158:	f104 0308 	add.w	r3, r4, #8
 80a415c:	e853 6f00 	ldrex	r6, [r3]
 80a4160:	e843 0200 	strex	r2, r0, [r3]
 80a4164:	2a00      	cmp	r2, #0
 80a4166:	d1f9      	bne.n	80a415c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a4168:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a416c:	b16e      	cbz	r6, 80a418a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a416e:	f7ff fdf9 	bl	80a3d64 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a4172:	b178      	cbz	r0, 80a4194 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a4174:	4629      	mov	r1, r5
 80a4176:	4630      	mov	r0, r6
 80a4178:	f7ff ff8c 	bl	80a4094 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a417c:	4630      	mov	r0, r6
 80a417e:	f7ff ff12 	bl	80a3fa6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a4182:	2110      	movs	r1, #16
 80a4184:	4630      	mov	r0, r6
 80a4186:	f001 fb20 	bl	80a57ca <_ZdlPvj>
        p_->setError(std::move(error));
 80a418a:	4668      	mov	r0, sp
 80a418c:	f7ff ff21 	bl	80a3fd2 <_ZN8particle5ErrorD1Ev>
    }
 80a4190:	b009      	add	sp, #36	; 0x24
 80a4192:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a4194:	4631      	mov	r1, r6
 80a4196:	a802      	add	r0, sp, #8
 80a4198:	f7ff ffb0 	bl	80a40fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a419c:	68e0      	ldr	r0, [r4, #12]
 80a419e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a41a2:	b108      	cbz	r0, 80a41a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a41a4:	f006 f8a4 	bl	80aa2f0 <strdup>
        type_(type) {
 80a41a8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a41aa:	2010      	movs	r0, #16
 80a41ac:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a41b0:	f7fb ff73 	bl	80a009a <_Znwj>
 80a41b4:	4605      	mov	r5, r0
 80a41b6:	b1e8      	cbz	r0, 80a41f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a41b8:	2700      	movs	r7, #0
 80a41ba:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a41bc:	2018      	movs	r0, #24
 80a41be:	f7fb ff6c 	bl	80a009a <_Znwj>
 80a41c2:	4604      	mov	r4, r0
 80a41c4:	b188      	cbz	r0, 80a41ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a41c6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a41c8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a41ca:	a802      	add	r0, sp, #8
 80a41cc:	f7ff ff51 	bl	80a4072 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a41d0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a41d2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a41d4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a41d6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a41d8:	9204      	str	r2, [sp, #16]
 80a41da:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a41dc:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a41de:	60e3      	str	r3, [r4, #12]
 80a41e0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a41e4:	9205      	str	r2, [sp, #20]
 80a41e6:	f7ff fee7 	bl	80a3fb8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a41ea:	4b08      	ldr	r3, [pc, #32]	; (80a420c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a41ec:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a41ee:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a41f0:	4b07      	ldr	r3, [pc, #28]	; (80a4210 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a41f2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a41f4:	a806      	add	r0, sp, #24
 80a41f6:	f7ff feec 	bl	80a3fd2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a41fa:	a802      	add	r0, sp, #8
 80a41fc:	f7ff fed3 	bl	80a3fa6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a4200:	2200      	movs	r2, #0
 80a4202:	4629      	mov	r1, r5
 80a4204:	4803      	ldr	r0, [pc, #12]	; (80a4214 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a4206:	f7ff fdb5 	bl	80a3d74 <application_thread_invoke>
 80a420a:	e7b7      	b.n	80a417c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a420c:	080a40a7 	.word	0x080a40a7
 80a4210:	080a433d 	.word	0x080a433d
 80a4214:	080a3f63 	.word	0x080a3f63

080a4218 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a4218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a421c:	b08a      	sub	sp, #40	; 0x28
 80a421e:	4605      	mov	r5, r0
 80a4220:	460c      	mov	r4, r1
 80a4222:	4617      	mov	r7, r2
 80a4224:	4698      	mov	r8, r3
 80a4226:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a422a:	f7ff fdd7 	bl	80a3ddc <spark_cloud_flag_connected>
 80a422e:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a4230:	4682      	mov	sl, r0
 80a4232:	bb38      	cbnz	r0, 80a4284 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a4234:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a4238:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a423a:	a905      	add	r1, sp, #20
 80a423c:	4630      	mov	r0, r6
 80a423e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a4242:	f7ff feb9 	bl	80a3fb8 <_ZN8particle5ErrorC1EOS0_>
 80a4246:	2014      	movs	r0, #20
 80a4248:	f7fb ff27 	bl	80a009a <_Znwj>
 80a424c:	4604      	mov	r4, r0
 80a424e:	b148      	cbz	r0, 80a4264 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a4250:	2302      	movs	r3, #2
 80a4252:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a4254:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a4256:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a425a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a425c:	4631      	mov	r1, r6
 80a425e:	300c      	adds	r0, #12
 80a4260:	f7ff feaa 	bl	80a3fb8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a4264:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a4266:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a4268:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a426c:	f7ff ff32 	bl	80a40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a4270:	4630      	mov	r0, r6
 80a4272:	f7ff feae 	bl	80a3fd2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a4276:	a805      	add	r0, sp, #20
 80a4278:	f7ff feab 	bl	80a3fd2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a427c:	4628      	mov	r0, r5
 80a427e:	b00a      	add	sp, #40	; 0x28
 80a4280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a4284:	230c      	movs	r3, #12
 80a4286:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a428a:	2014      	movs	r0, #20
 80a428c:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a4290:	9307      	str	r3, [sp, #28]
 80a4292:	f7fb ff02 	bl	80a009a <_Znwj>
 80a4296:	4601      	mov	r1, r0
 80a4298:	b128      	cbz	r0, 80a42a6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a429a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a429e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a42a2:	f880 a001 	strb.w	sl, [r0, #1]
 80a42a6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a42a8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a42aa:	f7ff ff13 	bl	80a40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a42ae:	4b22      	ldr	r3, [pc, #136]	; (80a4338 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a42b0:	2008      	movs	r0, #8
 80a42b2:	9308      	str	r3, [sp, #32]
 80a42b4:	f7fb fef1 	bl	80a009a <_Znwj>
 80a42b8:	4682      	mov	sl, r0
 80a42ba:	b128      	cbz	r0, 80a42c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a42bc:	9b03      	ldr	r3, [sp, #12]
 80a42be:	a904      	add	r1, sp, #16
 80a42c0:	f840 3b04 	str.w	r3, [r0], #4
 80a42c4:	f7ff feaf 	bl	80a4026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a42c8:	4642      	mov	r2, r8
 80a42ca:	4639      	mov	r1, r7
 80a42cc:	4620      	mov	r0, r4
 80a42ce:	9600      	str	r6, [sp, #0]
 80a42d0:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a42d4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a42d8:	f7ff fd88 	bl	80a3dec <spark_send_event>
 80a42dc:	b9b8      	cbnz	r0, 80a430e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a42de:	9b03      	ldr	r3, [sp, #12]
 80a42e0:	785b      	ldrb	r3, [r3, #1]
 80a42e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a42e6:	b993      	cbnz	r3, 80a430e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a42e8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a42ec:	a905      	add	r1, sp, #20
 80a42ee:	a803      	add	r0, sp, #12
 80a42f0:	9205      	str	r2, [sp, #20]
 80a42f2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a42f6:	f7ff ff11 	bl	80a411c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a42fa:	a805      	add	r0, sp, #20
 80a42fc:	f7ff fe69 	bl	80a3fd2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a4300:	a805      	add	r0, sp, #20
 80a4302:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a4304:	f7ff fe96 	bl	80a4034 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a4308:	a806      	add	r0, sp, #24
 80a430a:	f7ff fab1 	bl	80a3870 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a430e:	9b03      	ldr	r3, [sp, #12]
 80a4310:	a904      	add	r1, sp, #16
 80a4312:	a806      	add	r0, sp, #24
 80a4314:	9305      	str	r3, [sp, #20]
 80a4316:	f7ff fe86 	bl	80a4026 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a431a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a431c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a431e:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a4320:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a4322:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a4324:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a4326:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a4328:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a432a:	f7ff faa1 	bl	80a3870 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a432e:	a804      	add	r0, sp, #16
 80a4330:	f7ff fa9e 	bl	80a3870 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a4334:	e7a2      	b.n	80a427c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a4336:	bf00      	nop
 80a4338:	080a4401 	.word	0x080a4401

080a433c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a433c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a433e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4340:	4605      	mov	r5, r0
	  switch (__op)
 80a4342:	d007      	beq.n	80a4354 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a4344:	2a03      	cmp	r2, #3
 80a4346:	d018      	beq.n	80a437a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a4348:	2a01      	cmp	r2, #1
 80a434a:	d101      	bne.n	80a4350 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a434c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a434e:	6003      	str	r3, [r0, #0]
	}
 80a4350:	2000      	movs	r0, #0
 80a4352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a4354:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a4356:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a4358:	f7fb fe9f 	bl	80a009a <_Znwj>
 80a435c:	4604      	mov	r4, r0
 80a435e:	b150      	cbz	r0, 80a4376 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a4360:	4631      	mov	r1, r6
 80a4362:	f7ff fecb 	bl	80a40fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a4366:	6930      	ldr	r0, [r6, #16]
 80a4368:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a436c:	b108      	cbz	r0, 80a4372 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a436e:	f005 ffbf 	bl	80aa2f0 <strdup>
        type_(type) {
 80a4372:	6120      	str	r0, [r4, #16]
 80a4374:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a4376:	602c      	str	r4, [r5, #0]
	}
 80a4378:	e7ea      	b.n	80a4350 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a437a:	6804      	ldr	r4, [r0, #0]
 80a437c:	2c00      	cmp	r4, #0
 80a437e:	d0e7      	beq.n	80a4350 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a4380:	f104 0010 	add.w	r0, r4, #16
 80a4384:	f7ff fe25 	bl	80a3fd2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a4388:	4620      	mov	r0, r4
 80a438a:	f7ff fe0c 	bl	80a3fa6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a438e:	2118      	movs	r1, #24
 80a4390:	4620      	mov	r0, r4
 80a4392:	f001 fa1a 	bl	80a57ca <_ZdlPvj>
 80a4396:	e7db      	b.n	80a4350 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a4398 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a4398:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a439a:	2300      	movs	r3, #0
 80a439c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a439e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a43a0:	4604      	mov	r4, r0
 80a43a2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a43a4:	b12b      	cbz	r3, 80a43b2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a43a6:	2202      	movs	r2, #2
 80a43a8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a43aa:	68eb      	ldr	r3, [r5, #12]
 80a43ac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a43ae:	68ab      	ldr	r3, [r5, #8]
 80a43b0:	60a3      	str	r3, [r4, #8]
    }
 80a43b2:	4620      	mov	r0, r4
 80a43b4:	bd38      	pop	{r3, r4, r5, pc}

080a43b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a43b6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a43b8:	b570      	push	{r4, r5, r6, lr}
 80a43ba:	4604      	mov	r4, r0
	  switch (__op)
 80a43bc:	d007      	beq.n	80a43ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a43be:	2a03      	cmp	r2, #3
 80a43c0:	d012      	beq.n	80a43e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a43c2:	2a01      	cmp	r2, #1
 80a43c4:	d101      	bne.n	80a43ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a43c6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a43c8:	6003      	str	r3, [r0, #0]
	}
 80a43ca:	2000      	movs	r0, #0
 80a43cc:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a43ce:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a43d0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a43d2:	f7fb fe62 	bl	80a009a <_Znwj>
 80a43d6:	4605      	mov	r5, r0
 80a43d8:	b120      	cbz	r0, 80a43e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a43da:	4631      	mov	r1, r6
 80a43dc:	f7ff ffdc 	bl	80a4398 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a43e0:	7c33      	ldrb	r3, [r6, #16]
 80a43e2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a43e4:	6025      	str	r5, [r4, #0]
	}
 80a43e6:	e7f0      	b.n	80a43ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a43e8:	6804      	ldr	r4, [r0, #0]
 80a43ea:	2c00      	cmp	r4, #0
 80a43ec:	d0ed      	beq.n	80a43ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a43ee:	4620      	mov	r0, r4
 80a43f0:	f7ff fdd9 	bl	80a3fa6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a43f4:	2114      	movs	r1, #20
 80a43f6:	4620      	mov	r0, r4
 80a43f8:	f001 f9e7 	bl	80a57ca <_ZdlPvj>
 80a43fc:	e7e5      	b.n	80a43ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a4400 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a4400:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4402:	4604      	mov	r4, r0
 80a4404:	b089      	sub	sp, #36	; 0x24
 80a4406:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a4408:	a801      	add	r0, sp, #4
 80a440a:	4611      	mov	r1, r2
 80a440c:	f7ff fe12 	bl	80a4034 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a4410:	b1a4      	cbz	r4, 80a443c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a4412:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a4414:	b11d      	cbz	r5, 80a441e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a4416:	4628      	mov	r0, r5
 80a4418:	f005 ff6a 	bl	80aa2f0 <strdup>
 80a441c:	4605      	mov	r5, r0
 80a441e:	a801      	add	r0, sp, #4
 80a4420:	a903      	add	r1, sp, #12
        type_(type) {
 80a4422:	9503      	str	r5, [sp, #12]
 80a4424:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a4428:	f7ff fe78 	bl	80a411c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a442c:	a803      	add	r0, sp, #12
 80a442e:	f7ff fdd0 	bl	80a3fd2 <_ZN8particle5ErrorD1Ev>
 80a4432:	a802      	add	r0, sp, #8
 80a4434:	f7ff fa1c 	bl	80a3870 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a4438:	b009      	add	sp, #36	; 0x24
 80a443a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a443c:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a443e:	9d01      	ldr	r5, [sp, #4]
 80a4440:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a4444:	2a00      	cmp	r2, #0
 80a4446:	d103      	bne.n	80a4450 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a4448:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a444c:	2900      	cmp	r1, #0
 80a444e:	d1f7      	bne.n	80a4440 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a4450:	d1ef      	bne.n	80a4432 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a4452:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a4454:	f3bf 8f5b 	dmb	ish
 80a4458:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a445a:	f3bf 8f5b 	dmb	ish
 80a445e:	1d2b      	adds	r3, r5, #4
 80a4460:	e853 6f00 	ldrex	r6, [r3]
 80a4464:	e843 4200 	strex	r2, r4, [r3]
 80a4468:	2a00      	cmp	r2, #0
 80a446a:	d1f9      	bne.n	80a4460 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a446c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a4470:	2e00      	cmp	r6, #0
 80a4472:	d0de      	beq.n	80a4432 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a4474:	4620      	mov	r0, r4
 80a4476:	f7ff fc75 	bl	80a3d64 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a447a:	4607      	mov	r7, r0
 80a447c:	b160      	cbz	r0, 80a4498 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a447e:	4630      	mov	r0, r6
 80a4480:	f105 010c 	add.w	r1, r5, #12
 80a4484:	f7ff fe16 	bl	80a40b4 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a4488:	4630      	mov	r0, r6
 80a448a:	f7ff fd8c 	bl	80a3fa6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a448e:	2110      	movs	r1, #16
 80a4490:	4630      	mov	r0, r6
 80a4492:	f001 f99a 	bl	80a57ca <_ZdlPvj>
 80a4496:	e7cc      	b.n	80a4432 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a4498:	4631      	mov	r1, r6
 80a449a:	a803      	add	r0, sp, #12
 80a449c:	f7ff ff7c 	bl	80a4398 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a44a0:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a44a2:	2010      	movs	r0, #16
 80a44a4:	f88d 301c 	strb.w	r3, [sp, #28]
 80a44a8:	f7fb fdf7 	bl	80a009a <_Znwj>
 80a44ac:	4605      	mov	r5, r0
 80a44ae:	b1d0      	cbz	r0, 80a44e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a44b0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a44b2:	2014      	movs	r0, #20
 80a44b4:	f7fb fdf1 	bl	80a009a <_Znwj>
 80a44b8:	4604      	mov	r4, r0
 80a44ba:	b178      	cbz	r0, 80a44dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a44bc:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a44be:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a44c0:	a803      	add	r0, sp, #12
 80a44c2:	f7ff fdd6 	bl	80a4072 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a44c6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a44c8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a44ca:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a44cc:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a44ce:	9205      	str	r2, [sp, #20]
 80a44d0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a44d2:	60e3      	str	r3, [r4, #12]
 80a44d4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a44d8:	9206      	str	r2, [sp, #24]
 80a44da:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a44dc:	4b06      	ldr	r3, [pc, #24]	; (80a44f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a44de:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a44e0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a44e2:	4b06      	ldr	r3, [pc, #24]	; (80a44fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a44e4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a44e6:	a803      	add	r0, sp, #12
 80a44e8:	f7ff fd5d 	bl	80a3fa6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a44ec:	2200      	movs	r2, #0
 80a44ee:	4629      	mov	r1, r5
 80a44f0:	4803      	ldr	r0, [pc, #12]	; (80a4500 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a44f2:	f7ff fc3f 	bl	80a3d74 <application_thread_invoke>
 80a44f6:	e7c7      	b.n	80a4488 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a44f8:	080a40c7 	.word	0x080a40c7
 80a44fc:	080a43b7 	.word	0x080a43b7
 80a4500:	080a3f63 	.word	0x080a3f63

080a4504 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a4504:	4770      	bx	lr

080a4506 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a4506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4508:	4606      	mov	r6, r0
 80a450a:	4615      	mov	r5, r2
 80a450c:	460c      	mov	r4, r1
 80a450e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4510:	42bc      	cmp	r4, r7
 80a4512:	d006      	beq.n	80a4522 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a4514:	6833      	ldr	r3, [r6, #0]
 80a4516:	4630      	mov	r0, r6
 80a4518:	689b      	ldr	r3, [r3, #8]
 80a451a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a451e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a4520:	e7f6      	b.n	80a4510 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a4522:	4628      	mov	r0, r5
 80a4524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4526 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a4526:	2200      	movs	r2, #0
 80a4528:	7c00      	ldrb	r0, [r0, #16]
 80a452a:	f7ff bae9 	b.w	80a3b00 <hal_i2c_write>

080a452e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a452e:	2100      	movs	r1, #0
 80a4530:	7c00      	ldrb	r0, [r0, #16]
 80a4532:	f7ff baed 	b.w	80a3b10 <hal_i2c_available>

080a4536 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a4536:	2100      	movs	r1, #0
 80a4538:	7c00      	ldrb	r0, [r0, #16]
 80a453a:	f7ff baf1 	b.w	80a3b20 <hal_i2c_read>

080a453e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a453e:	2100      	movs	r1, #0
 80a4540:	7c00      	ldrb	r0, [r0, #16]
 80a4542:	f7ff baf5 	b.w	80a3b30 <hal_i2c_peek>

080a4546 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a4546:	2100      	movs	r1, #0
 80a4548:	7c00      	ldrb	r0, [r0, #16]
 80a454a:	f7ff baf9 	b.w	80a3b40 <hal_i2c_flush>

080a454e <_ZN7TwoWireD0Ev>:
 80a454e:	b510      	push	{r4, lr}
 80a4550:	4604      	mov	r4, r0
 80a4552:	2114      	movs	r1, #20
 80a4554:	f001 f939 	bl	80a57ca <_ZdlPvj>
 80a4558:	4620      	mov	r0, r4
 80a455a:	bd10      	pop	{r4, pc}

080a455c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a455c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a455e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4562:	4604      	mov	r4, r0
 80a4564:	4608      	mov	r0, r1
 80a4566:	2100      	movs	r1, #0
 80a4568:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a456c:	4b03      	ldr	r3, [pc, #12]	; (80a457c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a456e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a4570:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a4572:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a4574:	f7ff faf4 	bl	80a3b60 <hal_i2c_init>
}
 80a4578:	4620      	mov	r0, r4
 80a457a:	bd10      	pop	{r4, pc}
 80a457c:	080aa66c 	.word	0x080aa66c

080a4580 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a4580:	4770      	bx	lr

080a4582 <_ZN9IPAddressD0Ev>:
 80a4582:	b510      	push	{r4, lr}
 80a4584:	4604      	mov	r4, r0
 80a4586:	2118      	movs	r1, #24
 80a4588:	f001 f91f 	bl	80a57ca <_ZdlPvj>
 80a458c:	4620      	mov	r0, r4
 80a458e:	bd10      	pop	{r4, pc}

080a4590 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a4590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4592:	460e      	mov	r6, r1
 80a4594:	2400      	movs	r4, #0
 80a4596:	f100 0708 	add.w	r7, r0, #8
 80a459a:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a459c:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a45a0:	220a      	movs	r2, #10
 80a45a2:	4630      	mov	r0, r6
 80a45a4:	f000 f8fb 	bl	80a479e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a45a8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a45aa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a45ac:	d101      	bne.n	80a45b2 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a45ae:	4620      	mov	r0, r4
 80a45b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a45b2:	2c00      	cmp	r4, #0
 80a45b4:	d0f2      	beq.n	80a459c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a45b6:	212e      	movs	r1, #46	; 0x2e
 80a45b8:	4630      	mov	r0, r6
 80a45ba:	f000 f8ed 	bl	80a4798 <_ZN5Print5printEc>
 80a45be:	4404      	add	r4, r0
 80a45c0:	e7ec      	b.n	80a459c <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a45c4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a45c4:	b510      	push	{r4, lr}
 80a45c6:	4604      	mov	r4, r0
 80a45c8:	4b04      	ldr	r3, [pc, #16]	; (80a45dc <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a45ca:	2211      	movs	r2, #17
 80a45cc:	2100      	movs	r1, #0
 80a45ce:	f840 3b04 	str.w	r3, [r0], #4
 80a45d2:	f005 fe1b 	bl	80aa20c <memset>
}
 80a45d6:	4620      	mov	r0, r4
 80a45d8:	bd10      	pop	{r4, pc}
 80a45da:	bf00      	nop
 80a45dc:	080aa694 	.word	0x080aa694

080a45e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a45e0:	4603      	mov	r3, r0
 80a45e2:	4a07      	ldr	r2, [pc, #28]	; (80a4600 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a45e4:	b510      	push	{r4, lr}
 80a45e6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a45ea:	f101 0210 	add.w	r2, r1, #16
 80a45ee:	f851 4b04 	ldr.w	r4, [r1], #4
 80a45f2:	4291      	cmp	r1, r2
 80a45f4:	f843 4b04 	str.w	r4, [r3], #4
 80a45f8:	d1f9      	bne.n	80a45ee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a45fa:	780a      	ldrb	r2, [r1, #0]
 80a45fc:	701a      	strb	r2, [r3, #0]
}
 80a45fe:	bd10      	pop	{r4, pc}
 80a4600:	080aa694 	.word	0x080aa694

080a4604 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a4604:	4a02      	ldr	r2, [pc, #8]	; (80a4610 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a4606:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a460a:	2204      	movs	r2, #4
 80a460c:	7502      	strb	r2, [r0, #20]
}
 80a460e:	4770      	bx	lr
 80a4610:	080aa694 	.word	0x080aa694

080a4614 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a4614:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a4616:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a461a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a461e:	2304      	movs	r3, #4
 80a4620:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a4624:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a4628:	6044      	str	r4, [r0, #4]
 80a462a:	7503      	strb	r3, [r0, #20]
}
 80a462c:	bd10      	pop	{r4, pc}
	...

080a4630 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a4630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4632:	4d04      	ldr	r5, [pc, #16]	; (80a4644 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a4634:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a4636:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a463a:	9500      	str	r5, [sp, #0]
 80a463c:	f7ff ffea 	bl	80a4614 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4640:	b003      	add	sp, #12
 80a4642:	bd30      	pop	{r4, r5, pc}
 80a4644:	080aa694 	.word	0x080aa694

080a4648 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a4648:	4b01      	ldr	r3, [pc, #4]	; (80a4650 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a464a:	4a02      	ldr	r2, [pc, #8]	; (80a4654 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a464c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a464e:	4770      	bx	lr
 80a4650:	20000fd0 	.word	0x20000fd0
 80a4654:	080aa6a0 	.word	0x080aa6a0

080a4658 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a4658:	2300      	movs	r3, #0
 80a465a:	6840      	ldr	r0, [r0, #4]
 80a465c:	461a      	mov	r2, r3
 80a465e:	f7ff bbe5 	b.w	80a3e2c <network_connect>

080a4662 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a4662:	2200      	movs	r2, #0
 80a4664:	2102      	movs	r1, #2
 80a4666:	6840      	ldr	r0, [r0, #4]
 80a4668:	f7ff bbf0 	b.w	80a3e4c <network_disconnect>

080a466c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a466c:	2200      	movs	r2, #0
 80a466e:	6840      	ldr	r0, [r0, #4]
 80a4670:	4611      	mov	r1, r2
 80a4672:	f7ff bbe3 	b.w	80a3e3c <network_connecting>

080a4676 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a4676:	2200      	movs	r2, #0
 80a4678:	6840      	ldr	r0, [r0, #4]
 80a467a:	4611      	mov	r1, r2
 80a467c:	f7ff bbee 	b.w	80a3e5c <network_ready>

080a4680 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a4680:	2300      	movs	r3, #0
 80a4682:	6840      	ldr	r0, [r0, #4]
 80a4684:	461a      	mov	r2, r3
 80a4686:	4619      	mov	r1, r3
 80a4688:	f7ff bbf0 	b.w	80a3e6c <network_on>

080a468c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a468c:	2300      	movs	r3, #0
 80a468e:	6840      	ldr	r0, [r0, #4]
 80a4690:	461a      	mov	r2, r3
 80a4692:	4619      	mov	r1, r3
 80a4694:	f7ff bbf2 	b.w	80a3e7c <network_off>

080a4698 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a4698:	2100      	movs	r1, #0
 80a469a:	6840      	ldr	r0, [r0, #4]
 80a469c:	f7ff bc16 	b.w	80a3ecc <network_is_on>

080a46a0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a46a0:	2100      	movs	r1, #0
 80a46a2:	6840      	ldr	r0, [r0, #4]
 80a46a4:	f7ff bc1a 	b.w	80a3edc <network_is_off>

080a46a8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a46a8:	2200      	movs	r2, #0
 80a46aa:	6840      	ldr	r0, [r0, #4]
 80a46ac:	f081 0101 	eor.w	r1, r1, #1
 80a46b0:	f7ff bbec 	b.w	80a3e8c <network_listen>

080a46b4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a46b4:	2200      	movs	r2, #0
 80a46b6:	6840      	ldr	r0, [r0, #4]
 80a46b8:	f7ff bbf8 	b.w	80a3eac <network_set_listen_timeout>

080a46bc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a46bc:	2200      	movs	r2, #0
 80a46be:	6840      	ldr	r0, [r0, #4]
 80a46c0:	4611      	mov	r1, r2
 80a46c2:	f7ff bbfb 	b.w	80a3ebc <network_get_listen_timeout>

080a46c6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a46c6:	2200      	movs	r2, #0
 80a46c8:	6840      	ldr	r0, [r0, #4]
 80a46ca:	4611      	mov	r1, r2
 80a46cc:	f7ff bbe6 	b.w	80a3e9c <network_listening>

080a46d0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a46d0:	b570      	push	{r4, r5, r6, lr}
 80a46d2:	4615      	mov	r5, r2
 80a46d4:	b08e      	sub	sp, #56	; 0x38
 80a46d6:	4604      	mov	r4, r0
    IPAddress addr;
 80a46d8:	a808      	add	r0, sp, #32
 80a46da:	f7ff ff73 	bl	80a45c4 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a46de:	2211      	movs	r2, #17
 80a46e0:	2100      	movs	r1, #0
 80a46e2:	a803      	add	r0, sp, #12
 80a46e4:	f005 fd92 	bl	80aa20c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a46e8:	2600      	movs	r6, #0
 80a46ea:	4628      	mov	r0, r5
 80a46ec:	f005 fe1b 	bl	80aa326 <strlen>
 80a46f0:	4b0a      	ldr	r3, [pc, #40]	; (80a471c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a46f2:	9600      	str	r6, [sp, #0]
 80a46f4:	b281      	uxth	r1, r0
 80a46f6:	685b      	ldr	r3, [r3, #4]
 80a46f8:	4628      	mov	r0, r5
 80a46fa:	aa03      	add	r2, sp, #12
 80a46fc:	f7ff fb0a 	bl	80a3d14 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4700:	b130      	cbz	r0, 80a4710 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a4702:	4631      	mov	r1, r6
 80a4704:	4620      	mov	r0, r4
 80a4706:	f7ff ff7d 	bl	80a4604 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a470a:	4620      	mov	r0, r4
 80a470c:	b00e      	add	sp, #56	; 0x38
 80a470e:	bd70      	pop	{r4, r5, r6, pc}
 80a4710:	4620      	mov	r0, r4
 80a4712:	a903      	add	r1, sp, #12
 80a4714:	f7ff ff64 	bl	80a45e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a4718:	e7f7      	b.n	80a470a <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a471a:	bf00      	nop
 80a471c:	20001458 	.word	0x20001458

080a4720 <_ZN5spark12NetworkClass4fromEm>:
}
 80a4720:	4a03      	ldr	r2, [pc, #12]	; (80a4730 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a4722:	4b04      	ldr	r3, [pc, #16]	; (80a4734 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a4724:	2804      	cmp	r0, #4
 80a4726:	bf14      	ite	ne
 80a4728:	4610      	movne	r0, r2
 80a472a:	4618      	moveq	r0, r3
 80a472c:	4770      	bx	lr
 80a472e:	bf00      	nop
 80a4730:	20000fd4 	.word	0x20000fd4
 80a4734:	20001458 	.word	0x20001458

080a4738 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a4738:	4b02      	ldr	r3, [pc, #8]	; (80a4744 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a473a:	4a03      	ldr	r2, [pc, #12]	; (80a4748 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a473c:	601a      	str	r2, [r3, #0]
 80a473e:	2200      	movs	r2, #0
 80a4740:	605a      	str	r2, [r3, #4]

} // spark
 80a4742:	4770      	bx	lr
 80a4744:	20000fd4 	.word	0x20000fd4
 80a4748:	080aa6ac 	.word	0x080aa6ac

080a474c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a474e:	4606      	mov	r6, r0
 80a4750:	460d      	mov	r5, r1
  size_t n = 0;
 80a4752:	2400      	movs	r4, #0
 80a4754:	188f      	adds	r7, r1, r2
  while (size--) {
 80a4756:	42bd      	cmp	r5, r7
 80a4758:	d00c      	beq.n	80a4774 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a475a:	6833      	ldr	r3, [r6, #0]
 80a475c:	4630      	mov	r0, r6
 80a475e:	689b      	ldr	r3, [r3, #8]
 80a4760:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a4764:	4798      	blx	r3
     if (chunk>=0)
 80a4766:	1e03      	subs	r3, r0, #0
 80a4768:	db01      	blt.n	80a476e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a476a:	441c      	add	r4, r3
  while (size--) {
 80a476c:	e7f3      	b.n	80a4756 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a476e:	2c00      	cmp	r4, #0
 80a4770:	bf08      	it	eq
 80a4772:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a4774:	4620      	mov	r0, r4
 80a4776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4778 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a4778:	b570      	push	{r4, r5, r6, lr}
 80a477a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a477c:	460c      	mov	r4, r1
    }
 80a477e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a4780:	b149      	cbz	r1, 80a4796 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a4782:	f005 fdd0 	bl	80aa326 <strlen>
 80a4786:	682b      	ldr	r3, [r5, #0]
 80a4788:	4602      	mov	r2, r0
 80a478a:	4621      	mov	r1, r4
 80a478c:	4628      	mov	r0, r5
    }
 80a478e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a4792:	68db      	ldr	r3, [r3, #12]
 80a4794:	4718      	bx	r3
    }
 80a4796:	bd70      	pop	{r4, r5, r6, pc}

080a4798 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a4798:	6803      	ldr	r3, [r0, #0]
 80a479a:	689b      	ldr	r3, [r3, #8]
 80a479c:	4718      	bx	r3

080a479e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a479e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a47a0:	2a01      	cmp	r2, #1
 80a47a2:	bf98      	it	ls
 80a47a4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a47a6:	b530      	push	{r4, r5, lr}
 80a47a8:	b08b      	sub	sp, #44	; 0x2c
 80a47aa:	460c      	mov	r4, r1
  *str = '\0';
 80a47ac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a47b0:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a47b2:	4625      	mov	r5, r4
 80a47b4:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a47b8:	fb04 5312 	mls	r3, r4, r2, r5
 80a47bc:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a47be:	2b09      	cmp	r3, #9
 80a47c0:	bf94      	ite	ls
 80a47c2:	3330      	addls	r3, #48	; 0x30
 80a47c4:	3337      	addhi	r3, #55	; 0x37
 80a47c6:	b2db      	uxtb	r3, r3
  } while(n);
 80a47c8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a47ca:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a47ce:	d9f0      	bls.n	80a47b2 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a47d0:	f7ff ffd2 	bl	80a4778 <_ZN5Print5writeEPKc>
}
 80a47d4:	b00b      	add	sp, #44	; 0x2c
 80a47d6:	bd30      	pop	{r4, r5, pc}

080a47d8 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
 80a47d8:	b510      	push	{r4, lr}
  if (0 == max) {
 80a47da:	4604      	mov	r4, r0
 80a47dc:	b128      	cbz	r0, 80a47ea <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
 80a47de:	f005 fd41 	bl	80aa264 <rand>
 80a47e2:	fb90 f3f4 	sdiv	r3, r0, r4
 80a47e6:	fb03 0414 	mls	r4, r3, r4, r0
}
 80a47ea:	4620      	mov	r0, r4
 80a47ec:	bd10      	pop	{r4, pc}

080a47ee <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
 80a47ee:	4288      	cmp	r0, r1
{
 80a47f0:	b510      	push	{r4, lr}
 80a47f2:	4604      	mov	r4, r0
  if (min >= max) {
 80a47f4:	da03      	bge.n	80a47fe <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
 80a47f6:	1a08      	subs	r0, r1, r0
 80a47f8:	f7ff ffee 	bl	80a47d8 <_Z6randomi>
 80a47fc:	4404      	add	r4, r0
}
 80a47fe:	4620      	mov	r0, r4
 80a4800:	bd10      	pop	{r4, pc}

080a4802 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a4802:	b510      	push	{r4, lr}
 80a4804:	4604      	mov	r4, r0
 80a4806:	f7ff fbce 	bl	80a3fa6 <_ZNSt14_Function_baseD1Ev>
 80a480a:	4620      	mov	r0, r4
 80a480c:	bd10      	pop	{r4, pc}
	...

080a4810 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a4810:	2300      	movs	r3, #0
 80a4812:	4803      	ldr	r0, [pc, #12]	; (80a4820 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a4814:	4a03      	ldr	r2, [pc, #12]	; (80a4824 <_GLOBAL__sub_I_RGB+0x14>)
 80a4816:	4904      	ldr	r1, [pc, #16]	; (80a4828 <_GLOBAL__sub_I_RGB+0x18>)
 80a4818:	6083      	str	r3, [r0, #8]
 80a481a:	f000 bfd1 	b.w	80a57c0 <__aeabi_atexit>
 80a481e:	bf00      	nop
 80a4820:	20000fdc 	.word	0x20000fdc
 80a4824:	2000006c 	.word	0x2000006c
 80a4828:	080a4803 	.word	0x080a4803

080a482c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a482c:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a482e:	2600      	movs	r6, #0
 80a4830:	4604      	mov	r4, r0
 80a4832:	460d      	mov	r5, r1
 80a4834:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a4838:	f7ff f8f2 	bl	80a3a20 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a483c:	4628      	mov	r0, r5
    _spi = spi;
 80a483e:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a4840:	f7ff f9e0 	bl	80a3c04 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a4844:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a4846:	6066      	str	r6, [r4, #4]
}
 80a4848:	bd70      	pop	{r4, r5, r6, pc}

080a484a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a484a:	b510      	push	{r4, lr}
 80a484c:	4604      	mov	r4, r0
{
	free(buffer);
 80a484e:	6800      	ldr	r0, [r0, #0]
 80a4850:	f7ff fb54 	bl	80a3efc <free>
}
 80a4854:	4620      	mov	r0, r4
 80a4856:	bd10      	pop	{r4, pc}

080a4858 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a4858:	b510      	push	{r4, lr}
 80a485a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a485c:	6800      	ldr	r0, [r0, #0]
 80a485e:	b108      	cbz	r0, 80a4864 <_ZN6String10invalidateEv+0xc>
 80a4860:	f7ff fb4c 	bl	80a3efc <free>
	buffer = NULL;
 80a4864:	2300      	movs	r3, #0
	capacity = len = 0;
 80a4866:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a486a:	6023      	str	r3, [r4, #0]
}
 80a486c:	bd10      	pop	{r4, pc}

080a486e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a486e:	b538      	push	{r3, r4, r5, lr}
 80a4870:	4604      	mov	r4, r0
 80a4872:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a4874:	6800      	ldr	r0, [r0, #0]
 80a4876:	3101      	adds	r1, #1
 80a4878:	f7ff fb48 	bl	80a3f0c <realloc>
	if (newbuffer) {
 80a487c:	b110      	cbz	r0, 80a4884 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a487e:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a4882:	2001      	movs	r0, #1
	}
	return 0;
}
 80a4884:	bd38      	pop	{r3, r4, r5, pc}

080a4886 <_ZN6String7reserveEj>:
{
 80a4886:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a4888:	6803      	ldr	r3, [r0, #0]
{
 80a488a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a488c:	b123      	cbz	r3, 80a4898 <_ZN6String7reserveEj+0x12>
 80a488e:	6843      	ldr	r3, [r0, #4]
 80a4890:	428b      	cmp	r3, r1
 80a4892:	d301      	bcc.n	80a4898 <_ZN6String7reserveEj+0x12>
 80a4894:	2001      	movs	r0, #1
}
 80a4896:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a4898:	4620      	mov	r0, r4
 80a489a:	f7ff ffe8 	bl	80a486e <_ZN6String12changeBufferEj>
 80a489e:	2800      	cmp	r0, #0
 80a48a0:	d0f9      	beq.n	80a4896 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a48a2:	68a3      	ldr	r3, [r4, #8]
 80a48a4:	2b00      	cmp	r3, #0
 80a48a6:	d1f5      	bne.n	80a4894 <_ZN6String7reserveEj+0xe>
 80a48a8:	6822      	ldr	r2, [r4, #0]
 80a48aa:	7013      	strb	r3, [r2, #0]
 80a48ac:	e7f2      	b.n	80a4894 <_ZN6String7reserveEj+0xe>

080a48ae <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a48ae:	b570      	push	{r4, r5, r6, lr}
 80a48b0:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a48b2:	4611      	mov	r1, r2
{
 80a48b4:	4604      	mov	r4, r0
 80a48b6:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a48b8:	f7ff ffe5 	bl	80a4886 <_ZN6String7reserveEj>
 80a48bc:	b920      	cbnz	r0, 80a48c8 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a48be:	4620      	mov	r0, r4
 80a48c0:	f7ff ffca 	bl	80a4858 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a48c4:	4620      	mov	r0, r4
 80a48c6:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a48c8:	462a      	mov	r2, r5
 80a48ca:	4631      	mov	r1, r6
 80a48cc:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a48ce:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a48d0:	f005 fc8e 	bl	80aa1f0 <memcpy>
	buffer[len] = 0;
 80a48d4:	2100      	movs	r1, #0
 80a48d6:	6822      	ldr	r2, [r4, #0]
 80a48d8:	68a3      	ldr	r3, [r4, #8]
 80a48da:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a48dc:	e7f2      	b.n	80a48c4 <_ZN6String4copyEPKcj+0x16>

080a48de <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a48de:	4288      	cmp	r0, r1
{
 80a48e0:	b510      	push	{r4, lr}
 80a48e2:	460b      	mov	r3, r1
 80a48e4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a48e6:	d004      	beq.n	80a48f2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a48e8:	6809      	ldr	r1, [r1, #0]
 80a48ea:	b121      	cbz	r1, 80a48f6 <_ZN6StringaSERKS_+0x18>
 80a48ec:	689a      	ldr	r2, [r3, #8]
 80a48ee:	f7ff ffde 	bl	80a48ae <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a48f2:	4620      	mov	r0, r4
 80a48f4:	bd10      	pop	{r4, pc}
	else invalidate();
 80a48f6:	f7ff ffaf 	bl	80a4858 <_ZN6String10invalidateEv>
 80a48fa:	e7fa      	b.n	80a48f2 <_ZN6StringaSERKS_+0x14>

080a48fc <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a48fc:	2300      	movs	r3, #0
String::String(const String &value)
 80a48fe:	b510      	push	{r4, lr}
 80a4900:	4604      	mov	r4, r0
	capacity = 0;
 80a4902:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a4906:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a4908:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a490a:	f7ff ffe8 	bl	80a48de <_ZN6StringaSERKS_>
}
 80a490e:	4620      	mov	r0, r4
 80a4910:	bd10      	pop	{r4, pc}

080a4912 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a4912:	b538      	push	{r3, r4, r5, lr}
 80a4914:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a4916:	460c      	mov	r4, r1
 80a4918:	b149      	cbz	r1, 80a492e <_ZN6StringaSEPKc+0x1c>
 80a491a:	4608      	mov	r0, r1
 80a491c:	f005 fd03 	bl	80aa326 <strlen>
 80a4920:	4621      	mov	r1, r4
 80a4922:	4602      	mov	r2, r0
 80a4924:	4628      	mov	r0, r5
 80a4926:	f7ff ffc2 	bl	80a48ae <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a492a:	4628      	mov	r0, r5
 80a492c:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a492e:	f7ff ff93 	bl	80a4858 <_ZN6String10invalidateEv>
 80a4932:	e7fa      	b.n	80a492a <_ZN6StringaSEPKc+0x18>

080a4934 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
 80a4934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a4936:	4604      	mov	r4, r0
	buffer = NULL;
 80a4938:	2300      	movs	r3, #0
String::String(unsigned char value, unsigned char base)
 80a493a:	4608      	mov	r0, r1
	capacity = 0;
 80a493c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a4940:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a4942:	7323      	strb	r3, [r4, #12]
	utoa(value, buf, base);
 80a4944:	a901      	add	r1, sp, #4
 80a4946:	f000 fda8 	bl	80a549a <utoa>
	*this = buf;
 80a494a:	4620      	mov	r0, r4
 80a494c:	a901      	add	r1, sp, #4
 80a494e:	f7ff ffe0 	bl	80a4912 <_ZN6StringaSEPKc>
}
 80a4952:	4620      	mov	r0, r4
 80a4954:	b004      	add	sp, #16
 80a4956:	bd10      	pop	{r4, pc}

080a4958 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a4958:	b570      	push	{r4, r5, r6, lr}
 80a495a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a495c:	460e      	mov	r6, r1
 80a495e:	b909      	cbnz	r1, 80a4964 <_ZN6String6concatEPKcj+0xc>
 80a4960:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a4962:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a4964:	b16a      	cbz	r2, 80a4982 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a4966:	6884      	ldr	r4, [r0, #8]
 80a4968:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a496a:	4621      	mov	r1, r4
 80a496c:	f7ff ff8b 	bl	80a4886 <_ZN6String7reserveEj>
 80a4970:	2800      	cmp	r0, #0
 80a4972:	d0f5      	beq.n	80a4960 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a4974:	6828      	ldr	r0, [r5, #0]
 80a4976:	68ab      	ldr	r3, [r5, #8]
 80a4978:	4631      	mov	r1, r6
 80a497a:	4418      	add	r0, r3
 80a497c:	f005 fcb0 	bl	80aa2e0 <strcpy>
	len = newlen;
 80a4980:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a4982:	2001      	movs	r0, #1
 80a4984:	e7ed      	b.n	80a4962 <_ZN6String6concatEPKcj+0xa>

080a4986 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a4986:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a4988:	688a      	ldr	r2, [r1, #8]
 80a498a:	6809      	ldr	r1, [r1, #0]
{
 80a498c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a498e:	f7ff ffe3 	bl	80a4958 <_ZN6String6concatEPKcj>
 80a4992:	b910      	cbnz	r0, 80a499a <_ZplRK15StringSumHelperRK6String+0x14>
 80a4994:	4620      	mov	r0, r4
 80a4996:	f7ff ff5f 	bl	80a4858 <_ZN6String10invalidateEv>
	return a;
}
 80a499a:	4620      	mov	r0, r4
 80a499c:	bd10      	pop	{r4, pc}

080a499e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a499e:	b538      	push	{r3, r4, r5, lr}
 80a49a0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a49a2:	460d      	mov	r5, r1
 80a49a4:	b921      	cbnz	r1, 80a49b0 <_ZplRK15StringSumHelperPKc+0x12>
 80a49a6:	4620      	mov	r0, r4
 80a49a8:	f7ff ff56 	bl	80a4858 <_ZN6String10invalidateEv>
	return a;
}
 80a49ac:	4620      	mov	r0, r4
 80a49ae:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a49b0:	4608      	mov	r0, r1
 80a49b2:	f005 fcb8 	bl	80aa326 <strlen>
 80a49b6:	4629      	mov	r1, r5
 80a49b8:	4602      	mov	r2, r0
 80a49ba:	4620      	mov	r0, r4
 80a49bc:	f7ff ffcc 	bl	80a4958 <_ZN6String6concatEPKcj>
 80a49c0:	2800      	cmp	r0, #0
 80a49c2:	d0f0      	beq.n	80a49a6 <_ZplRK15StringSumHelperPKc+0x8>
 80a49c4:	e7f2      	b.n	80a49ac <_ZplRK15StringSumHelperPKc+0xe>
	...

080a49c8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a49c8:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a49ca:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a49cc:	b510      	push	{r4, lr}
 80a49ce:	4b08      	ldr	r3, [pc, #32]	; (80a49f0 <_GLOBAL__sub_I_System+0x28>)
 80a49d0:	4c08      	ldr	r4, [pc, #32]	; (80a49f4 <_GLOBAL__sub_I_System+0x2c>)
 80a49d2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a49d4:	4b08      	ldr	r3, [pc, #32]	; (80a49f8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a49d6:	6020      	str	r0, [r4, #0]
 80a49d8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a49da:	71a0      	strb	r0, [r4, #6]
 80a49dc:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a49de:	f7ff f9b1 	bl	80a3d44 <set_system_mode>
SystemClass System;
 80a49e2:	4620      	mov	r0, r4
 80a49e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a49e8:	4a04      	ldr	r2, [pc, #16]	; (80a49fc <_GLOBAL__sub_I_System+0x34>)
 80a49ea:	4905      	ldr	r1, [pc, #20]	; (80a4a00 <_GLOBAL__sub_I_System+0x38>)
 80a49ec:	f000 bee8 	b.w	80a57c0 <__aeabi_atexit>
 80a49f0:	20000ff8 	.word	0x20000ff8
 80a49f4:	20000fec 	.word	0x20000fec
 80a49f8:	ffff0000 	.word	0xffff0000
 80a49fc:	2000006c 	.word	0x2000006c
 80a4a00:	080a20ef 	.word	0x080a20ef

080a4a04 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a4a04:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a4a06:	6803      	ldr	r3, [r0, #0]
{
 80a4a08:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a4a0c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a4a0e:	2201      	movs	r2, #1
 80a4a10:	f247 5330 	movw	r3, #30000	; 0x7530
 80a4a14:	f10d 0107 	add.w	r1, sp, #7
 80a4a18:	47a0      	blx	r4
}
 80a4a1a:	b002      	add	sp, #8
 80a4a1c:	bd10      	pop	{r4, pc}

080a4a1e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a4a1e:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a4a20:	6803      	ldr	r3, [r0, #0]
 80a4a22:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a4a24:	f247 5330 	movw	r3, #30000	; 0x7530
 80a4a28:	46a4      	mov	ip, r4
}
 80a4a2a:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a4a2c:	4760      	bx	ip

080a4a2e <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a4a2e:	b513      	push	{r0, r1, r4, lr}
 80a4a30:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a4a32:	6802      	ldr	r2, [r0, #0]
{
 80a4a34:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a4a38:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a4a3a:	f10d 0107 	add.w	r1, sp, #7
 80a4a3e:	2201      	movs	r2, #1
 80a4a40:	47a0      	blx	r4
}
 80a4a42:	b002      	add	sp, #8
 80a4a44:	bd10      	pop	{r4, pc}

080a4a46 <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a4a46:	4770      	bx	lr

080a4a48 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a4a48:	4770      	bx	lr
	...

080a4a4c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a4a4c:	b510      	push	{r4, lr}
 80a4a4e:	4604      	mov	r4, r0
	    ||
 80a4a50:	4b06      	ldr	r3, [pc, #24]	; (80a4a6c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a4a52:	4608      	mov	r0, r1
	    ||
 80a4a54:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a4a56:	f104 040c 	add.w	r4, r4, #12
 80a4a5a:	d004      	beq.n	80a4a66 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a4a5c:	f000 febc 	bl	80a57d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a4a60:	2800      	cmp	r0, #0
	return nullptr;
 80a4a62:	bf08      	it	eq
 80a4a64:	2400      	moveq	r4, #0
      }
 80a4a66:	4620      	mov	r0, r4
 80a4a68:	bd10      	pop	{r4, pc}
 80a4a6a:	bf00      	nop
 80a4a6c:	080aa718 	.word	0x080aa718

080a4a70 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a4a70:	b510      	push	{r4, lr}
 80a4a72:	4604      	mov	r4, r0
 80a4a74:	21ac      	movs	r1, #172	; 0xac
 80a4a76:	f000 fea8 	bl	80a57ca <_ZdlPvj>
 80a4a7a:	4620      	mov	r0, r4
 80a4a7c:	bd10      	pop	{r4, pc}

080a4a7e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a4a7e:	f7fb bb10 	b.w	80a00a2 <_ZdlPv>
	...

080a4a84 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a4a84:	b538      	push	{r3, r4, r5, lr}
 80a4a86:	4b0b      	ldr	r3, [pc, #44]	; (80a4ab4 <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a4a88:	6984      	ldr	r4, [r0, #24]
 80a4a8a:	4605      	mov	r5, r0
 80a4a8c:	6003      	str	r3, [r0, #0]
 80a4a8e:	b17c      	cbz	r4, 80a4ab0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a4a90:	6863      	ldr	r3, [r4, #4]
 80a4a92:	3b01      	subs	r3, #1
 80a4a94:	6063      	str	r3, [r4, #4]
 80a4a96:	b95b      	cbnz	r3, 80a4ab0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a4a98:	6823      	ldr	r3, [r4, #0]
 80a4a9a:	4620      	mov	r0, r4
 80a4a9c:	689b      	ldr	r3, [r3, #8]
 80a4a9e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a4aa0:	68a3      	ldr	r3, [r4, #8]
 80a4aa2:	3b01      	subs	r3, #1
 80a4aa4:	60a3      	str	r3, [r4, #8]
 80a4aa6:	b91b      	cbnz	r3, 80a4ab0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a4aa8:	6823      	ldr	r3, [r4, #0]
 80a4aaa:	4620      	mov	r0, r4
 80a4aac:	68db      	ldr	r3, [r3, #12]
 80a4aae:	4798      	blx	r3
 80a4ab0:	4628      	mov	r0, r5
 80a4ab2:	bd38      	pop	{r3, r4, r5, pc}
 80a4ab4:	080aa728 	.word	0x080aa728

080a4ab8 <_ZN9TCPClientD0Ev>:
 80a4ab8:	b510      	push	{r4, lr}
 80a4aba:	4604      	mov	r4, r0
 80a4abc:	f7ff ffe2 	bl	80a4a84 <_ZN9TCPClientD1Ev>
 80a4ac0:	4620      	mov	r0, r4
 80a4ac2:	211c      	movs	r1, #28
 80a4ac4:	f000 fe81 	bl	80a57ca <_ZdlPvj>
 80a4ac8:	4620      	mov	r0, r4
 80a4aca:	bd10      	pop	{r4, pc}

080a4acc <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a4acc:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 80a4ace:	4604      	mov	r4, r0
 80a4ad0:	4606      	mov	r6, r0
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a4ad2:	694d      	ldr	r5, [r1, #20]
 80a4ad4:	4b04      	ldr	r3, [pc, #16]	; (80a4ae8 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a4ad6:	358c      	adds	r5, #140	; 0x8c
 80a4ad8:	f844 3b04 	str.w	r3, [r4], #4
 80a4adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a4ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a4ae0:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a4ae2:	4630      	mov	r0, r6
 80a4ae4:	7023      	strb	r3, [r4, #0]
 80a4ae6:	bd70      	pop	{r4, r5, r6, pc}
 80a4ae8:	080aa694 	.word	0x080aa694

080a4aec <_ZN9TCPClient4peekEv>:
{
 80a4aec:	b510      	push	{r4, lr}
 80a4aee:	6943      	ldr	r3, [r0, #20]
 80a4af0:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a4af2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a4af6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a4afa:	429a      	cmp	r2, r3
 80a4afc:	d005      	beq.n	80a4b0a <_ZN9TCPClient4peekEv+0x1e>
 80a4afe:	6963      	ldr	r3, [r4, #20]
 80a4b00:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a4b04:	4413      	add	r3, r2
 80a4b06:	7918      	ldrb	r0, [r3, #4]
}
 80a4b08:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a4b0a:	6803      	ldr	r3, [r0, #0]
 80a4b0c:	691b      	ldr	r3, [r3, #16]
 80a4b0e:	4798      	blx	r3
 80a4b10:	2800      	cmp	r0, #0
 80a4b12:	d1f4      	bne.n	80a4afe <_ZN9TCPClient4peekEv+0x12>
 80a4b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a4b18:	e7f6      	b.n	80a4b08 <_ZN9TCPClient4peekEv+0x1c>

080a4b1a <_ZN9TCPClient4readEv>:
{
 80a4b1a:	b510      	push	{r4, lr}
 80a4b1c:	6943      	ldr	r3, [r0, #20]
 80a4b1e:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a4b20:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a4b24:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a4b28:	429a      	cmp	r2, r3
 80a4b2a:	d008      	beq.n	80a4b3e <_ZN9TCPClient4readEv+0x24>
 80a4b2c:	6963      	ldr	r3, [r4, #20]
 80a4b2e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a4b32:	1c51      	adds	r1, r2, #1
 80a4b34:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a4b38:	4413      	add	r3, r2
 80a4b3a:	7918      	ldrb	r0, [r3, #4]
}
 80a4b3c:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a4b3e:	6803      	ldr	r3, [r0, #0]
 80a4b40:	691b      	ldr	r3, [r3, #16]
 80a4b42:	4798      	blx	r3
 80a4b44:	2800      	cmp	r0, #0
 80a4b46:	d1f1      	bne.n	80a4b2c <_ZN9TCPClient4readEv+0x12>
 80a4b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a4b4c:	e7f6      	b.n	80a4b3c <_ZN9TCPClient4readEv+0x22>

080a4b4e <_ZN9TCPClient4readEPhj>:
{
 80a4b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4b50:	6943      	ldr	r3, [r0, #20]
 80a4b52:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a4b54:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a4b58:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a4b5c:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a4b5e:	429a      	cmp	r2, r3
{
 80a4b60:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a4b62:	d016      	beq.n	80a4b92 <_ZN9TCPClient4readEPhj+0x44>
 80a4b64:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a4b66:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a4b68:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a4b6c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a4b70:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a4b72:	42bc      	cmp	r4, r7
 80a4b74:	bf28      	it	cs
 80a4b76:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a4b78:	3304      	adds	r3, #4
 80a4b7a:	4622      	mov	r2, r4
 80a4b7c:	4419      	add	r1, r3
 80a4b7e:	f005 fb37 	bl	80aa1f0 <memcpy>
 80a4b82:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a4b84:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a4b88:	4423      	add	r3, r4
 80a4b8a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a4b8e:	4620      	mov	r0, r4
 80a4b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a4b92:	6803      	ldr	r3, [r0, #0]
 80a4b94:	691b      	ldr	r3, [r3, #16]
 80a4b96:	4798      	blx	r3
 80a4b98:	2800      	cmp	r0, #0
 80a4b9a:	d1e3      	bne.n	80a4b64 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a4b9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a4ba0:	e7f5      	b.n	80a4b8e <_ZN9TCPClient4readEPhj+0x40>

080a4ba2 <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a4ba2:	2300      	movs	r3, #0
 80a4ba4:	6942      	ldr	r2, [r0, #20]
 80a4ba6:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a4baa:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a4bac:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a4bb0:	4770      	bx	lr
	...

080a4bb4 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a4bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a4bb8:	461f      	mov	r7, r3
    stop();
 80a4bba:	6803      	ldr	r3, [r0, #0]
{
 80a4bbc:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a4bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a4bc0:	4605      	mov	r5, r0
 80a4bc2:	460c      	mov	r4, r1
 80a4bc4:	4616      	mov	r6, r2
    stop();
 80a4bc6:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a4bc8:	4638      	mov	r0, r7
 80a4bca:	f7ff fda9 	bl	80a4720 <_ZN5spark12NetworkClass4fromEm>
 80a4bce:	6803      	ldr	r3, [r0, #0]
 80a4bd0:	68db      	ldr	r3, [r3, #12]
 80a4bd2:	4798      	blx	r3
 80a4bd4:	2800      	cmp	r0, #0
 80a4bd6:	d054      	beq.n	80a4c82 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a4bd8:	4633      	mov	r3, r6
 80a4bda:	2206      	movs	r2, #6
 80a4bdc:	2101      	movs	r1, #1
 80a4bde:	2002      	movs	r0, #2
 80a4be0:	9700      	str	r7, [sp, #0]
 80a4be2:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a4be6:	f7fe ffd5 	bl	80a3b94 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a4bea:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a4bec:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a4bf0:	f04f 0800 	mov.w	r8, #0
 80a4bf4:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a4bf8:	696b      	ldr	r3, [r5, #20]
 80a4bfa:	2001      	movs	r0, #1
 80a4bfc:	681b      	ldr	r3, [r3, #0]
 80a4bfe:	4923      	ldr	r1, [pc, #140]	; (80a4c8c <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a4c00:	9301      	str	r3, [sp, #4]
 80a4c02:	4b23      	ldr	r3, [pc, #140]	; (80a4c90 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a4c04:	aa02      	add	r2, sp, #8
 80a4c06:	9300      	str	r3, [sp, #0]
 80a4c08:	4643      	mov	r3, r8
 80a4c0a:	f7ff f88b 	bl	80a3d24 <log_message>
          if (socket_handle_valid(d_->sock))
 80a4c0e:	696b      	ldr	r3, [r5, #20]
 80a4c10:	6818      	ldr	r0, [r3, #0]
 80a4c12:	f7fe ffb7 	bl	80a3b84 <socket_handle_valid>
 80a4c16:	2800      	cmp	r0, #0
 80a4c18:	d033      	beq.n	80a4c82 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a4c1a:	4628      	mov	r0, r5
 80a4c1c:	f7ff ffc1 	bl	80a4ba2 <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a4c20:	2302      	movs	r3, #2
 80a4c22:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a4c26:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a4c28:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a4c2a:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a4c2e:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a4c30:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a4c34:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a4c38:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a4c3a:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a4c3e:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a4c42:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a4c46:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a4c4a:	f7ff f85b 	bl	80a3d04 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a4c4e:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a4c50:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a4c52:	2210      	movs	r2, #16
 80a4c54:	6818      	ldr	r0, [r3, #0]
 80a4c56:	a902      	add	r1, sp, #8
 80a4c58:	f7fe ffa4 	bl	80a3ba4 <socket_connect>
 80a4c5c:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a4c5e:	4630      	mov	r0, r6
 80a4c60:	f7ff f850 	bl	80a3d04 <HAL_NET_SetNetWatchDog>
 80a4c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a4c66:	696e      	ldr	r6, [r5, #20]
 80a4c68:	368c      	adds	r6, #140	; 0x8c
 80a4c6a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a4c6c:	6823      	ldr	r3, [r4, #0]
 80a4c6e:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a4c70:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a4c72:	f1b9 0f00 	cmp.w	r9, #0
 80a4c76:	d007      	beq.n	80a4c88 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a4c78:	682b      	ldr	r3, [r5, #0]
 80a4c7a:	4628      	mov	r0, r5
 80a4c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a4c7e:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a4c80:	4640      	mov	r0, r8
}
 80a4c82:	b00b      	add	sp, #44	; 0x2c
 80a4c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a4c88:	2001      	movs	r0, #1
        return connected;
 80a4c8a:	e7fa      	b.n	80a4c82 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a4c8c:	080aa6e0 	.word	0x080aa6e0
 80a4c90:	080aa6e7 	.word	0x080aa6e7

080a4c94 <_ZN9TCPClient9availableEv>:
{
 80a4c94:	b538      	push	{r3, r4, r5, lr}
 80a4c96:	6942      	ldr	r2, [r0, #20]
 80a4c98:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a4c9a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a4c9e:	b12b      	cbz	r3, 80a4cac <_ZN9TCPClient9availableEv+0x18>
 80a4ca0:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a4ca4:	429a      	cmp	r2, r3
 80a4ca6:	d101      	bne.n	80a4cac <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a4ca8:	f7ff ff7b 	bl	80a4ba2 <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a4cac:	6920      	ldr	r0, [r4, #16]
 80a4cae:	f7ff fd37 	bl	80a4720 <_ZN5spark12NetworkClass4fromEm>
 80a4cb2:	6803      	ldr	r3, [r0, #0]
 80a4cb4:	68db      	ldr	r3, [r3, #12]
 80a4cb6:	4798      	blx	r3
 80a4cb8:	b1f8      	cbz	r0, 80a4cfa <_ZN9TCPClient9availableEv+0x66>
 80a4cba:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a4cbc:	6818      	ldr	r0, [r3, #0]
 80a4cbe:	f7fe ff61 	bl	80a3b84 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a4cc2:	b1d0      	cbz	r0, 80a4cfa <_ZN9TCPClient9availableEv+0x66>
 80a4cc4:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a4cc6:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a4cca:	297f      	cmp	r1, #127	; 0x7f
 80a4ccc:	d815      	bhi.n	80a4cfa <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a4cce:	1d05      	adds	r5, r0, #4
 80a4cd0:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a4cd4:	2300      	movs	r3, #0
 80a4cd6:	6800      	ldr	r0, [r0, #0]
 80a4cd8:	4429      	add	r1, r5
 80a4cda:	f7fe ff6b 	bl	80a3bb4 <socket_receive>
            if (ret > 0)
 80a4cde:	2800      	cmp	r0, #0
 80a4ce0:	dd0b      	ble.n	80a4cfa <_ZN9TCPClient9availableEv+0x66>
 80a4ce2:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a4ce4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a4ce8:	b90a      	cbnz	r2, 80a4cee <_ZN9TCPClient9availableEv+0x5a>
 80a4cea:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a4cee:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a4cf0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a4cf4:	4410      	add	r0, r2
 80a4cf6:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a4cfa:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a4cfc:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a4d00:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a4d04:	1ac0      	subs	r0, r0, r3
 80a4d06:	bd38      	pop	{r3, r4, r5, pc}

080a4d08 <_ZN9TCPClient4stopEv>:
{
 80a4d08:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a4d0a:	6943      	ldr	r3, [r0, #20]
{
 80a4d0c:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a4d0e:	6818      	ldr	r0, [r3, #0]
 80a4d10:	f7fe ff38 	bl	80a3b84 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a4d14:	b118      	cbz	r0, 80a4d1e <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a4d16:	6963      	ldr	r3, [r4, #20]
 80a4d18:	6818      	ldr	r0, [r3, #0]
 80a4d1a:	f7fe ff53 	bl	80a3bc4 <socket_close>
 80a4d1e:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a4d20:	f7fe ff60 	bl	80a3be4 <socket_handle_invalid>
 80a4d24:	6028      	str	r0, [r5, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
 80a4d26:	6960      	ldr	r0, [r4, #20]
 80a4d28:	2211      	movs	r2, #17
 80a4d2a:	2100      	movs	r1, #0
 80a4d2c:	308c      	adds	r0, #140	; 0x8c
 80a4d2e:	f005 fa6d 	bl	80aa20c <memset>
  flush_buffer();
 80a4d32:	4620      	mov	r0, r4
}
 80a4d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a4d38:	f7ff bf33 	b.w	80a4ba2 <_ZN9TCPClient12flush_bufferEv>

080a4d3c <_ZN9TCPClient6statusEv>:
{
 80a4d3c:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a4d3e:	6943      	ldr	r3, [r0, #20]
{
 80a4d40:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a4d42:	6818      	ldr	r0, [r3, #0]
 80a4d44:	f7fe ff1e 	bl	80a3b84 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a4d48:	b908      	cbnz	r0, 80a4d4e <_ZN9TCPClient6statusEv+0x12>
 80a4d4a:	2000      	movs	r0, #0
}
 80a4d4c:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a4d4e:	6920      	ldr	r0, [r4, #16]
 80a4d50:	f7ff fce6 	bl	80a4720 <_ZN5spark12NetworkClass4fromEm>
 80a4d54:	6803      	ldr	r3, [r0, #0]
 80a4d56:	68db      	ldr	r3, [r3, #12]
 80a4d58:	4798      	blx	r3
 80a4d5a:	2800      	cmp	r0, #0
 80a4d5c:	d0f5      	beq.n	80a4d4a <_ZN9TCPClient6statusEv+0xe>
 80a4d5e:	6963      	ldr	r3, [r4, #20]
 80a4d60:	6818      	ldr	r0, [r3, #0]
 80a4d62:	f7fe ff07 	bl	80a3b74 <socket_active_status>
 80a4d66:	fab0 f080 	clz	r0, r0
 80a4d6a:	0940      	lsrs	r0, r0, #5
 80a4d6c:	e7ee      	b.n	80a4d4c <_ZN9TCPClient6statusEv+0x10>

080a4d6e <_ZN9TCPClientcvbEv>:
{
 80a4d6e:	b508      	push	{r3, lr}
   return (status()!=0);
 80a4d70:	f7ff ffe4 	bl	80a4d3c <_ZN9TCPClient6statusEv>
}
 80a4d74:	3800      	subs	r0, #0
 80a4d76:	bf18      	it	ne
 80a4d78:	2001      	movne	r0, #1
 80a4d7a:	bd08      	pop	{r3, pc}

080a4d7c <_ZN9TCPClient5writeEPKhjm>:
{
 80a4d7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 80a4d80:	2700      	movs	r7, #0
 80a4d82:	6047      	str	r7, [r0, #4]
 80a4d84:	4604      	mov	r4, r0
 80a4d86:	460d      	mov	r5, r1
 80a4d88:	4616      	mov	r6, r2
 80a4d8a:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a4d8c:	f7ff ffd6 	bl	80a4d3c <_ZN9TCPClient6statusEv>
 80a4d90:	b170      	cbz	r0, 80a4db0 <_ZN9TCPClient5writeEPKhjm+0x34>
 80a4d92:	e9cd 8700 	strd	r8, r7, [sp]
 80a4d96:	6960      	ldr	r0, [r4, #20]
 80a4d98:	463b      	mov	r3, r7
 80a4d9a:	4632      	mov	r2, r6
 80a4d9c:	4629      	mov	r1, r5
 80a4d9e:	6800      	ldr	r0, [r0, #0]
 80a4da0:	f7fe ff28 	bl	80a3bf4 <socket_send_ex>
    if (ret < 0) {
 80a4da4:	2800      	cmp	r0, #0
 80a4da6:	da00      	bge.n	80a4daa <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a4da8:	6060      	str	r0, [r4, #4]
}
 80a4daa:	b002      	add	sp, #8
 80a4dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a4db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a4db4:	e7f8      	b.n	80a4da8 <_ZN9TCPClient5writeEPKhjm+0x2c>

080a4db6 <_ZN9TCPClient9connectedEv>:
{
 80a4db6:	b570      	push	{r4, r5, r6, lr}
 80a4db8:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a4dba:	f7ff ffbf 	bl	80a4d3c <_ZN9TCPClient6statusEv>
 80a4dbe:	b9e8      	cbnz	r0, 80a4dfc <_ZN9TCPClient9connectedEv+0x46>
 80a4dc0:	696b      	ldr	r3, [r5, #20]
 80a4dc2:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a4dc6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a4dca:	4291      	cmp	r1, r2
 80a4dcc:	d116      	bne.n	80a4dfc <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a4dce:	6818      	ldr	r0, [r3, #0]
 80a4dd0:	f7fe fed8 	bl	80a3b84 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a4dd4:	b908      	cbnz	r0, 80a4dda <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a4dd6:	2000      	movs	r0, #0
}
 80a4dd8:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a4dda:	696b      	ldr	r3, [r5, #20]
 80a4ddc:	6818      	ldr	r0, [r3, #0]
 80a4dde:	f7fe fec9 	bl	80a3b74 <socket_active_status>
 80a4de2:	2801      	cmp	r0, #1
 80a4de4:	4604      	mov	r4, r0
 80a4de6:	d1f6      	bne.n	80a4dd6 <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a4de8:	682b      	ldr	r3, [r5, #0]
 80a4dea:	4628      	mov	r0, r5
 80a4dec:	691b      	ldr	r3, [r3, #16]
 80a4dee:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a4df0:	b930      	cbnz	r0, 80a4e00 <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a4df2:	682b      	ldr	r3, [r5, #0]
 80a4df4:	4628      	mov	r0, r5
 80a4df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a4df8:	4798      	blx	r3
 80a4dfa:	e7ec      	b.n	80a4dd6 <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a4dfc:	2001      	movs	r0, #1
 80a4dfe:	e7eb      	b.n	80a4dd8 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a4e00:	4620      	mov	r0, r4
 80a4e02:	e7e9      	b.n	80a4dd8 <_ZN9TCPClient9connectedEv+0x22>

080a4e04 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a4e04:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a4e06:	b510      	push	{r4, lr}
 80a4e08:	4604      	mov	r4, r0
          total(0) {
 80a4e0a:	6001      	str	r1, [r0, #0]
 80a4e0c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a4e10:	3088      	adds	r0, #136	; 0x88
 80a4e12:	f7ff fbd7 	bl	80a45c4 <_ZN9IPAddressC1Ev>
}
 80a4e16:	4620      	mov	r0, r4
 80a4e18:	bd10      	pop	{r4, pc}
	...

080a4e1c <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a4e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4e1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a4e22:	2300      	movs	r3, #0
 80a4e24:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a4e28:	4a0d      	ldr	r2, [pc, #52]	; (80a4e60 <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a4e2a:	6103      	str	r3, [r0, #16]
 80a4e2c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a4e2e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a4e30:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a4e32:	20ac      	movs	r0, #172	; 0xac
 80a4e34:	460e      	mov	r6, r1
 80a4e36:	f7fb f930 	bl	80a009a <_Znwj>
	  auto __pi = ::new (__mem)
 80a4e3a:	1e05      	subs	r5, r0, #0
 80a4e3c:	f105 070c 	add.w	r7, r5, #12
 80a4e40:	d008      	beq.n	80a4e54 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a4e42:	2301      	movs	r3, #1
 80a4e44:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a4e48:	4b06      	ldr	r3, [pc, #24]	; (80a4e64 <_ZN9TCPClientC1Em+0x48>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a4e4a:	4631      	mov	r1, r6
 80a4e4c:	4638      	mov	r0, r7
 80a4e4e:	602b      	str	r3, [r5, #0]
 80a4e50:	f7ff ffd8 	bl	80a4e04 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a4e54:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a4e56:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a4e5a:	f7ff fea2 	bl	80a4ba2 <_ZN9TCPClient12flush_bufferEv>
}
 80a4e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4e60:	080aa728 	.word	0x080aa728
 80a4e64:	080aa704 	.word	0x080aa704

080a4e68 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a4e68:	b510      	push	{r4, lr}
 80a4e6a:	4604      	mov	r4, r0
 80a4e6c:	f7fe feba 	bl	80a3be4 <socket_handle_invalid>
 80a4e70:	4601      	mov	r1, r0
 80a4e72:	4620      	mov	r0, r4
 80a4e74:	f7ff ffd2 	bl	80a4e1c <_ZN9TCPClientC1Em>
}
 80a4e78:	4620      	mov	r0, r4
 80a4e7a:	bd10      	pop	{r4, pc}

080a4e7c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a4e7c:	b510      	push	{r4, lr}
 80a4e7e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a4e80:	6800      	ldr	r0, [r0, #0]
 80a4e82:	f7fe fe7f 	bl	80a3b84 <socket_handle_valid>
 80a4e86:	b110      	cbz	r0, 80a4e8e <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a4e88:	6820      	ldr	r0, [r4, #0]
 80a4e8a:	f7fe fe9b 	bl	80a3bc4 <socket_close>
    }
}
 80a4e8e:	4620      	mov	r0, r4
 80a4e90:	bd10      	pop	{r4, pc}

080a4e92 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80a4e92:	300c      	adds	r0, #12
 80a4e94:	f7ff bff2 	b.w	80a4e7c <_ZN9TCPClient4DataD1Ev>

080a4e98 <_ZN9TCPClient7connectEPKctm>:
{
 80a4e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a4e9c:	461f      	mov	r7, r3
    stop();
 80a4e9e:	6803      	ldr	r3, [r0, #0]
{
 80a4ea0:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a4ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a4ea4:	4606      	mov	r6, r0
 80a4ea6:	460d      	mov	r5, r1
 80a4ea8:	4690      	mov	r8, r2
    stop();
 80a4eaa:	4798      	blx	r3
    if (Network.ready())
 80a4eac:	4813      	ldr	r0, [pc, #76]	; (80a4efc <_ZN9TCPClient7connectEPKctm+0x64>)
 80a4eae:	f7ff fbe2 	bl	80a4676 <_ZN5spark12NetworkClass5readyEv>
 80a4eb2:	b1f0      	cbz	r0, 80a4ef2 <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a4eb4:	a802      	add	r0, sp, #8
 80a4eb6:	f7ff fb85 	bl	80a45c4 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a4eba:	4628      	mov	r0, r5
 80a4ebc:	f005 fa33 	bl	80aa326 <strlen>
 80a4ec0:	2400      	movs	r4, #0
 80a4ec2:	b281      	uxth	r1, r0
 80a4ec4:	463b      	mov	r3, r7
 80a4ec6:	4628      	mov	r0, r5
 80a4ec8:	9400      	str	r4, [sp, #0]
 80a4eca:	aa03      	add	r2, sp, #12
 80a4ecc:	f7fe ff22 	bl	80a3d14 <inet_gethostbyname>
 80a4ed0:	b990      	cbnz	r0, 80a4ef8 <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a4ed2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a4ed4:	ad09      	add	r5, sp, #36	; 0x24
 80a4ed6:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a4eda:	4b09      	ldr	r3, [pc, #36]	; (80a4f00 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a4edc:	ac03      	add	r4, sp, #12
 80a4ede:	9308      	str	r3, [sp, #32]
 80a4ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a4ee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a4ee4:	6823      	ldr	r3, [r4, #0]
 80a4ee6:	4642      	mov	r2, r8
 80a4ee8:	702b      	strb	r3, [r5, #0]
 80a4eea:	4630      	mov	r0, r6
 80a4eec:	463b      	mov	r3, r7
 80a4eee:	a908      	add	r1, sp, #32
 80a4ef0:	47c8      	blx	r9
}
 80a4ef2:	b00f      	add	sp, #60	; 0x3c
 80a4ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a4ef8:	4620      	mov	r0, r4
 80a4efa:	e7fa      	b.n	80a4ef2 <_ZN9TCPClient7connectEPKctm+0x5a>
 80a4efc:	20000fd4 	.word	0x20000fd4
 80a4f00:	080aa694 	.word	0x080aa694

080a4f04 <_ZN9TCPServer5writeEhm>:

    return _client;
}

size_t TCPServer::write(uint8_t b, system_tick_t timeout)
{
 80a4f04:	b513      	push	{r0, r1, r4, lr}
 80a4f06:	4613      	mov	r3, r2
    return write(&b, sizeof(b), timeout);
 80a4f08:	6802      	ldr	r2, [r0, #0]
{
 80a4f0a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, sizeof(b), timeout);
 80a4f0e:	6994      	ldr	r4, [r2, #24]
 80a4f10:	f10d 0107 	add.w	r1, sp, #7
 80a4f14:	2201      	movs	r2, #1
 80a4f16:	47a0      	blx	r4
}
 80a4f18:	b002      	add	sp, #8
 80a4f1a:	bd10      	pop	{r4, pc}

080a4f1c <_ZN9TCPServer5writeEh>:
    setWriteError(_client.getWriteError());
    return ret;
}

size_t TCPServer::write(uint8_t b)
{
 80a4f1c:	b507      	push	{r0, r1, r2, lr}
    return write(&b, 1);
 80a4f1e:	6803      	ldr	r3, [r0, #0]
{
 80a4f20:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1);
 80a4f24:	2201      	movs	r2, #1
 80a4f26:	68db      	ldr	r3, [r3, #12]
 80a4f28:	f10d 0107 	add.w	r1, sp, #7
 80a4f2c:	4798      	blx	r3
}
 80a4f2e:	b003      	add	sp, #12
 80a4f30:	f85d fb04 	ldr.w	pc, [sp], #4

080a4f34 <_ZN9TCPServer5writeEPKhj>:

size_t TCPServer::write(const uint8_t *buffer, size_t size)
{
 80a4f34:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a4f36:	6803      	ldr	r3, [r0, #0]
 80a4f38:	699c      	ldr	r4, [r3, #24]
 80a4f3a:	f247 5330 	movw	r3, #30000	; 0x7530
 80a4f3e:	46a4      	mov	ip, r4
}
 80a4f40:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a4f42:	4760      	bx	ip

080a4f44 <_ZN9TCPServer5writeEPKhjm>:
{
 80a4f44:	b510      	push	{r4, lr}
 80a4f46:	4604      	mov	r4, r0
 80a4f48:	2000      	movs	r0, #0
 80a4f4a:	61a0      	str	r0, [r4, #24]
    size_t ret = _client.write(buf, size, timeout);
 80a4f4c:	f104 0014 	add.w	r0, r4, #20
 80a4f50:	f7ff ff14 	bl	80a4d7c <_ZN9TCPClient5writeEPKhjm>
 80a4f54:	69a3      	ldr	r3, [r4, #24]
 80a4f56:	6063      	str	r3, [r4, #4]
}
 80a4f58:	bd10      	pop	{r4, pc}
	...

080a4f5c <_ZN9TCPServerC1Etm>:
TCPServer::TCPServer(uint16_t port, network_interface_t nif) : _port(port), _nif(nif), _sock(socket_handle_invalid()), _client(socket_handle_invalid())
 80a4f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Print() : write_error(0) {}
 80a4f5e:	2500      	movs	r5, #0
 80a4f60:	4b14      	ldr	r3, [pc, #80]	; (80a4fb4 <_ZN9TCPServerC1Etm+0x58>)
 80a4f62:	60c2      	str	r2, [r0, #12]
 80a4f64:	6003      	str	r3, [r0, #0]
 80a4f66:	8101      	strh	r1, [r0, #8]
 80a4f68:	6045      	str	r5, [r0, #4]
 80a4f6a:	4604      	mov	r4, r0
 80a4f6c:	f7fe fe3a 	bl	80a3be4 <socket_handle_invalid>
 80a4f70:	6120      	str	r0, [r4, #16]
 80a4f72:	f7fe fe37 	bl	80a3be4 <socket_handle_invalid>
 80a4f76:	4601      	mov	r1, r0
 80a4f78:	f104 0014 	add.w	r0, r4, #20
 80a4f7c:	f7ff ff4e 	bl	80a4e1c <_ZN9TCPClientC1Em>
        os_thread_scheduling(false, NULL);
 80a4f80:	4629      	mov	r1, r5
 80a4f82:	4628      	mov	r0, r5
        if (!s_invalid_client) {
 80a4f84:	4d0c      	ldr	r5, [pc, #48]	; (80a4fb8 <_ZN9TCPServerC1Etm+0x5c>)
 80a4f86:	f7fe fd43 	bl	80a3a10 <os_thread_scheduling>
 80a4f8a:	682a      	ldr	r2, [r5, #0]
 80a4f8c:	b95a      	cbnz	r2, 80a4fa6 <_ZN9TCPServerC1Etm+0x4a>
            s_invalid_client = new TCPClient(socket_handle_invalid());
 80a4f8e:	f7fe fe29 	bl	80a3be4 <socket_handle_invalid>
 80a4f92:	4607      	mov	r7, r0
 80a4f94:	201c      	movs	r0, #28
 80a4f96:	f7fb f880 	bl	80a009a <_Znwj>
 80a4f9a:	4606      	mov	r6, r0
 80a4f9c:	b110      	cbz	r0, 80a4fa4 <_ZN9TCPServerC1Etm+0x48>
 80a4f9e:	4639      	mov	r1, r7
 80a4fa0:	f7ff ff3c 	bl	80a4e1c <_ZN9TCPClientC1Em>
 80a4fa4:	602e      	str	r6, [r5, #0]
        os_thread_scheduling(true, NULL);
 80a4fa6:	2100      	movs	r1, #0
 80a4fa8:	2001      	movs	r0, #1
 80a4faa:	f7fe fd31 	bl	80a3a10 <os_thread_scheduling>
}
 80a4fae:	4620      	mov	r0, r4
 80a4fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4fb2:	bf00      	nop
 80a4fb4:	080aa774 	.word	0x080aa774
 80a4fb8:	20000ffc 	.word	0x20000ffc

080a4fbc <_ZN9TCPServer4stopEv>:
{
 80a4fbc:	b510      	push	{r4, lr}
 80a4fbe:	4604      	mov	r4, r0
    _client.stop();
 80a4fc0:	3014      	adds	r0, #20
 80a4fc2:	f7ff fea1 	bl	80a4d08 <_ZN9TCPClient4stopEv>
    socket_close(_sock);
 80a4fc6:	6920      	ldr	r0, [r4, #16]
 80a4fc8:	f7fe fdfc 	bl	80a3bc4 <socket_close>
    _sock = socket_handle_invalid();
 80a4fcc:	f7fe fe0a 	bl	80a3be4 <socket_handle_invalid>
 80a4fd0:	6120      	str	r0, [r4, #16]
}
 80a4fd2:	bd10      	pop	{r4, pc}

080a4fd4 <_ZN9TCPServer5beginEv>:
{
 80a4fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4fd6:	4604      	mov	r4, r0
    stop();
 80a4fd8:	f7ff fff0 	bl	80a4fbc <_ZN9TCPServer4stopEv>
    if(!Network.from(_nif).ready())
 80a4fdc:	68e0      	ldr	r0, [r4, #12]
 80a4fde:	f7ff fb9f 	bl	80a4720 <_ZN5spark12NetworkClass4fromEm>
 80a4fe2:	6803      	ldr	r3, [r0, #0]
 80a4fe4:	68db      	ldr	r3, [r3, #12]
 80a4fe6:	4798      	blx	r3
 80a4fe8:	4605      	mov	r5, r0
 80a4fea:	b168      	cbz	r0, 80a5008 <_ZN9TCPServer5beginEv+0x34>
    if (socket_handle_valid(_sock)) {
 80a4fec:	6920      	ldr	r0, [r4, #16]
 80a4fee:	f7fe fdc9 	bl	80a3b84 <socket_handle_valid>
 80a4ff2:	b948      	cbnz	r0, 80a5008 <_ZN9TCPServer5beginEv+0x34>
    sock_result_t result = socket_create_tcp_server(_port, _nif);
 80a4ff4:	68e1      	ldr	r1, [r4, #12]
 80a4ff6:	8920      	ldrh	r0, [r4, #8]
 80a4ff8:	f7fe fdec 	bl	80a3bd4 <socket_create_tcp_server>
 80a4ffc:	4607      	mov	r7, r0
    if (socket_handle_valid(result)) {
 80a4ffe:	f7fe fdc1 	bl	80a3b84 <socket_handle_valid>
 80a5002:	4606      	mov	r6, r0
 80a5004:	b110      	cbz	r0, 80a500c <_ZN9TCPServer5beginEv+0x38>
        _sock = result;
 80a5006:	6127      	str	r7, [r4, #16]
}
 80a5008:	4628      	mov	r0, r5
 80a500a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    stop();
 80a500c:	4620      	mov	r0, r4
 80a500e:	f7ff ffd5 	bl	80a4fbc <_ZN9TCPServer4stopEv>
    return false;
 80a5012:	4635      	mov	r5, r6
 80a5014:	e7f8      	b.n	80a5008 <_ZN9TCPServer5beginEv+0x34>
	...

080a5018 <_ZN9TCPServerD1Ev>:
    sock_handle_t _sock;
    TCPClient _client;

public:
    TCPServer(uint16_t, network_interface_t nif=0);
    ~TCPServer() { stop(); }
 80a5018:	b510      	push	{r4, lr}
 80a501a:	4604      	mov	r4, r0
 80a501c:	4b05      	ldr	r3, [pc, #20]	; (80a5034 <_ZN9TCPServerD1Ev+0x1c>)
 80a501e:	6003      	str	r3, [r0, #0]
 80a5020:	f7ff ffcc 	bl	80a4fbc <_ZN9TCPServer4stopEv>
 80a5024:	4b04      	ldr	r3, [pc, #16]	; (80a5038 <_ZN9TCPServerD1Ev+0x20>)
      ~__shared_ptr() = default;
 80a5026:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a502a:	6163      	str	r3, [r4, #20]
 80a502c:	f7fe fc20 	bl	80a3870 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a5030:	4620      	mov	r0, r4
 80a5032:	bd10      	pop	{r4, pc}
 80a5034:	080aa774 	.word	0x080aa774
 80a5038:	080aa728 	.word	0x080aa728

080a503c <_ZN9TCPServerD0Ev>:
 80a503c:	b510      	push	{r4, lr}
 80a503e:	4604      	mov	r4, r0
 80a5040:	f7ff ffea 	bl	80a5018 <_ZN9TCPServerD1Ev>
 80a5044:	4620      	mov	r0, r4
 80a5046:	2130      	movs	r1, #48	; 0x30
 80a5048:	f000 fbbf 	bl	80a57ca <_ZdlPvj>
 80a504c:	4620      	mov	r0, r4
 80a504e:	bd10      	pop	{r4, pc}

080a5050 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 80a5050:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a5052:	2000      	movs	r0, #0
 80a5054:	f7fe fed2 	bl	80a3dfc <spark_sync_time_pending>
 80a5058:	b128      	cbz	r0, 80a5066 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a505a:	f7fe febf 	bl	80a3ddc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a505e:	f080 0001 	eor.w	r0, r0, #1
 80a5062:	b2c0      	uxtb	r0, r0
    }
 80a5064:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a5066:	2001      	movs	r0, #1
 80a5068:	e7fc      	b.n	80a5064 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

080a506a <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a506a:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a506c:	2000      	movs	r0, #0
 80a506e:	f7fe fd07 	bl	80a3a80 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a5072:	4604      	mov	r4, r0
 80a5074:	b9a0      	cbnz	r0, 80a50a0 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a5076:	f7fe fe5d 	bl	80a3d34 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a507a:	2801      	cmp	r0, #1
 80a507c:	d110      	bne.n	80a50a0 <_ZN9TimeClass7isValidEv+0x36>
 80a507e:	4620      	mov	r0, r4
 80a5080:	f7fe fe80 	bl	80a3d84 <system_thread_get_state>
 80a5084:	b960      	cbnz	r0, 80a50a0 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a5086:	f7ff ffe3 	bl	80a5050 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a508a:	b910      	cbnz	r0, 80a5092 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a508c:	f7fe fe9e 	bl	80a3dcc <spark_process>
        while (_while() && !_condition()) {
 80a5090:	e7f9      	b.n	80a5086 <_ZN9TimeClass7isValidEv+0x1c>
 80a5092:	f7ff ffdd 	bl	80a5050 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a5096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a509a:	2000      	movs	r0, #0
 80a509c:	f7fe bcf0 	b.w	80a3a80 <hal_rtc_time_is_valid>
}
 80a50a0:	4620      	mov	r0, r4
 80a50a2:	bd10      	pop	{r4, pc}

080a50a4 <_ZN9TimeClass3nowEv>:
{
 80a50a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a50a6:	f7ff ffe0 	bl	80a506a <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a50aa:	2210      	movs	r2, #16
 80a50ac:	2100      	movs	r1, #0
 80a50ae:	4668      	mov	r0, sp
 80a50b0:	f005 f8ac 	bl	80aa20c <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a50b4:	2100      	movs	r1, #0
 80a50b6:	4668      	mov	r0, sp
 80a50b8:	f7fe fcea 	bl	80a3a90 <hal_rtc_get_time>
}
 80a50bc:	9800      	ldr	r0, [sp, #0]
 80a50be:	b005      	add	sp, #20
 80a50c0:	f85d fb04 	ldr.w	pc, [sp], #4

080a50c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a50c4:	4b02      	ldr	r3, [pc, #8]	; (80a50d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a50c6:	681a      	ldr	r2, [r3, #0]
 80a50c8:	4b02      	ldr	r3, [pc, #8]	; (80a50d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a50ca:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a50cc:	4770      	bx	lr
 80a50ce:	bf00      	nop
 80a50d0:	20000000 	.word	0x20000000
 80a50d4:	20001000 	.word	0x20001000

080a50d8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a50d8:	4770      	bx	lr

080a50da <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a50da:	7441      	strb	r1, [r0, #17]
}
 80a50dc:	4770      	bx	lr

080a50de <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a50de:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a50e0:	7c00      	ldrb	r0, [r0, #16]
 80a50e2:	f7fe fdd7 	bl	80a3c94 <hal_usart_available_data_for_write>
}
 80a50e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a50ea:	bd08      	pop	{r3, pc}

080a50ec <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a50ec:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a50ee:	7c00      	ldrb	r0, [r0, #16]
 80a50f0:	f7fe fda8 	bl	80a3c44 <hal_usart_available>
}
 80a50f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a50f8:	bd08      	pop	{r3, pc}

080a50fa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a50fa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a50fc:	7c00      	ldrb	r0, [r0, #16]
 80a50fe:	f7fe fdb1 	bl	80a3c64 <hal_usart_peek>
}
 80a5102:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a5106:	bd08      	pop	{r3, pc}

080a5108 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a5108:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a510a:	7c00      	ldrb	r0, [r0, #16]
 80a510c:	f7fe fda2 	bl	80a3c54 <hal_usart_read>
}
 80a5110:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a5114:	bd08      	pop	{r3, pc}

080a5116 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a5116:	7c00      	ldrb	r0, [r0, #16]
 80a5118:	f7fe bdac 	b.w	80a3c74 <hal_usart_flush>

080a511c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a511c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a511e:	7c46      	ldrb	r6, [r0, #17]
{
 80a5120:	4604      	mov	r4, r0
 80a5122:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a5124:	b12e      	cbz	r6, 80a5132 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a5126:	4629      	mov	r1, r5
 80a5128:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a512a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a512e:	f7fe bd81 	b.w	80a3c34 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a5132:	7c00      	ldrb	r0, [r0, #16]
 80a5134:	f7fe fdae 	bl	80a3c94 <hal_usart_available_data_for_write>
 80a5138:	2800      	cmp	r0, #0
 80a513a:	dcf4      	bgt.n	80a5126 <_ZN11USARTSerial5writeEh+0xa>
}
 80a513c:	4630      	mov	r0, r6
 80a513e:	bd70      	pop	{r4, r5, r6, pc}

080a5140 <_ZN11USARTSerialD0Ev>:
 80a5140:	b510      	push	{r4, lr}
 80a5142:	4604      	mov	r4, r0
 80a5144:	2114      	movs	r1, #20
 80a5146:	f000 fb40 	bl	80a57ca <_ZdlPvj>
 80a514a:	4620      	mov	r0, r4
 80a514c:	bd10      	pop	{r4, pc}
	...

080a5150 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a5150:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a5154:	b510      	push	{r4, lr}
 80a5156:	4604      	mov	r4, r0
 80a5158:	4608      	mov	r0, r1
 80a515a:	4611      	mov	r1, r2
 80a515c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a5160:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a5164:	4a04      	ldr	r2, [pc, #16]	; (80a5178 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a5166:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a5168:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a516a:	2201      	movs	r2, #1
 80a516c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a516e:	461a      	mov	r2, r3
 80a5170:	f7fe fd58 	bl	80a3c24 <hal_usart_init>
}
 80a5174:	4620      	mov	r0, r4
 80a5176:	bd10      	pop	{r4, pc}
 80a5178:	080aa7b4 	.word	0x080aa7b4

080a517c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a517c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a517e:	4d0d      	ldr	r5, [pc, #52]	; (80a51b4 <_Z22__fetch_global_Serial1v+0x38>)
 80a5180:	7829      	ldrb	r1, [r5, #0]
 80a5182:	f3bf 8f5b 	dmb	ish
 80a5186:	f011 0401 	ands.w	r4, r1, #1
 80a518a:	d111      	bne.n	80a51b0 <_Z22__fetch_global_Serial1v+0x34>
 80a518c:	4628      	mov	r0, r5
 80a518e:	f7fa ff8a 	bl	80a00a6 <__cxa_guard_acquire>
 80a5192:	b168      	cbz	r0, 80a51b0 <_Z22__fetch_global_Serial1v+0x34>
 80a5194:	4621      	mov	r1, r4
 80a5196:	4a08      	ldr	r2, [pc, #32]	; (80a51b8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a5198:	4b08      	ldr	r3, [pc, #32]	; (80a51bc <_Z22__fetch_global_Serial1v+0x40>)
 80a519a:	4809      	ldr	r0, [pc, #36]	; (80a51c0 <_Z22__fetch_global_Serial1v+0x44>)
 80a519c:	f7ff ffd8 	bl	80a5150 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a51a0:	4628      	mov	r0, r5
 80a51a2:	f7fa ff85 	bl	80a00b0 <__cxa_guard_release>
 80a51a6:	4a07      	ldr	r2, [pc, #28]	; (80a51c4 <_Z22__fetch_global_Serial1v+0x48>)
 80a51a8:	4907      	ldr	r1, [pc, #28]	; (80a51c8 <_Z22__fetch_global_Serial1v+0x4c>)
 80a51aa:	4805      	ldr	r0, [pc, #20]	; (80a51c0 <_Z22__fetch_global_Serial1v+0x44>)
 80a51ac:	f000 fb08 	bl	80a57c0 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a51b0:	4803      	ldr	r0, [pc, #12]	; (80a51c0 <_Z22__fetch_global_Serial1v+0x44>)
 80a51b2:	bd38      	pop	{r3, r4, r5, pc}
 80a51b4:	20001004 	.word	0x20001004
 80a51b8:	20001008 	.word	0x20001008
 80a51bc:	2000108c 	.word	0x2000108c
 80a51c0:	20001110 	.word	0x20001110
 80a51c4:	2000006c 	.word	0x2000006c
 80a51c8:	080a50d9 	.word	0x080a50d9

080a51cc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a51cc:	7441      	strb	r1, [r0, #17]
}
 80a51ce:	4770      	bx	lr

080a51d0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a51d0:	4770      	bx	lr

080a51d2 <_ZN9USBSerial4readEv>:
{
 80a51d2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a51d4:	2100      	movs	r1, #0
 80a51d6:	7c00      	ldrb	r0, [r0, #16]
 80a51d8:	f7fe fd7c 	bl	80a3cd4 <HAL_USB_USART_Receive_Data>
}
 80a51dc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a51e0:	bd08      	pop	{r3, pc}

080a51e2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a51e2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a51e4:	2101      	movs	r1, #1
 80a51e6:	7c00      	ldrb	r0, [r0, #16]
 80a51e8:	f7fe fd74 	bl	80a3cd4 <HAL_USB_USART_Receive_Data>
}
 80a51ec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a51f0:	bd08      	pop	{r3, pc}

080a51f2 <_ZN9USBSerial17availableForWriteEv>:
{
 80a51f2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a51f4:	7c00      	ldrb	r0, [r0, #16]
 80a51f6:	f7fe fd65 	bl	80a3cc4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a51fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a51fe:	bd08      	pop	{r3, pc}

080a5200 <_ZN9USBSerial9availableEv>:
{
 80a5200:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a5202:	7c00      	ldrb	r0, [r0, #16]
 80a5204:	f7fe fd56 	bl	80a3cb4 <HAL_USB_USART_Available_Data>
}
 80a5208:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a520c:	bd08      	pop	{r3, pc}

080a520e <_ZN9USBSerial5writeEh>:
{
 80a520e:	b538      	push	{r3, r4, r5, lr}
 80a5210:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a5212:	7c00      	ldrb	r0, [r0, #16]
{
 80a5214:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a5216:	f7fe fd55 	bl	80a3cc4 <HAL_USB_USART_Available_Data_For_Write>
 80a521a:	2800      	cmp	r0, #0
 80a521c:	dc01      	bgt.n	80a5222 <_ZN9USBSerial5writeEh+0x14>
 80a521e:	7c60      	ldrb	r0, [r4, #17]
 80a5220:	b128      	cbz	r0, 80a522e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a5222:	4629      	mov	r1, r5
 80a5224:	7c20      	ldrb	r0, [r4, #16]
 80a5226:	f7fe fd5d 	bl	80a3ce4 <HAL_USB_USART_Send_Data>
 80a522a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a522e:	bd38      	pop	{r3, r4, r5, pc}

080a5230 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a5230:	7c00      	ldrb	r0, [r0, #16]
 80a5232:	f7fe bd5f 	b.w	80a3cf4 <HAL_USB_USART_Flush_Data>

080a5236 <_ZN9USBSerialD0Ev>:
 80a5236:	b510      	push	{r4, lr}
 80a5238:	4604      	mov	r4, r0
 80a523a:	2114      	movs	r1, #20
 80a523c:	f000 fac5 	bl	80a57ca <_ZdlPvj>
 80a5240:	4620      	mov	r0, r4
 80a5242:	bd10      	pop	{r4, pc}

080a5244 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a5244:	b510      	push	{r4, lr}
 80a5246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a524a:	4604      	mov	r4, r0
 80a524c:	4608      	mov	r0, r1
 80a524e:	2100      	movs	r1, #0
 80a5250:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a5254:	4b04      	ldr	r3, [pc, #16]	; (80a5268 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a5256:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a5258:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a525a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a525c:	4611      	mov	r1, r2
  _blocking = true;
 80a525e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a5260:	f7fe fd20 	bl	80a3ca4 <HAL_USB_USART_Init>
}
 80a5264:	4620      	mov	r0, r4
 80a5266:	bd10      	pop	{r4, pc}
 80a5268:	080aa7e4 	.word	0x080aa7e4

080a526c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a526c:	b510      	push	{r4, lr}
 80a526e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a5270:	2214      	movs	r2, #20
 80a5272:	2100      	movs	r1, #0
 80a5274:	f004 ffca 	bl	80aa20c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a5278:	4b05      	ldr	r3, [pc, #20]	; (80a5290 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a527a:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a527c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a527e:	4b05      	ldr	r3, [pc, #20]	; (80a5294 <_Z19acquireSerialBufferv+0x28>)
 80a5280:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a5282:	f240 1301 	movw	r3, #257	; 0x101
 80a5286:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a5288:	2381      	movs	r3, #129	; 0x81
 80a528a:	8223      	strh	r3, [r4, #16]
}
 80a528c:	bd10      	pop	{r4, pc}
 80a528e:	bf00      	nop
 80a5290:	20001154 	.word	0x20001154
 80a5294:	20001255 	.word	0x20001255

080a5298 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a5298:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a529a:	4d0f      	ldr	r5, [pc, #60]	; (80a52d8 <_Z16_fetch_usbserialv+0x40>)
{
 80a529c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a529e:	a801      	add	r0, sp, #4
 80a52a0:	f7ff ffe4 	bl	80a526c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a52a4:	7829      	ldrb	r1, [r5, #0]
 80a52a6:	f3bf 8f5b 	dmb	ish
 80a52aa:	f011 0401 	ands.w	r4, r1, #1
 80a52ae:	d110      	bne.n	80a52d2 <_Z16_fetch_usbserialv+0x3a>
 80a52b0:	4628      	mov	r0, r5
 80a52b2:	f7fa fef8 	bl	80a00a6 <__cxa_guard_acquire>
 80a52b6:	b160      	cbz	r0, 80a52d2 <_Z16_fetch_usbserialv+0x3a>
 80a52b8:	4621      	mov	r1, r4
 80a52ba:	aa01      	add	r2, sp, #4
 80a52bc:	4807      	ldr	r0, [pc, #28]	; (80a52dc <_Z16_fetch_usbserialv+0x44>)
 80a52be:	f7ff ffc1 	bl	80a5244 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a52c2:	4628      	mov	r0, r5
 80a52c4:	f7fa fef4 	bl	80a00b0 <__cxa_guard_release>
 80a52c8:	4a05      	ldr	r2, [pc, #20]	; (80a52e0 <_Z16_fetch_usbserialv+0x48>)
 80a52ca:	4906      	ldr	r1, [pc, #24]	; (80a52e4 <_Z16_fetch_usbserialv+0x4c>)
 80a52cc:	4803      	ldr	r0, [pc, #12]	; (80a52dc <_Z16_fetch_usbserialv+0x44>)
 80a52ce:	f000 fa77 	bl	80a57c0 <__aeabi_atexit>
	return _usbserial;
}
 80a52d2:	4802      	ldr	r0, [pc, #8]	; (80a52dc <_Z16_fetch_usbserialv+0x44>)
 80a52d4:	b007      	add	sp, #28
 80a52d6:	bd30      	pop	{r4, r5, pc}
 80a52d8:	20001124 	.word	0x20001124
 80a52dc:	2000112c 	.word	0x2000112c
 80a52e0:	2000006c 	.word	0x2000006c
 80a52e4:	080a51d1 	.word	0x080a51d1

080a52e8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a52e8:	b510      	push	{r4, lr}
 80a52ea:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a52ec:	2214      	movs	r2, #20
 80a52ee:	2100      	movs	r1, #0
 80a52f0:	f004 ff8c 	bl	80aa20c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a52f4:	4b05      	ldr	r3, [pc, #20]	; (80a530c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a52f6:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a52f8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a52fa:	4b05      	ldr	r3, [pc, #20]	; (80a5310 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a52fc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a52fe:	f240 1301 	movw	r3, #257	; 0x101
 80a5302:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a5304:	2381      	movs	r3, #129	; 0x81
 80a5306:	8223      	strh	r3, [r4, #16]
}
 80a5308:	bd10      	pop	{r4, pc}
 80a530a:	bf00      	nop
 80a530c:	200012d6 	.word	0x200012d6
 80a5310:	200013d7 	.word	0x200013d7

080a5314 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a5314:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a5316:	4c0f      	ldr	r4, [pc, #60]	; (80a5354 <_Z17_fetch_usbserial1v+0x40>)
{
 80a5318:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a531a:	a801      	add	r0, sp, #4
 80a531c:	f7ff ffe4 	bl	80a52e8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a5320:	7823      	ldrb	r3, [r4, #0]
 80a5322:	f3bf 8f5b 	dmb	ish
 80a5326:	07db      	lsls	r3, r3, #31
 80a5328:	d410      	bmi.n	80a534c <_Z17_fetch_usbserial1v+0x38>
 80a532a:	4620      	mov	r0, r4
 80a532c:	f7fa febb 	bl	80a00a6 <__cxa_guard_acquire>
 80a5330:	b160      	cbz	r0, 80a534c <_Z17_fetch_usbserial1v+0x38>
 80a5332:	2101      	movs	r1, #1
 80a5334:	aa01      	add	r2, sp, #4
 80a5336:	4808      	ldr	r0, [pc, #32]	; (80a5358 <_Z17_fetch_usbserial1v+0x44>)
 80a5338:	f7ff ff84 	bl	80a5244 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a533c:	4620      	mov	r0, r4
 80a533e:	f7fa feb7 	bl	80a00b0 <__cxa_guard_release>
 80a5342:	4a06      	ldr	r2, [pc, #24]	; (80a535c <_Z17_fetch_usbserial1v+0x48>)
 80a5344:	4906      	ldr	r1, [pc, #24]	; (80a5360 <_Z17_fetch_usbserial1v+0x4c>)
 80a5346:	4804      	ldr	r0, [pc, #16]	; (80a5358 <_Z17_fetch_usbserial1v+0x44>)
 80a5348:	f000 fa3a 	bl	80a57c0 <__aeabi_atexit>
  return _usbserial1;
}
 80a534c:	4802      	ldr	r0, [pc, #8]	; (80a5358 <_Z17_fetch_usbserial1v+0x44>)
 80a534e:	b006      	add	sp, #24
 80a5350:	bd10      	pop	{r4, pc}
 80a5352:	bf00      	nop
 80a5354:	20001128 	.word	0x20001128
 80a5358:	20001140 	.word	0x20001140
 80a535c:	2000006c 	.word	0x2000006c
 80a5360:	080a51d1 	.word	0x080a51d1

080a5364 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a5364:	2200      	movs	r2, #0
 80a5366:	6840      	ldr	r0, [r0, #4]
 80a5368:	4611      	mov	r1, r2
 80a536a:	f7fe bd77 	b.w	80a3e5c <network_ready>

080a536e <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a536e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a5370:	4615      	mov	r5, r2
 80a5372:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a5374:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a5376:	460e      	mov	r6, r1
 80a5378:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a537a:	2100      	movs	r1, #0
 80a537c:	a803      	add	r0, sp, #12
 80a537e:	f004 ff45 	bl	80aa20c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a5382:	4628      	mov	r0, r5
 80a5384:	f004 ffcf 	bl	80aa326 <strlen>
 80a5388:	2700      	movs	r7, #0
 80a538a:	b281      	uxth	r1, r0
 80a538c:	6873      	ldr	r3, [r6, #4]
 80a538e:	4628      	mov	r0, r5
 80a5390:	9700      	str	r7, [sp, #0]
 80a5392:	aa03      	add	r2, sp, #12
 80a5394:	f7fe fcbe 	bl	80a3d14 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a5398:	b130      	cbz	r0, 80a53a8 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a539a:	4639      	mov	r1, r7
 80a539c:	4620      	mov	r0, r4
 80a539e:	f7ff f931 	bl	80a4604 <_ZN9IPAddressC1Em>
    }
 80a53a2:	4620      	mov	r0, r4
 80a53a4:	b009      	add	sp, #36	; 0x24
 80a53a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a53a8:	4620      	mov	r0, r4
 80a53aa:	a903      	add	r1, sp, #12
 80a53ac:	f7ff f918 	bl	80a45e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a53b0:	e7f7      	b.n	80a53a2 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a53b2 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a53b2:	2200      	movs	r2, #0
 80a53b4:	6840      	ldr	r0, [r0, #4]
 80a53b6:	4611      	mov	r1, r2
 80a53b8:	f7fe bd70 	b.w	80a3e9c <network_listening>

080a53bc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a53bc:	2200      	movs	r2, #0
 80a53be:	6840      	ldr	r0, [r0, #4]
 80a53c0:	4611      	mov	r1, r2
 80a53c2:	f7fe bd7b 	b.w	80a3ebc <network_get_listen_timeout>

080a53c6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a53c6:	2200      	movs	r2, #0
 80a53c8:	6840      	ldr	r0, [r0, #4]
 80a53ca:	f7fe bd6f 	b.w	80a3eac <network_set_listen_timeout>

080a53ce <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a53ce:	2200      	movs	r2, #0
 80a53d0:	6840      	ldr	r0, [r0, #4]
 80a53d2:	f081 0101 	eor.w	r1, r1, #1
 80a53d6:	f7fe bd59 	b.w	80a3e8c <network_listen>

080a53da <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a53da:	2300      	movs	r3, #0
 80a53dc:	6840      	ldr	r0, [r0, #4]
 80a53de:	461a      	mov	r2, r3
 80a53e0:	4619      	mov	r1, r3
 80a53e2:	f7fe bd4b 	b.w	80a3e7c <network_off>

080a53e6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a53e6:	2300      	movs	r3, #0
 80a53e8:	6840      	ldr	r0, [r0, #4]
 80a53ea:	461a      	mov	r2, r3
 80a53ec:	4619      	mov	r1, r3
 80a53ee:	f7fe bd3d 	b.w	80a3e6c <network_on>

080a53f2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a53f2:	2200      	movs	r2, #0
 80a53f4:	6840      	ldr	r0, [r0, #4]
 80a53f6:	4611      	mov	r1, r2
 80a53f8:	f7fe bd20 	b.w	80a3e3c <network_connecting>

080a53fc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a53fc:	2200      	movs	r2, #0
 80a53fe:	2102      	movs	r1, #2
 80a5400:	6840      	ldr	r0, [r0, #4]
 80a5402:	f7fe bd23 	b.w	80a3e4c <network_disconnect>

080a5406 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a5406:	2300      	movs	r3, #0
 80a5408:	6840      	ldr	r0, [r0, #4]
 80a540a:	461a      	mov	r2, r3
 80a540c:	f7fe bd0e 	b.w	80a3e2c <network_connect>

080a5410 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a5410:	2204      	movs	r2, #4
 80a5412:	4b02      	ldr	r3, [pc, #8]	; (80a541c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a5414:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a5416:	4a02      	ldr	r2, [pc, #8]	; (80a5420 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a5418:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a541a:	4770      	bx	lr
 80a541c:	20001458 	.word	0x20001458
 80a5420:	080aa814 	.word	0x080aa814

080a5424 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a5424:	b510      	push	{r4, lr}
 80a5426:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a5428:	f004 ff7d 	bl	80aa326 <strlen>
 80a542c:	1e43      	subs	r3, r0, #1
 80a542e:	4620      	mov	r0, r4
 80a5430:	4423      	add	r3, r4
	while(i<j){
 80a5432:	4283      	cmp	r3, r0
 80a5434:	d906      	bls.n	80a5444 <_Z11str_reversePc+0x20>
		c = *i;
 80a5436:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a5438:	7819      	ldrb	r1, [r3, #0]
 80a543a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a543e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a5442:	e7f6      	b.n	80a5432 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a5444:	bd10      	pop	{r4, pc}

080a5446 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a5446:	b570      	push	{r4, r5, r6, lr}
 80a5448:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a544a:	1e91      	subs	r1, r2, #2
 80a544c:	2922      	cmp	r1, #34	; 0x22
 80a544e:	d822      	bhi.n	80a5496 <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 80a5450:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a5452:	b168      	cbz	r0, 80a5470 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a5454:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a5458:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a545c:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a545e:	2809      	cmp	r0, #9
                *ptr += '0';
 80a5460:	bf94      	ite	ls
 80a5462:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a5464:	3157      	addhi	r1, #87	; 0x57
 80a5466:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 80a5468:	4630      	mov	r0, r6
 80a546a:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a546e:	e7f0      	b.n	80a5452 <ultoa+0xc>
 80a5470:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a5472:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 80a5474:	4423      	add	r3, r4
 80a5476:	4293      	cmp	r3, r2
 80a5478:	d902      	bls.n	80a5480 <ultoa+0x3a>
            *ptr++ = '0';
 80a547a:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80a547e:	e7fa      	b.n	80a5476 <ultoa+0x30>
 80a5480:	1b5a      	subs	r2, r3, r5
 80a5482:	42ab      	cmp	r3, r5
 80a5484:	bf38      	it	cc
 80a5486:	2200      	movcc	r2, #0

	*ptr = '\0';
 80a5488:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a548a:	4620      	mov	r0, r4
	*ptr = '\0';
 80a548c:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80a548e:	f7ff ffc9 	bl	80a5424 <_Z11str_reversePc>
	return buffer;
 80a5492:	4620      	mov	r0, r4
}
 80a5494:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a5496:	2000      	movs	r0, #0
 80a5498:	e7fc      	b.n	80a5494 <ultoa+0x4e>

080a549a <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 80a549a:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 80a549c:	2301      	movs	r3, #1
 80a549e:	f7ff ffd2 	bl	80a5446 <ultoa>
}
 80a54a2:	bd08      	pop	{r3, pc}

080a54a4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a54a4:	4b01      	ldr	r3, [pc, #4]	; (80a54ac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a54a6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a54a8:	4770      	bx	lr
 80a54aa:	bf00      	nop
 80a54ac:	20000008 	.word	0x20000008

080a54b0 <serialEventRun>:
{
 80a54b0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a54b2:	4b13      	ldr	r3, [pc, #76]	; (80a5500 <serialEventRun+0x50>)
 80a54b4:	b143      	cbz	r3, 80a54c8 <serialEventRun+0x18>
 80a54b6:	f7ff feef 	bl	80a5298 <_Z16_fetch_usbserialv>
 80a54ba:	6803      	ldr	r3, [r0, #0]
 80a54bc:	691b      	ldr	r3, [r3, #16]
 80a54be:	4798      	blx	r3
 80a54c0:	2800      	cmp	r0, #0
 80a54c2:	dd01      	ble.n	80a54c8 <serialEventRun+0x18>
        serialEvent();
 80a54c4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a54c8:	4b0e      	ldr	r3, [pc, #56]	; (80a5504 <serialEventRun+0x54>)
 80a54ca:	b143      	cbz	r3, 80a54de <serialEventRun+0x2e>
 80a54cc:	f7ff fe56 	bl	80a517c <_Z22__fetch_global_Serial1v>
 80a54d0:	6803      	ldr	r3, [r0, #0]
 80a54d2:	691b      	ldr	r3, [r3, #16]
 80a54d4:	4798      	blx	r3
 80a54d6:	2800      	cmp	r0, #0
 80a54d8:	dd01      	ble.n	80a54de <serialEventRun+0x2e>
        serialEvent1();
 80a54da:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a54de:	4b0a      	ldr	r3, [pc, #40]	; (80a5508 <serialEventRun+0x58>)
 80a54e0:	b10b      	cbz	r3, 80a54e6 <serialEventRun+0x36>
 80a54e2:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a54e6:	4b09      	ldr	r3, [pc, #36]	; (80a550c <serialEventRun+0x5c>)
 80a54e8:	b143      	cbz	r3, 80a54fc <serialEventRun+0x4c>
 80a54ea:	f7ff ff13 	bl	80a5314 <_Z17_fetch_usbserial1v>
 80a54ee:	6803      	ldr	r3, [r0, #0]
 80a54f0:	691b      	ldr	r3, [r3, #16]
 80a54f2:	4798      	blx	r3
 80a54f4:	2800      	cmp	r0, #0
 80a54f6:	dd01      	ble.n	80a54fc <serialEventRun+0x4c>
        usbSerialEvent1();
 80a54f8:	f3af 8000 	nop.w
}
 80a54fc:	bd08      	pop	{r3, pc}
 80a54fe:	bf00      	nop
	...

080a5510 <_post_loop>:
{
 80a5510:	b508      	push	{r3, lr}
	serialEventRun();
 80a5512:	f7ff ffcd 	bl	80a54b0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a5516:	f7fe faab 	bl	80a3a70 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a551a:	4b01      	ldr	r3, [pc, #4]	; (80a5520 <_post_loop+0x10>)
 80a551c:	6018      	str	r0, [r3, #0]
}
 80a551e:	bd08      	pop	{r3, pc}
 80a5520:	20001478 	.word	0x20001478

080a5524 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a5524:	4802      	ldr	r0, [pc, #8]	; (80a5530 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a5526:	4a03      	ldr	r2, [pc, #12]	; (80a5534 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a5528:	4903      	ldr	r1, [pc, #12]	; (80a5538 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a552a:	1a12      	subs	r2, r2, r0
 80a552c:	f004 be60 	b.w	80aa1f0 <memcpy>
 80a5530:	40024000 	.word	0x40024000
 80a5534:	40024004 	.word	0x40024004
 80a5538:	080aaf40 	.word	0x080aaf40

080a553c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a553c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a553e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a5540:	461a      	mov	r2, r3
 80a5542:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a5546:	9300      	str	r3, [sp, #0]
 80a5548:	f7fe fc2e 	bl	80a3da8 <system_ctrl_set_result>
}
 80a554c:	b003      	add	sp, #12
 80a554e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a5554 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a5554:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a5556:	8843      	ldrh	r3, [r0, #2]
 80a5558:	2b0a      	cmp	r3, #10
 80a555a:	d008      	beq.n	80a556e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a555c:	2b50      	cmp	r3, #80	; 0x50
 80a555e:	d10b      	bne.n	80a5578 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a5560:	4b09      	ldr	r3, [pc, #36]	; (80a5588 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a5562:	681b      	ldr	r3, [r3, #0]
 80a5564:	b14b      	cbz	r3, 80a557a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a5566:	b003      	add	sp, #12
 80a5568:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a556c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a556e:	f7ff ffe5 	bl	80a553c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a5572:	b003      	add	sp, #12
 80a5574:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a5578:	2300      	movs	r3, #0
 80a557a:	461a      	mov	r2, r3
 80a557c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a5580:	9300      	str	r3, [sp, #0]
 80a5582:	f7fe fc11 	bl	80a3da8 <system_ctrl_set_result>
}
 80a5586:	e7f4      	b.n	80a5572 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a5588:	20001464 	.word	0x20001464

080a558c <module_user_init_hook>:
{
 80a558c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a558e:	4c12      	ldr	r4, [pc, #72]	; (80a55d8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a5590:	2100      	movs	r1, #0
 80a5592:	4812      	ldr	r0, [pc, #72]	; (80a55dc <module_user_init_hook+0x50>)
 80a5594:	f7fe fcda 	bl	80a3f4c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a5598:	4d11      	ldr	r5, [pc, #68]	; (80a55e0 <module_user_init_hook+0x54>)
 80a559a:	6823      	ldr	r3, [r4, #0]
 80a559c:	42ab      	cmp	r3, r5
 80a559e:	bf0c      	ite	eq
 80a55a0:	2201      	moveq	r2, #1
 80a55a2:	2200      	movne	r2, #0
 80a55a4:	4b0f      	ldr	r3, [pc, #60]	; (80a55e4 <module_user_init_hook+0x58>)
 80a55a6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a55a8:	d002      	beq.n	80a55b0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a55aa:	f7ff ffbb 	bl	80a5524 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a55ae:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a55b0:	f7fe fa46 	bl	80a3a40 <HAL_RNG_GetRandomNumber>
 80a55b4:	4604      	mov	r4, r0
    srand(seed);
 80a55b6:	f004 fe31 	bl	80aa21c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a55ba:	4b0b      	ldr	r3, [pc, #44]	; (80a55e8 <module_user_init_hook+0x5c>)
 80a55bc:	b113      	cbz	r3, 80a55c4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a55be:	4620      	mov	r0, r4
 80a55c0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a55c4:	2100      	movs	r1, #0
 80a55c6:	4808      	ldr	r0, [pc, #32]	; (80a55e8 <module_user_init_hook+0x5c>)
 80a55c8:	f7fe fc20 	bl	80a3e0c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a55cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a55d0:	2100      	movs	r1, #0
 80a55d2:	4806      	ldr	r0, [pc, #24]	; (80a55ec <module_user_init_hook+0x60>)
 80a55d4:	f7fe bbde 	b.w	80a3d94 <system_ctrl_set_app_request_handler>
 80a55d8:	40024000 	.word	0x40024000
 80a55dc:	080a54a5 	.word	0x080a54a5
 80a55e0:	9a271c1e 	.word	0x9a271c1e
 80a55e4:	20001460 	.word	0x20001460
 80a55e8:	00000000 	.word	0x00000000
 80a55ec:	080a5555 	.word	0x080a5555

080a55f0 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a55f0:	b510      	push	{r4, lr}
 80a55f2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a55f4:	6880      	ldr	r0, [r0, #8]
 80a55f6:	b108      	cbz	r0, 80a55fc <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a55f8:	f7fe fa1a 	bl	80a3a30 <os_mutex_recursive_destroy>
 80a55fc:	4620      	mov	r0, r4
 80a55fe:	bd10      	pop	{r4, pc}

080a5600 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a5600:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a5602:	b570      	push	{r4, r5, r6, lr}
 80a5604:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a5606:	d901      	bls.n	80a560c <pinAvailable+0xc>
    return false;
 80a5608:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a560a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a560c:	f1a0 030d 	sub.w	r3, r0, #13
 80a5610:	2b02      	cmp	r3, #2
 80a5612:	d90b      	bls.n	80a562c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a5614:	2801      	cmp	r0, #1
 80a5616:	d826      	bhi.n	80a5666 <pinAvailable+0x66>
 80a5618:	f000 f892 	bl	80a5740 <_Z19__fetch_global_Wirev>
 80a561c:	2100      	movs	r1, #0
 80a561e:	7c00      	ldrb	r0, [r0, #16]
 80a5620:	f7fe fa96 	bl	80a3b50 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a5624:	f080 0001 	eor.w	r0, r0, #1
 80a5628:	b2c0      	uxtb	r0, r0
 80a562a:	e7ee      	b.n	80a560a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a562c:	4e13      	ldr	r6, [pc, #76]	; (80a567c <pinAvailable+0x7c>)
 80a562e:	7831      	ldrb	r1, [r6, #0]
 80a5630:	f3bf 8f5b 	dmb	ish
 80a5634:	f011 0501 	ands.w	r5, r1, #1
 80a5638:	d10f      	bne.n	80a565a <pinAvailable+0x5a>
 80a563a:	4630      	mov	r0, r6
 80a563c:	f7fa fd33 	bl	80a00a6 <__cxa_guard_acquire>
 80a5640:	b158      	cbz	r0, 80a565a <pinAvailable+0x5a>
 80a5642:	4629      	mov	r1, r5
 80a5644:	480e      	ldr	r0, [pc, #56]	; (80a5680 <pinAvailable+0x80>)
 80a5646:	f7ff f8f1 	bl	80a482c <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a564a:	4630      	mov	r0, r6
 80a564c:	f7fa fd30 	bl	80a00b0 <__cxa_guard_release>
 80a5650:	4a0c      	ldr	r2, [pc, #48]	; (80a5684 <pinAvailable+0x84>)
 80a5652:	490d      	ldr	r1, [pc, #52]	; (80a5688 <pinAvailable+0x88>)
 80a5654:	480a      	ldr	r0, [pc, #40]	; (80a5680 <pinAvailable+0x80>)
 80a5656:	f000 f8b3 	bl	80a57c0 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a565a:	4b09      	ldr	r3, [pc, #36]	; (80a5680 <pinAvailable+0x80>)
 80a565c:	7818      	ldrb	r0, [r3, #0]
 80a565e:	f7fe fad9 	bl	80a3c14 <hal_spi_is_enabled>
 80a5662:	2800      	cmp	r0, #0
 80a5664:	d1d0      	bne.n	80a5608 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a5666:	3c12      	subs	r4, #18
 80a5668:	2c01      	cmp	r4, #1
 80a566a:	d805      	bhi.n	80a5678 <pinAvailable+0x78>
 80a566c:	f7ff fd86 	bl	80a517c <_Z22__fetch_global_Serial1v>
 80a5670:	7c00      	ldrb	r0, [r0, #16]
 80a5672:	f7fe fb07 	bl	80a3c84 <hal_usart_is_enabled>
 80a5676:	e7d5      	b.n	80a5624 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a5678:	2001      	movs	r0, #1
 80a567a:	e7c6      	b.n	80a560a <pinAvailable+0xa>
 80a567c:	20001468 	.word	0x20001468
 80a5680:	2000146c 	.word	0x2000146c
 80a5684:	2000006c 	.word	0x2000006c
 80a5688:	080a55f1 	.word	0x080a55f1

080a568c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a568c:	2817      	cmp	r0, #23
{
 80a568e:	b538      	push	{r3, r4, r5, lr}
 80a5690:	4604      	mov	r4, r0
 80a5692:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a5694:	d80a      	bhi.n	80a56ac <pinMode+0x20>
 80a5696:	29ff      	cmp	r1, #255	; 0xff
 80a5698:	d008      	beq.n	80a56ac <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a569a:	f7ff ffb1 	bl	80a5600 <pinAvailable>
 80a569e:	b128      	cbz	r0, 80a56ac <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a56a0:	4629      	mov	r1, r5
 80a56a2:	4620      	mov	r0, r4
}
 80a56a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a56a8:	f7fe ba0a 	b.w	80a3ac0 <HAL_Pin_Mode>
}
 80a56ac:	bd38      	pop	{r3, r4, r5, pc}

080a56ae <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a56ae:	b538      	push	{r3, r4, r5, lr}
 80a56b0:	4604      	mov	r4, r0
 80a56b2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a56b4:	f7fe fa0c 	bl	80a3ad0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a56b8:	28ff      	cmp	r0, #255	; 0xff
 80a56ba:	d010      	beq.n	80a56de <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a56bc:	2806      	cmp	r0, #6
 80a56be:	d804      	bhi.n	80a56ca <digitalWrite+0x1c>
 80a56c0:	234d      	movs	r3, #77	; 0x4d
 80a56c2:	fa23 f000 	lsr.w	r0, r3, r0
 80a56c6:	07c3      	lsls	r3, r0, #31
 80a56c8:	d409      	bmi.n	80a56de <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a56ca:	4620      	mov	r0, r4
 80a56cc:	f7ff ff98 	bl	80a5600 <pinAvailable>
 80a56d0:	b128      	cbz	r0, 80a56de <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a56d2:	4629      	mov	r1, r5
 80a56d4:	4620      	mov	r0, r4
}
 80a56d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a56da:	f7fe ba01 	b.w	80a3ae0 <HAL_GPIO_Write>
}
 80a56de:	bd38      	pop	{r3, r4, r5, pc}

080a56e0 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a56e0:	b510      	push	{r4, lr}
 80a56e2:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a56e4:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a56e6:	bf9c      	itt	ls
 80a56e8:	340a      	addls	r4, #10
 80a56ea:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a56ec:	4620      	mov	r0, r4
 80a56ee:	f7ff ff87 	bl	80a5600 <pinAvailable>
 80a56f2:	b150      	cbz	r0, 80a570a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a56f4:	2103      	movs	r1, #3
 80a56f6:	4620      	mov	r0, r4
 80a56f8:	f7fe f9da 	bl	80a3ab0 <HAL_Validate_Pin_Function>
 80a56fc:	2803      	cmp	r0, #3
 80a56fe:	d104      	bne.n	80a570a <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a5700:	4620      	mov	r0, r4
}
 80a5702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a5706:	f7fe b9f3 	b.w	80a3af0 <hal_adc_read>
}
 80a570a:	2000      	movs	r0, #0
 80a570c:	bd10      	pop	{r4, pc}
	...

080a5710 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a5710:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a5712:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a5714:	2520      	movs	r5, #32
 80a5716:	8043      	strh	r3, [r0, #2]
 80a5718:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a571a:	4e08      	ldr	r6, [pc, #32]	; (80a573c <_Z17acquireWireBufferv+0x2c>)
{
 80a571c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a571e:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5720:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a5722:	6085      	str	r5, [r0, #8]
 80a5724:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5726:	4628      	mov	r0, r5
 80a5728:	f000 f851 	bl	80a57ce <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a572c:	4631      	mov	r1, r6
	};
 80a572e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5730:	4628      	mov	r0, r5
 80a5732:	f000 f84c 	bl	80a57ce <_ZnajRKSt9nothrow_t>
	};
 80a5736:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a5738:	4620      	mov	r0, r4
 80a573a:	bd70      	pop	{r4, r5, r6, pc}
 80a573c:	080aa848 	.word	0x080aa848

080a5740 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a5740:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a5742:	4d0f      	ldr	r5, [pc, #60]	; (80a5780 <_Z19__fetch_global_Wirev+0x40>)
{
 80a5744:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a5746:	7829      	ldrb	r1, [r5, #0]
 80a5748:	f3bf 8f5b 	dmb	ish
 80a574c:	f011 0401 	ands.w	r4, r1, #1
 80a5750:	d113      	bne.n	80a577a <_Z19__fetch_global_Wirev+0x3a>
 80a5752:	4628      	mov	r0, r5
 80a5754:	f7fa fca7 	bl	80a00a6 <__cxa_guard_acquire>
 80a5758:	b178      	cbz	r0, 80a577a <_Z19__fetch_global_Wirev+0x3a>
 80a575a:	a801      	add	r0, sp, #4
 80a575c:	f7ff ffd8 	bl	80a5710 <_Z17acquireWireBufferv>
 80a5760:	4621      	mov	r1, r4
 80a5762:	aa01      	add	r2, sp, #4
 80a5764:	4807      	ldr	r0, [pc, #28]	; (80a5784 <_Z19__fetch_global_Wirev+0x44>)
 80a5766:	f7fe fef9 	bl	80a455c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a576a:	4628      	mov	r0, r5
 80a576c:	f7fa fca0 	bl	80a00b0 <__cxa_guard_release>
 80a5770:	4a05      	ldr	r2, [pc, #20]	; (80a5788 <_Z19__fetch_global_Wirev+0x48>)
 80a5772:	4906      	ldr	r1, [pc, #24]	; (80a578c <_Z19__fetch_global_Wirev+0x4c>)
 80a5774:	4803      	ldr	r0, [pc, #12]	; (80a5784 <_Z19__fetch_global_Wirev+0x44>)
 80a5776:	f000 f823 	bl	80a57c0 <__aeabi_atexit>
	return wire;
}
 80a577a:	4802      	ldr	r0, [pc, #8]	; (80a5784 <_Z19__fetch_global_Wirev+0x44>)
 80a577c:	b007      	add	sp, #28
 80a577e:	bd30      	pop	{r4, r5, pc}
 80a5780:	2000147c 	.word	0x2000147c
 80a5784:	20001480 	.word	0x20001480
 80a5788:	2000006c 	.word	0x2000006c
 80a578c:	080a4505 	.word	0x080a4505

080a5790 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a5790:	2300      	movs	r3, #0
 80a5792:	b513      	push	{r0, r1, r4, lr}
 80a5794:	4c07      	ldr	r4, [pc, #28]	; (80a57b4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a5796:	461a      	mov	r2, r3
 80a5798:	4619      	mov	r1, r3
 80a579a:	4620      	mov	r0, r4
 80a579c:	9300      	str	r3, [sp, #0]
 80a579e:	f7fe ff47 	bl	80a4630 <_ZN9IPAddressC1Ehhhh>
 80a57a2:	4620      	mov	r0, r4
 80a57a4:	4a04      	ldr	r2, [pc, #16]	; (80a57b8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a57a6:	4905      	ldr	r1, [pc, #20]	; (80a57bc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a57a8:	b002      	add	sp, #8
 80a57aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a57ae:	f000 b807 	b.w	80a57c0 <__aeabi_atexit>
 80a57b2:	bf00      	nop
 80a57b4:	20001494 	.word	0x20001494
 80a57b8:	2000006c 	.word	0x2000006c
 80a57bc:	080a4581 	.word	0x080a4581

080a57c0 <__aeabi_atexit>:
 80a57c0:	460b      	mov	r3, r1
 80a57c2:	4601      	mov	r1, r0
 80a57c4:	4618      	mov	r0, r3
 80a57c6:	f004 bd05 	b.w	80aa1d4 <__cxa_atexit>

080a57ca <_ZdlPvj>:
 80a57ca:	f7fa bc6a 	b.w	80a00a2 <_ZdlPv>

080a57ce <_ZnajRKSt9nothrow_t>:
 80a57ce:	f7fa bc66 	b.w	80a009e <_Znaj>

080a57d2 <_ZSt25__throw_bad_function_callv>:
 80a57d2:	b508      	push	{r3, lr}
 80a57d4:	f7fe fba2 	bl	80a3f1c <abort>

080a57d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a57d8:	4901      	ldr	r1, [pc, #4]	; (80a57e0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a57da:	f000 b8fb 	b.w	80a59d4 <_ZNKSt9type_infoeqERKS_>
 80a57de:	bf00      	nop
 80a57e0:	080aa864 	.word	0x080aa864

080a57e4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a57e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a57e6:	2400      	movs	r4, #0
 80a57e8:	2310      	movs	r3, #16
 80a57ea:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a57ee:	6803      	ldr	r3, [r0, #0]
 80a57f0:	4615      	mov	r5, r2
 80a57f2:	699e      	ldr	r6, [r3, #24]
 80a57f4:	6812      	ldr	r2, [r2, #0]
 80a57f6:	466b      	mov	r3, sp
 80a57f8:	9400      	str	r4, [sp, #0]
 80a57fa:	f88d 4004 	strb.w	r4, [sp, #4]
 80a57fe:	47b0      	blx	r6
 80a5800:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a5804:	f003 0306 	and.w	r3, r3, #6
 80a5808:	2b06      	cmp	r3, #6
 80a580a:	bf09      	itett	eq
 80a580c:	2001      	moveq	r0, #1
 80a580e:	4620      	movne	r0, r4
 80a5810:	9b00      	ldreq	r3, [sp, #0]
 80a5812:	602b      	streq	r3, [r5, #0]
 80a5814:	b004      	add	sp, #16
 80a5816:	bd70      	pop	{r4, r5, r6, pc}

080a5818 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a5818:	9800      	ldr	r0, [sp, #0]
 80a581a:	4290      	cmp	r0, r2
 80a581c:	bf14      	ite	ne
 80a581e:	2001      	movne	r0, #1
 80a5820:	2006      	moveq	r0, #6
 80a5822:	4770      	bx	lr

080a5824 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a5824:	b510      	push	{r4, lr}
 80a5826:	4604      	mov	r4, r0
 80a5828:	4b02      	ldr	r3, [pc, #8]	; (80a5834 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a582a:	6003      	str	r3, [r0, #0]
 80a582c:	f000 f8cf 	bl	80a59ce <_ZNSt9type_infoD1Ev>
 80a5830:	4620      	mov	r0, r4
 80a5832:	bd10      	pop	{r4, pc}
 80a5834:	080aa8a4 	.word	0x080aa8a4

080a5838 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a5838:	b510      	push	{r4, lr}
 80a583a:	4604      	mov	r4, r0
 80a583c:	f7ff fff2 	bl	80a5824 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a5840:	4620      	mov	r0, r4
 80a5842:	2108      	movs	r1, #8
 80a5844:	f7ff ffc1 	bl	80a57ca <_ZdlPvj>
 80a5848:	4620      	mov	r0, r4
 80a584a:	bd10      	pop	{r4, pc}

080a584c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a584c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5850:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a5854:	461f      	mov	r7, r3
 80a5856:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a585a:	4598      	cmp	r8, r3
 80a585c:	4606      	mov	r6, r0
 80a585e:	4615      	mov	r5, r2
 80a5860:	d107      	bne.n	80a5872 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a5862:	9907      	ldr	r1, [sp, #28]
 80a5864:	f000 f8b6 	bl	80a59d4 <_ZNKSt9type_infoeqERKS_>
 80a5868:	b118      	cbz	r0, 80a5872 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a586a:	7165      	strb	r5, [r4, #5]
 80a586c:	2000      	movs	r0, #0
 80a586e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a5872:	4639      	mov	r1, r7
 80a5874:	4630      	mov	r0, r6
 80a5876:	f000 f8ad 	bl	80a59d4 <_ZNKSt9type_infoeqERKS_>
 80a587a:	2800      	cmp	r0, #0
 80a587c:	d0f6      	beq.n	80a586c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a587e:	2301      	movs	r3, #1
 80a5880:	f8c4 8000 	str.w	r8, [r4]
 80a5884:	7125      	strb	r5, [r4, #4]
 80a5886:	71a3      	strb	r3, [r4, #6]
 80a5888:	e7f0      	b.n	80a586c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a588a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a588a:	b538      	push	{r3, r4, r5, lr}
 80a588c:	4615      	mov	r5, r2
 80a588e:	461c      	mov	r4, r3
 80a5890:	f000 f8a0 	bl	80a59d4 <_ZNKSt9type_infoeqERKS_>
 80a5894:	b120      	cbz	r0, 80a58a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a5896:	2308      	movs	r3, #8
 80a5898:	60e3      	str	r3, [r4, #12]
 80a589a:	2306      	movs	r3, #6
 80a589c:	6025      	str	r5, [r4, #0]
 80a589e:	7123      	strb	r3, [r4, #4]
 80a58a0:	bd38      	pop	{r3, r4, r5, pc}

080a58a2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a58a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a58a6:	4605      	mov	r5, r0
 80a58a8:	460c      	mov	r4, r1
 80a58aa:	4616      	mov	r6, r2
 80a58ac:	461f      	mov	r7, r3
 80a58ae:	f000 f891 	bl	80a59d4 <_ZNKSt9type_infoeqERKS_>
 80a58b2:	b948      	cbnz	r0, 80a58c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a58b4:	2f03      	cmp	r7, #3
 80a58b6:	d807      	bhi.n	80a58c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a58b8:	6823      	ldr	r3, [r4, #0]
 80a58ba:	4632      	mov	r2, r6
 80a58bc:	4629      	mov	r1, r5
 80a58be:	4620      	mov	r0, r4
 80a58c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a58c4:	695b      	ldr	r3, [r3, #20]
 80a58c6:	4718      	bx	r3
 80a58c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a58cc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a58cc:	b510      	push	{r4, lr}
 80a58ce:	4604      	mov	r4, r0
 80a58d0:	4b02      	ldr	r3, [pc, #8]	; (80a58dc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a58d2:	6003      	str	r3, [r0, #0]
 80a58d4:	f7ff ffa6 	bl	80a5824 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a58d8:	4620      	mov	r0, r4
 80a58da:	bd10      	pop	{r4, pc}
 80a58dc:	080aa904 	.word	0x080aa904

080a58e0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a58e0:	b510      	push	{r4, lr}
 80a58e2:	4604      	mov	r4, r0
 80a58e4:	f7ff fff2 	bl	80a58cc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a58e8:	4620      	mov	r0, r4
 80a58ea:	210c      	movs	r1, #12
 80a58ec:	f7ff ff6d 	bl	80a57ca <_ZdlPvj>
 80a58f0:	4620      	mov	r0, r4
 80a58f2:	bd10      	pop	{r4, pc}

080a58f4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a58f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a58f8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a58fc:	4606      	mov	r6, r0
 80a58fe:	4590      	cmp	r8, r2
 80a5900:	460f      	mov	r7, r1
 80a5902:	4615      	mov	r5, r2
 80a5904:	461c      	mov	r4, r3
 80a5906:	d00b      	beq.n	80a5920 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a5908:	68b0      	ldr	r0, [r6, #8]
 80a590a:	462a      	mov	r2, r5
 80a590c:	6803      	ldr	r3, [r0, #0]
 80a590e:	f8cd 8018 	str.w	r8, [sp, #24]
 80a5912:	6a1e      	ldr	r6, [r3, #32]
 80a5914:	4639      	mov	r1, r7
 80a5916:	4623      	mov	r3, r4
 80a5918:	46b4      	mov	ip, r6
 80a591a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a591e:	4760      	bx	ip
 80a5920:	4619      	mov	r1, r3
 80a5922:	f000 f857 	bl	80a59d4 <_ZNKSt9type_infoeqERKS_>
 80a5926:	2800      	cmp	r0, #0
 80a5928:	d0ee      	beq.n	80a5908 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a592a:	2006      	movs	r0, #6
 80a592c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a5930 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a5930:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5934:	460d      	mov	r5, r1
 80a5936:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a593a:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a593e:	4619      	mov	r1, r3
 80a5940:	4681      	mov	r9, r0
 80a5942:	4617      	mov	r7, r2
 80a5944:	4698      	mov	r8, r3
 80a5946:	f000 f845 	bl	80a59d4 <_ZNKSt9type_infoeqERKS_>
 80a594a:	b190      	cbz	r0, 80a5972 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a594c:	2d00      	cmp	r5, #0
 80a594e:	6034      	str	r4, [r6, #0]
 80a5950:	7137      	strb	r7, [r6, #4]
 80a5952:	db09      	blt.n	80a5968 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a5954:	442c      	add	r4, r5
 80a5956:	45a2      	cmp	sl, r4
 80a5958:	bf0c      	ite	eq
 80a595a:	2406      	moveq	r4, #6
 80a595c:	2401      	movne	r4, #1
 80a595e:	71b4      	strb	r4, [r6, #6]
 80a5960:	2000      	movs	r0, #0
 80a5962:	b001      	add	sp, #4
 80a5964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5968:	3502      	adds	r5, #2
 80a596a:	d1f9      	bne.n	80a5960 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a596c:	2301      	movs	r3, #1
 80a596e:	71b3      	strb	r3, [r6, #6]
 80a5970:	e7f6      	b.n	80a5960 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a5972:	4554      	cmp	r4, sl
 80a5974:	d106      	bne.n	80a5984 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a5976:	4659      	mov	r1, fp
 80a5978:	4648      	mov	r0, r9
 80a597a:	f000 f82b 	bl	80a59d4 <_ZNKSt9type_infoeqERKS_>
 80a597e:	b108      	cbz	r0, 80a5984 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a5980:	7177      	strb	r7, [r6, #5]
 80a5982:	e7ed      	b.n	80a5960 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a5984:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a5988:	463a      	mov	r2, r7
 80a598a:	6803      	ldr	r3, [r0, #0]
 80a598c:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a5990:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a5994:	69dc      	ldr	r4, [r3, #28]
 80a5996:	4629      	mov	r1, r5
 80a5998:	4643      	mov	r3, r8
 80a599a:	46a4      	mov	ip, r4
 80a599c:	b001      	add	sp, #4
 80a599e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a59a2:	4760      	bx	ip

080a59a4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a59a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a59a8:	4607      	mov	r7, r0
 80a59aa:	460c      	mov	r4, r1
 80a59ac:	4615      	mov	r5, r2
 80a59ae:	461e      	mov	r6, r3
 80a59b0:	f7ff ff6b 	bl	80a588a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a59b4:	b948      	cbnz	r0, 80a59ca <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a59b6:	68b8      	ldr	r0, [r7, #8]
 80a59b8:	462a      	mov	r2, r5
 80a59ba:	6803      	ldr	r3, [r0, #0]
 80a59bc:	4621      	mov	r1, r4
 80a59be:	699f      	ldr	r7, [r3, #24]
 80a59c0:	4633      	mov	r3, r6
 80a59c2:	46bc      	mov	ip, r7
 80a59c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a59c8:	4760      	bx	ip
 80a59ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a59ce <_ZNSt9type_infoD1Ev>:
 80a59ce:	4770      	bx	lr

080a59d0 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a59d0:	2000      	movs	r0, #0
 80a59d2:	4770      	bx	lr

080a59d4 <_ZNKSt9type_infoeqERKS_>:
 80a59d4:	4281      	cmp	r1, r0
 80a59d6:	b508      	push	{r3, lr}
 80a59d8:	d00e      	beq.n	80a59f8 <_ZNKSt9type_infoeqERKS_+0x24>
 80a59da:	6840      	ldr	r0, [r0, #4]
 80a59dc:	7803      	ldrb	r3, [r0, #0]
 80a59de:	2b2a      	cmp	r3, #42	; 0x2a
 80a59e0:	d00c      	beq.n	80a59fc <_ZNKSt9type_infoeqERKS_+0x28>
 80a59e2:	6849      	ldr	r1, [r1, #4]
 80a59e4:	780b      	ldrb	r3, [r1, #0]
 80a59e6:	2b2a      	cmp	r3, #42	; 0x2a
 80a59e8:	bf08      	it	eq
 80a59ea:	3101      	addeq	r1, #1
 80a59ec:	f004 fc6e 	bl	80aa2cc <strcmp>
 80a59f0:	fab0 f080 	clz	r0, r0
 80a59f4:	0940      	lsrs	r0, r0, #5
 80a59f6:	bd08      	pop	{r3, pc}
 80a59f8:	2001      	movs	r0, #1
 80a59fa:	e7fc      	b.n	80a59f6 <_ZNKSt9type_infoeqERKS_+0x22>
 80a59fc:	2000      	movs	r0, #0
 80a59fe:	e7fa      	b.n	80a59f6 <_ZNKSt9type_infoeqERKS_+0x22>

080a5a00 <cos>:
 80a5a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a5a02:	4d28      	ldr	r5, [pc, #160]	; (80a5aa4 <cos+0xa4>)
 80a5a04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a5a08:	42ab      	cmp	r3, r5
 80a5a0a:	b087      	sub	sp, #28
 80a5a0c:	dd21      	ble.n	80a5a52 <cos+0x52>
 80a5a0e:	4d26      	ldr	r5, [pc, #152]	; (80a5aa8 <cos+0xa8>)
 80a5a10:	42ab      	cmp	r3, r5
 80a5a12:	dd09      	ble.n	80a5a28 <cos+0x28>
 80a5a14:	4602      	mov	r2, r0
 80a5a16:	460b      	mov	r3, r1
 80a5a18:	f003 fbac 	bl	80a9174 <__aeabi_dsub>
 80a5a1c:	4602      	mov	r2, r0
 80a5a1e:	460b      	mov	r3, r1
 80a5a20:	4610      	mov	r0, r2
 80a5a22:	4619      	mov	r1, r3
 80a5a24:	b007      	add	sp, #28
 80a5a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a5a28:	aa02      	add	r2, sp, #8
 80a5a2a:	f001 f891 	bl	80a6b50 <__ieee754_rem_pio2>
 80a5a2e:	f000 0003 	and.w	r0, r0, #3
 80a5a32:	2801      	cmp	r0, #1
 80a5a34:	d017      	beq.n	80a5a66 <cos+0x66>
 80a5a36:	2802      	cmp	r0, #2
 80a5a38:	d029      	beq.n	80a5a8e <cos+0x8e>
 80a5a3a:	b1f8      	cbz	r0, 80a5a7c <cos+0x7c>
 80a5a3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a5a40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5a44:	2401      	movs	r4, #1
 80a5a46:	9400      	str	r4, [sp, #0]
 80a5a48:	f002 fbea 	bl	80a8220 <__kernel_sin>
 80a5a4c:	4602      	mov	r2, r0
 80a5a4e:	460b      	mov	r3, r1
 80a5a50:	e7e6      	b.n	80a5a20 <cos+0x20>
 80a5a52:	2200      	movs	r2, #0
 80a5a54:	2300      	movs	r3, #0
 80a5a56:	f001 fe97 	bl	80a7788 <__kernel_cos>
 80a5a5a:	4602      	mov	r2, r0
 80a5a5c:	460b      	mov	r3, r1
 80a5a5e:	4610      	mov	r0, r2
 80a5a60:	4619      	mov	r1, r3
 80a5a62:	b007      	add	sp, #28
 80a5a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a5a66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a5a6a:	9000      	str	r0, [sp, #0]
 80a5a6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5a70:	f002 fbd6 	bl	80a8220 <__kernel_sin>
 80a5a74:	4602      	mov	r2, r0
 80a5a76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a5a7a:	e7d1      	b.n	80a5a20 <cos+0x20>
 80a5a7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a5a80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5a84:	f001 fe80 	bl	80a7788 <__kernel_cos>
 80a5a88:	4602      	mov	r2, r0
 80a5a8a:	460b      	mov	r3, r1
 80a5a8c:	e7c8      	b.n	80a5a20 <cos+0x20>
 80a5a8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a5a92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5a96:	f001 fe77 	bl	80a7788 <__kernel_cos>
 80a5a9a:	4602      	mov	r2, r0
 80a5a9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a5aa0:	e7be      	b.n	80a5a20 <cos+0x20>
 80a5aa2:	bf00      	nop
 80a5aa4:	3fe921fb 	.word	0x3fe921fb
 80a5aa8:	7fefffff 	.word	0x7fefffff

080a5aac <cosf>:
 80a5aac:	b500      	push	{lr}
 80a5aae:	4a1c      	ldr	r2, [pc, #112]	; (80a5b20 <cosf+0x74>)
 80a5ab0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80a5ab4:	4293      	cmp	r3, r2
 80a5ab6:	b083      	sub	sp, #12
 80a5ab8:	dd18      	ble.n	80a5aec <cosf+0x40>
 80a5aba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80a5abe:	db05      	blt.n	80a5acc <cosf+0x20>
 80a5ac0:	4601      	mov	r1, r0
 80a5ac2:	f004 f85b 	bl	80a9b7c <__aeabi_fsub>
 80a5ac6:	b003      	add	sp, #12
 80a5ac8:	f85d fb04 	ldr.w	pc, [sp], #4
 80a5acc:	4669      	mov	r1, sp
 80a5ace:	f001 fce7 	bl	80a74a0 <__ieee754_rem_pio2f>
 80a5ad2:	f000 0203 	and.w	r2, r0, #3
 80a5ad6:	2a01      	cmp	r2, #1
 80a5ad8:	d00e      	beq.n	80a5af8 <cosf+0x4c>
 80a5ada:	2a02      	cmp	r2, #2
 80a5adc:	d018      	beq.n	80a5b10 <cosf+0x64>
 80a5ade:	b192      	cbz	r2, 80a5b06 <cosf+0x5a>
 80a5ae0:	2201      	movs	r2, #1
 80a5ae2:	9901      	ldr	r1, [sp, #4]
 80a5ae4:	9800      	ldr	r0, [sp, #0]
 80a5ae6:	f003 f895 	bl	80a8c14 <__kernel_sinf>
 80a5aea:	e7ec      	b.n	80a5ac6 <cosf+0x1a>
 80a5aec:	2100      	movs	r1, #0
 80a5aee:	f002 fc59 	bl	80a83a4 <__kernel_cosf>
 80a5af2:	b003      	add	sp, #12
 80a5af4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a5af8:	9901      	ldr	r1, [sp, #4]
 80a5afa:	9800      	ldr	r0, [sp, #0]
 80a5afc:	f003 f88a 	bl	80a8c14 <__kernel_sinf>
 80a5b00:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a5b04:	e7df      	b.n	80a5ac6 <cosf+0x1a>
 80a5b06:	9901      	ldr	r1, [sp, #4]
 80a5b08:	9800      	ldr	r0, [sp, #0]
 80a5b0a:	f002 fc4b 	bl	80a83a4 <__kernel_cosf>
 80a5b0e:	e7da      	b.n	80a5ac6 <cosf+0x1a>
 80a5b10:	9901      	ldr	r1, [sp, #4]
 80a5b12:	9800      	ldr	r0, [sp, #0]
 80a5b14:	f002 fc46 	bl	80a83a4 <__kernel_cosf>
 80a5b18:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a5b1c:	e7d3      	b.n	80a5ac6 <cosf+0x1a>
 80a5b1e:	bf00      	nop
 80a5b20:	3f490fd8 	.word	0x3f490fd8

080a5b24 <pow>:
 80a5b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5b28:	b08f      	sub	sp, #60	; 0x3c
 80a5b2a:	461d      	mov	r5, r3
 80a5b2c:	4606      	mov	r6, r0
 80a5b2e:	460f      	mov	r7, r1
 80a5b30:	4614      	mov	r4, r2
 80a5b32:	f000 fa75 	bl	80a6020 <__ieee754_pow>
 80a5b36:	4ba4      	ldr	r3, [pc, #656]	; (80a5dc8 <pow+0x2a4>)
 80a5b38:	e9cd 0100 	strd	r0, r1, [sp]
 80a5b3c:	f993 9000 	ldrsb.w	r9, [r3]
 80a5b40:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80a5b44:	d038      	beq.n	80a5bb8 <pow+0x94>
 80a5b46:	4622      	mov	r2, r4
 80a5b48:	462b      	mov	r3, r5
 80a5b4a:	4620      	mov	r0, r4
 80a5b4c:	4629      	mov	r1, r5
 80a5b4e:	f003 ff63 	bl	80a9a18 <__aeabi_dcmpun>
 80a5b52:	4683      	mov	fp, r0
 80a5b54:	bb80      	cbnz	r0, 80a5bb8 <pow+0x94>
 80a5b56:	4632      	mov	r2, r6
 80a5b58:	463b      	mov	r3, r7
 80a5b5a:	4630      	mov	r0, r6
 80a5b5c:	4639      	mov	r1, r7
 80a5b5e:	f003 ff5b 	bl	80a9a18 <__aeabi_dcmpun>
 80a5b62:	4680      	mov	r8, r0
 80a5b64:	2800      	cmp	r0, #0
 80a5b66:	f040 80d9 	bne.w	80a5d1c <pow+0x1f8>
 80a5b6a:	f04f 0a00 	mov.w	sl, #0
 80a5b6e:	f04f 0b00 	mov.w	fp, #0
 80a5b72:	4630      	mov	r0, r6
 80a5b74:	4639      	mov	r1, r7
 80a5b76:	4652      	mov	r2, sl
 80a5b78:	465b      	mov	r3, fp
 80a5b7a:	f003 ff1b 	bl	80a99b4 <__aeabi_dcmpeq>
 80a5b7e:	b300      	cbz	r0, 80a5bc2 <pow+0x9e>
 80a5b80:	4652      	mov	r2, sl
 80a5b82:	465b      	mov	r3, fp
 80a5b84:	4620      	mov	r0, r4
 80a5b86:	4629      	mov	r1, r5
 80a5b88:	f003 ff14 	bl	80a99b4 <__aeabi_dcmpeq>
 80a5b8c:	9003      	str	r0, [sp, #12]
 80a5b8e:	2800      	cmp	r0, #0
 80a5b90:	d048      	beq.n	80a5c24 <pow+0x100>
 80a5b92:	2201      	movs	r2, #1
 80a5b94:	4b8d      	ldr	r3, [pc, #564]	; (80a5dcc <pow+0x2a8>)
 80a5b96:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a5b9a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a5b9e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80a5ba2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a5ba6:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80a5baa:	f1b9 0f00 	cmp.w	r9, #0
 80a5bae:	d068      	beq.n	80a5c82 <pow+0x15e>
 80a5bb0:	2300      	movs	r3, #0
 80a5bb2:	4c87      	ldr	r4, [pc, #540]	; (80a5dd0 <pow+0x2ac>)
 80a5bb4:	e9cd 3400 	strd	r3, r4, [sp]
 80a5bb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a5bbc:	b00f      	add	sp, #60	; 0x3c
 80a5bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5bc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a5bc6:	f003 f89f 	bl	80a8d08 <finite>
 80a5bca:	4680      	mov	r8, r0
 80a5bcc:	2800      	cmp	r0, #0
 80a5bce:	d069      	beq.n	80a5ca4 <pow+0x180>
 80a5bd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a5bd4:	f04f 0800 	mov.w	r8, #0
 80a5bd8:	f04f 0900 	mov.w	r9, #0
 80a5bdc:	4642      	mov	r2, r8
 80a5bde:	464b      	mov	r3, r9
 80a5be0:	f003 fee8 	bl	80a99b4 <__aeabi_dcmpeq>
 80a5be4:	2800      	cmp	r0, #0
 80a5be6:	d0e7      	beq.n	80a5bb8 <pow+0x94>
 80a5be8:	4630      	mov	r0, r6
 80a5bea:	4639      	mov	r1, r7
 80a5bec:	f003 f88c 	bl	80a8d08 <finite>
 80a5bf0:	2800      	cmp	r0, #0
 80a5bf2:	d0e1      	beq.n	80a5bb8 <pow+0x94>
 80a5bf4:	4620      	mov	r0, r4
 80a5bf6:	4629      	mov	r1, r5
 80a5bf8:	f003 f886 	bl	80a8d08 <finite>
 80a5bfc:	2800      	cmp	r0, #0
 80a5bfe:	d0db      	beq.n	80a5bb8 <pow+0x94>
 80a5c00:	2004      	movs	r0, #4
 80a5c02:	2100      	movs	r1, #0
 80a5c04:	4b70      	ldr	r3, [pc, #448]	; (80a5dc8 <pow+0x2a4>)
 80a5c06:	4a71      	ldr	r2, [pc, #452]	; (80a5dcc <pow+0x2a8>)
 80a5c08:	f993 3000 	ldrsb.w	r3, [r3]
 80a5c0c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a5c10:	2b02      	cmp	r3, #2
 80a5c12:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a5c16:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a5c1a:	9004      	str	r0, [sp, #16]
 80a5c1c:	910c      	str	r1, [sp, #48]	; 0x30
 80a5c1e:	9205      	str	r2, [sp, #20]
 80a5c20:	d172      	bne.n	80a5d08 <pow+0x1e4>
 80a5c22:	e076      	b.n	80a5d12 <pow+0x1ee>
 80a5c24:	4620      	mov	r0, r4
 80a5c26:	4629      	mov	r1, r5
 80a5c28:	f003 f86e 	bl	80a8d08 <finite>
 80a5c2c:	2800      	cmp	r0, #0
 80a5c2e:	d0c3      	beq.n	80a5bb8 <pow+0x94>
 80a5c30:	4652      	mov	r2, sl
 80a5c32:	465b      	mov	r3, fp
 80a5c34:	4620      	mov	r0, r4
 80a5c36:	4629      	mov	r1, r5
 80a5c38:	f003 fec6 	bl	80a99c8 <__aeabi_dcmplt>
 80a5c3c:	2800      	cmp	r0, #0
 80a5c3e:	d0bb      	beq.n	80a5bb8 <pow+0x94>
 80a5c40:	2101      	movs	r1, #1
 80a5c42:	9a03      	ldr	r2, [sp, #12]
 80a5c44:	4b60      	ldr	r3, [pc, #384]	; (80a5dc8 <pow+0x2a4>)
 80a5c46:	920c      	str	r2, [sp, #48]	; 0x30
 80a5c48:	f993 3000 	ldrsb.w	r3, [r3]
 80a5c4c:	4a5f      	ldr	r2, [pc, #380]	; (80a5dcc <pow+0x2a8>)
 80a5c4e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a5c52:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a5c56:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80a5c5a:	2b00      	cmp	r3, #0
 80a5c5c:	d17b      	bne.n	80a5d56 <pow+0x232>
 80a5c5e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80a5c62:	a804      	add	r0, sp, #16
 80a5c64:	f003 f8d4 	bl	80a8e10 <matherr>
 80a5c68:	2800      	cmp	r0, #0
 80a5c6a:	d07b      	beq.n	80a5d64 <pow+0x240>
 80a5c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a5c6e:	b11b      	cbz	r3, 80a5c78 <pow+0x154>
 80a5c70:	f7fe f964 	bl	80a3f3c <__errno>
 80a5c74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a5c76:	6003      	str	r3, [r0, #0]
 80a5c78:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80a5c7c:	e9cd 3400 	strd	r3, r4, [sp]
 80a5c80:	e79a      	b.n	80a5bb8 <pow+0x94>
 80a5c82:	a804      	add	r0, sp, #16
 80a5c84:	f003 f8c4 	bl	80a8e10 <matherr>
 80a5c88:	2800      	cmp	r0, #0
 80a5c8a:	d070      	beq.n	80a5d6e <pow+0x24a>
 80a5c8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a5c8e:	2b00      	cmp	r3, #0
 80a5c90:	d0f2      	beq.n	80a5c78 <pow+0x154>
 80a5c92:	f7fe f953 	bl	80a3f3c <__errno>
 80a5c96:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80a5c9a:	e9cd 3400 	strd	r3, r4, [sp]
 80a5c9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a5ca0:	6003      	str	r3, [r0, #0]
 80a5ca2:	e789      	b.n	80a5bb8 <pow+0x94>
 80a5ca4:	4630      	mov	r0, r6
 80a5ca6:	4639      	mov	r1, r7
 80a5ca8:	f003 f82e 	bl	80a8d08 <finite>
 80a5cac:	2800      	cmp	r0, #0
 80a5cae:	d08f      	beq.n	80a5bd0 <pow+0xac>
 80a5cb0:	4620      	mov	r0, r4
 80a5cb2:	4629      	mov	r1, r5
 80a5cb4:	f003 f828 	bl	80a8d08 <finite>
 80a5cb8:	2800      	cmp	r0, #0
 80a5cba:	d089      	beq.n	80a5bd0 <pow+0xac>
 80a5cbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a5cc0:	4610      	mov	r0, r2
 80a5cc2:	4619      	mov	r1, r3
 80a5cc4:	f003 fea8 	bl	80a9a18 <__aeabi_dcmpun>
 80a5cc8:	2800      	cmp	r0, #0
 80a5cca:	f040 80a4 	bne.w	80a5e16 <pow+0x2f2>
 80a5cce:	2203      	movs	r2, #3
 80a5cd0:	9204      	str	r2, [sp, #16]
 80a5cd2:	4a3d      	ldr	r2, [pc, #244]	; (80a5dc8 <pow+0x2a4>)
 80a5cd4:	4b3d      	ldr	r3, [pc, #244]	; (80a5dcc <pow+0x2a8>)
 80a5cd6:	f992 8000 	ldrsb.w	r8, [r2]
 80a5cda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a5cde:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a5ce2:	900c      	str	r0, [sp, #48]	; 0x30
 80a5ce4:	9305      	str	r3, [sp, #20]
 80a5ce6:	f1b8 0f00 	cmp.w	r8, #0
 80a5cea:	d145      	bne.n	80a5d78 <pow+0x254>
 80a5cec:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
 80a5cf0:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80a5de4 <pow+0x2c0>
 80a5cf4:	4652      	mov	r2, sl
 80a5cf6:	465b      	mov	r3, fp
 80a5cf8:	4630      	mov	r0, r6
 80a5cfa:	4639      	mov	r1, r7
 80a5cfc:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a5d00:	f003 fe62 	bl	80a99c8 <__aeabi_dcmplt>
 80a5d04:	2800      	cmp	r0, #0
 80a5d06:	d146      	bne.n	80a5d96 <pow+0x272>
 80a5d08:	a804      	add	r0, sp, #16
 80a5d0a:	f003 f881 	bl	80a8e10 <matherr>
 80a5d0e:	2800      	cmp	r0, #0
 80a5d10:	d1ac      	bne.n	80a5c6c <pow+0x148>
 80a5d12:	f7fe f913 	bl	80a3f3c <__errno>
 80a5d16:	2322      	movs	r3, #34	; 0x22
 80a5d18:	6003      	str	r3, [r0, #0]
 80a5d1a:	e7a7      	b.n	80a5c6c <pow+0x148>
 80a5d1c:	2200      	movs	r2, #0
 80a5d1e:	2300      	movs	r3, #0
 80a5d20:	4620      	mov	r0, r4
 80a5d22:	4629      	mov	r1, r5
 80a5d24:	f003 fe46 	bl	80a99b4 <__aeabi_dcmpeq>
 80a5d28:	2800      	cmp	r0, #0
 80a5d2a:	f43f af45 	beq.w	80a5bb8 <pow+0x94>
 80a5d2e:	2201      	movs	r2, #1
 80a5d30:	2000      	movs	r0, #0
 80a5d32:	4927      	ldr	r1, [pc, #156]	; (80a5dd0 <pow+0x2ac>)
 80a5d34:	4b25      	ldr	r3, [pc, #148]	; (80a5dcc <pow+0x2a8>)
 80a5d36:	f1b9 0f02 	cmp.w	r9, #2
 80a5d3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a5d3e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a5d42:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a5d46:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80a5d4a:	9204      	str	r2, [sp, #16]
 80a5d4c:	9305      	str	r3, [sp, #20]
 80a5d4e:	d198      	bne.n	80a5c82 <pow+0x15e>
 80a5d50:	e9cd 0100 	strd	r0, r1, [sp]
 80a5d54:	e730      	b.n	80a5bb8 <pow+0x94>
 80a5d56:	2000      	movs	r0, #0
 80a5d58:	491e      	ldr	r1, [pc, #120]	; (80a5dd4 <pow+0x2b0>)
 80a5d5a:	2b02      	cmp	r3, #2
 80a5d5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a5d60:	f47f af7f 	bne.w	80a5c62 <pow+0x13e>
 80a5d64:	f7fe f8ea 	bl	80a3f3c <__errno>
 80a5d68:	2321      	movs	r3, #33	; 0x21
 80a5d6a:	6003      	str	r3, [r0, #0]
 80a5d6c:	e77e      	b.n	80a5c6c <pow+0x148>
 80a5d6e:	f7fe f8e5 	bl	80a3f3c <__errno>
 80a5d72:	2321      	movs	r3, #33	; 0x21
 80a5d74:	6003      	str	r3, [r0, #0]
 80a5d76:	e789      	b.n	80a5c8c <pow+0x168>
 80a5d78:	4630      	mov	r0, r6
 80a5d7a:	2600      	movs	r6, #0
 80a5d7c:	4639      	mov	r1, r7
 80a5d7e:	4f16      	ldr	r7, [pc, #88]	; (80a5dd8 <pow+0x2b4>)
 80a5d80:	4652      	mov	r2, sl
 80a5d82:	465b      	mov	r3, fp
 80a5d84:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80a5d88:	f003 fe1e 	bl	80a99c8 <__aeabi_dcmplt>
 80a5d8c:	bb60      	cbnz	r0, 80a5de8 <pow+0x2c4>
 80a5d8e:	f1b8 0f02 	cmp.w	r8, #2
 80a5d92:	d0be      	beq.n	80a5d12 <pow+0x1ee>
 80a5d94:	e7b8      	b.n	80a5d08 <pow+0x1e4>
 80a5d96:	2200      	movs	r2, #0
 80a5d98:	4b10      	ldr	r3, [pc, #64]	; (80a5ddc <pow+0x2b8>)
 80a5d9a:	4620      	mov	r0, r4
 80a5d9c:	4629      	mov	r1, r5
 80a5d9e:	f003 fba1 	bl	80a94e4 <__aeabi_dmul>
 80a5da2:	4604      	mov	r4, r0
 80a5da4:	460d      	mov	r5, r1
 80a5da6:	f003 f83b 	bl	80a8e20 <rint>
 80a5daa:	4622      	mov	r2, r4
 80a5dac:	462b      	mov	r3, r5
 80a5dae:	f003 fe01 	bl	80a99b4 <__aeabi_dcmpeq>
 80a5db2:	bb60      	cbnz	r0, 80a5e0e <pow+0x2ea>
 80a5db4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a5db8:	4b09      	ldr	r3, [pc, #36]	; (80a5de0 <pow+0x2bc>)
 80a5dba:	4903      	ldr	r1, [pc, #12]	; (80a5dc8 <pow+0x2a4>)
 80a5dbc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a5dc0:	f991 8000 	ldrsb.w	r8, [r1]
 80a5dc4:	e7e3      	b.n	80a5d8e <pow+0x26a>
 80a5dc6:	bf00      	nop
 80a5dc8:	20000004 	.word	0x20000004
 80a5dcc:	080aa940 	.word	0x080aa940
 80a5dd0:	3ff00000 	.word	0x3ff00000
 80a5dd4:	fff00000 	.word	0xfff00000
 80a5dd8:	7ff00000 	.word	0x7ff00000
 80a5ddc:	3fe00000 	.word	0x3fe00000
 80a5de0:	c7efffff 	.word	0xc7efffff
 80a5de4:	47efffff 	.word	0x47efffff
 80a5de8:	2200      	movs	r2, #0
 80a5dea:	4b19      	ldr	r3, [pc, #100]	; (80a5e50 <pow+0x32c>)
 80a5dec:	4620      	mov	r0, r4
 80a5dee:	4629      	mov	r1, r5
 80a5df0:	f003 fb78 	bl	80a94e4 <__aeabi_dmul>
 80a5df4:	4604      	mov	r4, r0
 80a5df6:	460d      	mov	r5, r1
 80a5df8:	f003 f812 	bl	80a8e20 <rint>
 80a5dfc:	4622      	mov	r2, r4
 80a5dfe:	462b      	mov	r3, r5
 80a5e00:	f003 fdd8 	bl	80a99b4 <__aeabi_dcmpeq>
 80a5e04:	b918      	cbnz	r0, 80a5e0e <pow+0x2ea>
 80a5e06:	2200      	movs	r2, #0
 80a5e08:	4b12      	ldr	r3, [pc, #72]	; (80a5e54 <pow+0x330>)
 80a5e0a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a5e0e:	4b12      	ldr	r3, [pc, #72]	; (80a5e58 <pow+0x334>)
 80a5e10:	f993 8000 	ldrsb.w	r8, [r3]
 80a5e14:	e7bb      	b.n	80a5d8e <pow+0x26a>
 80a5e16:	2201      	movs	r2, #1
 80a5e18:	4b0f      	ldr	r3, [pc, #60]	; (80a5e58 <pow+0x334>)
 80a5e1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a5e1e:	f993 9000 	ldrsb.w	r9, [r3]
 80a5e22:	4b0e      	ldr	r3, [pc, #56]	; (80a5e5c <pow+0x338>)
 80a5e24:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a5e28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a5e2c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80a5e30:	f1b9 0f00 	cmp.w	r9, #0
 80a5e34:	f43f af13 	beq.w	80a5c5e <pow+0x13a>
 80a5e38:	4652      	mov	r2, sl
 80a5e3a:	465b      	mov	r3, fp
 80a5e3c:	4650      	mov	r0, sl
 80a5e3e:	4659      	mov	r1, fp
 80a5e40:	f003 fc7a 	bl	80a9738 <__aeabi_ddiv>
 80a5e44:	f1b9 0f02 	cmp.w	r9, #2
 80a5e48:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a5e4c:	d08a      	beq.n	80a5d64 <pow+0x240>
 80a5e4e:	e708      	b.n	80a5c62 <pow+0x13e>
 80a5e50:	3fe00000 	.word	0x3fe00000
 80a5e54:	fff00000 	.word	0xfff00000
 80a5e58:	20000004 	.word	0x20000004
 80a5e5c:	080aa940 	.word	0x080aa940

080a5e60 <fmodf>:
 80a5e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5e64:	b08a      	sub	sp, #40	; 0x28
 80a5e66:	4607      	mov	r7, r0
 80a5e68:	460c      	mov	r4, r1
 80a5e6a:	f001 f957 	bl	80a711c <__ieee754_fmodf>
 80a5e6e:	4b2a      	ldr	r3, [pc, #168]	; (80a5f18 <fmodf+0xb8>)
 80a5e70:	4605      	mov	r5, r0
 80a5e72:	f993 8000 	ldrsb.w	r8, [r3]
 80a5e76:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80a5e7a:	d03a      	beq.n	80a5ef2 <fmodf+0x92>
 80a5e7c:	4621      	mov	r1, r4
 80a5e7e:	4620      	mov	r0, r4
 80a5e80:	f004 f94c 	bl	80aa11c <__aeabi_fcmpun>
 80a5e84:	2800      	cmp	r0, #0
 80a5e86:	d134      	bne.n	80a5ef2 <fmodf+0x92>
 80a5e88:	4639      	mov	r1, r7
 80a5e8a:	4638      	mov	r0, r7
 80a5e8c:	f004 f946 	bl	80aa11c <__aeabi_fcmpun>
 80a5e90:	4606      	mov	r6, r0
 80a5e92:	bb70      	cbnz	r0, 80a5ef2 <fmodf+0x92>
 80a5e94:	2100      	movs	r1, #0
 80a5e96:	4620      	mov	r0, r4
 80a5e98:	f004 f90e 	bl	80aa0b8 <__aeabi_fcmpeq>
 80a5e9c:	b348      	cbz	r0, 80a5ef2 <fmodf+0x92>
 80a5e9e:	2201      	movs	r2, #1
 80a5ea0:	4b1e      	ldr	r3, [pc, #120]	; (80a5f1c <fmodf+0xbc>)
 80a5ea2:	4638      	mov	r0, r7
 80a5ea4:	e9cd 2300 	strd	r2, r3, [sp]
 80a5ea8:	9608      	str	r6, [sp, #32]
 80a5eaa:	f003 fac3 	bl	80a9434 <__aeabi_f2d>
 80a5eae:	4606      	mov	r6, r0
 80a5eb0:	460f      	mov	r7, r1
 80a5eb2:	4620      	mov	r0, r4
 80a5eb4:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80a5eb8:	f003 fabc 	bl	80a9434 <__aeabi_f2d>
 80a5ebc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a5ec0:	f1b8 0f00 	cmp.w	r8, #0
 80a5ec4:	d019      	beq.n	80a5efa <fmodf+0x9a>
 80a5ec6:	2200      	movs	r2, #0
 80a5ec8:	2300      	movs	r3, #0
 80a5eca:	4610      	mov	r0, r2
 80a5ecc:	4619      	mov	r1, r3
 80a5ece:	f003 fc33 	bl	80a9738 <__aeabi_ddiv>
 80a5ed2:	f1b8 0f02 	cmp.w	r8, #2
 80a5ed6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a5eda:	d110      	bne.n	80a5efe <fmodf+0x9e>
 80a5edc:	f7fe f82e 	bl	80a3f3c <__errno>
 80a5ee0:	2321      	movs	r3, #33	; 0x21
 80a5ee2:	6003      	str	r3, [r0, #0]
 80a5ee4:	9b08      	ldr	r3, [sp, #32]
 80a5ee6:	b993      	cbnz	r3, 80a5f0e <fmodf+0xae>
 80a5ee8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a5eec:	f003 fdf2 	bl	80a9ad4 <__aeabi_d2f>
 80a5ef0:	4605      	mov	r5, r0
 80a5ef2:	4628      	mov	r0, r5
 80a5ef4:	b00a      	add	sp, #40	; 0x28
 80a5ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a5efa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a5efe:	4668      	mov	r0, sp
 80a5f00:	f002 ff86 	bl	80a8e10 <matherr>
 80a5f04:	2800      	cmp	r0, #0
 80a5f06:	d0e9      	beq.n	80a5edc <fmodf+0x7c>
 80a5f08:	9b08      	ldr	r3, [sp, #32]
 80a5f0a:	2b00      	cmp	r3, #0
 80a5f0c:	d0ec      	beq.n	80a5ee8 <fmodf+0x88>
 80a5f0e:	f7fe f815 	bl	80a3f3c <__errno>
 80a5f12:	9b08      	ldr	r3, [sp, #32]
 80a5f14:	6003      	str	r3, [r0, #0]
 80a5f16:	e7e7      	b.n	80a5ee8 <fmodf+0x88>
 80a5f18:	20000004 	.word	0x20000004
 80a5f1c:	080aa944 	.word	0x080aa944

080a5f20 <logf>:
 80a5f20:	b570      	push	{r4, r5, r6, lr}
 80a5f22:	b08a      	sub	sp, #40	; 0x28
 80a5f24:	4604      	mov	r4, r0
 80a5f26:	f001 f97b 	bl	80a7220 <__ieee754_logf>
 80a5f2a:	4b37      	ldr	r3, [pc, #220]	; (80a6008 <logf+0xe8>)
 80a5f2c:	4605      	mov	r5, r0
 80a5f2e:	f993 6000 	ldrsb.w	r6, [r3]
 80a5f32:	1c73      	adds	r3, r6, #1
 80a5f34:	d033      	beq.n	80a5f9e <logf+0x7e>
 80a5f36:	4621      	mov	r1, r4
 80a5f38:	4620      	mov	r0, r4
 80a5f3a:	f004 f8ef 	bl	80aa11c <__aeabi_fcmpun>
 80a5f3e:	2800      	cmp	r0, #0
 80a5f40:	d12d      	bne.n	80a5f9e <logf+0x7e>
 80a5f42:	2100      	movs	r1, #0
 80a5f44:	4620      	mov	r0, r4
 80a5f46:	f004 f8df 	bl	80aa108 <__aeabi_fcmpgt>
 80a5f4a:	4603      	mov	r3, r0
 80a5f4c:	bb38      	cbnz	r0, 80a5f9e <logf+0x7e>
 80a5f4e:	4a2f      	ldr	r2, [pc, #188]	; (80a600c <logf+0xec>)
 80a5f50:	4620      	mov	r0, r4
 80a5f52:	9308      	str	r3, [sp, #32]
 80a5f54:	9201      	str	r2, [sp, #4]
 80a5f56:	f003 fa6d 	bl	80a9434 <__aeabi_f2d>
 80a5f5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a5f5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a5f62:	b1fe      	cbz	r6, 80a5fa4 <logf+0x84>
 80a5f64:	2200      	movs	r2, #0
 80a5f66:	4b2a      	ldr	r3, [pc, #168]	; (80a6010 <logf+0xf0>)
 80a5f68:	4620      	mov	r0, r4
 80a5f6a:	2100      	movs	r1, #0
 80a5f6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a5f70:	f004 f8a2 	bl	80aa0b8 <__aeabi_fcmpeq>
 80a5f74:	2800      	cmp	r0, #0
 80a5f76:	d03d      	beq.n	80a5ff4 <logf+0xd4>
 80a5f78:	2302      	movs	r3, #2
 80a5f7a:	429e      	cmp	r6, r3
 80a5f7c:	9300      	str	r3, [sp, #0]
 80a5f7e:	d133      	bne.n	80a5fe8 <logf+0xc8>
 80a5f80:	f7fd ffdc 	bl	80a3f3c <__errno>
 80a5f84:	2322      	movs	r3, #34	; 0x22
 80a5f86:	6003      	str	r3, [r0, #0]
 80a5f88:	9b08      	ldr	r3, [sp, #32]
 80a5f8a:	b31b      	cbz	r3, 80a5fd4 <logf+0xb4>
 80a5f8c:	f7fd ffd6 	bl	80a3f3c <__errno>
 80a5f90:	9b08      	ldr	r3, [sp, #32]
 80a5f92:	6003      	str	r3, [r0, #0]
 80a5f94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a5f98:	f003 fd9c 	bl	80a9ad4 <__aeabi_d2f>
 80a5f9c:	4605      	mov	r5, r0
 80a5f9e:	4628      	mov	r0, r5
 80a5fa0:	b00a      	add	sp, #40	; 0x28
 80a5fa2:	bd70      	pop	{r4, r5, r6, pc}
 80a5fa4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a5fa8:	4b1a      	ldr	r3, [pc, #104]	; (80a6014 <logf+0xf4>)
 80a5faa:	4620      	mov	r0, r4
 80a5fac:	2100      	movs	r1, #0
 80a5fae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a5fb2:	f004 f881 	bl	80aa0b8 <__aeabi_fcmpeq>
 80a5fb6:	b9a8      	cbnz	r0, 80a5fe4 <logf+0xc4>
 80a5fb8:	2301      	movs	r3, #1
 80a5fba:	9300      	str	r3, [sp, #0]
 80a5fbc:	4668      	mov	r0, sp
 80a5fbe:	f002 ff27 	bl	80a8e10 <matherr>
 80a5fc2:	b1d8      	cbz	r0, 80a5ffc <logf+0xdc>
 80a5fc4:	4814      	ldr	r0, [pc, #80]	; (80a6018 <logf+0xf8>)
 80a5fc6:	f002 ff25 	bl	80a8e14 <nan>
 80a5fca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a5fce:	9b08      	ldr	r3, [sp, #32]
 80a5fd0:	2b00      	cmp	r3, #0
 80a5fd2:	d1db      	bne.n	80a5f8c <logf+0x6c>
 80a5fd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a5fd8:	f003 fd7c 	bl	80a9ad4 <__aeabi_d2f>
 80a5fdc:	4605      	mov	r5, r0
 80a5fde:	4628      	mov	r0, r5
 80a5fe0:	b00a      	add	sp, #40	; 0x28
 80a5fe2:	bd70      	pop	{r4, r5, r6, pc}
 80a5fe4:	2302      	movs	r3, #2
 80a5fe6:	9300      	str	r3, [sp, #0]
 80a5fe8:	4668      	mov	r0, sp
 80a5fea:	f002 ff11 	bl	80a8e10 <matherr>
 80a5fee:	2800      	cmp	r0, #0
 80a5ff0:	d1ed      	bne.n	80a5fce <logf+0xae>
 80a5ff2:	e7c5      	b.n	80a5f80 <logf+0x60>
 80a5ff4:	2301      	movs	r3, #1
 80a5ff6:	2e02      	cmp	r6, #2
 80a5ff8:	9300      	str	r3, [sp, #0]
 80a5ffa:	d1df      	bne.n	80a5fbc <logf+0x9c>
 80a5ffc:	f7fd ff9e 	bl	80a3f3c <__errno>
 80a6000:	2321      	movs	r3, #33	; 0x21
 80a6002:	6003      	str	r3, [r0, #0]
 80a6004:	e7de      	b.n	80a5fc4 <logf+0xa4>
 80a6006:	bf00      	nop
 80a6008:	20000004 	.word	0x20000004
 80a600c:	080aa94c 	.word	0x080aa94c
 80a6010:	fff00000 	.word	0xfff00000
 80a6014:	c7efffff 	.word	0xc7efffff
 80a6018:	080aa950 	.word	0x080aa950
 80a601c:	00000000 	.word	0x00000000

080a6020 <__ieee754_pow>:
 80a6020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6024:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80a6028:	461f      	mov	r7, r3
 80a602a:	4698      	mov	r8, r3
 80a602c:	ea55 0302 	orrs.w	r3, r5, r2
 80a6030:	b095      	sub	sp, #84	; 0x54
 80a6032:	d037      	beq.n	80a60a4 <__ieee754_pow+0x84>
 80a6034:	468b      	mov	fp, r1
 80a6036:	4689      	mov	r9, r1
 80a6038:	496f      	ldr	r1, [pc, #444]	; (80a61f8 <__ieee754_pow+0x1d8>)
 80a603a:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
 80a603e:	428c      	cmp	r4, r1
 80a6040:	4682      	mov	sl, r0
 80a6042:	4603      	mov	r3, r0
 80a6044:	dc28      	bgt.n	80a6098 <__ieee754_pow+0x78>
 80a6046:	4616      	mov	r6, r2
 80a6048:	d035      	beq.n	80a60b6 <__ieee754_pow+0x96>
 80a604a:	428d      	cmp	r5, r1
 80a604c:	dc24      	bgt.n	80a6098 <__ieee754_pow+0x78>
 80a604e:	496a      	ldr	r1, [pc, #424]	; (80a61f8 <__ieee754_pow+0x1d8>)
 80a6050:	428d      	cmp	r5, r1
 80a6052:	d01f      	beq.n	80a6094 <__ieee754_pow+0x74>
 80a6054:	f1b9 0f00 	cmp.w	r9, #0
 80a6058:	db36      	blt.n	80a60c8 <__ieee754_pow+0xa8>
 80a605a:	2100      	movs	r1, #0
 80a605c:	9102      	str	r1, [sp, #8]
 80a605e:	2a00      	cmp	r2, #0
 80a6060:	d14d      	bne.n	80a60fe <__ieee754_pow+0xde>
 80a6062:	4a65      	ldr	r2, [pc, #404]	; (80a61f8 <__ieee754_pow+0x1d8>)
 80a6064:	4295      	cmp	r5, r2
 80a6066:	f000 809d 	beq.w	80a61a4 <__ieee754_pow+0x184>
 80a606a:	4a64      	ldr	r2, [pc, #400]	; (80a61fc <__ieee754_pow+0x1dc>)
 80a606c:	4295      	cmp	r5, r2
 80a606e:	f000 80ab 	beq.w	80a61c8 <__ieee754_pow+0x1a8>
 80a6072:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
 80a6076:	f000 84d4 	beq.w	80a6a22 <__ieee754_pow+0xa02>
 80a607a:	4a61      	ldr	r2, [pc, #388]	; (80a6200 <__ieee754_pow+0x1e0>)
 80a607c:	4590      	cmp	r8, r2
 80a607e:	d13e      	bne.n	80a60fe <__ieee754_pow+0xde>
 80a6080:	f1b9 0f00 	cmp.w	r9, #0
 80a6084:	db3b      	blt.n	80a60fe <__ieee754_pow+0xde>
 80a6086:	4650      	mov	r0, sl
 80a6088:	4659      	mov	r1, fp
 80a608a:	b015      	add	sp, #84	; 0x54
 80a608c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6090:	f000 bf80 	b.w	80a6f94 <__ieee754_sqrt>
 80a6094:	2a00      	cmp	r2, #0
 80a6096:	d0dd      	beq.n	80a6054 <__ieee754_pow+0x34>
 80a6098:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a609c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a60a0:	4323      	orrs	r3, r4
 80a60a2:	d10b      	bne.n	80a60bc <__ieee754_pow+0x9c>
 80a60a4:	2300      	movs	r3, #0
 80a60a6:	4c55      	ldr	r4, [pc, #340]	; (80a61fc <__ieee754_pow+0x1dc>)
 80a60a8:	e9cd 3400 	strd	r3, r4, [sp]
 80a60ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a60b0:	b015      	add	sp, #84	; 0x54
 80a60b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a60b6:	b908      	cbnz	r0, 80a60bc <__ieee754_pow+0x9c>
 80a60b8:	42a5      	cmp	r5, r4
 80a60ba:	ddc8      	ble.n	80a604e <__ieee754_pow+0x2e>
 80a60bc:	4851      	ldr	r0, [pc, #324]	; (80a6204 <__ieee754_pow+0x1e4>)
 80a60be:	b015      	add	sp, #84	; 0x54
 80a60c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a60c4:	f002 bea6 	b.w	80a8e14 <nan>
 80a60c8:	494f      	ldr	r1, [pc, #316]	; (80a6208 <__ieee754_pow+0x1e8>)
 80a60ca:	428d      	cmp	r5, r1
 80a60cc:	f300 8085 	bgt.w	80a61da <__ieee754_pow+0x1ba>
 80a60d0:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80a60d4:	428d      	cmp	r5, r1
 80a60d6:	dd0e      	ble.n	80a60f6 <__ieee754_pow+0xd6>
 80a60d8:	1529      	asrs	r1, r5, #20
 80a60da:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80a60de:	2914      	cmp	r1, #20
 80a60e0:	f340 84a9 	ble.w	80a6a36 <__ieee754_pow+0xa16>
 80a60e4:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80a60e8:	fa22 f001 	lsr.w	r0, r2, r1
 80a60ec:	fa00 f101 	lsl.w	r1, r0, r1
 80a60f0:	4291      	cmp	r1, r2
 80a60f2:	f000 84f6 	beq.w	80a6ae2 <__ieee754_pow+0xac2>
 80a60f6:	2100      	movs	r1, #0
 80a60f8:	9102      	str	r1, [sp, #8]
 80a60fa:	2a00      	cmp	r2, #0
 80a60fc:	d0b5      	beq.n	80a606a <__ieee754_pow+0x4a>
 80a60fe:	4650      	mov	r0, sl
 80a6100:	4659      	mov	r1, fp
 80a6102:	930c      	str	r3, [sp, #48]	; 0x30
 80a6104:	f002 fdfc 	bl	80a8d00 <fabs>
 80a6108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a610a:	e9cd 0100 	strd	r0, r1, [sp]
 80a610e:	bb43      	cbnz	r3, 80a6162 <__ieee754_pow+0x142>
 80a6110:	b124      	cbz	r4, 80a611c <__ieee754_pow+0xfc>
 80a6112:	4b3a      	ldr	r3, [pc, #232]	; (80a61fc <__ieee754_pow+0x1dc>)
 80a6114:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80a6118:	429a      	cmp	r2, r3
 80a611a:	d122      	bne.n	80a6162 <__ieee754_pow+0x142>
 80a611c:	f1b8 0f00 	cmp.w	r8, #0
 80a6120:	da07      	bge.n	80a6132 <__ieee754_pow+0x112>
 80a6122:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a6126:	2000      	movs	r0, #0
 80a6128:	4934      	ldr	r1, [pc, #208]	; (80a61fc <__ieee754_pow+0x1dc>)
 80a612a:	f003 fb05 	bl	80a9738 <__aeabi_ddiv>
 80a612e:	e9cd 0100 	strd	r0, r1, [sp]
 80a6132:	f1b9 0f00 	cmp.w	r9, #0
 80a6136:	dab9      	bge.n	80a60ac <__ieee754_pow+0x8c>
 80a6138:	9b02      	ldr	r3, [sp, #8]
 80a613a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a613e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a6142:	4323      	orrs	r3, r4
 80a6144:	f040 849c 	bne.w	80a6a80 <__ieee754_pow+0xa60>
 80a6148:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a614c:	4610      	mov	r0, r2
 80a614e:	4619      	mov	r1, r3
 80a6150:	f003 f810 	bl	80a9174 <__aeabi_dsub>
 80a6154:	4602      	mov	r2, r0
 80a6156:	460b      	mov	r3, r1
 80a6158:	f003 faee 	bl	80a9738 <__aeabi_ddiv>
 80a615c:	e9cd 0100 	strd	r0, r1, [sp]
 80a6160:	e7a4      	b.n	80a60ac <__ieee754_pow+0x8c>
 80a6162:	9a02      	ldr	r2, [sp, #8]
 80a6164:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80a6168:	3b01      	subs	r3, #1
 80a616a:	930c      	str	r3, [sp, #48]	; 0x30
 80a616c:	4313      	orrs	r3, r2
 80a616e:	d037      	beq.n	80a61e0 <__ieee754_pow+0x1c0>
 80a6170:	4b26      	ldr	r3, [pc, #152]	; (80a620c <__ieee754_pow+0x1ec>)
 80a6172:	429d      	cmp	r5, r3
 80a6174:	dd4e      	ble.n	80a6214 <__ieee754_pow+0x1f4>
 80a6176:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80a617a:	429d      	cmp	r5, r3
 80a617c:	4b24      	ldr	r3, [pc, #144]	; (80a6210 <__ieee754_pow+0x1f0>)
 80a617e:	f340 83df 	ble.w	80a6940 <__ieee754_pow+0x920>
 80a6182:	429c      	cmp	r4, r3
 80a6184:	f340 835e 	ble.w	80a6844 <__ieee754_pow+0x824>
 80a6188:	f1b8 0f00 	cmp.w	r8, #0
 80a618c:	f340 835e 	ble.w	80a684c <__ieee754_pow+0x82c>
 80a6190:	a317      	add	r3, pc, #92	; (adr r3, 80a61f0 <__ieee754_pow+0x1d0>)
 80a6192:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6196:	4610      	mov	r0, r2
 80a6198:	4619      	mov	r1, r3
 80a619a:	f003 f9a3 	bl	80a94e4 <__aeabi_dmul>
 80a619e:	e9cd 0100 	strd	r0, r1, [sp]
 80a61a2:	e783      	b.n	80a60ac <__ieee754_pow+0x8c>
 80a61a4:	f104 4240 	add.w	r2, r4, #3221225472	; 0xc0000000
 80a61a8:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80a61ac:	4313      	orrs	r3, r2
 80a61ae:	f43f af79 	beq.w	80a60a4 <__ieee754_pow+0x84>
 80a61b2:	4b17      	ldr	r3, [pc, #92]	; (80a6210 <__ieee754_pow+0x1f0>)
 80a61b4:	429c      	cmp	r4, r3
 80a61b6:	f340 8373 	ble.w	80a68a0 <__ieee754_pow+0x880>
 80a61ba:	f1b8 0f00 	cmp.w	r8, #0
 80a61be:	f2c0 8345 	blt.w	80a684c <__ieee754_pow+0x82c>
 80a61c2:	e9cd 6700 	strd	r6, r7, [sp]
 80a61c6:	e771      	b.n	80a60ac <__ieee754_pow+0x8c>
 80a61c8:	f1b8 0f00 	cmp.w	r8, #0
 80a61cc:	f2c0 841f 	blt.w	80a6a0e <__ieee754_pow+0x9ee>
 80a61d0:	4650      	mov	r0, sl
 80a61d2:	4659      	mov	r1, fp
 80a61d4:	e9cd 0100 	strd	r0, r1, [sp]
 80a61d8:	e768      	b.n	80a60ac <__ieee754_pow+0x8c>
 80a61da:	2102      	movs	r1, #2
 80a61dc:	9102      	str	r1, [sp, #8]
 80a61de:	e73e      	b.n	80a605e <__ieee754_pow+0x3e>
 80a61e0:	4652      	mov	r2, sl
 80a61e2:	4650      	mov	r0, sl
 80a61e4:	465b      	mov	r3, fp
 80a61e6:	4659      	mov	r1, fp
 80a61e8:	e7b2      	b.n	80a6150 <__ieee754_pow+0x130>
 80a61ea:	bf00      	nop
 80a61ec:	f3af 8000 	nop.w
 80a61f0:	8800759c 	.word	0x8800759c
 80a61f4:	7e37e43c 	.word	0x7e37e43c
 80a61f8:	7ff00000 	.word	0x7ff00000
 80a61fc:	3ff00000 	.word	0x3ff00000
 80a6200:	3fe00000 	.word	0x3fe00000
 80a6204:	080aa950 	.word	0x080aa950
 80a6208:	433fffff 	.word	0x433fffff
 80a620c:	41e00000 	.word	0x41e00000
 80a6210:	3fefffff 	.word	0x3fefffff
 80a6214:	4bd0      	ldr	r3, [pc, #832]	; (80a6558 <__ieee754_pow+0x538>)
 80a6216:	ea09 0303 	and.w	r3, r9, r3
 80a621a:	2b00      	cmp	r3, #0
 80a621c:	f040 8356 	bne.w	80a68cc <__ieee754_pow+0x8ac>
 80a6220:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a6224:	2200      	movs	r2, #0
 80a6226:	4bcd      	ldr	r3, [pc, #820]	; (80a655c <__ieee754_pow+0x53c>)
 80a6228:	f003 f95c 	bl	80a94e4 <__aeabi_dmul>
 80a622c:	f06f 0c34 	mvn.w	ip, #52	; 0x34
 80a6230:	460c      	mov	r4, r1
 80a6232:	e9cd 0100 	strd	r0, r1, [sp]
 80a6236:	1523      	asrs	r3, r4, #20
 80a6238:	4ac9      	ldr	r2, [pc, #804]	; (80a6560 <__ieee754_pow+0x540>)
 80a623a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80a623e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a6242:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80a6246:	eb03 010c 	add.w	r1, r3, ip
 80a624a:	4294      	cmp	r4, r2
 80a624c:	910d      	str	r1, [sp, #52]	; 0x34
 80a624e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80a6252:	f340 832e 	ble.w	80a68b2 <__ieee754_pow+0x892>
 80a6256:	4bc3      	ldr	r3, [pc, #780]	; (80a6564 <__ieee754_pow+0x544>)
 80a6258:	429c      	cmp	r4, r3
 80a625a:	f340 841e 	ble.w	80a6a9a <__ieee754_pow+0xa7a>
 80a625e:	2300      	movs	r3, #0
 80a6260:	2400      	movs	r4, #0
 80a6262:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a6266:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a626a:	2300      	movs	r3, #0
 80a626c:	f04f 0a00 	mov.w	sl, #0
 80a6270:	4cbd      	ldr	r4, [pc, #756]	; (80a6568 <__ieee754_pow+0x548>)
 80a6272:	3101      	adds	r1, #1
 80a6274:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a6278:	910d      	str	r1, [sp, #52]	; 0x34
 80a627a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80a627e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a6282:	4629      	mov	r1, r5
 80a6284:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a6288:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a628c:	f002 ff72 	bl	80a9174 <__aeabi_dsub>
 80a6290:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a6294:	4680      	mov	r8, r0
 80a6296:	4689      	mov	r9, r1
 80a6298:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a629c:	f002 ff6c 	bl	80a9178 <__adddf3>
 80a62a0:	4602      	mov	r2, r0
 80a62a2:	460b      	mov	r3, r1
 80a62a4:	2000      	movs	r0, #0
 80a62a6:	49b0      	ldr	r1, [pc, #704]	; (80a6568 <__ieee754_pow+0x548>)
 80a62a8:	f003 fa46 	bl	80a9738 <__aeabi_ddiv>
 80a62ac:	4603      	mov	r3, r0
 80a62ae:	460c      	mov	r4, r1
 80a62b0:	461a      	mov	r2, r3
 80a62b2:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 80a62b6:	4640      	mov	r0, r8
 80a62b8:	4623      	mov	r3, r4
 80a62ba:	4649      	mov	r1, r9
 80a62bc:	f003 f912 	bl	80a94e4 <__aeabi_dmul>
 80a62c0:	460c      	mov	r4, r1
 80a62c2:	4603      	mov	r3, r0
 80a62c4:	4601      	mov	r1, r0
 80a62c6:	4622      	mov	r2, r4
 80a62c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80a62cc:	2400      	movs	r4, #0
 80a62ce:	2000      	movs	r0, #0
 80a62d0:	106b      	asrs	r3, r5, #1
 80a62d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80a62d6:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80a62da:	e9cd 1200 	strd	r1, r2, [sp]
 80a62de:	eb03 010a 	add.w	r1, r3, sl
 80a62e2:	9400      	str	r4, [sp, #0]
 80a62e4:	e9dd ab00 	ldrd	sl, fp, [sp]
 80a62e8:	4604      	mov	r4, r0
 80a62ea:	460d      	mov	r5, r1
 80a62ec:	4602      	mov	r2, r0
 80a62ee:	460b      	mov	r3, r1
 80a62f0:	4650      	mov	r0, sl
 80a62f2:	4659      	mov	r1, fp
 80a62f4:	f003 f8f6 	bl	80a94e4 <__aeabi_dmul>
 80a62f8:	4602      	mov	r2, r0
 80a62fa:	460b      	mov	r3, r1
 80a62fc:	4640      	mov	r0, r8
 80a62fe:	4649      	mov	r1, r9
 80a6300:	f002 ff38 	bl	80a9174 <__aeabi_dsub>
 80a6304:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a6308:	4680      	mov	r8, r0
 80a630a:	4689      	mov	r9, r1
 80a630c:	4620      	mov	r0, r4
 80a630e:	4629      	mov	r1, r5
 80a6310:	f002 ff30 	bl	80a9174 <__aeabi_dsub>
 80a6314:	4602      	mov	r2, r0
 80a6316:	460b      	mov	r3, r1
 80a6318:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a631c:	f002 ff2a 	bl	80a9174 <__aeabi_dsub>
 80a6320:	4652      	mov	r2, sl
 80a6322:	465b      	mov	r3, fp
 80a6324:	f003 f8de 	bl	80a94e4 <__aeabi_dmul>
 80a6328:	4602      	mov	r2, r0
 80a632a:	460b      	mov	r3, r1
 80a632c:	4640      	mov	r0, r8
 80a632e:	4649      	mov	r1, r9
 80a6330:	f002 ff20 	bl	80a9174 <__aeabi_dsub>
 80a6334:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a6338:	f003 f8d4 	bl	80a94e4 <__aeabi_dmul>
 80a633c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80a6340:	4604      	mov	r4, r0
 80a6342:	460d      	mov	r5, r1
 80a6344:	4642      	mov	r2, r8
 80a6346:	464b      	mov	r3, r9
 80a6348:	4640      	mov	r0, r8
 80a634a:	4649      	mov	r1, r9
 80a634c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a6350:	f003 f8c8 	bl	80a94e4 <__aeabi_dmul>
 80a6354:	a36e      	add	r3, pc, #440	; (adr r3, 80a6510 <__ieee754_pow+0x4f0>)
 80a6356:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a635a:	4604      	mov	r4, r0
 80a635c:	460d      	mov	r5, r1
 80a635e:	f003 f8c1 	bl	80a94e4 <__aeabi_dmul>
 80a6362:	a36d      	add	r3, pc, #436	; (adr r3, 80a6518 <__ieee754_pow+0x4f8>)
 80a6364:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6368:	f002 ff06 	bl	80a9178 <__adddf3>
 80a636c:	4622      	mov	r2, r4
 80a636e:	462b      	mov	r3, r5
 80a6370:	f003 f8b8 	bl	80a94e4 <__aeabi_dmul>
 80a6374:	a36a      	add	r3, pc, #424	; (adr r3, 80a6520 <__ieee754_pow+0x500>)
 80a6376:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a637a:	f002 fefd 	bl	80a9178 <__adddf3>
 80a637e:	4622      	mov	r2, r4
 80a6380:	462b      	mov	r3, r5
 80a6382:	f003 f8af 	bl	80a94e4 <__aeabi_dmul>
 80a6386:	a368      	add	r3, pc, #416	; (adr r3, 80a6528 <__ieee754_pow+0x508>)
 80a6388:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a638c:	f002 fef4 	bl	80a9178 <__adddf3>
 80a6390:	4622      	mov	r2, r4
 80a6392:	462b      	mov	r3, r5
 80a6394:	f003 f8a6 	bl	80a94e4 <__aeabi_dmul>
 80a6398:	a365      	add	r3, pc, #404	; (adr r3, 80a6530 <__ieee754_pow+0x510>)
 80a639a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a639e:	f002 feeb 	bl	80a9178 <__adddf3>
 80a63a2:	4622      	mov	r2, r4
 80a63a4:	462b      	mov	r3, r5
 80a63a6:	f003 f89d 	bl	80a94e4 <__aeabi_dmul>
 80a63aa:	a363      	add	r3, pc, #396	; (adr r3, 80a6538 <__ieee754_pow+0x518>)
 80a63ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a63b0:	f002 fee2 	bl	80a9178 <__adddf3>
 80a63b4:	4622      	mov	r2, r4
 80a63b6:	462b      	mov	r3, r5
 80a63b8:	4604      	mov	r4, r0
 80a63ba:	460d      	mov	r5, r1
 80a63bc:	4610      	mov	r0, r2
 80a63be:	4619      	mov	r1, r3
 80a63c0:	f003 f890 	bl	80a94e4 <__aeabi_dmul>
 80a63c4:	4602      	mov	r2, r0
 80a63c6:	460b      	mov	r3, r1
 80a63c8:	4620      	mov	r0, r4
 80a63ca:	4629      	mov	r1, r5
 80a63cc:	f003 f88a 	bl	80a94e4 <__aeabi_dmul>
 80a63d0:	4604      	mov	r4, r0
 80a63d2:	460d      	mov	r5, r1
 80a63d4:	4652      	mov	r2, sl
 80a63d6:	465b      	mov	r3, fp
 80a63d8:	4640      	mov	r0, r8
 80a63da:	4649      	mov	r1, r9
 80a63dc:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80a63e0:	f002 feca 	bl	80a9178 <__adddf3>
 80a63e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a63e8:	f003 f87c 	bl	80a94e4 <__aeabi_dmul>
 80a63ec:	4622      	mov	r2, r4
 80a63ee:	462b      	mov	r3, r5
 80a63f0:	f002 fec2 	bl	80a9178 <__adddf3>
 80a63f4:	4652      	mov	r2, sl
 80a63f6:	4604      	mov	r4, r0
 80a63f8:	460d      	mov	r5, r1
 80a63fa:	465b      	mov	r3, fp
 80a63fc:	4650      	mov	r0, sl
 80a63fe:	4659      	mov	r1, fp
 80a6400:	f003 f870 	bl	80a94e4 <__aeabi_dmul>
 80a6404:	46a0      	mov	r8, r4
 80a6406:	46a9      	mov	r9, r5
 80a6408:	4604      	mov	r4, r0
 80a640a:	460d      	mov	r5, r1
 80a640c:	2200      	movs	r2, #0
 80a640e:	4b57      	ldr	r3, [pc, #348]	; (80a656c <__ieee754_pow+0x54c>)
 80a6410:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80a6414:	f002 feb0 	bl	80a9178 <__adddf3>
 80a6418:	4642      	mov	r2, r8
 80a641a:	464b      	mov	r3, r9
 80a641c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80a6420:	f002 feaa 	bl	80a9178 <__adddf3>
 80a6424:	460d      	mov	r5, r1
 80a6426:	9c00      	ldr	r4, [sp, #0]
 80a6428:	462b      	mov	r3, r5
 80a642a:	4622      	mov	r2, r4
 80a642c:	4650      	mov	r0, sl
 80a642e:	4659      	mov	r1, fp
 80a6430:	f003 f858 	bl	80a94e4 <__aeabi_dmul>
 80a6434:	4680      	mov	r8, r0
 80a6436:	4689      	mov	r9, r1
 80a6438:	2200      	movs	r2, #0
 80a643a:	4620      	mov	r0, r4
 80a643c:	4629      	mov	r1, r5
 80a643e:	4b4b      	ldr	r3, [pc, #300]	; (80a656c <__ieee754_pow+0x54c>)
 80a6440:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a6444:	f002 fe96 	bl	80a9174 <__aeabi_dsub>
 80a6448:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80a644c:	f002 fe92 	bl	80a9174 <__aeabi_dsub>
 80a6450:	4602      	mov	r2, r0
 80a6452:	460b      	mov	r3, r1
 80a6454:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80a6458:	f002 fe8c 	bl	80a9174 <__aeabi_dsub>
 80a645c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a6460:	f003 f840 	bl	80a94e4 <__aeabi_dmul>
 80a6464:	4622      	mov	r2, r4
 80a6466:	4680      	mov	r8, r0
 80a6468:	4689      	mov	r9, r1
 80a646a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a646e:	462b      	mov	r3, r5
 80a6470:	f003 f838 	bl	80a94e4 <__aeabi_dmul>
 80a6474:	4602      	mov	r2, r0
 80a6476:	460b      	mov	r3, r1
 80a6478:	4640      	mov	r0, r8
 80a647a:	4649      	mov	r1, r9
 80a647c:	f002 fe7c 	bl	80a9178 <__adddf3>
 80a6480:	4682      	mov	sl, r0
 80a6482:	468b      	mov	fp, r1
 80a6484:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a6488:	4652      	mov	r2, sl
 80a648a:	465b      	mov	r3, fp
 80a648c:	f002 fe74 	bl	80a9178 <__adddf3>
 80a6490:	a32b      	add	r3, pc, #172	; (adr r3, 80a6540 <__ieee754_pow+0x520>)
 80a6492:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6496:	9c00      	ldr	r4, [sp, #0]
 80a6498:	460d      	mov	r5, r1
 80a649a:	4620      	mov	r0, r4
 80a649c:	f003 f822 	bl	80a94e4 <__aeabi_dmul>
 80a64a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a64a4:	4680      	mov	r8, r0
 80a64a6:	4689      	mov	r9, r1
 80a64a8:	4620      	mov	r0, r4
 80a64aa:	4629      	mov	r1, r5
 80a64ac:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80a64b0:	f002 fe60 	bl	80a9174 <__aeabi_dsub>
 80a64b4:	4602      	mov	r2, r0
 80a64b6:	460b      	mov	r3, r1
 80a64b8:	4650      	mov	r0, sl
 80a64ba:	4659      	mov	r1, fp
 80a64bc:	f002 fe5a 	bl	80a9174 <__aeabi_dsub>
 80a64c0:	a321      	add	r3, pc, #132	; (adr r3, 80a6548 <__ieee754_pow+0x528>)
 80a64c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a64c6:	f003 f80d 	bl	80a94e4 <__aeabi_dmul>
 80a64ca:	a321      	add	r3, pc, #132	; (adr r3, 80a6550 <__ieee754_pow+0x530>)
 80a64cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a64d0:	4680      	mov	r8, r0
 80a64d2:	4689      	mov	r9, r1
 80a64d4:	4620      	mov	r0, r4
 80a64d6:	4629      	mov	r1, r5
 80a64d8:	f003 f804 	bl	80a94e4 <__aeabi_dmul>
 80a64dc:	4602      	mov	r2, r0
 80a64de:	460b      	mov	r3, r1
 80a64e0:	4640      	mov	r0, r8
 80a64e2:	4649      	mov	r1, r9
 80a64e4:	f002 fe48 	bl	80a9178 <__adddf3>
 80a64e8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80a64ec:	f002 fe44 	bl	80a9178 <__adddf3>
 80a64f0:	4682      	mov	sl, r0
 80a64f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a64f4:	468b      	mov	fp, r1
 80a64f6:	f002 ff8b 	bl	80a9410 <__aeabi_i2d>
 80a64fa:	4680      	mov	r8, r0
 80a64fc:	4689      	mov	r9, r1
 80a64fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a6502:	4652      	mov	r2, sl
 80a6504:	465b      	mov	r3, fp
 80a6506:	f002 fe37 	bl	80a9178 <__adddf3>
 80a650a:	e031      	b.n	80a6570 <__ieee754_pow+0x550>
 80a650c:	f3af 8000 	nop.w
 80a6510:	4a454eef 	.word	0x4a454eef
 80a6514:	3fca7e28 	.word	0x3fca7e28
 80a6518:	93c9db65 	.word	0x93c9db65
 80a651c:	3fcd864a 	.word	0x3fcd864a
 80a6520:	a91d4101 	.word	0xa91d4101
 80a6524:	3fd17460 	.word	0x3fd17460
 80a6528:	518f264d 	.word	0x518f264d
 80a652c:	3fd55555 	.word	0x3fd55555
 80a6530:	db6fabff 	.word	0xdb6fabff
 80a6534:	3fdb6db6 	.word	0x3fdb6db6
 80a6538:	33333303 	.word	0x33333303
 80a653c:	3fe33333 	.word	0x3fe33333
 80a6540:	e0000000 	.word	0xe0000000
 80a6544:	3feec709 	.word	0x3feec709
 80a6548:	dc3a03fd 	.word	0xdc3a03fd
 80a654c:	3feec709 	.word	0x3feec709
 80a6550:	145b01f5 	.word	0x145b01f5
 80a6554:	be3e2fe0 	.word	0xbe3e2fe0
 80a6558:	7ff00000 	.word	0x7ff00000
 80a655c:	43400000 	.word	0x43400000
 80a6560:	0003988e 	.word	0x0003988e
 80a6564:	000bb679 	.word	0x000bb679
 80a6568:	3ff00000 	.word	0x3ff00000
 80a656c:	40080000 	.word	0x40080000
 80a6570:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a6574:	f002 fe00 	bl	80a9178 <__adddf3>
 80a6578:	4642      	mov	r2, r8
 80a657a:	464b      	mov	r3, r9
 80a657c:	f002 fdfc 	bl	80a9178 <__adddf3>
 80a6580:	9c00      	ldr	r4, [sp, #0]
 80a6582:	4642      	mov	r2, r8
 80a6584:	464b      	mov	r3, r9
 80a6586:	4620      	mov	r0, r4
 80a6588:	460d      	mov	r5, r1
 80a658a:	f002 fdf3 	bl	80a9174 <__aeabi_dsub>
 80a658e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a6592:	f002 fdef 	bl	80a9174 <__aeabi_dsub>
 80a6596:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a659a:	f002 fdeb 	bl	80a9174 <__aeabi_dsub>
 80a659e:	4602      	mov	r2, r0
 80a65a0:	460b      	mov	r3, r1
 80a65a2:	4650      	mov	r0, sl
 80a65a4:	4659      	mov	r1, fp
 80a65a6:	f002 fde5 	bl	80a9174 <__aeabi_dsub>
 80a65aa:	4682      	mov	sl, r0
 80a65ac:	468b      	mov	fp, r1
 80a65ae:	9b02      	ldr	r3, [sp, #8]
 80a65b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a65b2:	3b01      	subs	r3, #1
 80a65b4:	4313      	orrs	r3, r2
 80a65b6:	f04f 0200 	mov.w	r2, #0
 80a65ba:	bf0c      	ite	eq
 80a65bc:	4bda      	ldreq	r3, [pc, #872]	; (80a6928 <__ieee754_pow+0x908>)
 80a65be:	4bdb      	ldrne	r3, [pc, #876]	; (80a692c <__ieee754_pow+0x90c>)
 80a65c0:	e9cd 6700 	strd	r6, r7, [sp]
 80a65c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a65c8:	2300      	movs	r3, #0
 80a65ca:	9300      	str	r3, [sp, #0]
 80a65cc:	e9dd 8900 	ldrd	r8, r9, [sp]
 80a65d0:	4630      	mov	r0, r6
 80a65d2:	4642      	mov	r2, r8
 80a65d4:	4639      	mov	r1, r7
 80a65d6:	464b      	mov	r3, r9
 80a65d8:	f002 fdcc 	bl	80a9174 <__aeabi_dsub>
 80a65dc:	4622      	mov	r2, r4
 80a65de:	462b      	mov	r3, r5
 80a65e0:	f002 ff80 	bl	80a94e4 <__aeabi_dmul>
 80a65e4:	4632      	mov	r2, r6
 80a65e6:	463b      	mov	r3, r7
 80a65e8:	4606      	mov	r6, r0
 80a65ea:	460f      	mov	r7, r1
 80a65ec:	4650      	mov	r0, sl
 80a65ee:	4659      	mov	r1, fp
 80a65f0:	f002 ff78 	bl	80a94e4 <__aeabi_dmul>
 80a65f4:	4602      	mov	r2, r0
 80a65f6:	460b      	mov	r3, r1
 80a65f8:	4630      	mov	r0, r6
 80a65fa:	4639      	mov	r1, r7
 80a65fc:	f002 fdbc 	bl	80a9178 <__adddf3>
 80a6600:	4642      	mov	r2, r8
 80a6602:	4682      	mov	sl, r0
 80a6604:	468b      	mov	fp, r1
 80a6606:	464b      	mov	r3, r9
 80a6608:	4620      	mov	r0, r4
 80a660a:	4629      	mov	r1, r5
 80a660c:	f002 ff6a 	bl	80a94e4 <__aeabi_dmul>
 80a6610:	4606      	mov	r6, r0
 80a6612:	460f      	mov	r7, r1
 80a6614:	4650      	mov	r0, sl
 80a6616:	463b      	mov	r3, r7
 80a6618:	4659      	mov	r1, fp
 80a661a:	4632      	mov	r2, r6
 80a661c:	f002 fdac 	bl	80a9178 <__adddf3>
 80a6620:	4bc3      	ldr	r3, [pc, #780]	; (80a6930 <__ieee754_pow+0x910>)
 80a6622:	4604      	mov	r4, r0
 80a6624:	4299      	cmp	r1, r3
 80a6626:	460d      	mov	r5, r1
 80a6628:	4688      	mov	r8, r1
 80a662a:	f340 8114 	ble.w	80a6856 <__ieee754_pow+0x836>
 80a662e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80a6632:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80a6636:	4303      	orrs	r3, r0
 80a6638:	f040 8212 	bne.w	80a6a60 <__ieee754_pow+0xa40>
 80a663c:	a3a6      	add	r3, pc, #664	; (adr r3, 80a68d8 <__ieee754_pow+0x8b8>)
 80a663e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6642:	4650      	mov	r0, sl
 80a6644:	4659      	mov	r1, fp
 80a6646:	f002 fd97 	bl	80a9178 <__adddf3>
 80a664a:	4632      	mov	r2, r6
 80a664c:	e9cd 0100 	strd	r0, r1, [sp]
 80a6650:	463b      	mov	r3, r7
 80a6652:	4620      	mov	r0, r4
 80a6654:	4629      	mov	r1, r5
 80a6656:	f002 fd8d 	bl	80a9174 <__aeabi_dsub>
 80a665a:	4602      	mov	r2, r0
 80a665c:	460b      	mov	r3, r1
 80a665e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a6662:	f003 f9cf 	bl	80a9a04 <__aeabi_dcmpgt>
 80a6666:	2800      	cmp	r0, #0
 80a6668:	f040 81fa 	bne.w	80a6a60 <__ieee754_pow+0xa40>
 80a666c:	f3c8 530a 	ubfx	r3, r8, #20, #11
 80a6670:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80a6674:	2000      	movs	r0, #0
 80a6676:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80a667a:	fa42 f303 	asr.w	r3, r2, r3
 80a667e:	4443      	add	r3, r8
 80a6680:	4cac      	ldr	r4, [pc, #688]	; (80a6934 <__ieee754_pow+0x914>)
 80a6682:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80a6686:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a668a:	fa44 fc02 	asr.w	ip, r4, r2
 80a668e:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80a6692:	ea23 010c 	bic.w	r1, r3, ip
 80a6696:	f1c2 0414 	rsb	r4, r2, #20
 80a669a:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 80a669e:	f1b8 0f00 	cmp.w	r8, #0
 80a66a2:	460b      	mov	r3, r1
 80a66a4:	fa45 f104 	asr.w	r1, r5, r4
 80a66a8:	910c      	str	r1, [sp, #48]	; 0x30
 80a66aa:	bfb8      	it	lt
 80a66ac:	4249      	neglt	r1, r1
 80a66ae:	4602      	mov	r2, r0
 80a66b0:	bfb8      	it	lt
 80a66b2:	910c      	strlt	r1, [sp, #48]	; 0x30
 80a66b4:	4630      	mov	r0, r6
 80a66b6:	4639      	mov	r1, r7
 80a66b8:	f002 fd5c 	bl	80a9174 <__aeabi_dsub>
 80a66bc:	4606      	mov	r6, r0
 80a66be:	460f      	mov	r7, r1
 80a66c0:	4650      	mov	r0, sl
 80a66c2:	463b      	mov	r3, r7
 80a66c4:	4659      	mov	r1, fp
 80a66c6:	4632      	mov	r2, r6
 80a66c8:	f002 fd56 	bl	80a9178 <__adddf3>
 80a66cc:	460d      	mov	r5, r1
 80a66ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a66d0:	051b      	lsls	r3, r3, #20
 80a66d2:	9300      	str	r3, [sp, #0]
 80a66d4:	2400      	movs	r4, #0
 80a66d6:	a382      	add	r3, pc, #520	; (adr r3, 80a68e0 <__ieee754_pow+0x8c0>)
 80a66d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a66dc:	4620      	mov	r0, r4
 80a66de:	4629      	mov	r1, r5
 80a66e0:	f002 ff00 	bl	80a94e4 <__aeabi_dmul>
 80a66e4:	4632      	mov	r2, r6
 80a66e6:	4680      	mov	r8, r0
 80a66e8:	4689      	mov	r9, r1
 80a66ea:	463b      	mov	r3, r7
 80a66ec:	4620      	mov	r0, r4
 80a66ee:	4629      	mov	r1, r5
 80a66f0:	f002 fd40 	bl	80a9174 <__aeabi_dsub>
 80a66f4:	4602      	mov	r2, r0
 80a66f6:	460b      	mov	r3, r1
 80a66f8:	4650      	mov	r0, sl
 80a66fa:	4659      	mov	r1, fp
 80a66fc:	f002 fd3a 	bl	80a9174 <__aeabi_dsub>
 80a6700:	a379      	add	r3, pc, #484	; (adr r3, 80a68e8 <__ieee754_pow+0x8c8>)
 80a6702:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6706:	f002 feed 	bl	80a94e4 <__aeabi_dmul>
 80a670a:	a379      	add	r3, pc, #484	; (adr r3, 80a68f0 <__ieee754_pow+0x8d0>)
 80a670c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6710:	4606      	mov	r6, r0
 80a6712:	460f      	mov	r7, r1
 80a6714:	4620      	mov	r0, r4
 80a6716:	4629      	mov	r1, r5
 80a6718:	f002 fee4 	bl	80a94e4 <__aeabi_dmul>
 80a671c:	4602      	mov	r2, r0
 80a671e:	460b      	mov	r3, r1
 80a6720:	4630      	mov	r0, r6
 80a6722:	4639      	mov	r1, r7
 80a6724:	f002 fd28 	bl	80a9178 <__adddf3>
 80a6728:	4606      	mov	r6, r0
 80a672a:	460f      	mov	r7, r1
 80a672c:	4632      	mov	r2, r6
 80a672e:	463b      	mov	r3, r7
 80a6730:	4640      	mov	r0, r8
 80a6732:	4649      	mov	r1, r9
 80a6734:	f002 fd20 	bl	80a9178 <__adddf3>
 80a6738:	4642      	mov	r2, r8
 80a673a:	464b      	mov	r3, r9
 80a673c:	460d      	mov	r5, r1
 80a673e:	4604      	mov	r4, r0
 80a6740:	f002 fd18 	bl	80a9174 <__aeabi_dsub>
 80a6744:	4602      	mov	r2, r0
 80a6746:	460b      	mov	r3, r1
 80a6748:	4630      	mov	r0, r6
 80a674a:	4639      	mov	r1, r7
 80a674c:	f002 fd12 	bl	80a9174 <__aeabi_dsub>
 80a6750:	462b      	mov	r3, r5
 80a6752:	4682      	mov	sl, r0
 80a6754:	468b      	mov	fp, r1
 80a6756:	4622      	mov	r2, r4
 80a6758:	4629      	mov	r1, r5
 80a675a:	4620      	mov	r0, r4
 80a675c:	f002 fec2 	bl	80a94e4 <__aeabi_dmul>
 80a6760:	a365      	add	r3, pc, #404	; (adr r3, 80a68f8 <__ieee754_pow+0x8d8>)
 80a6762:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6766:	4606      	mov	r6, r0
 80a6768:	460f      	mov	r7, r1
 80a676a:	f002 febb 	bl	80a94e4 <__aeabi_dmul>
 80a676e:	a364      	add	r3, pc, #400	; (adr r3, 80a6900 <__ieee754_pow+0x8e0>)
 80a6770:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6774:	f002 fcfe 	bl	80a9174 <__aeabi_dsub>
 80a6778:	4632      	mov	r2, r6
 80a677a:	463b      	mov	r3, r7
 80a677c:	f002 feb2 	bl	80a94e4 <__aeabi_dmul>
 80a6780:	a361      	add	r3, pc, #388	; (adr r3, 80a6908 <__ieee754_pow+0x8e8>)
 80a6782:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6786:	f002 fcf7 	bl	80a9178 <__adddf3>
 80a678a:	4632      	mov	r2, r6
 80a678c:	463b      	mov	r3, r7
 80a678e:	f002 fea9 	bl	80a94e4 <__aeabi_dmul>
 80a6792:	a35f      	add	r3, pc, #380	; (adr r3, 80a6910 <__ieee754_pow+0x8f0>)
 80a6794:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6798:	f002 fcec 	bl	80a9174 <__aeabi_dsub>
 80a679c:	4632      	mov	r2, r6
 80a679e:	463b      	mov	r3, r7
 80a67a0:	f002 fea0 	bl	80a94e4 <__aeabi_dmul>
 80a67a4:	a35c      	add	r3, pc, #368	; (adr r3, 80a6918 <__ieee754_pow+0x8f8>)
 80a67a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a67aa:	f002 fce5 	bl	80a9178 <__adddf3>
 80a67ae:	4632      	mov	r2, r6
 80a67b0:	463b      	mov	r3, r7
 80a67b2:	f002 fe97 	bl	80a94e4 <__aeabi_dmul>
 80a67b6:	4602      	mov	r2, r0
 80a67b8:	460b      	mov	r3, r1
 80a67ba:	4620      	mov	r0, r4
 80a67bc:	4629      	mov	r1, r5
 80a67be:	f002 fcd9 	bl	80a9174 <__aeabi_dsub>
 80a67c2:	4606      	mov	r6, r0
 80a67c4:	460f      	mov	r7, r1
 80a67c6:	4632      	mov	r2, r6
 80a67c8:	463b      	mov	r3, r7
 80a67ca:	4629      	mov	r1, r5
 80a67cc:	4620      	mov	r0, r4
 80a67ce:	f002 fe89 	bl	80a94e4 <__aeabi_dmul>
 80a67d2:	2200      	movs	r2, #0
 80a67d4:	4680      	mov	r8, r0
 80a67d6:	4689      	mov	r9, r1
 80a67d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a67dc:	4630      	mov	r0, r6
 80a67de:	4639      	mov	r1, r7
 80a67e0:	f002 fcc8 	bl	80a9174 <__aeabi_dsub>
 80a67e4:	4602      	mov	r2, r0
 80a67e6:	460b      	mov	r3, r1
 80a67e8:	4640      	mov	r0, r8
 80a67ea:	4649      	mov	r1, r9
 80a67ec:	f002 ffa4 	bl	80a9738 <__aeabi_ddiv>
 80a67f0:	4652      	mov	r2, sl
 80a67f2:	4606      	mov	r6, r0
 80a67f4:	460f      	mov	r7, r1
 80a67f6:	465b      	mov	r3, fp
 80a67f8:	4629      	mov	r1, r5
 80a67fa:	4620      	mov	r0, r4
 80a67fc:	f002 fe72 	bl	80a94e4 <__aeabi_dmul>
 80a6800:	4652      	mov	r2, sl
 80a6802:	465b      	mov	r3, fp
 80a6804:	f002 fcb8 	bl	80a9178 <__adddf3>
 80a6808:	4602      	mov	r2, r0
 80a680a:	460b      	mov	r3, r1
 80a680c:	4630      	mov	r0, r6
 80a680e:	4639      	mov	r1, r7
 80a6810:	f002 fcb0 	bl	80a9174 <__aeabi_dsub>
 80a6814:	462b      	mov	r3, r5
 80a6816:	4622      	mov	r2, r4
 80a6818:	f002 fcac 	bl	80a9174 <__aeabi_dsub>
 80a681c:	4602      	mov	r2, r0
 80a681e:	460b      	mov	r3, r1
 80a6820:	2000      	movs	r0, #0
 80a6822:	4942      	ldr	r1, [pc, #264]	; (80a692c <__ieee754_pow+0x90c>)
 80a6824:	f002 fca6 	bl	80a9174 <__aeabi_dsub>
 80a6828:	9d00      	ldr	r5, [sp, #0]
 80a682a:	440d      	add	r5, r1
 80a682c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80a6830:	f2c0 8153 	blt.w	80a6ada <__ieee754_pow+0xaba>
 80a6834:	4629      	mov	r1, r5
 80a6836:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a683a:	f002 fe53 	bl	80a94e4 <__aeabi_dmul>
 80a683e:	e9cd 0100 	strd	r0, r1, [sp]
 80a6842:	e433      	b.n	80a60ac <__ieee754_pow+0x8c>
 80a6844:	f1b8 0f00 	cmp.w	r8, #0
 80a6848:	f6ff aca2 	blt.w	80a6190 <__ieee754_pow+0x170>
 80a684c:	2300      	movs	r3, #0
 80a684e:	2400      	movs	r4, #0
 80a6850:	e9cd 3400 	strd	r3, r4, [sp]
 80a6854:	e42a      	b.n	80a60ac <__ieee754_pow+0x8c>
 80a6856:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80a693c <__ieee754_pow+0x91c>
 80a685a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a685e:	4563      	cmp	r3, ip
 80a6860:	f340 80f6 	ble.w	80a6a50 <__ieee754_pow+0xa30>
 80a6864:	4b34      	ldr	r3, [pc, #208]	; (80a6938 <__ieee754_pow+0x918>)
 80a6866:	440b      	add	r3, r1
 80a6868:	4303      	orrs	r3, r0
 80a686a:	d10a      	bne.n	80a6882 <__ieee754_pow+0x862>
 80a686c:	4632      	mov	r2, r6
 80a686e:	463b      	mov	r3, r7
 80a6870:	f002 fc80 	bl	80a9174 <__aeabi_dsub>
 80a6874:	4652      	mov	r2, sl
 80a6876:	465b      	mov	r3, fp
 80a6878:	f003 f8ba 	bl	80a99f0 <__aeabi_dcmpge>
 80a687c:	2800      	cmp	r0, #0
 80a687e:	f43f aef5 	beq.w	80a666c <__ieee754_pow+0x64c>
 80a6882:	a327      	add	r3, pc, #156	; (adr r3, 80a6920 <__ieee754_pow+0x900>)
 80a6884:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a688c:	f002 fe2a 	bl	80a94e4 <__aeabi_dmul>
 80a6890:	a323      	add	r3, pc, #140	; (adr r3, 80a6920 <__ieee754_pow+0x900>)
 80a6892:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6896:	f002 fe25 	bl	80a94e4 <__aeabi_dmul>
 80a689a:	e9cd 0100 	strd	r0, r1, [sp]
 80a689e:	e405      	b.n	80a60ac <__ieee754_pow+0x8c>
 80a68a0:	f1b8 0f00 	cmp.w	r8, #0
 80a68a4:	dad2      	bge.n	80a684c <__ieee754_pow+0x82c>
 80a68a6:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80a68aa:	9600      	str	r6, [sp, #0]
 80a68ac:	9301      	str	r3, [sp, #4]
 80a68ae:	f7ff bbfd 	b.w	80a60ac <__ieee754_pow+0x8c>
 80a68b2:	2300      	movs	r3, #0
 80a68b4:	2400      	movs	r4, #0
 80a68b6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a68ba:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a68be:	2300      	movs	r3, #0
 80a68c0:	4c1a      	ldr	r4, [pc, #104]	; (80a692c <__ieee754_pow+0x90c>)
 80a68c2:	f04f 0a00 	mov.w	sl, #0
 80a68c6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a68ca:	e4d8      	b.n	80a627e <__ieee754_pow+0x25e>
 80a68cc:	f04f 0c00 	mov.w	ip, #0
 80a68d0:	e4b1      	b.n	80a6236 <__ieee754_pow+0x216>
 80a68d2:	bf00      	nop
 80a68d4:	f3af 8000 	nop.w
 80a68d8:	652b82fe 	.word	0x652b82fe
 80a68dc:	3c971547 	.word	0x3c971547
 80a68e0:	00000000 	.word	0x00000000
 80a68e4:	3fe62e43 	.word	0x3fe62e43
 80a68e8:	fefa39ef 	.word	0xfefa39ef
 80a68ec:	3fe62e42 	.word	0x3fe62e42
 80a68f0:	0ca86c39 	.word	0x0ca86c39
 80a68f4:	be205c61 	.word	0xbe205c61
 80a68f8:	72bea4d0 	.word	0x72bea4d0
 80a68fc:	3e663769 	.word	0x3e663769
 80a6900:	c5d26bf1 	.word	0xc5d26bf1
 80a6904:	3ebbbd41 	.word	0x3ebbbd41
 80a6908:	af25de2c 	.word	0xaf25de2c
 80a690c:	3f11566a 	.word	0x3f11566a
 80a6910:	16bebd93 	.word	0x16bebd93
 80a6914:	3f66c16c 	.word	0x3f66c16c
 80a6918:	5555553e 	.word	0x5555553e
 80a691c:	3fc55555 	.word	0x3fc55555
 80a6920:	c2f8f359 	.word	0xc2f8f359
 80a6924:	01a56e1f 	.word	0x01a56e1f
 80a6928:	bff00000 	.word	0xbff00000
 80a692c:	3ff00000 	.word	0x3ff00000
 80a6930:	408fffff 	.word	0x408fffff
 80a6934:	000fffff 	.word	0x000fffff
 80a6938:	3f6f3400 	.word	0x3f6f3400
 80a693c:	4090cbff 	.word	0x4090cbff
 80a6940:	429c      	cmp	r4, r3
 80a6942:	f6ff af7f 	blt.w	80a6844 <__ieee754_pow+0x824>
 80a6946:	4b7e      	ldr	r3, [pc, #504]	; (80a6b40 <__ieee754_pow+0xb20>)
 80a6948:	429c      	cmp	r4, r3
 80a694a:	f73f ac1d 	bgt.w	80a6188 <__ieee754_pow+0x168>
 80a694e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a6952:	2200      	movs	r2, #0
 80a6954:	4b7a      	ldr	r3, [pc, #488]	; (80a6b40 <__ieee754_pow+0xb20>)
 80a6956:	f002 fc0d 	bl	80a9174 <__aeabi_dsub>
 80a695a:	a36b      	add	r3, pc, #428	; (adr r3, 80a6b08 <__ieee754_pow+0xae8>)
 80a695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6960:	4604      	mov	r4, r0
 80a6962:	460d      	mov	r5, r1
 80a6964:	f002 fdbe 	bl	80a94e4 <__aeabi_dmul>
 80a6968:	a369      	add	r3, pc, #420	; (adr r3, 80a6b10 <__ieee754_pow+0xaf0>)
 80a696a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a696e:	4682      	mov	sl, r0
 80a6970:	468b      	mov	fp, r1
 80a6972:	4620      	mov	r0, r4
 80a6974:	4629      	mov	r1, r5
 80a6976:	f002 fdb5 	bl	80a94e4 <__aeabi_dmul>
 80a697a:	2200      	movs	r2, #0
 80a697c:	4680      	mov	r8, r0
 80a697e:	4689      	mov	r9, r1
 80a6980:	4620      	mov	r0, r4
 80a6982:	4629      	mov	r1, r5
 80a6984:	4b6f      	ldr	r3, [pc, #444]	; (80a6b44 <__ieee754_pow+0xb24>)
 80a6986:	f002 fdad 	bl	80a94e4 <__aeabi_dmul>
 80a698a:	4602      	mov	r2, r0
 80a698c:	460b      	mov	r3, r1
 80a698e:	a162      	add	r1, pc, #392	; (adr r1, 80a6b18 <__ieee754_pow+0xaf8>)
 80a6990:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a6994:	f002 fbee 	bl	80a9174 <__aeabi_dsub>
 80a6998:	4622      	mov	r2, r4
 80a699a:	462b      	mov	r3, r5
 80a699c:	f002 fda2 	bl	80a94e4 <__aeabi_dmul>
 80a69a0:	4602      	mov	r2, r0
 80a69a2:	460b      	mov	r3, r1
 80a69a4:	2000      	movs	r0, #0
 80a69a6:	4968      	ldr	r1, [pc, #416]	; (80a6b48 <__ieee754_pow+0xb28>)
 80a69a8:	f002 fbe4 	bl	80a9174 <__aeabi_dsub>
 80a69ac:	4622      	mov	r2, r4
 80a69ae:	462b      	mov	r3, r5
 80a69b0:	4604      	mov	r4, r0
 80a69b2:	460d      	mov	r5, r1
 80a69b4:	4610      	mov	r0, r2
 80a69b6:	4619      	mov	r1, r3
 80a69b8:	f002 fd94 	bl	80a94e4 <__aeabi_dmul>
 80a69bc:	4602      	mov	r2, r0
 80a69be:	460b      	mov	r3, r1
 80a69c0:	4620      	mov	r0, r4
 80a69c2:	4629      	mov	r1, r5
 80a69c4:	f002 fd8e 	bl	80a94e4 <__aeabi_dmul>
 80a69c8:	a355      	add	r3, pc, #340	; (adr r3, 80a6b20 <__ieee754_pow+0xb00>)
 80a69ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a69ce:	f002 fd89 	bl	80a94e4 <__aeabi_dmul>
 80a69d2:	4602      	mov	r2, r0
 80a69d4:	460b      	mov	r3, r1
 80a69d6:	4640      	mov	r0, r8
 80a69d8:	4649      	mov	r1, r9
 80a69da:	f002 fbcb 	bl	80a9174 <__aeabi_dsub>
 80a69de:	4680      	mov	r8, r0
 80a69e0:	4689      	mov	r9, r1
 80a69e2:	4650      	mov	r0, sl
 80a69e4:	4659      	mov	r1, fp
 80a69e6:	4642      	mov	r2, r8
 80a69e8:	464b      	mov	r3, r9
 80a69ea:	2400      	movs	r4, #0
 80a69ec:	f002 fbc4 	bl	80a9178 <__adddf3>
 80a69f0:	4652      	mov	r2, sl
 80a69f2:	465b      	mov	r3, fp
 80a69f4:	4620      	mov	r0, r4
 80a69f6:	460d      	mov	r5, r1
 80a69f8:	f002 fbbc 	bl	80a9174 <__aeabi_dsub>
 80a69fc:	4602      	mov	r2, r0
 80a69fe:	460b      	mov	r3, r1
 80a6a00:	4640      	mov	r0, r8
 80a6a02:	4649      	mov	r1, r9
 80a6a04:	f002 fbb6 	bl	80a9174 <__aeabi_dsub>
 80a6a08:	4682      	mov	sl, r0
 80a6a0a:	468b      	mov	fp, r1
 80a6a0c:	e5cf      	b.n	80a65ae <__ieee754_pow+0x58e>
 80a6a0e:	4652      	mov	r2, sl
 80a6a10:	465b      	mov	r3, fp
 80a6a12:	2000      	movs	r0, #0
 80a6a14:	494a      	ldr	r1, [pc, #296]	; (80a6b40 <__ieee754_pow+0xb20>)
 80a6a16:	f002 fe8f 	bl	80a9738 <__aeabi_ddiv>
 80a6a1a:	e9cd 0100 	strd	r0, r1, [sp]
 80a6a1e:	f7ff bb45 	b.w	80a60ac <__ieee754_pow+0x8c>
 80a6a22:	4652      	mov	r2, sl
 80a6a24:	4650      	mov	r0, sl
 80a6a26:	465b      	mov	r3, fp
 80a6a28:	4659      	mov	r1, fp
 80a6a2a:	f002 fd5b 	bl	80a94e4 <__aeabi_dmul>
 80a6a2e:	e9cd 0100 	strd	r0, r1, [sp]
 80a6a32:	f7ff bb3b 	b.w	80a60ac <__ieee754_pow+0x8c>
 80a6a36:	2a00      	cmp	r2, #0
 80a6a38:	d141      	bne.n	80a6abe <__ieee754_pow+0xa9e>
 80a6a3a:	f1c1 0114 	rsb	r1, r1, #20
 80a6a3e:	fa45 f001 	asr.w	r0, r5, r1
 80a6a42:	fa00 f101 	lsl.w	r1, r0, r1
 80a6a46:	42a9      	cmp	r1, r5
 80a6a48:	d055      	beq.n	80a6af6 <__ieee754_pow+0xad6>
 80a6a4a:	9202      	str	r2, [sp, #8]
 80a6a4c:	f7ff bb0d 	b.w	80a606a <__ieee754_pow+0x4a>
 80a6a50:	4a3d      	ldr	r2, [pc, #244]	; (80a6b48 <__ieee754_pow+0xb28>)
 80a6a52:	4293      	cmp	r3, r2
 80a6a54:	dc56      	bgt.n	80a6b04 <__ieee754_pow+0xae4>
 80a6a56:	e9dd 1200 	ldrd	r1, r2, [sp]
 80a6a5a:	9100      	str	r1, [sp, #0]
 80a6a5c:	910c      	str	r1, [sp, #48]	; 0x30
 80a6a5e:	e639      	b.n	80a66d4 <__ieee754_pow+0x6b4>
 80a6a60:	a331      	add	r3, pc, #196	; (adr r3, 80a6b28 <__ieee754_pow+0xb08>)
 80a6a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a6a6a:	f002 fd3b 	bl	80a94e4 <__aeabi_dmul>
 80a6a6e:	a32e      	add	r3, pc, #184	; (adr r3, 80a6b28 <__ieee754_pow+0xb08>)
 80a6a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6a74:	f002 fd36 	bl	80a94e4 <__aeabi_dmul>
 80a6a78:	e9cd 0100 	strd	r0, r1, [sp]
 80a6a7c:	f7ff bb16 	b.w	80a60ac <__ieee754_pow+0x8c>
 80a6a80:	9b02      	ldr	r3, [sp, #8]
 80a6a82:	2b01      	cmp	r3, #1
 80a6a84:	f47f ab12 	bne.w	80a60ac <__ieee754_pow+0x8c>
 80a6a88:	e9dd 4500 	ldrd	r4, r5, [sp]
 80a6a8c:	4622      	mov	r2, r4
 80a6a8e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a6a92:	e9cd 2300 	strd	r2, r3, [sp]
 80a6a96:	f7ff bb09 	b.w	80a60ac <__ieee754_pow+0x8c>
 80a6a9a:	a425      	add	r4, pc, #148	; (adr r4, 80a6b30 <__ieee754_pow+0xb10>)
 80a6a9c:	e9d4 3400 	ldrd	r3, r4, [r4]
 80a6aa0:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a6aa4:	a424      	add	r4, pc, #144	; (adr r4, 80a6b38 <__ieee754_pow+0xb18>)
 80a6aa6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80a6aaa:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a6aae:	2300      	movs	r3, #0
 80a6ab0:	4c26      	ldr	r4, [pc, #152]	; (80a6b4c <__ieee754_pow+0xb2c>)
 80a6ab2:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
 80a6ab6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a6aba:	f7ff bbe0 	b.w	80a627e <__ieee754_pow+0x25e>
 80a6abe:	4650      	mov	r0, sl
 80a6ac0:	4659      	mov	r1, fp
 80a6ac2:	9302      	str	r3, [sp, #8]
 80a6ac4:	f002 f91c 	bl	80a8d00 <fabs>
 80a6ac8:	9b02      	ldr	r3, [sp, #8]
 80a6aca:	e9cd 0100 	strd	r0, r1, [sp]
 80a6ace:	2b00      	cmp	r3, #0
 80a6ad0:	f47f ab86 	bne.w	80a61e0 <__ieee754_pow+0x1c0>
 80a6ad4:	9302      	str	r3, [sp, #8]
 80a6ad6:	f7ff bb1b 	b.w	80a6110 <__ieee754_pow+0xf0>
 80a6ada:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a6adc:	f002 fa30 	bl	80a8f40 <scalbn>
 80a6ae0:	e6a9      	b.n	80a6836 <__ieee754_pow+0x816>
 80a6ae2:	f000 0001 	and.w	r0, r0, #1
 80a6ae6:	f1c0 0102 	rsb	r1, r0, #2
 80a6aea:	9102      	str	r1, [sp, #8]
 80a6aec:	2a00      	cmp	r2, #0
 80a6aee:	f43f aabc 	beq.w	80a606a <__ieee754_pow+0x4a>
 80a6af2:	f7ff bb04 	b.w	80a60fe <__ieee754_pow+0xde>
 80a6af6:	f000 0001 	and.w	r0, r0, #1
 80a6afa:	f1c0 0202 	rsb	r2, r0, #2
 80a6afe:	9202      	str	r2, [sp, #8]
 80a6b00:	f7ff bab3 	b.w	80a606a <__ieee754_pow+0x4a>
 80a6b04:	151b      	asrs	r3, r3, #20
 80a6b06:	e5b3      	b.n	80a6670 <__ieee754_pow+0x650>
 80a6b08:	60000000 	.word	0x60000000
 80a6b0c:	3ff71547 	.word	0x3ff71547
 80a6b10:	f85ddf44 	.word	0xf85ddf44
 80a6b14:	3e54ae0b 	.word	0x3e54ae0b
 80a6b18:	55555555 	.word	0x55555555
 80a6b1c:	3fd55555 	.word	0x3fd55555
 80a6b20:	652b82fe 	.word	0x652b82fe
 80a6b24:	3ff71547 	.word	0x3ff71547
 80a6b28:	8800759c 	.word	0x8800759c
 80a6b2c:	7e37e43c 	.word	0x7e37e43c
 80a6b30:	40000000 	.word	0x40000000
 80a6b34:	3fe2b803 	.word	0x3fe2b803
 80a6b38:	43cfd006 	.word	0x43cfd006
 80a6b3c:	3e4cfdeb 	.word	0x3e4cfdeb
 80a6b40:	3ff00000 	.word	0x3ff00000
 80a6b44:	3fd00000 	.word	0x3fd00000
 80a6b48:	3fe00000 	.word	0x3fe00000
 80a6b4c:	3ff80000 	.word	0x3ff80000

080a6b50 <__ieee754_rem_pio2>:
 80a6b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6b54:	4f8c      	ldr	r7, [pc, #560]	; (80a6d88 <__ieee754_rem_pio2+0x238>)
 80a6b56:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 80a6b5a:	42bd      	cmp	r5, r7
 80a6b5c:	4614      	mov	r4, r2
 80a6b5e:	4606      	mov	r6, r0
 80a6b60:	b08d      	sub	sp, #52	; 0x34
 80a6b62:	f340 8086 	ble.w	80a6c72 <__ieee754_rem_pio2+0x122>
 80a6b66:	4a89      	ldr	r2, [pc, #548]	; (80a6d8c <__ieee754_rem_pio2+0x23c>)
 80a6b68:	468b      	mov	fp, r1
 80a6b6a:	4295      	cmp	r5, r2
 80a6b6c:	dc27      	bgt.n	80a6bbe <__ieee754_rem_pio2+0x6e>
 80a6b6e:	a37c      	add	r3, pc, #496	; (adr r3, 80a6d60 <__ieee754_rem_pio2+0x210>)
 80a6b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6b74:	2900      	cmp	r1, #0
 80a6b76:	f340 81b8 	ble.w	80a6eea <__ieee754_rem_pio2+0x39a>
 80a6b7a:	f002 fafb 	bl	80a9174 <__aeabi_dsub>
 80a6b7e:	4b84      	ldr	r3, [pc, #528]	; (80a6d90 <__ieee754_rem_pio2+0x240>)
 80a6b80:	4606      	mov	r6, r0
 80a6b82:	429d      	cmp	r5, r3
 80a6b84:	460f      	mov	r7, r1
 80a6b86:	f000 808b 	beq.w	80a6ca0 <__ieee754_rem_pio2+0x150>
 80a6b8a:	a377      	add	r3, pc, #476	; (adr r3, 80a6d68 <__ieee754_rem_pio2+0x218>)
 80a6b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6b90:	f002 faf0 	bl	80a9174 <__aeabi_dsub>
 80a6b94:	4602      	mov	r2, r0
 80a6b96:	460b      	mov	r3, r1
 80a6b98:	4630      	mov	r0, r6
 80a6b9a:	e9c4 2300 	strd	r2, r3, [r4]
 80a6b9e:	4639      	mov	r1, r7
 80a6ba0:	f002 fae8 	bl	80a9174 <__aeabi_dsub>
 80a6ba4:	a370      	add	r3, pc, #448	; (adr r3, 80a6d68 <__ieee754_rem_pio2+0x218>)
 80a6ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6baa:	f002 fae3 	bl	80a9174 <__aeabi_dsub>
 80a6bae:	f04f 0a01 	mov.w	sl, #1
 80a6bb2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a6bb6:	4650      	mov	r0, sl
 80a6bb8:	b00d      	add	sp, #52	; 0x34
 80a6bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6bbe:	4a75      	ldr	r2, [pc, #468]	; (80a6d94 <__ieee754_rem_pio2+0x244>)
 80a6bc0:	4295      	cmp	r5, r2
 80a6bc2:	f340 808e 	ble.w	80a6ce2 <__ieee754_rem_pio2+0x192>
 80a6bc6:	4a74      	ldr	r2, [pc, #464]	; (80a6d98 <__ieee754_rem_pio2+0x248>)
 80a6bc8:	4295      	cmp	r5, r2
 80a6bca:	dc5e      	bgt.n	80a6c8a <__ieee754_rem_pio2+0x13a>
 80a6bcc:	ea4f 5a25 	mov.w	sl, r5, asr #20
 80a6bd0:	f2aa 4a16 	subw	sl, sl, #1046	; 0x416
 80a6bd4:	eba5 510a 	sub.w	r1, r5, sl, lsl #20
 80a6bd8:	460f      	mov	r7, r1
 80a6bda:	f002 ff33 	bl	80a9a44 <__aeabi_d2iz>
 80a6bde:	f002 fc17 	bl	80a9410 <__aeabi_i2d>
 80a6be2:	4680      	mov	r8, r0
 80a6be4:	4689      	mov	r9, r1
 80a6be6:	4630      	mov	r0, r6
 80a6be8:	4639      	mov	r1, r7
 80a6bea:	4642      	mov	r2, r8
 80a6bec:	464b      	mov	r3, r9
 80a6bee:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80a6bf2:	f002 fabf 	bl	80a9174 <__aeabi_dsub>
 80a6bf6:	2200      	movs	r2, #0
 80a6bf8:	4b68      	ldr	r3, [pc, #416]	; (80a6d9c <__ieee754_rem_pio2+0x24c>)
 80a6bfa:	f002 fc73 	bl	80a94e4 <__aeabi_dmul>
 80a6bfe:	460f      	mov	r7, r1
 80a6c00:	4606      	mov	r6, r0
 80a6c02:	f002 ff1f 	bl	80a9a44 <__aeabi_d2iz>
 80a6c06:	4605      	mov	r5, r0
 80a6c08:	f002 fc02 	bl	80a9410 <__aeabi_i2d>
 80a6c0c:	4602      	mov	r2, r0
 80a6c0e:	460b      	mov	r3, r1
 80a6c10:	4630      	mov	r0, r6
 80a6c12:	4639      	mov	r1, r7
 80a6c14:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a6c18:	f002 faac 	bl	80a9174 <__aeabi_dsub>
 80a6c1c:	2200      	movs	r2, #0
 80a6c1e:	4b5f      	ldr	r3, [pc, #380]	; (80a6d9c <__ieee754_rem_pio2+0x24c>)
 80a6c20:	f002 fc60 	bl	80a94e4 <__aeabi_dmul>
 80a6c24:	4602      	mov	r2, r0
 80a6c26:	460b      	mov	r3, r1
 80a6c28:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a6c2c:	2200      	movs	r2, #0
 80a6c2e:	2300      	movs	r3, #0
 80a6c30:	f002 fec0 	bl	80a99b4 <__aeabi_dcmpeq>
 80a6c34:	2800      	cmp	r0, #0
 80a6c36:	f000 8156 	beq.w	80a6ee6 <__ieee754_rem_pio2+0x396>
 80a6c3a:	2d00      	cmp	r5, #0
 80a6c3c:	bf0c      	ite	eq
 80a6c3e:	2301      	moveq	r3, #1
 80a6c40:	2302      	movne	r3, #2
 80a6c42:	2002      	movs	r0, #2
 80a6c44:	4956      	ldr	r1, [pc, #344]	; (80a6da0 <__ieee754_rem_pio2+0x250>)
 80a6c46:	4652      	mov	r2, sl
 80a6c48:	e9cd 0100 	strd	r0, r1, [sp]
 80a6c4c:	4621      	mov	r1, r4
 80a6c4e:	a806      	add	r0, sp, #24
 80a6c50:	f000 fec2 	bl	80a79d8 <__kernel_rem_pio2>
 80a6c54:	f1bb 0f00 	cmp.w	fp, #0
 80a6c58:	4682      	mov	sl, r0
 80a6c5a:	daac      	bge.n	80a6bb6 <__ieee754_rem_pio2+0x66>
 80a6c5c:	6862      	ldr	r2, [r4, #4]
 80a6c5e:	68e3      	ldr	r3, [r4, #12]
 80a6c60:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a6c64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a6c68:	f1c0 0a00 	rsb	sl, r0, #0
 80a6c6c:	6062      	str	r2, [r4, #4]
 80a6c6e:	60e3      	str	r3, [r4, #12]
 80a6c70:	e7a1      	b.n	80a6bb6 <__ieee754_rem_pio2+0x66>
 80a6c72:	f04f 0a00 	mov.w	sl, #0
 80a6c76:	2200      	movs	r2, #0
 80a6c78:	2300      	movs	r3, #0
 80a6c7a:	e9c4 0100 	strd	r0, r1, [r4]
 80a6c7e:	4650      	mov	r0, sl
 80a6c80:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a6c84:	b00d      	add	sp, #52	; 0x34
 80a6c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6c8a:	4602      	mov	r2, r0
 80a6c8c:	465b      	mov	r3, fp
 80a6c8e:	f002 fa71 	bl	80a9174 <__aeabi_dsub>
 80a6c92:	f04f 0a00 	mov.w	sl, #0
 80a6c96:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a6c9a:	e9c4 0100 	strd	r0, r1, [r4]
 80a6c9e:	e78a      	b.n	80a6bb6 <__ieee754_rem_pio2+0x66>
 80a6ca0:	a333      	add	r3, pc, #204	; (adr r3, 80a6d70 <__ieee754_rem_pio2+0x220>)
 80a6ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6ca6:	f002 fa65 	bl	80a9174 <__aeabi_dsub>
 80a6caa:	a333      	add	r3, pc, #204	; (adr r3, 80a6d78 <__ieee754_rem_pio2+0x228>)
 80a6cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6cb0:	4606      	mov	r6, r0
 80a6cb2:	460f      	mov	r7, r1
 80a6cb4:	f002 fa5e 	bl	80a9174 <__aeabi_dsub>
 80a6cb8:	4602      	mov	r2, r0
 80a6cba:	460b      	mov	r3, r1
 80a6cbc:	4630      	mov	r0, r6
 80a6cbe:	e9c4 2300 	strd	r2, r3, [r4]
 80a6cc2:	4639      	mov	r1, r7
 80a6cc4:	f002 fa56 	bl	80a9174 <__aeabi_dsub>
 80a6cc8:	a32b      	add	r3, pc, #172	; (adr r3, 80a6d78 <__ieee754_rem_pio2+0x228>)
 80a6cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6cce:	f002 fa51 	bl	80a9174 <__aeabi_dsub>
 80a6cd2:	f04f 0a01 	mov.w	sl, #1
 80a6cd6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a6cda:	4650      	mov	r0, sl
 80a6cdc:	b00d      	add	sp, #52	; 0x34
 80a6cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6ce2:	f002 f80d 	bl	80a8d00 <fabs>
 80a6ce6:	a326      	add	r3, pc, #152	; (adr r3, 80a6d80 <__ieee754_rem_pio2+0x230>)
 80a6ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6cec:	4606      	mov	r6, r0
 80a6cee:	460f      	mov	r7, r1
 80a6cf0:	f002 fbf8 	bl	80a94e4 <__aeabi_dmul>
 80a6cf4:	2200      	movs	r2, #0
 80a6cf6:	4b2b      	ldr	r3, [pc, #172]	; (80a6da4 <__ieee754_rem_pio2+0x254>)
 80a6cf8:	f002 fa3e 	bl	80a9178 <__adddf3>
 80a6cfc:	f002 fea2 	bl	80a9a44 <__aeabi_d2iz>
 80a6d00:	4682      	mov	sl, r0
 80a6d02:	f002 fb85 	bl	80a9410 <__aeabi_i2d>
 80a6d06:	a316      	add	r3, pc, #88	; (adr r3, 80a6d60 <__ieee754_rem_pio2+0x210>)
 80a6d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6d0c:	4680      	mov	r8, r0
 80a6d0e:	4689      	mov	r9, r1
 80a6d10:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80a6d14:	f002 fbe6 	bl	80a94e4 <__aeabi_dmul>
 80a6d18:	4602      	mov	r2, r0
 80a6d1a:	460b      	mov	r3, r1
 80a6d1c:	4630      	mov	r0, r6
 80a6d1e:	4639      	mov	r1, r7
 80a6d20:	f002 fa28 	bl	80a9174 <__aeabi_dsub>
 80a6d24:	a310      	add	r3, pc, #64	; (adr r3, 80a6d68 <__ieee754_rem_pio2+0x218>)
 80a6d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6d2a:	4606      	mov	r6, r0
 80a6d2c:	460f      	mov	r7, r1
 80a6d2e:	4640      	mov	r0, r8
 80a6d30:	4649      	mov	r1, r9
 80a6d32:	46b0      	mov	r8, r6
 80a6d34:	46b9      	mov	r9, r7
 80a6d36:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80a6d3a:	f002 fbd3 	bl	80a94e4 <__aeabi_dmul>
 80a6d3e:	f1ba 0f1f 	cmp.w	sl, #31
 80a6d42:	4606      	mov	r6, r0
 80a6d44:	460f      	mov	r7, r1
 80a6d46:	dc31      	bgt.n	80a6dac <__ieee754_rem_pio2+0x25c>
 80a6d48:	4b17      	ldr	r3, [pc, #92]	; (80a6da8 <__ieee754_rem_pio2+0x258>)
 80a6d4a:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80a6d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6d52:	42ab      	cmp	r3, r5
 80a6d54:	d02a      	beq.n	80a6dac <__ieee754_rem_pio2+0x25c>
 80a6d56:	4602      	mov	r2, r0
 80a6d58:	460b      	mov	r3, r1
 80a6d5a:	4640      	mov	r0, r8
 80a6d5c:	4649      	mov	r1, r9
 80a6d5e:	e09e      	b.n	80a6e9e <__ieee754_rem_pio2+0x34e>
 80a6d60:	54400000 	.word	0x54400000
 80a6d64:	3ff921fb 	.word	0x3ff921fb
 80a6d68:	1a626331 	.word	0x1a626331
 80a6d6c:	3dd0b461 	.word	0x3dd0b461
 80a6d70:	1a600000 	.word	0x1a600000
 80a6d74:	3dd0b461 	.word	0x3dd0b461
 80a6d78:	2e037073 	.word	0x2e037073
 80a6d7c:	3ba3198a 	.word	0x3ba3198a
 80a6d80:	6dc9c883 	.word	0x6dc9c883
 80a6d84:	3fe45f30 	.word	0x3fe45f30
 80a6d88:	3fe921fb 	.word	0x3fe921fb
 80a6d8c:	4002d97b 	.word	0x4002d97b
 80a6d90:	3ff921fb 	.word	0x3ff921fb
 80a6d94:	413921fb 	.word	0x413921fb
 80a6d98:	7fefffff 	.word	0x7fefffff
 80a6d9c:	41700000 	.word	0x41700000
 80a6da0:	080aa9d4 	.word	0x080aa9d4
 80a6da4:	3fe00000 	.word	0x3fe00000
 80a6da8:	080aa954 	.word	0x080aa954
 80a6dac:	463b      	mov	r3, r7
 80a6dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a6db2:	4632      	mov	r2, r6
 80a6db4:	f002 f9de 	bl	80a9174 <__aeabi_dsub>
 80a6db8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a6dbc:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
 80a6dc0:	2b10      	cmp	r3, #16
 80a6dc2:	4689      	mov	r9, r1
 80a6dc4:	4680      	mov	r8, r0
 80a6dc6:	ea4f 5525 	mov.w	r5, r5, asr #20
 80a6dca:	dd6c      	ble.n	80a6ea6 <__ieee754_rem_pio2+0x356>
 80a6dcc:	a366      	add	r3, pc, #408	; (adr r3, 80a6f68 <__ieee754_rem_pio2+0x418>)
 80a6dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6dd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a6dd6:	f002 fb85 	bl	80a94e4 <__aeabi_dmul>
 80a6dda:	4606      	mov	r6, r0
 80a6ddc:	460f      	mov	r7, r1
 80a6dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a6de2:	4632      	mov	r2, r6
 80a6de4:	463b      	mov	r3, r7
 80a6de6:	f002 f9c5 	bl	80a9174 <__aeabi_dsub>
 80a6dea:	4680      	mov	r8, r0
 80a6dec:	4689      	mov	r9, r1
 80a6dee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a6df2:	4642      	mov	r2, r8
 80a6df4:	464b      	mov	r3, r9
 80a6df6:	f002 f9bd 	bl	80a9174 <__aeabi_dsub>
 80a6dfa:	4632      	mov	r2, r6
 80a6dfc:	463b      	mov	r3, r7
 80a6dfe:	f002 f9b9 	bl	80a9174 <__aeabi_dsub>
 80a6e02:	a35b      	add	r3, pc, #364	; (adr r3, 80a6f70 <__ieee754_rem_pio2+0x420>)
 80a6e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6e08:	4606      	mov	r6, r0
 80a6e0a:	460f      	mov	r7, r1
 80a6e0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a6e10:	f002 fb68 	bl	80a94e4 <__aeabi_dmul>
 80a6e14:	4632      	mov	r2, r6
 80a6e16:	463b      	mov	r3, r7
 80a6e18:	f002 f9ac 	bl	80a9174 <__aeabi_dsub>
 80a6e1c:	4606      	mov	r6, r0
 80a6e1e:	460f      	mov	r7, r1
 80a6e20:	4640      	mov	r0, r8
 80a6e22:	4649      	mov	r1, r9
 80a6e24:	463b      	mov	r3, r7
 80a6e26:	4632      	mov	r2, r6
 80a6e28:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80a6e2c:	f002 f9a2 	bl	80a9174 <__aeabi_dsub>
 80a6e30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a6e34:	1aed      	subs	r5, r5, r3
 80a6e36:	2d31      	cmp	r5, #49	; 0x31
 80a6e38:	4689      	mov	r9, r1
 80a6e3a:	4680      	mov	r8, r0
 80a6e3c:	dd33      	ble.n	80a6ea6 <__ieee754_rem_pio2+0x356>
 80a6e3e:	a34e      	add	r3, pc, #312	; (adr r3, 80a6f78 <__ieee754_rem_pio2+0x428>)
 80a6e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6e44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a6e48:	f002 fb4c 	bl	80a94e4 <__aeabi_dmul>
 80a6e4c:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
 80a6e50:	4680      	mov	r8, r0
 80a6e52:	4689      	mov	r9, r1
 80a6e54:	4642      	mov	r2, r8
 80a6e56:	4631      	mov	r1, r6
 80a6e58:	464b      	mov	r3, r9
 80a6e5a:	4628      	mov	r0, r5
 80a6e5c:	f002 f98a 	bl	80a9174 <__aeabi_dsub>
 80a6e60:	4602      	mov	r2, r0
 80a6e62:	460b      	mov	r3, r1
 80a6e64:	4628      	mov	r0, r5
 80a6e66:	4631      	mov	r1, r6
 80a6e68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a6e6c:	f002 f982 	bl	80a9174 <__aeabi_dsub>
 80a6e70:	4642      	mov	r2, r8
 80a6e72:	464b      	mov	r3, r9
 80a6e74:	f002 f97e 	bl	80a9174 <__aeabi_dsub>
 80a6e78:	a341      	add	r3, pc, #260	; (adr r3, 80a6f80 <__ieee754_rem_pio2+0x430>)
 80a6e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6e7e:	4606      	mov	r6, r0
 80a6e80:	460f      	mov	r7, r1
 80a6e82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a6e86:	f002 fb2d 	bl	80a94e4 <__aeabi_dmul>
 80a6e8a:	4632      	mov	r2, r6
 80a6e8c:	463b      	mov	r3, r7
 80a6e8e:	f002 f971 	bl	80a9174 <__aeabi_dsub>
 80a6e92:	4606      	mov	r6, r0
 80a6e94:	460f      	mov	r7, r1
 80a6e96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a6e9a:	4632      	mov	r2, r6
 80a6e9c:	463b      	mov	r3, r7
 80a6e9e:	f002 f969 	bl	80a9174 <__aeabi_dsub>
 80a6ea2:	4680      	mov	r8, r0
 80a6ea4:	4689      	mov	r9, r1
 80a6ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a6eaa:	4642      	mov	r2, r8
 80a6eac:	464b      	mov	r3, r9
 80a6eae:	e9c4 2300 	strd	r2, r3, [r4]
 80a6eb2:	f002 f95f 	bl	80a9174 <__aeabi_dsub>
 80a6eb6:	4632      	mov	r2, r6
 80a6eb8:	463b      	mov	r3, r7
 80a6eba:	f002 f95b 	bl	80a9174 <__aeabi_dsub>
 80a6ebe:	4602      	mov	r2, r0
 80a6ec0:	460b      	mov	r3, r1
 80a6ec2:	f1bb 0f00 	cmp.w	fp, #0
 80a6ec6:	4605      	mov	r5, r0
 80a6ec8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a6ecc:	f6bf ae73 	bge.w	80a6bb6 <__ieee754_rem_pio2+0x66>
 80a6ed0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a6ed4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a6ed8:	e9c4 8300 	strd	r8, r3, [r4]
 80a6edc:	e9c4 5102 	strd	r5, r1, [r4, #8]
 80a6ee0:	f1ca 0a00 	rsb	sl, sl, #0
 80a6ee4:	e667      	b.n	80a6bb6 <__ieee754_rem_pio2+0x66>
 80a6ee6:	2303      	movs	r3, #3
 80a6ee8:	e6ab      	b.n	80a6c42 <__ieee754_rem_pio2+0xf2>
 80a6eea:	f002 f945 	bl	80a9178 <__adddf3>
 80a6eee:	4b28      	ldr	r3, [pc, #160]	; (80a6f90 <__ieee754_rem_pio2+0x440>)
 80a6ef0:	4606      	mov	r6, r0
 80a6ef2:	429d      	cmp	r5, r3
 80a6ef4:	460f      	mov	r7, r1
 80a6ef6:	d016      	beq.n	80a6f26 <__ieee754_rem_pio2+0x3d6>
 80a6ef8:	a323      	add	r3, pc, #140	; (adr r3, 80a6f88 <__ieee754_rem_pio2+0x438>)
 80a6efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6efe:	f002 f93b 	bl	80a9178 <__adddf3>
 80a6f02:	4602      	mov	r2, r0
 80a6f04:	460b      	mov	r3, r1
 80a6f06:	4630      	mov	r0, r6
 80a6f08:	e9c4 2300 	strd	r2, r3, [r4]
 80a6f0c:	4639      	mov	r1, r7
 80a6f0e:	f002 f931 	bl	80a9174 <__aeabi_dsub>
 80a6f12:	a31d      	add	r3, pc, #116	; (adr r3, 80a6f88 <__ieee754_rem_pio2+0x438>)
 80a6f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6f18:	f002 f92e 	bl	80a9178 <__adddf3>
 80a6f1c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80a6f20:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a6f24:	e647      	b.n	80a6bb6 <__ieee754_rem_pio2+0x66>
 80a6f26:	a310      	add	r3, pc, #64	; (adr r3, 80a6f68 <__ieee754_rem_pio2+0x418>)
 80a6f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6f2c:	f002 f924 	bl	80a9178 <__adddf3>
 80a6f30:	a30f      	add	r3, pc, #60	; (adr r3, 80a6f70 <__ieee754_rem_pio2+0x420>)
 80a6f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6f36:	4606      	mov	r6, r0
 80a6f38:	460f      	mov	r7, r1
 80a6f3a:	f002 f91d 	bl	80a9178 <__adddf3>
 80a6f3e:	4602      	mov	r2, r0
 80a6f40:	460b      	mov	r3, r1
 80a6f42:	4630      	mov	r0, r6
 80a6f44:	e9c4 2300 	strd	r2, r3, [r4]
 80a6f48:	4639      	mov	r1, r7
 80a6f4a:	f002 f913 	bl	80a9174 <__aeabi_dsub>
 80a6f4e:	a308      	add	r3, pc, #32	; (adr r3, 80a6f70 <__ieee754_rem_pio2+0x420>)
 80a6f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6f54:	f002 f910 	bl	80a9178 <__adddf3>
 80a6f58:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80a6f5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a6f60:	e629      	b.n	80a6bb6 <__ieee754_rem_pio2+0x66>
 80a6f62:	bf00      	nop
 80a6f64:	f3af 8000 	nop.w
 80a6f68:	1a600000 	.word	0x1a600000
 80a6f6c:	3dd0b461 	.word	0x3dd0b461
 80a6f70:	2e037073 	.word	0x2e037073
 80a6f74:	3ba3198a 	.word	0x3ba3198a
 80a6f78:	2e000000 	.word	0x2e000000
 80a6f7c:	3ba3198a 	.word	0x3ba3198a
 80a6f80:	252049c1 	.word	0x252049c1
 80a6f84:	397b839a 	.word	0x397b839a
 80a6f88:	1a626331 	.word	0x1a626331
 80a6f8c:	3dd0b461 	.word	0x3dd0b461
 80a6f90:	3ff921fb 	.word	0x3ff921fb

080a6f94 <__ieee754_sqrt>:
 80a6f94:	4a60      	ldr	r2, [pc, #384]	; (80a7118 <__ieee754_sqrt+0x184>)
 80a6f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6f9a:	438a      	bics	r2, r1
 80a6f9c:	460e      	mov	r6, r1
 80a6f9e:	4605      	mov	r5, r0
 80a6fa0:	f000 8097 	beq.w	80a70d2 <__ieee754_sqrt+0x13e>
 80a6fa4:	2900      	cmp	r1, #0
 80a6fa6:	460b      	mov	r3, r1
 80a6fa8:	4604      	mov	r4, r0
 80a6faa:	dd4e      	ble.n	80a704a <__ieee754_sqrt+0xb6>
 80a6fac:	1509      	asrs	r1, r1, #20
 80a6fae:	d05a      	beq.n	80a7066 <__ieee754_sqrt+0xd2>
 80a6fb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a6fb4:	07ca      	lsls	r2, r1, #31
 80a6fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a6fba:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
 80a6fbe:	d403      	bmi.n	80a6fc8 <__ieee754_sqrt+0x34>
 80a6fc0:	005b      	lsls	r3, r3, #1
 80a6fc2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80a6fc6:	0064      	lsls	r4, r4, #1
 80a6fc8:	f04f 0c00 	mov.w	ip, #0
 80a6fcc:	2516      	movs	r5, #22
 80a6fce:	4666      	mov	r6, ip
 80a6fd0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80a6fd4:	0fe1      	lsrs	r1, r4, #31
 80a6fd6:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a6fda:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80a6fde:	0064      	lsls	r4, r4, #1
 80a6fe0:	18b1      	adds	r1, r6, r2
 80a6fe2:	4299      	cmp	r1, r3
 80a6fe4:	dc02      	bgt.n	80a6fec <__ieee754_sqrt+0x58>
 80a6fe6:	1a5b      	subs	r3, r3, r1
 80a6fe8:	188e      	adds	r6, r1, r2
 80a6fea:	4494      	add	ip, r2
 80a6fec:	005b      	lsls	r3, r3, #1
 80a6fee:	3d01      	subs	r5, #1
 80a6ff0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80a6ff4:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a6ff8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80a6ffc:	d1f0      	bne.n	80a6fe0 <__ieee754_sqrt+0x4c>
 80a6ffe:	462f      	mov	r7, r5
 80a7000:	2020      	movs	r0, #32
 80a7002:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80a7006:	e009      	b.n	80a701c <__ieee754_sqrt+0x88>
 80a7008:	d03d      	beq.n	80a7086 <__ieee754_sqrt+0xf2>
 80a700a:	0fe1      	lsrs	r1, r4, #31
 80a700c:	3801      	subs	r0, #1
 80a700e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a7012:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80a7016:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80a701a:	d03d      	beq.n	80a7098 <__ieee754_sqrt+0x104>
 80a701c:	42b3      	cmp	r3, r6
 80a701e:	eb02 0105 	add.w	r1, r2, r5
 80a7022:	ddf1      	ble.n	80a7008 <__ieee754_sqrt+0x74>
 80a7024:	2900      	cmp	r1, #0
 80a7026:	eb01 0502 	add.w	r5, r1, r2
 80a702a:	db09      	blt.n	80a7040 <__ieee754_sqrt+0xac>
 80a702c:	46b0      	mov	r8, r6
 80a702e:	1b9b      	subs	r3, r3, r6
 80a7030:	42a1      	cmp	r1, r4
 80a7032:	bf88      	it	hi
 80a7034:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80a7038:	4646      	mov	r6, r8
 80a703a:	1a64      	subs	r4, r4, r1
 80a703c:	4417      	add	r7, r2
 80a703e:	e7e4      	b.n	80a700a <__ieee754_sqrt+0x76>
 80a7040:	2d00      	cmp	r5, #0
 80a7042:	dbf3      	blt.n	80a702c <__ieee754_sqrt+0x98>
 80a7044:	f106 0801 	add.w	r8, r6, #1
 80a7048:	e7f1      	b.n	80a702e <__ieee754_sqrt+0x9a>
 80a704a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a704e:	4302      	orrs	r2, r0
 80a7050:	d057      	beq.n	80a7102 <__ieee754_sqrt+0x16e>
 80a7052:	2900      	cmp	r1, #0
 80a7054:	d14b      	bne.n	80a70ee <__ieee754_sqrt+0x15a>
 80a7056:	0ae2      	lsrs	r2, r4, #11
 80a7058:	4613      	mov	r3, r2
 80a705a:	3915      	subs	r1, #21
 80a705c:	0564      	lsls	r4, r4, #21
 80a705e:	2a00      	cmp	r2, #0
 80a7060:	d0f9      	beq.n	80a7056 <__ieee754_sqrt+0xc2>
 80a7062:	02d7      	lsls	r7, r2, #11
 80a7064:	d452      	bmi.n	80a710c <__ieee754_sqrt+0x178>
 80a7066:	2000      	movs	r0, #0
 80a7068:	005b      	lsls	r3, r3, #1
 80a706a:	02de      	lsls	r6, r3, #11
 80a706c:	4605      	mov	r5, r0
 80a706e:	f100 0001 	add.w	r0, r0, #1
 80a7072:	d5f9      	bpl.n	80a7068 <__ieee754_sqrt+0xd4>
 80a7074:	461a      	mov	r2, r3
 80a7076:	4623      	mov	r3, r4
 80a7078:	4084      	lsls	r4, r0
 80a707a:	f1c0 0020 	rsb	r0, r0, #32
 80a707e:	40c3      	lsrs	r3, r0
 80a7080:	4313      	orrs	r3, r2
 80a7082:	1b49      	subs	r1, r1, r5
 80a7084:	e794      	b.n	80a6fb0 <__ieee754_sqrt+0x1c>
 80a7086:	42a1      	cmp	r1, r4
 80a7088:	d8bf      	bhi.n	80a700a <__ieee754_sqrt+0x76>
 80a708a:	2900      	cmp	r1, #0
 80a708c:	eb01 0502 	add.w	r5, r1, r2
 80a7090:	dbd6      	blt.n	80a7040 <__ieee754_sqrt+0xac>
 80a7092:	4698      	mov	r8, r3
 80a7094:	2300      	movs	r3, #0
 80a7096:	e7cf      	b.n	80a7038 <__ieee754_sqrt+0xa4>
 80a7098:	4323      	orrs	r3, r4
 80a709a:	d113      	bne.n	80a70c4 <__ieee754_sqrt+0x130>
 80a709c:	0878      	lsrs	r0, r7, #1
 80a709e:	ea4f 036c 	mov.w	r3, ip, asr #1
 80a70a2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a70a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a70aa:	f01c 0f01 	tst.w	ip, #1
 80a70ae:	bf18      	it	ne
 80a70b0:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
 80a70b4:	eb03 550e 	add.w	r5, r3, lr, lsl #20
 80a70b8:	4602      	mov	r2, r0
 80a70ba:	462b      	mov	r3, r5
 80a70bc:	4610      	mov	r0, r2
 80a70be:	4619      	mov	r1, r3
 80a70c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a70c4:	1c7b      	adds	r3, r7, #1
 80a70c6:	bf16      	itet	ne
 80a70c8:	1c78      	addne	r0, r7, #1
 80a70ca:	f10c 0c01 	addeq.w	ip, ip, #1
 80a70ce:	0840      	lsrne	r0, r0, #1
 80a70d0:	e7e5      	b.n	80a709e <__ieee754_sqrt+0x10a>
 80a70d2:	4602      	mov	r2, r0
 80a70d4:	460b      	mov	r3, r1
 80a70d6:	f002 fa05 	bl	80a94e4 <__aeabi_dmul>
 80a70da:	462a      	mov	r2, r5
 80a70dc:	4633      	mov	r3, r6
 80a70de:	f002 f84b 	bl	80a9178 <__adddf3>
 80a70e2:	4602      	mov	r2, r0
 80a70e4:	460b      	mov	r3, r1
 80a70e6:	4610      	mov	r0, r2
 80a70e8:	4619      	mov	r1, r3
 80a70ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a70ee:	4602      	mov	r2, r0
 80a70f0:	f002 f840 	bl	80a9174 <__aeabi_dsub>
 80a70f4:	4602      	mov	r2, r0
 80a70f6:	460b      	mov	r3, r1
 80a70f8:	f002 fb1e 	bl	80a9738 <__aeabi_ddiv>
 80a70fc:	4602      	mov	r2, r0
 80a70fe:	460b      	mov	r3, r1
 80a7100:	e7dc      	b.n	80a70bc <__ieee754_sqrt+0x128>
 80a7102:	4602      	mov	r2, r0
 80a7104:	4619      	mov	r1, r3
 80a7106:	4610      	mov	r0, r2
 80a7108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a710c:	4623      	mov	r3, r4
 80a710e:	2020      	movs	r0, #32
 80a7110:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a7114:	e7b3      	b.n	80a707e <__ieee754_sqrt+0xea>
 80a7116:	bf00      	nop
 80a7118:	7ff00000 	.word	0x7ff00000

080a711c <__ieee754_fmodf>:
 80a711c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a711e:	f031 4700 	bics.w	r7, r1, #2147483648	; 0x80000000
 80a7122:	d041      	beq.n	80a71a8 <__ieee754_fmodf+0x8c>
 80a7124:	f020 4c00 	bic.w	ip, r0, #2147483648	; 0x80000000
 80a7128:	f1bc 4fff 	cmp.w	ip, #2139095040	; 0x7f800000
 80a712c:	4603      	mov	r3, r0
 80a712e:	da3b      	bge.n	80a71a8 <__ieee754_fmodf+0x8c>
 80a7130:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80a7134:	dc38      	bgt.n	80a71a8 <__ieee754_fmodf+0x8c>
 80a7136:	45bc      	cmp	ip, r7
 80a7138:	db3b      	blt.n	80a71b2 <__ieee754_fmodf+0x96>
 80a713a:	f000 4600 	and.w	r6, r0, #2147483648	; 0x80000000
 80a713e:	d039      	beq.n	80a71b4 <__ieee754_fmodf+0x98>
 80a7140:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80a7144:	460c      	mov	r4, r1
 80a7146:	d14e      	bne.n	80a71e6 <__ieee754_fmodf+0xca>
 80a7148:	ea4f 210c 	mov.w	r1, ip, lsl #8
 80a714c:	2900      	cmp	r1, #0
 80a714e:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 80a7152:	dd04      	ble.n	80a715e <__ieee754_fmodf+0x42>
 80a7154:	0049      	lsls	r1, r1, #1
 80a7156:	2900      	cmp	r1, #0
 80a7158:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80a715c:	dcfa      	bgt.n	80a7154 <__ieee754_fmodf+0x38>
 80a715e:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
 80a7162:	d150      	bne.n	80a7206 <__ieee754_fmodf+0xea>
 80a7164:	0239      	lsls	r1, r7, #8
 80a7166:	f06f 057d 	mvn.w	r5, #125	; 0x7d
 80a716a:	d403      	bmi.n	80a7174 <__ieee754_fmodf+0x58>
 80a716c:	0049      	lsls	r1, r1, #1
 80a716e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80a7172:	d5fb      	bpl.n	80a716c <__ieee754_fmodf+0x50>
 80a7174:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80a7178:	db3f      	blt.n	80a71fa <__ieee754_fmodf+0xde>
 80a717a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80a717e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80a7182:	f115 0f7e 	cmn.w	r5, #126	; 0x7e
 80a7186:	db32      	blt.n	80a71ee <__ieee754_fmodf+0xd2>
 80a7188:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80a718c:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 80a7190:	1b52      	subs	r2, r2, r5
 80a7192:	d104      	bne.n	80a719e <__ieee754_fmodf+0x82>
 80a7194:	e013      	b.n	80a71be <__ieee754_fmodf+0xa2>
 80a7196:	d00d      	beq.n	80a71b4 <__ieee754_fmodf+0x98>
 80a7198:	004b      	lsls	r3, r1, #1
 80a719a:	3a01      	subs	r2, #1
 80a719c:	d00f      	beq.n	80a71be <__ieee754_fmodf+0xa2>
 80a719e:	1b19      	subs	r1, r3, r4
 80a71a0:	2900      	cmp	r1, #0
 80a71a2:	daf8      	bge.n	80a7196 <__ieee754_fmodf+0x7a>
 80a71a4:	005b      	lsls	r3, r3, #1
 80a71a6:	e7f8      	b.n	80a719a <__ieee754_fmodf+0x7e>
 80a71a8:	f002 fdf2 	bl	80a9d90 <__aeabi_fmul>
 80a71ac:	4601      	mov	r1, r0
 80a71ae:	f002 fea3 	bl	80a9ef8 <__aeabi_fdiv>
 80a71b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a71b4:	4b19      	ldr	r3, [pc, #100]	; (80a721c <__ieee754_fmodf+0x100>)
 80a71b6:	0ff0      	lsrs	r0, r6, #31
 80a71b8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80a71bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a71be:	1b1c      	subs	r4, r3, r4
 80a71c0:	bf58      	it	pl
 80a71c2:	4623      	movpl	r3, r4
 80a71c4:	b913      	cbnz	r3, 80a71cc <__ieee754_fmodf+0xb0>
 80a71c6:	e7f5      	b.n	80a71b4 <__ieee754_fmodf+0x98>
 80a71c8:	005b      	lsls	r3, r3, #1
 80a71ca:	3d01      	subs	r5, #1
 80a71cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80a71d0:	dbfa      	blt.n	80a71c8 <__ieee754_fmodf+0xac>
 80a71d2:	f115 0f7e 	cmn.w	r5, #126	; 0x7e
 80a71d6:	db19      	blt.n	80a720c <__ieee754_fmodf+0xf0>
 80a71d8:	f5a3 0000 	sub.w	r0, r3, #8388608	; 0x800000
 80a71dc:	4330      	orrs	r0, r6
 80a71de:	357f      	adds	r5, #127	; 0x7f
 80a71e0:	ea40 50c5 	orr.w	r0, r0, r5, lsl #23
 80a71e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a71e6:	ea4f 52ec 	mov.w	r2, ip, asr #23
 80a71ea:	3a7f      	subs	r2, #127	; 0x7f
 80a71ec:	e7b7      	b.n	80a715e <__ieee754_fmodf+0x42>
 80a71ee:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80a71f2:	1b49      	subs	r1, r1, r5
 80a71f4:	fa07 f401 	lsl.w	r4, r7, r1
 80a71f8:	e7ca      	b.n	80a7190 <__ieee754_fmodf+0x74>
 80a71fa:	f06f 037d 	mvn.w	r3, #125	; 0x7d
 80a71fe:	1a9b      	subs	r3, r3, r2
 80a7200:	fa0c f303 	lsl.w	r3, ip, r3
 80a7204:	e7bd      	b.n	80a7182 <__ieee754_fmodf+0x66>
 80a7206:	15fd      	asrs	r5, r7, #23
 80a7208:	3d7f      	subs	r5, #127	; 0x7f
 80a720a:	e7b3      	b.n	80a7174 <__ieee754_fmodf+0x58>
 80a720c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80a7210:	1b40      	subs	r0, r0, r5
 80a7212:	fa43 f000 	asr.w	r0, r3, r0
 80a7216:	4330      	orrs	r0, r6
 80a7218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a721a:	bf00      	nop
 80a721c:	080aaadc 	.word	0x080aaadc

080a7220 <__ieee754_logf>:
 80a7220:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a7224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a7228:	d02b      	beq.n	80a7282 <__ieee754_logf+0x62>
 80a722a:	2800      	cmp	r0, #0
 80a722c:	4601      	mov	r1, r0
 80a722e:	4603      	mov	r3, r0
 80a7230:	db40      	blt.n	80a72b4 <__ieee754_logf+0x94>
 80a7232:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80a7236:	da39      	bge.n	80a72ac <__ieee754_logf+0x8c>
 80a7238:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a723c:	db41      	blt.n	80a72c2 <__ieee754_logf+0xa2>
 80a723e:	2100      	movs	r1, #0
 80a7240:	4a8a      	ldr	r2, [pc, #552]	; (80a746c <__ieee754_logf+0x24c>)
 80a7242:	f3c3 0616 	ubfx	r6, r3, #0, #23
 80a7246:	4432      	add	r2, r6
 80a7248:	15dc      	asrs	r4, r3, #23
 80a724a:	f402 0000 	and.w	r0, r2, #8388608	; 0x800000
 80a724e:	3c7f      	subs	r4, #127	; 0x7f
 80a7250:	f080 507e 	eor.w	r0, r0, #1065353216	; 0x3f800000
 80a7254:	440c      	add	r4, r1
 80a7256:	4330      	orrs	r0, r6
 80a7258:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a725c:	eb04 54d2 	add.w	r4, r4, r2, lsr #23
 80a7260:	f002 fc8c 	bl	80a9b7c <__aeabi_fsub>
 80a7264:	4b82      	ldr	r3, [pc, #520]	; (80a7470 <__ieee754_logf+0x250>)
 80a7266:	f106 020f 	add.w	r2, r6, #15
 80a726a:	4013      	ands	r3, r2
 80a726c:	4605      	mov	r5, r0
 80a726e:	bb83      	cbnz	r3, 80a72d2 <__ieee754_logf+0xb2>
 80a7270:	2100      	movs	r1, #0
 80a7272:	f002 ff21 	bl	80aa0b8 <__aeabi_fcmpeq>
 80a7276:	2800      	cmp	r0, #0
 80a7278:	f000 80a2 	beq.w	80a73c0 <__ieee754_logf+0x1a0>
 80a727c:	b944      	cbnz	r4, 80a7290 <__ieee754_logf+0x70>
 80a727e:	2000      	movs	r0, #0
 80a7280:	e004      	b.n	80a728c <__ieee754_logf+0x6c>
 80a7282:	2100      	movs	r1, #0
 80a7284:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 80a7288:	f002 fe36 	bl	80a9ef8 <__aeabi_fdiv>
 80a728c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a7290:	4620      	mov	r0, r4
 80a7292:	f002 fd29 	bl	80a9ce8 <__aeabi_i2f>
 80a7296:	4977      	ldr	r1, [pc, #476]	; (80a7474 <__ieee754_logf+0x254>)
 80a7298:	4605      	mov	r5, r0
 80a729a:	f002 fd79 	bl	80a9d90 <__aeabi_fmul>
 80a729e:	4976      	ldr	r1, [pc, #472]	; (80a7478 <__ieee754_logf+0x258>)
 80a72a0:	4604      	mov	r4, r0
 80a72a2:	4628      	mov	r0, r5
 80a72a4:	f002 fd74 	bl	80a9d90 <__aeabi_fmul>
 80a72a8:	4601      	mov	r1, r0
 80a72aa:	4620      	mov	r0, r4
 80a72ac:	f002 fc68 	bl	80a9b80 <__addsf3>
 80a72b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a72b4:	f002 fc62 	bl	80a9b7c <__aeabi_fsub>
 80a72b8:	2100      	movs	r1, #0
 80a72ba:	f002 fe1d 	bl	80a9ef8 <__aeabi_fdiv>
 80a72be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a72c2:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80a72c6:	f002 fd63 	bl	80a9d90 <__aeabi_fmul>
 80a72ca:	f06f 0118 	mvn.w	r1, #24
 80a72ce:	4603      	mov	r3, r0
 80a72d0:	e7b6      	b.n	80a7240 <__ieee754_logf+0x20>
 80a72d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80a72d6:	f002 fc53 	bl	80a9b80 <__addsf3>
 80a72da:	4601      	mov	r1, r0
 80a72dc:	4628      	mov	r0, r5
 80a72de:	f002 fe0b 	bl	80a9ef8 <__aeabi_fdiv>
 80a72e2:	4680      	mov	r8, r0
 80a72e4:	4620      	mov	r0, r4
 80a72e6:	f002 fcff 	bl	80a9ce8 <__aeabi_i2f>
 80a72ea:	4641      	mov	r1, r8
 80a72ec:	4681      	mov	r9, r0
 80a72ee:	4640      	mov	r0, r8
 80a72f0:	f002 fd4e 	bl	80a9d90 <__aeabi_fmul>
 80a72f4:	4601      	mov	r1, r0
 80a72f6:	4682      	mov	sl, r0
 80a72f8:	f002 fd4a 	bl	80a9d90 <__aeabi_fmul>
 80a72fc:	4607      	mov	r7, r0
 80a72fe:	495f      	ldr	r1, [pc, #380]	; (80a747c <__ieee754_logf+0x25c>)
 80a7300:	f002 fd46 	bl	80a9d90 <__aeabi_fmul>
 80a7304:	495e      	ldr	r1, [pc, #376]	; (80a7480 <__ieee754_logf+0x260>)
 80a7306:	f002 fc3b 	bl	80a9b80 <__addsf3>
 80a730a:	4639      	mov	r1, r7
 80a730c:	f002 fd40 	bl	80a9d90 <__aeabi_fmul>
 80a7310:	495c      	ldr	r1, [pc, #368]	; (80a7484 <__ieee754_logf+0x264>)
 80a7312:	f002 fc35 	bl	80a9b80 <__addsf3>
 80a7316:	4639      	mov	r1, r7
 80a7318:	f002 fd3a 	bl	80a9d90 <__aeabi_fmul>
 80a731c:	495a      	ldr	r1, [pc, #360]	; (80a7488 <__ieee754_logf+0x268>)
 80a731e:	f002 fc2f 	bl	80a9b80 <__addsf3>
 80a7322:	4651      	mov	r1, sl
 80a7324:	f002 fd34 	bl	80a9d90 <__aeabi_fmul>
 80a7328:	4958      	ldr	r1, [pc, #352]	; (80a748c <__ieee754_logf+0x26c>)
 80a732a:	4682      	mov	sl, r0
 80a732c:	4638      	mov	r0, r7
 80a732e:	f002 fd2f 	bl	80a9d90 <__aeabi_fmul>
 80a7332:	4957      	ldr	r1, [pc, #348]	; (80a7490 <__ieee754_logf+0x270>)
 80a7334:	f002 fc24 	bl	80a9b80 <__addsf3>
 80a7338:	4639      	mov	r1, r7
 80a733a:	f002 fd29 	bl	80a9d90 <__aeabi_fmul>
 80a733e:	4955      	ldr	r1, [pc, #340]	; (80a7494 <__ieee754_logf+0x274>)
 80a7340:	f002 fc1e 	bl	80a9b80 <__addsf3>
 80a7344:	4639      	mov	r1, r7
 80a7346:	f002 fd23 	bl	80a9d90 <__aeabi_fmul>
 80a734a:	4601      	mov	r1, r0
 80a734c:	4650      	mov	r0, sl
 80a734e:	f002 fc17 	bl	80a9b80 <__addsf3>
 80a7352:	4a51      	ldr	r2, [pc, #324]	; (80a7498 <__ieee754_logf+0x278>)
 80a7354:	f5c6 1357 	rsb	r3, r6, #3522560	; 0x35c000
 80a7358:	4432      	add	r2, r6
 80a735a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80a735e:	4313      	orrs	r3, r2
 80a7360:	2b00      	cmp	r3, #0
 80a7362:	4606      	mov	r6, r0
 80a7364:	dd4f      	ble.n	80a7406 <__ieee754_logf+0x1e6>
 80a7366:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a736a:	4628      	mov	r0, r5
 80a736c:	f002 fd10 	bl	80a9d90 <__aeabi_fmul>
 80a7370:	4629      	mov	r1, r5
 80a7372:	f002 fd0d 	bl	80a9d90 <__aeabi_fmul>
 80a7376:	4607      	mov	r7, r0
 80a7378:	2c00      	cmp	r4, #0
 80a737a:	d051      	beq.n	80a7420 <__ieee754_logf+0x200>
 80a737c:	493d      	ldr	r1, [pc, #244]	; (80a7474 <__ieee754_logf+0x254>)
 80a737e:	4648      	mov	r0, r9
 80a7380:	f002 fd06 	bl	80a9d90 <__aeabi_fmul>
 80a7384:	4639      	mov	r1, r7
 80a7386:	4604      	mov	r4, r0
 80a7388:	4630      	mov	r0, r6
 80a738a:	f002 fbf9 	bl	80a9b80 <__addsf3>
 80a738e:	4641      	mov	r1, r8
 80a7390:	f002 fcfe 	bl	80a9d90 <__aeabi_fmul>
 80a7394:	4938      	ldr	r1, [pc, #224]	; (80a7478 <__ieee754_logf+0x258>)
 80a7396:	4606      	mov	r6, r0
 80a7398:	4648      	mov	r0, r9
 80a739a:	f002 fcf9 	bl	80a9d90 <__aeabi_fmul>
 80a739e:	4601      	mov	r1, r0
 80a73a0:	4630      	mov	r0, r6
 80a73a2:	f002 fbed 	bl	80a9b80 <__addsf3>
 80a73a6:	4601      	mov	r1, r0
 80a73a8:	4638      	mov	r0, r7
 80a73aa:	f002 fbe7 	bl	80a9b7c <__aeabi_fsub>
 80a73ae:	4629      	mov	r1, r5
 80a73b0:	f002 fbe4 	bl	80a9b7c <__aeabi_fsub>
 80a73b4:	4601      	mov	r1, r0
 80a73b6:	4620      	mov	r0, r4
 80a73b8:	f002 fbe0 	bl	80a9b7c <__aeabi_fsub>
 80a73bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a73c0:	4936      	ldr	r1, [pc, #216]	; (80a749c <__ieee754_logf+0x27c>)
 80a73c2:	4628      	mov	r0, r5
 80a73c4:	f002 fce4 	bl	80a9d90 <__aeabi_fmul>
 80a73c8:	4601      	mov	r1, r0
 80a73ca:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80a73ce:	f002 fbd5 	bl	80a9b7c <__aeabi_fsub>
 80a73d2:	4629      	mov	r1, r5
 80a73d4:	4606      	mov	r6, r0
 80a73d6:	4628      	mov	r0, r5
 80a73d8:	f002 fcda 	bl	80a9d90 <__aeabi_fmul>
 80a73dc:	4601      	mov	r1, r0
 80a73de:	4630      	mov	r0, r6
 80a73e0:	f002 fcd6 	bl	80a9d90 <__aeabi_fmul>
 80a73e4:	4606      	mov	r6, r0
 80a73e6:	b35c      	cbz	r4, 80a7440 <__ieee754_logf+0x220>
 80a73e8:	4620      	mov	r0, r4
 80a73ea:	f002 fc7d 	bl	80a9ce8 <__aeabi_i2f>
 80a73ee:	4921      	ldr	r1, [pc, #132]	; (80a7474 <__ieee754_logf+0x254>)
 80a73f0:	4607      	mov	r7, r0
 80a73f2:	f002 fccd 	bl	80a9d90 <__aeabi_fmul>
 80a73f6:	4604      	mov	r4, r0
 80a73f8:	4638      	mov	r0, r7
 80a73fa:	491f      	ldr	r1, [pc, #124]	; (80a7478 <__ieee754_logf+0x258>)
 80a73fc:	f002 fcc8 	bl	80a9d90 <__aeabi_fmul>
 80a7400:	4601      	mov	r1, r0
 80a7402:	4630      	mov	r0, r6
 80a7404:	e7d1      	b.n	80a73aa <__ieee754_logf+0x18a>
 80a7406:	bb04      	cbnz	r4, 80a744a <__ieee754_logf+0x22a>
 80a7408:	4601      	mov	r1, r0
 80a740a:	4628      	mov	r0, r5
 80a740c:	f002 fbb6 	bl	80a9b7c <__aeabi_fsub>
 80a7410:	4641      	mov	r1, r8
 80a7412:	f002 fcbd 	bl	80a9d90 <__aeabi_fmul>
 80a7416:	4601      	mov	r1, r0
 80a7418:	4628      	mov	r0, r5
 80a741a:	f002 fbaf 	bl	80a9b7c <__aeabi_fsub>
 80a741e:	e735      	b.n	80a728c <__ieee754_logf+0x6c>
 80a7420:	4639      	mov	r1, r7
 80a7422:	4630      	mov	r0, r6
 80a7424:	f002 fbac 	bl	80a9b80 <__addsf3>
 80a7428:	4641      	mov	r1, r8
 80a742a:	f002 fcb1 	bl	80a9d90 <__aeabi_fmul>
 80a742e:	4601      	mov	r1, r0
 80a7430:	4638      	mov	r0, r7
 80a7432:	f002 fba3 	bl	80a9b7c <__aeabi_fsub>
 80a7436:	4601      	mov	r1, r0
 80a7438:	4628      	mov	r0, r5
 80a743a:	f002 fb9f 	bl	80a9b7c <__aeabi_fsub>
 80a743e:	e725      	b.n	80a728c <__ieee754_logf+0x6c>
 80a7440:	4601      	mov	r1, r0
 80a7442:	4628      	mov	r0, r5
 80a7444:	f002 fb9a 	bl	80a9b7c <__aeabi_fsub>
 80a7448:	e720      	b.n	80a728c <__ieee754_logf+0x6c>
 80a744a:	490a      	ldr	r1, [pc, #40]	; (80a7474 <__ieee754_logf+0x254>)
 80a744c:	4648      	mov	r0, r9
 80a744e:	f002 fc9f 	bl	80a9d90 <__aeabi_fmul>
 80a7452:	4631      	mov	r1, r6
 80a7454:	4604      	mov	r4, r0
 80a7456:	4628      	mov	r0, r5
 80a7458:	f002 fb90 	bl	80a9b7c <__aeabi_fsub>
 80a745c:	4641      	mov	r1, r8
 80a745e:	f002 fc97 	bl	80a9d90 <__aeabi_fmul>
 80a7462:	4905      	ldr	r1, [pc, #20]	; (80a7478 <__ieee754_logf+0x258>)
 80a7464:	4606      	mov	r6, r0
 80a7466:	4648      	mov	r0, r9
 80a7468:	e7c8      	b.n	80a73fc <__ieee754_logf+0x1dc>
 80a746a:	bf00      	nop
 80a746c:	004afb20 	.word	0x004afb20
 80a7470:	007ffff0 	.word	0x007ffff0
 80a7474:	3f317180 	.word	0x3f317180
 80a7478:	3717f7d1 	.word	0x3717f7d1
 80a747c:	3e178897 	.word	0x3e178897
 80a7480:	3e3a3325 	.word	0x3e3a3325
 80a7484:	3e924925 	.word	0x3e924925
 80a7488:	3f2aaaab 	.word	0x3f2aaaab
 80a748c:	3e1cd04f 	.word	0x3e1cd04f
 80a7490:	3e638e29 	.word	0x3e638e29
 80a7494:	3ecccccd 	.word	0x3ecccccd
 80a7498:	ffcf5c30 	.word	0xffcf5c30
 80a749c:	3eaaaaab 	.word	0x3eaaaaab

080a74a0 <__ieee754_rem_pio2f>:
 80a74a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a74a4:	4aab      	ldr	r2, [pc, #684]	; (80a7754 <__ieee754_rem_pio2f+0x2b4>)
 80a74a6:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80a74aa:	4294      	cmp	r4, r2
 80a74ac:	460d      	mov	r5, r1
 80a74ae:	b089      	sub	sp, #36	; 0x24
 80a74b0:	dd6c      	ble.n	80a758c <__ieee754_rem_pio2f+0xec>
 80a74b2:	4aa9      	ldr	r2, [pc, #676]	; (80a7758 <__ieee754_rem_pio2f+0x2b8>)
 80a74b4:	4607      	mov	r7, r0
 80a74b6:	4294      	cmp	r4, r2
 80a74b8:	dc1c      	bgt.n	80a74f4 <__ieee754_rem_pio2f+0x54>
 80a74ba:	2800      	cmp	r0, #0
 80a74bc:	49a7      	ldr	r1, [pc, #668]	; (80a775c <__ieee754_rem_pio2f+0x2bc>)
 80a74be:	f340 811e 	ble.w	80a76fe <__ieee754_rem_pio2f+0x25e>
 80a74c2:	f002 fb5b 	bl	80a9b7c <__aeabi_fsub>
 80a74c6:	4ba6      	ldr	r3, [pc, #664]	; (80a7760 <__ieee754_rem_pio2f+0x2c0>)
 80a74c8:	f024 040f 	bic.w	r4, r4, #15
 80a74cc:	429c      	cmp	r4, r3
 80a74ce:	4606      	mov	r6, r0
 80a74d0:	d06b      	beq.n	80a75aa <__ieee754_rem_pio2f+0x10a>
 80a74d2:	49a4      	ldr	r1, [pc, #656]	; (80a7764 <__ieee754_rem_pio2f+0x2c4>)
 80a74d4:	f002 fb52 	bl	80a9b7c <__aeabi_fsub>
 80a74d8:	4601      	mov	r1, r0
 80a74da:	4630      	mov	r0, r6
 80a74dc:	6029      	str	r1, [r5, #0]
 80a74de:	f002 fb4d 	bl	80a9b7c <__aeabi_fsub>
 80a74e2:	49a0      	ldr	r1, [pc, #640]	; (80a7764 <__ieee754_rem_pio2f+0x2c4>)
 80a74e4:	f002 fb4a 	bl	80a9b7c <__aeabi_fsub>
 80a74e8:	2601      	movs	r6, #1
 80a74ea:	6068      	str	r0, [r5, #4]
 80a74ec:	4630      	mov	r0, r6
 80a74ee:	b009      	add	sp, #36	; 0x24
 80a74f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a74f4:	4a9c      	ldr	r2, [pc, #624]	; (80a7768 <__ieee754_rem_pio2f+0x2c8>)
 80a74f6:	4294      	cmp	r4, r2
 80a74f8:	dd6c      	ble.n	80a75d4 <__ieee754_rem_pio2f+0x134>
 80a74fa:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80a74fe:	da4d      	bge.n	80a759c <__ieee754_rem_pio2f+0xfc>
 80a7500:	15e6      	asrs	r6, r4, #23
 80a7502:	3e86      	subs	r6, #134	; 0x86
 80a7504:	eba4 54c6 	sub.w	r4, r4, r6, lsl #23
 80a7508:	4620      	mov	r0, r4
 80a750a:	f002 fe1d 	bl	80aa148 <__aeabi_f2iz>
 80a750e:	f002 fbeb 	bl	80a9ce8 <__aeabi_i2f>
 80a7512:	4601      	mov	r1, r0
 80a7514:	4620      	mov	r0, r4
 80a7516:	9105      	str	r1, [sp, #20]
 80a7518:	f002 fb30 	bl	80a9b7c <__aeabi_fsub>
 80a751c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a7520:	f002 fc36 	bl	80a9d90 <__aeabi_fmul>
 80a7524:	4680      	mov	r8, r0
 80a7526:	f002 fe0f 	bl	80aa148 <__aeabi_f2iz>
 80a752a:	f002 fbdd 	bl	80a9ce8 <__aeabi_i2f>
 80a752e:	4604      	mov	r4, r0
 80a7530:	4640      	mov	r0, r8
 80a7532:	4621      	mov	r1, r4
 80a7534:	9406      	str	r4, [sp, #24]
 80a7536:	f002 fb21 	bl	80a9b7c <__aeabi_fsub>
 80a753a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a753e:	f002 fc27 	bl	80a9d90 <__aeabi_fmul>
 80a7542:	2100      	movs	r1, #0
 80a7544:	9007      	str	r0, [sp, #28]
 80a7546:	f002 fdb7 	bl	80aa0b8 <__aeabi_fcmpeq>
 80a754a:	2800      	cmp	r0, #0
 80a754c:	f000 80b8 	beq.w	80a76c0 <__ieee754_rem_pio2f+0x220>
 80a7550:	4620      	mov	r0, r4
 80a7552:	2100      	movs	r1, #0
 80a7554:	f002 fdb0 	bl	80aa0b8 <__aeabi_fcmpeq>
 80a7558:	2800      	cmp	r0, #0
 80a755a:	bf14      	ite	ne
 80a755c:	2301      	movne	r3, #1
 80a755e:	2302      	moveq	r3, #2
 80a7560:	2002      	movs	r0, #2
 80a7562:	4982      	ldr	r1, [pc, #520]	; (80a776c <__ieee754_rem_pio2f+0x2cc>)
 80a7564:	4632      	mov	r2, r6
 80a7566:	e9cd 0100 	strd	r0, r1, [sp]
 80a756a:	4629      	mov	r1, r5
 80a756c:	a805      	add	r0, sp, #20
 80a756e:	f000 ffdf 	bl	80a8530 <__kernel_rem_pio2f>
 80a7572:	2f00      	cmp	r7, #0
 80a7574:	4606      	mov	r6, r0
 80a7576:	dab9      	bge.n	80a74ec <__ieee754_rem_pio2f+0x4c>
 80a7578:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a757c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a7580:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a7584:	4246      	negs	r6, r0
 80a7586:	602a      	str	r2, [r5, #0]
 80a7588:	606b      	str	r3, [r5, #4]
 80a758a:	e7af      	b.n	80a74ec <__ieee754_rem_pio2f+0x4c>
 80a758c:	2600      	movs	r6, #0
 80a758e:	6028      	str	r0, [r5, #0]
 80a7590:	2200      	movs	r2, #0
 80a7592:	4630      	mov	r0, r6
 80a7594:	604a      	str	r2, [r1, #4]
 80a7596:	b009      	add	sp, #36	; 0x24
 80a7598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a759c:	4601      	mov	r1, r0
 80a759e:	f002 faed 	bl	80a9b7c <__aeabi_fsub>
 80a75a2:	2600      	movs	r6, #0
 80a75a4:	6068      	str	r0, [r5, #4]
 80a75a6:	6028      	str	r0, [r5, #0]
 80a75a8:	e7a0      	b.n	80a74ec <__ieee754_rem_pio2f+0x4c>
 80a75aa:	4971      	ldr	r1, [pc, #452]	; (80a7770 <__ieee754_rem_pio2f+0x2d0>)
 80a75ac:	f002 fae6 	bl	80a9b7c <__aeabi_fsub>
 80a75b0:	4970      	ldr	r1, [pc, #448]	; (80a7774 <__ieee754_rem_pio2f+0x2d4>)
 80a75b2:	4604      	mov	r4, r0
 80a75b4:	f002 fae2 	bl	80a9b7c <__aeabi_fsub>
 80a75b8:	4601      	mov	r1, r0
 80a75ba:	4620      	mov	r0, r4
 80a75bc:	6029      	str	r1, [r5, #0]
 80a75be:	f002 fadd 	bl	80a9b7c <__aeabi_fsub>
 80a75c2:	496c      	ldr	r1, [pc, #432]	; (80a7774 <__ieee754_rem_pio2f+0x2d4>)
 80a75c4:	f002 fada 	bl	80a9b7c <__aeabi_fsub>
 80a75c8:	2601      	movs	r6, #1
 80a75ca:	6068      	str	r0, [r5, #4]
 80a75cc:	4630      	mov	r0, r6
 80a75ce:	b009      	add	sp, #36	; 0x24
 80a75d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a75d4:	f001 fd2e 	bl	80a9034 <fabsf>
 80a75d8:	4967      	ldr	r1, [pc, #412]	; (80a7778 <__ieee754_rem_pio2f+0x2d8>)
 80a75da:	4680      	mov	r8, r0
 80a75dc:	f002 fbd8 	bl	80a9d90 <__aeabi_fmul>
 80a75e0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a75e4:	f002 facc 	bl	80a9b80 <__addsf3>
 80a75e8:	f002 fdae 	bl	80aa148 <__aeabi_f2iz>
 80a75ec:	4606      	mov	r6, r0
 80a75ee:	f002 fb7b 	bl	80a9ce8 <__aeabi_i2f>
 80a75f2:	495a      	ldr	r1, [pc, #360]	; (80a775c <__ieee754_rem_pio2f+0x2bc>)
 80a75f4:	4683      	mov	fp, r0
 80a75f6:	f002 fbcb 	bl	80a9d90 <__aeabi_fmul>
 80a75fa:	4601      	mov	r1, r0
 80a75fc:	4640      	mov	r0, r8
 80a75fe:	f002 fabd 	bl	80a9b7c <__aeabi_fsub>
 80a7602:	4958      	ldr	r1, [pc, #352]	; (80a7764 <__ieee754_rem_pio2f+0x2c4>)
 80a7604:	4682      	mov	sl, r0
 80a7606:	4658      	mov	r0, fp
 80a7608:	f002 fbc2 	bl	80a9d90 <__aeabi_fmul>
 80a760c:	2e1f      	cmp	r6, #31
 80a760e:	4681      	mov	r9, r0
 80a7610:	4601      	mov	r1, r0
 80a7612:	4650      	mov	r0, sl
 80a7614:	dc20      	bgt.n	80a7658 <__ieee754_rem_pio2f+0x1b8>
 80a7616:	4b59      	ldr	r3, [pc, #356]	; (80a777c <__ieee754_rem_pio2f+0x2dc>)
 80a7618:	1e72      	subs	r2, r6, #1
 80a761a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a761e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80a7622:	429a      	cmp	r2, r3
 80a7624:	d018      	beq.n	80a7658 <__ieee754_rem_pio2f+0x1b8>
 80a7626:	f002 faa9 	bl	80a9b7c <__aeabi_fsub>
 80a762a:	4680      	mov	r8, r0
 80a762c:	f8c5 8000 	str.w	r8, [r5]
 80a7630:	4641      	mov	r1, r8
 80a7632:	4650      	mov	r0, sl
 80a7634:	f002 faa2 	bl	80a9b7c <__aeabi_fsub>
 80a7638:	4649      	mov	r1, r9
 80a763a:	f002 fa9f 	bl	80a9b7c <__aeabi_fsub>
 80a763e:	2f00      	cmp	r7, #0
 80a7640:	6068      	str	r0, [r5, #4]
 80a7642:	f6bf af53 	bge.w	80a74ec <__ieee754_rem_pio2f+0x4c>
 80a7646:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
 80a764a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a764e:	f8c5 8000 	str.w	r8, [r5]
 80a7652:	6068      	str	r0, [r5, #4]
 80a7654:	4276      	negs	r6, r6
 80a7656:	e749      	b.n	80a74ec <__ieee754_rem_pio2f+0x4c>
 80a7658:	f002 fa90 	bl	80a9b7c <__aeabi_fsub>
 80a765c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80a7660:	ebc3 53d4 	rsb	r3, r3, r4, lsr #23
 80a7664:	2b08      	cmp	r3, #8
 80a7666:	4680      	mov	r8, r0
 80a7668:	ea4f 52e4 	mov.w	r2, r4, asr #23
 80a766c:	ddde      	ble.n	80a762c <__ieee754_rem_pio2f+0x18c>
 80a766e:	4940      	ldr	r1, [pc, #256]	; (80a7770 <__ieee754_rem_pio2f+0x2d0>)
 80a7670:	4658      	mov	r0, fp
 80a7672:	9203      	str	r2, [sp, #12]
 80a7674:	f002 fb8c 	bl	80a9d90 <__aeabi_fmul>
 80a7678:	4680      	mov	r8, r0
 80a767a:	4650      	mov	r0, sl
 80a767c:	4641      	mov	r1, r8
 80a767e:	f002 fa7d 	bl	80a9b7c <__aeabi_fsub>
 80a7682:	4604      	mov	r4, r0
 80a7684:	4650      	mov	r0, sl
 80a7686:	4621      	mov	r1, r4
 80a7688:	f002 fa78 	bl	80a9b7c <__aeabi_fsub>
 80a768c:	4641      	mov	r1, r8
 80a768e:	f002 fa75 	bl	80a9b7c <__aeabi_fsub>
 80a7692:	4680      	mov	r8, r0
 80a7694:	4937      	ldr	r1, [pc, #220]	; (80a7774 <__ieee754_rem_pio2f+0x2d4>)
 80a7696:	4658      	mov	r0, fp
 80a7698:	f002 fb7a 	bl	80a9d90 <__aeabi_fmul>
 80a769c:	4641      	mov	r1, r8
 80a769e:	f002 fa6d 	bl	80a9b7c <__aeabi_fsub>
 80a76a2:	4681      	mov	r9, r0
 80a76a4:	4620      	mov	r0, r4
 80a76a6:	4649      	mov	r1, r9
 80a76a8:	f002 fa68 	bl	80a9b7c <__aeabi_fsub>
 80a76ac:	9a03      	ldr	r2, [sp, #12]
 80a76ae:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80a76b2:	1ad2      	subs	r2, r2, r3
 80a76b4:	2a19      	cmp	r2, #25
 80a76b6:	4680      	mov	r8, r0
 80a76b8:	dc04      	bgt.n	80a76c4 <__ieee754_rem_pio2f+0x224>
 80a76ba:	46a2      	mov	sl, r4
 80a76bc:	6028      	str	r0, [r5, #0]
 80a76be:	e7b7      	b.n	80a7630 <__ieee754_rem_pio2f+0x190>
 80a76c0:	2303      	movs	r3, #3
 80a76c2:	e74d      	b.n	80a7560 <__ieee754_rem_pio2f+0xc0>
 80a76c4:	492e      	ldr	r1, [pc, #184]	; (80a7780 <__ieee754_rem_pio2f+0x2e0>)
 80a76c6:	4658      	mov	r0, fp
 80a76c8:	f002 fb62 	bl	80a9d90 <__aeabi_fmul>
 80a76cc:	4680      	mov	r8, r0
 80a76ce:	4620      	mov	r0, r4
 80a76d0:	4641      	mov	r1, r8
 80a76d2:	f002 fa53 	bl	80a9b7c <__aeabi_fsub>
 80a76d6:	4682      	mov	sl, r0
 80a76d8:	4620      	mov	r0, r4
 80a76da:	4651      	mov	r1, sl
 80a76dc:	f002 fa4e 	bl	80a9b7c <__aeabi_fsub>
 80a76e0:	4641      	mov	r1, r8
 80a76e2:	f002 fa4b 	bl	80a9b7c <__aeabi_fsub>
 80a76e6:	4604      	mov	r4, r0
 80a76e8:	4926      	ldr	r1, [pc, #152]	; (80a7784 <__ieee754_rem_pio2f+0x2e4>)
 80a76ea:	4658      	mov	r0, fp
 80a76ec:	f002 fb50 	bl	80a9d90 <__aeabi_fmul>
 80a76f0:	4621      	mov	r1, r4
 80a76f2:	f002 fa43 	bl	80a9b7c <__aeabi_fsub>
 80a76f6:	4681      	mov	r9, r0
 80a76f8:	4650      	mov	r0, sl
 80a76fa:	4649      	mov	r1, r9
 80a76fc:	e793      	b.n	80a7626 <__ieee754_rem_pio2f+0x186>
 80a76fe:	f002 fa3f 	bl	80a9b80 <__addsf3>
 80a7702:	4b17      	ldr	r3, [pc, #92]	; (80a7760 <__ieee754_rem_pio2f+0x2c0>)
 80a7704:	f024 040f 	bic.w	r4, r4, #15
 80a7708:	429c      	cmp	r4, r3
 80a770a:	4606      	mov	r6, r0
 80a770c:	d00e      	beq.n	80a772c <__ieee754_rem_pio2f+0x28c>
 80a770e:	4915      	ldr	r1, [pc, #84]	; (80a7764 <__ieee754_rem_pio2f+0x2c4>)
 80a7710:	f002 fa36 	bl	80a9b80 <__addsf3>
 80a7714:	4601      	mov	r1, r0
 80a7716:	4630      	mov	r0, r6
 80a7718:	6029      	str	r1, [r5, #0]
 80a771a:	f002 fa2f 	bl	80a9b7c <__aeabi_fsub>
 80a771e:	4911      	ldr	r1, [pc, #68]	; (80a7764 <__ieee754_rem_pio2f+0x2c4>)
 80a7720:	f002 fa2e 	bl	80a9b80 <__addsf3>
 80a7724:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a7728:	6068      	str	r0, [r5, #4]
 80a772a:	e6df      	b.n	80a74ec <__ieee754_rem_pio2f+0x4c>
 80a772c:	4910      	ldr	r1, [pc, #64]	; (80a7770 <__ieee754_rem_pio2f+0x2d0>)
 80a772e:	f002 fa27 	bl	80a9b80 <__addsf3>
 80a7732:	4910      	ldr	r1, [pc, #64]	; (80a7774 <__ieee754_rem_pio2f+0x2d4>)
 80a7734:	4604      	mov	r4, r0
 80a7736:	f002 fa23 	bl	80a9b80 <__addsf3>
 80a773a:	4601      	mov	r1, r0
 80a773c:	4620      	mov	r0, r4
 80a773e:	6029      	str	r1, [r5, #0]
 80a7740:	f002 fa1c 	bl	80a9b7c <__aeabi_fsub>
 80a7744:	490b      	ldr	r1, [pc, #44]	; (80a7774 <__ieee754_rem_pio2f+0x2d4>)
 80a7746:	f002 fa1b 	bl	80a9b80 <__addsf3>
 80a774a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a774e:	6068      	str	r0, [r5, #4]
 80a7750:	e6cc      	b.n	80a74ec <__ieee754_rem_pio2f+0x4c>
 80a7752:	bf00      	nop
 80a7754:	3f490fd8 	.word	0x3f490fd8
 80a7758:	4016cbe3 	.word	0x4016cbe3
 80a775c:	3fc90f80 	.word	0x3fc90f80
 80a7760:	3fc90fd0 	.word	0x3fc90fd0
 80a7764:	37354443 	.word	0x37354443
 80a7768:	43490f80 	.word	0x43490f80
 80a776c:	080aab64 	.word	0x080aab64
 80a7770:	37354400 	.word	0x37354400
 80a7774:	2e85a308 	.word	0x2e85a308
 80a7778:	3f22f984 	.word	0x3f22f984
 80a777c:	080aaae4 	.word	0x080aaae4
 80a7780:	2e85a300 	.word	0x2e85a300
 80a7784:	248d3132 	.word	0x248d3132

080a7788 <__kernel_cos>:
 80a7788:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 80a778c:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80a7790:	b086      	sub	sp, #24
 80a7792:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80a7796:	4688      	mov	r8, r1
 80a7798:	4606      	mov	r6, r0
 80a779a:	e9cd 2300 	strd	r2, r3, [sp]
 80a779e:	da6c      	bge.n	80a787a <__kernel_cos+0xf2>
 80a77a0:	f002 f950 	bl	80a9a44 <__aeabi_d2iz>
 80a77a4:	2800      	cmp	r0, #0
 80a77a6:	f000 80ed 	beq.w	80a7984 <__kernel_cos+0x1fc>
 80a77aa:	4632      	mov	r2, r6
 80a77ac:	4643      	mov	r3, r8
 80a77ae:	4630      	mov	r0, r6
 80a77b0:	4641      	mov	r1, r8
 80a77b2:	f001 fe97 	bl	80a94e4 <__aeabi_dmul>
 80a77b6:	a376      	add	r3, pc, #472	; (adr r3, 80a7990 <__kernel_cos+0x208>)
 80a77b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a77bc:	4604      	mov	r4, r0
 80a77be:	460d      	mov	r5, r1
 80a77c0:	f001 fe90 	bl	80a94e4 <__aeabi_dmul>
 80a77c4:	a374      	add	r3, pc, #464	; (adr r3, 80a7998 <__kernel_cos+0x210>)
 80a77c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a77ca:	f001 fcd5 	bl	80a9178 <__adddf3>
 80a77ce:	4622      	mov	r2, r4
 80a77d0:	462b      	mov	r3, r5
 80a77d2:	f001 fe87 	bl	80a94e4 <__aeabi_dmul>
 80a77d6:	a372      	add	r3, pc, #456	; (adr r3, 80a79a0 <__kernel_cos+0x218>)
 80a77d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a77dc:	f001 fcca 	bl	80a9174 <__aeabi_dsub>
 80a77e0:	4622      	mov	r2, r4
 80a77e2:	462b      	mov	r3, r5
 80a77e4:	f001 fe7e 	bl	80a94e4 <__aeabi_dmul>
 80a77e8:	a36f      	add	r3, pc, #444	; (adr r3, 80a79a8 <__kernel_cos+0x220>)
 80a77ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a77ee:	f001 fcc3 	bl	80a9178 <__adddf3>
 80a77f2:	4622      	mov	r2, r4
 80a77f4:	462b      	mov	r3, r5
 80a77f6:	f001 fe75 	bl	80a94e4 <__aeabi_dmul>
 80a77fa:	a36d      	add	r3, pc, #436	; (adr r3, 80a79b0 <__kernel_cos+0x228>)
 80a77fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7800:	f001 fcb8 	bl	80a9174 <__aeabi_dsub>
 80a7804:	4622      	mov	r2, r4
 80a7806:	462b      	mov	r3, r5
 80a7808:	f001 fe6c 	bl	80a94e4 <__aeabi_dmul>
 80a780c:	a36a      	add	r3, pc, #424	; (adr r3, 80a79b8 <__kernel_cos+0x230>)
 80a780e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7812:	f001 fcb1 	bl	80a9178 <__adddf3>
 80a7816:	4622      	mov	r2, r4
 80a7818:	462b      	mov	r3, r5
 80a781a:	f001 fe63 	bl	80a94e4 <__aeabi_dmul>
 80a781e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a7822:	2200      	movs	r2, #0
 80a7824:	4620      	mov	r0, r4
 80a7826:	4629      	mov	r1, r5
 80a7828:	4b65      	ldr	r3, [pc, #404]	; (80a79c0 <__kernel_cos+0x238>)
 80a782a:	f001 fe5b 	bl	80a94e4 <__aeabi_dmul>
 80a782e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a7832:	4682      	mov	sl, r0
 80a7834:	468b      	mov	fp, r1
 80a7836:	4620      	mov	r0, r4
 80a7838:	4629      	mov	r1, r5
 80a783a:	f001 fe53 	bl	80a94e4 <__aeabi_dmul>
 80a783e:	4632      	mov	r2, r6
 80a7840:	460f      	mov	r7, r1
 80a7842:	4606      	mov	r6, r0
 80a7844:	4641      	mov	r1, r8
 80a7846:	4610      	mov	r0, r2
 80a7848:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a784c:	f001 fe4a 	bl	80a94e4 <__aeabi_dmul>
 80a7850:	4602      	mov	r2, r0
 80a7852:	460b      	mov	r3, r1
 80a7854:	4630      	mov	r0, r6
 80a7856:	4639      	mov	r1, r7
 80a7858:	f001 fc8c 	bl	80a9174 <__aeabi_dsub>
 80a785c:	4602      	mov	r2, r0
 80a785e:	460b      	mov	r3, r1
 80a7860:	4650      	mov	r0, sl
 80a7862:	4659      	mov	r1, fp
 80a7864:	f001 fc86 	bl	80a9174 <__aeabi_dsub>
 80a7868:	4602      	mov	r2, r0
 80a786a:	460b      	mov	r3, r1
 80a786c:	2000      	movs	r0, #0
 80a786e:	4955      	ldr	r1, [pc, #340]	; (80a79c4 <__kernel_cos+0x23c>)
 80a7870:	f001 fc80 	bl	80a9174 <__aeabi_dsub>
 80a7874:	b006      	add	sp, #24
 80a7876:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80a787a:	4602      	mov	r2, r0
 80a787c:	460b      	mov	r3, r1
 80a787e:	f001 fe31 	bl	80a94e4 <__aeabi_dmul>
 80a7882:	a343      	add	r3, pc, #268	; (adr r3, 80a7990 <__kernel_cos+0x208>)
 80a7884:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7888:	4604      	mov	r4, r0
 80a788a:	460d      	mov	r5, r1
 80a788c:	f001 fe2a 	bl	80a94e4 <__aeabi_dmul>
 80a7890:	a341      	add	r3, pc, #260	; (adr r3, 80a7998 <__kernel_cos+0x210>)
 80a7892:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7896:	f001 fc6f 	bl	80a9178 <__adddf3>
 80a789a:	4622      	mov	r2, r4
 80a789c:	462b      	mov	r3, r5
 80a789e:	f001 fe21 	bl	80a94e4 <__aeabi_dmul>
 80a78a2:	a33f      	add	r3, pc, #252	; (adr r3, 80a79a0 <__kernel_cos+0x218>)
 80a78a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a78a8:	f001 fc64 	bl	80a9174 <__aeabi_dsub>
 80a78ac:	4622      	mov	r2, r4
 80a78ae:	462b      	mov	r3, r5
 80a78b0:	f001 fe18 	bl	80a94e4 <__aeabi_dmul>
 80a78b4:	a33c      	add	r3, pc, #240	; (adr r3, 80a79a8 <__kernel_cos+0x220>)
 80a78b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a78ba:	f001 fc5d 	bl	80a9178 <__adddf3>
 80a78be:	4622      	mov	r2, r4
 80a78c0:	462b      	mov	r3, r5
 80a78c2:	f001 fe0f 	bl	80a94e4 <__aeabi_dmul>
 80a78c6:	a33a      	add	r3, pc, #232	; (adr r3, 80a79b0 <__kernel_cos+0x228>)
 80a78c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a78cc:	f001 fc52 	bl	80a9174 <__aeabi_dsub>
 80a78d0:	4622      	mov	r2, r4
 80a78d2:	462b      	mov	r3, r5
 80a78d4:	f001 fe06 	bl	80a94e4 <__aeabi_dmul>
 80a78d8:	a337      	add	r3, pc, #220	; (adr r3, 80a79b8 <__kernel_cos+0x230>)
 80a78da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a78de:	f001 fc4b 	bl	80a9178 <__adddf3>
 80a78e2:	462b      	mov	r3, r5
 80a78e4:	4622      	mov	r2, r4
 80a78e6:	f001 fdfd 	bl	80a94e4 <__aeabi_dmul>
 80a78ea:	4b37      	ldr	r3, [pc, #220]	; (80a79c8 <__kernel_cos+0x240>)
 80a78ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a78f0:	429f      	cmp	r7, r3
 80a78f2:	dd96      	ble.n	80a7822 <__kernel_cos+0x9a>
 80a78f4:	4b35      	ldr	r3, [pc, #212]	; (80a79cc <__kernel_cos+0x244>)
 80a78f6:	429f      	cmp	r7, r3
 80a78f8:	dc3b      	bgt.n	80a7972 <__kernel_cos+0x1ea>
 80a78fa:	f04f 0a00 	mov.w	sl, #0
 80a78fe:	f5a7 1b00 	sub.w	fp, r7, #2097152	; 0x200000
 80a7902:	2000      	movs	r0, #0
 80a7904:	4652      	mov	r2, sl
 80a7906:	465b      	mov	r3, fp
 80a7908:	492e      	ldr	r1, [pc, #184]	; (80a79c4 <__kernel_cos+0x23c>)
 80a790a:	f001 fc33 	bl	80a9174 <__aeabi_dsub>
 80a790e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a7912:	2200      	movs	r2, #0
 80a7914:	4620      	mov	r0, r4
 80a7916:	4629      	mov	r1, r5
 80a7918:	4b29      	ldr	r3, [pc, #164]	; (80a79c0 <__kernel_cos+0x238>)
 80a791a:	f001 fde3 	bl	80a94e4 <__aeabi_dmul>
 80a791e:	4652      	mov	r2, sl
 80a7920:	465b      	mov	r3, fp
 80a7922:	f001 fc27 	bl	80a9174 <__aeabi_dsub>
 80a7926:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a792a:	4682      	mov	sl, r0
 80a792c:	468b      	mov	fp, r1
 80a792e:	4620      	mov	r0, r4
 80a7930:	4629      	mov	r1, r5
 80a7932:	f001 fdd7 	bl	80a94e4 <__aeabi_dmul>
 80a7936:	4632      	mov	r2, r6
 80a7938:	460f      	mov	r7, r1
 80a793a:	4606      	mov	r6, r0
 80a793c:	4641      	mov	r1, r8
 80a793e:	4610      	mov	r0, r2
 80a7940:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a7944:	f001 fdce 	bl	80a94e4 <__aeabi_dmul>
 80a7948:	4602      	mov	r2, r0
 80a794a:	460b      	mov	r3, r1
 80a794c:	4630      	mov	r0, r6
 80a794e:	4639      	mov	r1, r7
 80a7950:	f001 fc10 	bl	80a9174 <__aeabi_dsub>
 80a7954:	4602      	mov	r2, r0
 80a7956:	460b      	mov	r3, r1
 80a7958:	4650      	mov	r0, sl
 80a795a:	4659      	mov	r1, fp
 80a795c:	f001 fc0a 	bl	80a9174 <__aeabi_dsub>
 80a7960:	4602      	mov	r2, r0
 80a7962:	460b      	mov	r3, r1
 80a7964:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a7968:	f001 fc04 	bl	80a9174 <__aeabi_dsub>
 80a796c:	b006      	add	sp, #24
 80a796e:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80a7972:	2200      	movs	r2, #0
 80a7974:	4b16      	ldr	r3, [pc, #88]	; (80a79d0 <__kernel_cos+0x248>)
 80a7976:	f04f 0a00 	mov.w	sl, #0
 80a797a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a797e:	f8df b054 	ldr.w	fp, [pc, #84]	; 80a79d4 <__kernel_cos+0x24c>
 80a7982:	e7c6      	b.n	80a7912 <__kernel_cos+0x18a>
 80a7984:	2000      	movs	r0, #0
 80a7986:	490f      	ldr	r1, [pc, #60]	; (80a79c4 <__kernel_cos+0x23c>)
 80a7988:	b006      	add	sp, #24
 80a798a:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80a798e:	bf00      	nop
 80a7990:	be8838d4 	.word	0xbe8838d4
 80a7994:	bda8fae9 	.word	0xbda8fae9
 80a7998:	bdb4b1c4 	.word	0xbdb4b1c4
 80a799c:	3e21ee9e 	.word	0x3e21ee9e
 80a79a0:	809c52ad 	.word	0x809c52ad
 80a79a4:	3e927e4f 	.word	0x3e927e4f
 80a79a8:	19cb1590 	.word	0x19cb1590
 80a79ac:	3efa01a0 	.word	0x3efa01a0
 80a79b0:	16c15177 	.word	0x16c15177
 80a79b4:	3f56c16c 	.word	0x3f56c16c
 80a79b8:	5555554c 	.word	0x5555554c
 80a79bc:	3fa55555 	.word	0x3fa55555
 80a79c0:	3fe00000 	.word	0x3fe00000
 80a79c4:	3ff00000 	.word	0x3ff00000
 80a79c8:	3fd33332 	.word	0x3fd33332
 80a79cc:	3fe90000 	.word	0x3fe90000
 80a79d0:	3fe70000 	.word	0x3fe70000
 80a79d4:	3fd20000 	.word	0x3fd20000

080a79d8 <__kernel_rem_pio2>:
 80a79d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a79dc:	461c      	mov	r4, r3
 80a79de:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80a79e2:	910b      	str	r1, [sp, #44]	; 0x2c
 80a79e4:	1e61      	subs	r1, r4, #1
 80a79e6:	9308      	str	r3, [sp, #32]
 80a79e8:	9103      	str	r1, [sp, #12]
 80a79ea:	4bb8      	ldr	r3, [pc, #736]	; (80a7ccc <__kernel_rem_pio2+0x2f4>)
 80a79ec:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80a79ee:	f112 0f14 	cmn.w	r2, #20
 80a79f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80a79f6:	4607      	mov	r7, r0
 80a79f8:	9305      	str	r3, [sp, #20]
 80a79fa:	f2c0 8341 	blt.w	80a8080 <__kernel_rem_pio2+0x6a8>
 80a79fe:	49b4      	ldr	r1, [pc, #720]	; (80a7cd0 <__kernel_rem_pio2+0x2f8>)
 80a7a00:	1ed3      	subs	r3, r2, #3
 80a7a02:	fb81 0103 	smull	r0, r1, r1, r3
 80a7a06:	17db      	asrs	r3, r3, #31
 80a7a08:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 80a7a0c:	9307      	str	r3, [sp, #28]
 80a7a0e:	3301      	adds	r3, #1
 80a7a10:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80a7a14:	00db      	lsls	r3, r3, #3
 80a7a16:	18d3      	adds	r3, r2, r3
 80a7a18:	9306      	str	r3, [sp, #24]
 80a7a1a:	9a07      	ldr	r2, [sp, #28]
 80a7a1c:	9b03      	ldr	r3, [sp, #12]
 80a7a1e:	1ad6      	subs	r6, r2, r3
 80a7a20:	9a05      	ldr	r2, [sp, #20]
 80a7a22:	eb12 0903 	adds.w	r9, r2, r3
 80a7a26:	d41b      	bmi.n	80a7a60 <__kernel_rem_pio2+0x88>
 80a7a28:	f109 0901 	add.w	r9, r9, #1
 80a7a2c:	2400      	movs	r4, #0
 80a7a2e:	2500      	movs	r5, #0
 80a7a30:	f8dd a28c 	ldr.w	sl, [sp, #652]	; 0x28c
 80a7a34:	44b1      	add	r9, r6
 80a7a36:	f10d 0880 	add.w	r8, sp, #128	; 0x80
 80a7a3a:	e008      	b.n	80a7a4e <__kernel_rem_pio2+0x76>
 80a7a3c:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 80a7a40:	f001 fce6 	bl	80a9410 <__aeabi_i2d>
 80a7a44:	3601      	adds	r6, #1
 80a7a46:	454e      	cmp	r6, r9
 80a7a48:	e8e8 0102 	strd	r0, r1, [r8], #8
 80a7a4c:	d008      	beq.n	80a7a60 <__kernel_rem_pio2+0x88>
 80a7a4e:	2e00      	cmp	r6, #0
 80a7a50:	daf4      	bge.n	80a7a3c <__kernel_rem_pio2+0x64>
 80a7a52:	4620      	mov	r0, r4
 80a7a54:	4629      	mov	r1, r5
 80a7a56:	3601      	adds	r6, #1
 80a7a58:	454e      	cmp	r6, r9
 80a7a5a:	e8e8 0102 	strd	r0, r1, [r8], #8
 80a7a5e:	d1f6      	bne.n	80a7a4e <__kernel_rem_pio2+0x76>
 80a7a60:	9b05      	ldr	r3, [sp, #20]
 80a7a62:	2b00      	cmp	r3, #0
 80a7a64:	f1a7 0308 	sub.w	r3, r7, #8
 80a7a68:	9304      	str	r3, [sp, #16]
 80a7a6a:	f2c0 83b8 	blt.w	80a81de <__kernel_rem_pio2+0x806>
 80a7a6e:	4619      	mov	r1, r3
 80a7a70:	9b08      	ldr	r3, [sp, #32]
 80a7a72:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80a7a76:	00da      	lsls	r2, r3, #3
 80a7a78:	9202      	str	r2, [sp, #8]
 80a7a7a:	9a05      	ldr	r2, [sp, #20]
 80a7a7c:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 80a7a80:	a920      	add	r1, sp, #128	; 0x80
 80a7a82:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 80a7a86:	18d3      	adds	r3, r2, r3
 80a7a88:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80a7a8c:	9301      	str	r3, [sp, #4]
 80a7a8e:	9b03      	ldr	r3, [sp, #12]
 80a7a90:	2b00      	cmp	r3, #0
 80a7a92:	f2c0 81b0 	blt.w	80a7df6 <__kernel_rem_pio2+0x41e>
 80a7a96:	4657      	mov	r7, sl
 80a7a98:	2400      	movs	r4, #0
 80a7a9a:	2500      	movs	r5, #0
 80a7a9c:	9e04      	ldr	r6, [sp, #16]
 80a7a9e:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 80a7aa2:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 80a7aa6:	f001 fd1d 	bl	80a94e4 <__aeabi_dmul>
 80a7aaa:	4602      	mov	r2, r0
 80a7aac:	460b      	mov	r3, r1
 80a7aae:	4620      	mov	r0, r4
 80a7ab0:	4629      	mov	r1, r5
 80a7ab2:	f001 fb61 	bl	80a9178 <__adddf3>
 80a7ab6:	4546      	cmp	r6, r8
 80a7ab8:	4604      	mov	r4, r0
 80a7aba:	460d      	mov	r5, r1
 80a7abc:	d1ef      	bne.n	80a7a9e <__kernel_rem_pio2+0xc6>
 80a7abe:	9b01      	ldr	r3, [sp, #4]
 80a7ac0:	f109 0901 	add.w	r9, r9, #1
 80a7ac4:	4599      	cmp	r9, r3
 80a7ac6:	e8eb 4502 	strd	r4, r5, [fp], #8
 80a7aca:	f10a 0a08 	add.w	sl, sl, #8
 80a7ace:	d1de      	bne.n	80a7a8e <__kernel_rem_pio2+0xb6>
 80a7ad0:	9a05      	ldr	r2, [sp, #20]
 80a7ad2:	a90c      	add	r1, sp, #48	; 0x30
 80a7ad4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80a7ad8:	9804      	ldr	r0, [sp, #16]
 80a7ada:	9902      	ldr	r1, [sp, #8]
 80a7adc:	3b08      	subs	r3, #8
 80a7ade:	4401      	add	r1, r0
 80a7ae0:	468b      	mov	fp, r1
 80a7ae2:	9309      	str	r3, [sp, #36]	; 0x24
 80a7ae4:	ab0b      	add	r3, sp, #44	; 0x2c
 80a7ae6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a7aea:	9201      	str	r2, [sp, #4]
 80a7aec:	930a      	str	r3, [sp, #40]	; 0x28
 80a7aee:	9a01      	ldr	r2, [sp, #4]
 80a7af0:	a998      	add	r1, sp, #608	; 0x260
 80a7af2:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 80a7af6:	2a00      	cmp	r2, #0
 80a7af8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80a7afc:	dd2a      	ble.n	80a7b54 <__kernel_rem_pio2+0x17c>
 80a7afe:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80a7b02:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80a7b06:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 80a7b0a:	2200      	movs	r2, #0
 80a7b0c:	4b71      	ldr	r3, [pc, #452]	; (80a7cd4 <__kernel_rem_pio2+0x2fc>)
 80a7b0e:	4620      	mov	r0, r4
 80a7b10:	4629      	mov	r1, r5
 80a7b12:	f001 fce7 	bl	80a94e4 <__aeabi_dmul>
 80a7b16:	f001 ff95 	bl	80a9a44 <__aeabi_d2iz>
 80a7b1a:	f001 fc79 	bl	80a9410 <__aeabi_i2d>
 80a7b1e:	2200      	movs	r2, #0
 80a7b20:	4b6d      	ldr	r3, [pc, #436]	; (80a7cd8 <__kernel_rem_pio2+0x300>)
 80a7b22:	4606      	mov	r6, r0
 80a7b24:	460f      	mov	r7, r1
 80a7b26:	f001 fcdd 	bl	80a94e4 <__aeabi_dmul>
 80a7b2a:	4602      	mov	r2, r0
 80a7b2c:	460b      	mov	r3, r1
 80a7b2e:	4620      	mov	r0, r4
 80a7b30:	4629      	mov	r1, r5
 80a7b32:	f001 fb1f 	bl	80a9174 <__aeabi_dsub>
 80a7b36:	f001 ff85 	bl	80a9a44 <__aeabi_d2iz>
 80a7b3a:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80a7b3e:	4604      	mov	r4, r0
 80a7b40:	4639      	mov	r1, r7
 80a7b42:	f849 4b04 	str.w	r4, [r9], #4
 80a7b46:	4630      	mov	r0, r6
 80a7b48:	f001 fb16 	bl	80a9178 <__adddf3>
 80a7b4c:	45d0      	cmp	r8, sl
 80a7b4e:	4604      	mov	r4, r0
 80a7b50:	460d      	mov	r5, r1
 80a7b52:	d1da      	bne.n	80a7b0a <__kernel_rem_pio2+0x132>
 80a7b54:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80a7b58:	4620      	mov	r0, r4
 80a7b5a:	4629      	mov	r1, r5
 80a7b5c:	464a      	mov	r2, r9
 80a7b5e:	f001 f9ef 	bl	80a8f40 <scalbn>
 80a7b62:	2200      	movs	r2, #0
 80a7b64:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80a7b68:	4604      	mov	r4, r0
 80a7b6a:	460d      	mov	r5, r1
 80a7b6c:	f001 fcba 	bl	80a94e4 <__aeabi_dmul>
 80a7b70:	f001 f8d2 	bl	80a8d18 <floor>
 80a7b74:	2200      	movs	r2, #0
 80a7b76:	4b59      	ldr	r3, [pc, #356]	; (80a7cdc <__kernel_rem_pio2+0x304>)
 80a7b78:	f001 fcb4 	bl	80a94e4 <__aeabi_dmul>
 80a7b7c:	4602      	mov	r2, r0
 80a7b7e:	460b      	mov	r3, r1
 80a7b80:	4620      	mov	r0, r4
 80a7b82:	4629      	mov	r1, r5
 80a7b84:	f001 faf6 	bl	80a9174 <__aeabi_dsub>
 80a7b88:	4604      	mov	r4, r0
 80a7b8a:	460d      	mov	r5, r1
 80a7b8c:	f001 ff5a 	bl	80a9a44 <__aeabi_d2iz>
 80a7b90:	4680      	mov	r8, r0
 80a7b92:	f001 fc3d 	bl	80a9410 <__aeabi_i2d>
 80a7b96:	4602      	mov	r2, r0
 80a7b98:	460b      	mov	r3, r1
 80a7b9a:	4620      	mov	r0, r4
 80a7b9c:	4629      	mov	r1, r5
 80a7b9e:	464c      	mov	r4, r9
 80a7ba0:	f001 fae8 	bl	80a9174 <__aeabi_dsub>
 80a7ba4:	2c00      	cmp	r4, #0
 80a7ba6:	4606      	mov	r6, r0
 80a7ba8:	460f      	mov	r7, r1
 80a7baa:	f340 8099 	ble.w	80a7ce0 <__kernel_rem_pio2+0x308>
 80a7bae:	9b01      	ldr	r3, [sp, #4]
 80a7bb0:	f1c9 0218 	rsb	r2, r9, #24
 80a7bb4:	1e58      	subs	r0, r3, #1
 80a7bb6:	ab0c      	add	r3, sp, #48	; 0x30
 80a7bb8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80a7bbc:	f1c9 0517 	rsb	r5, r9, #23
 80a7bc0:	fa43 f102 	asr.w	r1, r3, r2
 80a7bc4:	fa01 f202 	lsl.w	r2, r1, r2
 80a7bc8:	1a9b      	subs	r3, r3, r2
 80a7bca:	fa43 f505 	asr.w	r5, r3, r5
 80a7bce:	aa0c      	add	r2, sp, #48	; 0x30
 80a7bd0:	2d00      	cmp	r5, #0
 80a7bd2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80a7bd6:	4488      	add	r8, r1
 80a7bd8:	f300 808c 	bgt.w	80a7cf4 <__kernel_rem_pio2+0x31c>
 80a7bdc:	2200      	movs	r2, #0
 80a7bde:	2300      	movs	r3, #0
 80a7be0:	4630      	mov	r0, r6
 80a7be2:	4639      	mov	r1, r7
 80a7be4:	f001 fee6 	bl	80a99b4 <__aeabi_dcmpeq>
 80a7be8:	2800      	cmp	r0, #0
 80a7bea:	f000 8250 	beq.w	80a808e <__kernel_rem_pio2+0x6b6>
 80a7bee:	9b01      	ldr	r3, [sp, #4]
 80a7bf0:	9a05      	ldr	r2, [sp, #20]
 80a7bf2:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80a7bf6:	4552      	cmp	r2, sl
 80a7bf8:	dc10      	bgt.n	80a7c1c <__kernel_rem_pio2+0x244>
 80a7bfa:	2200      	movs	r2, #0
 80a7bfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a7c00:	3b01      	subs	r3, #1
 80a7c02:	a90c      	add	r1, sp, #48	; 0x30
 80a7c04:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a7c06:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a7c0a:	f853 1904 	ldr.w	r1, [r3], #-4
 80a7c0e:	4283      	cmp	r3, r0
 80a7c10:	ea42 0201 	orr.w	r2, r2, r1
 80a7c14:	d1f9      	bne.n	80a7c0a <__kernel_rem_pio2+0x232>
 80a7c16:	2a00      	cmp	r2, #0
 80a7c18:	f040 80f0 	bne.w	80a7dfc <__kernel_rem_pio2+0x424>
 80a7c1c:	9b05      	ldr	r3, [sp, #20]
 80a7c1e:	aa0c      	add	r2, sp, #48	; 0x30
 80a7c20:	3b01      	subs	r3, #1
 80a7c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a7c26:	2b00      	cmp	r3, #0
 80a7c28:	f040 80e0 	bne.w	80a7dec <__kernel_rem_pio2+0x414>
 80a7c2c:	2301      	movs	r3, #1
 80a7c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a7c30:	f852 1904 	ldr.w	r1, [r2], #-4
 80a7c34:	3301      	adds	r3, #1
 80a7c36:	2900      	cmp	r1, #0
 80a7c38:	d0fa      	beq.n	80a7c30 <__kernel_rem_pio2+0x258>
 80a7c3a:	9901      	ldr	r1, [sp, #4]
 80a7c3c:	1c4a      	adds	r2, r1, #1
 80a7c3e:	4691      	mov	r9, r2
 80a7c40:	18cb      	adds	r3, r1, r3
 80a7c42:	9302      	str	r3, [sp, #8]
 80a7c44:	9b07      	ldr	r3, [sp, #28]
 80a7c46:	9908      	ldr	r1, [sp, #32]
 80a7c48:	eb02 0a03 	add.w	sl, r2, r3
 80a7c4c:	9b01      	ldr	r3, [sp, #4]
 80a7c4e:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 80a7c52:	440b      	add	r3, r1
 80a7c54:	4698      	mov	r8, r3
 80a7c56:	ab20      	add	r3, sp, #128	; 0x80
 80a7c58:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80a7c5c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80a7c5e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80a7c62:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 80a7c66:	ab70      	add	r3, sp, #448	; 0x1c0
 80a7c68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a7c6c:	9301      	str	r3, [sp, #4]
 80a7c6e:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80a7c72:	f001 fbcd 	bl	80a9410 <__aeabi_i2d>
 80a7c76:	9b03      	ldr	r3, [sp, #12]
 80a7c78:	4647      	mov	r7, r8
 80a7c7a:	2b00      	cmp	r3, #0
 80a7c7c:	e9c8 0100 	strd	r0, r1, [r8]
 80a7c80:	f108 0808 	add.w	r8, r8, #8
 80a7c84:	db1f      	blt.n	80a7cc6 <__kernel_rem_pio2+0x2ee>
 80a7c86:	2400      	movs	r4, #0
 80a7c88:	2500      	movs	r5, #0
 80a7c8a:	9e04      	ldr	r6, [sp, #16]
 80a7c8c:	3f08      	subs	r7, #8
 80a7c8e:	e001      	b.n	80a7c94 <__kernel_rem_pio2+0x2bc>
 80a7c90:	e877 0102 	ldrd	r0, r1, [r7], #-8
 80a7c94:	e9f6 2302 	ldrd	r2, r3, [r6, #8]!
 80a7c98:	f001 fc24 	bl	80a94e4 <__aeabi_dmul>
 80a7c9c:	4602      	mov	r2, r0
 80a7c9e:	460b      	mov	r3, r1
 80a7ca0:	4620      	mov	r0, r4
 80a7ca2:	4629      	mov	r1, r5
 80a7ca4:	f001 fa68 	bl	80a9178 <__adddf3>
 80a7ca8:	455e      	cmp	r6, fp
 80a7caa:	4604      	mov	r4, r0
 80a7cac:	460d      	mov	r5, r1
 80a7cae:	d1ef      	bne.n	80a7c90 <__kernel_rem_pio2+0x2b8>
 80a7cb0:	9b01      	ldr	r3, [sp, #4]
 80a7cb2:	f109 0901 	add.w	r9, r9, #1
 80a7cb6:	e8e3 4502 	strd	r4, r5, [r3], #8
 80a7cba:	9301      	str	r3, [sp, #4]
 80a7cbc:	9b02      	ldr	r3, [sp, #8]
 80a7cbe:	4599      	cmp	r9, r3
 80a7cc0:	ddd5      	ble.n	80a7c6e <__kernel_rem_pio2+0x296>
 80a7cc2:	9301      	str	r3, [sp, #4]
 80a7cc4:	e713      	b.n	80a7aee <__kernel_rem_pio2+0x116>
 80a7cc6:	2400      	movs	r4, #0
 80a7cc8:	2500      	movs	r5, #0
 80a7cca:	e7f1      	b.n	80a7cb0 <__kernel_rem_pio2+0x2d8>
 80a7ccc:	080aaec0 	.word	0x080aaec0
 80a7cd0:	2aaaaaab 	.word	0x2aaaaaab
 80a7cd4:	3e700000 	.word	0x3e700000
 80a7cd8:	41700000 	.word	0x41700000
 80a7cdc:	40200000 	.word	0x40200000
 80a7ce0:	d16b      	bne.n	80a7dba <__kernel_rem_pio2+0x3e2>
 80a7ce2:	9b01      	ldr	r3, [sp, #4]
 80a7ce4:	aa0c      	add	r2, sp, #48	; 0x30
 80a7ce6:	3b01      	subs	r3, #1
 80a7ce8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80a7cec:	15ed      	asrs	r5, r5, #23
 80a7cee:	2d00      	cmp	r5, #0
 80a7cf0:	f77f af74 	ble.w	80a7bdc <__kernel_rem_pio2+0x204>
 80a7cf4:	9b01      	ldr	r3, [sp, #4]
 80a7cf6:	f108 0801 	add.w	r8, r8, #1
 80a7cfa:	2b00      	cmp	r3, #0
 80a7cfc:	f340 81c5 	ble.w	80a808a <__kernel_rem_pio2+0x6b2>
 80a7d00:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a7d02:	2c00      	cmp	r4, #0
 80a7d04:	d151      	bne.n	80a7daa <__kernel_rem_pio2+0x3d2>
 80a7d06:	9b01      	ldr	r3, [sp, #4]
 80a7d08:	2b01      	cmp	r3, #1
 80a7d0a:	d020      	beq.n	80a7d4e <__kernel_rem_pio2+0x376>
 80a7d0c:	2201      	movs	r2, #1
 80a7d0e:	ab0c      	add	r3, sp, #48	; 0x30
 80a7d10:	f853 4f04 	ldr.w	r4, [r3, #4]!
 80a7d14:	2c00      	cmp	r4, #0
 80a7d16:	d04b      	beq.n	80a7db0 <__kernel_rem_pio2+0x3d8>
 80a7d18:	1c53      	adds	r3, r2, #1
 80a7d1a:	a90c      	add	r1, sp, #48	; 0x30
 80a7d1c:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 80a7d20:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 80a7d24:	9901      	ldr	r1, [sp, #4]
 80a7d26:	4299      	cmp	r1, r3
 80a7d28:	dd10      	ble.n	80a7d4c <__kernel_rem_pio2+0x374>
 80a7d2a:	ac0c      	add	r4, sp, #48	; 0x30
 80a7d2c:	aa0c      	add	r2, sp, #48	; 0x30
 80a7d2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80a7d32:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80a7d36:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80a7d3a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80a7d3e:	e000      	b.n	80a7d42 <__kernel_rem_pio2+0x36a>
 80a7d40:	681a      	ldr	r2, [r3, #0]
 80a7d42:	1a82      	subs	r2, r0, r2
 80a7d44:	f843 2b04 	str.w	r2, [r3], #4
 80a7d48:	428b      	cmp	r3, r1
 80a7d4a:	d1f9      	bne.n	80a7d40 <__kernel_rem_pio2+0x368>
 80a7d4c:	2401      	movs	r4, #1
 80a7d4e:	9b06      	ldr	r3, [sp, #24]
 80a7d50:	2b00      	cmp	r3, #0
 80a7d52:	dd0e      	ble.n	80a7d72 <__kernel_rem_pio2+0x39a>
 80a7d54:	2b01      	cmp	r3, #1
 80a7d56:	f000 817a 	beq.w	80a804e <__kernel_rem_pio2+0x676>
 80a7d5a:	2b02      	cmp	r3, #2
 80a7d5c:	d109      	bne.n	80a7d72 <__kernel_rem_pio2+0x39a>
 80a7d5e:	9b01      	ldr	r3, [sp, #4]
 80a7d60:	a90c      	add	r1, sp, #48	; 0x30
 80a7d62:	1e5a      	subs	r2, r3, #1
 80a7d64:	ab0c      	add	r3, sp, #48	; 0x30
 80a7d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7d6a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80a7d6e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a7d72:	2d02      	cmp	r5, #2
 80a7d74:	f47f af32 	bne.w	80a7bdc <__kernel_rem_pio2+0x204>
 80a7d78:	4632      	mov	r2, r6
 80a7d7a:	463b      	mov	r3, r7
 80a7d7c:	2000      	movs	r0, #0
 80a7d7e:	49bc      	ldr	r1, [pc, #752]	; (80a8070 <__kernel_rem_pio2+0x698>)
 80a7d80:	f001 f9f8 	bl	80a9174 <__aeabi_dsub>
 80a7d84:	4606      	mov	r6, r0
 80a7d86:	460f      	mov	r7, r1
 80a7d88:	2c00      	cmp	r4, #0
 80a7d8a:	f43f af27 	beq.w	80a7bdc <__kernel_rem_pio2+0x204>
 80a7d8e:	9a06      	ldr	r2, [sp, #24]
 80a7d90:	2000      	movs	r0, #0
 80a7d92:	49b7      	ldr	r1, [pc, #732]	; (80a8070 <__kernel_rem_pio2+0x698>)
 80a7d94:	f001 f8d4 	bl	80a8f40 <scalbn>
 80a7d98:	4602      	mov	r2, r0
 80a7d9a:	460b      	mov	r3, r1
 80a7d9c:	4630      	mov	r0, r6
 80a7d9e:	4639      	mov	r1, r7
 80a7da0:	f001 f9e8 	bl	80a9174 <__aeabi_dsub>
 80a7da4:	4606      	mov	r6, r0
 80a7da6:	460f      	mov	r7, r1
 80a7da8:	e718      	b.n	80a7bdc <__kernel_rem_pio2+0x204>
 80a7daa:	2301      	movs	r3, #1
 80a7dac:	2200      	movs	r2, #0
 80a7dae:	e7b4      	b.n	80a7d1a <__kernel_rem_pio2+0x342>
 80a7db0:	9901      	ldr	r1, [sp, #4]
 80a7db2:	3201      	adds	r2, #1
 80a7db4:	428a      	cmp	r2, r1
 80a7db6:	d1ab      	bne.n	80a7d10 <__kernel_rem_pio2+0x338>
 80a7db8:	e7c9      	b.n	80a7d4e <__kernel_rem_pio2+0x376>
 80a7dba:	2200      	movs	r2, #0
 80a7dbc:	4bad      	ldr	r3, [pc, #692]	; (80a8074 <__kernel_rem_pio2+0x69c>)
 80a7dbe:	f001 fe17 	bl	80a99f0 <__aeabi_dcmpge>
 80a7dc2:	4605      	mov	r5, r0
 80a7dc4:	2800      	cmp	r0, #0
 80a7dc6:	f43f af09 	beq.w	80a7bdc <__kernel_rem_pio2+0x204>
 80a7dca:	9b01      	ldr	r3, [sp, #4]
 80a7dcc:	f108 0801 	add.w	r8, r8, #1
 80a7dd0:	2b00      	cmp	r3, #0
 80a7dd2:	bfc8      	it	gt
 80a7dd4:	2502      	movgt	r5, #2
 80a7dd6:	dc93      	bgt.n	80a7d00 <__kernel_rem_pio2+0x328>
 80a7dd8:	4632      	mov	r2, r6
 80a7dda:	463b      	mov	r3, r7
 80a7ddc:	2000      	movs	r0, #0
 80a7dde:	49a4      	ldr	r1, [pc, #656]	; (80a8070 <__kernel_rem_pio2+0x698>)
 80a7de0:	f001 f9c8 	bl	80a9174 <__aeabi_dsub>
 80a7de4:	2502      	movs	r5, #2
 80a7de6:	4606      	mov	r6, r0
 80a7de8:	460f      	mov	r7, r1
 80a7dea:	e6f7      	b.n	80a7bdc <__kernel_rem_pio2+0x204>
 80a7dec:	9b01      	ldr	r3, [sp, #4]
 80a7dee:	1c5a      	adds	r2, r3, #1
 80a7df0:	4691      	mov	r9, r2
 80a7df2:	9202      	str	r2, [sp, #8]
 80a7df4:	e726      	b.n	80a7c44 <__kernel_rem_pio2+0x26c>
 80a7df6:	2400      	movs	r4, #0
 80a7df8:	2500      	movs	r5, #0
 80a7dfa:	e660      	b.n	80a7abe <__kernel_rem_pio2+0xe6>
 80a7dfc:	9a06      	ldr	r2, [sp, #24]
 80a7dfe:	ab0c      	add	r3, sp, #48	; 0x30
 80a7e00:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 80a7e04:	3a18      	subs	r2, #24
 80a7e06:	f8cd 801c 	str.w	r8, [sp, #28]
 80a7e0a:	9503      	str	r5, [sp, #12]
 80a7e0c:	9206      	str	r2, [sp, #24]
 80a7e0e:	b973      	cbnz	r3, 80a7e2e <__kernel_rem_pio2+0x456>
 80a7e10:	9b01      	ldr	r3, [sp, #4]
 80a7e12:	a90c      	add	r1, sp, #48	; 0x30
 80a7e14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a7e18:	3b02      	subs	r3, #2
 80a7e1a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a7e1e:	f853 1904 	ldr.w	r1, [r3], #-4
 80a7e22:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80a7e26:	3a18      	subs	r2, #24
 80a7e28:	2900      	cmp	r1, #0
 80a7e2a:	d0f8      	beq.n	80a7e1e <__kernel_rem_pio2+0x446>
 80a7e2c:	9206      	str	r2, [sp, #24]
 80a7e2e:	2000      	movs	r0, #0
 80a7e30:	9a06      	ldr	r2, [sp, #24]
 80a7e32:	498f      	ldr	r1, [pc, #572]	; (80a8070 <__kernel_rem_pio2+0x698>)
 80a7e34:	f001 f884 	bl	80a8f40 <scalbn>
 80a7e38:	f1ba 0f00 	cmp.w	sl, #0
 80a7e3c:	4604      	mov	r4, r0
 80a7e3e:	460d      	mov	r5, r1
 80a7e40:	f2c0 81d1 	blt.w	80a81e6 <__kernel_rem_pio2+0x80e>
 80a7e44:	ab70      	add	r3, sp, #448	; 0x1c0
 80a7e46:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 80a7e4a:	aa0c      	add	r2, sp, #48	; 0x30
 80a7e4c:	f10a 0301 	add.w	r3, sl, #1
 80a7e50:	9306      	str	r3, [sp, #24]
 80a7e52:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 80a7e56:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80a7e5a:	f10b 0908 	add.w	r9, fp, #8
 80a7e5e:	9304      	str	r3, [sp, #16]
 80a7e60:	f858 0d04 	ldr.w	r0, [r8, #-4]!
 80a7e64:	f001 fad4 	bl	80a9410 <__aeabi_i2d>
 80a7e68:	4622      	mov	r2, r4
 80a7e6a:	462b      	mov	r3, r5
 80a7e6c:	f001 fb3a 	bl	80a94e4 <__aeabi_dmul>
 80a7e70:	4606      	mov	r6, r0
 80a7e72:	460f      	mov	r7, r1
 80a7e74:	4620      	mov	r0, r4
 80a7e76:	4629      	mov	r1, r5
 80a7e78:	4b7f      	ldr	r3, [pc, #508]	; (80a8078 <__kernel_rem_pio2+0x6a0>)
 80a7e7a:	2200      	movs	r2, #0
 80a7e7c:	e969 6702 	strd	r6, r7, [r9, #-8]!
 80a7e80:	f001 fb30 	bl	80a94e4 <__aeabi_dmul>
 80a7e84:	ab0c      	add	r3, sp, #48	; 0x30
 80a7e86:	4598      	cmp	r8, r3
 80a7e88:	4604      	mov	r4, r0
 80a7e8a:	460d      	mov	r5, r1
 80a7e8c:	d1e8      	bne.n	80a7e60 <__kernel_rem_pio2+0x488>
 80a7e8e:	ab48      	add	r3, sp, #288	; 0x120
 80a7e90:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 80a7e94:	f8dd a014 	ldr.w	sl, [sp, #20]
 80a7e98:	f04f 0900 	mov.w	r9, #0
 80a7e9c:	f1ba 0f00 	cmp.w	sl, #0
 80a7ea0:	db2c      	blt.n	80a7efc <__kernel_rem_pio2+0x524>
 80a7ea2:	a371      	add	r3, pc, #452	; (adr r3, 80a8068 <__kernel_rem_pio2+0x690>)
 80a7ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7ea8:	465f      	mov	r7, fp
 80a7eaa:	2400      	movs	r4, #0
 80a7eac:	2500      	movs	r5, #0
 80a7eae:	2600      	movs	r6, #0
 80a7eb0:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80a807c <__kernel_rem_pio2+0x6a4>
 80a7eb4:	e003      	b.n	80a7ebe <__kernel_rem_pio2+0x4e6>
 80a7eb6:	45b1      	cmp	r9, r6
 80a7eb8:	db10      	blt.n	80a7edc <__kernel_rem_pio2+0x504>
 80a7eba:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80a7ebe:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80a7ec2:	f001 fb0f 	bl	80a94e4 <__aeabi_dmul>
 80a7ec6:	4602      	mov	r2, r0
 80a7ec8:	460b      	mov	r3, r1
 80a7eca:	4620      	mov	r0, r4
 80a7ecc:	4629      	mov	r1, r5
 80a7ece:	f001 f953 	bl	80a9178 <__adddf3>
 80a7ed2:	3601      	adds	r6, #1
 80a7ed4:	45b2      	cmp	sl, r6
 80a7ed6:	4604      	mov	r4, r0
 80a7ed8:	460d      	mov	r5, r1
 80a7eda:	daec      	bge.n	80a7eb6 <__kernel_rem_pio2+0x4de>
 80a7edc:	9b01      	ldr	r3, [sp, #4]
 80a7ede:	9a02      	ldr	r2, [sp, #8]
 80a7ee0:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80a7ee4:	4591      	cmp	r9, r2
 80a7ee6:	e9c3 4500 	strd	r4, r5, [r3]
 80a7eea:	f1ab 0b08 	sub.w	fp, fp, #8
 80a7eee:	f109 0301 	add.w	r3, r9, #1
 80a7ef2:	d006      	beq.n	80a7f02 <__kernel_rem_pio2+0x52a>
 80a7ef4:	f1ba 0f00 	cmp.w	sl, #0
 80a7ef8:	4699      	mov	r9, r3
 80a7efa:	dad2      	bge.n	80a7ea2 <__kernel_rem_pio2+0x4ca>
 80a7efc:	2400      	movs	r4, #0
 80a7efe:	2500      	movs	r5, #0
 80a7f00:	e7ec      	b.n	80a7edc <__kernel_rem_pio2+0x504>
 80a7f02:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a7f04:	f8dd a008 	ldr.w	sl, [sp, #8]
 80a7f08:	2b02      	cmp	r3, #2
 80a7f0a:	dc23      	bgt.n	80a7f54 <__kernel_rem_pio2+0x57c>
 80a7f0c:	2b00      	cmp	r3, #0
 80a7f0e:	f300 80f1 	bgt.w	80a80f4 <__kernel_rem_pio2+0x71c>
 80a7f12:	d118      	bne.n	80a7f46 <__kernel_rem_pio2+0x56e>
 80a7f14:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a7f16:	9d04      	ldr	r5, [sp, #16]
 80a7f18:	461c      	mov	r4, r3
 80a7f1a:	9e01      	ldr	r6, [sp, #4]
 80a7f1c:	3508      	adds	r5, #8
 80a7f1e:	4435      	add	r5, r6
 80a7f20:	4618      	mov	r0, r3
 80a7f22:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80a7f26:	4621      	mov	r1, r4
 80a7f28:	f001 f926 	bl	80a9178 <__adddf3>
 80a7f2c:	42ae      	cmp	r6, r5
 80a7f2e:	4603      	mov	r3, r0
 80a7f30:	460c      	mov	r4, r1
 80a7f32:	d1f5      	bne.n	80a7f20 <__kernel_rem_pio2+0x548>
 80a7f34:	9a03      	ldr	r2, [sp, #12]
 80a7f36:	b10a      	cbz	r2, 80a7f3c <__kernel_rem_pio2+0x564>
 80a7f38:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80a7f3c:	4618      	mov	r0, r3
 80a7f3e:	4621      	mov	r1, r4
 80a7f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a7f42:	e9c3 0100 	strd	r0, r1, [r3]
 80a7f46:	9b07      	ldr	r3, [sp, #28]
 80a7f48:	f003 0007 	and.w	r0, r3, #7
 80a7f4c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a7f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7f54:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a7f56:	2b03      	cmp	r3, #3
 80a7f58:	d1f5      	bne.n	80a7f46 <__kernel_rem_pio2+0x56e>
 80a7f5a:	f1ba 0f00 	cmp.w	sl, #0
 80a7f5e:	f000 8158 	beq.w	80a8212 <__kernel_rem_pio2+0x83a>
 80a7f62:	9b01      	ldr	r3, [sp, #4]
 80a7f64:	9a04      	ldr	r2, [sp, #16]
 80a7f66:	4413      	add	r3, r2
 80a7f68:	469b      	mov	fp, r3
 80a7f6a:	e9d3 4500 	ldrd	r4, r5, [r3]
 80a7f6e:	e95b 6702 	ldrd	r6, r7, [fp, #-8]
 80a7f72:	4620      	mov	r0, r4
 80a7f74:	4629      	mov	r1, r5
 80a7f76:	4632      	mov	r2, r6
 80a7f78:	463b      	mov	r3, r7
 80a7f7a:	f001 f8fd 	bl	80a9178 <__adddf3>
 80a7f7e:	46a0      	mov	r8, r4
 80a7f80:	46a9      	mov	r9, r5
 80a7f82:	4604      	mov	r4, r0
 80a7f84:	460d      	mov	r5, r1
 80a7f86:	4622      	mov	r2, r4
 80a7f88:	462b      	mov	r3, r5
 80a7f8a:	4630      	mov	r0, r6
 80a7f8c:	4639      	mov	r1, r7
 80a7f8e:	f001 f8f1 	bl	80a9174 <__aeabi_dsub>
 80a7f92:	464b      	mov	r3, r9
 80a7f94:	4642      	mov	r2, r8
 80a7f96:	f001 f8ef 	bl	80a9178 <__adddf3>
 80a7f9a:	e9cb 0100 	strd	r0, r1, [fp]
 80a7f9e:	e96b 4502 	strd	r4, r5, [fp, #-8]!
 80a7fa2:	9b01      	ldr	r3, [sp, #4]
 80a7fa4:	455b      	cmp	r3, fp
 80a7fa6:	d1e2      	bne.n	80a7f6e <__kernel_rem_pio2+0x596>
 80a7fa8:	f1ba 0f01 	cmp.w	sl, #1
 80a7fac:	f340 8131 	ble.w	80a8212 <__kernel_rem_pio2+0x83a>
 80a7fb0:	9b04      	ldr	r3, [sp, #16]
 80a7fb2:	9a01      	ldr	r2, [sp, #4]
 80a7fb4:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 80a7fb8:	4413      	add	r3, r2
 80a7fba:	469a      	mov	sl, r3
 80a7fbc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80a7fc0:	9302      	str	r3, [sp, #8]
 80a7fc2:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80a7fc6:	4620      	mov	r0, r4
 80a7fc8:	4629      	mov	r1, r5
 80a7fca:	4632      	mov	r2, r6
 80a7fcc:	463b      	mov	r3, r7
 80a7fce:	f001 f8d3 	bl	80a9178 <__adddf3>
 80a7fd2:	46a0      	mov	r8, r4
 80a7fd4:	46a9      	mov	r9, r5
 80a7fd6:	4604      	mov	r4, r0
 80a7fd8:	460d      	mov	r5, r1
 80a7fda:	4622      	mov	r2, r4
 80a7fdc:	462b      	mov	r3, r5
 80a7fde:	4630      	mov	r0, r6
 80a7fe0:	4639      	mov	r1, r7
 80a7fe2:	f001 f8c7 	bl	80a9174 <__aeabi_dsub>
 80a7fe6:	4642      	mov	r2, r8
 80a7fe8:	464b      	mov	r3, r9
 80a7fea:	f001 f8c5 	bl	80a9178 <__adddf3>
 80a7fee:	e9ca 0100 	strd	r0, r1, [sl]
 80a7ff2:	e96a 4502 	strd	r4, r5, [sl, #-8]!
 80a7ff6:	45d3      	cmp	fp, sl
 80a7ff8:	d1e3      	bne.n	80a7fc2 <__kernel_rem_pio2+0x5ea>
 80a7ffa:	2300      	movs	r3, #0
 80a7ffc:	461e      	mov	r6, r3
 80a7ffe:	9c02      	ldr	r4, [sp, #8]
 80a8000:	9a01      	ldr	r2, [sp, #4]
 80a8002:	3408      	adds	r4, #8
 80a8004:	f102 0510 	add.w	r5, r2, #16
 80a8008:	4618      	mov	r0, r3
 80a800a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80a800e:	4631      	mov	r1, r6
 80a8010:	f001 f8b2 	bl	80a9178 <__adddf3>
 80a8014:	42a5      	cmp	r5, r4
 80a8016:	4603      	mov	r3, r0
 80a8018:	460e      	mov	r6, r1
 80a801a:	d1f5      	bne.n	80a8008 <__kernel_rem_pio2+0x630>
 80a801c:	9a03      	ldr	r2, [sp, #12]
 80a801e:	2a00      	cmp	r2, #0
 80a8020:	f040 80b1 	bne.w	80a8186 <__kernel_rem_pio2+0x7ae>
 80a8024:	4618      	mov	r0, r3
 80a8026:	4631      	mov	r1, r6
 80a8028:	9a01      	ldr	r2, [sp, #4]
 80a802a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a802c:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 80a8030:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 80a8034:	e9c6 2300 	strd	r2, r3, [r6]
 80a8038:	9b07      	ldr	r3, [sp, #28]
 80a803a:	e9c6 0104 	strd	r0, r1, [r6, #16]
 80a803e:	f003 0007 	and.w	r0, r3, #7
 80a8042:	e9c6 4502 	strd	r4, r5, [r6, #8]
 80a8046:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a804a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a804e:	9b01      	ldr	r3, [sp, #4]
 80a8050:	a90c      	add	r1, sp, #48	; 0x30
 80a8052:	1e5a      	subs	r2, r3, #1
 80a8054:	ab0c      	add	r3, sp, #48	; 0x30
 80a8056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a805a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80a805e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a8062:	e686      	b.n	80a7d72 <__kernel_rem_pio2+0x39a>
 80a8064:	f3af 8000 	nop.w
 80a8068:	40000000 	.word	0x40000000
 80a806c:	3ff921fb 	.word	0x3ff921fb
 80a8070:	3ff00000 	.word	0x3ff00000
 80a8074:	3fe00000 	.word	0x3fe00000
 80a8078:	3e700000 	.word	0x3e700000
 80a807c:	080aae88 	.word	0x080aae88
 80a8080:	2100      	movs	r1, #0
 80a8082:	f06f 0317 	mvn.w	r3, #23
 80a8086:	9107      	str	r1, [sp, #28]
 80a8088:	e4c5      	b.n	80a7a16 <__kernel_rem_pio2+0x3e>
 80a808a:	2400      	movs	r4, #0
 80a808c:	e65f      	b.n	80a7d4e <__kernel_rem_pio2+0x376>
 80a808e:	4639      	mov	r1, r7
 80a8090:	9f06      	ldr	r7, [sp, #24]
 80a8092:	4630      	mov	r0, r6
 80a8094:	427a      	negs	r2, r7
 80a8096:	9503      	str	r5, [sp, #12]
 80a8098:	f8cd 801c 	str.w	r8, [sp, #28]
 80a809c:	f000 ff50 	bl	80a8f40 <scalbn>
 80a80a0:	2200      	movs	r2, #0
 80a80a2:	4b5d      	ldr	r3, [pc, #372]	; (80a8218 <__kernel_rem_pio2+0x840>)
 80a80a4:	4604      	mov	r4, r0
 80a80a6:	460d      	mov	r5, r1
 80a80a8:	f001 fca2 	bl	80a99f0 <__aeabi_dcmpge>
 80a80ac:	2800      	cmp	r0, #0
 80a80ae:	d060      	beq.n	80a8172 <__kernel_rem_pio2+0x79a>
 80a80b0:	2200      	movs	r2, #0
 80a80b2:	4b5a      	ldr	r3, [pc, #360]	; (80a821c <__kernel_rem_pio2+0x844>)
 80a80b4:	4620      	mov	r0, r4
 80a80b6:	4629      	mov	r1, r5
 80a80b8:	f001 fa14 	bl	80a94e4 <__aeabi_dmul>
 80a80bc:	f001 fcc2 	bl	80a9a44 <__aeabi_d2iz>
 80a80c0:	4606      	mov	r6, r0
 80a80c2:	f001 f9a5 	bl	80a9410 <__aeabi_i2d>
 80a80c6:	2200      	movs	r2, #0
 80a80c8:	4b53      	ldr	r3, [pc, #332]	; (80a8218 <__kernel_rem_pio2+0x840>)
 80a80ca:	f001 fa0b 	bl	80a94e4 <__aeabi_dmul>
 80a80ce:	4602      	mov	r2, r0
 80a80d0:	460b      	mov	r3, r1
 80a80d2:	4620      	mov	r0, r4
 80a80d4:	4629      	mov	r1, r5
 80a80d6:	f001 f84d 	bl	80a9174 <__aeabi_dsub>
 80a80da:	f001 fcb3 	bl	80a9a44 <__aeabi_d2iz>
 80a80de:	9b01      	ldr	r3, [sp, #4]
 80a80e0:	aa0c      	add	r2, sp, #48	; 0x30
 80a80e2:	f103 0a01 	add.w	sl, r3, #1
 80a80e6:	3718      	adds	r7, #24
 80a80e8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80a80ec:	9706      	str	r7, [sp, #24]
 80a80ee:	f842 602a 	str.w	r6, [r2, sl, lsl #2]
 80a80f2:	e69c      	b.n	80a7e2e <__kernel_rem_pio2+0x456>
 80a80f4:	2600      	movs	r6, #0
 80a80f6:	9b01      	ldr	r3, [sp, #4]
 80a80f8:	9906      	ldr	r1, [sp, #24]
 80a80fa:	4698      	mov	r8, r3
 80a80fc:	eb03 07c1 	add.w	r7, r3, r1, lsl #3
 80a8100:	4631      	mov	r1, r6
 80a8102:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 80a8106:	4630      	mov	r0, r6
 80a8108:	f001 f836 	bl	80a9178 <__adddf3>
 80a810c:	45b8      	cmp	r8, r7
 80a810e:	4606      	mov	r6, r0
 80a8110:	d1f7      	bne.n	80a8102 <__kernel_rem_pio2+0x72a>
 80a8112:	9b03      	ldr	r3, [sp, #12]
 80a8114:	2b00      	cmp	r3, #0
 80a8116:	d151      	bne.n	80a81bc <__kernel_rem_pio2+0x7e4>
 80a8118:	4634      	mov	r4, r6
 80a811a:	460d      	mov	r5, r1
 80a811c:	4632      	mov	r2, r6
 80a811e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a8120:	460b      	mov	r3, r1
 80a8122:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80a8126:	e9c6 4500 	strd	r4, r5, [r6]
 80a812a:	f001 f823 	bl	80a9174 <__aeabi_dsub>
 80a812e:	f1ba 0f00 	cmp.w	sl, #0
 80a8132:	4603      	mov	r3, r0
 80a8134:	460e      	mov	r6, r1
 80a8136:	dd10      	ble.n	80a815a <__kernel_rem_pio2+0x782>
 80a8138:	2401      	movs	r4, #1
 80a813a:	ad48      	add	r5, sp, #288	; 0x120
 80a813c:	4618      	mov	r0, r3
 80a813e:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80a8142:	4631      	mov	r1, r6
 80a8144:	f001 f818 	bl	80a9178 <__adddf3>
 80a8148:	3401      	adds	r4, #1
 80a814a:	45a2      	cmp	sl, r4
 80a814c:	4603      	mov	r3, r0
 80a814e:	460e      	mov	r6, r1
 80a8150:	daf4      	bge.n	80a813c <__kernel_rem_pio2+0x764>
 80a8152:	9a03      	ldr	r2, [sp, #12]
 80a8154:	b10a      	cbz	r2, 80a815a <__kernel_rem_pio2+0x782>
 80a8156:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80a815a:	4618      	mov	r0, r3
 80a815c:	4631      	mov	r1, r6
 80a815e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a8160:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80a8164:	9b07      	ldr	r3, [sp, #28]
 80a8166:	f003 0007 	and.w	r0, r3, #7
 80a816a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a816e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8172:	4620      	mov	r0, r4
 80a8174:	4629      	mov	r1, r5
 80a8176:	f001 fc65 	bl	80a9a44 <__aeabi_d2iz>
 80a817a:	9b01      	ldr	r3, [sp, #4]
 80a817c:	aa0c      	add	r2, sp, #48	; 0x30
 80a817e:	469a      	mov	sl, r3
 80a8180:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80a8184:	e653      	b.n	80a7e2e <__kernel_rem_pio2+0x456>
 80a8186:	9a01      	ldr	r2, [sp, #4]
 80a8188:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a818a:	4615      	mov	r5, r2
 80a818c:	4604      	mov	r4, r0
 80a818e:	6103      	str	r3, [r0, #16]
 80a8190:	68ab      	ldr	r3, [r5, #8]
 80a8192:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80a8196:	6146      	str	r6, [r0, #20]
 80a8198:	6851      	ldr	r1, [r2, #4]
 80a819a:	6828      	ldr	r0, [r5, #0]
 80a819c:	68d2      	ldr	r2, [r2, #12]
 80a819e:	60a3      	str	r3, [r4, #8]
 80a81a0:	9b07      	ldr	r3, [sp, #28]
 80a81a2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a81a6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a81aa:	6020      	str	r0, [r4, #0]
 80a81ac:	f003 0007 	and.w	r0, r3, #7
 80a81b0:	6061      	str	r1, [r4, #4]
 80a81b2:	60e2      	str	r2, [r4, #12]
 80a81b4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a81b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a81bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80a81be:	f101 4400 	add.w	r4, r1, #2147483648	; 0x80000000
 80a81c2:	460b      	mov	r3, r1
 80a81c4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80a81c8:	4632      	mov	r2, r6
 80a81ca:	e9c5 6400 	strd	r6, r4, [r5]
 80a81ce:	f000 ffd1 	bl	80a9174 <__aeabi_dsub>
 80a81d2:	f1ba 0f00 	cmp.w	sl, #0
 80a81d6:	4603      	mov	r3, r0
 80a81d8:	460e      	mov	r6, r1
 80a81da:	dcad      	bgt.n	80a8138 <__kernel_rem_pio2+0x760>
 80a81dc:	e7bb      	b.n	80a8156 <__kernel_rem_pio2+0x77e>
 80a81de:	9b08      	ldr	r3, [sp, #32]
 80a81e0:	00db      	lsls	r3, r3, #3
 80a81e2:	9302      	str	r3, [sp, #8]
 80a81e4:	e474      	b.n	80a7ad0 <__kernel_rem_pio2+0xf8>
 80a81e6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a81e8:	2b02      	cmp	r3, #2
 80a81ea:	dc06      	bgt.n	80a81fa <__kernel_rem_pio2+0x822>
 80a81ec:	2b00      	cmp	r3, #0
 80a81ee:	dc0d      	bgt.n	80a820c <__kernel_rem_pio2+0x834>
 80a81f0:	f47f aea9 	bne.w	80a7f46 <__kernel_rem_pio2+0x56e>
 80a81f4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a81f6:	461c      	mov	r4, r3
 80a81f8:	e69c      	b.n	80a7f34 <__kernel_rem_pio2+0x55c>
 80a81fa:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a81fc:	2b03      	cmp	r3, #3
 80a81fe:	f47f aea2 	bne.w	80a7f46 <__kernel_rem_pio2+0x56e>
 80a8202:	2300      	movs	r3, #0
 80a8204:	aa48      	add	r2, sp, #288	; 0x120
 80a8206:	461e      	mov	r6, r3
 80a8208:	9201      	str	r2, [sp, #4]
 80a820a:	e707      	b.n	80a801c <__kernel_rem_pio2+0x644>
 80a820c:	2600      	movs	r6, #0
 80a820e:	4631      	mov	r1, r6
 80a8210:	e77f      	b.n	80a8112 <__kernel_rem_pio2+0x73a>
 80a8212:	2300      	movs	r3, #0
 80a8214:	461e      	mov	r6, r3
 80a8216:	e701      	b.n	80a801c <__kernel_rem_pio2+0x644>
 80a8218:	41700000 	.word	0x41700000
 80a821c:	3e700000 	.word	0x3e700000

080a8220 <__kernel_sin>:
 80a8220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8224:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a8228:	b085      	sub	sp, #20
 80a822a:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80a822e:	4604      	mov	r4, r0
 80a8230:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a8234:	9101      	str	r1, [sp, #4]
 80a8236:	da04      	bge.n	80a8242 <__kernel_sin+0x22>
 80a8238:	f001 fc04 	bl	80a9a44 <__aeabi_d2iz>
 80a823c:	2800      	cmp	r0, #0
 80a823e:	f000 808f 	beq.w	80a8360 <__kernel_sin+0x140>
 80a8242:	9b01      	ldr	r3, [sp, #4]
 80a8244:	4622      	mov	r2, r4
 80a8246:	4619      	mov	r1, r3
 80a8248:	4620      	mov	r0, r4
 80a824a:	f001 f94b 	bl	80a94e4 <__aeabi_dmul>
 80a824e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80a8252:	4606      	mov	r6, r0
 80a8254:	460f      	mov	r7, r1
 80a8256:	4602      	mov	r2, r0
 80a8258:	460b      	mov	r3, r1
 80a825a:	4620      	mov	r0, r4
 80a825c:	4649      	mov	r1, r9
 80a825e:	f001 f941 	bl	80a94e4 <__aeabi_dmul>
 80a8262:	a343      	add	r3, pc, #268	; (adr r3, 80a8370 <__kernel_sin+0x150>)
 80a8264:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8268:	4682      	mov	sl, r0
 80a826a:	468b      	mov	fp, r1
 80a826c:	4630      	mov	r0, r6
 80a826e:	4639      	mov	r1, r7
 80a8270:	f001 f938 	bl	80a94e4 <__aeabi_dmul>
 80a8274:	a340      	add	r3, pc, #256	; (adr r3, 80a8378 <__kernel_sin+0x158>)
 80a8276:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a827a:	f000 ff7b 	bl	80a9174 <__aeabi_dsub>
 80a827e:	4632      	mov	r2, r6
 80a8280:	463b      	mov	r3, r7
 80a8282:	f001 f92f 	bl	80a94e4 <__aeabi_dmul>
 80a8286:	a33e      	add	r3, pc, #248	; (adr r3, 80a8380 <__kernel_sin+0x160>)
 80a8288:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a828c:	f000 ff74 	bl	80a9178 <__adddf3>
 80a8290:	4632      	mov	r2, r6
 80a8292:	463b      	mov	r3, r7
 80a8294:	f001 f926 	bl	80a94e4 <__aeabi_dmul>
 80a8298:	a33b      	add	r3, pc, #236	; (adr r3, 80a8388 <__kernel_sin+0x168>)
 80a829a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a829e:	f000 ff69 	bl	80a9174 <__aeabi_dsub>
 80a82a2:	4632      	mov	r2, r6
 80a82a4:	463b      	mov	r3, r7
 80a82a6:	f001 f91d 	bl	80a94e4 <__aeabi_dmul>
 80a82aa:	a339      	add	r3, pc, #228	; (adr r3, 80a8390 <__kernel_sin+0x170>)
 80a82ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a82b0:	f000 ff62 	bl	80a9178 <__adddf3>
 80a82b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a82b6:	4680      	mov	r8, r0
 80a82b8:	4689      	mov	r9, r1
 80a82ba:	b3bb      	cbz	r3, 80a832c <__kernel_sin+0x10c>
 80a82bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a82c0:	2200      	movs	r2, #0
 80a82c2:	4b37      	ldr	r3, [pc, #220]	; (80a83a0 <__kernel_sin+0x180>)
 80a82c4:	f001 f90e 	bl	80a94e4 <__aeabi_dmul>
 80a82c8:	4642      	mov	r2, r8
 80a82ca:	464b      	mov	r3, r9
 80a82cc:	4680      	mov	r8, r0
 80a82ce:	4689      	mov	r9, r1
 80a82d0:	4650      	mov	r0, sl
 80a82d2:	4659      	mov	r1, fp
 80a82d4:	f001 f906 	bl	80a94e4 <__aeabi_dmul>
 80a82d8:	4602      	mov	r2, r0
 80a82da:	460b      	mov	r3, r1
 80a82dc:	4640      	mov	r0, r8
 80a82de:	4649      	mov	r1, r9
 80a82e0:	f000 ff48 	bl	80a9174 <__aeabi_dsub>
 80a82e4:	4632      	mov	r2, r6
 80a82e6:	463b      	mov	r3, r7
 80a82e8:	f001 f8fc 	bl	80a94e4 <__aeabi_dmul>
 80a82ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a82f0:	f000 ff40 	bl	80a9174 <__aeabi_dsub>
 80a82f4:	a328      	add	r3, pc, #160	; (adr r3, 80a8398 <__kernel_sin+0x178>)
 80a82f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a82fa:	4606      	mov	r6, r0
 80a82fc:	460f      	mov	r7, r1
 80a82fe:	4650      	mov	r0, sl
 80a8300:	4659      	mov	r1, fp
 80a8302:	f001 f8ef 	bl	80a94e4 <__aeabi_dmul>
 80a8306:	4602      	mov	r2, r0
 80a8308:	460b      	mov	r3, r1
 80a830a:	4630      	mov	r0, r6
 80a830c:	4639      	mov	r1, r7
 80a830e:	f000 ff33 	bl	80a9178 <__adddf3>
 80a8312:	4602      	mov	r2, r0
 80a8314:	460b      	mov	r3, r1
 80a8316:	4620      	mov	r0, r4
 80a8318:	9901      	ldr	r1, [sp, #4]
 80a831a:	f000 ff2b 	bl	80a9174 <__aeabi_dsub>
 80a831e:	4604      	mov	r4, r0
 80a8320:	460d      	mov	r5, r1
 80a8322:	4620      	mov	r0, r4
 80a8324:	4629      	mov	r1, r5
 80a8326:	b005      	add	sp, #20
 80a8328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a832c:	4602      	mov	r2, r0
 80a832e:	460b      	mov	r3, r1
 80a8330:	4630      	mov	r0, r6
 80a8332:	4639      	mov	r1, r7
 80a8334:	f001 f8d6 	bl	80a94e4 <__aeabi_dmul>
 80a8338:	a317      	add	r3, pc, #92	; (adr r3, 80a8398 <__kernel_sin+0x178>)
 80a833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a833e:	f000 ff19 	bl	80a9174 <__aeabi_dsub>
 80a8342:	4652      	mov	r2, sl
 80a8344:	465b      	mov	r3, fp
 80a8346:	f001 f8cd 	bl	80a94e4 <__aeabi_dmul>
 80a834a:	4622      	mov	r2, r4
 80a834c:	9b01      	ldr	r3, [sp, #4]
 80a834e:	f000 ff13 	bl	80a9178 <__adddf3>
 80a8352:	4604      	mov	r4, r0
 80a8354:	460d      	mov	r5, r1
 80a8356:	4620      	mov	r0, r4
 80a8358:	4629      	mov	r1, r5
 80a835a:	b005      	add	sp, #20
 80a835c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8360:	9d01      	ldr	r5, [sp, #4]
 80a8362:	4620      	mov	r0, r4
 80a8364:	4629      	mov	r1, r5
 80a8366:	b005      	add	sp, #20
 80a8368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a836c:	f3af 8000 	nop.w
 80a8370:	5acfd57c 	.word	0x5acfd57c
 80a8374:	3de5d93a 	.word	0x3de5d93a
 80a8378:	8a2b9ceb 	.word	0x8a2b9ceb
 80a837c:	3e5ae5e6 	.word	0x3e5ae5e6
 80a8380:	57b1fe7d 	.word	0x57b1fe7d
 80a8384:	3ec71de3 	.word	0x3ec71de3
 80a8388:	19c161d5 	.word	0x19c161d5
 80a838c:	3f2a01a0 	.word	0x3f2a01a0
 80a8390:	1110f8a6 	.word	0x1110f8a6
 80a8394:	3f811111 	.word	0x3f811111
 80a8398:	55555549 	.word	0x55555549
 80a839c:	3fc55555 	.word	0x3fc55555
 80a83a0:	3fe00000 	.word	0x3fe00000

080a83a4 <__kernel_cosf>:
 80a83a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a83a8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80a83ac:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 80a83b0:	4606      	mov	r6, r0
 80a83b2:	4688      	mov	r8, r1
 80a83b4:	da4a      	bge.n	80a844c <__kernel_cosf+0xa8>
 80a83b6:	f001 fec7 	bl	80aa148 <__aeabi_f2iz>
 80a83ba:	2800      	cmp	r0, #0
 80a83bc:	f000 809f 	beq.w	80a84fe <__kernel_cosf+0x15a>
 80a83c0:	4631      	mov	r1, r6
 80a83c2:	4630      	mov	r0, r6
 80a83c4:	f001 fce4 	bl	80a9d90 <__aeabi_fmul>
 80a83c8:	4604      	mov	r4, r0
 80a83ca:	494f      	ldr	r1, [pc, #316]	; (80a8508 <__kernel_cosf+0x164>)
 80a83cc:	f001 fce0 	bl	80a9d90 <__aeabi_fmul>
 80a83d0:	494e      	ldr	r1, [pc, #312]	; (80a850c <__kernel_cosf+0x168>)
 80a83d2:	f001 fbd5 	bl	80a9b80 <__addsf3>
 80a83d6:	4621      	mov	r1, r4
 80a83d8:	f001 fcda 	bl	80a9d90 <__aeabi_fmul>
 80a83dc:	494c      	ldr	r1, [pc, #304]	; (80a8510 <__kernel_cosf+0x16c>)
 80a83de:	f001 fbcd 	bl	80a9b7c <__aeabi_fsub>
 80a83e2:	4621      	mov	r1, r4
 80a83e4:	f001 fcd4 	bl	80a9d90 <__aeabi_fmul>
 80a83e8:	494a      	ldr	r1, [pc, #296]	; (80a8514 <__kernel_cosf+0x170>)
 80a83ea:	f001 fbc9 	bl	80a9b80 <__addsf3>
 80a83ee:	4621      	mov	r1, r4
 80a83f0:	f001 fcce 	bl	80a9d90 <__aeabi_fmul>
 80a83f4:	4948      	ldr	r1, [pc, #288]	; (80a8518 <__kernel_cosf+0x174>)
 80a83f6:	f001 fbc1 	bl	80a9b7c <__aeabi_fsub>
 80a83fa:	4621      	mov	r1, r4
 80a83fc:	f001 fcc8 	bl	80a9d90 <__aeabi_fmul>
 80a8400:	4946      	ldr	r1, [pc, #280]	; (80a851c <__kernel_cosf+0x178>)
 80a8402:	f001 fbbd 	bl	80a9b80 <__addsf3>
 80a8406:	4621      	mov	r1, r4
 80a8408:	f001 fcc2 	bl	80a9d90 <__aeabi_fmul>
 80a840c:	4607      	mov	r7, r0
 80a840e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a8412:	4620      	mov	r0, r4
 80a8414:	f001 fcbc 	bl	80a9d90 <__aeabi_fmul>
 80a8418:	4603      	mov	r3, r0
 80a841a:	4639      	mov	r1, r7
 80a841c:	4620      	mov	r0, r4
 80a841e:	461c      	mov	r4, r3
 80a8420:	f001 fcb6 	bl	80a9d90 <__aeabi_fmul>
 80a8424:	4641      	mov	r1, r8
 80a8426:	4605      	mov	r5, r0
 80a8428:	4630      	mov	r0, r6
 80a842a:	f001 fcb1 	bl	80a9d90 <__aeabi_fmul>
 80a842e:	4601      	mov	r1, r0
 80a8430:	4628      	mov	r0, r5
 80a8432:	f001 fba3 	bl	80a9b7c <__aeabi_fsub>
 80a8436:	4601      	mov	r1, r0
 80a8438:	4620      	mov	r0, r4
 80a843a:	f001 fb9f 	bl	80a9b7c <__aeabi_fsub>
 80a843e:	4601      	mov	r1, r0
 80a8440:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a8444:	f001 fb9a 	bl	80a9b7c <__aeabi_fsub>
 80a8448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a844c:	4601      	mov	r1, r0
 80a844e:	f001 fc9f 	bl	80a9d90 <__aeabi_fmul>
 80a8452:	4604      	mov	r4, r0
 80a8454:	492c      	ldr	r1, [pc, #176]	; (80a8508 <__kernel_cosf+0x164>)
 80a8456:	f001 fc9b 	bl	80a9d90 <__aeabi_fmul>
 80a845a:	492c      	ldr	r1, [pc, #176]	; (80a850c <__kernel_cosf+0x168>)
 80a845c:	f001 fb90 	bl	80a9b80 <__addsf3>
 80a8460:	4621      	mov	r1, r4
 80a8462:	f001 fc95 	bl	80a9d90 <__aeabi_fmul>
 80a8466:	492a      	ldr	r1, [pc, #168]	; (80a8510 <__kernel_cosf+0x16c>)
 80a8468:	f001 fb88 	bl	80a9b7c <__aeabi_fsub>
 80a846c:	4621      	mov	r1, r4
 80a846e:	f001 fc8f 	bl	80a9d90 <__aeabi_fmul>
 80a8472:	4928      	ldr	r1, [pc, #160]	; (80a8514 <__kernel_cosf+0x170>)
 80a8474:	f001 fb84 	bl	80a9b80 <__addsf3>
 80a8478:	4621      	mov	r1, r4
 80a847a:	f001 fc89 	bl	80a9d90 <__aeabi_fmul>
 80a847e:	4926      	ldr	r1, [pc, #152]	; (80a8518 <__kernel_cosf+0x174>)
 80a8480:	f001 fb7c 	bl	80a9b7c <__aeabi_fsub>
 80a8484:	4621      	mov	r1, r4
 80a8486:	f001 fc83 	bl	80a9d90 <__aeabi_fmul>
 80a848a:	4924      	ldr	r1, [pc, #144]	; (80a851c <__kernel_cosf+0x178>)
 80a848c:	f001 fb78 	bl	80a9b80 <__addsf3>
 80a8490:	4621      	mov	r1, r4
 80a8492:	f001 fc7d 	bl	80a9d90 <__aeabi_fmul>
 80a8496:	4b22      	ldr	r3, [pc, #136]	; (80a8520 <__kernel_cosf+0x17c>)
 80a8498:	4607      	mov	r7, r0
 80a849a:	429d      	cmp	r5, r3
 80a849c:	ddb7      	ble.n	80a840e <__kernel_cosf+0x6a>
 80a849e:	4b21      	ldr	r3, [pc, #132]	; (80a8524 <__kernel_cosf+0x180>)
 80a84a0:	429d      	cmp	r5, r3
 80a84a2:	dc28      	bgt.n	80a84f6 <__kernel_cosf+0x152>
 80a84a4:	f105 457f 	add.w	r5, r5, #4278190080	; 0xff000000
 80a84a8:	4629      	mov	r1, r5
 80a84aa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a84ae:	f001 fb65 	bl	80a9b7c <__aeabi_fsub>
 80a84b2:	4681      	mov	r9, r0
 80a84b4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a84b8:	4620      	mov	r0, r4
 80a84ba:	f001 fc69 	bl	80a9d90 <__aeabi_fmul>
 80a84be:	4629      	mov	r1, r5
 80a84c0:	f001 fb5c 	bl	80a9b7c <__aeabi_fsub>
 80a84c4:	4603      	mov	r3, r0
 80a84c6:	4639      	mov	r1, r7
 80a84c8:	4620      	mov	r0, r4
 80a84ca:	461c      	mov	r4, r3
 80a84cc:	f001 fc60 	bl	80a9d90 <__aeabi_fmul>
 80a84d0:	4641      	mov	r1, r8
 80a84d2:	4605      	mov	r5, r0
 80a84d4:	4630      	mov	r0, r6
 80a84d6:	f001 fc5b 	bl	80a9d90 <__aeabi_fmul>
 80a84da:	4601      	mov	r1, r0
 80a84dc:	4628      	mov	r0, r5
 80a84de:	f001 fb4d 	bl	80a9b7c <__aeabi_fsub>
 80a84e2:	4601      	mov	r1, r0
 80a84e4:	4620      	mov	r0, r4
 80a84e6:	f001 fb49 	bl	80a9b7c <__aeabi_fsub>
 80a84ea:	4601      	mov	r1, r0
 80a84ec:	4648      	mov	r0, r9
 80a84ee:	f001 fb45 	bl	80a9b7c <__aeabi_fsub>
 80a84f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a84f6:	f8df 9034 	ldr.w	r9, [pc, #52]	; 80a852c <__kernel_cosf+0x188>
 80a84fa:	4d0b      	ldr	r5, [pc, #44]	; (80a8528 <__kernel_cosf+0x184>)
 80a84fc:	e7da      	b.n	80a84b4 <__kernel_cosf+0x110>
 80a84fe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a8502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a8506:	bf00      	nop
 80a8508:	ad47d74e 	.word	0xad47d74e
 80a850c:	310f74f6 	.word	0x310f74f6
 80a8510:	3493f27c 	.word	0x3493f27c
 80a8514:	37d00d01 	.word	0x37d00d01
 80a8518:	3ab60b61 	.word	0x3ab60b61
 80a851c:	3d2aaaab 	.word	0x3d2aaaab
 80a8520:	3e999999 	.word	0x3e999999
 80a8524:	3f480000 	.word	0x3f480000
 80a8528:	3e900000 	.word	0x3e900000
 80a852c:	3f380000 	.word	0x3f380000

080a8530 <__kernel_rem_pio2f>:
 80a8530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8534:	461c      	mov	r4, r3
 80a8536:	b0dd      	sub	sp, #372	; 0x174
 80a8538:	9109      	str	r1, [sp, #36]	; 0x24
 80a853a:	1e61      	subs	r1, r4, #1
 80a853c:	9306      	str	r3, [sp, #24]
 80a853e:	9101      	str	r1, [sp, #4]
 80a8540:	4bbe      	ldr	r3, [pc, #760]	; (80a883c <__kernel_rem_pio2f+0x30c>)
 80a8542:	9966      	ldr	r1, [sp, #408]	; 0x198
 80a8544:	4605      	mov	r5, r0
 80a8546:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80a854a:	920b      	str	r2, [sp, #44]	; 0x2c
 80a854c:	9103      	str	r1, [sp, #12]
 80a854e:	1d11      	adds	r1, r2, #4
 80a8550:	f2c0 8301 	blt.w	80a8b56 <__kernel_rem_pio2f+0x626>
 80a8554:	1ed3      	subs	r3, r2, #3
 80a8556:	bf44      	itt	mi
 80a8558:	4613      	movmi	r3, r2
 80a855a:	3304      	addmi	r3, #4
 80a855c:	10db      	asrs	r3, r3, #3
 80a855e:	9305      	str	r3, [sp, #20]
 80a8560:	3301      	adds	r3, #1
 80a8562:	00db      	lsls	r3, r3, #3
 80a8564:	930a      	str	r3, [sp, #40]	; 0x28
 80a8566:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a856a:	1a9b      	subs	r3, r3, r2
 80a856c:	9304      	str	r3, [sp, #16]
 80a856e:	9a05      	ldr	r2, [sp, #20]
 80a8570:	9b01      	ldr	r3, [sp, #4]
 80a8572:	1ad6      	subs	r6, r2, r3
 80a8574:	9a03      	ldr	r2, [sp, #12]
 80a8576:	eb12 0803 	adds.w	r8, r2, r3
 80a857a:	d418      	bmi.n	80a85ae <__kernel_rem_pio2f+0x7e>
 80a857c:	f108 0801 	add.w	r8, r8, #1
 80a8580:	2400      	movs	r4, #0
 80a8582:	f8dd 919c 	ldr.w	r9, [sp, #412]	; 0x19c
 80a8586:	44b0      	add	r8, r6
 80a8588:	af20      	add	r7, sp, #128	; 0x80
 80a858a:	e008      	b.n	80a859e <__kernel_rem_pio2f+0x6e>
 80a858c:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 80a8590:	f001 fbaa 	bl	80a9ce8 <__aeabi_i2f>
 80a8594:	3601      	adds	r6, #1
 80a8596:	4546      	cmp	r6, r8
 80a8598:	f847 0b04 	str.w	r0, [r7], #4
 80a859c:	d007      	beq.n	80a85ae <__kernel_rem_pio2f+0x7e>
 80a859e:	2e00      	cmp	r6, #0
 80a85a0:	daf4      	bge.n	80a858c <__kernel_rem_pio2f+0x5c>
 80a85a2:	4620      	mov	r0, r4
 80a85a4:	3601      	adds	r6, #1
 80a85a6:	4546      	cmp	r6, r8
 80a85a8:	f847 0b04 	str.w	r0, [r7], #4
 80a85ac:	d1f7      	bne.n	80a859e <__kernel_rem_pio2f+0x6e>
 80a85ae:	9b03      	ldr	r3, [sp, #12]
 80a85b0:	2b00      	cmp	r3, #0
 80a85b2:	f1a5 0304 	sub.w	r3, r5, #4
 80a85b6:	9302      	str	r3, [sp, #8]
 80a85b8:	f2c0 8313 	blt.w	80a8be2 <__kernel_rem_pio2f+0x6b2>
 80a85bc:	4619      	mov	r1, r3
 80a85be:	9b06      	ldr	r3, [sp, #24]
 80a85c0:	9e01      	ldr	r6, [sp, #4]
 80a85c2:	009a      	lsls	r2, r3, #2
 80a85c4:	9200      	str	r2, [sp, #0]
 80a85c6:	9a03      	ldr	r2, [sp, #12]
 80a85c8:	eb01 0583 	add.w	r5, r1, r3, lsl #2
 80a85cc:	a920      	add	r1, sp, #128	; 0x80
 80a85ce:	eb01 0783 	add.w	r7, r1, r3, lsl #2
 80a85d2:	f50d 7890 	add.w	r8, sp, #288	; 0x120
 80a85d6:	eb02 0903 	add.w	r9, r2, r3
 80a85da:	9b01      	ldr	r3, [sp, #4]
 80a85dc:	2b00      	cmp	r3, #0
 80a85de:	bfb8      	it	lt
 80a85e0:	2400      	movlt	r4, #0
 80a85e2:	db10      	blt.n	80a8606 <__kernel_rem_pio2f+0xd6>
 80a85e4:	46bb      	mov	fp, r7
 80a85e6:	2400      	movs	r4, #0
 80a85e8:	f8dd a008 	ldr.w	sl, [sp, #8]
 80a85ec:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 80a85f0:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80a85f4:	f001 fbcc 	bl	80a9d90 <__aeabi_fmul>
 80a85f8:	4601      	mov	r1, r0
 80a85fa:	4620      	mov	r0, r4
 80a85fc:	f001 fac0 	bl	80a9b80 <__addsf3>
 80a8600:	45aa      	cmp	sl, r5
 80a8602:	4604      	mov	r4, r0
 80a8604:	d1f2      	bne.n	80a85ec <__kernel_rem_pio2f+0xbc>
 80a8606:	3601      	adds	r6, #1
 80a8608:	454e      	cmp	r6, r9
 80a860a:	f848 4b04 	str.w	r4, [r8], #4
 80a860e:	f107 0704 	add.w	r7, r7, #4
 80a8612:	d1e2      	bne.n	80a85da <__kernel_rem_pio2f+0xaa>
 80a8614:	9a03      	ldr	r2, [sp, #12]
 80a8616:	a90c      	add	r1, sp, #48	; 0x30
 80a8618:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80a861c:	9802      	ldr	r0, [sp, #8]
 80a861e:	9900      	ldr	r1, [sp, #0]
 80a8620:	4692      	mov	sl, r2
 80a8622:	4401      	add	r1, r0
 80a8624:	460d      	mov	r5, r1
 80a8626:	3b08      	subs	r3, #8
 80a8628:	9307      	str	r3, [sp, #28]
 80a862a:	ab0b      	add	r3, sp, #44	; 0x2c
 80a862c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a8630:	9308      	str	r3, [sp, #32]
 80a8632:	ab5c      	add	r3, sp, #368	; 0x170
 80a8634:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80a8638:	f1ba 0f00 	cmp.w	sl, #0
 80a863c:	f853 9c50 	ldr.w	r9, [r3, #-80]
 80a8640:	ea4f 088a 	mov.w	r8, sl, lsl #2
 80a8644:	dd22      	ble.n	80a868c <__kernel_rem_pio2f+0x15c>
 80a8646:	af48      	add	r7, sp, #288	; 0x120
 80a8648:	ae0c      	add	r6, sp, #48	; 0x30
 80a864a:	eb07 048a 	add.w	r4, r7, sl, lsl #2
 80a864e:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80a8652:	4648      	mov	r0, r9
 80a8654:	f001 fb9c 	bl	80a9d90 <__aeabi_fmul>
 80a8658:	f001 fd76 	bl	80aa148 <__aeabi_f2iz>
 80a865c:	f001 fb44 	bl	80a9ce8 <__aeabi_i2f>
 80a8660:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a8664:	4683      	mov	fp, r0
 80a8666:	f001 fb93 	bl	80a9d90 <__aeabi_fmul>
 80a866a:	4601      	mov	r1, r0
 80a866c:	4648      	mov	r0, r9
 80a866e:	f001 fa85 	bl	80a9b7c <__aeabi_fsub>
 80a8672:	f001 fd69 	bl	80aa148 <__aeabi_f2iz>
 80a8676:	4603      	mov	r3, r0
 80a8678:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80a867c:	4658      	mov	r0, fp
 80a867e:	f846 3b04 	str.w	r3, [r6], #4
 80a8682:	f001 fa7d 	bl	80a9b80 <__addsf3>
 80a8686:	42bc      	cmp	r4, r7
 80a8688:	4681      	mov	r9, r0
 80a868a:	d1e0      	bne.n	80a864e <__kernel_rem_pio2f+0x11e>
 80a868c:	9e04      	ldr	r6, [sp, #16]
 80a868e:	4648      	mov	r0, r9
 80a8690:	4631      	mov	r1, r6
 80a8692:	f000 fd13 	bl	80a90bc <scalbnf>
 80a8696:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80a869a:	4604      	mov	r4, r0
 80a869c:	f001 fb78 	bl	80a9d90 <__aeabi_fmul>
 80a86a0:	f000 fccc 	bl	80a903c <floorf>
 80a86a4:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80a86a8:	f001 fb72 	bl	80a9d90 <__aeabi_fmul>
 80a86ac:	4601      	mov	r1, r0
 80a86ae:	4620      	mov	r0, r4
 80a86b0:	f001 fa64 	bl	80a9b7c <__aeabi_fsub>
 80a86b4:	4604      	mov	r4, r0
 80a86b6:	f001 fd47 	bl	80aa148 <__aeabi_f2iz>
 80a86ba:	4607      	mov	r7, r0
 80a86bc:	f001 fb14 	bl	80a9ce8 <__aeabi_i2f>
 80a86c0:	4601      	mov	r1, r0
 80a86c2:	4620      	mov	r0, r4
 80a86c4:	f001 fa5a 	bl	80a9b7c <__aeabi_fsub>
 80a86c8:	2e00      	cmp	r6, #0
 80a86ca:	4604      	mov	r4, r0
 80a86cc:	f340 808a 	ble.w	80a87e4 <__kernel_rem_pio2f+0x2b4>
 80a86d0:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 80a86d4:	ab0c      	add	r3, sp, #48	; 0x30
 80a86d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80a86da:	f1c6 0208 	rsb	r2, r6, #8
 80a86de:	fa43 f102 	asr.w	r1, r3, r2
 80a86e2:	fa01 f202 	lsl.w	r2, r1, r2
 80a86e6:	1a9b      	subs	r3, r3, r2
 80a86e8:	f1c6 0607 	rsb	r6, r6, #7
 80a86ec:	fa43 f606 	asr.w	r6, r3, r6
 80a86f0:	aa0c      	add	r2, sp, #48	; 0x30
 80a86f2:	2e00      	cmp	r6, #0
 80a86f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80a86f8:	440f      	add	r7, r1
 80a86fa:	dc7d      	bgt.n	80a87f8 <__kernel_rem_pio2f+0x2c8>
 80a86fc:	2100      	movs	r1, #0
 80a86fe:	4620      	mov	r0, r4
 80a8700:	f001 fcda 	bl	80aa0b8 <__aeabi_fcmpeq>
 80a8704:	2800      	cmp	r0, #0
 80a8706:	f000 80d4 	beq.w	80a88b2 <__kernel_rem_pio2f+0x382>
 80a870a:	9b03      	ldr	r3, [sp, #12]
 80a870c:	f10a 34ff 	add.w	r4, sl, #4294967295	; 0xffffffff
 80a8710:	42a3      	cmp	r3, r4
 80a8712:	dc10      	bgt.n	80a8736 <__kernel_rem_pio2f+0x206>
 80a8714:	2200      	movs	r2, #0
 80a8716:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 80a871a:	3b01      	subs	r3, #1
 80a871c:	a90c      	add	r1, sp, #48	; 0x30
 80a871e:	9808      	ldr	r0, [sp, #32]
 80a8720:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a8724:	f853 1904 	ldr.w	r1, [r3], #-4
 80a8728:	4283      	cmp	r3, r0
 80a872a:	ea42 0201 	orr.w	r2, r2, r1
 80a872e:	d1f9      	bne.n	80a8724 <__kernel_rem_pio2f+0x1f4>
 80a8730:	2a00      	cmp	r2, #0
 80a8732:	f040 8117 	bne.w	80a8964 <__kernel_rem_pio2f+0x434>
 80a8736:	9b03      	ldr	r3, [sp, #12]
 80a8738:	aa0c      	add	r2, sp, #48	; 0x30
 80a873a:	3b01      	subs	r3, #1
 80a873c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a8740:	2b00      	cmp	r3, #0
 80a8742:	f040 810a 	bne.w	80a895a <__kernel_rem_pio2f+0x42a>
 80a8746:	2701      	movs	r7, #1
 80a8748:	9b07      	ldr	r3, [sp, #28]
 80a874a:	f853 2904 	ldr.w	r2, [r3], #-4
 80a874e:	3701      	adds	r7, #1
 80a8750:	2a00      	cmp	r2, #0
 80a8752:	d0fa      	beq.n	80a874a <__kernel_rem_pio2f+0x21a>
 80a8754:	f10a 0301 	add.w	r3, sl, #1
 80a8758:	4698      	mov	r8, r3
 80a875a:	eb0a 0207 	add.w	r2, sl, r7
 80a875e:	9200      	str	r2, [sp, #0]
 80a8760:	9a05      	ldr	r2, [sp, #20]
 80a8762:	eb03 0902 	add.w	r9, r3, r2
 80a8766:	9a06      	ldr	r2, [sp, #24]
 80a8768:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 80a876c:	eb02 060a 	add.w	r6, r2, sl
 80a8770:	aa20      	add	r2, sp, #128	; 0x80
 80a8772:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a8776:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 80a8778:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80a877c:	eb02 0989 	add.w	r9, r2, r9, lsl #2
 80a8780:	aa48      	add	r2, sp, #288	; 0x120
 80a8782:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 80a8786:	f859 0f04 	ldr.w	r0, [r9, #4]!
 80a878a:	f001 faad 	bl	80a9ce8 <__aeabi_i2f>
 80a878e:	9b01      	ldr	r3, [sp, #4]
 80a8790:	4634      	mov	r4, r6
 80a8792:	2b00      	cmp	r3, #0
 80a8794:	6030      	str	r0, [r6, #0]
 80a8796:	f106 0604 	add.w	r6, r6, #4
 80a879a:	db1a      	blt.n	80a87d2 <__kernel_rem_pio2f+0x2a2>
 80a879c:	2700      	movs	r7, #0
 80a879e:	f8dd b008 	ldr.w	fp, [sp, #8]
 80a87a2:	3c04      	subs	r4, #4
 80a87a4:	e001      	b.n	80a87aa <__kernel_rem_pio2f+0x27a>
 80a87a6:	f854 0904 	ldr.w	r0, [r4], #-4
 80a87aa:	f85b 1f04 	ldr.w	r1, [fp, #4]!
 80a87ae:	f001 faef 	bl	80a9d90 <__aeabi_fmul>
 80a87b2:	4601      	mov	r1, r0
 80a87b4:	4638      	mov	r0, r7
 80a87b6:	f001 f9e3 	bl	80a9b80 <__addsf3>
 80a87ba:	45ab      	cmp	fp, r5
 80a87bc:	4607      	mov	r7, r0
 80a87be:	d1f2      	bne.n	80a87a6 <__kernel_rem_pio2f+0x276>
 80a87c0:	9b00      	ldr	r3, [sp, #0]
 80a87c2:	f108 0801 	add.w	r8, r8, #1
 80a87c6:	4598      	cmp	r8, r3
 80a87c8:	f84a 7b04 	str.w	r7, [sl], #4
 80a87cc:	dddb      	ble.n	80a8786 <__kernel_rem_pio2f+0x256>
 80a87ce:	469a      	mov	sl, r3
 80a87d0:	e72f      	b.n	80a8632 <__kernel_rem_pio2f+0x102>
 80a87d2:	2700      	movs	r7, #0
 80a87d4:	9b00      	ldr	r3, [sp, #0]
 80a87d6:	f108 0801 	add.w	r8, r8, #1
 80a87da:	4598      	cmp	r8, r3
 80a87dc:	f84a 7b04 	str.w	r7, [sl], #4
 80a87e0:	ddd1      	ble.n	80a8786 <__kernel_rem_pio2f+0x256>
 80a87e2:	e7f4      	b.n	80a87ce <__kernel_rem_pio2f+0x29e>
 80a87e4:	f040 80a1 	bne.w	80a892a <__kernel_rem_pio2f+0x3fa>
 80a87e8:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80a87ec:	aa0c      	add	r2, sp, #48	; 0x30
 80a87ee:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80a87f2:	1236      	asrs	r6, r6, #8
 80a87f4:	2e00      	cmp	r6, #0
 80a87f6:	dd81      	ble.n	80a86fc <__kernel_rem_pio2f+0x1cc>
 80a87f8:	f1ba 0f00 	cmp.w	sl, #0
 80a87fc:	f107 0701 	add.w	r7, r7, #1
 80a8800:	f340 81ae 	ble.w	80a8b60 <__kernel_rem_pio2f+0x630>
 80a8804:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a8806:	2a00      	cmp	r2, #0
 80a8808:	f040 8087 	bne.w	80a891a <__kernel_rem_pio2f+0x3ea>
 80a880c:	f1ba 0f01 	cmp.w	sl, #1
 80a8810:	d01e      	beq.n	80a8850 <__kernel_rem_pio2f+0x320>
 80a8812:	2101      	movs	r1, #1
 80a8814:	ab0c      	add	r3, sp, #48	; 0x30
 80a8816:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80a881a:	2a00      	cmp	r2, #0
 80a881c:	f000 8080 	beq.w	80a8920 <__kernel_rem_pio2f+0x3f0>
 80a8820:	1c4b      	adds	r3, r1, #1
 80a8822:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80a8826:	a80c      	add	r0, sp, #48	; 0x30
 80a8828:	459a      	cmp	sl, r3
 80a882a:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 80a882e:	dd0e      	ble.n	80a884e <__kernel_rem_pio2f+0x31e>
 80a8830:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80a8834:	4480      	add	r8, r0
 80a8836:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80a883a:	e002      	b.n	80a8842 <__kernel_rem_pio2f+0x312>
 80a883c:	080aaefc 	.word	0x080aaefc
 80a8840:	681a      	ldr	r2, [r3, #0]
 80a8842:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80a8846:	f843 2b04 	str.w	r2, [r3], #4
 80a884a:	4543      	cmp	r3, r8
 80a884c:	d1f8      	bne.n	80a8840 <__kernel_rem_pio2f+0x310>
 80a884e:	2201      	movs	r2, #1
 80a8850:	9b04      	ldr	r3, [sp, #16]
 80a8852:	2b00      	cmp	r3, #0
 80a8854:	dd0e      	ble.n	80a8874 <__kernel_rem_pio2f+0x344>
 80a8856:	2b01      	cmp	r3, #1
 80a8858:	f000 8172 	beq.w	80a8b40 <__kernel_rem_pio2f+0x610>
 80a885c:	2b02      	cmp	r3, #2
 80a885e:	d109      	bne.n	80a8874 <__kernel_rem_pio2f+0x344>
 80a8860:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 80a8864:	ab0c      	add	r3, sp, #48	; 0x30
 80a8866:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80a886a:	a80c      	add	r0, sp, #48	; 0x30
 80a886c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80a8870:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 80a8874:	2e02      	cmp	r6, #2
 80a8876:	f47f af41 	bne.w	80a86fc <__kernel_rem_pio2f+0x1cc>
 80a887a:	4621      	mov	r1, r4
 80a887c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a8880:	9200      	str	r2, [sp, #0]
 80a8882:	f001 f97b 	bl	80a9b7c <__aeabi_fsub>
 80a8886:	9a00      	ldr	r2, [sp, #0]
 80a8888:	4604      	mov	r4, r0
 80a888a:	2a00      	cmp	r2, #0
 80a888c:	f43f af36 	beq.w	80a86fc <__kernel_rem_pio2f+0x1cc>
 80a8890:	9904      	ldr	r1, [sp, #16]
 80a8892:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a8896:	f000 fc11 	bl	80a90bc <scalbnf>
 80a889a:	4601      	mov	r1, r0
 80a889c:	4620      	mov	r0, r4
 80a889e:	f001 f96d 	bl	80a9b7c <__aeabi_fsub>
 80a88a2:	4604      	mov	r4, r0
 80a88a4:	2100      	movs	r1, #0
 80a88a6:	4620      	mov	r0, r4
 80a88a8:	f001 fc06 	bl	80aa0b8 <__aeabi_fcmpeq>
 80a88ac:	2800      	cmp	r0, #0
 80a88ae:	f47f af2c 	bne.w	80a870a <__kernel_rem_pio2f+0x1da>
 80a88b2:	4620      	mov	r0, r4
 80a88b4:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 80a88b8:	1a99      	subs	r1, r3, r2
 80a88ba:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80a88be:	f000 fbfd 	bl	80a90bc <scalbnf>
 80a88c2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a88c6:	4604      	mov	r4, r0
 80a88c8:	f001 fc14 	bl	80aa0f4 <__aeabi_fcmpge>
 80a88cc:	2800      	cmp	r0, #0
 80a88ce:	f000 8172 	beq.w	80a8bb6 <__kernel_rem_pio2f+0x686>
 80a88d2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80a88d6:	4620      	mov	r0, r4
 80a88d8:	f001 fa5a 	bl	80a9d90 <__aeabi_fmul>
 80a88dc:	f001 fc34 	bl	80aa148 <__aeabi_f2iz>
 80a88e0:	f001 fa02 	bl	80a9ce8 <__aeabi_i2f>
 80a88e4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a88e8:	4605      	mov	r5, r0
 80a88ea:	f001 fa51 	bl	80a9d90 <__aeabi_fmul>
 80a88ee:	4601      	mov	r1, r0
 80a88f0:	4620      	mov	r0, r4
 80a88f2:	f001 f943 	bl	80a9b7c <__aeabi_fsub>
 80a88f6:	f001 fc27 	bl	80aa148 <__aeabi_f2iz>
 80a88fa:	4603      	mov	r3, r0
 80a88fc:	aa0c      	add	r2, sp, #48	; 0x30
 80a88fe:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80a8902:	4628      	mov	r0, r5
 80a8904:	f001 fc20 	bl	80aa148 <__aeabi_f2iz>
 80a8908:	9b04      	ldr	r3, [sp, #16]
 80a890a:	f10a 0401 	add.w	r4, sl, #1
 80a890e:	3308      	adds	r3, #8
 80a8910:	9304      	str	r3, [sp, #16]
 80a8912:	ab0c      	add	r3, sp, #48	; 0x30
 80a8914:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80a8918:	e03a      	b.n	80a8990 <__kernel_rem_pio2f+0x460>
 80a891a:	2301      	movs	r3, #1
 80a891c:	2100      	movs	r1, #0
 80a891e:	e780      	b.n	80a8822 <__kernel_rem_pio2f+0x2f2>
 80a8920:	3101      	adds	r1, #1
 80a8922:	4551      	cmp	r1, sl
 80a8924:	f47f af77 	bne.w	80a8816 <__kernel_rem_pio2f+0x2e6>
 80a8928:	e792      	b.n	80a8850 <__kernel_rem_pio2f+0x320>
 80a892a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a892e:	f001 fbe1 	bl	80aa0f4 <__aeabi_fcmpge>
 80a8932:	4606      	mov	r6, r0
 80a8934:	2800      	cmp	r0, #0
 80a8936:	f43f aee1 	beq.w	80a86fc <__kernel_rem_pio2f+0x1cc>
 80a893a:	f1ba 0f00 	cmp.w	sl, #0
 80a893e:	bfc8      	it	gt
 80a8940:	2602      	movgt	r6, #2
 80a8942:	f107 0701 	add.w	r7, r7, #1
 80a8946:	f73f af5d 	bgt.w	80a8804 <__kernel_rem_pio2f+0x2d4>
 80a894a:	4621      	mov	r1, r4
 80a894c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a8950:	f001 f914 	bl	80a9b7c <__aeabi_fsub>
 80a8954:	2602      	movs	r6, #2
 80a8956:	4604      	mov	r4, r0
 80a8958:	e6d0      	b.n	80a86fc <__kernel_rem_pio2f+0x1cc>
 80a895a:	f10a 0301 	add.w	r3, sl, #1
 80a895e:	4698      	mov	r8, r3
 80a8960:	9300      	str	r3, [sp, #0]
 80a8962:	e6fd      	b.n	80a8760 <__kernel_rem_pio2f+0x230>
 80a8964:	9a04      	ldr	r2, [sp, #16]
 80a8966:	ab0c      	add	r3, sp, #48	; 0x30
 80a8968:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80a896c:	3a08      	subs	r2, #8
 80a896e:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80a8972:	9204      	str	r2, [sp, #16]
 80a8974:	b963      	cbnz	r3, 80a8990 <__kernel_rem_pio2f+0x460>
 80a8976:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 80a897a:	3b02      	subs	r3, #2
 80a897c:	a90c      	add	r1, sp, #48	; 0x30
 80a897e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a8982:	f853 1904 	ldr.w	r1, [r3], #-4
 80a8986:	3c01      	subs	r4, #1
 80a8988:	3a08      	subs	r2, #8
 80a898a:	2900      	cmp	r1, #0
 80a898c:	d0f9      	beq.n	80a8982 <__kernel_rem_pio2f+0x452>
 80a898e:	9204      	str	r2, [sp, #16]
 80a8990:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a8994:	9904      	ldr	r1, [sp, #16]
 80a8996:	f000 fb91 	bl	80a90bc <scalbnf>
 80a899a:	2c00      	cmp	r4, #0
 80a899c:	4607      	mov	r7, r0
 80a899e:	f2c0 8124 	blt.w	80a8bea <__kernel_rem_pio2f+0x6ba>
 80a89a2:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 80a89a6:	00a3      	lsls	r3, r4, #2
 80a89a8:	a948      	add	r1, sp, #288	; 0x120
 80a89aa:	1d1a      	adds	r2, r3, #4
 80a89ac:	eb01 0803 	add.w	r8, r1, r3
 80a89b0:	9304      	str	r3, [sp, #16]
 80a89b2:	ab0c      	add	r3, sp, #48	; 0x30
 80a89b4:	9205      	str	r2, [sp, #20]
 80a89b6:	eb03 0902 	add.w	r9, r3, r2
 80a89ba:	f108 0504 	add.w	r5, r8, #4
 80a89be:	f859 0d04 	ldr.w	r0, [r9, #-4]!
 80a89c2:	f001 f991 	bl	80a9ce8 <__aeabi_i2f>
 80a89c6:	4639      	mov	r1, r7
 80a89c8:	f001 f9e2 	bl	80a9d90 <__aeabi_fmul>
 80a89cc:	4603      	mov	r3, r0
 80a89ce:	4631      	mov	r1, r6
 80a89d0:	4638      	mov	r0, r7
 80a89d2:	f845 3d04 	str.w	r3, [r5, #-4]!
 80a89d6:	f001 f9db 	bl	80a9d90 <__aeabi_fmul>
 80a89da:	ab0c      	add	r3, sp, #48	; 0x30
 80a89dc:	4599      	cmp	r9, r3
 80a89de:	4607      	mov	r7, r0
 80a89e0:	d1ed      	bne.n	80a89be <__kernel_rem_pio2f+0x48e>
 80a89e2:	2700      	movs	r7, #0
 80a89e4:	f04f 0900 	mov.w	r9, #0
 80a89e8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80a89ec:	f1a8 0804 	sub.w	r8, r8, #4
 80a89f0:	9400      	str	r4, [sp, #0]
 80a89f2:	f1ba 0f00 	cmp.w	sl, #0
 80a89f6:	bfb8      	it	lt
 80a89f8:	464d      	movlt	r5, r9
 80a89fa:	db15      	blt.n	80a8a28 <__kernel_rem_pio2f+0x4f8>
 80a89fc:	46c3      	mov	fp, r8
 80a89fe:	464d      	mov	r5, r9
 80a8a00:	2600      	movs	r6, #0
 80a8a02:	4c82      	ldr	r4, [pc, #520]	; (80a8c0c <__kernel_rem_pio2f+0x6dc>)
 80a8a04:	4882      	ldr	r0, [pc, #520]	; (80a8c10 <__kernel_rem_pio2f+0x6e0>)
 80a8a06:	e003      	b.n	80a8a10 <__kernel_rem_pio2f+0x4e0>
 80a8a08:	42b7      	cmp	r7, r6
 80a8a0a:	db0d      	blt.n	80a8a28 <__kernel_rem_pio2f+0x4f8>
 80a8a0c:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80a8a10:	f85b 1f04 	ldr.w	r1, [fp, #4]!
 80a8a14:	f001 f9bc 	bl	80a9d90 <__aeabi_fmul>
 80a8a18:	4601      	mov	r1, r0
 80a8a1a:	4628      	mov	r0, r5
 80a8a1c:	f001 f8b0 	bl	80a9b80 <__addsf3>
 80a8a20:	3601      	adds	r6, #1
 80a8a22:	45b2      	cmp	sl, r6
 80a8a24:	4605      	mov	r5, r0
 80a8a26:	daef      	bge.n	80a8a08 <__kernel_rem_pio2f+0x4d8>
 80a8a28:	9a00      	ldr	r2, [sp, #0]
 80a8a2a:	ab5c      	add	r3, sp, #368	; 0x170
 80a8a2c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80a8a30:	42ba      	cmp	r2, r7
 80a8a32:	f843 5ca0 	str.w	r5, [r3, #-160]
 80a8a36:	f1a8 0804 	sub.w	r8, r8, #4
 80a8a3a:	f107 0301 	add.w	r3, r7, #1
 80a8a3e:	d001      	beq.n	80a8a44 <__kernel_rem_pio2f+0x514>
 80a8a40:	461f      	mov	r7, r3
 80a8a42:	e7d6      	b.n	80a89f2 <__kernel_rem_pio2f+0x4c2>
 80a8a44:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80a8a46:	9c00      	ldr	r4, [sp, #0]
 80a8a48:	2a02      	cmp	r2, #2
 80a8a4a:	dc1a      	bgt.n	80a8a82 <__kernel_rem_pio2f+0x552>
 80a8a4c:	2a00      	cmp	r2, #0
 80a8a4e:	f300 8089 	bgt.w	80a8b64 <__kernel_rem_pio2f+0x634>
 80a8a52:	d110      	bne.n	80a8a76 <__kernel_rem_pio2f+0x546>
 80a8a54:	9b05      	ldr	r3, [sp, #20]
 80a8a56:	ad34      	add	r5, sp, #208	; 0xd0
 80a8a58:	442b      	add	r3, r5
 80a8a5a:	2000      	movs	r0, #0
 80a8a5c:	461c      	mov	r4, r3
 80a8a5e:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80a8a62:	f001 f88d 	bl	80a9b80 <__addsf3>
 80a8a66:	42a5      	cmp	r5, r4
 80a8a68:	d1f9      	bne.n	80a8a5e <__kernel_rem_pio2f+0x52e>
 80a8a6a:	9b01      	ldr	r3, [sp, #4]
 80a8a6c:	b10b      	cbz	r3, 80a8a72 <__kernel_rem_pio2f+0x542>
 80a8a6e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a8a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a8a74:	6018      	str	r0, [r3, #0]
 80a8a76:	9b02      	ldr	r3, [sp, #8]
 80a8a78:	f003 0007 	and.w	r0, r3, #7
 80a8a7c:	b05d      	add	sp, #372	; 0x174
 80a8a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8a82:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80a8a84:	2b03      	cmp	r3, #3
 80a8a86:	d1f6      	bne.n	80a8a76 <__kernel_rem_pio2f+0x546>
 80a8a88:	2c00      	cmp	r4, #0
 80a8a8a:	f000 80bb 	beq.w	80a8c04 <__kernel_rem_pio2f+0x6d4>
 80a8a8e:	9a04      	ldr	r2, [sp, #16]
 80a8a90:	ab5c      	add	r3, sp, #368	; 0x170
 80a8a92:	4413      	add	r3, r2
 80a8a94:	ad34      	add	r5, sp, #208	; 0xd0
 80a8a96:	f853 7ca0 	ldr.w	r7, [r3, #-160]
 80a8a9a:	18ae      	adds	r6, r5, r2
 80a8a9c:	f856 8c04 	ldr.w	r8, [r6, #-4]
 80a8aa0:	4638      	mov	r0, r7
 80a8aa2:	4641      	mov	r1, r8
 80a8aa4:	f001 f86c 	bl	80a9b80 <__addsf3>
 80a8aa8:	46b9      	mov	r9, r7
 80a8aaa:	4607      	mov	r7, r0
 80a8aac:	4640      	mov	r0, r8
 80a8aae:	4639      	mov	r1, r7
 80a8ab0:	f001 f864 	bl	80a9b7c <__aeabi_fsub>
 80a8ab4:	4649      	mov	r1, r9
 80a8ab6:	f001 f863 	bl	80a9b80 <__addsf3>
 80a8aba:	6030      	str	r0, [r6, #0]
 80a8abc:	f846 7d04 	str.w	r7, [r6, #-4]!
 80a8ac0:	42b5      	cmp	r5, r6
 80a8ac2:	d1eb      	bne.n	80a8a9c <__kernel_rem_pio2f+0x56c>
 80a8ac4:	2c01      	cmp	r4, #1
 80a8ac6:	f340 809d 	ble.w	80a8c04 <__kernel_rem_pio2f+0x6d4>
 80a8aca:	9b04      	ldr	r3, [sp, #16]
 80a8acc:	aa5c      	add	r2, sp, #368	; 0x170
 80a8ace:	18ee      	adds	r6, r5, r3
 80a8ad0:	4637      	mov	r7, r6
 80a8ad2:	18d3      	adds	r3, r2, r3
 80a8ad4:	f853 4ca0 	ldr.w	r4, [r3, #-160]
 80a8ad8:	f10d 08d4 	add.w	r8, sp, #212	; 0xd4
 80a8adc:	f857 9c04 	ldr.w	r9, [r7, #-4]
 80a8ae0:	4620      	mov	r0, r4
 80a8ae2:	4649      	mov	r1, r9
 80a8ae4:	f001 f84c 	bl	80a9b80 <__addsf3>
 80a8ae8:	46a2      	mov	sl, r4
 80a8aea:	4604      	mov	r4, r0
 80a8aec:	4648      	mov	r0, r9
 80a8aee:	4621      	mov	r1, r4
 80a8af0:	f001 f844 	bl	80a9b7c <__aeabi_fsub>
 80a8af4:	4651      	mov	r1, sl
 80a8af6:	f001 f843 	bl	80a9b80 <__addsf3>
 80a8afa:	6038      	str	r0, [r7, #0]
 80a8afc:	f847 4d04 	str.w	r4, [r7, #-4]!
 80a8b00:	45b8      	cmp	r8, r7
 80a8b02:	d1eb      	bne.n	80a8adc <__kernel_rem_pio2f+0x5ac>
 80a8b04:	2000      	movs	r0, #0
 80a8b06:	3604      	adds	r6, #4
 80a8b08:	3508      	adds	r5, #8
 80a8b0a:	f856 1d04 	ldr.w	r1, [r6, #-4]!
 80a8b0e:	f001 f837 	bl	80a9b80 <__addsf3>
 80a8b12:	42b5      	cmp	r5, r6
 80a8b14:	d1f9      	bne.n	80a8b0a <__kernel_rem_pio2f+0x5da>
 80a8b16:	9b01      	ldr	r3, [sp, #4]
 80a8b18:	2b00      	cmp	r3, #0
 80a8b1a:	d054      	beq.n	80a8bc6 <__kernel_rem_pio2f+0x696>
 80a8b1c:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 80a8b20:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a8b24:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a8b28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a8b2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a8b2e:	604b      	str	r3, [r1, #4]
 80a8b30:	9b02      	ldr	r3, [sp, #8]
 80a8b32:	6088      	str	r0, [r1, #8]
 80a8b34:	f003 0007 	and.w	r0, r3, #7
 80a8b38:	600a      	str	r2, [r1, #0]
 80a8b3a:	b05d      	add	sp, #372	; 0x174
 80a8b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8b40:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 80a8b44:	ab0c      	add	r3, sp, #48	; 0x30
 80a8b46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80a8b4a:	a80c      	add	r0, sp, #48	; 0x30
 80a8b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80a8b50:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 80a8b54:	e68e      	b.n	80a8874 <__kernel_rem_pio2f+0x344>
 80a8b56:	2308      	movs	r3, #8
 80a8b58:	930a      	str	r3, [sp, #40]	; 0x28
 80a8b5a:	2300      	movs	r3, #0
 80a8b5c:	9305      	str	r3, [sp, #20]
 80a8b5e:	e502      	b.n	80a8566 <__kernel_rem_pio2f+0x36>
 80a8b60:	2200      	movs	r2, #0
 80a8b62:	e675      	b.n	80a8850 <__kernel_rem_pio2f+0x320>
 80a8b64:	2000      	movs	r0, #0
 80a8b66:	ae34      	add	r6, sp, #208	; 0xd0
 80a8b68:	eb06 0583 	add.w	r5, r6, r3, lsl #2
 80a8b6c:	f855 1d04 	ldr.w	r1, [r5, #-4]!
 80a8b70:	f001 f806 	bl	80a9b80 <__addsf3>
 80a8b74:	42ae      	cmp	r6, r5
 80a8b76:	d1f9      	bne.n	80a8b6c <__kernel_rem_pio2f+0x63c>
 80a8b78:	9b01      	ldr	r3, [sp, #4]
 80a8b7a:	bb3b      	cbnz	r3, 80a8bcc <__kernel_rem_pio2f+0x69c>
 80a8b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a8b7e:	4601      	mov	r1, r0
 80a8b80:	6018      	str	r0, [r3, #0]
 80a8b82:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80a8b84:	f000 fffa 	bl	80a9b7c <__aeabi_fsub>
 80a8b88:	2c00      	cmp	r4, #0
 80a8b8a:	dd0c      	ble.n	80a8ba6 <__kernel_rem_pio2f+0x676>
 80a8b8c:	2501      	movs	r5, #1
 80a8b8e:	ae34      	add	r6, sp, #208	; 0xd0
 80a8b90:	f856 1f04 	ldr.w	r1, [r6, #4]!
 80a8b94:	3501      	adds	r5, #1
 80a8b96:	f000 fff3 	bl	80a9b80 <__addsf3>
 80a8b9a:	42ac      	cmp	r4, r5
 80a8b9c:	daf8      	bge.n	80a8b90 <__kernel_rem_pio2f+0x660>
 80a8b9e:	9b01      	ldr	r3, [sp, #4]
 80a8ba0:	b10b      	cbz	r3, 80a8ba6 <__kernel_rem_pio2f+0x676>
 80a8ba2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a8ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a8ba8:	6058      	str	r0, [r3, #4]
 80a8baa:	9b02      	ldr	r3, [sp, #8]
 80a8bac:	f003 0007 	and.w	r0, r3, #7
 80a8bb0:	b05d      	add	sp, #372	; 0x174
 80a8bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8bb6:	4620      	mov	r0, r4
 80a8bb8:	f001 fac6 	bl	80aa148 <__aeabi_f2iz>
 80a8bbc:	ab0c      	add	r3, sp, #48	; 0x30
 80a8bbe:	4654      	mov	r4, sl
 80a8bc0:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 80a8bc4:	e6e4      	b.n	80a8990 <__kernel_rem_pio2f+0x460>
 80a8bc6:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80a8bc8:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80a8bca:	e7af      	b.n	80a8b2c <__kernel_rem_pio2f+0x5fc>
 80a8bcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a8bce:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80a8bd2:	4601      	mov	r1, r0
 80a8bd4:	6013      	str	r3, [r2, #0]
 80a8bd6:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80a8bd8:	f000 ffd0 	bl	80a9b7c <__aeabi_fsub>
 80a8bdc:	2c00      	cmp	r4, #0
 80a8bde:	dcd5      	bgt.n	80a8b8c <__kernel_rem_pio2f+0x65c>
 80a8be0:	e7df      	b.n	80a8ba2 <__kernel_rem_pio2f+0x672>
 80a8be2:	9b06      	ldr	r3, [sp, #24]
 80a8be4:	009b      	lsls	r3, r3, #2
 80a8be6:	9300      	str	r3, [sp, #0]
 80a8be8:	e514      	b.n	80a8614 <__kernel_rem_pio2f+0xe4>
 80a8bea:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80a8bec:	2b02      	cmp	r3, #2
 80a8bee:	dc05      	bgt.n	80a8bfc <__kernel_rem_pio2f+0x6cc>
 80a8bf0:	2b00      	cmp	r3, #0
 80a8bf2:	dc09      	bgt.n	80a8c08 <__kernel_rem_pio2f+0x6d8>
 80a8bf4:	f47f af3f 	bne.w	80a8a76 <__kernel_rem_pio2f+0x546>
 80a8bf8:	2000      	movs	r0, #0
 80a8bfa:	e736      	b.n	80a8a6a <__kernel_rem_pio2f+0x53a>
 80a8bfc:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80a8bfe:	2b03      	cmp	r3, #3
 80a8c00:	f47f af39 	bne.w	80a8a76 <__kernel_rem_pio2f+0x546>
 80a8c04:	2000      	movs	r0, #0
 80a8c06:	e786      	b.n	80a8b16 <__kernel_rem_pio2f+0x5e6>
 80a8c08:	2000      	movs	r0, #0
 80a8c0a:	e7b5      	b.n	80a8b78 <__kernel_rem_pio2f+0x648>
 80a8c0c:	080aaed0 	.word	0x080aaed0
 80a8c10:	3fc90000 	.word	0x3fc90000

080a8c14 <__kernel_sinf>:
 80a8c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a8c18:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80a8c1c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80a8c20:	4604      	mov	r4, r0
 80a8c22:	460e      	mov	r6, r1
 80a8c24:	4690      	mov	r8, r2
 80a8c26:	da03      	bge.n	80a8c30 <__kernel_sinf+0x1c>
 80a8c28:	f001 fa8e 	bl	80aa148 <__aeabi_f2iz>
 80a8c2c:	2800      	cmp	r0, #0
 80a8c2e:	d058      	beq.n	80a8ce2 <__kernel_sinf+0xce>
 80a8c30:	4621      	mov	r1, r4
 80a8c32:	4620      	mov	r0, r4
 80a8c34:	f001 f8ac 	bl	80a9d90 <__aeabi_fmul>
 80a8c38:	4605      	mov	r5, r0
 80a8c3a:	4620      	mov	r0, r4
 80a8c3c:	4629      	mov	r1, r5
 80a8c3e:	f001 f8a7 	bl	80a9d90 <__aeabi_fmul>
 80a8c42:	4929      	ldr	r1, [pc, #164]	; (80a8ce8 <__kernel_sinf+0xd4>)
 80a8c44:	4681      	mov	r9, r0
 80a8c46:	4628      	mov	r0, r5
 80a8c48:	f001 f8a2 	bl	80a9d90 <__aeabi_fmul>
 80a8c4c:	4927      	ldr	r1, [pc, #156]	; (80a8cec <__kernel_sinf+0xd8>)
 80a8c4e:	f000 ff95 	bl	80a9b7c <__aeabi_fsub>
 80a8c52:	4629      	mov	r1, r5
 80a8c54:	f001 f89c 	bl	80a9d90 <__aeabi_fmul>
 80a8c58:	4925      	ldr	r1, [pc, #148]	; (80a8cf0 <__kernel_sinf+0xdc>)
 80a8c5a:	f000 ff91 	bl	80a9b80 <__addsf3>
 80a8c5e:	4629      	mov	r1, r5
 80a8c60:	f001 f896 	bl	80a9d90 <__aeabi_fmul>
 80a8c64:	4923      	ldr	r1, [pc, #140]	; (80a8cf4 <__kernel_sinf+0xe0>)
 80a8c66:	f000 ff89 	bl	80a9b7c <__aeabi_fsub>
 80a8c6a:	4629      	mov	r1, r5
 80a8c6c:	f001 f890 	bl	80a9d90 <__aeabi_fmul>
 80a8c70:	4921      	ldr	r1, [pc, #132]	; (80a8cf8 <__kernel_sinf+0xe4>)
 80a8c72:	f000 ff85 	bl	80a9b80 <__addsf3>
 80a8c76:	4607      	mov	r7, r0
 80a8c78:	f1b8 0f00 	cmp.w	r8, #0
 80a8c7c:	d022      	beq.n	80a8cc4 <__kernel_sinf+0xb0>
 80a8c7e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a8c82:	4630      	mov	r0, r6
 80a8c84:	f001 f884 	bl	80a9d90 <__aeabi_fmul>
 80a8c88:	4639      	mov	r1, r7
 80a8c8a:	4607      	mov	r7, r0
 80a8c8c:	4648      	mov	r0, r9
 80a8c8e:	f001 f87f 	bl	80a9d90 <__aeabi_fmul>
 80a8c92:	4601      	mov	r1, r0
 80a8c94:	4638      	mov	r0, r7
 80a8c96:	f000 ff71 	bl	80a9b7c <__aeabi_fsub>
 80a8c9a:	4629      	mov	r1, r5
 80a8c9c:	f001 f878 	bl	80a9d90 <__aeabi_fmul>
 80a8ca0:	4631      	mov	r1, r6
 80a8ca2:	f000 ff6b 	bl	80a9b7c <__aeabi_fsub>
 80a8ca6:	4915      	ldr	r1, [pc, #84]	; (80a8cfc <__kernel_sinf+0xe8>)
 80a8ca8:	4605      	mov	r5, r0
 80a8caa:	4648      	mov	r0, r9
 80a8cac:	f001 f870 	bl	80a9d90 <__aeabi_fmul>
 80a8cb0:	4601      	mov	r1, r0
 80a8cb2:	4628      	mov	r0, r5
 80a8cb4:	f000 ff64 	bl	80a9b80 <__addsf3>
 80a8cb8:	4601      	mov	r1, r0
 80a8cba:	4620      	mov	r0, r4
 80a8cbc:	f000 ff5e 	bl	80a9b7c <__aeabi_fsub>
 80a8cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a8cc4:	4601      	mov	r1, r0
 80a8cc6:	4628      	mov	r0, r5
 80a8cc8:	f001 f862 	bl	80a9d90 <__aeabi_fmul>
 80a8ccc:	490b      	ldr	r1, [pc, #44]	; (80a8cfc <__kernel_sinf+0xe8>)
 80a8cce:	f000 ff55 	bl	80a9b7c <__aeabi_fsub>
 80a8cd2:	4649      	mov	r1, r9
 80a8cd4:	f001 f85c 	bl	80a9d90 <__aeabi_fmul>
 80a8cd8:	4621      	mov	r1, r4
 80a8cda:	f000 ff51 	bl	80a9b80 <__addsf3>
 80a8cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a8ce2:	4620      	mov	r0, r4
 80a8ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a8ce8:	2f2ec9d3 	.word	0x2f2ec9d3
 80a8cec:	32d72f34 	.word	0x32d72f34
 80a8cf0:	3638ef1b 	.word	0x3638ef1b
 80a8cf4:	39500d01 	.word	0x39500d01
 80a8cf8:	3c088889 	.word	0x3c088889
 80a8cfc:	3e2aaaab 	.word	0x3e2aaaab

080a8d00 <fabs>:
 80a8d00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a8d04:	4770      	bx	lr
 80a8d06:	bf00      	nop

080a8d08 <finite>:
 80a8d08:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80a8d0c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80a8d10:	0fc0      	lsrs	r0, r0, #31
 80a8d12:	4770      	bx	lr
 80a8d14:	0000      	movs	r0, r0
	...

080a8d18 <floor>:
 80a8d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a8d1a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80a8d1e:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
 80a8d22:	2d13      	cmp	r5, #19
 80a8d24:	460b      	mov	r3, r1
 80a8d26:	460c      	mov	r4, r1
 80a8d28:	4602      	mov	r2, r0
 80a8d2a:	4606      	mov	r6, r0
 80a8d2c:	dc20      	bgt.n	80a8d70 <floor+0x58>
 80a8d2e:	2d00      	cmp	r5, #0
 80a8d30:	db40      	blt.n	80a8db4 <floor+0x9c>
 80a8d32:	4f35      	ldr	r7, [pc, #212]	; (80a8e08 <floor+0xf0>)
 80a8d34:	412f      	asrs	r7, r5
 80a8d36:	ea01 0c07 	and.w	ip, r1, r7
 80a8d3a:	ea5c 0c00 	orrs.w	ip, ip, r0
 80a8d3e:	d014      	beq.n	80a8d6a <floor+0x52>
 80a8d40:	a32f      	add	r3, pc, #188	; (adr r3, 80a8e00 <floor+0xe8>)
 80a8d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8d46:	f000 fa17 	bl	80a9178 <__adddf3>
 80a8d4a:	2200      	movs	r2, #0
 80a8d4c:	2300      	movs	r3, #0
 80a8d4e:	f000 fe59 	bl	80a9a04 <__aeabi_dcmpgt>
 80a8d52:	b140      	cbz	r0, 80a8d66 <floor+0x4e>
 80a8d54:	2c00      	cmp	r4, #0
 80a8d56:	da03      	bge.n	80a8d60 <floor+0x48>
 80a8d58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80a8d5c:	412b      	asrs	r3, r5
 80a8d5e:	441c      	add	r4, r3
 80a8d60:	2600      	movs	r6, #0
 80a8d62:	ea24 0407 	bic.w	r4, r4, r7
 80a8d66:	4632      	mov	r2, r6
 80a8d68:	4623      	mov	r3, r4
 80a8d6a:	4610      	mov	r0, r2
 80a8d6c:	4619      	mov	r1, r3
 80a8d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a8d70:	2d33      	cmp	r5, #51	; 0x33
 80a8d72:	dd07      	ble.n	80a8d84 <floor+0x6c>
 80a8d74:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80a8d78:	d1f7      	bne.n	80a8d6a <floor+0x52>
 80a8d7a:	f000 f9fd 	bl	80a9178 <__adddf3>
 80a8d7e:	4602      	mov	r2, r0
 80a8d80:	460b      	mov	r3, r1
 80a8d82:	e7f2      	b.n	80a8d6a <floor+0x52>
 80a8d84:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a8d88:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80a8d8c:	fa2c f707 	lsr.w	r7, ip, r7
 80a8d90:	4207      	tst	r7, r0
 80a8d92:	d0ea      	beq.n	80a8d6a <floor+0x52>
 80a8d94:	a31a      	add	r3, pc, #104	; (adr r3, 80a8e00 <floor+0xe8>)
 80a8d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8d9a:	f000 f9ed 	bl	80a9178 <__adddf3>
 80a8d9e:	2200      	movs	r2, #0
 80a8da0:	2300      	movs	r3, #0
 80a8da2:	f000 fe2f 	bl	80a9a04 <__aeabi_dcmpgt>
 80a8da6:	2800      	cmp	r0, #0
 80a8da8:	d0dd      	beq.n	80a8d66 <floor+0x4e>
 80a8daa:	2c00      	cmp	r4, #0
 80a8dac:	db1b      	blt.n	80a8de6 <floor+0xce>
 80a8dae:	ea26 0607 	bic.w	r6, r6, r7
 80a8db2:	e7d8      	b.n	80a8d66 <floor+0x4e>
 80a8db4:	a312      	add	r3, pc, #72	; (adr r3, 80a8e00 <floor+0xe8>)
 80a8db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8dba:	f000 f9dd 	bl	80a9178 <__adddf3>
 80a8dbe:	2200      	movs	r2, #0
 80a8dc0:	2300      	movs	r3, #0
 80a8dc2:	f000 fe1f 	bl	80a9a04 <__aeabi_dcmpgt>
 80a8dc6:	2800      	cmp	r0, #0
 80a8dc8:	d0cd      	beq.n	80a8d66 <floor+0x4e>
 80a8dca:	2c00      	cmp	r4, #0
 80a8dcc:	db02      	blt.n	80a8dd4 <floor+0xbc>
 80a8dce:	2600      	movs	r6, #0
 80a8dd0:	4634      	mov	r4, r6
 80a8dd2:	e7c8      	b.n	80a8d66 <floor+0x4e>
 80a8dd4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80a8dd8:	4a0c      	ldr	r2, [pc, #48]	; (80a8e0c <floor+0xf4>)
 80a8dda:	431e      	orrs	r6, r3
 80a8ddc:	2e00      	cmp	r6, #0
 80a8dde:	bf18      	it	ne
 80a8de0:	4614      	movne	r4, r2
 80a8de2:	2600      	movs	r6, #0
 80a8de4:	e7bf      	b.n	80a8d66 <floor+0x4e>
 80a8de6:	2d14      	cmp	r5, #20
 80a8de8:	d008      	beq.n	80a8dfc <floor+0xe4>
 80a8dea:	2201      	movs	r2, #1
 80a8dec:	f1c5 0334 	rsb	r3, r5, #52	; 0x34
 80a8df0:	fa02 f303 	lsl.w	r3, r2, r3
 80a8df4:	199e      	adds	r6, r3, r6
 80a8df6:	bf28      	it	cs
 80a8df8:	18a4      	addcs	r4, r4, r2
 80a8dfa:	e7d8      	b.n	80a8dae <floor+0x96>
 80a8dfc:	3401      	adds	r4, #1
 80a8dfe:	e7d6      	b.n	80a8dae <floor+0x96>
 80a8e00:	8800759c 	.word	0x8800759c
 80a8e04:	7e37e43c 	.word	0x7e37e43c
 80a8e08:	000fffff 	.word	0x000fffff
 80a8e0c:	bff00000 	.word	0xbff00000

080a8e10 <matherr>:
 80a8e10:	2000      	movs	r0, #0
 80a8e12:	4770      	bx	lr

080a8e14 <nan>:
 80a8e14:	2000      	movs	r0, #0
 80a8e16:	4901      	ldr	r1, [pc, #4]	; (80a8e1c <nan+0x8>)
 80a8e18:	4770      	bx	lr
 80a8e1a:	bf00      	nop
 80a8e1c:	7ff80000 	.word	0x7ff80000

080a8e20 <rint>:
 80a8e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a8e22:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80a8e26:	f2ac 36ff 	subw	r6, ip, #1023	; 0x3ff
 80a8e2a:	2e13      	cmp	r6, #19
 80a8e2c:	4602      	mov	r2, r0
 80a8e2e:	460b      	mov	r3, r1
 80a8e30:	460d      	mov	r5, r1
 80a8e32:	4607      	mov	r7, r0
 80a8e34:	b083      	sub	sp, #12
 80a8e36:	ea4f 74d1 	mov.w	r4, r1, lsr #31
 80a8e3a:	dc2f      	bgt.n	80a8e9c <rint+0x7c>
 80a8e3c:	2e00      	cmp	r6, #0
 80a8e3e:	db4c      	blt.n	80a8eda <rint+0xba>
 80a8e40:	493d      	ldr	r1, [pc, #244]	; (80a8f38 <rint+0x118>)
 80a8e42:	4131      	asrs	r1, r6
 80a8e44:	ea03 0001 	and.w	r0, r3, r1
 80a8e48:	4310      	orrs	r0, r2
 80a8e4a:	d02c      	beq.n	80a8ea6 <rint+0x86>
 80a8e4c:	ea03 0351 	and.w	r3, r3, r1, lsr #1
 80a8e50:	ea52 0703 	orrs.w	r7, r2, r3
 80a8e54:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a8e58:	d00b      	beq.n	80a8e72 <rint+0x52>
 80a8e5a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80a8e5e:	2e13      	cmp	r6, #19
 80a8e60:	bf0c      	ite	eq
 80a8e62:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80a8e66:	2700      	movne	r7, #0
 80a8e68:	ea25 0101 	bic.w	r1, r5, r1
 80a8e6c:	fa43 f506 	asr.w	r5, r3, r6
 80a8e70:	430d      	orrs	r5, r1
 80a8e72:	4932      	ldr	r1, [pc, #200]	; (80a8f3c <rint+0x11c>)
 80a8e74:	462b      	mov	r3, r5
 80a8e76:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80a8e7a:	e9d4 4500 	ldrd	r4, r5, [r4]
 80a8e7e:	463a      	mov	r2, r7
 80a8e80:	4620      	mov	r0, r4
 80a8e82:	4629      	mov	r1, r5
 80a8e84:	f000 f978 	bl	80a9178 <__adddf3>
 80a8e88:	e9cd 0100 	strd	r0, r1, [sp]
 80a8e8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a8e90:	4622      	mov	r2, r4
 80a8e92:	462b      	mov	r3, r5
 80a8e94:	f000 f96e 	bl	80a9174 <__aeabi_dsub>
 80a8e98:	b003      	add	sp, #12
 80a8e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a8e9c:	2e33      	cmp	r6, #51	; 0x33
 80a8e9e:	dd06      	ble.n	80a8eae <rint+0x8e>
 80a8ea0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a8ea4:	d045      	beq.n	80a8f32 <rint+0x112>
 80a8ea6:	4610      	mov	r0, r2
 80a8ea8:	4619      	mov	r1, r3
 80a8eaa:	b003      	add	sp, #12
 80a8eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a8eae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80a8eb2:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80a8eb6:	fa21 f10c 	lsr.w	r1, r1, ip
 80a8eba:	4208      	tst	r0, r1
 80a8ebc:	d0f3      	beq.n	80a8ea6 <rint+0x86>
 80a8ebe:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80a8ec2:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80a8ec6:	d0d4      	beq.n	80a8e72 <rint+0x52>
 80a8ec8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80a8ecc:	ea20 0703 	bic.w	r7, r0, r3
 80a8ed0:	fa42 fc0c 	asr.w	ip, r2, ip
 80a8ed4:	ea47 070c 	orr.w	r7, r7, ip
 80a8ed8:	e7cb      	b.n	80a8e72 <rint+0x52>
 80a8eda:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a8ede:	4301      	orrs	r1, r0
 80a8ee0:	4619      	mov	r1, r3
 80a8ee2:	d0e2      	beq.n	80a8eaa <rint+0x8a>
 80a8ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a8ee8:	431f      	orrs	r7, r3
 80a8eea:	427b      	negs	r3, r7
 80a8eec:	433b      	orrs	r3, r7
 80a8eee:	0c6d      	lsrs	r5, r5, #17
 80a8ef0:	0b1b      	lsrs	r3, r3, #12
 80a8ef2:	046d      	lsls	r5, r5, #17
 80a8ef4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80a8ef8:	ea43 0105 	orr.w	r1, r3, r5
 80a8efc:	460b      	mov	r3, r1
 80a8efe:	490f      	ldr	r1, [pc, #60]	; (80a8f3c <rint+0x11c>)
 80a8f00:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80a8f04:	e9d1 6700 	ldrd	r6, r7, [r1]
 80a8f08:	4630      	mov	r0, r6
 80a8f0a:	4639      	mov	r1, r7
 80a8f0c:	f000 f934 	bl	80a9178 <__adddf3>
 80a8f10:	e9cd 0100 	strd	r0, r1, [sp]
 80a8f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a8f18:	4632      	mov	r2, r6
 80a8f1a:	463b      	mov	r3, r7
 80a8f1c:	f000 f92a 	bl	80a9174 <__aeabi_dsub>
 80a8f20:	4602      	mov	r2, r0
 80a8f22:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a8f26:	ea41 73c4 	orr.w	r3, r1, r4, lsl #31
 80a8f2a:	4610      	mov	r0, r2
 80a8f2c:	4619      	mov	r1, r3
 80a8f2e:	b003      	add	sp, #12
 80a8f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a8f32:	f000 f921 	bl	80a9178 <__adddf3>
 80a8f36:	e7b8      	b.n	80a8eaa <rint+0x8a>
 80a8f38:	000fffff 	.word	0x000fffff
 80a8f3c:	080aaf08 	.word	0x080aaf08

080a8f40 <scalbn>:
 80a8f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a8f42:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a8f46:	4604      	mov	r4, r0
 80a8f48:	460d      	mov	r5, r1
 80a8f4a:	460e      	mov	r6, r1
 80a8f4c:	4617      	mov	r7, r2
 80a8f4e:	bb73      	cbnz	r3, 80a8fae <scalbn+0x6e>
 80a8f50:	4603      	mov	r3, r0
 80a8f52:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a8f56:	4333      	orrs	r3, r6
 80a8f58:	d028      	beq.n	80a8fac <scalbn+0x6c>
 80a8f5a:	4b31      	ldr	r3, [pc, #196]	; (80a9020 <scalbn+0xe0>)
 80a8f5c:	2200      	movs	r2, #0
 80a8f5e:	f000 fac1 	bl	80a94e4 <__aeabi_dmul>
 80a8f62:	4b30      	ldr	r3, [pc, #192]	; (80a9024 <scalbn+0xe4>)
 80a8f64:	4604      	mov	r4, r0
 80a8f66:	429f      	cmp	r7, r3
 80a8f68:	460d      	mov	r5, r1
 80a8f6a:	db1a      	blt.n	80a8fa2 <scalbn+0x62>
 80a8f6c:	460e      	mov	r6, r1
 80a8f6e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a8f72:	3b36      	subs	r3, #54	; 0x36
 80a8f74:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a8f78:	443b      	add	r3, r7
 80a8f7a:	4293      	cmp	r3, r2
 80a8f7c:	dc20      	bgt.n	80a8fc0 <scalbn+0x80>
 80a8f7e:	2b00      	cmp	r3, #0
 80a8f80:	dc3c      	bgt.n	80a8ffc <scalbn+0xbc>
 80a8f82:	f113 0f35 	cmn.w	r3, #53	; 0x35
 80a8f86:	da2c      	bge.n	80a8fe2 <scalbn+0xa2>
 80a8f88:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a8f8c:	429f      	cmp	r7, r3
 80a8f8e:	dc17      	bgt.n	80a8fc0 <scalbn+0x80>
 80a8f90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80a8f94:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
 80a8f98:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80a8f9c:	4822      	ldr	r0, [pc, #136]	; (80a9028 <scalbn+0xe8>)
 80a8f9e:	f041 011f 	orr.w	r1, r1, #31
 80a8fa2:	a31b      	add	r3, pc, #108	; (adr r3, 80a9010 <scalbn+0xd0>)
 80a8fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8fa8:	f000 fa9c 	bl	80a94e4 <__aeabi_dmul>
 80a8fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a8fae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80a8fb2:	4293      	cmp	r3, r2
 80a8fb4:	d1de      	bne.n	80a8f74 <scalbn+0x34>
 80a8fb6:	4602      	mov	r2, r0
 80a8fb8:	460b      	mov	r3, r1
 80a8fba:	f000 f8dd 	bl	80a9178 <__adddf3>
 80a8fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a8fc0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80a8fc4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80a8fc8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80a8fcc:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80a8fd0:	a311      	add	r3, pc, #68	; (adr r3, 80a9018 <scalbn+0xd8>)
 80a8fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8fd6:	4815      	ldr	r0, [pc, #84]	; (80a902c <scalbn+0xec>)
 80a8fd8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80a8fdc:	f000 fa82 	bl	80a94e4 <__aeabi_dmul>
 80a8fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a8fe2:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 80a8fe6:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 80a8fea:	3336      	adds	r3, #54	; 0x36
 80a8fec:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
 80a8ff0:	4620      	mov	r0, r4
 80a8ff2:	2200      	movs	r2, #0
 80a8ff4:	4b0e      	ldr	r3, [pc, #56]	; (80a9030 <scalbn+0xf0>)
 80a8ff6:	f000 fa75 	bl	80a94e4 <__aeabi_dmul>
 80a8ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a8ffc:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 80a9000:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 80a9004:	4620      	mov	r0, r4
 80a9006:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
 80a900a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a900c:	f3af 8000 	nop.w
 80a9010:	c2f8f359 	.word	0xc2f8f359
 80a9014:	01a56e1f 	.word	0x01a56e1f
 80a9018:	8800759c 	.word	0x8800759c
 80a901c:	7e37e43c 	.word	0x7e37e43c
 80a9020:	43500000 	.word	0x43500000
 80a9024:	ffff3cb0 	.word	0xffff3cb0
 80a9028:	c2f8f359 	.word	0xc2f8f359
 80a902c:	8800759c 	.word	0x8800759c
 80a9030:	3c900000 	.word	0x3c900000

080a9034 <fabsf>:
 80a9034:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80a9038:	4770      	bx	lr
 80a903a:	bf00      	nop

080a903c <floorf>:
 80a903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a903e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80a9042:	3d7f      	subs	r5, #127	; 0x7f
 80a9044:	2d16      	cmp	r5, #22
 80a9046:	4604      	mov	r4, r0
 80a9048:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 80a904c:	dc17      	bgt.n	80a907e <floorf+0x42>
 80a904e:	2d00      	cmp	r5, #0
 80a9050:	4606      	mov	r6, r0
 80a9052:	db1b      	blt.n	80a908c <floorf+0x50>
 80a9054:	4f16      	ldr	r7, [pc, #88]	; (80a90b0 <floorf+0x74>)
 80a9056:	412f      	asrs	r7, r5
 80a9058:	4238      	tst	r0, r7
 80a905a:	d01e      	beq.n	80a909a <floorf+0x5e>
 80a905c:	4915      	ldr	r1, [pc, #84]	; (80a90b4 <floorf+0x78>)
 80a905e:	f000 fd8f 	bl	80a9b80 <__addsf3>
 80a9062:	2100      	movs	r1, #0
 80a9064:	f001 f850 	bl	80aa108 <__aeabi_fcmpgt>
 80a9068:	b1b8      	cbz	r0, 80a909a <floorf+0x5e>
 80a906a:	2c00      	cmp	r4, #0
 80a906c:	da04      	bge.n	80a9078 <floorf+0x3c>
 80a906e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80a9072:	fa43 f505 	asr.w	r5, r3, r5
 80a9076:	442e      	add	r6, r5
 80a9078:	ea26 0007 	bic.w	r0, r6, r7
 80a907c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a907e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80a9082:	d30a      	bcc.n	80a909a <floorf+0x5e>
 80a9084:	4601      	mov	r1, r0
 80a9086:	f000 fd7b 	bl	80a9b80 <__addsf3>
 80a908a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a908c:	4909      	ldr	r1, [pc, #36]	; (80a90b4 <floorf+0x78>)
 80a908e:	f000 fd77 	bl	80a9b80 <__addsf3>
 80a9092:	2100      	movs	r1, #0
 80a9094:	f001 f838 	bl	80aa108 <__aeabi_fcmpgt>
 80a9098:	b908      	cbnz	r0, 80a909e <floorf+0x62>
 80a909a:	4620      	mov	r0, r4
 80a909c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a909e:	2c00      	cmp	r4, #0
 80a90a0:	db01      	blt.n	80a90a6 <floorf+0x6a>
 80a90a2:	2000      	movs	r0, #0
 80a90a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a90a6:	2f00      	cmp	r7, #0
 80a90a8:	d0f7      	beq.n	80a909a <floorf+0x5e>
 80a90aa:	4803      	ldr	r0, [pc, #12]	; (80a90b8 <floorf+0x7c>)
 80a90ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a90ae:	bf00      	nop
 80a90b0:	007fffff 	.word	0x007fffff
 80a90b4:	7149f2ca 	.word	0x7149f2ca
 80a90b8:	bf800000 	.word	0xbf800000

080a90bc <scalbnf>:
 80a90bc:	b538      	push	{r3, r4, r5, lr}
 80a90be:	f030 4400 	bics.w	r4, r0, #2147483648	; 0x80000000
 80a90c2:	4603      	mov	r3, r0
 80a90c4:	d01d      	beq.n	80a9102 <scalbnf+0x46>
 80a90c6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80a90ca:	d21b      	bcs.n	80a9104 <scalbnf+0x48>
 80a90cc:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80a90d0:	4602      	mov	r2, r0
 80a90d2:	460d      	mov	r5, r1
 80a90d4:	d11a      	bne.n	80a910c <scalbnf+0x50>
 80a90d6:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80a90da:	f000 fe59 	bl	80a9d90 <__aeabi_fmul>
 80a90de:	4a20      	ldr	r2, [pc, #128]	; (80a9160 <scalbnf+0xa4>)
 80a90e0:	4603      	mov	r3, r0
 80a90e2:	4295      	cmp	r5, r2
 80a90e4:	db2c      	blt.n	80a9140 <scalbnf+0x84>
 80a90e6:	f3c0 54c7 	ubfx	r4, r0, #23, #8
 80a90ea:	4602      	mov	r2, r0
 80a90ec:	f1a4 0019 	sub.w	r0, r4, #25
 80a90f0:	1944      	adds	r4, r0, r5
 80a90f2:	2cfe      	cmp	r4, #254	; 0xfe
 80a90f4:	dd0e      	ble.n	80a9114 <scalbnf+0x58>
 80a90f6:	4618      	mov	r0, r3
 80a90f8:	491a      	ldr	r1, [pc, #104]	; (80a9164 <scalbnf+0xa8>)
 80a90fa:	f361 001e 	bfi	r0, r1, #0, #31
 80a90fe:	f000 fe47 	bl	80a9d90 <__aeabi_fmul>
 80a9102:	bd38      	pop	{r3, r4, r5, pc}
 80a9104:	4601      	mov	r1, r0
 80a9106:	f000 fd3b 	bl	80a9b80 <__addsf3>
 80a910a:	bd38      	pop	{r3, r4, r5, pc}
 80a910c:	0de0      	lsrs	r0, r4, #23
 80a910e:	1944      	adds	r4, r0, r5
 80a9110:	2cfe      	cmp	r4, #254	; 0xfe
 80a9112:	dcf0      	bgt.n	80a90f6 <scalbnf+0x3a>
 80a9114:	2c00      	cmp	r4, #0
 80a9116:	dc0e      	bgt.n	80a9136 <scalbnf+0x7a>
 80a9118:	f114 0f16 	cmn.w	r4, #22
 80a911c:	da14      	bge.n	80a9148 <scalbnf+0x8c>
 80a911e:	f24c 3250 	movw	r2, #50000	; 0xc350
 80a9122:	4618      	mov	r0, r3
 80a9124:	4295      	cmp	r5, r2
 80a9126:	bfcc      	ite	gt
 80a9128:	490e      	ldrgt	r1, [pc, #56]	; (80a9164 <scalbnf+0xa8>)
 80a912a:	490f      	ldrle	r1, [pc, #60]	; (80a9168 <scalbnf+0xac>)
 80a912c:	f361 001e 	bfi	r0, r1, #0, #31
 80a9130:	f000 fe2e 	bl	80a9d90 <__aeabi_fmul>
 80a9134:	bd38      	pop	{r3, r4, r5, pc}
 80a9136:	f022 40ff 	bic.w	r0, r2, #2139095040	; 0x7f800000
 80a913a:	ea40 50c4 	orr.w	r0, r0, r4, lsl #23
 80a913e:	bd38      	pop	{r3, r4, r5, pc}
 80a9140:	4909      	ldr	r1, [pc, #36]	; (80a9168 <scalbnf+0xac>)
 80a9142:	f000 fe25 	bl	80a9d90 <__aeabi_fmul>
 80a9146:	bd38      	pop	{r3, r4, r5, pc}
 80a9148:	f104 0019 	add.w	r0, r4, #25
 80a914c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80a9150:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80a9154:	ea42 50c0 	orr.w	r0, r2, r0, lsl #23
 80a9158:	f000 fe1a 	bl	80a9d90 <__aeabi_fmul>
 80a915c:	bd38      	pop	{r3, r4, r5, pc}
 80a915e:	bf00      	nop
 80a9160:	ffff3cb0 	.word	0xffff3cb0
 80a9164:	7149f2ca 	.word	0x7149f2ca
 80a9168:	0da24260 	.word	0x0da24260

080a916c <__aeabi_drsub>:
 80a916c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a9170:	e002      	b.n	80a9178 <__adddf3>
 80a9172:	bf00      	nop

080a9174 <__aeabi_dsub>:
 80a9174:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a9178 <__adddf3>:
 80a9178:	b530      	push	{r4, r5, lr}
 80a917a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a917e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a9182:	ea94 0f05 	teq	r4, r5
 80a9186:	bf08      	it	eq
 80a9188:	ea90 0f02 	teqeq	r0, r2
 80a918c:	bf1f      	itttt	ne
 80a918e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a9192:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a9196:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a919a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a919e:	f000 80e2 	beq.w	80a9366 <__adddf3+0x1ee>
 80a91a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a91a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a91aa:	bfb8      	it	lt
 80a91ac:	426d      	neglt	r5, r5
 80a91ae:	dd0c      	ble.n	80a91ca <__adddf3+0x52>
 80a91b0:	442c      	add	r4, r5
 80a91b2:	ea80 0202 	eor.w	r2, r0, r2
 80a91b6:	ea81 0303 	eor.w	r3, r1, r3
 80a91ba:	ea82 0000 	eor.w	r0, r2, r0
 80a91be:	ea83 0101 	eor.w	r1, r3, r1
 80a91c2:	ea80 0202 	eor.w	r2, r0, r2
 80a91c6:	ea81 0303 	eor.w	r3, r1, r3
 80a91ca:	2d36      	cmp	r5, #54	; 0x36
 80a91cc:	bf88      	it	hi
 80a91ce:	bd30      	pophi	{r4, r5, pc}
 80a91d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a91d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a91d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a91dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a91e0:	d002      	beq.n	80a91e8 <__adddf3+0x70>
 80a91e2:	4240      	negs	r0, r0
 80a91e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a91e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a91ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a91f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a91f4:	d002      	beq.n	80a91fc <__adddf3+0x84>
 80a91f6:	4252      	negs	r2, r2
 80a91f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a91fc:	ea94 0f05 	teq	r4, r5
 80a9200:	f000 80a7 	beq.w	80a9352 <__adddf3+0x1da>
 80a9204:	f1a4 0401 	sub.w	r4, r4, #1
 80a9208:	f1d5 0e20 	rsbs	lr, r5, #32
 80a920c:	db0d      	blt.n	80a922a <__adddf3+0xb2>
 80a920e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a9212:	fa22 f205 	lsr.w	r2, r2, r5
 80a9216:	1880      	adds	r0, r0, r2
 80a9218:	f141 0100 	adc.w	r1, r1, #0
 80a921c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a9220:	1880      	adds	r0, r0, r2
 80a9222:	fa43 f305 	asr.w	r3, r3, r5
 80a9226:	4159      	adcs	r1, r3
 80a9228:	e00e      	b.n	80a9248 <__adddf3+0xd0>
 80a922a:	f1a5 0520 	sub.w	r5, r5, #32
 80a922e:	f10e 0e20 	add.w	lr, lr, #32
 80a9232:	2a01      	cmp	r2, #1
 80a9234:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a9238:	bf28      	it	cs
 80a923a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a923e:	fa43 f305 	asr.w	r3, r3, r5
 80a9242:	18c0      	adds	r0, r0, r3
 80a9244:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a9248:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a924c:	d507      	bpl.n	80a925e <__adddf3+0xe6>
 80a924e:	f04f 0e00 	mov.w	lr, #0
 80a9252:	f1dc 0c00 	rsbs	ip, ip, #0
 80a9256:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a925a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a925e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a9262:	d31b      	bcc.n	80a929c <__adddf3+0x124>
 80a9264:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a9268:	d30c      	bcc.n	80a9284 <__adddf3+0x10c>
 80a926a:	0849      	lsrs	r1, r1, #1
 80a926c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a9270:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a9274:	f104 0401 	add.w	r4, r4, #1
 80a9278:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a927c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a9280:	f080 809a 	bcs.w	80a93b8 <__adddf3+0x240>
 80a9284:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a9288:	bf08      	it	eq
 80a928a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a928e:	f150 0000 	adcs.w	r0, r0, #0
 80a9292:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a9296:	ea41 0105 	orr.w	r1, r1, r5
 80a929a:	bd30      	pop	{r4, r5, pc}
 80a929c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a92a0:	4140      	adcs	r0, r0
 80a92a2:	eb41 0101 	adc.w	r1, r1, r1
 80a92a6:	3c01      	subs	r4, #1
 80a92a8:	bf28      	it	cs
 80a92aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a92ae:	d2e9      	bcs.n	80a9284 <__adddf3+0x10c>
 80a92b0:	f091 0f00 	teq	r1, #0
 80a92b4:	bf04      	itt	eq
 80a92b6:	4601      	moveq	r1, r0
 80a92b8:	2000      	moveq	r0, #0
 80a92ba:	fab1 f381 	clz	r3, r1
 80a92be:	bf08      	it	eq
 80a92c0:	3320      	addeq	r3, #32
 80a92c2:	f1a3 030b 	sub.w	r3, r3, #11
 80a92c6:	f1b3 0220 	subs.w	r2, r3, #32
 80a92ca:	da0c      	bge.n	80a92e6 <__adddf3+0x16e>
 80a92cc:	320c      	adds	r2, #12
 80a92ce:	dd08      	ble.n	80a92e2 <__adddf3+0x16a>
 80a92d0:	f102 0c14 	add.w	ip, r2, #20
 80a92d4:	f1c2 020c 	rsb	r2, r2, #12
 80a92d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80a92dc:	fa21 f102 	lsr.w	r1, r1, r2
 80a92e0:	e00c      	b.n	80a92fc <__adddf3+0x184>
 80a92e2:	f102 0214 	add.w	r2, r2, #20
 80a92e6:	bfd8      	it	le
 80a92e8:	f1c2 0c20 	rsble	ip, r2, #32
 80a92ec:	fa01 f102 	lsl.w	r1, r1, r2
 80a92f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a92f4:	bfdc      	itt	le
 80a92f6:	ea41 010c 	orrle.w	r1, r1, ip
 80a92fa:	4090      	lslle	r0, r2
 80a92fc:	1ae4      	subs	r4, r4, r3
 80a92fe:	bfa2      	ittt	ge
 80a9300:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a9304:	4329      	orrge	r1, r5
 80a9306:	bd30      	popge	{r4, r5, pc}
 80a9308:	ea6f 0404 	mvn.w	r4, r4
 80a930c:	3c1f      	subs	r4, #31
 80a930e:	da1c      	bge.n	80a934a <__adddf3+0x1d2>
 80a9310:	340c      	adds	r4, #12
 80a9312:	dc0e      	bgt.n	80a9332 <__adddf3+0x1ba>
 80a9314:	f104 0414 	add.w	r4, r4, #20
 80a9318:	f1c4 0220 	rsb	r2, r4, #32
 80a931c:	fa20 f004 	lsr.w	r0, r0, r4
 80a9320:	fa01 f302 	lsl.w	r3, r1, r2
 80a9324:	ea40 0003 	orr.w	r0, r0, r3
 80a9328:	fa21 f304 	lsr.w	r3, r1, r4
 80a932c:	ea45 0103 	orr.w	r1, r5, r3
 80a9330:	bd30      	pop	{r4, r5, pc}
 80a9332:	f1c4 040c 	rsb	r4, r4, #12
 80a9336:	f1c4 0220 	rsb	r2, r4, #32
 80a933a:	fa20 f002 	lsr.w	r0, r0, r2
 80a933e:	fa01 f304 	lsl.w	r3, r1, r4
 80a9342:	ea40 0003 	orr.w	r0, r0, r3
 80a9346:	4629      	mov	r1, r5
 80a9348:	bd30      	pop	{r4, r5, pc}
 80a934a:	fa21 f004 	lsr.w	r0, r1, r4
 80a934e:	4629      	mov	r1, r5
 80a9350:	bd30      	pop	{r4, r5, pc}
 80a9352:	f094 0f00 	teq	r4, #0
 80a9356:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a935a:	bf06      	itte	eq
 80a935c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a9360:	3401      	addeq	r4, #1
 80a9362:	3d01      	subne	r5, #1
 80a9364:	e74e      	b.n	80a9204 <__adddf3+0x8c>
 80a9366:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a936a:	bf18      	it	ne
 80a936c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a9370:	d029      	beq.n	80a93c6 <__adddf3+0x24e>
 80a9372:	ea94 0f05 	teq	r4, r5
 80a9376:	bf08      	it	eq
 80a9378:	ea90 0f02 	teqeq	r0, r2
 80a937c:	d005      	beq.n	80a938a <__adddf3+0x212>
 80a937e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a9382:	bf04      	itt	eq
 80a9384:	4619      	moveq	r1, r3
 80a9386:	4610      	moveq	r0, r2
 80a9388:	bd30      	pop	{r4, r5, pc}
 80a938a:	ea91 0f03 	teq	r1, r3
 80a938e:	bf1e      	ittt	ne
 80a9390:	2100      	movne	r1, #0
 80a9392:	2000      	movne	r0, #0
 80a9394:	bd30      	popne	{r4, r5, pc}
 80a9396:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a939a:	d105      	bne.n	80a93a8 <__adddf3+0x230>
 80a939c:	0040      	lsls	r0, r0, #1
 80a939e:	4149      	adcs	r1, r1
 80a93a0:	bf28      	it	cs
 80a93a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a93a6:	bd30      	pop	{r4, r5, pc}
 80a93a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a93ac:	bf3c      	itt	cc
 80a93ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a93b2:	bd30      	popcc	{r4, r5, pc}
 80a93b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a93b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a93bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a93c0:	f04f 0000 	mov.w	r0, #0
 80a93c4:	bd30      	pop	{r4, r5, pc}
 80a93c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a93ca:	bf1a      	itte	ne
 80a93cc:	4619      	movne	r1, r3
 80a93ce:	4610      	movne	r0, r2
 80a93d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a93d4:	bf1c      	itt	ne
 80a93d6:	460b      	movne	r3, r1
 80a93d8:	4602      	movne	r2, r0
 80a93da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a93de:	bf06      	itte	eq
 80a93e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a93e4:	ea91 0f03 	teqeq	r1, r3
 80a93e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a93ec:	bd30      	pop	{r4, r5, pc}
 80a93ee:	bf00      	nop

080a93f0 <__aeabi_ui2d>:
 80a93f0:	f090 0f00 	teq	r0, #0
 80a93f4:	bf04      	itt	eq
 80a93f6:	2100      	moveq	r1, #0
 80a93f8:	4770      	bxeq	lr
 80a93fa:	b530      	push	{r4, r5, lr}
 80a93fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a9400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a9404:	f04f 0500 	mov.w	r5, #0
 80a9408:	f04f 0100 	mov.w	r1, #0
 80a940c:	e750      	b.n	80a92b0 <__adddf3+0x138>
 80a940e:	bf00      	nop

080a9410 <__aeabi_i2d>:
 80a9410:	f090 0f00 	teq	r0, #0
 80a9414:	bf04      	itt	eq
 80a9416:	2100      	moveq	r1, #0
 80a9418:	4770      	bxeq	lr
 80a941a:	b530      	push	{r4, r5, lr}
 80a941c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a9420:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a9424:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a9428:	bf48      	it	mi
 80a942a:	4240      	negmi	r0, r0
 80a942c:	f04f 0100 	mov.w	r1, #0
 80a9430:	e73e      	b.n	80a92b0 <__adddf3+0x138>
 80a9432:	bf00      	nop

080a9434 <__aeabi_f2d>:
 80a9434:	0042      	lsls	r2, r0, #1
 80a9436:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a943a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a943e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a9442:	bf1f      	itttt	ne
 80a9444:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a9448:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a944c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a9450:	4770      	bxne	lr
 80a9452:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a9456:	bf08      	it	eq
 80a9458:	4770      	bxeq	lr
 80a945a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a945e:	bf04      	itt	eq
 80a9460:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a9464:	4770      	bxeq	lr
 80a9466:	b530      	push	{r4, r5, lr}
 80a9468:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a946c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a9470:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a9474:	e71c      	b.n	80a92b0 <__adddf3+0x138>
 80a9476:	bf00      	nop

080a9478 <__aeabi_ul2d>:
 80a9478:	ea50 0201 	orrs.w	r2, r0, r1
 80a947c:	bf08      	it	eq
 80a947e:	4770      	bxeq	lr
 80a9480:	b530      	push	{r4, r5, lr}
 80a9482:	f04f 0500 	mov.w	r5, #0
 80a9486:	e00a      	b.n	80a949e <__aeabi_l2d+0x16>

080a9488 <__aeabi_l2d>:
 80a9488:	ea50 0201 	orrs.w	r2, r0, r1
 80a948c:	bf08      	it	eq
 80a948e:	4770      	bxeq	lr
 80a9490:	b530      	push	{r4, r5, lr}
 80a9492:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a9496:	d502      	bpl.n	80a949e <__aeabi_l2d+0x16>
 80a9498:	4240      	negs	r0, r0
 80a949a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a949e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a94a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a94a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a94aa:	f43f aed8 	beq.w	80a925e <__adddf3+0xe6>
 80a94ae:	f04f 0203 	mov.w	r2, #3
 80a94b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a94b6:	bf18      	it	ne
 80a94b8:	3203      	addne	r2, #3
 80a94ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a94be:	bf18      	it	ne
 80a94c0:	3203      	addne	r2, #3
 80a94c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a94c6:	f1c2 0320 	rsb	r3, r2, #32
 80a94ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80a94ce:	fa20 f002 	lsr.w	r0, r0, r2
 80a94d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80a94d6:	ea40 000e 	orr.w	r0, r0, lr
 80a94da:	fa21 f102 	lsr.w	r1, r1, r2
 80a94de:	4414      	add	r4, r2
 80a94e0:	e6bd      	b.n	80a925e <__adddf3+0xe6>
 80a94e2:	bf00      	nop

080a94e4 <__aeabi_dmul>:
 80a94e4:	b570      	push	{r4, r5, r6, lr}
 80a94e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a94ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a94ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a94f2:	bf1d      	ittte	ne
 80a94f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a94f8:	ea94 0f0c 	teqne	r4, ip
 80a94fc:	ea95 0f0c 	teqne	r5, ip
 80a9500:	f000 f8de 	bleq	80a96c0 <__aeabi_dmul+0x1dc>
 80a9504:	442c      	add	r4, r5
 80a9506:	ea81 0603 	eor.w	r6, r1, r3
 80a950a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a950e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a9512:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a9516:	bf18      	it	ne
 80a9518:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a951c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a9520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a9524:	d038      	beq.n	80a9598 <__aeabi_dmul+0xb4>
 80a9526:	fba0 ce02 	umull	ip, lr, r0, r2
 80a952a:	f04f 0500 	mov.w	r5, #0
 80a952e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a9532:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a9536:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a953a:	f04f 0600 	mov.w	r6, #0
 80a953e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a9542:	f09c 0f00 	teq	ip, #0
 80a9546:	bf18      	it	ne
 80a9548:	f04e 0e01 	orrne.w	lr, lr, #1
 80a954c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a9550:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a9554:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a9558:	d204      	bcs.n	80a9564 <__aeabi_dmul+0x80>
 80a955a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a955e:	416d      	adcs	r5, r5
 80a9560:	eb46 0606 	adc.w	r6, r6, r6
 80a9564:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a9568:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a956c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a9570:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a9574:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a9578:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a957c:	bf88      	it	hi
 80a957e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a9582:	d81e      	bhi.n	80a95c2 <__aeabi_dmul+0xde>
 80a9584:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a9588:	bf08      	it	eq
 80a958a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a958e:	f150 0000 	adcs.w	r0, r0, #0
 80a9592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a9596:	bd70      	pop	{r4, r5, r6, pc}
 80a9598:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a959c:	ea46 0101 	orr.w	r1, r6, r1
 80a95a0:	ea40 0002 	orr.w	r0, r0, r2
 80a95a4:	ea81 0103 	eor.w	r1, r1, r3
 80a95a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a95ac:	bfc2      	ittt	gt
 80a95ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a95b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a95b6:	bd70      	popgt	{r4, r5, r6, pc}
 80a95b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a95bc:	f04f 0e00 	mov.w	lr, #0
 80a95c0:	3c01      	subs	r4, #1
 80a95c2:	f300 80ab 	bgt.w	80a971c <__aeabi_dmul+0x238>
 80a95c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a95ca:	bfde      	ittt	le
 80a95cc:	2000      	movle	r0, #0
 80a95ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a95d2:	bd70      	pople	{r4, r5, r6, pc}
 80a95d4:	f1c4 0400 	rsb	r4, r4, #0
 80a95d8:	3c20      	subs	r4, #32
 80a95da:	da35      	bge.n	80a9648 <__aeabi_dmul+0x164>
 80a95dc:	340c      	adds	r4, #12
 80a95de:	dc1b      	bgt.n	80a9618 <__aeabi_dmul+0x134>
 80a95e0:	f104 0414 	add.w	r4, r4, #20
 80a95e4:	f1c4 0520 	rsb	r5, r4, #32
 80a95e8:	fa00 f305 	lsl.w	r3, r0, r5
 80a95ec:	fa20 f004 	lsr.w	r0, r0, r4
 80a95f0:	fa01 f205 	lsl.w	r2, r1, r5
 80a95f4:	ea40 0002 	orr.w	r0, r0, r2
 80a95f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a95fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a9600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a9604:	fa21 f604 	lsr.w	r6, r1, r4
 80a9608:	eb42 0106 	adc.w	r1, r2, r6
 80a960c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a9610:	bf08      	it	eq
 80a9612:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a9616:	bd70      	pop	{r4, r5, r6, pc}
 80a9618:	f1c4 040c 	rsb	r4, r4, #12
 80a961c:	f1c4 0520 	rsb	r5, r4, #32
 80a9620:	fa00 f304 	lsl.w	r3, r0, r4
 80a9624:	fa20 f005 	lsr.w	r0, r0, r5
 80a9628:	fa01 f204 	lsl.w	r2, r1, r4
 80a962c:	ea40 0002 	orr.w	r0, r0, r2
 80a9630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a9634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a9638:	f141 0100 	adc.w	r1, r1, #0
 80a963c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a9640:	bf08      	it	eq
 80a9642:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a9646:	bd70      	pop	{r4, r5, r6, pc}
 80a9648:	f1c4 0520 	rsb	r5, r4, #32
 80a964c:	fa00 f205 	lsl.w	r2, r0, r5
 80a9650:	ea4e 0e02 	orr.w	lr, lr, r2
 80a9654:	fa20 f304 	lsr.w	r3, r0, r4
 80a9658:	fa01 f205 	lsl.w	r2, r1, r5
 80a965c:	ea43 0302 	orr.w	r3, r3, r2
 80a9660:	fa21 f004 	lsr.w	r0, r1, r4
 80a9664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a9668:	fa21 f204 	lsr.w	r2, r1, r4
 80a966c:	ea20 0002 	bic.w	r0, r0, r2
 80a9670:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a9674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a9678:	bf08      	it	eq
 80a967a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a967e:	bd70      	pop	{r4, r5, r6, pc}
 80a9680:	f094 0f00 	teq	r4, #0
 80a9684:	d10f      	bne.n	80a96a6 <__aeabi_dmul+0x1c2>
 80a9686:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a968a:	0040      	lsls	r0, r0, #1
 80a968c:	eb41 0101 	adc.w	r1, r1, r1
 80a9690:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a9694:	bf08      	it	eq
 80a9696:	3c01      	subeq	r4, #1
 80a9698:	d0f7      	beq.n	80a968a <__aeabi_dmul+0x1a6>
 80a969a:	ea41 0106 	orr.w	r1, r1, r6
 80a969e:	f095 0f00 	teq	r5, #0
 80a96a2:	bf18      	it	ne
 80a96a4:	4770      	bxne	lr
 80a96a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a96aa:	0052      	lsls	r2, r2, #1
 80a96ac:	eb43 0303 	adc.w	r3, r3, r3
 80a96b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a96b4:	bf08      	it	eq
 80a96b6:	3d01      	subeq	r5, #1
 80a96b8:	d0f7      	beq.n	80a96aa <__aeabi_dmul+0x1c6>
 80a96ba:	ea43 0306 	orr.w	r3, r3, r6
 80a96be:	4770      	bx	lr
 80a96c0:	ea94 0f0c 	teq	r4, ip
 80a96c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a96c8:	bf18      	it	ne
 80a96ca:	ea95 0f0c 	teqne	r5, ip
 80a96ce:	d00c      	beq.n	80a96ea <__aeabi_dmul+0x206>
 80a96d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a96d4:	bf18      	it	ne
 80a96d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a96da:	d1d1      	bne.n	80a9680 <__aeabi_dmul+0x19c>
 80a96dc:	ea81 0103 	eor.w	r1, r1, r3
 80a96e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a96e4:	f04f 0000 	mov.w	r0, #0
 80a96e8:	bd70      	pop	{r4, r5, r6, pc}
 80a96ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a96ee:	bf06      	itte	eq
 80a96f0:	4610      	moveq	r0, r2
 80a96f2:	4619      	moveq	r1, r3
 80a96f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a96f8:	d019      	beq.n	80a972e <__aeabi_dmul+0x24a>
 80a96fa:	ea94 0f0c 	teq	r4, ip
 80a96fe:	d102      	bne.n	80a9706 <__aeabi_dmul+0x222>
 80a9700:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a9704:	d113      	bne.n	80a972e <__aeabi_dmul+0x24a>
 80a9706:	ea95 0f0c 	teq	r5, ip
 80a970a:	d105      	bne.n	80a9718 <__aeabi_dmul+0x234>
 80a970c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a9710:	bf1c      	itt	ne
 80a9712:	4610      	movne	r0, r2
 80a9714:	4619      	movne	r1, r3
 80a9716:	d10a      	bne.n	80a972e <__aeabi_dmul+0x24a>
 80a9718:	ea81 0103 	eor.w	r1, r1, r3
 80a971c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a9720:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a9724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a9728:	f04f 0000 	mov.w	r0, #0
 80a972c:	bd70      	pop	{r4, r5, r6, pc}
 80a972e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a9732:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a9736:	bd70      	pop	{r4, r5, r6, pc}

080a9738 <__aeabi_ddiv>:
 80a9738:	b570      	push	{r4, r5, r6, lr}
 80a973a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a973e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a9742:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a9746:	bf1d      	ittte	ne
 80a9748:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a974c:	ea94 0f0c 	teqne	r4, ip
 80a9750:	ea95 0f0c 	teqne	r5, ip
 80a9754:	f000 f8a7 	bleq	80a98a6 <__aeabi_ddiv+0x16e>
 80a9758:	eba4 0405 	sub.w	r4, r4, r5
 80a975c:	ea81 0e03 	eor.w	lr, r1, r3
 80a9760:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a9764:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a9768:	f000 8088 	beq.w	80a987c <__aeabi_ddiv+0x144>
 80a976c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a9770:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a9774:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a9778:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a977c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a9780:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a9784:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a9788:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a978c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a9790:	429d      	cmp	r5, r3
 80a9792:	bf08      	it	eq
 80a9794:	4296      	cmpeq	r6, r2
 80a9796:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a979a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a979e:	d202      	bcs.n	80a97a6 <__aeabi_ddiv+0x6e>
 80a97a0:	085b      	lsrs	r3, r3, #1
 80a97a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a97a6:	1ab6      	subs	r6, r6, r2
 80a97a8:	eb65 0503 	sbc.w	r5, r5, r3
 80a97ac:	085b      	lsrs	r3, r3, #1
 80a97ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80a97b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a97b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a97ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80a97be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a97c2:	bf22      	ittt	cs
 80a97c4:	1ab6      	subcs	r6, r6, r2
 80a97c6:	4675      	movcs	r5, lr
 80a97c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a97cc:	085b      	lsrs	r3, r3, #1
 80a97ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80a97d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a97d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a97da:	bf22      	ittt	cs
 80a97dc:	1ab6      	subcs	r6, r6, r2
 80a97de:	4675      	movcs	r5, lr
 80a97e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a97e4:	085b      	lsrs	r3, r3, #1
 80a97e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a97ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80a97ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a97f2:	bf22      	ittt	cs
 80a97f4:	1ab6      	subcs	r6, r6, r2
 80a97f6:	4675      	movcs	r5, lr
 80a97f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a97fc:	085b      	lsrs	r3, r3, #1
 80a97fe:	ea4f 0232 	mov.w	r2, r2, rrx
 80a9802:	ebb6 0e02 	subs.w	lr, r6, r2
 80a9806:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a980a:	bf22      	ittt	cs
 80a980c:	1ab6      	subcs	r6, r6, r2
 80a980e:	4675      	movcs	r5, lr
 80a9810:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a9814:	ea55 0e06 	orrs.w	lr, r5, r6
 80a9818:	d018      	beq.n	80a984c <__aeabi_ddiv+0x114>
 80a981a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a981e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a9822:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a9826:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a982a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a982e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a9832:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a9836:	d1c0      	bne.n	80a97ba <__aeabi_ddiv+0x82>
 80a9838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a983c:	d10b      	bne.n	80a9856 <__aeabi_ddiv+0x11e>
 80a983e:	ea41 0100 	orr.w	r1, r1, r0
 80a9842:	f04f 0000 	mov.w	r0, #0
 80a9846:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a984a:	e7b6      	b.n	80a97ba <__aeabi_ddiv+0x82>
 80a984c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a9850:	bf04      	itt	eq
 80a9852:	4301      	orreq	r1, r0
 80a9854:	2000      	moveq	r0, #0
 80a9856:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a985a:	bf88      	it	hi
 80a985c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a9860:	f63f aeaf 	bhi.w	80a95c2 <__aeabi_dmul+0xde>
 80a9864:	ebb5 0c03 	subs.w	ip, r5, r3
 80a9868:	bf04      	itt	eq
 80a986a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a986e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a9872:	f150 0000 	adcs.w	r0, r0, #0
 80a9876:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a987a:	bd70      	pop	{r4, r5, r6, pc}
 80a987c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a9880:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a9884:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a9888:	bfc2      	ittt	gt
 80a988a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a988e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a9892:	bd70      	popgt	{r4, r5, r6, pc}
 80a9894:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a9898:	f04f 0e00 	mov.w	lr, #0
 80a989c:	3c01      	subs	r4, #1
 80a989e:	e690      	b.n	80a95c2 <__aeabi_dmul+0xde>
 80a98a0:	ea45 0e06 	orr.w	lr, r5, r6
 80a98a4:	e68d      	b.n	80a95c2 <__aeabi_dmul+0xde>
 80a98a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a98aa:	ea94 0f0c 	teq	r4, ip
 80a98ae:	bf08      	it	eq
 80a98b0:	ea95 0f0c 	teqeq	r5, ip
 80a98b4:	f43f af3b 	beq.w	80a972e <__aeabi_dmul+0x24a>
 80a98b8:	ea94 0f0c 	teq	r4, ip
 80a98bc:	d10a      	bne.n	80a98d4 <__aeabi_ddiv+0x19c>
 80a98be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a98c2:	f47f af34 	bne.w	80a972e <__aeabi_dmul+0x24a>
 80a98c6:	ea95 0f0c 	teq	r5, ip
 80a98ca:	f47f af25 	bne.w	80a9718 <__aeabi_dmul+0x234>
 80a98ce:	4610      	mov	r0, r2
 80a98d0:	4619      	mov	r1, r3
 80a98d2:	e72c      	b.n	80a972e <__aeabi_dmul+0x24a>
 80a98d4:	ea95 0f0c 	teq	r5, ip
 80a98d8:	d106      	bne.n	80a98e8 <__aeabi_ddiv+0x1b0>
 80a98da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a98de:	f43f aefd 	beq.w	80a96dc <__aeabi_dmul+0x1f8>
 80a98e2:	4610      	mov	r0, r2
 80a98e4:	4619      	mov	r1, r3
 80a98e6:	e722      	b.n	80a972e <__aeabi_dmul+0x24a>
 80a98e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a98ec:	bf18      	it	ne
 80a98ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a98f2:	f47f aec5 	bne.w	80a9680 <__aeabi_dmul+0x19c>
 80a98f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a98fa:	f47f af0d 	bne.w	80a9718 <__aeabi_dmul+0x234>
 80a98fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a9902:	f47f aeeb 	bne.w	80a96dc <__aeabi_dmul+0x1f8>
 80a9906:	e712      	b.n	80a972e <__aeabi_dmul+0x24a>

080a9908 <__gedf2>:
 80a9908:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a990c:	e006      	b.n	80a991c <__cmpdf2+0x4>
 80a990e:	bf00      	nop

080a9910 <__ledf2>:
 80a9910:	f04f 0c01 	mov.w	ip, #1
 80a9914:	e002      	b.n	80a991c <__cmpdf2+0x4>
 80a9916:	bf00      	nop

080a9918 <__cmpdf2>:
 80a9918:	f04f 0c01 	mov.w	ip, #1
 80a991c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a9920:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a9924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a9928:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a992c:	bf18      	it	ne
 80a992e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a9932:	d01b      	beq.n	80a996c <__cmpdf2+0x54>
 80a9934:	b001      	add	sp, #4
 80a9936:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a993a:	bf0c      	ite	eq
 80a993c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a9940:	ea91 0f03 	teqne	r1, r3
 80a9944:	bf02      	ittt	eq
 80a9946:	ea90 0f02 	teqeq	r0, r2
 80a994a:	2000      	moveq	r0, #0
 80a994c:	4770      	bxeq	lr
 80a994e:	f110 0f00 	cmn.w	r0, #0
 80a9952:	ea91 0f03 	teq	r1, r3
 80a9956:	bf58      	it	pl
 80a9958:	4299      	cmppl	r1, r3
 80a995a:	bf08      	it	eq
 80a995c:	4290      	cmpeq	r0, r2
 80a995e:	bf2c      	ite	cs
 80a9960:	17d8      	asrcs	r0, r3, #31
 80a9962:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a9966:	f040 0001 	orr.w	r0, r0, #1
 80a996a:	4770      	bx	lr
 80a996c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a9970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a9974:	d102      	bne.n	80a997c <__cmpdf2+0x64>
 80a9976:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a997a:	d107      	bne.n	80a998c <__cmpdf2+0x74>
 80a997c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a9980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a9984:	d1d6      	bne.n	80a9934 <__cmpdf2+0x1c>
 80a9986:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a998a:	d0d3      	beq.n	80a9934 <__cmpdf2+0x1c>
 80a998c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a9990:	4770      	bx	lr
 80a9992:	bf00      	nop

080a9994 <__aeabi_cdrcmple>:
 80a9994:	4684      	mov	ip, r0
 80a9996:	4610      	mov	r0, r2
 80a9998:	4662      	mov	r2, ip
 80a999a:	468c      	mov	ip, r1
 80a999c:	4619      	mov	r1, r3
 80a999e:	4663      	mov	r3, ip
 80a99a0:	e000      	b.n	80a99a4 <__aeabi_cdcmpeq>
 80a99a2:	bf00      	nop

080a99a4 <__aeabi_cdcmpeq>:
 80a99a4:	b501      	push	{r0, lr}
 80a99a6:	f7ff ffb7 	bl	80a9918 <__cmpdf2>
 80a99aa:	2800      	cmp	r0, #0
 80a99ac:	bf48      	it	mi
 80a99ae:	f110 0f00 	cmnmi.w	r0, #0
 80a99b2:	bd01      	pop	{r0, pc}

080a99b4 <__aeabi_dcmpeq>:
 80a99b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a99b8:	f7ff fff4 	bl	80a99a4 <__aeabi_cdcmpeq>
 80a99bc:	bf0c      	ite	eq
 80a99be:	2001      	moveq	r0, #1
 80a99c0:	2000      	movne	r0, #0
 80a99c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a99c6:	bf00      	nop

080a99c8 <__aeabi_dcmplt>:
 80a99c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a99cc:	f7ff ffea 	bl	80a99a4 <__aeabi_cdcmpeq>
 80a99d0:	bf34      	ite	cc
 80a99d2:	2001      	movcc	r0, #1
 80a99d4:	2000      	movcs	r0, #0
 80a99d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a99da:	bf00      	nop

080a99dc <__aeabi_dcmple>:
 80a99dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a99e0:	f7ff ffe0 	bl	80a99a4 <__aeabi_cdcmpeq>
 80a99e4:	bf94      	ite	ls
 80a99e6:	2001      	movls	r0, #1
 80a99e8:	2000      	movhi	r0, #0
 80a99ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80a99ee:	bf00      	nop

080a99f0 <__aeabi_dcmpge>:
 80a99f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a99f4:	f7ff ffce 	bl	80a9994 <__aeabi_cdrcmple>
 80a99f8:	bf94      	ite	ls
 80a99fa:	2001      	movls	r0, #1
 80a99fc:	2000      	movhi	r0, #0
 80a99fe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a9a02:	bf00      	nop

080a9a04 <__aeabi_dcmpgt>:
 80a9a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a9a08:	f7ff ffc4 	bl	80a9994 <__aeabi_cdrcmple>
 80a9a0c:	bf34      	ite	cc
 80a9a0e:	2001      	movcc	r0, #1
 80a9a10:	2000      	movcs	r0, #0
 80a9a12:	f85d fb08 	ldr.w	pc, [sp], #8
 80a9a16:	bf00      	nop

080a9a18 <__aeabi_dcmpun>:
 80a9a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a9a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a9a20:	d102      	bne.n	80a9a28 <__aeabi_dcmpun+0x10>
 80a9a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a9a26:	d10a      	bne.n	80a9a3e <__aeabi_dcmpun+0x26>
 80a9a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a9a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a9a30:	d102      	bne.n	80a9a38 <__aeabi_dcmpun+0x20>
 80a9a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a9a36:	d102      	bne.n	80a9a3e <__aeabi_dcmpun+0x26>
 80a9a38:	f04f 0000 	mov.w	r0, #0
 80a9a3c:	4770      	bx	lr
 80a9a3e:	f04f 0001 	mov.w	r0, #1
 80a9a42:	4770      	bx	lr

080a9a44 <__aeabi_d2iz>:
 80a9a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a9a48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a9a4c:	d215      	bcs.n	80a9a7a <__aeabi_d2iz+0x36>
 80a9a4e:	d511      	bpl.n	80a9a74 <__aeabi_d2iz+0x30>
 80a9a50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a9a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a9a58:	d912      	bls.n	80a9a80 <__aeabi_d2iz+0x3c>
 80a9a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a9a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a9a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a9a66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a9a6a:	fa23 f002 	lsr.w	r0, r3, r2
 80a9a6e:	bf18      	it	ne
 80a9a70:	4240      	negne	r0, r0
 80a9a72:	4770      	bx	lr
 80a9a74:	f04f 0000 	mov.w	r0, #0
 80a9a78:	4770      	bx	lr
 80a9a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a9a7e:	d105      	bne.n	80a9a8c <__aeabi_d2iz+0x48>
 80a9a80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a9a84:	bf08      	it	eq
 80a9a86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a9a8a:	4770      	bx	lr
 80a9a8c:	f04f 0000 	mov.w	r0, #0
 80a9a90:	4770      	bx	lr
 80a9a92:	bf00      	nop

080a9a94 <__aeabi_d2uiz>:
 80a9a94:	004a      	lsls	r2, r1, #1
 80a9a96:	d211      	bcs.n	80a9abc <__aeabi_d2uiz+0x28>
 80a9a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a9a9c:	d211      	bcs.n	80a9ac2 <__aeabi_d2uiz+0x2e>
 80a9a9e:	d50d      	bpl.n	80a9abc <__aeabi_d2uiz+0x28>
 80a9aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a9aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a9aa8:	d40e      	bmi.n	80a9ac8 <__aeabi_d2uiz+0x34>
 80a9aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a9aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a9ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a9ab6:	fa23 f002 	lsr.w	r0, r3, r2
 80a9aba:	4770      	bx	lr
 80a9abc:	f04f 0000 	mov.w	r0, #0
 80a9ac0:	4770      	bx	lr
 80a9ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a9ac6:	d102      	bne.n	80a9ace <__aeabi_d2uiz+0x3a>
 80a9ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a9acc:	4770      	bx	lr
 80a9ace:	f04f 0000 	mov.w	r0, #0
 80a9ad2:	4770      	bx	lr

080a9ad4 <__aeabi_d2f>:
 80a9ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a9ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a9adc:	bf24      	itt	cs
 80a9ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a9ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a9ae6:	d90d      	bls.n	80a9b04 <__aeabi_d2f+0x30>
 80a9ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a9aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a9af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a9af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a9af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a9afc:	bf08      	it	eq
 80a9afe:	f020 0001 	biceq.w	r0, r0, #1
 80a9b02:	4770      	bx	lr
 80a9b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a9b08:	d121      	bne.n	80a9b4e <__aeabi_d2f+0x7a>
 80a9b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a9b0e:	bfbc      	itt	lt
 80a9b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a9b14:	4770      	bxlt	lr
 80a9b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a9b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a9b1e:	f1c2 0218 	rsb	r2, r2, #24
 80a9b22:	f1c2 0c20 	rsb	ip, r2, #32
 80a9b26:	fa10 f30c 	lsls.w	r3, r0, ip
 80a9b2a:	fa20 f002 	lsr.w	r0, r0, r2
 80a9b2e:	bf18      	it	ne
 80a9b30:	f040 0001 	orrne.w	r0, r0, #1
 80a9b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a9b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a9b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a9b40:	ea40 000c 	orr.w	r0, r0, ip
 80a9b44:	fa23 f302 	lsr.w	r3, r3, r2
 80a9b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a9b4c:	e7cc      	b.n	80a9ae8 <__aeabi_d2f+0x14>
 80a9b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a9b52:	d107      	bne.n	80a9b64 <__aeabi_d2f+0x90>
 80a9b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a9b58:	bf1e      	ittt	ne
 80a9b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a9b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a9b62:	4770      	bxne	lr
 80a9b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a9b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a9b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a9b70:	4770      	bx	lr
 80a9b72:	bf00      	nop

080a9b74 <__aeabi_frsub>:
 80a9b74:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a9b78:	e002      	b.n	80a9b80 <__addsf3>
 80a9b7a:	bf00      	nop

080a9b7c <__aeabi_fsub>:
 80a9b7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a9b80 <__addsf3>:
 80a9b80:	0042      	lsls	r2, r0, #1
 80a9b82:	bf1f      	itttt	ne
 80a9b84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a9b88:	ea92 0f03 	teqne	r2, r3
 80a9b8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a9b90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a9b94:	d06a      	beq.n	80a9c6c <__addsf3+0xec>
 80a9b96:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a9b9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a9b9e:	bfc1      	itttt	gt
 80a9ba0:	18d2      	addgt	r2, r2, r3
 80a9ba2:	4041      	eorgt	r1, r0
 80a9ba4:	4048      	eorgt	r0, r1
 80a9ba6:	4041      	eorgt	r1, r0
 80a9ba8:	bfb8      	it	lt
 80a9baa:	425b      	neglt	r3, r3
 80a9bac:	2b19      	cmp	r3, #25
 80a9bae:	bf88      	it	hi
 80a9bb0:	4770      	bxhi	lr
 80a9bb2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a9bb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a9bba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a9bbe:	bf18      	it	ne
 80a9bc0:	4240      	negne	r0, r0
 80a9bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a9bc6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a9bca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a9bce:	bf18      	it	ne
 80a9bd0:	4249      	negne	r1, r1
 80a9bd2:	ea92 0f03 	teq	r2, r3
 80a9bd6:	d03f      	beq.n	80a9c58 <__addsf3+0xd8>
 80a9bd8:	f1a2 0201 	sub.w	r2, r2, #1
 80a9bdc:	fa41 fc03 	asr.w	ip, r1, r3
 80a9be0:	eb10 000c 	adds.w	r0, r0, ip
 80a9be4:	f1c3 0320 	rsb	r3, r3, #32
 80a9be8:	fa01 f103 	lsl.w	r1, r1, r3
 80a9bec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a9bf0:	d502      	bpl.n	80a9bf8 <__addsf3+0x78>
 80a9bf2:	4249      	negs	r1, r1
 80a9bf4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a9bf8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a9bfc:	d313      	bcc.n	80a9c26 <__addsf3+0xa6>
 80a9bfe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a9c02:	d306      	bcc.n	80a9c12 <__addsf3+0x92>
 80a9c04:	0840      	lsrs	r0, r0, #1
 80a9c06:	ea4f 0131 	mov.w	r1, r1, rrx
 80a9c0a:	f102 0201 	add.w	r2, r2, #1
 80a9c0e:	2afe      	cmp	r2, #254	; 0xfe
 80a9c10:	d251      	bcs.n	80a9cb6 <__addsf3+0x136>
 80a9c12:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a9c16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a9c1a:	bf08      	it	eq
 80a9c1c:	f020 0001 	biceq.w	r0, r0, #1
 80a9c20:	ea40 0003 	orr.w	r0, r0, r3
 80a9c24:	4770      	bx	lr
 80a9c26:	0049      	lsls	r1, r1, #1
 80a9c28:	eb40 0000 	adc.w	r0, r0, r0
 80a9c2c:	3a01      	subs	r2, #1
 80a9c2e:	bf28      	it	cs
 80a9c30:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a9c34:	d2ed      	bcs.n	80a9c12 <__addsf3+0x92>
 80a9c36:	fab0 fc80 	clz	ip, r0
 80a9c3a:	f1ac 0c08 	sub.w	ip, ip, #8
 80a9c3e:	ebb2 020c 	subs.w	r2, r2, ip
 80a9c42:	fa00 f00c 	lsl.w	r0, r0, ip
 80a9c46:	bfaa      	itet	ge
 80a9c48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a9c4c:	4252      	neglt	r2, r2
 80a9c4e:	4318      	orrge	r0, r3
 80a9c50:	bfbc      	itt	lt
 80a9c52:	40d0      	lsrlt	r0, r2
 80a9c54:	4318      	orrlt	r0, r3
 80a9c56:	4770      	bx	lr
 80a9c58:	f092 0f00 	teq	r2, #0
 80a9c5c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a9c60:	bf06      	itte	eq
 80a9c62:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a9c66:	3201      	addeq	r2, #1
 80a9c68:	3b01      	subne	r3, #1
 80a9c6a:	e7b5      	b.n	80a9bd8 <__addsf3+0x58>
 80a9c6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a9c70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a9c74:	bf18      	it	ne
 80a9c76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a9c7a:	d021      	beq.n	80a9cc0 <__addsf3+0x140>
 80a9c7c:	ea92 0f03 	teq	r2, r3
 80a9c80:	d004      	beq.n	80a9c8c <__addsf3+0x10c>
 80a9c82:	f092 0f00 	teq	r2, #0
 80a9c86:	bf08      	it	eq
 80a9c88:	4608      	moveq	r0, r1
 80a9c8a:	4770      	bx	lr
 80a9c8c:	ea90 0f01 	teq	r0, r1
 80a9c90:	bf1c      	itt	ne
 80a9c92:	2000      	movne	r0, #0
 80a9c94:	4770      	bxne	lr
 80a9c96:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a9c9a:	d104      	bne.n	80a9ca6 <__addsf3+0x126>
 80a9c9c:	0040      	lsls	r0, r0, #1
 80a9c9e:	bf28      	it	cs
 80a9ca0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a9ca4:	4770      	bx	lr
 80a9ca6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a9caa:	bf3c      	itt	cc
 80a9cac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a9cb0:	4770      	bxcc	lr
 80a9cb2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a9cb6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a9cba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a9cbe:	4770      	bx	lr
 80a9cc0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a9cc4:	bf16      	itet	ne
 80a9cc6:	4608      	movne	r0, r1
 80a9cc8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a9ccc:	4601      	movne	r1, r0
 80a9cce:	0242      	lsls	r2, r0, #9
 80a9cd0:	bf06      	itte	eq
 80a9cd2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a9cd6:	ea90 0f01 	teqeq	r0, r1
 80a9cda:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a9cde:	4770      	bx	lr

080a9ce0 <__aeabi_ui2f>:
 80a9ce0:	f04f 0300 	mov.w	r3, #0
 80a9ce4:	e004      	b.n	80a9cf0 <__aeabi_i2f+0x8>
 80a9ce6:	bf00      	nop

080a9ce8 <__aeabi_i2f>:
 80a9ce8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a9cec:	bf48      	it	mi
 80a9cee:	4240      	negmi	r0, r0
 80a9cf0:	ea5f 0c00 	movs.w	ip, r0
 80a9cf4:	bf08      	it	eq
 80a9cf6:	4770      	bxeq	lr
 80a9cf8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a9cfc:	4601      	mov	r1, r0
 80a9cfe:	f04f 0000 	mov.w	r0, #0
 80a9d02:	e01c      	b.n	80a9d3e <__aeabi_l2f+0x2a>

080a9d04 <__aeabi_ul2f>:
 80a9d04:	ea50 0201 	orrs.w	r2, r0, r1
 80a9d08:	bf08      	it	eq
 80a9d0a:	4770      	bxeq	lr
 80a9d0c:	f04f 0300 	mov.w	r3, #0
 80a9d10:	e00a      	b.n	80a9d28 <__aeabi_l2f+0x14>
 80a9d12:	bf00      	nop

080a9d14 <__aeabi_l2f>:
 80a9d14:	ea50 0201 	orrs.w	r2, r0, r1
 80a9d18:	bf08      	it	eq
 80a9d1a:	4770      	bxeq	lr
 80a9d1c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a9d20:	d502      	bpl.n	80a9d28 <__aeabi_l2f+0x14>
 80a9d22:	4240      	negs	r0, r0
 80a9d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a9d28:	ea5f 0c01 	movs.w	ip, r1
 80a9d2c:	bf02      	ittt	eq
 80a9d2e:	4684      	moveq	ip, r0
 80a9d30:	4601      	moveq	r1, r0
 80a9d32:	2000      	moveq	r0, #0
 80a9d34:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a9d38:	bf08      	it	eq
 80a9d3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a9d3e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a9d42:	fabc f28c 	clz	r2, ip
 80a9d46:	3a08      	subs	r2, #8
 80a9d48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a9d4c:	db10      	blt.n	80a9d70 <__aeabi_l2f+0x5c>
 80a9d4e:	fa01 fc02 	lsl.w	ip, r1, r2
 80a9d52:	4463      	add	r3, ip
 80a9d54:	fa00 fc02 	lsl.w	ip, r0, r2
 80a9d58:	f1c2 0220 	rsb	r2, r2, #32
 80a9d5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a9d60:	fa20 f202 	lsr.w	r2, r0, r2
 80a9d64:	eb43 0002 	adc.w	r0, r3, r2
 80a9d68:	bf08      	it	eq
 80a9d6a:	f020 0001 	biceq.w	r0, r0, #1
 80a9d6e:	4770      	bx	lr
 80a9d70:	f102 0220 	add.w	r2, r2, #32
 80a9d74:	fa01 fc02 	lsl.w	ip, r1, r2
 80a9d78:	f1c2 0220 	rsb	r2, r2, #32
 80a9d7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a9d80:	fa21 f202 	lsr.w	r2, r1, r2
 80a9d84:	eb43 0002 	adc.w	r0, r3, r2
 80a9d88:	bf08      	it	eq
 80a9d8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a9d8e:	4770      	bx	lr

080a9d90 <__aeabi_fmul>:
 80a9d90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a9d94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a9d98:	bf1e      	ittt	ne
 80a9d9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a9d9e:	ea92 0f0c 	teqne	r2, ip
 80a9da2:	ea93 0f0c 	teqne	r3, ip
 80a9da6:	d06f      	beq.n	80a9e88 <__aeabi_fmul+0xf8>
 80a9da8:	441a      	add	r2, r3
 80a9daa:	ea80 0c01 	eor.w	ip, r0, r1
 80a9dae:	0240      	lsls	r0, r0, #9
 80a9db0:	bf18      	it	ne
 80a9db2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a9db6:	d01e      	beq.n	80a9df6 <__aeabi_fmul+0x66>
 80a9db8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a9dbc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a9dc0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a9dc4:	fba0 3101 	umull	r3, r1, r0, r1
 80a9dc8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a9dcc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a9dd0:	bf3e      	ittt	cc
 80a9dd2:	0049      	lslcc	r1, r1, #1
 80a9dd4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a9dd8:	005b      	lslcc	r3, r3, #1
 80a9dda:	ea40 0001 	orr.w	r0, r0, r1
 80a9dde:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a9de2:	2afd      	cmp	r2, #253	; 0xfd
 80a9de4:	d81d      	bhi.n	80a9e22 <__aeabi_fmul+0x92>
 80a9de6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a9dea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a9dee:	bf08      	it	eq
 80a9df0:	f020 0001 	biceq.w	r0, r0, #1
 80a9df4:	4770      	bx	lr
 80a9df6:	f090 0f00 	teq	r0, #0
 80a9dfa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a9dfe:	bf08      	it	eq
 80a9e00:	0249      	lsleq	r1, r1, #9
 80a9e02:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a9e06:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a9e0a:	3a7f      	subs	r2, #127	; 0x7f
 80a9e0c:	bfc2      	ittt	gt
 80a9e0e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a9e12:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a9e16:	4770      	bxgt	lr
 80a9e18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a9e1c:	f04f 0300 	mov.w	r3, #0
 80a9e20:	3a01      	subs	r2, #1
 80a9e22:	dc5d      	bgt.n	80a9ee0 <__aeabi_fmul+0x150>
 80a9e24:	f112 0f19 	cmn.w	r2, #25
 80a9e28:	bfdc      	itt	le
 80a9e2a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a9e2e:	4770      	bxle	lr
 80a9e30:	f1c2 0200 	rsb	r2, r2, #0
 80a9e34:	0041      	lsls	r1, r0, #1
 80a9e36:	fa21 f102 	lsr.w	r1, r1, r2
 80a9e3a:	f1c2 0220 	rsb	r2, r2, #32
 80a9e3e:	fa00 fc02 	lsl.w	ip, r0, r2
 80a9e42:	ea5f 0031 	movs.w	r0, r1, rrx
 80a9e46:	f140 0000 	adc.w	r0, r0, #0
 80a9e4a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a9e4e:	bf08      	it	eq
 80a9e50:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a9e54:	4770      	bx	lr
 80a9e56:	f092 0f00 	teq	r2, #0
 80a9e5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a9e5e:	bf02      	ittt	eq
 80a9e60:	0040      	lsleq	r0, r0, #1
 80a9e62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a9e66:	3a01      	subeq	r2, #1
 80a9e68:	d0f9      	beq.n	80a9e5e <__aeabi_fmul+0xce>
 80a9e6a:	ea40 000c 	orr.w	r0, r0, ip
 80a9e6e:	f093 0f00 	teq	r3, #0
 80a9e72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a9e76:	bf02      	ittt	eq
 80a9e78:	0049      	lsleq	r1, r1, #1
 80a9e7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a9e7e:	3b01      	subeq	r3, #1
 80a9e80:	d0f9      	beq.n	80a9e76 <__aeabi_fmul+0xe6>
 80a9e82:	ea41 010c 	orr.w	r1, r1, ip
 80a9e86:	e78f      	b.n	80a9da8 <__aeabi_fmul+0x18>
 80a9e88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a9e8c:	ea92 0f0c 	teq	r2, ip
 80a9e90:	bf18      	it	ne
 80a9e92:	ea93 0f0c 	teqne	r3, ip
 80a9e96:	d00a      	beq.n	80a9eae <__aeabi_fmul+0x11e>
 80a9e98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a9e9c:	bf18      	it	ne
 80a9e9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a9ea2:	d1d8      	bne.n	80a9e56 <__aeabi_fmul+0xc6>
 80a9ea4:	ea80 0001 	eor.w	r0, r0, r1
 80a9ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a9eac:	4770      	bx	lr
 80a9eae:	f090 0f00 	teq	r0, #0
 80a9eb2:	bf17      	itett	ne
 80a9eb4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a9eb8:	4608      	moveq	r0, r1
 80a9eba:	f091 0f00 	teqne	r1, #0
 80a9ebe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a9ec2:	d014      	beq.n	80a9eee <__aeabi_fmul+0x15e>
 80a9ec4:	ea92 0f0c 	teq	r2, ip
 80a9ec8:	d101      	bne.n	80a9ece <__aeabi_fmul+0x13e>
 80a9eca:	0242      	lsls	r2, r0, #9
 80a9ecc:	d10f      	bne.n	80a9eee <__aeabi_fmul+0x15e>
 80a9ece:	ea93 0f0c 	teq	r3, ip
 80a9ed2:	d103      	bne.n	80a9edc <__aeabi_fmul+0x14c>
 80a9ed4:	024b      	lsls	r3, r1, #9
 80a9ed6:	bf18      	it	ne
 80a9ed8:	4608      	movne	r0, r1
 80a9eda:	d108      	bne.n	80a9eee <__aeabi_fmul+0x15e>
 80a9edc:	ea80 0001 	eor.w	r0, r0, r1
 80a9ee0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a9ee4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a9ee8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a9eec:	4770      	bx	lr
 80a9eee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a9ef2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a9ef6:	4770      	bx	lr

080a9ef8 <__aeabi_fdiv>:
 80a9ef8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a9efc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a9f00:	bf1e      	ittt	ne
 80a9f02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a9f06:	ea92 0f0c 	teqne	r2, ip
 80a9f0a:	ea93 0f0c 	teqne	r3, ip
 80a9f0e:	d069      	beq.n	80a9fe4 <__aeabi_fdiv+0xec>
 80a9f10:	eba2 0203 	sub.w	r2, r2, r3
 80a9f14:	ea80 0c01 	eor.w	ip, r0, r1
 80a9f18:	0249      	lsls	r1, r1, #9
 80a9f1a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a9f1e:	d037      	beq.n	80a9f90 <__aeabi_fdiv+0x98>
 80a9f20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a9f24:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a9f28:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a9f2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a9f30:	428b      	cmp	r3, r1
 80a9f32:	bf38      	it	cc
 80a9f34:	005b      	lslcc	r3, r3, #1
 80a9f36:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a9f3a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a9f3e:	428b      	cmp	r3, r1
 80a9f40:	bf24      	itt	cs
 80a9f42:	1a5b      	subcs	r3, r3, r1
 80a9f44:	ea40 000c 	orrcs.w	r0, r0, ip
 80a9f48:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a9f4c:	bf24      	itt	cs
 80a9f4e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a9f52:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a9f56:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a9f5a:	bf24      	itt	cs
 80a9f5c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a9f60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a9f64:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a9f68:	bf24      	itt	cs
 80a9f6a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a9f6e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a9f72:	011b      	lsls	r3, r3, #4
 80a9f74:	bf18      	it	ne
 80a9f76:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a9f7a:	d1e0      	bne.n	80a9f3e <__aeabi_fdiv+0x46>
 80a9f7c:	2afd      	cmp	r2, #253	; 0xfd
 80a9f7e:	f63f af50 	bhi.w	80a9e22 <__aeabi_fmul+0x92>
 80a9f82:	428b      	cmp	r3, r1
 80a9f84:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a9f88:	bf08      	it	eq
 80a9f8a:	f020 0001 	biceq.w	r0, r0, #1
 80a9f8e:	4770      	bx	lr
 80a9f90:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a9f94:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a9f98:	327f      	adds	r2, #127	; 0x7f
 80a9f9a:	bfc2      	ittt	gt
 80a9f9c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a9fa0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a9fa4:	4770      	bxgt	lr
 80a9fa6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a9faa:	f04f 0300 	mov.w	r3, #0
 80a9fae:	3a01      	subs	r2, #1
 80a9fb0:	e737      	b.n	80a9e22 <__aeabi_fmul+0x92>
 80a9fb2:	f092 0f00 	teq	r2, #0
 80a9fb6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a9fba:	bf02      	ittt	eq
 80a9fbc:	0040      	lsleq	r0, r0, #1
 80a9fbe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a9fc2:	3a01      	subeq	r2, #1
 80a9fc4:	d0f9      	beq.n	80a9fba <__aeabi_fdiv+0xc2>
 80a9fc6:	ea40 000c 	orr.w	r0, r0, ip
 80a9fca:	f093 0f00 	teq	r3, #0
 80a9fce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a9fd2:	bf02      	ittt	eq
 80a9fd4:	0049      	lsleq	r1, r1, #1
 80a9fd6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a9fda:	3b01      	subeq	r3, #1
 80a9fdc:	d0f9      	beq.n	80a9fd2 <__aeabi_fdiv+0xda>
 80a9fde:	ea41 010c 	orr.w	r1, r1, ip
 80a9fe2:	e795      	b.n	80a9f10 <__aeabi_fdiv+0x18>
 80a9fe4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a9fe8:	ea92 0f0c 	teq	r2, ip
 80a9fec:	d108      	bne.n	80aa000 <__aeabi_fdiv+0x108>
 80a9fee:	0242      	lsls	r2, r0, #9
 80a9ff0:	f47f af7d 	bne.w	80a9eee <__aeabi_fmul+0x15e>
 80a9ff4:	ea93 0f0c 	teq	r3, ip
 80a9ff8:	f47f af70 	bne.w	80a9edc <__aeabi_fmul+0x14c>
 80a9ffc:	4608      	mov	r0, r1
 80a9ffe:	e776      	b.n	80a9eee <__aeabi_fmul+0x15e>
 80aa000:	ea93 0f0c 	teq	r3, ip
 80aa004:	d104      	bne.n	80aa010 <__aeabi_fdiv+0x118>
 80aa006:	024b      	lsls	r3, r1, #9
 80aa008:	f43f af4c 	beq.w	80a9ea4 <__aeabi_fmul+0x114>
 80aa00c:	4608      	mov	r0, r1
 80aa00e:	e76e      	b.n	80a9eee <__aeabi_fmul+0x15e>
 80aa010:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80aa014:	bf18      	it	ne
 80aa016:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80aa01a:	d1ca      	bne.n	80a9fb2 <__aeabi_fdiv+0xba>
 80aa01c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80aa020:	f47f af5c 	bne.w	80a9edc <__aeabi_fmul+0x14c>
 80aa024:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80aa028:	f47f af3c 	bne.w	80a9ea4 <__aeabi_fmul+0x114>
 80aa02c:	e75f      	b.n	80a9eee <__aeabi_fmul+0x15e>
 80aa02e:	bf00      	nop

080aa030 <__gesf2>:
 80aa030:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80aa034:	e006      	b.n	80aa044 <__cmpsf2+0x4>
 80aa036:	bf00      	nop

080aa038 <__lesf2>:
 80aa038:	f04f 0c01 	mov.w	ip, #1
 80aa03c:	e002      	b.n	80aa044 <__cmpsf2+0x4>
 80aa03e:	bf00      	nop

080aa040 <__cmpsf2>:
 80aa040:	f04f 0c01 	mov.w	ip, #1
 80aa044:	f84d cd04 	str.w	ip, [sp, #-4]!
 80aa048:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80aa04c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80aa050:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80aa054:	bf18      	it	ne
 80aa056:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80aa05a:	d011      	beq.n	80aa080 <__cmpsf2+0x40>
 80aa05c:	b001      	add	sp, #4
 80aa05e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80aa062:	bf18      	it	ne
 80aa064:	ea90 0f01 	teqne	r0, r1
 80aa068:	bf58      	it	pl
 80aa06a:	ebb2 0003 	subspl.w	r0, r2, r3
 80aa06e:	bf88      	it	hi
 80aa070:	17c8      	asrhi	r0, r1, #31
 80aa072:	bf38      	it	cc
 80aa074:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80aa078:	bf18      	it	ne
 80aa07a:	f040 0001 	orrne.w	r0, r0, #1
 80aa07e:	4770      	bx	lr
 80aa080:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80aa084:	d102      	bne.n	80aa08c <__cmpsf2+0x4c>
 80aa086:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80aa08a:	d105      	bne.n	80aa098 <__cmpsf2+0x58>
 80aa08c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80aa090:	d1e4      	bne.n	80aa05c <__cmpsf2+0x1c>
 80aa092:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80aa096:	d0e1      	beq.n	80aa05c <__cmpsf2+0x1c>
 80aa098:	f85d 0b04 	ldr.w	r0, [sp], #4
 80aa09c:	4770      	bx	lr
 80aa09e:	bf00      	nop

080aa0a0 <__aeabi_cfrcmple>:
 80aa0a0:	4684      	mov	ip, r0
 80aa0a2:	4608      	mov	r0, r1
 80aa0a4:	4661      	mov	r1, ip
 80aa0a6:	e7ff      	b.n	80aa0a8 <__aeabi_cfcmpeq>

080aa0a8 <__aeabi_cfcmpeq>:
 80aa0a8:	b50f      	push	{r0, r1, r2, r3, lr}
 80aa0aa:	f7ff ffc9 	bl	80aa040 <__cmpsf2>
 80aa0ae:	2800      	cmp	r0, #0
 80aa0b0:	bf48      	it	mi
 80aa0b2:	f110 0f00 	cmnmi.w	r0, #0
 80aa0b6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080aa0b8 <__aeabi_fcmpeq>:
 80aa0b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80aa0bc:	f7ff fff4 	bl	80aa0a8 <__aeabi_cfcmpeq>
 80aa0c0:	bf0c      	ite	eq
 80aa0c2:	2001      	moveq	r0, #1
 80aa0c4:	2000      	movne	r0, #0
 80aa0c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80aa0ca:	bf00      	nop

080aa0cc <__aeabi_fcmplt>:
 80aa0cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80aa0d0:	f7ff ffea 	bl	80aa0a8 <__aeabi_cfcmpeq>
 80aa0d4:	bf34      	ite	cc
 80aa0d6:	2001      	movcc	r0, #1
 80aa0d8:	2000      	movcs	r0, #0
 80aa0da:	f85d fb08 	ldr.w	pc, [sp], #8
 80aa0de:	bf00      	nop

080aa0e0 <__aeabi_fcmple>:
 80aa0e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80aa0e4:	f7ff ffe0 	bl	80aa0a8 <__aeabi_cfcmpeq>
 80aa0e8:	bf94      	ite	ls
 80aa0ea:	2001      	movls	r0, #1
 80aa0ec:	2000      	movhi	r0, #0
 80aa0ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80aa0f2:	bf00      	nop

080aa0f4 <__aeabi_fcmpge>:
 80aa0f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80aa0f8:	f7ff ffd2 	bl	80aa0a0 <__aeabi_cfrcmple>
 80aa0fc:	bf94      	ite	ls
 80aa0fe:	2001      	movls	r0, #1
 80aa100:	2000      	movhi	r0, #0
 80aa102:	f85d fb08 	ldr.w	pc, [sp], #8
 80aa106:	bf00      	nop

080aa108 <__aeabi_fcmpgt>:
 80aa108:	f84d ed08 	str.w	lr, [sp, #-8]!
 80aa10c:	f7ff ffc8 	bl	80aa0a0 <__aeabi_cfrcmple>
 80aa110:	bf34      	ite	cc
 80aa112:	2001      	movcc	r0, #1
 80aa114:	2000      	movcs	r0, #0
 80aa116:	f85d fb08 	ldr.w	pc, [sp], #8
 80aa11a:	bf00      	nop

080aa11c <__aeabi_fcmpun>:
 80aa11c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80aa120:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80aa124:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80aa128:	d102      	bne.n	80aa130 <__aeabi_fcmpun+0x14>
 80aa12a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80aa12e:	d108      	bne.n	80aa142 <__aeabi_fcmpun+0x26>
 80aa130:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80aa134:	d102      	bne.n	80aa13c <__aeabi_fcmpun+0x20>
 80aa136:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80aa13a:	d102      	bne.n	80aa142 <__aeabi_fcmpun+0x26>
 80aa13c:	f04f 0000 	mov.w	r0, #0
 80aa140:	4770      	bx	lr
 80aa142:	f04f 0001 	mov.w	r0, #1
 80aa146:	4770      	bx	lr

080aa148 <__aeabi_f2iz>:
 80aa148:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80aa14c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80aa150:	d30f      	bcc.n	80aa172 <__aeabi_f2iz+0x2a>
 80aa152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80aa156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80aa15a:	d90d      	bls.n	80aa178 <__aeabi_f2iz+0x30>
 80aa15c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80aa160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80aa164:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80aa168:	fa23 f002 	lsr.w	r0, r3, r2
 80aa16c:	bf18      	it	ne
 80aa16e:	4240      	negne	r0, r0
 80aa170:	4770      	bx	lr
 80aa172:	f04f 0000 	mov.w	r0, #0
 80aa176:	4770      	bx	lr
 80aa178:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80aa17c:	d101      	bne.n	80aa182 <__aeabi_f2iz+0x3a>
 80aa17e:	0242      	lsls	r2, r0, #9
 80aa180:	d105      	bne.n	80aa18e <__aeabi_f2iz+0x46>
 80aa182:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80aa186:	bf08      	it	eq
 80aa188:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80aa18c:	4770      	bx	lr
 80aa18e:	f04f 0000 	mov.w	r0, #0
 80aa192:	4770      	bx	lr

080aa194 <__aeabi_f2uiz>:
 80aa194:	0042      	lsls	r2, r0, #1
 80aa196:	d20e      	bcs.n	80aa1b6 <__aeabi_f2uiz+0x22>
 80aa198:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80aa19c:	d30b      	bcc.n	80aa1b6 <__aeabi_f2uiz+0x22>
 80aa19e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80aa1a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80aa1a6:	d409      	bmi.n	80aa1bc <__aeabi_f2uiz+0x28>
 80aa1a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80aa1ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80aa1b0:	fa23 f002 	lsr.w	r0, r3, r2
 80aa1b4:	4770      	bx	lr
 80aa1b6:	f04f 0000 	mov.w	r0, #0
 80aa1ba:	4770      	bx	lr
 80aa1bc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80aa1c0:	d101      	bne.n	80aa1c6 <__aeabi_f2uiz+0x32>
 80aa1c2:	0242      	lsls	r2, r0, #9
 80aa1c4:	d102      	bne.n	80aa1cc <__aeabi_f2uiz+0x38>
 80aa1c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80aa1ca:	4770      	bx	lr
 80aa1cc:	f04f 0000 	mov.w	r0, #0
 80aa1d0:	4770      	bx	lr
 80aa1d2:	bf00      	nop

080aa1d4 <__cxa_atexit>:
 80aa1d4:	b510      	push	{r4, lr}
 80aa1d6:	4604      	mov	r4, r0
 80aa1d8:	4804      	ldr	r0, [pc, #16]	; (80aa1ec <__cxa_atexit+0x18>)
 80aa1da:	4613      	mov	r3, r2
 80aa1dc:	b120      	cbz	r0, 80aa1e8 <__cxa_atexit+0x14>
 80aa1de:	460a      	mov	r2, r1
 80aa1e0:	2002      	movs	r0, #2
 80aa1e2:	4621      	mov	r1, r4
 80aa1e4:	f3af 8000 	nop.w
 80aa1e8:	bd10      	pop	{r4, pc}
 80aa1ea:	bf00      	nop
 80aa1ec:	00000000 	.word	0x00000000

080aa1f0 <memcpy>:
 80aa1f0:	440a      	add	r2, r1
 80aa1f2:	4291      	cmp	r1, r2
 80aa1f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80aa1f8:	d100      	bne.n	80aa1fc <memcpy+0xc>
 80aa1fa:	4770      	bx	lr
 80aa1fc:	b510      	push	{r4, lr}
 80aa1fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 80aa202:	4291      	cmp	r1, r2
 80aa204:	f803 4f01 	strb.w	r4, [r3, #1]!
 80aa208:	d1f9      	bne.n	80aa1fe <memcpy+0xe>
 80aa20a:	bd10      	pop	{r4, pc}

080aa20c <memset>:
 80aa20c:	4603      	mov	r3, r0
 80aa20e:	4402      	add	r2, r0
 80aa210:	4293      	cmp	r3, r2
 80aa212:	d100      	bne.n	80aa216 <memset+0xa>
 80aa214:	4770      	bx	lr
 80aa216:	f803 1b01 	strb.w	r1, [r3], #1
 80aa21a:	e7f9      	b.n	80aa210 <memset+0x4>

080aa21c <srand>:
 80aa21c:	b538      	push	{r3, r4, r5, lr}
 80aa21e:	4b0d      	ldr	r3, [pc, #52]	; (80aa254 <srand+0x38>)
 80aa220:	4604      	mov	r4, r0
 80aa222:	681d      	ldr	r5, [r3, #0]
 80aa224:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80aa226:	b97b      	cbnz	r3, 80aa248 <srand+0x2c>
 80aa228:	2018      	movs	r0, #24
 80aa22a:	f7f9 fe5f 	bl	80a3eec <malloc>
 80aa22e:	4a0a      	ldr	r2, [pc, #40]	; (80aa258 <srand+0x3c>)
 80aa230:	4b0a      	ldr	r3, [pc, #40]	; (80aa25c <srand+0x40>)
 80aa232:	63a8      	str	r0, [r5, #56]	; 0x38
 80aa234:	e9c0 2300 	strd	r2, r3, [r0]
 80aa238:	4b09      	ldr	r3, [pc, #36]	; (80aa260 <srand+0x44>)
 80aa23a:	2201      	movs	r2, #1
 80aa23c:	6083      	str	r3, [r0, #8]
 80aa23e:	230b      	movs	r3, #11
 80aa240:	8183      	strh	r3, [r0, #12]
 80aa242:	2300      	movs	r3, #0
 80aa244:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80aa248:	2200      	movs	r2, #0
 80aa24a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80aa24c:	611c      	str	r4, [r3, #16]
 80aa24e:	615a      	str	r2, [r3, #20]
 80aa250:	bd38      	pop	{r3, r4, r5, pc}
 80aa252:	bf00      	nop
 80aa254:	20000008 	.word	0x20000008
 80aa258:	abcd330e 	.word	0xabcd330e
 80aa25c:	e66d1234 	.word	0xe66d1234
 80aa260:	0005deec 	.word	0x0005deec

080aa264 <rand>:
 80aa264:	4b13      	ldr	r3, [pc, #76]	; (80aa2b4 <rand+0x50>)
 80aa266:	b510      	push	{r4, lr}
 80aa268:	681c      	ldr	r4, [r3, #0]
 80aa26a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80aa26c:	b97b      	cbnz	r3, 80aa28e <rand+0x2a>
 80aa26e:	2018      	movs	r0, #24
 80aa270:	f7f9 fe3c 	bl	80a3eec <malloc>
 80aa274:	4a10      	ldr	r2, [pc, #64]	; (80aa2b8 <rand+0x54>)
 80aa276:	4b11      	ldr	r3, [pc, #68]	; (80aa2bc <rand+0x58>)
 80aa278:	63a0      	str	r0, [r4, #56]	; 0x38
 80aa27a:	e9c0 2300 	strd	r2, r3, [r0]
 80aa27e:	4b10      	ldr	r3, [pc, #64]	; (80aa2c0 <rand+0x5c>)
 80aa280:	2201      	movs	r2, #1
 80aa282:	6083      	str	r3, [r0, #8]
 80aa284:	230b      	movs	r3, #11
 80aa286:	8183      	strh	r3, [r0, #12]
 80aa288:	2300      	movs	r3, #0
 80aa28a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80aa28e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80aa290:	480c      	ldr	r0, [pc, #48]	; (80aa2c4 <rand+0x60>)
 80aa292:	690a      	ldr	r2, [r1, #16]
 80aa294:	694b      	ldr	r3, [r1, #20]
 80aa296:	4350      	muls	r0, r2
 80aa298:	4c0b      	ldr	r4, [pc, #44]	; (80aa2c8 <rand+0x64>)
 80aa29a:	fb04 0003 	mla	r0, r4, r3, r0
 80aa29e:	fba2 3404 	umull	r3, r4, r2, r4
 80aa2a2:	1c5a      	adds	r2, r3, #1
 80aa2a4:	4404      	add	r4, r0
 80aa2a6:	f144 0000 	adc.w	r0, r4, #0
 80aa2aa:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80aa2ae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80aa2b2:	bd10      	pop	{r4, pc}
 80aa2b4:	20000008 	.word	0x20000008
 80aa2b8:	abcd330e 	.word	0xabcd330e
 80aa2bc:	e66d1234 	.word	0xe66d1234
 80aa2c0:	0005deec 	.word	0x0005deec
 80aa2c4:	5851f42d 	.word	0x5851f42d
 80aa2c8:	4c957f2d 	.word	0x4c957f2d

080aa2cc <strcmp>:
 80aa2cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80aa2d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80aa2d4:	2a01      	cmp	r2, #1
 80aa2d6:	bf28      	it	cs
 80aa2d8:	429a      	cmpcs	r2, r3
 80aa2da:	d0f7      	beq.n	80aa2cc <strcmp>
 80aa2dc:	1ad0      	subs	r0, r2, r3
 80aa2de:	4770      	bx	lr

080aa2e0 <strcpy>:
 80aa2e0:	4603      	mov	r3, r0
 80aa2e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80aa2e6:	f803 2b01 	strb.w	r2, [r3], #1
 80aa2ea:	2a00      	cmp	r2, #0
 80aa2ec:	d1f9      	bne.n	80aa2e2 <strcpy+0x2>
 80aa2ee:	4770      	bx	lr

080aa2f0 <strdup>:
 80aa2f0:	4b02      	ldr	r3, [pc, #8]	; (80aa2fc <strdup+0xc>)
 80aa2f2:	4601      	mov	r1, r0
 80aa2f4:	6818      	ldr	r0, [r3, #0]
 80aa2f6:	f000 b803 	b.w	80aa300 <_strdup_r>
 80aa2fa:	bf00      	nop
 80aa2fc:	20000008 	.word	0x20000008

080aa300 <_strdup_r>:
 80aa300:	b570      	push	{r4, r5, r6, lr}
 80aa302:	4604      	mov	r4, r0
 80aa304:	4608      	mov	r0, r1
 80aa306:	460d      	mov	r5, r1
 80aa308:	f000 f80d 	bl	80aa326 <strlen>
 80aa30c:	1c46      	adds	r6, r0, #1
 80aa30e:	4631      	mov	r1, r6
 80aa310:	4620      	mov	r0, r4
 80aa312:	f7f9 fe0b 	bl	80a3f2c <_malloc_r>
 80aa316:	4604      	mov	r4, r0
 80aa318:	b118      	cbz	r0, 80aa322 <_strdup_r+0x22>
 80aa31a:	4632      	mov	r2, r6
 80aa31c:	4629      	mov	r1, r5
 80aa31e:	f7ff ff67 	bl	80aa1f0 <memcpy>
 80aa322:	4620      	mov	r0, r4
 80aa324:	bd70      	pop	{r4, r5, r6, pc}

080aa326 <strlen>:
 80aa326:	4603      	mov	r3, r0
 80aa328:	f813 2b01 	ldrb.w	r2, [r3], #1
 80aa32c:	2a00      	cmp	r2, #0
 80aa32e:	d1fb      	bne.n	80aa328 <strlen+0x2>
 80aa330:	1a18      	subs	r0, r3, r0
 80aa332:	3801      	subs	r0, #1
 80aa334:	4770      	bx	lr

080aa336 <link_code_end>:
	...

080aa338 <dynalib_user>:
 80aa338:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80aa348:	0000 0000                                   ....

080aa34c <_ZL11COLOR_TABLE>:
 80aa34c:	0019 0000 0032 0000 004b 0000 0032 0000     ....2...K...2...
 80aa35c:	0064 0000 0096 0000 004b 0000 0096 0000     d.......K.......
 80aa36c:	00e1 0000 0064 0000 00c8 0000 002e 0000     ....d...........
 80aa37c:	007d 0000 00fa 0000 0079 0000 0096 0000     }.......y.......
 80aa38c:	002e 0000 00c4 0000 00af 0000 0060 0000     ............`...
 80aa39c:	0011 0000 00c8 0000 0092 0000 005c 0000     ............\...
 80aa3ac:	00e1 0000 00c4 0000 00a7 0000 00fa 0000     ................
 80aa3bc:	00f6 0000 00f2 0000 0015 0000 002a 0000     ............*...
 80aa3cc:	003f 0000 002e 0000 005c 0000 008a 0000     ?.......\.......
 80aa3dc:	0047 0000 008e 0000 00d5 0000 0060 0000     G...........`...
 80aa3ec:	00c0 0000 0022 0000 0079 0000 00f2 0000     ...."...y.......
 80aa3fc:	006d 0000 0092 0000 0026 0000 00b8 0000     m.......&.......
 80aa40c:	00ab 0000 0058 0000 0005 0000 00c4 0000     ....X...........
 80aa41c:	008a 0000 0050 0000 00dd 0000 00bc 0000     ....P...........
 80aa42c:	009b 0000 00f6 0000 00ee 0000 00e6 0000     ................
 80aa43c:	0011 0000 0022 0000 0033 0000 002a 0000     ...."...3...*...
 80aa44c:	0054 0000 007e 0000 0043 0000 0086 0000     T...~...C.......
 80aa45c:	00c9 0000 005c 0000 00b8 0000 0016 0000     ....\...........
 80aa46c:	0075 0000 00ea 0000 0061 0000 008e 0000     u.......a.......
 80aa47c:	001e 0000 00ac 0000 00a7 0000 0050 0000     ............P...
 80aa48c:	00f7 0000 00c0 0000 0082 0000 0044 0000     ............D...
 80aa49c:	00d9 0000 00b4 0000 008f 0000 00f2 0000     ................
 80aa4ac:	00e6 0000 00da 0000 000d 0000 001a 0000     ................
 80aa4bc:	0027 0000 0026 0000 004c 0000 0072 0000     '...&...L...r...
 80aa4cc:	003f 0000 007e 0000 00bd 0000 0058 0000     ?...~.......X...
 80aa4dc:	00b0 0000 000a 0000 0071 0000 00e2 0000     ........q.......
 80aa4ec:	0055 0000 008a 0000 0016 0000 00a0 0000     U...............
 80aa4fc:	00a3 0000 0048 0000 00eb 0000 00bc 0000     ....H...........
 80aa50c:	007a 0000 0038 0000 00d5 0000 00ac 0000     z...8...........
 80aa51c:	0083 0000 00ee 0000 00de 0000 00ce 0000     ................
 80aa52c:	0009 0000 0012 0000 001b 0000 0022 0000     ............"...
 80aa53c:	0044 0000 0066 0000 003b 0000 0076 0000     D...f...;...v...
 80aa54c:	00b1 0000 0054 0000 00a8 0000 00fc 0000     ....T...........
 80aa55c:	006d 0000 00da 0000 0049 0000 0086 0000     m.......I.......
 80aa56c:	000e 0000 0094 0000 009f 0000 0040 0000     ............@...
 80aa57c:	00df 0000 00b8 0000 0072 0000 002c 0000     ........r...,...
 80aa58c:	00d1 0000 00a4 0000 0077 0000 00ea 0000     ........w.......
 80aa59c:	00d6 0000 00c2 0000 6954 6b63 3173 7330     ........Ticks10s
 80aa5ac:	4600 6172 656d 3173 7330 2e00 4c00 636f     .Frames10s...Loc
 80aa5bc:	6c61 5049                                    alIP.

080aa5c1 <_ZL11matrix_pins>:
 80aa5c1:	1213 0607 0405 0203 0001                    ..........

080aa5cb <_ZL15webServerHeader>:
 80aa5cb:	6553 7672 7265 203a 6557 6462 6975 6f6e     Server: Webduino
 80aa5db:	312f 372e 0a0d 0000                          /1.7.....

080aa5e4 <_ZTV9WebServer>:
	...
 80aa5ec:	389d 080a 38d5 080a 3919 080a 39ad 080a     .8...8...9...9..

080aa5fc <_ZZN9WebServer8httpFailEvE8failMsg1>:
 80aa5fc:	5448 5054 312f 302e 3420 3030 4220 6461     HTTP/1.0 400 Bad
 80aa60c:	5220 7165 6575 7473 0a0d                      Request...

080aa617 <_ZZN9WebServer8httpFailEvE8failMsg2>:
 80aa617:	6f43 746e 6e65 2d74 7954 6570 203a 6574     Content-Type: te
 80aa627:	7478 682f 6d74 0d6c 0d0a 3c0a 3168 453e     xt/html....<h1>E
 80aa637:	4950 2043 4146 4c49 2f3c 3168 003e 0000     PIC FAIL</h1>...
	...

080aa648 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80aa650:	3f8b 080a 3f91 080a 3fe1 080a 3f9f 080a     .?...?...?...?..
 80aa660:	3f8d 080a                                   .?..

080aa664 <_ZTV7TwoWire>:
	...
 80aa66c:	4505 080a 454f 080a 4527 080a 4507 080a     .E..OE..'E...E..
 80aa67c:	452f 080a 4537 080a 453f 080a 4547 080a     /E..7E..?E..GE..

080aa68c <_ZTV9IPAddress>:
	...
 80aa694:	4591 080a 4581 080a 4583 080a 7061 0070     .E...E...E..app.

080aa6a4 <_ZTVN5spark12NetworkClassE>:
	...
 80aa6ac:	4659 080a 4663 080a 466d 080a 4677 080a     YF..cF..mF..wF..
 80aa6bc:	4681 080a 468d 080a 4699 080a 46a1 080a     .F...F...F...F..
 80aa6cc:	46a9 080a 46b5 080a 46bd 080a 46c7 080a     .F...F...F...F..
 80aa6dc:	46d1 080a 6977 6972 676e 5400 5043 6c43     .F..wiring.TCPCl
 80aa6ec:	6569 746e 7320 636f 656b 3d74 7825 0000     ient socket=%x..

080aa6fc <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80aa704:	4a49 080a 4a71 080a 4e93 080a 4a7f 080a     IJ..qJ...N...J..
 80aa714:	4a4d 080a                                   MJ..

080aa718 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080aa720 <_ZTV9TCPClient>:
	...
 80aa728:	4a85 080a 4ab9 080a 4a05 080a 4a1f 080a     .J...J...J...J..
 80aa738:	4c95 080a 4b1b 080a 4aed 080a 4a47 080a     .L...K...J..GJ..
 80aa748:	4bb5 080a 4e99 080a 4b4f 080a 4d09 080a     .K...N..OK...M..
 80aa758:	4db7 080a 4d6f 080a 4a2f 080a 4d7d 080a     .M..oM../J..}M..
 80aa768:	4acd 080a                                   .J..

080aa76c <_ZTV9TCPServer>:
	...
 80aa774:	5019 080a 503d 080a 4f1d 080a 4f35 080a     .P..=P...O..5O..
 80aa784:	4fd5 080a 4f05 080a 4f45 080a 5925 252d     .O...O..EO..%Y-%
 80aa794:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80aa7a4:	7361 7463 6d69 0065                         asctime.

080aa7ac <_ZTV11USARTSerial>:
	...
 80aa7b4:	50d9 080a 5141 080a 511d 080a 474d 080a     .P..AQ...Q..MG..
 80aa7c4:	50ed 080a 5109 080a 50fb 080a 5117 080a     .P...Q...P...Q..
 80aa7d4:	50db 080a 50df 080a                         .P...P..

080aa7dc <_ZTV9USBSerial>:
	...
 80aa7e4:	51d1 080a 5237 080a 520f 080a 474d 080a     .Q..7R...R..MG..
 80aa7f4:	5201 080a 51d3 080a 51e3 080a 5231 080a     .R...Q...Q..1R..
 80aa804:	51f3 080a 51cd 080a                         .Q...Q..

080aa80c <_ZTVN5spark9WiFiClassE>:
	...
 80aa814:	5407 080a 53fd 080a 53f3 080a 5365 080a     .T...S...S..eS..
 80aa824:	53e7 080a 53db 080a 4699 080a 46a1 080a     .S...S...F...F..
 80aa834:	53cf 080a 53c7 080a 53bd 080a 53b3 080a     .S...S...S...S..
 80aa844:	536f 080a                                   oS..

080aa848 <_ZSt7nothrow>:
	...

080aa849 <_ZTSSt19_Sp_make_shared_tag>:
 80aa849:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 80aa859:	6572 5f64 6174 0067 0000                     red_tag....

080aa864 <_ZTISt19_Sp_make_shared_tag>:
 80aa864:	a8a4 080a a849 080a                         ....I...

080aa86c <_ZTIN10__cxxabiv117__class_type_infoE>:
 80aa86c:	a904 080a a878 080a a928 080a               ....x...(...

080aa878 <_ZTSN10__cxxabiv117__class_type_infoE>:
 80aa878:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 80aa888:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 80aa898:	0045 0000                                   E...

080aa89c <_ZTVN10__cxxabiv117__class_type_infoE>:
 80aa89c:	0000 0000 a86c 080a 5825 080a 5839 080a     ....l...%X..9X..
 80aa8ac:	59d1 080a 59d1 080a 58a3 080a 57e5 080a     .Y...Y...X...W..
 80aa8bc:	588b 080a 584d 080a 5819 080a               .X..MX...X..

080aa8c8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80aa8c8:	a904 080a a8d4 080a a86c 080a               ........l...

080aa8d4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80aa8d4:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 80aa8e4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 80aa8f4:	666e 456f 0000 0000                         nfoE....

080aa8fc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80aa8fc:	0000 0000 a8c8 080a 58cd 080a 58e1 080a     .........X...X..
 80aa90c:	59d1 080a 59d1 080a 58a3 080a 57e5 080a     .Y...Y...X...W..
 80aa91c:	59a5 080a 5931 080a 58f5 080a               .Y..1Y...X..

080aa928 <_ZTISt9type_info>:
 80aa928:	a8a4 080a a930 080a                         ....0...

080aa930 <_ZTSSt9type_info>:
 80aa930:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
 80aa940:	6f70 0077 6d66 646f 0066 0000 6f6c 6667     pow.fmodf...logf
 80aa950:	0000 0000                                   ....

080aa954 <npio2_hw>:
 80aa954:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
 80aa964:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
 80aa974:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
 80aa984:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
 80aa994:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
 80aa9a4:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
 80aa9b4:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
 80aa9c4:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

080aa9d4 <two_over_pi>:
 80aa9d4:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
 80aa9e4:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
 80aa9f4:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
 80aaa04:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
 80aaa14:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
 80aaa24:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
 80aaa34:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
 80aaa44:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
 80aaa54:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
 80aaa64:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
 80aaa74:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
 80aaa84:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
 80aaa94:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
 80aaaa4:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
 80aaab4:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
 80aaac4:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
 80aaad4:	e27b 0060 8c6b 00c0                         {.`.k...

080aaadc <Zero>:
 80aaadc:	0000 0000 0000 8000                         ........

080aaae4 <npio2_hw>:
 80aaae4:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
 80aaaf4:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
 80aab04:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
 80aab14:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
 80aab24:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
 80aab34:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
 80aab44:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
 80aab54:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

080aab64 <two_over_pi>:
 80aab64:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
 80aab74:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
 80aab84:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
 80aab94:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
 80aaba4:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
 80aabb4:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
 80aabc4:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
 80aabd4:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
 80aabe4:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
 80aabf4:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
 80aac04:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
 80aac14:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
 80aac24:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
 80aac34:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
 80aac44:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
 80aac54:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
 80aac64:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
 80aac74:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
 80aac84:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
 80aac94:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
 80aaca4:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
 80aacb4:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
 80aacc4:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
 80aacd4:	00de 0000 0005 0000 0098 0000 000f 0000     ................
 80aace4:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
 80aacf4:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
 80aad04:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
 80aad14:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
 80aad24:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
 80aad34:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
 80aad44:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
 80aad54:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
 80aad64:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
 80aad74:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
 80aad84:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
 80aad94:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
 80aada4:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
 80aadb4:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
 80aadc4:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
 80aadd4:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
 80aade4:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
 80aadf4:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
 80aae04:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
 80aae14:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
 80aae24:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
 80aae34:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
 80aae44:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
 80aae54:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
 80aae64:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
 80aae74:	008c 0000 006b 0000 0000 0000               ....k.......

080aae80 <PIo2>:
 80aae80:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
 80aae90:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
 80aaea0:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
 80aaeb0:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

080aaec0 <init_jk>:
 80aaec0:	0002 0000 0003 0000 0004 0000 0006 0000     ................

080aaed0 <PIo2>:
 80aaed0:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
 80aaee0:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
 80aaef0:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

080aaefc <init_jk>:
 80aaefc:	0004 0000 0007 0000 0009 0000               ............

080aaf08 <TWO52>:
 80aaf08:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

080aaf18 <link_const_variable_data_end>:
 80aaf18:	080a2535 	.word	0x080a2535
 80aaf1c:	080a35c5 	.word	0x080a35c5
 80aaf20:	080a38ed 	.word	0x080a38ed
 80aaf24:	080a4649 	.word	0x080a4649
 80aaf28:	080a4739 	.word	0x080a4739
 80aaf2c:	080a4811 	.word	0x080a4811
 80aaf30:	080a49c9 	.word	0x080a49c9
 80aaf34:	080a50c5 	.word	0x080a50c5
 80aaf38:	080a5411 	.word	0x080a5411
 80aaf3c:	080a5791 	.word	0x080a5791
