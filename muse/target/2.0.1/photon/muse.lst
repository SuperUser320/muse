
/Users/jasonmerlo/Projects/muse/target/2.0.1/photon/muse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a9a0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080aa9c0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080aa9c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000f08  2000006c  2000006c  0004006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080aaa30  080aaa30  0003aa30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080aaa58  080aaa58  0003aa58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00178844  00000000  00000000  0003aa5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001a430  00000000  00000000  001b32a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001f53b  00000000  00000000  001cd6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023e8  00000000  00000000  001ecc0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005b90  00000000  00000000  001eeff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002e174  00000000  00000000  001f4b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003b2dc  00000000  00000000  00222cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b3b76  00000000  00000000  0025dfd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000066cc  00000000  00000000  00311b4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f009 fee5 	bl	80a9e00 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f009 feed 	bl	80a9e1c <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080aa9c4 	.word	0x080aa9c4
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	2000006c 	.word	0x2000006c
 80a0058:	20000f74 	.word	0x20000f74
 80a005c:	20000f74 	.word	0x20000f74

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f005 f9af 	bl	80a53c4 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080aa998 	.word	0x080aa998
 80a0084:	080aa9c0 	.word	0x080aa9c0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f002 b90e 	b.w	80a22a8 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f002 fa03 	bl	80a2498 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f005 b957 	b.w	80a5348 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f003 bea7 	b.w	80a3dec <malloc>

080a009e <_Znaj>:
 80a009e:	f003 bea5 	b.w	80a3dec <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f003 beab 	b.w	80a3dfc <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_ZN10Bar_Matrix5decayEd>:
/* ================================================================== *
 * Function: decay
 * Description: slowly fades out matrix values
 * Parameters: [float] factor - decay factor to be multiplied by
 * ================================================================== */
void Bar_Matrix::decay(double factor) {
 80a00b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a00bc:	4692      	mov	sl, r2
 80a00be:	469b      	mov	fp, r3
 80a00c0:	2600      	movs	r6, #0
    for (char i = 0; i < disp_width; i++) {
        for (char j = 0; j < disp_height; j++) {
            unsigned int color = bars[i]->getPixelColor(j);
 80a00c2:	4f28      	ldr	r7, [pc, #160]	; (80a0164 <_ZN10Bar_Matrix5decayEd+0xac>)
void Bar_Matrix::decay(double factor) {
 80a00c4:	b087      	sub	sp, #28
    for (char i = 0; i < disp_width; i++) {
 80a00c6:	4a28      	ldr	r2, [pc, #160]	; (80a0168 <_ZN10Bar_Matrix5decayEd+0xb0>)
 80a00c8:	b2f3      	uxtb	r3, r6
 80a00ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 80a00ce:	4293      	cmp	r3, r2
 80a00d0:	da44      	bge.n	80a015c <_ZN10Bar_Matrix5decayEd+0xa4>
            unsigned int color = bars[i]->getPixelColor(j);
 80a00d2:	f04f 0900 	mov.w	r9, #0
 80a00d6:	ea4f 0883 	mov.w	r8, r3, lsl #2
        for (char j = 0; j < disp_height; j++) {
 80a00da:	4b24      	ldr	r3, [pc, #144]	; (80a016c <_ZN10Bar_Matrix5decayEd+0xb4>)
 80a00dc:	fa5f f489 	uxtb.w	r4, r9
 80a00e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a00e4:	f109 0901 	add.w	r9, r9, #1
 80a00e8:	429c      	cmp	r4, r3
 80a00ea:	da35      	bge.n	80a0158 <_ZN10Bar_Matrix5decayEd+0xa0>
            unsigned int color = bars[i]->getPixelColor(j);
 80a00ec:	683b      	ldr	r3, [r7, #0]
 80a00ee:	b2a4      	uxth	r4, r4
 80a00f0:	f853 0008 	ldr.w	r0, [r3, r8]
 80a00f4:	4621      	mov	r1, r4
 80a00f6:	f003 fa32 	bl	80a355e <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
 80a00fa:	4605      	mov	r5, r0
            bars[i]->setPixelColor(j, (char)(color >> 16) * factor,
            (char)(color >> 8) * factor,
 80a00fc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80a0100:	f008 ff8e 	bl	80a9020 <__aeabi_i2d>
 80a0104:	4652      	mov	r2, sl
 80a0106:	465b      	mov	r3, fp
 80a0108:	f008 fff4 	bl	80a90f4 <__aeabi_dmul>
            bars[i]->setPixelColor(j, (char)(color >> 16) * factor,
 80a010c:	f009 faca 	bl	80a96a4 <__aeabi_d2uiz>
 80a0110:	b2c3      	uxtb	r3, r0
 80a0112:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80a0116:	9303      	str	r3, [sp, #12]
 80a0118:	f008 ff82 	bl	80a9020 <__aeabi_i2d>
 80a011c:	4652      	mov	r2, sl
 80a011e:	465b      	mov	r3, fp
 80a0120:	f008 ffe8 	bl	80a90f4 <__aeabi_dmul>
 80a0124:	f009 fabe 	bl	80a96a4 <__aeabi_d2uiz>
 80a0128:	b2c3      	uxtb	r3, r0
 80a012a:	9304      	str	r3, [sp, #16]
 80a012c:	683b      	ldr	r3, [r7, #0]
            (char)(color) * factor);
 80a012e:	b2e8      	uxtb	r0, r5
            bars[i]->setPixelColor(j, (char)(color >> 16) * factor,
 80a0130:	9305      	str	r3, [sp, #20]
            (char)(color) * factor);
 80a0132:	f008 ff75 	bl	80a9020 <__aeabi_i2d>
 80a0136:	4652      	mov	r2, sl
 80a0138:	465b      	mov	r3, fp
 80a013a:	f008 ffdb 	bl	80a90f4 <__aeabi_dmul>
            bars[i]->setPixelColor(j, (char)(color >> 16) * factor,
 80a013e:	f009 fab1 	bl	80a96a4 <__aeabi_d2uiz>
 80a0142:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80a0146:	b2c0      	uxtb	r0, r0
 80a0148:	9000      	str	r0, [sp, #0]
 80a014a:	9805      	ldr	r0, [sp, #20]
 80a014c:	4621      	mov	r1, r4
 80a014e:	f850 0008 	ldr.w	r0, [r0, r8]
 80a0152:	f003 f9ad 	bl	80a34b0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        for (char j = 0; j < disp_height; j++) {
 80a0156:	e7c0      	b.n	80a00da <_ZN10Bar_Matrix5decayEd+0x22>
    for (char i = 0; i < disp_width; i++) {
 80a0158:	3601      	adds	r6, #1
 80a015a:	e7b4      	b.n	80a00c6 <_ZN10Bar_Matrix5decayEd+0xe>
        }
    }
}
 80a015c:	b007      	add	sp, #28
 80a015e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0162:	bf00      	nop
 80a0164:	20000070 	.word	0x20000070
 80a0168:	2000007e 	.word	0x2000007e
 80a016c:	2000007c 	.word	0x2000007c

080a0170 <_ZN10Bar_Matrix12decay_to_rgbEdiii>:
 * Parameters: [float] factor - decay factor to be multiplied by
 *             [int] r - the red value to fade to
 *             [int] g - the green value to fade to
 *             [int] b - the blue value to fade to
 * ================================================================== */
void Bar_Matrix::decay_to_rgb(double factor, int r, int g, int b) {
 80a0170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0174:	f04f 0900 	mov.w	r9, #0
 80a0178:	b085      	sub	sp, #20
 80a017a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    for (char i = 0; i < disp_width; i++) {
        for (char j = 0; j < disp_height; j++) {
            unsigned int color = bars[i]->getPixelColor(j);
 80a017e:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 80a023c <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xcc>
    for (char i = 0; i < disp_width; i++) {
 80a0182:	4b2c      	ldr	r3, [pc, #176]	; (80a0234 <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xc4>)
 80a0184:	fa5f f489 	uxtb.w	r4, r9
 80a0188:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a018c:	429c      	cmp	r4, r3
 80a018e:	da4d      	bge.n	80a022c <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xbc>
            unsigned int color = bars[i]->getPixelColor(j);
 80a0190:	f04f 0a00 	mov.w	sl, #0
 80a0194:	00a4      	lsls	r4, r4, #2
        for (char j = 0; j < disp_height; j++) {
 80a0196:	4b28      	ldr	r3, [pc, #160]	; (80a0238 <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xc8>)
 80a0198:	fa5f f58a 	uxtb.w	r5, sl
 80a019c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a01a0:	f10a 0a01 	add.w	sl, sl, #1
 80a01a4:	429d      	cmp	r5, r3
 80a01a6:	da3e      	bge.n	80a0226 <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xb6>
            unsigned int color = bars[i]->getPixelColor(j);
 80a01a8:	f8db 3000 	ldr.w	r3, [fp]
 80a01ac:	b2ad      	uxth	r5, r5
 80a01ae:	5918      	ldr	r0, [r3, r4]
 80a01b0:	4629      	mov	r1, r5
 80a01b2:	f003 f9d4 	bl	80a355e <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
 80a01b6:	4680      	mov	r8, r0

            // Decay and do bounds checking on rgb values
            int rx = (int) ((char)(color >> 16) * factor);
 80a01b8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80a01bc:	f008 ff30 	bl	80a9020 <__aeabi_i2d>
 80a01c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a01c4:	f008 ff96 	bl	80a90f4 <__aeabi_dmul>
 80a01c8:	f009 fa44 	bl	80a9654 <__aeabi_d2iz>
 80a01cc:	4606      	mov	r6, r0
            int gx = (int) ((char)(color >>  8) * factor);
 80a01ce:	f3c8 2007 	ubfx	r0, r8, #8, #8
 80a01d2:	f008 ff25 	bl	80a9020 <__aeabi_i2d>
 80a01d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a01da:	f008 ff8b 	bl	80a90f4 <__aeabi_dmul>
 80a01de:	f009 fa39 	bl	80a9654 <__aeabi_d2iz>
 80a01e2:	4607      	mov	r7, r0
            int bx = (int) ((char)(color      ) * factor);
 80a01e4:	fa5f f088 	uxtb.w	r0, r8
 80a01e8:	f008 ff1a 	bl	80a9020 <__aeabi_i2d>
 80a01ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a01f0:	f008 ff80 	bl	80a90f4 <__aeabi_dmul>
 80a01f4:	f009 fa2e 	bl	80a9654 <__aeabi_d2iz>
            if (rx < r) { rx = r; }
            if (gx < g) { gx = g; }
            if (bx < b) { bx = b; }

            bars[i]->setPixelColor(j, rx, gx, bx);
 80a01f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a01fa:	429f      	cmp	r7, r3
 80a01fc:	bfb8      	it	lt
 80a01fe:	461f      	movlt	r7, r3
 80a0200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a0202:	429e      	cmp	r6, r3
 80a0204:	bfb8      	it	lt
 80a0206:	461e      	movlt	r6, r3
 80a0208:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a020a:	b2f2      	uxtb	r2, r6
 80a020c:	4283      	cmp	r3, r0
 80a020e:	bfb8      	it	lt
 80a0210:	4603      	movlt	r3, r0
 80a0212:	f8db 0000 	ldr.w	r0, [fp]
 80a0216:	b2d9      	uxtb	r1, r3
 80a0218:	9100      	str	r1, [sp, #0]
 80a021a:	5900      	ldr	r0, [r0, r4]
 80a021c:	4629      	mov	r1, r5
 80a021e:	b2fb      	uxtb	r3, r7
 80a0220:	f003 f946 	bl	80a34b0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        for (char j = 0; j < disp_height; j++) {
 80a0224:	e7b7      	b.n	80a0196 <_ZN10Bar_Matrix12decay_to_rgbEdiii+0x26>
    for (char i = 0; i < disp_width; i++) {
 80a0226:	f109 0901 	add.w	r9, r9, #1
 80a022a:	e7aa      	b.n	80a0182 <_ZN10Bar_Matrix12decay_to_rgbEdiii+0x12>
        }
    }
}
 80a022c:	b005      	add	sp, #20
 80a022e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0232:	bf00      	nop
 80a0234:	2000007e 	.word	0x2000007e
 80a0238:	2000007c 	.word	0x2000007c
 80a023c:	20000070 	.word	0x20000070

080a0240 <_ZN10Bar_Matrix8fill_barEiiii>:

void Bar_Matrix::fill_bar(int bar, int r, int g, int b) {
 80a0240:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a0244:	4616      	mov	r6, r2
    for (int j =0; j < disp_height; j++) {
 80a0246:	2400      	movs	r4, #0
 80a0248:	f8df 8030 	ldr.w	r8, [pc, #48]	; 80a027c <_ZN10Bar_Matrix8fill_barEiiii+0x3c>
        bars[bar]->setPixelColor(j, (uint8_t)r, (uint8_t)g, (uint8_t)b);
 80a024c:	f8df 9030 	ldr.w	r9, [pc, #48]	; 80a0280 <_ZN10Bar_Matrix8fill_barEiiii+0x40>
 80a0250:	008d      	lsls	r5, r1, #2
 80a0252:	b2df      	uxtb	r7, r3
    for (int j =0; j < disp_height; j++) {
 80a0254:	f9b8 3000 	ldrsh.w	r3, [r8]
 80a0258:	42a3      	cmp	r3, r4
 80a025a:	dd0c      	ble.n	80a0276 <_ZN10Bar_Matrix8fill_barEiiii+0x36>
        bars[bar]->setPixelColor(j, (uint8_t)r, (uint8_t)g, (uint8_t)b);
 80a025c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a025e:	f8d9 0000 	ldr.w	r0, [r9]
 80a0262:	b2db      	uxtb	r3, r3
 80a0264:	9300      	str	r3, [sp, #0]
 80a0266:	b2a1      	uxth	r1, r4
 80a0268:	463b      	mov	r3, r7
 80a026a:	5940      	ldr	r0, [r0, r5]
 80a026c:	b2f2      	uxtb	r2, r6
 80a026e:	f003 f91f 	bl	80a34b0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    for (int j =0; j < disp_height; j++) {
 80a0272:	3401      	adds	r4, #1
 80a0274:	e7ee      	b.n	80a0254 <_ZN10Bar_Matrix8fill_barEiiii+0x14>
    }
}
 80a0276:	b003      	add	sp, #12
 80a0278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a027c:	2000007c 	.word	0x2000007c
 80a0280:	20000070 	.word	0x20000070

080a0284 <_ZN10Bar_Matrix11fill_matrixE11Color_Value>:
/* ================================================================== *
 * Function: fill_matrix
 * Description: Sets all pixel values in matrix to given color value
 * Parameters: [Color]* color - color to set matrix to
 * ================================================================== */
void Bar_Matrix::fill_matrix(Color_Value c) {
 80a0284:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    for (int i = 0; i < disp_width; i++) {
 80a0288:	2400      	movs	r4, #0
void Bar_Matrix::fill_matrix(Color_Value c) {
 80a028a:	ab02      	add	r3, sp, #8
 80a028c:	e903 0006 	stmdb	r3, {r1, r2}
    for (int i = 0; i < disp_width; i++) {
 80a0290:	4e0e      	ldr	r6, [pc, #56]	; (80a02cc <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x48>)
        for (int j =0; j< disp_height; j++) {
            bars[i]->setPixelColor(j, c.c);
 80a0292:	4f0f      	ldr	r7, [pc, #60]	; (80a02d0 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x4c>)
    for (int i = 0; i < disp_width; i++) {
 80a0294:	f9b6 3000 	ldrsh.w	r3, [r6]
 80a0298:	42a3      	cmp	r3, r4
 80a029a:	dd13      	ble.n	80a02c4 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x40>
        for (int j =0; j< disp_height; j++) {
 80a029c:	2500      	movs	r5, #0
 80a029e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 80a02d4 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x50>
 80a02a2:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80a02a6:	f9b9 3000 	ldrsh.w	r3, [r9]
 80a02aa:	42ab      	cmp	r3, r5
 80a02ac:	dd08      	ble.n	80a02c0 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x3c>
            bars[i]->setPixelColor(j, c.c);
 80a02ae:	683b      	ldr	r3, [r7, #0]
 80a02b0:	b2a9      	uxth	r1, r5
 80a02b2:	9a00      	ldr	r2, [sp, #0]
 80a02b4:	f853 0008 	ldr.w	r0, [r3, r8]
 80a02b8:	f003 f923 	bl	80a3502 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        for (int j =0; j< disp_height; j++) {
 80a02bc:	3501      	adds	r5, #1
 80a02be:	e7f2      	b.n	80a02a6 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x22>
    for (int i = 0; i < disp_width; i++) {
 80a02c0:	3401      	adds	r4, #1
 80a02c2:	e7e7      	b.n	80a0294 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x10>
        }
    }
}
 80a02c4:	b003      	add	sp, #12
 80a02c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a02ca:	bf00      	nop
 80a02cc:	2000007e 	.word	0x2000007e
 80a02d0:	20000070 	.word	0x20000070
 80a02d4:	2000007c 	.word	0x2000007c

080a02d8 <_ZN10Bar_Matrix11init_matrixEv>:

/* ================================================================== *
 * Function: init_matrix
 * Description: Initializes the matrix to off
 * ================================================================== */
void Bar_Matrix::init_matrix() {
 80a02d8:	b570      	push	{r4, r5, r6, lr}
    for (int i = 0; i < disp_width; i++) {
 80a02da:	2400      	movs	r4, #0
 80a02dc:	4e09      	ldr	r6, [pc, #36]	; (80a0304 <_ZN10Bar_Matrix11init_matrixEv+0x2c>)
        // switch height and width based on orientation
        bars[i]->begin();
 80a02de:	4d0a      	ldr	r5, [pc, #40]	; (80a0308 <_ZN10Bar_Matrix11init_matrixEv+0x30>)
    for (int i = 0; i < disp_width; i++) {
 80a02e0:	f9b6 3000 	ldrsh.w	r3, [r6]
 80a02e4:	42a3      	cmp	r3, r4
 80a02e6:	dd0b      	ble.n	80a0300 <_ZN10Bar_Matrix11init_matrixEv+0x28>
        bars[i]->begin();
 80a02e8:	682b      	ldr	r3, [r5, #0]
 80a02ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80a02ee:	f002 f966 	bl	80a25be <_ZN17Adafruit_NeoPixel5beginEv>
        bars[i]->show();
 80a02f2:	682b      	ldr	r3, [r5, #0]
 80a02f4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80a02f8:	f002 f96e 	bl	80a25d8 <_ZN17Adafruit_NeoPixel4showEv>
    for (int i = 0; i < disp_width; i++) {
 80a02fc:	3401      	adds	r4, #1
 80a02fe:	e7ef      	b.n	80a02e0 <_ZN10Bar_Matrix11init_matrixEv+0x8>
    }
}
 80a0300:	bd70      	pop	{r4, r5, r6, pc}
 80a0302:	bf00      	nop
 80a0304:	2000007e 	.word	0x2000007e
 80a0308:	20000070 	.word	0x20000070

080a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>:

void Bar_Matrix::mix_pixel(unsigned char bar, unsigned short pixel, float factor, unsigned char r, unsigned char g, unsigned char b) {
 80a030c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0310:	460f      	mov	r7, r1
 80a0312:	4690      	mov	r8, r2
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a0314:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80a03e4 <_ZN10Bar_Matrix9mix_pixelEhtfhhh+0xd8>
void Bar_Matrix::mix_pixel(unsigned char bar, unsigned short pixel, float factor, unsigned char r, unsigned char g, unsigned char b) {
 80a0318:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a031c:	f8db 0000 	ldr.w	r0, [fp]
void Bar_Matrix::mix_pixel(unsigned char bar, unsigned short pixel, float factor, unsigned char r, unsigned char g, unsigned char b) {
 80a0320:	461c      	mov	r4, r3
 80a0322:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a0326:	4641      	mov	r1, r8
 80a0328:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
void Bar_Matrix::mix_pixel(unsigned char bar, unsigned short pixel, float factor, unsigned char r, unsigned char g, unsigned char b) {
 80a032c:	9300      	str	r3, [sp, #0]
 80a032e:	9201      	str	r2, [sp, #4]
 80a0330:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a0334:	f003 f913 	bl	80a355e <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a0338:	4621      	mov	r1, r4
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a033a:	4606      	mov	r6, r0
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a033c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a0340:	f009 fa24 	bl	80a978c <__aeabi_fsub>
 80a0344:	4605      	mov	r5, r0
    (char)(color >> 8) * (1-factor) + g * factor,
 80a0346:	f3c6 2007 	ubfx	r0, r6, #8, #8
 80a034a:	f009 fad5 	bl	80a98f8 <__aeabi_i2f>
 80a034e:	4629      	mov	r1, r5
 80a0350:	f009 fb26 	bl	80a99a0 <__aeabi_fmul>
 80a0354:	4681      	mov	r9, r0
 80a0356:	4650      	mov	r0, sl
 80a0358:	f009 face 	bl	80a98f8 <__aeabi_i2f>
 80a035c:	4621      	mov	r1, r4
 80a035e:	f009 fb1f 	bl	80a99a0 <__aeabi_fmul>
 80a0362:	4601      	mov	r1, r0
 80a0364:	4648      	mov	r0, r9
 80a0366:	f009 fa13 	bl	80a9790 <__addsf3>
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a036a:	f009 fd1b 	bl	80a9da4 <__aeabi_f2uiz>
 80a036e:	fa5f fa80 	uxtb.w	sl, r0
 80a0372:	f3c6 4007 	ubfx	r0, r6, #16, #8
 80a0376:	f009 fabf 	bl	80a98f8 <__aeabi_i2f>
 80a037a:	4629      	mov	r1, r5
 80a037c:	f009 fb10 	bl	80a99a0 <__aeabi_fmul>
 80a0380:	9a01      	ldr	r2, [sp, #4]
 80a0382:	4681      	mov	r9, r0
 80a0384:	4610      	mov	r0, r2
 80a0386:	f009 fab7 	bl	80a98f8 <__aeabi_i2f>
 80a038a:	4621      	mov	r1, r4
 80a038c:	f009 fb08 	bl	80a99a0 <__aeabi_fmul>
 80a0390:	4601      	mov	r1, r0
 80a0392:	4648      	mov	r0, r9
 80a0394:	f009 f9fc 	bl	80a9790 <__addsf3>
 80a0398:	f009 fd04 	bl	80a9da4 <__aeabi_f2uiz>
 80a039c:	fa5f f980 	uxtb.w	r9, r0
    (char)(color) * (1-factor) + b * factor);
 80a03a0:	b2f0      	uxtb	r0, r6
 80a03a2:	f009 faa9 	bl	80a98f8 <__aeabi_i2f>
 80a03a6:	4629      	mov	r1, r5
 80a03a8:	f009 fafa 	bl	80a99a0 <__aeabi_fmul>
 80a03ac:	9b00      	ldr	r3, [sp, #0]
 80a03ae:	4605      	mov	r5, r0
 80a03b0:	4618      	mov	r0, r3
 80a03b2:	f009 faa1 	bl	80a98f8 <__aeabi_i2f>
 80a03b6:	4621      	mov	r1, r4
 80a03b8:	f009 faf2 	bl	80a99a0 <__aeabi_fmul>
 80a03bc:	4601      	mov	r1, r0
 80a03be:	4628      	mov	r0, r5
 80a03c0:	f009 f9e6 	bl	80a9790 <__addsf3>
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a03c4:	f009 fcee 	bl	80a9da4 <__aeabi_f2uiz>
 80a03c8:	4653      	mov	r3, sl
 80a03ca:	464a      	mov	r2, r9
 80a03cc:	4641      	mov	r1, r8
 80a03ce:	f8db b000 	ldr.w	fp, [fp]
 80a03d2:	b2c0      	uxtb	r0, r0
 80a03d4:	900c      	str	r0, [sp, #48]	; 0x30
 80a03d6:	f85b 0027 	ldr.w	r0, [fp, r7, lsl #2]
}
 80a03da:	b003      	add	sp, #12
 80a03dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a03e0:	f003 b866 	b.w	80a34b0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
 80a03e4:	20000070 	.word	0x20000070

080a03e8 <_ZN10Bar_Matrix12clear_matrixEv>:

/* ================================================================== *
 * Function: clear_matrix
 * Description: Sets all pixel values to (0, 0, 0)
 * ================================================================== */
void Bar_Matrix::clear_matrix() {
 80a03e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for (int i = 0; i < disp_width; i++) {
 80a03ec:	2400      	movs	r4, #0
 80a03ee:	4e0e      	ldr	r6, [pc, #56]	; (80a0428 <_ZN10Bar_Matrix12clear_matrixEv+0x40>)
        for (int j =0; j< disp_height; j++) {
            bars[i]->setPixelColor(j, 0);
 80a03f0:	4f0e      	ldr	r7, [pc, #56]	; (80a042c <_ZN10Bar_Matrix12clear_matrixEv+0x44>)
    for (int i = 0; i < disp_width; i++) {
 80a03f2:	f9b6 3000 	ldrsh.w	r3, [r6]
 80a03f6:	42a3      	cmp	r3, r4
 80a03f8:	dd13      	ble.n	80a0422 <_ZN10Bar_Matrix12clear_matrixEv+0x3a>
        for (int j =0; j< disp_height; j++) {
 80a03fa:	2500      	movs	r5, #0
 80a03fc:	f8df 9030 	ldr.w	r9, [pc, #48]	; 80a0430 <_ZN10Bar_Matrix12clear_matrixEv+0x48>
 80a0400:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80a0404:	f9b9 3000 	ldrsh.w	r3, [r9]
 80a0408:	42ab      	cmp	r3, r5
 80a040a:	dd08      	ble.n	80a041e <_ZN10Bar_Matrix12clear_matrixEv+0x36>
            bars[i]->setPixelColor(j, 0);
 80a040c:	683b      	ldr	r3, [r7, #0]
 80a040e:	b2a9      	uxth	r1, r5
 80a0410:	2200      	movs	r2, #0
 80a0412:	f853 0008 	ldr.w	r0, [r3, r8]
 80a0416:	f003 f874 	bl	80a3502 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        for (int j =0; j< disp_height; j++) {
 80a041a:	3501      	adds	r5, #1
 80a041c:	e7f2      	b.n	80a0404 <_ZN10Bar_Matrix12clear_matrixEv+0x1c>
    for (int i = 0; i < disp_width; i++) {
 80a041e:	3401      	adds	r4, #1
 80a0420:	e7e7      	b.n	80a03f2 <_ZN10Bar_Matrix12clear_matrixEv+0xa>
        }
    }
}
 80a0422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0426:	bf00      	nop
 80a0428:	2000007e 	.word	0x2000007e
 80a042c:	20000070 	.word	0x20000070
 80a0430:	2000007c 	.word	0x2000007c

080a0434 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection>:
Bar_Matrix::Bar_Matrix(short num_bars, short bar_len, const char led_type, const char* pins, Beat_Detection* beat_detection) {
 80a0434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0438:	4604      	mov	r4, r0
 80a043a:	b097      	sub	sp, #92	; 0x5c
 80a043c:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 80a0440:	460d      	mov	r5, r1
 80a0442:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a0446:	f003 f955 	bl	80a36f4 <_ZN10PongPaddleC1Ev>
 80a044a:	f504 70c8 	add.w	r0, r4, #400	; 0x190
 80a044e:	f003 f951 	bl	80a36f4 <_ZN10PongPaddleC1Ev>
 80a0452:	f504 7bfa 	add.w	fp, r4, #500	; 0x1f4
 80a0456:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 80a045a:	f003 f8c7 	bl	80a35ec <_ZN8PongBallC1Ev>
 80a045e:	4658      	mov	r0, fp
 80a0460:	f003 fa1c 	bl	80a389c <_ZN8TCPBeatsC1Ev>
    disp_height = bar_len; //(orientation) ? bar_len : num_bars;
 80a0464:	4b96      	ldr	r3, [pc, #600]	; (80a06c0 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x28c>)
 80a0466:	9908      	ldr	r1, [sp, #32]
    disp_width = num_bars; //(orientation) ? num_bars : bar_len;
 80a0468:	4a96      	ldr	r2, [pc, #600]	; (80a06c4 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x290>)
    disp_height = bar_len; //(orientation) ? bar_len : num_bars;
 80a046a:	8019      	strh	r1, [r3, #0]
    display = new unsigned long*[disp_width];
 80a046c:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
 80a0470:	428d      	cmp	r5, r1
 80a0472:	bf2c      	ite	cs
 80a0474:	f04f 3aff 	movcs.w	sl, #4294967295	; 0xffffffff
 80a0478:	ea4f 0a85 	movcc.w	sl, r5, lsl #2
 80a047c:	4650      	mov	r0, sl
 80a047e:	4690      	mov	r8, r2
    disp_width = num_bars; //(orientation) ? num_bars : bar_len;
 80a0480:	8015      	strh	r5, [r2, #0]
    display = new unsigned long*[disp_width];
 80a0482:	4699      	mov	r9, r3
 80a0484:	f7ff fe0b 	bl	80a009e <_Znaj>
    for (int i = 0; i < disp_width; i++)
 80a0488:	2600      	movs	r6, #0
    display[i] = new unsigned long[disp_height];
 80a048a:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
    display = new unsigned long*[disp_width];
 80a048e:	4f8e      	ldr	r7, [pc, #568]	; (80a06c8 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x294>)
 80a0490:	6038      	str	r0, [r7, #0]
    for (int i = 0; i < disp_width; i++)
 80a0492:	f9b8 3000 	ldrsh.w	r3, [r8]
 80a0496:	42b3      	cmp	r3, r6
 80a0498:	dd11      	ble.n	80a04be <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x8a>
    display[i] = new unsigned long[disp_height];
 80a049a:	f9b9 0000 	ldrsh.w	r0, [r9]
 80a049e:	683b      	ldr	r3, [r7, #0]
 80a04a0:	4290      	cmp	r0, r2
 80a04a2:	bf2c      	ite	cs
 80a04a4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a04a8:	0080      	lslcc	r0, r0, #2
 80a04aa:	9307      	str	r3, [sp, #28]
 80a04ac:	f7ff fdf7 	bl	80a009e <_Znaj>
 80a04b0:	9b07      	ldr	r3, [sp, #28]
    for (int i = 0; i < disp_width; i++)
 80a04b2:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
    display[i] = new unsigned long[disp_height];
 80a04b6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    for (int i = 0; i < disp_width; i++)
 80a04ba:	3601      	adds	r6, #1
 80a04bc:	e7e9      	b.n	80a0492 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x5e>
    bars = new Adafruit_NeoPixel*[num_bars];
 80a04be:	4650      	mov	r0, sl
 80a04c0:	f7ff fded 	bl	80a009e <_Znaj>
 80a04c4:	4b81      	ldr	r3, [pc, #516]	; (80a06cc <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x298>)
 80a04c6:	4626      	mov	r6, r4
 80a04c8:	2700      	movs	r7, #0
 80a04ca:	4699      	mov	r9, r3
        bouncing_line_colors[i][0] = bd->r();
 80a04cc:	f8df a218 	ldr.w	sl, [pc, #536]	; 80a06e8 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x2b4>
    bars = new Adafruit_NeoPixel*[num_bars];
 80a04d0:	6018      	str	r0, [r3, #0]
    for(short i = 0; i < num_bars; i++) {
 80a04d2:	f1a4 0804 	sub.w	r8, r4, #4
 80a04d6:	b23b      	sxth	r3, r7
 80a04d8:	429d      	cmp	r5, r3
 80a04da:	dd49      	ble.n	80a0570 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x13c>
        bars[i] = new Adafruit_NeoPixel(bar_len, pins[i], led_type);
 80a04dc:	2010      	movs	r0, #16
 80a04de:	f7ff fddc 	bl	80a009a <_Znwj>
 80a04e2:	9007      	str	r0, [sp, #28]
 80a04e4:	b130      	cbz	r0, 80a04f4 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0xc0>
 80a04e6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80a04e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a04ea:	5dd2      	ldrb	r2, [r2, r7]
 80a04ec:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80a04f0:	f002 f84e 	bl	80a2590 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a04f4:	f8d9 3000 	ldr.w	r3, [r9]
 80a04f8:	9a07      	ldr	r2, [sp, #28]
        bouncing_line_lengths[i] = random(10, STRIP_LENGTH / 2);
 80a04fa:	2123      	movs	r1, #35	; 0x23
        bars[i] = new Adafruit_NeoPixel(bar_len, pins[i], led_type);
 80a04fc:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
        bouncing_line_lengths[i] = random(10, STRIP_LENGTH / 2);
 80a0500:	200a      	movs	r0, #10
 80a0502:	f004 f90c 	bl	80a471e <_Z6randomii>
        bouncing_line_positions[i] = random(0, STRIP_LENGTH);
 80a0506:	2146      	movs	r1, #70	; 0x46
        bouncing_line_lengths[i] = random(10, STRIP_LENGTH / 2);
 80a0508:	f848 0f04 	str.w	r0, [r8, #4]!
        bouncing_line_positions[i] = random(0, STRIP_LENGTH);
 80a050c:	2000      	movs	r0, #0
 80a050e:	f004 f906 	bl	80a471e <_Z6randomii>
 80a0512:	f009 f9f1 	bl	80a98f8 <__aeabi_i2f>
        if (random(0, 10) > 5) bouncing_line_directions[i] = 1;
 80a0516:	210a      	movs	r1, #10
        bouncing_line_positions[i] = random(0, STRIP_LENGTH);
 80a0518:	f8c8 0020 	str.w	r0, [r8, #32]
        if (random(0, 10) > 5) bouncing_line_directions[i] = 1;
 80a051c:	2000      	movs	r0, #0
 80a051e:	f004 f8fe 	bl	80a471e <_Z6randomii>
        else                bouncing_line_directions[i] = -1;
 80a0522:	2805      	cmp	r0, #5
 80a0524:	bfcc      	ite	gt
 80a0526:	2301      	movgt	r3, #1
 80a0528:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
        bouncing_line_speeds[i] = (float)random(5, 10) / 15.0;
 80a052c:	210a      	movs	r1, #10
 80a052e:	f8c8 3060 	str.w	r3, [r8, #96]	; 0x60
 80a0532:	2005      	movs	r0, #5
 80a0534:	f004 f8f3 	bl	80a471e <_Z6randomii>
 80a0538:	f009 f9de 	bl	80a98f8 <__aeabi_i2f>
 80a053c:	4964      	ldr	r1, [pc, #400]	; (80a06d0 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x29c>)
 80a053e:	f009 fae3 	bl	80a9b08 <__aeabi_fdiv>
 80a0542:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
        bouncing_line_colors[i][0] = bd->r();
 80a0546:	f8da 0000 	ldr.w	r0, [sl]
 80a054a:	f001 fdc6 	bl	80a20da <_ZN14Beat_Detection1rEv>
 80a054e:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80
        bouncing_line_colors[i][1] = bd->g();
 80a0552:	f8da 0000 	ldr.w	r0, [sl]
 80a0556:	f001 fdc2 	bl	80a20de <_ZN14Beat_Detection1gEv>
 80a055a:	f8c6 0084 	str.w	r0, [r6, #132]	; 0x84
        bouncing_line_colors[i][2] = bd->b();
 80a055e:	f8da 0000 	ldr.w	r0, [sl]
 80a0562:	f001 fdbe 	bl	80a20e2 <_ZN14Beat_Detection1bEv>
 80a0566:	3701      	adds	r7, #1
 80a0568:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
    for(short i = 0; i < num_bars; i++) {
 80a056c:	360c      	adds	r6, #12
 80a056e:	e7b2      	b.n	80a04d6 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0xa2>
    snakes[0] = Snake(1, 30, -30, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0570:	2301      	movs	r3, #1
 80a0572:	2519      	movs	r5, #25
 80a0574:	2132      	movs	r1, #50	; 0x32
 80a0576:	221e      	movs	r2, #30
    snakes[1] = Snake(-1, 25, 4*70, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0578:	2764      	movs	r7, #100	; 0x64
    snakes[0] = Snake(1, 30, -30, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a057a:	e9c4 3238 	strd	r3, r2, [r4, #224]	; 0xe0
 80a057e:	e9c4 513d 	strd	r5, r1, [r4, #244]	; 0xf4
    snakes[1] = Snake(-1, 25, 4*70, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0582:	204b      	movs	r0, #75	; 0x4b
 80a0584:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    snakes[0] = Snake(1, 30, -30, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0588:	f06f 021d 	mvn.w	r2, #29
    snakes[1] = Snake(-1, 25, 4*70, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a058c:	2196      	movs	r1, #150	; 0x96
    snakes[0] = Snake(1, 30, -30, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a058e:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
    snakes[1] = Snake(-1, 25, 4*70, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0592:	e9c4 7146 	strd	r7, r1, [r4, #280]	; 0x118
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0596:	e9c4 014d 	strd	r0, r1, [r4, #308]	; 0x134
    snakes[1] = Snake(-1, 25, 4*70, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a059a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a059e:	21e1      	movs	r1, #225	; 0xe1
    snakes[3] = Snake(-1, 15, 8*70, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05a0:	f04f 0a0f 	mov.w	sl, #15
    snakes[1] = Snake(-1, 25, 4*70, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05a4:	e9c4 023f 	strd	r0, r2, [r4, #252]	; 0xfc
    snakes[3] = Snake(-1, 15, 8*70, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05a8:	e9c4 124f 	strd	r1, r2, [r4, #316]	; 0x13c
    snakes[1] = Snake(-1, 25, 4*70, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05ac:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    snakes[3] = Snake(-1, 15, 8*70, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05b0:	f44f 720c 	mov.w	r2, #560	; 0x230
    snakes[1] = Snake(-1, 25, 4*70, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05b4:	f44f 758c 	mov.w	r5, #280	; 0x118
    snakes[3] = Snake(-1, 15, 8*70, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05b8:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
 80a05bc:	e9c4 a251 	strd	sl, r2, [r4, #324]	; 0x144
    snakes[1] = Snake(-1, 25, 4*70, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05c0:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05c4:	2614      	movs	r6, #20
 80a05c6:	25b9      	movs	r5, #185	; 0xb9
    snakes[3] = Snake(-1, 15, 8*70, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05c8:	222e      	movs	r2, #46	; 0x2e
    snakes[0].posTicks = 0;
 80a05ca:	f04f 0800 	mov.w	r8, #0
    pongPaddles[0] = PongPaddle(15, 0, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a05ce:	f04f 0900 	mov.w	r9, #0
    color_table_idx++;
 80a05d2:	2104      	movs	r1, #4
    snakes[3] = Snake(-1, 15, 8*70, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05d4:	e9c4 c256 	strd	ip, r2, [r4, #344]	; 0x158
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05d8:	e9c4 6549 	strd	r6, r5, [r4, #292]	; 0x124
    color_table_idx++;
 80a05dc:	4a3d      	ldr	r2, [pc, #244]	; (80a06d4 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x2a0>)
    pongPaddles[0] = PongPaddle(15, 0, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a05de:	4e3e      	ldr	r6, [pc, #248]	; (80a06d8 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x2a4>)
    snakes[0].ticksNeeded = 1;
 80a05e0:	e9c4 833b 	strd	r8, r3, [r4, #236]	; 0xec
    snakes[1].ticksNeeded = 1;
 80a05e4:	e9c4 8343 	strd	r8, r3, [r4, #268]	; 0x10c
    snakes[2].ticksNeeded = 1;
 80a05e8:	e9c4 834b 	strd	r8, r3, [r4, #300]	; 0x12c
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05ec:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    snakes[3] = Snake(-1, 15, 8*70, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05f0:	f8c4 7154 	str.w	r7, [r4, #340]	; 0x154
    color_table_idx++;
 80a05f4:	6011      	str	r1, [r2, #0]
    pongPaddles[0] = PongPaddle(15, 0, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a05f6:	a80a      	add	r0, sp, #40	; 0x28
    snakes[3].ticksNeeded = 1;
 80a05f8:	e9c4 8353 	strd	r8, r3, [r4, #332]	; 0x14c
    pongPaddles[0] = PongPaddle(15, 0, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a05fc:	464a      	mov	r2, r9
 80a05fe:	4651      	mov	r1, sl
 80a0600:	e9cd 7704 	strd	r7, r7, [sp, #16]
 80a0604:	e9cd a702 	strd	sl, r7, [sp, #8]
 80a0608:	9601      	str	r6, [sp, #4]
 80a060a:	4b34      	ldr	r3, [pc, #208]	; (80a06dc <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x2a8>)
 80a060c:	f8cd 9000 	str.w	r9, [sp]
 80a0610:	f003 f871 	bl	80a36f6 <_ZN10PongPaddleC1Eiffffjiii>
 80a0614:	ad0a      	add	r5, sp, #40	; 0x28
 80a0616:	f504 7cb0 	add.w	ip, r4, #352	; 0x160
 80a061a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a061c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80a0620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0622:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80a0626:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80a062a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    pongPaddles[1] = PongPaddle(15, NUM_BARS-1, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a062e:	4651      	mov	r1, sl
 80a0630:	9601      	str	r6, [sp, #4]
 80a0632:	4b2a      	ldr	r3, [pc, #168]	; (80a06dc <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x2a8>)
 80a0634:	4a2a      	ldr	r2, [pc, #168]	; (80a06e0 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x2ac>)
 80a0636:	f8cd 9000 	str.w	r9, [sp]
 80a063a:	a80a      	add	r0, sp, #40	; 0x28
 80a063c:	e9cd 7704 	strd	r7, r7, [sp, #16]
 80a0640:	e9cd a702 	strd	sl, r7, [sp, #8]
 80a0644:	f504 76c8 	add.w	r6, r4, #400	; 0x190
 80a0648:	f003 f855 	bl	80a36f6 <_ZN10PongPaddleC1Eiffffjiii>
 80a064c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80a0650:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80a0654:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a0656:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80a065a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a065c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80a0660:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    pongBall = PongBall(3, 0.0625, 0.80, 15, 100, 100, 100);
 80a0664:	e9cd 7702 	strd	r7, r7, [sp, #8]
 80a0668:	e9cd a700 	strd	sl, r7, [sp]
 80a066c:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 80a0670:	2103      	movs	r1, #3
 80a0672:	4b1c      	ldr	r3, [pc, #112]	; (80a06e4 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x2b0>)
 80a0674:	a80a      	add	r0, sp, #40	; 0x28
 80a0676:	f504 77e0 	add.w	r7, r4, #448	; 0x1c0
 80a067a:	ae0a      	add	r6, sp, #40	; 0x28
 80a067c:	f002 ffb8 	bl	80a35f0 <_ZN8PongBallC1Eiffjiii>
 80a0680:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a0682:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80a0684:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a0686:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80a0688:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80a068c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    last_beat_count = 0;
 80a0690:	f8c4 81f0 	str.w	r8, [r4, #496]	; 0x1f0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0694:	f003 f9a4 	bl	80a39e0 <HAL_Timer_Get_Milli_Seconds>
    bass_slide_ema = 0.0;
 80a0698:	f8c4 9294 	str.w	r9, [r4, #660]	; 0x294
    bass_slide_millis = millis();
 80a069c:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
    init_matrix();
 80a06a0:	4620      	mov	r0, r4
 80a06a2:	f7ff fe19 	bl	80a02d8 <_ZN10Bar_Matrix11init_matrixEv>
    clear_matrix();
 80a06a6:	4620      	mov	r0, r4
 80a06a8:	f7ff fe9e 	bl	80a03e8 <_ZN10Bar_Matrix12clear_matrixEv>
    bd = beat_detection;
 80a06ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80a06ae:	4b0e      	ldr	r3, [pc, #56]	; (80a06e8 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x2b4>)
    tcpBeats.init();
 80a06b0:	4658      	mov	r0, fp
    bd = beat_detection;
 80a06b2:	601a      	str	r2, [r3, #0]
    tcpBeats.init();
 80a06b4:	f003 f918 	bl	80a38e8 <_ZN8TCPBeats4initEv>
}
 80a06b8:	4620      	mov	r0, r4
 80a06ba:	b017      	add	sp, #92	; 0x5c
 80a06bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a06c0:	2000007c 	.word	0x2000007c
 80a06c4:	2000007e 	.word	0x2000007e
 80a06c8:	20000080 	.word	0x20000080
 80a06cc:	20000070 	.word	0x20000070
 80a06d0:	41700000 	.word	0x41700000
 80a06d4:	20000078 	.word	0x20000078
 80a06d8:	3f666666 	.word	0x3f666666
 80a06dc:	420c0000 	.word	0x420c0000
 80a06e0:	40e00000 	.word	0x40e00000
 80a06e4:	3f4ccccd 	.word	0x3f4ccccd
 80a06e8:	20000074 	.word	0x20000074

080a06ec <_ZN10Bar_Matrix8show_allEv>:

/* ================================================================== *
 * Function: show_all
 * Description: drives pixels in physical matrix to current values
 * ================================================================== */
void Bar_Matrix::show_all() {
 80a06ec:	2300      	movs	r3, #0
 80a06ee:	b570      	push	{r4, r5, r6, lr}
    for (char i = 0; i < disp_width; i++) {
 80a06f0:	4e07      	ldr	r6, [pc, #28]	; (80a0710 <_ZN10Bar_Matrix8show_allEv+0x24>)
        bars[i]->show();
 80a06f2:	4d08      	ldr	r5, [pc, #32]	; (80a0714 <_ZN10Bar_Matrix8show_allEv+0x28>)
    for (char i = 0; i < disp_width; i++) {
 80a06f4:	f9b6 2000 	ldrsh.w	r2, [r6]
 80a06f8:	1c5c      	adds	r4, r3, #1
 80a06fa:	b2db      	uxtb	r3, r3
 80a06fc:	4293      	cmp	r3, r2
 80a06fe:	da06      	bge.n	80a070e <_ZN10Bar_Matrix8show_allEv+0x22>
        bars[i]->show();
 80a0700:	682a      	ldr	r2, [r5, #0]
 80a0702:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80a0706:	f001 ff67 	bl	80a25d8 <_ZN17Adafruit_NeoPixel4showEv>
    for (char i = 0; i < disp_width; i++) {
 80a070a:	4623      	mov	r3, r4
 80a070c:	e7f2      	b.n	80a06f4 <_ZN10Bar_Matrix8show_allEv+0x8>
    }
}
 80a070e:	bd70      	pop	{r4, r5, r6, pc}
 80a0710:	2000007e 	.word	0x2000007e
 80a0714:	20000070 	.word	0x20000070

080a0718 <_ZN10Bar_Matrix8bar_testEv>:
/* ================================================================== *
 * Function: bar_test
 * Description: Turns on bars in order to test wiring
 * Parameters: None
 * ================================================================== */
void Bar_Matrix::bar_test() {
 80a0718:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    for (int i = 0; i < STRIP_LENGTH; i++)
 80a071c:	2400      	movs	r4, #0
    bars[int(millis()/1000)%8]->setPixelColor(i, 64, 64, 64);
 80a071e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80a0722:	2640      	movs	r6, #64	; 0x40
 80a0724:	f8df 802c 	ldr.w	r8, [pc, #44]	; 80a0754 <_ZN10Bar_Matrix8bar_testEv+0x3c>
 80a0728:	f8d8 5000 	ldr.w	r5, [r8]
 80a072c:	f003 f958 	bl	80a39e0 <HAL_Timer_Get_Milli_Seconds>
 80a0730:	fbb0 f0f7 	udiv	r0, r0, r7
 80a0734:	2340      	movs	r3, #64	; 0x40
 80a0736:	9600      	str	r6, [sp, #0]
 80a0738:	f000 0007 	and.w	r0, r0, #7
 80a073c:	b2a1      	uxth	r1, r4
 80a073e:	461a      	mov	r2, r3
 80a0740:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    for (int i = 0; i < STRIP_LENGTH; i++)
 80a0744:	3401      	adds	r4, #1
    bars[int(millis()/1000)%8]->setPixelColor(i, 64, 64, 64);
 80a0746:	f002 feb3 	bl	80a34b0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    for (int i = 0; i < STRIP_LENGTH; i++)
 80a074a:	2c46      	cmp	r4, #70	; 0x46
 80a074c:	d1ec      	bne.n	80a0728 <_ZN10Bar_Matrix8bar_testEv+0x10>
}
 80a074e:	b002      	add	sp, #8
 80a0750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0754:	20000070 	.word	0x20000070

080a0758 <_ZN10Bar_Matrix14bouncing_linesEv>:
/* ================================================================== *
 * Function: bouncing_lines
 * Description: Bounces a solid line of LEDs up and down in each matrix bar
 * Parameters: none
 * ================================================================== */
void Bar_Matrix::bouncing_lines() {
 80a0758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a075c:	4606      	mov	r6, r0
 80a075e:	4605      	mov	r5, r0
    for (int i = 0; i < disp_width; i++) {
 80a0760:	2700      	movs	r7, #0
        if (bouncing_line_directions[i] == 1) {
            if (bottom > 0) mix_pixel(i, bottom-1, 1, 0, 0, 0);
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, bouncing_line_colors[i][0], bouncing_line_colors[i][1], bouncing_line_colors[i][2]);//bd->r(), bd->g(), bd->b());
        } else {
            if (bottom > 0) mix_pixel(i, bottom-1, 1, bouncing_line_colors[i][0], bouncing_line_colors[i][1], bouncing_line_colors[i][2]);//bd->r(), bd->g(), bd->b());
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, 0, 0, 0);
 80a0762:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
void Bar_Matrix::bouncing_lines() {
 80a0766:	b087      	sub	sp, #28
 80a0768:	1f04      	subs	r4, r0, #4
    for (int i = 0; i < disp_width; i++) {
 80a076a:	4b6d      	ldr	r3, [pc, #436]	; (80a0920 <_ZN10Bar_Matrix14bouncing_linesEv+0x1c8>)
 80a076c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a0770:	42bb      	cmp	r3, r7
 80a0772:	f340 80d1 	ble.w	80a0918 <_ZN10Bar_Matrix14bouncing_linesEv+0x1c0>
        int bottom = bouncing_line_positions[i];
 80a0776:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0778:	f009 faee 	bl	80a9d58 <__aeabi_f2iz>
        if (bouncing_line_directions[i] == 1) {
 80a077c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80a077e:	fa5f f987 	uxtb.w	r9, r7
 80a0782:	2b01      	cmp	r3, #1
 80a0784:	fa1f f880 	uxth.w	r8, r0
 80a0788:	f040 8091 	bne.w	80a08ae <_ZN10Bar_Matrix14bouncing_linesEv+0x156>
            if (bottom > 0) mix_pixel(i, bottom-1, 1, 0, 0, 0);
 80a078c:	2800      	cmp	r0, #0
 80a078e:	dd0b      	ble.n	80a07a8 <_ZN10Bar_Matrix14bouncing_linesEv+0x50>
 80a0790:	2300      	movs	r3, #0
 80a0792:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80a0796:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a079a:	9300      	str	r3, [sp, #0]
 80a079c:	4649      	mov	r1, r9
 80a079e:	4653      	mov	r3, sl
 80a07a0:	4630      	mov	r0, r6
 80a07a2:	b292      	uxth	r2, r2
 80a07a4:	f7ff fdb2 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, bouncing_line_colors[i][0], bouncing_line_colors[i][1], bouncing_line_colors[i][2]);//bd->r(), bd->g(), bd->b());
 80a07a8:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 80a07ac:	6862      	ldr	r2, [r4, #4]
 80a07ae:	9302      	str	r3, [sp, #8]
 80a07b0:	f895 3084 	ldrb.w	r3, [r5, #132]	; 0x84
 80a07b4:	3201      	adds	r2, #1
 80a07b6:	9301      	str	r3, [sp, #4]
 80a07b8:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 80a07bc:	4442      	add	r2, r8
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, 0, 0, 0);
 80a07be:	b292      	uxth	r2, r2
 80a07c0:	4649      	mov	r1, r9
 80a07c2:	4630      	mov	r0, r6
 80a07c4:	9300      	str	r3, [sp, #0]
 80a07c6:	4653      	mov	r3, sl
 80a07c8:	f7ff fda0 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        }

        // Move the line
        bouncing_line_positions[i] += bouncing_line_directions[i] * bouncing_line_speeds[i];
 80a07cc:	f8d4 b064 	ldr.w	fp, [r4, #100]	; 0x64
 80a07d0:	4658      	mov	r0, fp
 80a07d2:	f009 f891 	bl	80a98f8 <__aeabi_i2f>
 80a07d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80a07d8:	f009 f8e2 	bl	80a99a0 <__aeabi_fmul>
 80a07dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80a07de:	f008 ffd7 	bl	80a9790 <__addsf3>
 80a07e2:	6260      	str	r0, [r4, #36]	; 0x24

        // Ensure we are moving in the proper direction
        if (bouncing_line_positions[i] < -.5*bouncing_line_lengths[i] && bouncing_line_directions[i] < 0) {
 80a07e4:	f008 fc2e 	bl	80a9044 <__aeabi_f2d>
 80a07e8:	4680      	mov	r8, r0
 80a07ea:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80a07ee:	4689      	mov	r9, r1
 80a07f0:	f008 fc16 	bl	80a9020 <__aeabi_i2d>
 80a07f4:	4602      	mov	r2, r0
 80a07f6:	460b      	mov	r3, r1
 80a07f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a07fc:	2200      	movs	r2, #0
 80a07fe:	4b49      	ldr	r3, [pc, #292]	; (80a0924 <_ZN10Bar_Matrix14bouncing_linesEv+0x1cc>)
 80a0800:	f008 fc78 	bl	80a90f4 <__aeabi_dmul>
 80a0804:	4602      	mov	r2, r0
 80a0806:	460b      	mov	r3, r1
 80a0808:	4640      	mov	r0, r8
 80a080a:	4649      	mov	r1, r9
 80a080c:	f008 fee4 	bl	80a95d8 <__aeabi_dcmplt>
 80a0810:	2800      	cmp	r0, #0
 80a0812:	d066      	beq.n	80a08e2 <_ZN10Bar_Matrix14bouncing_linesEv+0x18a>
 80a0814:	f1bb 0f00 	cmp.w	fp, #0
 80a0818:	da63      	bge.n	80a08e2 <_ZN10Bar_Matrix14bouncing_linesEv+0x18a>
            bouncing_line_directions[i] = 1;
 80a081a:	2301      	movs	r3, #1
            if (random(0, 10) > 5) {
 80a081c:	210a      	movs	r1, #10
 80a081e:	2000      	movs	r0, #0
            bouncing_line_directions[i] = 1;
 80a0820:	6623      	str	r3, [r4, #96]	; 0x60
            if (random(0, 10) > 5) {
 80a0822:	f003 ff7c 	bl	80a471e <_Z6randomii>
 80a0826:	2805      	cmp	r0, #5
 80a0828:	dd1a      	ble.n	80a0860 <_ZN10Bar_Matrix14bouncing_linesEv+0x108>
                int newlength = random(10, STRIP_LENGTH / 2);
 80a082a:	2123      	movs	r1, #35	; 0x23
 80a082c:	200a      	movs	r0, #10
 80a082e:	f003 ff76 	bl	80a471e <_Z6randomii>
                if (newlength > bouncing_line_lengths[i]) {
 80a0832:	6822      	ldr	r2, [r4, #0]
 80a0834:	0fc3      	lsrs	r3, r0, #31
 80a0836:	4282      	cmp	r2, r0
                    bouncing_line_positions[i] = (-1*newlength/2) - (newlength/2 - bouncing_line_lengths[i]/2);
 80a0838:	4403      	add	r3, r0
 80a083a:	bfb8      	it	lt
 80a083c:	eb02 72d2 	addlt.w	r2, r2, r2, lsr #31
                int newlength = random(10, STRIP_LENGTH / 2);
 80a0840:	4680      	mov	r8, r0
                    bouncing_line_positions[i] = (-1*newlength/2) - (newlength/2 - bouncing_line_lengths[i]/2);
 80a0842:	bfb8      	it	lt
 80a0844:	1052      	asrlt	r2, r2, #1
 80a0846:	ea4f 0063 	mov.w	r0, r3, asr #1
 80a084a:	f1c0 0000 	rsb	r0, r0, #0
 80a084e:	bfbc      	itt	lt
 80a0850:	ebc2 0363 	rsblt	r3, r2, r3, asr #1
 80a0854:	1ac0      	sublt	r0, r0, r3
                } else {
                    bouncing_line_positions[i] = -1 * newlength / 2;
 80a0856:	f009 f84f 	bl	80a98f8 <__aeabi_i2f>
                }

                bouncing_line_lengths[i] = newlength;
 80a085a:	f8c4 8000 	str.w	r8, [r4]
 80a085e:	6220      	str	r0, [r4, #32]
            }

            if (random(0, 10) > 7) {
 80a0860:	210a      	movs	r1, #10
 80a0862:	2000      	movs	r0, #0
 80a0864:	f003 ff5b 	bl	80a471e <_Z6randomii>
 80a0868:	2807      	cmp	r0, #7
 80a086a:	dd09      	ble.n	80a0880 <_ZN10Bar_Matrix14bouncing_linesEv+0x128>
                bouncing_line_speeds[i] = (float)random(5, 10) / 15.0;
 80a086c:	210a      	movs	r1, #10
 80a086e:	2005      	movs	r0, #5
 80a0870:	f003 ff55 	bl	80a471e <_Z6randomii>
 80a0874:	f009 f840 	bl	80a98f8 <__aeabi_i2f>
 80a0878:	492b      	ldr	r1, [pc, #172]	; (80a0928 <_ZN10Bar_Matrix14bouncing_linesEv+0x1d0>)
 80a087a:	f009 f945 	bl	80a9b08 <__aeabi_fdiv>
 80a087e:	6420      	str	r0, [r4, #64]	; 0x40
            bouncing_line_colors[i][1] = bd->g();
            bouncing_line_colors[i][2] = bd->b();
        } else if (bouncing_line_positions[i] > STRIP_LENGTH-.5*bouncing_line_lengths[i] && bouncing_line_directions[i] > 0) {
            bouncing_line_directions[i] = -1;

            bouncing_line_colors[i][0] = bd->r();
 80a0880:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80a0934 <_ZN10Bar_Matrix14bouncing_linesEv+0x1dc>
 80a0884:	f8d8 0000 	ldr.w	r0, [r8]
 80a0888:	f001 fc27 	bl	80a20da <_ZN14Beat_Detection1rEv>
 80a088c:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
            bouncing_line_colors[i][1] = bd->g();
 80a0890:	f8d8 0000 	ldr.w	r0, [r8]
 80a0894:	f001 fc23 	bl	80a20de <_ZN14Beat_Detection1gEv>
 80a0898:	f8c5 0084 	str.w	r0, [r5, #132]	; 0x84
            bouncing_line_colors[i][2] = bd->b();
 80a089c:	f8d8 0000 	ldr.w	r0, [r8]
 80a08a0:	f001 fc1f 	bl	80a20e2 <_ZN14Beat_Detection1bEv>
 80a08a4:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
    for (int i = 0; i < disp_width; i++) {
 80a08a8:	3701      	adds	r7, #1
 80a08aa:	350c      	adds	r5, #12
 80a08ac:	e75d      	b.n	80a076a <_ZN10Bar_Matrix14bouncing_linesEv+0x12>
            if (bottom > 0) mix_pixel(i, bottom-1, 1, bouncing_line_colors[i][0], bouncing_line_colors[i][1], bouncing_line_colors[i][2]);//bd->r(), bd->g(), bd->b());
 80a08ae:	2800      	cmp	r0, #0
 80a08b0:	dd10      	ble.n	80a08d4 <_ZN10Bar_Matrix14bouncing_linesEv+0x17c>
 80a08b2:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 80a08b6:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80a08ba:	9302      	str	r3, [sp, #8]
 80a08bc:	f895 3084 	ldrb.w	r3, [r5, #132]	; 0x84
 80a08c0:	4649      	mov	r1, r9
 80a08c2:	9301      	str	r3, [sp, #4]
 80a08c4:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 80a08c8:	4630      	mov	r0, r6
 80a08ca:	9300      	str	r3, [sp, #0]
 80a08cc:	b292      	uxth	r2, r2
 80a08ce:	4653      	mov	r3, sl
 80a08d0:	f7ff fd1c 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, 0, 0, 0);
 80a08d4:	2300      	movs	r3, #0
 80a08d6:	6862      	ldr	r2, [r4, #4]
 80a08d8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a08dc:	3201      	adds	r2, #1
 80a08de:	4442      	add	r2, r8
 80a08e0:	e76d      	b.n	80a07be <_ZN10Bar_Matrix14bouncing_linesEv+0x66>
        } else if (bouncing_line_positions[i] > STRIP_LENGTH-.5*bouncing_line_lengths[i] && bouncing_line_directions[i] > 0) {
 80a08e2:	2200      	movs	r2, #0
 80a08e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a08e8:	4b10      	ldr	r3, [pc, #64]	; (80a092c <_ZN10Bar_Matrix14bouncing_linesEv+0x1d4>)
 80a08ea:	f008 fc03 	bl	80a90f4 <__aeabi_dmul>
 80a08ee:	4602      	mov	r2, r0
 80a08f0:	460b      	mov	r3, r1
 80a08f2:	2000      	movs	r0, #0
 80a08f4:	490e      	ldr	r1, [pc, #56]	; (80a0930 <_ZN10Bar_Matrix14bouncing_linesEv+0x1d8>)
 80a08f6:	f008 fa45 	bl	80a8d84 <__aeabi_dsub>
 80a08fa:	4602      	mov	r2, r0
 80a08fc:	460b      	mov	r3, r1
 80a08fe:	4640      	mov	r0, r8
 80a0900:	4649      	mov	r1, r9
 80a0902:	f008 fe87 	bl	80a9614 <__aeabi_dcmpgt>
 80a0906:	2800      	cmp	r0, #0
 80a0908:	d0ce      	beq.n	80a08a8 <_ZN10Bar_Matrix14bouncing_linesEv+0x150>
 80a090a:	f1bb 0f00 	cmp.w	fp, #0
 80a090e:	ddcb      	ble.n	80a08a8 <_ZN10Bar_Matrix14bouncing_linesEv+0x150>
            bouncing_line_directions[i] = -1;
 80a0910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a0914:	6623      	str	r3, [r4, #96]	; 0x60
 80a0916:	e7b3      	b.n	80a0880 <_ZN10Bar_Matrix14bouncing_linesEv+0x128>
        }
    }
}
 80a0918:	b007      	add	sp, #28
 80a091a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a091e:	bf00      	nop
 80a0920:	2000007e 	.word	0x2000007e
 80a0924:	bfe00000 	.word	0xbfe00000
 80a0928:	41700000 	.word	0x41700000
 80a092c:	3fe00000 	.word	0x3fe00000
 80a0930:	40518000 	.word	0x40518000
 80a0934:	20000074 	.word	0x20000074

080a0938 <_ZN10Bar_Matrix10pixel_testEv>:
/* ================================================================== *
 * Function: bar_test
 * Description: Turns on lights from top to check length of srip
 * Parameters: None
 * ================================================================== */
void Bar_Matrix::pixel_test() {
 80a0938:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    clear_matrix();
 80a093c:	f7ff fd54 	bl	80a03e8 <_ZN10Bar_Matrix12clear_matrixEv>
 80a0940:	2400      	movs	r4, #0
    for (int i = 0; i < NUM_BARS; i++)
    bars[i]->setPixelColor(STRIP_LENGTH-int(millis()/1000)%10, 64, 64, 64);
 80a0942:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80a0946:	250a      	movs	r5, #10
 80a0948:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80a0980 <_ZN10Bar_Matrix10pixel_testEv+0x48>
 80a094c:	f8d8 3000 	ldr.w	r3, [r8]
 80a0950:	591e      	ldr	r6, [r3, r4]
 80a0952:	f003 f845 	bl	80a39e0 <HAL_Timer_Get_Milli_Seconds>
 80a0956:	fbb0 f0f7 	udiv	r0, r0, r7
 80a095a:	fbb0 f1f5 	udiv	r1, r0, r5
 80a095e:	2340      	movs	r3, #64	; 0x40
 80a0960:	fb05 0111 	mls	r1, r5, r1, r0
 80a0964:	f1c1 0146 	rsb	r1, r1, #70	; 0x46
 80a0968:	461a      	mov	r2, r3
 80a096a:	4630      	mov	r0, r6
 80a096c:	9300      	str	r3, [sp, #0]
 80a096e:	b289      	uxth	r1, r1
 80a0970:	3404      	adds	r4, #4
 80a0972:	f002 fd9d 	bl	80a34b0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    for (int i = 0; i < NUM_BARS; i++)
 80a0976:	2c20      	cmp	r4, #32
 80a0978:	d1e8      	bne.n	80a094c <_ZN10Bar_Matrix10pixel_testEv+0x14>
}
 80a097a:	b002      	add	sp, #8
 80a097c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0980:	20000070 	.word	0x20000070

080a0984 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80a0984:	b570      	push	{r4, r5, r6, lr}
 80a0986:	4606      	mov	r6, r0
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80a0988:	4608      	mov	r0, r1
 80a098a:	f008 fb49 	bl	80a9020 <__aeabi_i2d>
 80a098e:	4604      	mov	r4, r0
 80a0990:	460d      	mov	r5, r1
 80a0992:	4630      	mov	r0, r6
 80a0994:	f008 fb56 	bl	80a9044 <__aeabi_f2d>
 80a0998:	4622      	mov	r2, r4
 80a099a:	462b      	mov	r3, r5
    }
 80a099c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return pow(__type(__x), __type(__y));
 80a09a0:	f004 bec8 	b.w	80a5734 <pow>
 80a09a4:	0000      	movs	r0, r0
	...

080a09a8 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb>:
/* ================================================================== *
 * Function: fill_matrix
 * Description: Sets all pixel values to given color value
 * Parameters: [audio_bins]* bins - frequency bins read from chip
 * ================================================================== */
 void Bar_Matrix::visualizer_bars(audio_bins* bins, float in_factor, float out_factor, bool strobe) {
 80a09a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a09ac:	b08f      	sub	sp, #60	; 0x3c
 80a09ae:	920c      	str	r2, [sp, #48]	; 0x30
 80a09b0:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 80a09b4:	4605      	mov	r5, r0
   decay(out_factor);
 80a09b6:	4618      	mov	r0, r3
 void Bar_Matrix::visualizer_bars(audio_bins* bins, float in_factor, float out_factor, bool strobe) {
 80a09b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80a09ba:	460c      	mov	r4, r1
   decay(out_factor);
 80a09bc:	f008 fb42 	bl	80a9044 <__aeabi_f2d>
 80a09c0:	4602      	mov	r2, r0
 80a09c2:	460b      	mov	r3, r1
 80a09c4:	4628      	mov	r0, r5
 80a09c6:	f7ff fb77 	bl	80a00b8 <_ZN10Bar_Matrix5decayEd>
   float bass_level = 0;
   int red, green, blue;

   if (strobe)
 80a09ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a09cc:	2b00      	cmp	r3, #0
 80a09ce:	d045      	beq.n	80a0a5c <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xb4>
     bass_level = (log(((bins->left[LEFT_63]+bins->right[LEFT_63])/2.0f)/BINS_MAX)+0.7f) * 5 * 255.0f;
 80a09d0:	69e3      	ldr	r3, [r4, #28]
 80a09d2:	6820      	ldr	r0, [r4, #0]
 80a09d4:	4418      	add	r0, r3
 80a09d6:	f008 ff8f 	bl	80a98f8 <__aeabi_i2f>
 80a09da:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a09de:	f008 ffdf 	bl	80a99a0 <__aeabi_fmul>
 80a09e2:	49a1      	ldr	r1, [pc, #644]	; (80a0c68 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2c0>)
 80a09e4:	f009 f890 	bl	80a9b08 <__aeabi_fdiv>
  { return __builtin_logf(__x); }
 80a09e8:	f005 f8a2 	bl	80a5b30 <logf>
 80a09ec:	499f      	ldr	r1, [pc, #636]	; (80a0c6c <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2c4>)
 80a09ee:	f008 fecf 	bl	80a9790 <__addsf3>
 80a09f2:	499f      	ldr	r1, [pc, #636]	; (80a0c70 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2c8>)
 80a09f4:	f008 ffd4 	bl	80a99a0 <__aeabi_fmul>
 80a09f8:	499e      	ldr	r1, [pc, #632]	; (80a0c74 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2cc>)
 80a09fa:	f008 ffd1 	bl	80a99a0 <__aeabi_fmul>
 80a09fe:	900a      	str	r0, [sp, #40]	; 0x28
   float bass_level = 0;
 80a0a00:	2300      	movs	r3, #0
 80a0a02:	9308      	str	r3, [sp, #32]

   for (char i = 0; i < disp_width; i++) {
 80a0a04:	4b9c      	ldr	r3, [pc, #624]	; (80a0c78 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2d0>)
 80a0a06:	f89d b020 	ldrb.w	fp, [sp, #32]
 80a0a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a0a0e:	459b      	cmp	fp, r3
 80a0a10:	f280 8111 	bge.w	80a0c36 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x28e>
 80a0a14:	2300      	movs	r3, #0
 80a0a16:	9309      	str	r3, [sp, #36]	; 0x24
     for (char j = 0; j < disp_height; j++) {
 80a0a18:	4b98      	ldr	r3, [pc, #608]	; (80a0c7c <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2d4>)
 80a0a1a:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
 80a0a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a0a22:	459a      	cmp	sl, r3
 80a0a24:	f280 8103 	bge.w	80a0c2e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x286>
       // get bin
       //int level = (i < disp_width/2) ? bar_levels[i] : bar_levels[7-i];

       if (strobe)
 80a0a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a0a2a:	b16b      	cbz	r3, 80a0a48 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xa0>
         mix_pixel(i, j, 0.5f, bass_level, bass_level, bass_level);
 80a0a2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a0a2e:	f009 f9b9 	bl	80a9da4 <__aeabi_f2uiz>
 80a0a32:	b2c0      	uxtb	r0, r0
 80a0a34:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80a0a38:	9000      	str	r0, [sp, #0]
 80a0a3a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80a0a3e:	4652      	mov	r2, sl
 80a0a40:	4659      	mov	r1, fp
 80a0a42:	4628      	mov	r0, r5
 80a0a44:	f7ff fc62 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>

       // Set bar levels
       int level = 0;
       switch(i) {
 80a0a48:	f1bb 0f07 	cmp.w	fp, #7
 80a0a4c:	f200 809b 	bhi.w	80a0b86 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x1de>
 80a0a50:	e8df f00b 	tbb	[pc, fp]
 80a0a54:	8f8d8b07 	.word	0x8f8d8b07
 80a0a58:	97959391 	.word	0x97959391
   float bass_level = 0;
 80a0a5c:	2300      	movs	r3, #0
 80a0a5e:	930a      	str	r3, [sp, #40]	; 0x28
 80a0a60:	e7ce      	b.n	80a0a00 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x58>
         case 0:
           level = bins->left[LEFT_160];
 80a0a62:	6860      	ldr	r0, [r4, #4]
         case 7:
           level = bins->right[RIGHT_160];
           break;
       }

       level *= FREQ_GAIN;
 80a0a64:	f008 ff48 	bl	80a98f8 <__aeabi_i2f>
 80a0a68:	f009 f976 	bl	80a9d58 <__aeabi_f2iz>
 80a0a6c:	900d      	str	r0, [sp, #52]	; 0x34
       // set bar
       if (j < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH)) {
 80a0a6e:	f008 ff43 	bl	80a98f8 <__aeabi_i2f>
 80a0a72:	497d      	ldr	r1, [pc, #500]	; (80a0c68 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2c0>)
 80a0a74:	f009 f848 	bl	80a9b08 <__aeabi_fdiv>
 80a0a78:	2102      	movs	r1, #2
 80a0a7a:	f7ff ff83 	bl	80a0984 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a0a7e:	4680      	mov	r8, r0
 80a0a80:	4650      	mov	r0, sl
 80a0a82:	4689      	mov	r9, r1
 80a0a84:	f008 facc 	bl	80a9020 <__aeabi_i2d>
 80a0a88:	2200      	movs	r2, #0
 80a0a8a:	4606      	mov	r6, r0
 80a0a8c:	460f      	mov	r7, r1
 80a0a8e:	4b7c      	ldr	r3, [pc, #496]	; (80a0c80 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2d8>)
 80a0a90:	4640      	mov	r0, r8
 80a0a92:	4649      	mov	r1, r9
 80a0a94:	f008 fb2e 	bl	80a90f4 <__aeabi_dmul>
 80a0a98:	4602      	mov	r2, r0
 80a0a9a:	460b      	mov	r3, r1
 80a0a9c:	4630      	mov	r0, r6
 80a0a9e:	4639      	mov	r1, r7
 80a0aa0:	f008 fd9a 	bl	80a95d8 <__aeabi_dcmplt>
 80a0aa4:	2800      	cmp	r0, #0
 80a0aa6:	d05c      	beq.n	80a0b62 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x1ba>
       //if (j < (float)(level)/(float)(BINS_MAX) * (STRIP_LENGTH))

         float val = level*2*PI/BINS_MAX;
 80a0aa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a0aaa:	0058      	lsls	r0, r3, #1
 80a0aac:	f008 fab8 	bl	80a9020 <__aeabi_i2d>
 80a0ab0:	a363      	add	r3, pc, #396	; (adr r3, 80a0c40 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x298>)
 80a0ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ab6:	f008 fb1d 	bl	80a90f4 <__aeabi_dmul>
 80a0aba:	a363      	add	r3, pc, #396	; (adr r3, 80a0c48 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2a0>)
 80a0abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ac0:	f008 fc42 	bl	80a9348 <__aeabi_ddiv>
 80a0ac4:	f008 fe0e 	bl	80a96e4 <__aeabi_d2f>

         // Select colors
         switch(bd->num_beats() % 3) {
 80a0ac8:	4b6e      	ldr	r3, [pc, #440]	; (80a0c84 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2dc>)
         float val = level*2*PI/BINS_MAX;
 80a0aca:	4606      	mov	r6, r0
         switch(bd->num_beats() % 3) {
 80a0acc:	6818      	ldr	r0, [r3, #0]
 80a0ace:	f001 fb02 	bl	80a20d6 <_ZN14Beat_Detection9num_beatsEv>
 80a0ad2:	2303      	movs	r3, #3
 80a0ad4:	fb90 f3f3 	sdiv	r3, r0, r3
 80a0ad8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a0adc:	1ac0      	subs	r0, r0, r3
 80a0ade:	2801      	cmp	r0, #1
 80a0ae0:	d053      	beq.n	80a0b8a <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x1e2>
 80a0ae2:	2802      	cmp	r0, #2
 80a0ae4:	d074      	beq.n	80a0bd0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x228>
 80a0ae6:	bb68      	cbnz	r0, 80a0b44 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x19c>
  { return __builtin_cosf(__x); }
 80a0ae8:	4630      	mov	r0, r6
 80a0aea:	f004 fde7 	bl	80a56bc <cosf>
           case 0:
             red = cos(val)*255;
 80a0aee:	4961      	ldr	r1, [pc, #388]	; (80a0c74 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2cc>)
 80a0af0:	f008 ff56 	bl	80a99a0 <__aeabi_fmul>
 80a0af4:	f009 f930 	bl	80a9d58 <__aeabi_f2iz>
 80a0af8:	9005      	str	r0, [sp, #20]
             green = cos(val - 2*PI/3)*255;
 80a0afa:	4630      	mov	r0, r6
 80a0afc:	f008 faa2 	bl	80a9044 <__aeabi_f2d>
 80a0b00:	a353      	add	r3, pc, #332	; (adr r3, 80a0c50 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2a8>)
 80a0b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0b06:	4606      	mov	r6, r0
 80a0b08:	460f      	mov	r7, r1
 80a0b0a:	f008 f93b 	bl	80a8d84 <__aeabi_dsub>
 80a0b0e:	f004 fd7f 	bl	80a5610 <cos>
 80a0b12:	a351      	add	r3, pc, #324	; (adr r3, 80a0c58 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2b0>)
 80a0b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0b18:	f008 faec 	bl	80a90f4 <__aeabi_dmul>
 80a0b1c:	f008 fd9a 	bl	80a9654 <__aeabi_d2iz>
             blue = cos(val - 4*PI/3)*255;
 80a0b20:	a34f      	add	r3, pc, #316	; (adr r3, 80a0c60 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2b8>)
 80a0b22:	e9d3 2300 	ldrd	r2, r3, [r3]
             green = cos(val - 2*PI/3)*255;
 80a0b26:	9006      	str	r0, [sp, #24]
             blue = cos(val - 4*PI/3)*255;
 80a0b28:	4639      	mov	r1, r7
 80a0b2a:	4630      	mov	r0, r6
             break;
           case 1:
             red = cos(val - 4*PI/3)*255;
             green = cos(val)*255;
             blue = cos(val - 2*PI/3)*255;
 80a0b2c:	f008 f92a 	bl	80a8d84 <__aeabi_dsub>
 80a0b30:	f004 fd6e 	bl	80a5610 <cos>
 80a0b34:	a348      	add	r3, pc, #288	; (adr r3, 80a0c58 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2b0>)
 80a0b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0b3a:	f008 fadb 	bl	80a90f4 <__aeabi_dmul>
 80a0b3e:	f008 fd89 	bl	80a9654 <__aeabi_d2iz>
 80a0b42:	9007      	str	r0, [sp, #28]
             green = cos(val - 4*PI/3)*255;
             blue = cos(val)*255;
             break;
         }

         mix_pixel(i, j, in_factor, red, green, blue);
 80a0b44:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80a0b48:	4652      	mov	r2, sl
 80a0b4a:	9302      	str	r3, [sp, #8]
 80a0b4c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80a0b50:	4659      	mov	r1, fp
 80a0b52:	9301      	str	r3, [sp, #4]
 80a0b54:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80a0b58:	4628      	mov	r0, r5
 80a0b5a:	9300      	str	r3, [sp, #0]
 80a0b5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a0b5e:	f7ff fbd5 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
     for (char j = 0; j < disp_height; j++) {
 80a0b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a0b64:	3301      	adds	r3, #1
 80a0b66:	9309      	str	r3, [sp, #36]	; 0x24
 80a0b68:	e756      	b.n	80a0a18 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x70>
           level = bins->left[LEFT_1000];
 80a0b6a:	68e0      	ldr	r0, [r4, #12]
           break;
 80a0b6c:	e77a      	b.n	80a0a64 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xbc>
           level = bins->left[LEFT_6250];
 80a0b6e:	6960      	ldr	r0, [r4, #20]
           break;
 80a0b70:	e778      	b.n	80a0a64 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xbc>
           level = bins->left[LEFT_16000];
 80a0b72:	69a0      	ldr	r0, [r4, #24]
           break;
 80a0b74:	e776      	b.n	80a0a64 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xbc>
           level = bins->right[RIGHT_16000];
 80a0b76:	6b60      	ldr	r0, [r4, #52]	; 0x34
           break;
 80a0b78:	e774      	b.n	80a0a64 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xbc>
           level = bins->right[RIGHT_6250];
 80a0b7a:	6b20      	ldr	r0, [r4, #48]	; 0x30
           break;
 80a0b7c:	e772      	b.n	80a0a64 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xbc>
           level = bins->right[RIGHT_1000];
 80a0b7e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
           break;
 80a0b80:	e770      	b.n	80a0a64 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xbc>
           level = bins->right[RIGHT_160];
 80a0b82:	6a20      	ldr	r0, [r4, #32]
           break;
 80a0b84:	e76e      	b.n	80a0a64 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xbc>
 80a0b86:	2000      	movs	r0, #0
 80a0b88:	e76c      	b.n	80a0a64 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xbc>
             red = cos(val - 4*PI/3)*255;
 80a0b8a:	4630      	mov	r0, r6
 80a0b8c:	f008 fa5a 	bl	80a9044 <__aeabi_f2d>
 80a0b90:	a333      	add	r3, pc, #204	; (adr r3, 80a0c60 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2b8>)
 80a0b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0b96:	4680      	mov	r8, r0
 80a0b98:	4689      	mov	r9, r1
 80a0b9a:	f008 f8f3 	bl	80a8d84 <__aeabi_dsub>
 80a0b9e:	f004 fd37 	bl	80a5610 <cos>
 80a0ba2:	a32d      	add	r3, pc, #180	; (adr r3, 80a0c58 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2b0>)
 80a0ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ba8:	f008 faa4 	bl	80a90f4 <__aeabi_dmul>
 80a0bac:	f008 fd52 	bl	80a9654 <__aeabi_d2iz>
 80a0bb0:	9005      	str	r0, [sp, #20]
 80a0bb2:	4630      	mov	r0, r6
 80a0bb4:	f004 fd82 	bl	80a56bc <cosf>
             green = cos(val)*255;
 80a0bb8:	492e      	ldr	r1, [pc, #184]	; (80a0c74 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2cc>)
 80a0bba:	f008 fef1 	bl	80a99a0 <__aeabi_fmul>
 80a0bbe:	f009 f8cb 	bl	80a9d58 <__aeabi_f2iz>
             blue = cos(val - 2*PI/3)*255;
 80a0bc2:	a323      	add	r3, pc, #140	; (adr r3, 80a0c50 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2a8>)
 80a0bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
             green = cos(val)*255;
 80a0bc8:	9006      	str	r0, [sp, #24]
             blue = cos(val - 2*PI/3)*255;
 80a0bca:	4649      	mov	r1, r9
 80a0bcc:	4640      	mov	r0, r8
 80a0bce:	e7ad      	b.n	80a0b2c <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x184>
             red = cos(val - 2*PI/3)*255;
 80a0bd0:	4630      	mov	r0, r6
 80a0bd2:	f008 fa37 	bl	80a9044 <__aeabi_f2d>
 80a0bd6:	a31e      	add	r3, pc, #120	; (adr r3, 80a0c50 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2a8>)
 80a0bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0bdc:	4680      	mov	r8, r0
 80a0bde:	4689      	mov	r9, r1
 80a0be0:	f008 f8d0 	bl	80a8d84 <__aeabi_dsub>
 80a0be4:	f004 fd14 	bl	80a5610 <cos>
 80a0be8:	a31b      	add	r3, pc, #108	; (adr r3, 80a0c58 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2b0>)
 80a0bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0bee:	f008 fa81 	bl	80a90f4 <__aeabi_dmul>
 80a0bf2:	f008 fd2f 	bl	80a9654 <__aeabi_d2iz>
             green = cos(val - 4*PI/3)*255;
 80a0bf6:	a31a      	add	r3, pc, #104	; (adr r3, 80a0c60 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2b8>)
 80a0bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
             red = cos(val - 2*PI/3)*255;
 80a0bfc:	9005      	str	r0, [sp, #20]
             green = cos(val - 4*PI/3)*255;
 80a0bfe:	4649      	mov	r1, r9
 80a0c00:	4640      	mov	r0, r8
 80a0c02:	f008 f8bf 	bl	80a8d84 <__aeabi_dsub>
 80a0c06:	f004 fd03 	bl	80a5610 <cos>
 80a0c0a:	a313      	add	r3, pc, #76	; (adr r3, 80a0c58 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2b0>)
 80a0c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0c10:	f008 fa70 	bl	80a90f4 <__aeabi_dmul>
 80a0c14:	f008 fd1e 	bl	80a9654 <__aeabi_d2iz>
 80a0c18:	9006      	str	r0, [sp, #24]
 80a0c1a:	4630      	mov	r0, r6
 80a0c1c:	f004 fd4e 	bl	80a56bc <cosf>
             blue = cos(val)*255;
 80a0c20:	4914      	ldr	r1, [pc, #80]	; (80a0c74 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2cc>)
 80a0c22:	f008 febd 	bl	80a99a0 <__aeabi_fmul>
 80a0c26:	f009 f897 	bl	80a9d58 <__aeabi_f2iz>
 80a0c2a:	9007      	str	r0, [sp, #28]
             break;
 80a0c2c:	e78a      	b.n	80a0b44 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x19c>
   for (char i = 0; i < disp_width; i++) {
 80a0c2e:	9b08      	ldr	r3, [sp, #32]
 80a0c30:	3301      	adds	r3, #1
 80a0c32:	9308      	str	r3, [sp, #32]
 80a0c34:	e6e6      	b.n	80a0a04 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x5c>
                                    bins->left[1]/(64-(bins->left[2]/128)),
                                    bins->left[2]/(64-(bins->left[0]/128)));*/
       }
     }
   }
 }
 80a0c36:	b00f      	add	sp, #60	; 0x3c
 80a0c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0c3c:	f3af 8000 	nop.w
 80a0c40:	fc8b007a 	.word	0xfc8b007a
 80a0c44:	400921fa 	.word	0x400921fa
 80a0c48:	00000000 	.word	0x00000000
 80a0c4c:	40affe00 	.word	0x40affe00
 80a0c50:	fdb20051 	.word	0xfdb20051
 80a0c54:	4000c151 	.word	0x4000c151
 80a0c58:	00000000 	.word	0x00000000
 80a0c5c:	406fe000 	.word	0x406fe000
 80a0c60:	fdb20051 	.word	0xfdb20051
 80a0c64:	4010c151 	.word	0x4010c151
 80a0c68:	457ff000 	.word	0x457ff000
 80a0c6c:	3f333333 	.word	0x3f333333
 80a0c70:	40a00000 	.word	0x40a00000
 80a0c74:	437f0000 	.word	0x437f0000
 80a0c78:	2000007e 	.word	0x2000007e
 80a0c7c:	2000007c 	.word	0x2000007c
 80a0c80:	40518000 	.word	0x40518000
 80a0c84:	20000074 	.word	0x20000074

080a0c88 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff>:
 * Function: visualizer_bars_middle
 * Description: Bars start at the middle and go to the edges.
 *              One channel fills up, the other fills down.
 * Parameters: none.
 * ================================================================== */
void Bar_Matrix::visualizer_bars_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0c8c:	4606      	mov	r6, r0
 80a0c8e:	b089      	sub	sp, #36	; 0x24
    decay(out_factor);
 80a0c90:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_bars_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0c92:	4690      	mov	r8, r2
 80a0c94:	460c      	mov	r4, r1
    decay(out_factor);
 80a0c96:	f008 f9d5 	bl	80a9044 <__aeabi_f2d>

    if (bd->beat_on_bin(0) || bd->beat_on_bin(1)) {
 80a0c9a:	4d66      	ldr	r5, [pc, #408]	; (80a0e34 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1ac>)
    decay(out_factor);
 80a0c9c:	4602      	mov	r2, r0
 80a0c9e:	460b      	mov	r3, r1
 80a0ca0:	4630      	mov	r0, r6
 80a0ca2:	f7ff fa09 	bl	80a00b8 <_ZN10Bar_Matrix5decayEd>
    if (bd->beat_on_bin(0) || bd->beat_on_bin(1)) {
 80a0ca6:	2100      	movs	r1, #0
 80a0ca8:	6828      	ldr	r0, [r5, #0]
 80a0caa:	f001 fa10 	bl	80a20ce <_ZN14Beat_Detection11beat_on_binEi>
 80a0cae:	b308      	cbz	r0, 80a0cf4 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x6c>
        //fill_bar(i, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
        color_table_idx = (color_table_idx+1) % 51;
 80a0cb0:	2033      	movs	r0, #51	; 0x33
 80a0cb2:	4961      	ldr	r1, [pc, #388]	; (80a0e38 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1b0>)
 80a0cb4:	680b      	ldr	r3, [r1, #0]
 80a0cb6:	3301      	adds	r3, #1
 80a0cb8:	fb93 f2f0 	sdiv	r2, r3, r0
 80a0cbc:	fb00 3312 	mls	r3, r0, r2, r3
 80a0cc0:	600b      	str	r3, [r1, #0]
void Bar_Matrix::visualizer_bars_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0cc2:	2300      	movs	r3, #0
                case 6: level = bins->left[LEFT_1000];  break;
                case 7: level = bins->left[LEFT_16000]; break;
            }
            level *= FREQ_GAIN;
            // set bar
            float p = (float)(level)/(float)(BINS_MAX);
 80a0cc4:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80a0e44 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1bc>
            if (j < p*p * (STRIP_LENGTH/2)) {
 80a0cc8:	f8df a17c 	ldr.w	sl, [pc, #380]	; 80a0e48 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1c0>
void Bar_Matrix::visualizer_bars_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0ccc:	9305      	str	r3, [sp, #20]
    for (char i = 0; i < disp_width; i++) {
 80a0cce:	4b5b      	ldr	r3, [pc, #364]	; (80a0e3c <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1b4>)
 80a0cd0:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80a0cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a0cd8:	429d      	cmp	r5, r3
 80a0cda:	f280 80a7 	bge.w	80a0e2c <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1a4>
 80a0cde:	2700      	movs	r7, #0
                //j < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
                float val = level*2*PI/BINS_MAX;
                //mix_pixel(i, STRIP_LENGTH/2 - j, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                //mix_pixel(i, STRIP_LENGTH/2 - j, in_factor, bd->r(), bd->g(), bd->b());
                mix_pixel(i, STRIP_LENGTH/2 - j, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0ce0:	f8df b154 	ldr.w	fp, [pc, #340]	; 80a0e38 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1b0>
            switch(i) {
 80a0ce4:	2d07      	cmp	r5, #7
 80a0ce6:	d858      	bhi.n	80a0d9a <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x112>
 80a0ce8:	e8df f005 	tbb	[pc, r5]
 80a0cec:	4f4d4b0b 	.word	0x4f4d4b0b
 80a0cf0:	554f5351 	.word	0x554f5351
    if (bd->beat_on_bin(0) || bd->beat_on_bin(1)) {
 80a0cf4:	2101      	movs	r1, #1
 80a0cf6:	6828      	ldr	r0, [r5, #0]
 80a0cf8:	f001 f9e9 	bl	80a20ce <_ZN14Beat_Detection11beat_on_binEi>
 80a0cfc:	2800      	cmp	r0, #0
 80a0cfe:	d1d7      	bne.n	80a0cb0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x28>
 80a0d00:	e7df      	b.n	80a0cc2 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x3a>
                case 0: level = bins->left[LEFT_63];    break;
 80a0d02:	6820      	ldr	r0, [r4, #0]
            level *= FREQ_GAIN;
 80a0d04:	f008 fdf8 	bl	80a98f8 <__aeabi_i2f>
 80a0d08:	f009 f826 	bl	80a9d58 <__aeabi_f2iz>
            float p = (float)(level)/(float)(BINS_MAX);
 80a0d0c:	f008 fdf4 	bl	80a98f8 <__aeabi_i2f>
 80a0d10:	4649      	mov	r1, r9
 80a0d12:	f008 fef9 	bl	80a9b08 <__aeabi_fdiv>
 80a0d16:	9007      	str	r0, [sp, #28]
            if (j < p*p * (STRIP_LENGTH/2)) {
 80a0d18:	4638      	mov	r0, r7
 80a0d1a:	f008 fded 	bl	80a98f8 <__aeabi_i2f>
 80a0d1e:	9907      	ldr	r1, [sp, #28]
 80a0d20:	9006      	str	r0, [sp, #24]
 80a0d22:	4608      	mov	r0, r1
 80a0d24:	f008 fe3c 	bl	80a99a0 <__aeabi_fmul>
 80a0d28:	4651      	mov	r1, sl
 80a0d2a:	f008 fe39 	bl	80a99a0 <__aeabi_fmul>
 80a0d2e:	9b06      	ldr	r3, [sp, #24]
 80a0d30:	4601      	mov	r1, r0
 80a0d32:	4618      	mov	r0, r3
 80a0d34:	f008 ffd2 	bl	80a9cdc <__aeabi_fcmplt>
 80a0d38:	b1a8      	cbz	r0, 80a0d66 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0xde>
                mix_pixel(i, STRIP_LENGTH/2 - j, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0d3a:	230c      	movs	r3, #12
 80a0d3c:	f8db 0000 	ldr.w	r0, [fp]
 80a0d40:	493f      	ldr	r1, [pc, #252]	; (80a0e40 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1b8>)
 80a0d42:	4343      	muls	r3, r0
 80a0d44:	18c8      	adds	r0, r1, r3
 80a0d46:	f890 c008 	ldrb.w	ip, [r0, #8]
 80a0d4a:	5ccb      	ldrb	r3, [r1, r3]
 80a0d4c:	7900      	ldrb	r0, [r0, #4]
 80a0d4e:	f1c7 0223 	rsb	r2, r7, #35	; 0x23
 80a0d52:	9001      	str	r0, [sp, #4]
 80a0d54:	9300      	str	r3, [sp, #0]
 80a0d56:	4629      	mov	r1, r5
 80a0d58:	4643      	mov	r3, r8
 80a0d5a:	4630      	mov	r0, r6
 80a0d5c:	f8cd c008 	str.w	ip, [sp, #8]
 80a0d60:	b292      	uxth	r2, r2
 80a0d62:	f7ff fad3 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = 0; j < STRIP_LENGTH/2; j++) {
 80a0d66:	3701      	adds	r7, #1
 80a0d68:	2f23      	cmp	r7, #35	; 0x23
 80a0d6a:	d1bb      	bne.n	80a0ce4 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x5c>
 80a0d6c:	2700      	movs	r7, #0
            if (j-STRIP_LENGTH/2 < p*p * (STRIP_LENGTH/2)) {
                //j-STRIP_LENGTH/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
                float val = level*2*PI/BINS_MAX;
                //mix_pixel(i, j, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                //mix_pixel(i, j, in_factor, bd->r(), bd->g(), bd->b());//reds[i], greens[i], blues[i]);
                mix_pixel(i, j, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0d6e:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 80a0e38 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1b0>
            switch(i) {
 80a0d72:	2d07      	cmp	r5, #7
 80a0d74:	d858      	bhi.n	80a0e28 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1a0>
 80a0d76:	e8df f005 	tbb	[pc, r5]
 80a0d7a:	4b12      	.short	0x4b12
 80a0d7c:	53514f4d 	.word	0x53514f4d
 80a0d80:	554f      	.short	0x554f
                case 1: level = bins->left[LEFT_160];   break;
 80a0d82:	6860      	ldr	r0, [r4, #4]
 80a0d84:	e7be      	b.n	80a0d04 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
                case 2: level = bins->left[LEFT_400];   break;
 80a0d86:	68a0      	ldr	r0, [r4, #8]
 80a0d88:	e7bc      	b.n	80a0d04 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
                case 3: level = bins->left[LEFT_1000];  break;
 80a0d8a:	68e0      	ldr	r0, [r4, #12]
 80a0d8c:	e7ba      	b.n	80a0d04 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
                case 4: level = bins->left[LEFT_2500];  break;
 80a0d8e:	6920      	ldr	r0, [r4, #16]
 80a0d90:	e7b8      	b.n	80a0d04 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
                case 5: level = bins->left[LEFT_6250];  break;
 80a0d92:	6960      	ldr	r0, [r4, #20]
 80a0d94:	e7b6      	b.n	80a0d04 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
                case 7: level = bins->left[LEFT_16000]; break;
 80a0d96:	69a0      	ldr	r0, [r4, #24]
 80a0d98:	e7b4      	b.n	80a0d04 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
 80a0d9a:	2000      	movs	r0, #0
 80a0d9c:	e7b2      	b.n	80a0d04 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
                case 0: level = bins->right[RIGHT_63];    break;
 80a0d9e:	69e0      	ldr	r0, [r4, #28]
            level *= FREQ_GAIN;
 80a0da0:	f008 fdaa 	bl	80a98f8 <__aeabi_i2f>
 80a0da4:	f008 ffd8 	bl	80a9d58 <__aeabi_f2iz>
            float p = (float)(level)/(float)(BINS_MAX);
 80a0da8:	f008 fda6 	bl	80a98f8 <__aeabi_i2f>
 80a0dac:	4649      	mov	r1, r9
 80a0dae:	f008 feab 	bl	80a9b08 <__aeabi_fdiv>
 80a0db2:	9007      	str	r0, [sp, #28]
            if (j-STRIP_LENGTH/2 < p*p * (STRIP_LENGTH/2)) {
 80a0db4:	4638      	mov	r0, r7
 80a0db6:	f008 fd9f 	bl	80a98f8 <__aeabi_i2f>
 80a0dba:	9907      	ldr	r1, [sp, #28]
 80a0dbc:	9006      	str	r0, [sp, #24]
 80a0dbe:	4608      	mov	r0, r1
 80a0dc0:	f008 fdee 	bl	80a99a0 <__aeabi_fmul>
 80a0dc4:	4651      	mov	r1, sl
 80a0dc6:	f008 fdeb 	bl	80a99a0 <__aeabi_fmul>
 80a0dca:	9b06      	ldr	r3, [sp, #24]
 80a0dcc:	4601      	mov	r1, r0
 80a0dce:	4618      	mov	r0, r3
 80a0dd0:	f008 ff84 	bl	80a9cdc <__aeabi_fcmplt>
 80a0dd4:	b1a8      	cbz	r0, 80a0e02 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x17a>
                mix_pixel(i, j, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0dd6:	230c      	movs	r3, #12
 80a0dd8:	f8db 0000 	ldr.w	r0, [fp]
 80a0ddc:	4918      	ldr	r1, [pc, #96]	; (80a0e40 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1b8>)
 80a0dde:	4343      	muls	r3, r0
 80a0de0:	18c8      	adds	r0, r1, r3
 80a0de2:	f890 c008 	ldrb.w	ip, [r0, #8]
 80a0de6:	5ccb      	ldrb	r3, [r1, r3]
 80a0de8:	7900      	ldrb	r0, [r0, #4]
 80a0dea:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80a0dee:	9001      	str	r0, [sp, #4]
 80a0df0:	9300      	str	r3, [sp, #0]
 80a0df2:	4629      	mov	r1, r5
 80a0df4:	4643      	mov	r3, r8
 80a0df6:	4630      	mov	r0, r6
 80a0df8:	f8cd c008 	str.w	ip, [sp, #8]
 80a0dfc:	b292      	uxth	r2, r2
 80a0dfe:	f7ff fa85 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = STRIP_LENGTH/2; j < STRIP_LENGTH; j++) {
 80a0e02:	3701      	adds	r7, #1
 80a0e04:	2f23      	cmp	r7, #35	; 0x23
 80a0e06:	d1b4      	bne.n	80a0d72 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0xea>
    for (char i = 0; i < disp_width; i++) {
 80a0e08:	9b05      	ldr	r3, [sp, #20]
 80a0e0a:	3301      	adds	r3, #1
 80a0e0c:	9305      	str	r3, [sp, #20]
 80a0e0e:	e75e      	b.n	80a0cce <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x46>
                case 1: level = bins->right[RIGHT_160];   break;
 80a0e10:	6a20      	ldr	r0, [r4, #32]
 80a0e12:	e7c5      	b.n	80a0da0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
                case 2: level = bins->right[RIGHT_400];   break;
 80a0e14:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0e16:	e7c3      	b.n	80a0da0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
                case 3: level = bins->right[RIGHT_1000];  break;
 80a0e18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0e1a:	e7c1      	b.n	80a0da0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
                case 4: level = bins->right[RIGHT_2500];  break;
 80a0e1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a0e1e:	e7bf      	b.n	80a0da0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
                case 5: level = bins->right[RIGHT_6250];  break;
 80a0e20:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80a0e22:	e7bd      	b.n	80a0da0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
                case 7: level = bins->right[RIGHT_16000]; break;
 80a0e24:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80a0e26:	e7bb      	b.n	80a0da0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
 80a0e28:	2000      	movs	r0, #0
 80a0e2a:	e7b9      	b.n	80a0da0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
            }
        }
    }
}
 80a0e2c:	b009      	add	sp, #36	; 0x24
 80a0e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0e32:	bf00      	nop
 80a0e34:	20000074 	.word	0x20000074
 80a0e38:	20000078 	.word	0x20000078
 80a0e3c:	2000007e 	.word	0x2000007e
 80a0e40:	080a9f6c 	.word	0x080a9f6c
 80a0e44:	457ff000 	.word	0x457ff000
 80a0e48:	420c0000 	.word	0x420c0000

080a0e4c <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff>:
/* ================================================================== *
 * Function: visualizer_bass_middle
 * Description: All bars react to bass beats. Bulge in middle of display
 * Parameters: none.
 * ================================================================== */
void Bar_Matrix::visualizer_bass_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0e50:	4604      	mov	r4, r0
 80a0e52:	b089      	sub	sp, #36	; 0x24
    decay(out_factor);
 80a0e54:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_bass_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0e56:	4690      	mov	r8, r2
 80a0e58:	460d      	mov	r5, r1
    decay(out_factor);
 80a0e5a:	f008 f8f3 	bl	80a9044 <__aeabi_f2d>

    if (bd->num_beats() != last_beat_count) {
 80a0e5e:	4e48      	ldr	r6, [pc, #288]	; (80a0f80 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x134>)
    decay(out_factor);
 80a0e60:	4602      	mov	r2, r0
 80a0e62:	460b      	mov	r3, r1
 80a0e64:	4620      	mov	r0, r4
 80a0e66:	f7ff f927 	bl	80a00b8 <_ZN10Bar_Matrix5decayEd>
    if (bd->num_beats() != last_beat_count) {
 80a0e6a:	6830      	ldr	r0, [r6, #0]
 80a0e6c:	f001 f933 	bl	80a20d6 <_ZN14Beat_Detection9num_beatsEv>
 80a0e70:	f8d4 31f0 	ldr.w	r3, [r4, #496]	; 0x1f0
 80a0e74:	4298      	cmp	r0, r3
 80a0e76:	d018      	beq.n	80a0eaa <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x5e>
        last_beat_count = bd->num_beats();
 80a0e78:	6830      	ldr	r0, [r6, #0]
 80a0e7a:	f001 f92c 	bl	80a20d6 <_ZN14Beat_Detection9num_beatsEv>
 80a0e7e:	f8c4 01f0 	str.w	r0, [r4, #496]	; 0x1f0
        color_table_idx++;
        color_table_idx %= 51;
 80a0e82:	2033      	movs	r0, #51	; 0x33
        color_table_idx++;
 80a0e84:	4a3f      	ldr	r2, [pc, #252]	; (80a0f84 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x138>)
 80a0e86:	6813      	ldr	r3, [r2, #0]
 80a0e88:	3301      	adds	r3, #1
        color_table_idx %= 51;
 80a0e8a:	fb93 f1f0 	sdiv	r1, r3, r0
 80a0e8e:	fb00 3311 	mls	r3, r0, r1, r3

        tcpBeats.stevenSendRGB(COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0e92:	210c      	movs	r1, #12
 80a0e94:	4359      	muls	r1, r3
 80a0e96:	483c      	ldr	r0, [pc, #240]	; (80a0f88 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x13c>)
        color_table_idx %= 51;
 80a0e98:	6013      	str	r3, [r2, #0]
        tcpBeats.stevenSendRGB(COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0e9a:	1842      	adds	r2, r0, r1
 80a0e9c:	6893      	ldr	r3, [r2, #8]
 80a0e9e:	5841      	ldr	r1, [r0, r1]
 80a0ea0:	6852      	ldr	r2, [r2, #4]
 80a0ea2:	f504 70fa 	add.w	r0, r4, #500	; 0x1f4
 80a0ea6:	f002 fd3b 	bl	80a3920 <_ZN8TCPBeats13stevenSendRGBEiii>
    }

    // Average all 4 low frequency bins
    float energy = bins->right[RIGHT_63] + bins->left[LEFT_63] + bins->right[RIGHT_160] + bins->left[LEFT_160];
 80a0eaa:	682b      	ldr	r3, [r5, #0]
 80a0eac:	69e8      	ldr	r0, [r5, #28]
    energy /= 4.0;
    energy /= (float) BINS_MAX;
    energy *= energy;
    // Use the "energy" of the low frequency bins to determine number of LEDs to light
    // Add 0.5 forces round to nearest integer
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
 80a0eae:	2607      	movs	r6, #7
    float energy = bins->right[RIGHT_63] + bins->left[LEFT_63] + bins->right[RIGHT_160] + bins->left[LEFT_160];
 80a0eb0:	4418      	add	r0, r3
 80a0eb2:	6a2b      	ldr	r3, [r5, #32]
    for (int x = 0; x < NUM_BARS / 2; x++) {
        int num_lit = max_lit / (NUM_BARS/2 - x);
        int y = (STRIP_LENGTH / 2) - (num_lit / 2);

        for (int i = 0; i < num_lit; i++) {
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0eb4:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80a0f84 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x138>
    float energy = bins->right[RIGHT_63] + bins->left[LEFT_63] + bins->right[RIGHT_160] + bins->left[LEFT_160];
 80a0eb8:	4418      	add	r0, r3
 80a0eba:	686b      	ldr	r3, [r5, #4]
    for (int x = 0; x < NUM_BARS / 2; x++) {
 80a0ebc:	2500      	movs	r5, #0
    float energy = bins->right[RIGHT_63] + bins->left[LEFT_63] + bins->right[RIGHT_160] + bins->left[LEFT_160];
 80a0ebe:	4418      	add	r0, r3
 80a0ec0:	f008 fd1a 	bl	80a98f8 <__aeabi_i2f>
    energy /= 4.0;
 80a0ec4:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a0ec8:	f008 fd6a 	bl	80a99a0 <__aeabi_fmul>
    energy /= (float) BINS_MAX;
 80a0ecc:	492f      	ldr	r1, [pc, #188]	; (80a0f8c <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x140>)
 80a0ece:	f008 fe1b 	bl	80a9b08 <__aeabi_fdiv>
 80a0ed2:	4601      	mov	r1, r0
    energy *= energy;
 80a0ed4:	f008 fd64 	bl	80a99a0 <__aeabi_fmul>
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
 80a0ed8:	492d      	ldr	r1, [pc, #180]	; (80a0f90 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x144>)
 80a0eda:	f008 fd61 	bl	80a99a0 <__aeabi_fmul>
 80a0ede:	f008 f8b1 	bl	80a9044 <__aeabi_f2d>
 80a0ee2:	2200      	movs	r2, #0
 80a0ee4:	4b2b      	ldr	r3, [pc, #172]	; (80a0f94 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x148>)
 80a0ee6:	f007 ff4f 	bl	80a8d88 <__adddf3>
 80a0eea:	f008 fbb3 	bl	80a9654 <__aeabi_d2iz>
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0eee:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80a0f88 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x13c>
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
 80a0ef2:	9004      	str	r0, [sp, #16]
        int num_lit = max_lit / (NUM_BARS/2 - x);
 80a0ef4:	9b04      	ldr	r3, [sp, #16]
 80a0ef6:	f1c5 0704 	rsb	r7, r5, #4
 80a0efa:	fb93 f7f7 	sdiv	r7, r3, r7
        for (int i = 0; i < num_lit; i++) {
 80a0efe:	f04f 0a00 	mov.w	sl, #0
        int y = (STRIP_LENGTH / 2) - (num_lit / 2);
 80a0f02:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
 80a0f06:	105b      	asrs	r3, r3, #1
 80a0f08:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 80a0f0c:	9305      	str	r3, [sp, #20]
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0f0e:	b2eb      	uxtb	r3, r5
 80a0f10:	9306      	str	r3, [sp, #24]
        for (int i = 0; i < num_lit; i++) {
 80a0f12:	45ba      	cmp	sl, r7
 80a0f14:	da2c      	bge.n	80a0f70 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x124>
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0f16:	210c      	movs	r1, #12
 80a0f18:	9b05      	ldr	r3, [sp, #20]
 80a0f1a:	eb03 020a 	add.w	r2, r3, sl
 80a0f1e:	f8db 3000 	ldr.w	r3, [fp]
 80a0f22:	b292      	uxth	r2, r2
 80a0f24:	434b      	muls	r3, r1
 80a0f26:	eb09 0103 	add.w	r1, r9, r3
 80a0f2a:	7a08      	ldrb	r0, [r1, #8]
 80a0f2c:	f819 3003 	ldrb.w	r3, [r9, r3]
 80a0f30:	7909      	ldrb	r1, [r1, #4]
 80a0f32:	9002      	str	r0, [sp, #8]
 80a0f34:	9101      	str	r1, [sp, #4]
 80a0f36:	4620      	mov	r0, r4
 80a0f38:	9906      	ldr	r1, [sp, #24]
 80a0f3a:	9300      	str	r3, [sp, #0]
 80a0f3c:	4643      	mov	r3, r8
 80a0f3e:	9207      	str	r2, [sp, #28]
 80a0f40:	f7ff f9e4 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(NUM_BARS-x-1, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0f44:	210c      	movs	r1, #12
 80a0f46:	f8db 3000 	ldr.w	r3, [fp]
 80a0f4a:	9a07      	ldr	r2, [sp, #28]
 80a0f4c:	434b      	muls	r3, r1
 80a0f4e:	eb09 0103 	add.w	r1, r9, r3
 80a0f52:	7a08      	ldrb	r0, [r1, #8]
 80a0f54:	f819 3003 	ldrb.w	r3, [r9, r3]
 80a0f58:	7909      	ldrb	r1, [r1, #4]
 80a0f5a:	9002      	str	r0, [sp, #8]
 80a0f5c:	9101      	str	r1, [sp, #4]
 80a0f5e:	9300      	str	r3, [sp, #0]
 80a0f60:	4631      	mov	r1, r6
 80a0f62:	4643      	mov	r3, r8
 80a0f64:	4620      	mov	r0, r4
 80a0f66:	f7ff f9d1 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (int i = 0; i < num_lit; i++) {
 80a0f6a:	f10a 0a01 	add.w	sl, sl, #1
 80a0f6e:	e7d0      	b.n	80a0f12 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0xc6>
    for (int x = 0; x < NUM_BARS / 2; x++) {
 80a0f70:	3501      	adds	r5, #1
 80a0f72:	3e01      	subs	r6, #1
 80a0f74:	2d04      	cmp	r5, #4
 80a0f76:	b2f6      	uxtb	r6, r6
 80a0f78:	d1bc      	bne.n	80a0ef4 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0xa8>
        }
    }
}
 80a0f7a:	b009      	add	sp, #36	; 0x24
 80a0f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0f80:	20000074 	.word	0x20000074
 80a0f84:	20000078 	.word	0x20000078
 80a0f88:	080a9f6c 	.word	0x080a9f6c
 80a0f8c:	457ff000 	.word	0x457ff000
 80a0f90:	428c0000 	.word	0x428c0000
 80a0f94:	3fe00000 	.word	0x3fe00000

080a0f98 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff>:
/* ================================================================== *
 * Function: visualizer_bass_slide
 * Description: All bars react to bass beats. Bulge in middle of display
 * Parameters: none.
 * ================================================================== */
void Bar_Matrix::visualizer_bass_slide(audio_bins* bins, float in_factor, float out_factor) {
 80a0f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0f9c:	4604      	mov	r4, r0
 80a0f9e:	b089      	sub	sp, #36	; 0x24
    decay(out_factor);
 80a0fa0:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_bass_slide(audio_bins* bins, float in_factor, float out_factor) {
 80a0fa2:	4617      	mov	r7, r2
 80a0fa4:	460d      	mov	r5, r1
    decay(out_factor);
 80a0fa6:	f008 f84d 	bl	80a9044 <__aeabi_f2d>

    if (bd->num_beats() != last_beat_count) {
 80a0faa:	4e71      	ldr	r6, [pc, #452]	; (80a1170 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1d8>)
    decay(out_factor);
 80a0fac:	4602      	mov	r2, r0
 80a0fae:	460b      	mov	r3, r1
 80a0fb0:	4620      	mov	r0, r4
 80a0fb2:	f7ff f881 	bl	80a00b8 <_ZN10Bar_Matrix5decayEd>
    if (bd->num_beats() != last_beat_count) {
 80a0fb6:	6830      	ldr	r0, [r6, #0]
 80a0fb8:	f001 f88d 	bl	80a20d6 <_ZN14Beat_Detection9num_beatsEv>
 80a0fbc:	f8d4 31f0 	ldr.w	r3, [r4, #496]	; 0x1f0
 80a0fc0:	4298      	cmp	r0, r3
 80a0fc2:	d018      	beq.n	80a0ff6 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x5e>
        last_beat_count = bd->num_beats();
 80a0fc4:	6830      	ldr	r0, [r6, #0]
 80a0fc6:	f001 f886 	bl	80a20d6 <_ZN14Beat_Detection9num_beatsEv>
 80a0fca:	f8c4 01f0 	str.w	r0, [r4, #496]	; 0x1f0
        color_table_idx++;
        color_table_idx %= 51;
 80a0fce:	2033      	movs	r0, #51	; 0x33
        color_table_idx++;
 80a0fd0:	4a68      	ldr	r2, [pc, #416]	; (80a1174 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1dc>)
 80a0fd2:	6813      	ldr	r3, [r2, #0]
 80a0fd4:	3301      	adds	r3, #1
        color_table_idx %= 51;
 80a0fd6:	fb93 f1f0 	sdiv	r1, r3, r0
 80a0fda:	fb00 3311 	mls	r3, r0, r1, r3

        tcpBeats.stevenSendRGB(COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0fde:	210c      	movs	r1, #12
 80a0fe0:	4359      	muls	r1, r3
 80a0fe2:	4865      	ldr	r0, [pc, #404]	; (80a1178 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1e0>)
        color_table_idx %= 51;
 80a0fe4:	6013      	str	r3, [r2, #0]
        tcpBeats.stevenSendRGB(COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0fe6:	1842      	adds	r2, r0, r1
 80a0fe8:	6893      	ldr	r3, [r2, #8]
 80a0fea:	5841      	ldr	r1, [r0, r1]
 80a0fec:	6852      	ldr	r2, [r2, #4]
 80a0fee:	f504 70fa 	add.w	r0, r4, #500	; 0x1f4
 80a0ff2:	f002 fc95 	bl	80a3920 <_ZN8TCPBeats13stevenSendRGBEiii>
    }

    // Average all 4 low frequency bins
    float energy = (bins->right[RIGHT_63] + bins->left[LEFT_63]) + (bins->right[RIGHT_160] + bins->left[LEFT_160])+ (bins->right[RIGHT_400] + bins->left[LEFT_400])+ (bins->right[RIGHT_1000] + bins->left[LEFT_1000])+ (bins->right[RIGHT_2500] + bins->left[LEFT_2500])+ (bins->right[RIGHT_6250] + bins->left[LEFT_6250])+ (bins->right[RIGHT_16000] + bins->left[LEFT_16000]);
 80a0ff6:	682a      	ldr	r2, [r5, #0]
 80a0ff8:	69eb      	ldr	r3, [r5, #28]
 80a0ffa:	6869      	ldr	r1, [r5, #4]
 80a0ffc:	4413      	add	r3, r2
 80a0ffe:	6a2a      	ldr	r2, [r5, #32]
 80a1000:	68e8      	ldr	r0, [r5, #12]
 80a1002:	440a      	add	r2, r1
 80a1004:	4413      	add	r3, r2
 80a1006:	68a9      	ldr	r1, [r5, #8]
 80a1008:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80a100a:	440a      	add	r2, r1
 80a100c:	4413      	add	r3, r2
 80a100e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a1010:	4402      	add	r2, r0
 80a1012:	4413      	add	r3, r2
 80a1014:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80a1016:	692a      	ldr	r2, [r5, #16]
 80a1018:	4410      	add	r0, r2
 80a101a:	4403      	add	r3, r0
 80a101c:	696a      	ldr	r2, [r5, #20]
 80a101e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80a1020:	4410      	add	r0, r2
 80a1022:	4403      	add	r3, r0
 80a1024:	69aa      	ldr	r2, [r5, #24]
 80a1026:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80a1028:	4410      	add	r0, r2
 80a102a:	4418      	add	r0, r3
 80a102c:	f008 fc64 	bl	80a98f8 <__aeabi_i2f>
    energy = energy / 2;
 80a1030:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a1034:	f008 fcb4 	bl	80a99a0 <__aeabi_fmul>
    bass_slide_ema = 0.5 * energy + 0.5 * bass_slide_ema;
 80a1038:	f008 f804 	bl	80a9044 <__aeabi_f2d>
 80a103c:	2200      	movs	r2, #0
 80a103e:	4b4f      	ldr	r3, [pc, #316]	; (80a117c <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1e4>)
 80a1040:	f008 f858 	bl	80a90f4 <__aeabi_dmul>
 80a1044:	4680      	mov	r8, r0
 80a1046:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
 80a104a:	4689      	mov	r9, r1
 80a104c:	f007 fffa 	bl	80a9044 <__aeabi_f2d>
 80a1050:	2200      	movs	r2, #0
 80a1052:	4b4a      	ldr	r3, [pc, #296]	; (80a117c <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1e4>)
 80a1054:	f008 f84e 	bl	80a90f4 <__aeabi_dmul>
 80a1058:	460b      	mov	r3, r1
 80a105a:	4602      	mov	r2, r0
 80a105c:	4649      	mov	r1, r9
 80a105e:	4640      	mov	r0, r8
 80a1060:	f007 fe92 	bl	80a8d88 <__adddf3>
 80a1064:	f008 fb3e 	bl	80a96e4 <__aeabi_d2f>
 80a1068:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
 80a106c:	4605      	mov	r5, r0
 80a106e:	f002 fcb7 	bl	80a39e0 <HAL_Timer_Get_Milli_Seconds>
    // Add 0.5 forces round to nearest integer
    //bass_slide_ema = 0.9 * energy + 0.1 * bass_slide_ema;
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
    int middle_led = STRIP_LENGTH / 2;

    if (millis() - bass_slide_millis > 35) {
 80a1072:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
 80a1076:	1ac0      	subs	r0, r0, r3
 80a1078:	2823      	cmp	r0, #35	; 0x23
 80a107a:	d92b      	bls.n	80a10d4 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x13c>
 80a107c:	f002 fcb0 	bl	80a39e0 <HAL_Timer_Get_Milli_Seconds>
        bass_slide_millis = millis();

        bass_slide_heights[0] = bass_slide_heights[1];
 80a1080:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
    energy /= 4.0;
 80a1084:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
        bass_slide_heights[0] = bass_slide_heights[1];
 80a1088:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
        bass_slide_heights[1] = bass_slide_heights[2];
 80a108c:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
        bass_slide_millis = millis();
 80a1090:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
        bass_slide_heights[1] = bass_slide_heights[2];
 80a1094:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
        bass_slide_heights[2] = bass_slide_heights[3];
 80a1098:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    energy /= 4.0;
 80a109c:	4628      	mov	r0, r5
        bass_slide_heights[2] = bass_slide_heights[3];
 80a109e:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
        bass_slide_heights[3] = bass_slide_heights[4];
 80a10a2:	f8d4 3284 	ldr.w	r3, [r4, #644]	; 0x284
 80a10a6:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    energy /= 4.0;
 80a10aa:	f008 fc79 	bl	80a99a0 <__aeabi_fmul>
    energy /= (float) BINS_MAX;
 80a10ae:	4934      	ldr	r1, [pc, #208]	; (80a1180 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1e8>)
 80a10b0:	f008 fd2a 	bl	80a9b08 <__aeabi_fdiv>
 80a10b4:	4601      	mov	r1, r0
    energy *= energy;
 80a10b6:	f008 fc73 	bl	80a99a0 <__aeabi_fmul>
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
 80a10ba:	4932      	ldr	r1, [pc, #200]	; (80a1184 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1ec>)
 80a10bc:	f008 fc70 	bl	80a99a0 <__aeabi_fmul>
 80a10c0:	f007 ffc0 	bl	80a9044 <__aeabi_f2d>
 80a10c4:	2200      	movs	r2, #0
 80a10c6:	4b2d      	ldr	r3, [pc, #180]	; (80a117c <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1e4>)
 80a10c8:	f007 fe5e 	bl	80a8d88 <__adddf3>
 80a10cc:	f008 fac2 	bl	80a9654 <__aeabi_d2iz>
 80a10d0:	f8c4 0284 	str.w	r0, [r4, #644]	; 0x284
void Bar_Matrix::visualizer_bass_slide(audio_bins* bins, float in_factor, float out_factor) {
 80a10d4:	2507      	movs	r5, #7
 80a10d6:	2600      	movs	r6, #0
 80a10d8:	f504 731d 	add.w	r3, r4, #628	; 0x274
    for (int x = 0; x < NUM_BARS / 2; x++) {
        int num_lit = bass_slide_heights[x];// / (float)(NUM_BARS/2 - x);
        int y = (STRIP_LENGTH / 2) - (num_lit / 2);

        for (int i = 0; i < num_lit; i++) {
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a10dc:	f8df b094 	ldr.w	fp, [pc, #148]	; 80a1174 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1dc>
 80a10e0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80a1178 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1e0>
 80a10e4:	9304      	str	r3, [sp, #16]
        for (int i = 0; i < num_lit; i++) {
 80a10e6:	f04f 0900 	mov.w	r9, #0
        int num_lit = bass_slide_heights[x];// / (float)(NUM_BARS/2 - x);
 80a10ea:	9b04      	ldr	r3, [sp, #16]
 80a10ec:	f853 ab04 	ldr.w	sl, [r3], #4
 80a10f0:	9304      	str	r3, [sp, #16]
        int y = (STRIP_LENGTH / 2) - (num_lit / 2);
 80a10f2:	eb0a 73da 	add.w	r3, sl, sl, lsr #31
 80a10f6:	105b      	asrs	r3, r3, #1
 80a10f8:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 80a10fc:	9305      	str	r3, [sp, #20]
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a10fe:	b2f3      	uxtb	r3, r6
 80a1100:	9306      	str	r3, [sp, #24]
        for (int i = 0; i < num_lit; i++) {
 80a1102:	45d1      	cmp	r9, sl
 80a1104:	da2c      	bge.n	80a1160 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1c8>
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a1106:	210c      	movs	r1, #12
 80a1108:	9b05      	ldr	r3, [sp, #20]
 80a110a:	eb03 0209 	add.w	r2, r3, r9
 80a110e:	f8db 3000 	ldr.w	r3, [fp]
 80a1112:	b292      	uxth	r2, r2
 80a1114:	434b      	muls	r3, r1
 80a1116:	eb08 0103 	add.w	r1, r8, r3
 80a111a:	7a08      	ldrb	r0, [r1, #8]
 80a111c:	f818 3003 	ldrb.w	r3, [r8, r3]
 80a1120:	7909      	ldrb	r1, [r1, #4]
 80a1122:	9002      	str	r0, [sp, #8]
 80a1124:	9101      	str	r1, [sp, #4]
 80a1126:	4620      	mov	r0, r4
 80a1128:	9906      	ldr	r1, [sp, #24]
 80a112a:	9300      	str	r3, [sp, #0]
 80a112c:	463b      	mov	r3, r7
 80a112e:	9207      	str	r2, [sp, #28]
 80a1130:	f7ff f8ec 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(NUM_BARS-x-1, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a1134:	210c      	movs	r1, #12
 80a1136:	f8db 3000 	ldr.w	r3, [fp]
 80a113a:	9a07      	ldr	r2, [sp, #28]
 80a113c:	434b      	muls	r3, r1
 80a113e:	eb08 0103 	add.w	r1, r8, r3
 80a1142:	7a08      	ldrb	r0, [r1, #8]
 80a1144:	f818 3003 	ldrb.w	r3, [r8, r3]
 80a1148:	7909      	ldrb	r1, [r1, #4]
 80a114a:	9002      	str	r0, [sp, #8]
 80a114c:	9101      	str	r1, [sp, #4]
 80a114e:	9300      	str	r3, [sp, #0]
 80a1150:	4629      	mov	r1, r5
 80a1152:	463b      	mov	r3, r7
 80a1154:	4620      	mov	r0, r4
 80a1156:	f7ff f8d9 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (int i = 0; i < num_lit; i++) {
 80a115a:	f109 0901 	add.w	r9, r9, #1
 80a115e:	e7d0      	b.n	80a1102 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x16a>
    for (int x = 0; x < NUM_BARS / 2; x++) {
 80a1160:	3601      	adds	r6, #1
 80a1162:	3d01      	subs	r5, #1
 80a1164:	2e04      	cmp	r6, #4
 80a1166:	b2ed      	uxtb	r5, r5
 80a1168:	d1bd      	bne.n	80a10e6 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x14e>
            mix_pixel(NUM_BARS-x-1, i, in_factor, 255-COLOR_TABLE[color_table_idx][0], 255-COLOR_TABLE[color_table_idx][1], 255-COLOR_TABLE[color_table_idx][2]);
            mix_pixel(x, y+i+num_lit, in_factor, 255-COLOR_TABLE[color_table_idx][0], 255-COLOR_TABLE[color_table_idx][1], 255-COLOR_TABLE[color_table_idx][2]);
            mix_pixel(NUM_BARS-x-1, y+i+num_lit, in_factor, 255-COLOR_TABLE[color_table_idx][0], 255-COLOR_TABLE[color_table_idx][1], 255-COLOR_TABLE[color_table_idx][2]);
        }*/
    }
}
 80a116a:	b009      	add	sp, #36	; 0x24
 80a116c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1170:	20000074 	.word	0x20000074
 80a1174:	20000078 	.word	0x20000078
 80a1178:	080a9f6c 	.word	0x080a9f6c
 80a117c:	3fe00000 	.word	0x3fe00000
 80a1180:	457ff000 	.word	0x457ff000
 80a1184:	428c0000 	.word	0x428c0000

080a1188 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff>:
/* ================================================================== *
 * Function: visualizer_classic
 * Description: Emulate Steven's original, pre-muse, visualizer.
 * Parameters: none.
 * ================================================================== */
void Bar_Matrix::visualizer_classic(audio_bins* bins, float in_factor, float out_factor) {
 80a1188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a118c:	4605      	mov	r5, r0
 80a118e:	b085      	sub	sp, #20
    decay_to_rgb(out_factor, 0, 0, 10);
 80a1190:	4618      	mov	r0, r3
 80a1192:	f007 ff57 	bl	80a9044 <__aeabi_f2d>
 80a1196:	2400      	movs	r4, #0
 80a1198:	460b      	mov	r3, r1
 80a119a:	210a      	movs	r1, #10
 80a119c:	4602      	mov	r2, r0
 80a119e:	e9cd 4101 	strd	r4, r1, [sp, #4]
 80a11a2:	4628      	mov	r0, r5
 80a11a4:	9400      	str	r4, [sp, #0]
 80a11a6:	f7fe ffe3 	bl	80a0170 <_ZN10Bar_Matrix12decay_to_rgbEdiii>

    for (int i = 0; i < NUM_BINS; i++) {
        if (bd->beat_on_bin(i)) {
 80a11aa:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80a121c <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x94>
            fill_bar(i, 200, 200, 200);
            //fill_bar(i, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
            color_table_idx = (color_table_idx+1) % 51;
 80a11ae:	4e1a      	ldr	r6, [pc, #104]	; (80a1218 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x90>)

            if (i == 6) {
                fill_bar(7, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a11b0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80a1220 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x98>
        if (bd->beat_on_bin(i)) {
 80a11b4:	4621      	mov	r1, r4
 80a11b6:	f8d9 0000 	ldr.w	r0, [r9]
 80a11ba:	f000 ff88 	bl	80a20ce <_ZN14Beat_Detection11beat_on_binEi>
 80a11be:	b328      	cbz	r0, 80a120c <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x84>
            fill_bar(i, 200, 200, 200);
 80a11c0:	23c8      	movs	r3, #200	; 0xc8
            color_table_idx = (color_table_idx+1) % 51;
 80a11c2:	2733      	movs	r7, #51	; 0x33
            fill_bar(i, 200, 200, 200);
 80a11c4:	461a      	mov	r2, r3
 80a11c6:	9300      	str	r3, [sp, #0]
 80a11c8:	4621      	mov	r1, r4
 80a11ca:	4628      	mov	r0, r5
 80a11cc:	f7ff f838 	bl	80a0240 <_ZN10Bar_Matrix8fill_barEiiii>
            color_table_idx = (color_table_idx+1) % 51;
 80a11d0:	6833      	ldr	r3, [r6, #0]
            if (i == 6) {
 80a11d2:	2c06      	cmp	r4, #6
            color_table_idx = (color_table_idx+1) % 51;
 80a11d4:	f103 0301 	add.w	r3, r3, #1
 80a11d8:	fb93 f2f7 	sdiv	r2, r3, r7
 80a11dc:	fb07 3312 	mls	r3, r7, r2, r3
 80a11e0:	6033      	str	r3, [r6, #0]
            if (i == 6) {
 80a11e2:	d113      	bne.n	80a120c <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x84>
                fill_bar(7, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a11e4:	220c      	movs	r2, #12
 80a11e6:	435a      	muls	r2, r3
 80a11e8:	eb08 0302 	add.w	r3, r8, r2
 80a11ec:	6899      	ldr	r1, [r3, #8]
 80a11ee:	f858 2002 	ldr.w	r2, [r8, r2]
 80a11f2:	685b      	ldr	r3, [r3, #4]
 80a11f4:	9100      	str	r1, [sp, #0]
 80a11f6:	4628      	mov	r0, r5
 80a11f8:	2107      	movs	r1, #7
 80a11fa:	f7ff f821 	bl	80a0240 <_ZN10Bar_Matrix8fill_barEiiii>
                color_table_idx = (color_table_idx+1) % 51;
 80a11fe:	6833      	ldr	r3, [r6, #0]
 80a1200:	3301      	adds	r3, #1
 80a1202:	fb93 f2f7 	sdiv	r2, r3, r7
 80a1206:	fb07 3712 	mls	r7, r7, r2, r3
 80a120a:	6037      	str	r7, [r6, #0]
    for (int i = 0; i < NUM_BINS; i++) {
 80a120c:	3401      	adds	r4, #1
 80a120e:	2c07      	cmp	r4, #7
 80a1210:	d1d0      	bne.n	80a11b4 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x2c>
            }
        }
    }
}
 80a1212:	b005      	add	sp, #20
 80a1214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1218:	20000078 	.word	0x20000078
 80a121c:	20000074 	.word	0x20000074
 80a1220:	080a9f6c 	.word	0x080a9f6c
 80a1224:	00000000 	.word	0x00000000

080a1228 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff>:
/* ================================================================== *
 * Function: decay
 * Description: slowly fades out matrix values
 * Parameters: [float] factor - decay factor to be multiplied by
 * ================================================================== */
void Bar_Matrix::visualizer_plasma(audio_bins* bins, float in_factor, float out_factor) {
 80a1228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a122c:	4680      	mov	r8, r0
 80a122e:	b08b      	sub	sp, #44	; 0x2c
    decay(out_factor);
 80a1230:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_plasma(audio_bins* bins, float in_factor, float out_factor) {
 80a1232:	4691      	mov	r9, r2
 80a1234:	460d      	mov	r5, r1
    decay(out_factor);
 80a1236:	f007 ff05 	bl	80a9044 <__aeabi_f2d>
 80a123a:	4602      	mov	r2, r0
 80a123c:	460b      	mov	r3, r1
 80a123e:	4640      	mov	r0, r8
 80a1240:	f7fe ff3a 	bl	80a00b8 <_ZN10Bar_Matrix5decayEd>
 80a1244:	2300      	movs	r3, #0
 80a1246:	9305      	str	r3, [sp, #20]

    for (char i = 0; i < disp_width; i++) {
 80a1248:	4b69      	ldr	r3, [pc, #420]	; (80a13f0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1c8>)
 80a124a:	f89d 7014 	ldrb.w	r7, [sp, #20]
 80a124e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a1252:	429f      	cmp	r7, r3
 80a1254:	f280 80b8 	bge.w	80a13c8 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1a0>
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a1258:	4b66      	ldr	r3, [pc, #408]	; (80a13f4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1cc>)
            // Move wave up
            unsigned int color = bars[i]->getPixelColor(j-1);
 80a125a:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 80a1400 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1d8>
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a125e:	881c      	ldrh	r4, [r3, #0]
            unsigned int color = bars[i]->getPixelColor(j-1);
 80a1260:	00bb      	lsls	r3, r7, #2
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a1262:	3c01      	subs	r4, #1
 80a1264:	b224      	sxth	r4, r4
            unsigned int color = bars[i]->getPixelColor(j-1);
 80a1266:	9308      	str	r3, [sp, #32]
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a1268:	2c00      	cmp	r4, #0
 80a126a:	dd25      	ble.n	80a12b8 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x90>
            unsigned int color = bars[i]->getPixelColor(j-1);
 80a126c:	b2a4      	uxth	r4, r4
 80a126e:	f8db 3000 	ldr.w	r3, [fp]
 80a1272:	9a08      	ldr	r2, [sp, #32]
 80a1274:	1e61      	subs	r1, r4, #1
 80a1276:	5898      	ldr	r0, [r3, r2]
 80a1278:	b289      	uxth	r1, r1
 80a127a:	f002 f970 	bl	80a355e <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
            mix_pixel(i, j, in_factor, (char)(color >> 16), (char)(color >> 8), (char)(color));
 80a127e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80a1282:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80a1286:	b2c6      	uxtb	r6, r0
 80a1288:	4622      	mov	r2, r4
 80a128a:	4639      	mov	r1, r7
 80a128c:	4640      	mov	r0, r8
 80a128e:	9306      	str	r3, [sp, #24]
 80a1290:	9300      	str	r3, [sp, #0]
 80a1292:	e9cd a601 	strd	sl, r6, [sp, #4]
 80a1296:	464b      	mov	r3, r9
 80a1298:	f7ff f838 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(i, j+1, in_factor, (char)(color >> 16), (char)(color >> 8), (char)(color));
 80a129c:	9b06      	ldr	r3, [sp, #24]
 80a129e:	1c62      	adds	r2, r4, #1
 80a12a0:	9300      	str	r3, [sp, #0]
 80a12a2:	4639      	mov	r1, r7
 80a12a4:	464b      	mov	r3, r9
 80a12a6:	4640      	mov	r0, r8
 80a12a8:	e9cd a601 	strd	sl, r6, [sp, #4]
 80a12ac:	b292      	uxth	r2, r2
 80a12ae:	3c02      	subs	r4, #2
 80a12b0:	f7ff f82c 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a12b4:	b224      	sxth	r4, r4
 80a12b6:	e7d7      	b.n	80a1268 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x40>
        }

        // Set bar levels
        int level = 0;
        switch(i) {
 80a12b8:	2f07      	cmp	r7, #7
 80a12ba:	f200 8083 	bhi.w	80a13c4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x19c>
 80a12be:	e8df f007 	tbb	[pc, r7]
 80a12c2:	7304      	.short	0x7304
 80a12c4:	7b797775 	.word	0x7b797775
 80a12c8:	7f7d      	.short	0x7f7d
            case 0: level = bins->left[LEFT_160];       break;
 80a12ca:	6868      	ldr	r0, [r5, #4]
            case 5: level = bins->right[RIGHT_6250];    break;
            case 6: level = bins->right[RIGHT_1000];    break;
            case 7: level = bins->right[RIGHT_160];     break;
        }

        level *= FREQ_GAIN;
 80a12cc:	f008 fb14 	bl	80a98f8 <__aeabi_i2f>
 80a12d0:	f008 fd42 	bl	80a9d58 <__aeabi_f2iz>
 80a12d4:	4604      	mov	r4, r0
        // set bar
        float val = level*2*PI/BINS_MAX;
 80a12d6:	0040      	lsls	r0, r0, #1
 80a12d8:	f007 fea2 	bl	80a9020 <__aeabi_i2d>
 80a12dc:	a33c      	add	r3, pc, #240	; (adr r3, 80a13d0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1a8>)
 80a12de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a12e2:	f007 ff07 	bl	80a90f4 <__aeabi_dmul>
 80a12e6:	a33c      	add	r3, pc, #240	; (adr r3, 80a13d8 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1b0>)
 80a12e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a12ec:	f008 f82c 	bl	80a9348 <__aeabi_ddiv>
 80a12f0:	f008 f9f8 	bl	80a96e4 <__aeabi_d2f>
 80a12f4:	4606      	mov	r6, r0
        //float intensity = (pow((float)(level)/(float)(BINS_MAX), 2))*255;
        float intensity = (level)/(BINS_MAX)*255.0f;
 80a12f6:	4620      	mov	r0, r4
 80a12f8:	f008 fafe 	bl	80a98f8 <__aeabi_i2f>
 80a12fc:	493e      	ldr	r1, [pc, #248]	; (80a13f8 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1d0>)
 80a12fe:	f008 fc03 	bl	80a9b08 <__aeabi_fdiv>
 80a1302:	493e      	ldr	r1, [pc, #248]	; (80a13fc <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1d4>)
 80a1304:	f008 fb4c 	bl	80a99a0 <__aeabi_fmul>
 80a1308:	4601      	mov	r1, r0
        intensity *= intensity;
 80a130a:	f008 fb49 	bl	80a99a0 <__aeabi_fmul>
        if (intensity > 255) intensity = 255.0;
 80a130e:	493b      	ldr	r1, [pc, #236]	; (80a13fc <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1d4>)
        intensity *= intensity;
 80a1310:	4604      	mov	r4, r0
        if (intensity > 255) intensity = 255.0;
 80a1312:	f008 fd01 	bl	80a9d18 <__aeabi_fcmpgt>
 80a1316:	b100      	cbz	r0, 80a131a <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xf2>
 80a1318:	4c38      	ldr	r4, [pc, #224]	; (80a13fc <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1d4>)
        mix_pixel(i, 0, in_factor, cos(val - 4*PI/3)*intensity, cos(val - 2*PI/3)*intensity, cos(val)*intensity);
 80a131a:	4630      	mov	r0, r6
 80a131c:	f007 fe92 	bl	80a9044 <__aeabi_f2d>
 80a1320:	a32f      	add	r3, pc, #188	; (adr r3, 80a13e0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1b8>)
 80a1322:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1326:	4682      	mov	sl, r0
 80a1328:	468b      	mov	fp, r1
 80a132a:	f007 fd2b 	bl	80a8d84 <__aeabi_dsub>
 80a132e:	f004 f96f 	bl	80a5610 <cos>
 80a1332:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a1336:	4620      	mov	r0, r4
 80a1338:	f007 fe84 	bl	80a9044 <__aeabi_f2d>
 80a133c:	a32a      	add	r3, pc, #168	; (adr r3, 80a13e8 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1c0>)
 80a133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1342:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a1346:	4650      	mov	r0, sl
 80a1348:	4659      	mov	r1, fp
 80a134a:	f007 fd1b 	bl	80a8d84 <__aeabi_dsub>
 80a134e:	f004 f95f 	bl	80a5610 <cos>
 80a1352:	4682      	mov	sl, r0
 80a1354:	4630      	mov	r0, r6
 80a1356:	468b      	mov	fp, r1
 80a1358:	f004 f9b0 	bl	80a56bc <cosf>
 80a135c:	4601      	mov	r1, r0
 80a135e:	4620      	mov	r0, r4
 80a1360:	f008 fb1e 	bl	80a99a0 <__aeabi_fmul>
 80a1364:	f008 fd1e 	bl	80a9da4 <__aeabi_f2uiz>
 80a1368:	b2c0      	uxtb	r0, r0
 80a136a:	4652      	mov	r2, sl
 80a136c:	465b      	mov	r3, fp
 80a136e:	9002      	str	r0, [sp, #8]
 80a1370:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a1374:	f007 febe 	bl	80a90f4 <__aeabi_dmul>
 80a1378:	f008 f994 	bl	80a96a4 <__aeabi_d2uiz>
 80a137c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a1380:	b2c0      	uxtb	r0, r0
 80a1382:	9001      	str	r0, [sp, #4]
 80a1384:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a1388:	f007 feb4 	bl	80a90f4 <__aeabi_dmul>
 80a138c:	f008 f98a 	bl	80a96a4 <__aeabi_d2uiz>
 80a1390:	b2c0      	uxtb	r0, r0
 80a1392:	464b      	mov	r3, r9
 80a1394:	9000      	str	r0, [sp, #0]
 80a1396:	2200      	movs	r2, #0
 80a1398:	4639      	mov	r1, r7
 80a139a:	4640      	mov	r0, r8
 80a139c:	f7fe ffb6 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
    for (char i = 0; i < disp_width; i++) {
 80a13a0:	9b05      	ldr	r3, [sp, #20]
 80a13a2:	3301      	adds	r3, #1
 80a13a4:	9305      	str	r3, [sp, #20]
 80a13a6:	e74f      	b.n	80a1248 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x20>
            case 1: level = bins->left[LEFT_1000];      break;
 80a13a8:	68e8      	ldr	r0, [r5, #12]
 80a13aa:	e78f      	b.n	80a12cc <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
            case 2: level = bins->left[LEFT_6250];      break;
 80a13ac:	6968      	ldr	r0, [r5, #20]
 80a13ae:	e78d      	b.n	80a12cc <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
            case 3: level = bins->left[LEFT_16000];     break;
 80a13b0:	69a8      	ldr	r0, [r5, #24]
 80a13b2:	e78b      	b.n	80a12cc <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
            case 4: level = bins->right[RIGHT_16000];   break;
 80a13b4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80a13b6:	e789      	b.n	80a12cc <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
            case 5: level = bins->right[RIGHT_6250];    break;
 80a13b8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80a13ba:	e787      	b.n	80a12cc <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
            case 6: level = bins->right[RIGHT_1000];    break;
 80a13bc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80a13be:	e785      	b.n	80a12cc <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
            case 7: level = bins->right[RIGHT_160];     break;
 80a13c0:	6a28      	ldr	r0, [r5, #32]
 80a13c2:	e783      	b.n	80a12cc <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a13c4:	2000      	movs	r0, #0
 80a13c6:	e781      	b.n	80a12cc <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>

        //bars[i]->setPixelColor(0, cos(val - 2*PI/3)*intensity, cos(val)*intensity, cos(val - 4*PI/3)*intensity);

    }
}
 80a13c8:	b00b      	add	sp, #44	; 0x2c
 80a13ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a13ce:	bf00      	nop
 80a13d0:	fc8b007a 	.word	0xfc8b007a
 80a13d4:	400921fa 	.word	0x400921fa
 80a13d8:	00000000 	.word	0x00000000
 80a13dc:	40affe00 	.word	0x40affe00
 80a13e0:	fdb20051 	.word	0xfdb20051
 80a13e4:	4010c151 	.word	0x4010c151
 80a13e8:	fdb20051 	.word	0xfdb20051
 80a13ec:	4000c151 	.word	0x4000c151
 80a13f0:	2000007e 	.word	0x2000007e
 80a13f4:	2000007c 	.word	0x2000007c
 80a13f8:	457ff000 	.word	0x457ff000
 80a13fc:	437f0000 	.word	0x437f0000
 80a1400:	20000070 	.word	0x20000070

080a1404 <_ZN10Bar_Matrix15visualizer_pongEf>:

void Bar_Matrix::visualizer_pong(float in_factor) {
 80a1404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1408:	4604      	mov	r4, r0
    pongPaddles[0].tick(&pongBall);
 80a140a:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
 80a140e:	f500 7ab0 	add.w	sl, r0, #352	; 0x160
void Bar_Matrix::visualizer_pong(float in_factor) {
 80a1412:	b085      	sub	sp, #20
    pongPaddles[0].tick(&pongBall);
 80a1414:	4650      	mov	r0, sl
void Bar_Matrix::visualizer_pong(float in_factor) {
 80a1416:	460f      	mov	r7, r1
    pongPaddles[1].tick(&pongBall);
 80a1418:	f504 79c8 	add.w	r9, r4, #400	; 0x190
    pongPaddles[0].tick(&pongBall);
 80a141c:	4631      	mov	r1, r6
 80a141e:	f002 f983 	bl	80a3728 <_ZN10PongPaddle4tickEP8PongBall>
    pongBall.tick();

    if (bd->num_beats() != last_beat_count) {
 80a1422:	4d51      	ldr	r5, [pc, #324]	; (80a1568 <_ZN10Bar_Matrix15visualizer_pongEf+0x164>)
    pongPaddles[1].tick(&pongBall);
 80a1424:	4631      	mov	r1, r6
 80a1426:	4648      	mov	r0, r9
 80a1428:	f002 f97e 	bl	80a3728 <_ZN10PongPaddle4tickEP8PongBall>
    pongBall.tick();
 80a142c:	4630      	mov	r0, r6
 80a142e:	f002 f8f9 	bl	80a3624 <_ZN8PongBall4tickEv>
    if (bd->num_beats() != last_beat_count) {
 80a1432:	6828      	ldr	r0, [r5, #0]
 80a1434:	f000 fe4f 	bl	80a20d6 <_ZN14Beat_Detection9num_beatsEv>
 80a1438:	f8d4 31f0 	ldr.w	r3, [r4, #496]	; 0x1f0
 80a143c:	4298      	cmp	r0, r3
 80a143e:	d01b      	beq.n	80a1478 <_ZN10Bar_Matrix15visualizer_pongEf+0x74>
        last_beat_count = bd->num_beats();
 80a1440:	6828      	ldr	r0, [r5, #0]
 80a1442:	f000 fe48 	bl	80a20d6 <_ZN14Beat_Detection9num_beatsEv>
        if (random(0, 3) == 0 ) {
 80a1446:	2103      	movs	r1, #3
        last_beat_count = bd->num_beats();
 80a1448:	f8c4 01f0 	str.w	r0, [r4, #496]	; 0x1f0
        if (random(0, 3) == 0 ) {
 80a144c:	2000      	movs	r0, #0
 80a144e:	f003 f966 	bl	80a471e <_Z6randomii>
 80a1452:	2800      	cmp	r0, #0
 80a1454:	d13a      	bne.n	80a14cc <_ZN10Bar_Matrix15visualizer_pongEf+0xc8>
            pongPaddles[1].setColor(bd->r(), bd->g(), bd->b());
 80a1456:	6828      	ldr	r0, [r5, #0]
 80a1458:	f000 fe3f 	bl	80a20da <_ZN14Beat_Detection1rEv>
 80a145c:	4680      	mov	r8, r0
 80a145e:	6828      	ldr	r0, [r5, #0]
 80a1460:	f000 fe3d 	bl	80a20de <_ZN14Beat_Detection1gEv>
 80a1464:	4682      	mov	sl, r0
 80a1466:	6828      	ldr	r0, [r5, #0]
 80a1468:	f000 fe3b 	bl	80a20e2 <_ZN14Beat_Detection1bEv>
 80a146c:	4652      	mov	r2, sl
 80a146e:	4603      	mov	r3, r0
 80a1470:	4641      	mov	r1, r8
 80a1472:	4648      	mov	r0, r9
 80a1474:	f002 fa06 	bl	80a3884 <_ZN10PongPaddle8setColorEiii>
        } else {
            pongBall.setColor(bd->r(), bd->g(), bd->b());
        }
    }

    clear_matrix();
 80a1478:	4620      	mov	r0, r4
 80a147a:	f7fe ffb5 	bl	80a03e8 <_ZN10Bar_Matrix12clear_matrixEv>

    // Draw paddles
    for (int i = 0; i < 2; i++) {
 80a147e:	4625      	mov	r5, r4
 80a1480:	f104 0b60 	add.w	fp, r4, #96	; 0x60
        for (int y = 0; y < pongPaddles[i].len; y++) {
 80a1484:	f04f 0800 	mov.w	r8, #0
 80a1488:	f505 7ab0 	add.w	sl, r5, #352	; 0x160
 80a148c:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
 80a1490:	4543      	cmp	r3, r8
 80a1492:	dd44      	ble.n	80a151e <_ZN10Bar_Matrix15visualizer_pongEf+0x11a>
            mix_pixel(pongPaddles[i].xPos(), pongPaddles[i].yPos()+y, in_factor, pongPaddles[i].r, pongPaddles[i].g, pongPaddles[i].b);
 80a1494:	4650      	mov	r0, sl
 80a1496:	f002 f9eb 	bl	80a3870 <_ZN10PongPaddle4xPosEv>
 80a149a:	4681      	mov	r9, r0
 80a149c:	4650      	mov	r0, sl
 80a149e:	f002 f9ec 	bl	80a387a <_ZN10PongPaddle4yPosEv>
 80a14a2:	f895 318c 	ldrb.w	r3, [r5, #396]	; 0x18c
 80a14a6:	eb00 0208 	add.w	r2, r0, r8
 80a14aa:	9302      	str	r3, [sp, #8]
 80a14ac:	f895 3188 	ldrb.w	r3, [r5, #392]	; 0x188
 80a14b0:	4620      	mov	r0, r4
 80a14b2:	9301      	str	r3, [sp, #4]
 80a14b4:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
 80a14b8:	b292      	uxth	r2, r2
 80a14ba:	9300      	str	r3, [sp, #0]
 80a14bc:	fa5f f189 	uxtb.w	r1, r9
 80a14c0:	463b      	mov	r3, r7
 80a14c2:	f7fe ff23 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (int y = 0; y < pongPaddles[i].len; y++) {
 80a14c6:	f108 0801 	add.w	r8, r8, #1
 80a14ca:	e7df      	b.n	80a148c <_ZN10Bar_Matrix15visualizer_pongEf+0x88>
        } else if (random(0, 2) == 0) {
 80a14cc:	2102      	movs	r1, #2
 80a14ce:	2000      	movs	r0, #0
 80a14d0:	f003 f925 	bl	80a471e <_Z6randomii>
 80a14d4:	b988      	cbnz	r0, 80a14fa <_ZN10Bar_Matrix15visualizer_pongEf+0xf6>
            pongPaddles[0].setColor(bd->r(), bd->g(), bd->b());
 80a14d6:	6828      	ldr	r0, [r5, #0]
 80a14d8:	f000 fdff 	bl	80a20da <_ZN14Beat_Detection1rEv>
 80a14dc:	4680      	mov	r8, r0
 80a14de:	6828      	ldr	r0, [r5, #0]
 80a14e0:	f000 fdfd 	bl	80a20de <_ZN14Beat_Detection1gEv>
 80a14e4:	4681      	mov	r9, r0
 80a14e6:	6828      	ldr	r0, [r5, #0]
 80a14e8:	f000 fdfb 	bl	80a20e2 <_ZN14Beat_Detection1bEv>
 80a14ec:	464a      	mov	r2, r9
 80a14ee:	4603      	mov	r3, r0
 80a14f0:	4641      	mov	r1, r8
 80a14f2:	4650      	mov	r0, sl
 80a14f4:	f002 f9c6 	bl	80a3884 <_ZN10PongPaddle8setColorEiii>
 80a14f8:	e7be      	b.n	80a1478 <_ZN10Bar_Matrix15visualizer_pongEf+0x74>
            pongBall.setColor(bd->r(), bd->g(), bd->b());
 80a14fa:	6828      	ldr	r0, [r5, #0]
 80a14fc:	f000 fded 	bl	80a20da <_ZN14Beat_Detection1rEv>
 80a1500:	4680      	mov	r8, r0
 80a1502:	6828      	ldr	r0, [r5, #0]
 80a1504:	f000 fdeb 	bl	80a20de <_ZN14Beat_Detection1gEv>
 80a1508:	4681      	mov	r9, r0
 80a150a:	6828      	ldr	r0, [r5, #0]
 80a150c:	f000 fde9 	bl	80a20e2 <_ZN14Beat_Detection1bEv>
 80a1510:	464a      	mov	r2, r9
 80a1512:	4603      	mov	r3, r0
 80a1514:	4641      	mov	r1, r8
 80a1516:	4630      	mov	r0, r6
 80a1518:	f002 f8e8 	bl	80a36ec <_ZN8PongBall8setColorEiii>
 80a151c:	e7ac      	b.n	80a1478 <_ZN10Bar_Matrix15visualizer_pongEf+0x74>
    for (int i = 0; i < 2; i++) {
 80a151e:	3530      	adds	r5, #48	; 0x30
 80a1520:	455d      	cmp	r5, fp
 80a1522:	d1af      	bne.n	80a1484 <_ZN10Bar_Matrix15visualizer_pongEf+0x80>
        }
    }

    // Draw Ball
    for (int i = 0; i < pongBall.len; i++) {
 80a1524:	2500      	movs	r5, #0
 80a1526:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 80a152a:	42ab      	cmp	r3, r5
 80a152c:	dd19      	ble.n	80a1562 <_ZN10Bar_Matrix15visualizer_pongEf+0x15e>
        mix_pixel(pongBall.xPos(), pongBall.yPos()+i, in_factor, pongBall.r, pongBall.g, pongBall.b);
 80a152e:	4630      	mov	r0, r6
 80a1530:	f002 f8d2 	bl	80a36d8 <_ZN8PongBall4xPosEv>
 80a1534:	4680      	mov	r8, r0
 80a1536:	4630      	mov	r0, r6
 80a1538:	f002 f8d3 	bl	80a36e2 <_ZN8PongBall4yPosEv>
 80a153c:	f894 31ec 	ldrb.w	r3, [r4, #492]	; 0x1ec
 80a1540:	1942      	adds	r2, r0, r5
 80a1542:	9302      	str	r3, [sp, #8]
 80a1544:	f894 31e8 	ldrb.w	r3, [r4, #488]	; 0x1e8
 80a1548:	4620      	mov	r0, r4
 80a154a:	9301      	str	r3, [sp, #4]
 80a154c:	f894 31e4 	ldrb.w	r3, [r4, #484]	; 0x1e4
 80a1550:	b292      	uxth	r2, r2
 80a1552:	9300      	str	r3, [sp, #0]
 80a1554:	fa5f f188 	uxtb.w	r1, r8
 80a1558:	463b      	mov	r3, r7
 80a155a:	f7fe fed7 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
    for (int i = 0; i < pongBall.len; i++) {
 80a155e:	3501      	adds	r5, #1
 80a1560:	e7e1      	b.n	80a1526 <_ZN10Bar_Matrix15visualizer_pongEf+0x122>
    }
}
 80a1562:	b005      	add	sp, #20
 80a1564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1568:	20000074 	.word	0x20000074

080a156c <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff>:
/* ================================================================== *
 * Function: visualizer_pulse
 * Description: Creates pulses where sound appears to be originating from
 * Parameters:  None
 * ================================================================== */
void Bar_Matrix::visualizer_pulse(audio_bins* bins, float in_factor, float out_factor, float distance_x, float distance_y) {
 80a156c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1570:	4605      	mov	r5, r0
 80a1572:	b099      	sub	sp, #100	; 0x64
    decay (out_factor);
 80a1574:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_pulse(audio_bins* bins, float in_factor, float out_factor, float distance_x, float distance_y) {
 80a1576:	460c      	mov	r4, r1
 80a1578:	9207      	str	r2, [sp, #28]
    decay (out_factor);
 80a157a:	f007 fd63 	bl	80a9044 <__aeabi_f2d>
 80a157e:	1f26      	subs	r6, r4, #4
 80a1580:	4602      	mov	r2, r0
 80a1582:	460b      	mov	r3, r1
 80a1584:	4628      	mov	r0, r5
 80a1586:	f7fe fd97 	bl	80a00b8 <_ZN10Bar_Matrix5decayEd>
 80a158a:	4637      	mov	r7, r6
 80a158c:	3418      	adds	r4, #24
 80a158e:	f10d 0928 	add.w	r9, sp, #40	; 0x28

    // Calculate frequency pan and "fade"
    float pans[NUM_BINS]; // ratio left to right, 0-1
    float intensities[NUM_BINS]; // ratio low to high, 0-1
    for (char i = 0; i < NUM_BINS; i++)
    pans[i] = float(bins->left[i])/float(bins->right[i]);
 80a1592:	f857 0f04 	ldr.w	r0, [r7, #4]!
 80a1596:	f008 f9af 	bl	80a98f8 <__aeabi_i2f>
 80a159a:	4680      	mov	r8, r0
 80a159c:	69f8      	ldr	r0, [r7, #28]
 80a159e:	f008 f9ab 	bl	80a98f8 <__aeabi_i2f>
 80a15a2:	4601      	mov	r1, r0
 80a15a4:	4640      	mov	r0, r8
 80a15a6:	f008 faaf 	bl	80a9b08 <__aeabi_fdiv>
    for (char i = 0; i < NUM_BINS; i++)
 80a15aa:	42bc      	cmp	r4, r7
    pans[i] = float(bins->left[i])/float(bins->right[i]);
 80a15ac:	f849 0b04 	str.w	r0, [r9], #4
    for (char i = 0; i < NUM_BINS; i++)
 80a15b0:	d1ef      	bne.n	80a1592 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x26>
    for (char i = 0; i < NUM_BINS; i++)
    intensities[i] = ((float(bins->left[i])+float(bins->right[i]))/2.0f)/BINS_MAX;
 80a15b2:	f04f 597c 	mov.w	r9, #1056964608	; 0x3f000000
 80a15b6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80a16b4 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x148>
    for (char i = 0; i < NUM_BINS; i++)
 80a15ba:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
    intensities[i] = ((float(bins->left[i])+float(bins->right[i]))/2.0f)/BINS_MAX;
 80a15be:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80a15c2:	f008 f999 	bl	80a98f8 <__aeabi_i2f>
 80a15c6:	4607      	mov	r7, r0
 80a15c8:	69f0      	ldr	r0, [r6, #28]
 80a15ca:	f008 f995 	bl	80a98f8 <__aeabi_i2f>
 80a15ce:	4601      	mov	r1, r0
 80a15d0:	4638      	mov	r0, r7
 80a15d2:	f008 f8dd 	bl	80a9790 <__addsf3>
 80a15d6:	4649      	mov	r1, r9
 80a15d8:	f008 f9e2 	bl	80a99a0 <__aeabi_fmul>
 80a15dc:	4641      	mov	r1, r8
 80a15de:	f008 fa93 	bl	80a9b08 <__aeabi_fdiv>
    for (char i = 0; i < NUM_BINS; i++)
 80a15e2:	42b4      	cmp	r4, r6
    intensities[i] = ((float(bins->left[i])+float(bins->right[i]))/2.0f)/BINS_MAX;
 80a15e4:	f84a 0b04 	str.w	r0, [sl], #4
    for (char i = 0; i < NUM_BINS; i++)
 80a15e8:	d1e9      	bne.n	80a15be <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x52>
 80a15ea:	2700      	movs	r7, #0

    for (char i = 0; i < disp_width; i++) {
 80a15ec:	4b2e      	ldr	r3, [pc, #184]	; (80a16a8 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x13c>)
 80a15ee:	fa5f f987 	uxtb.w	r9, r7
 80a15f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a15f6:	4599      	cmp	r9, r3
 80a15f8:	da53      	bge.n	80a16a2 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x136>
 80a15fa:	f04f 0800 	mov.w	r8, #0
        for (char j = 0; j < disp_height; j++) {
 80a15fe:	4b2b      	ldr	r3, [pc, #172]	; (80a16ac <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x140>)
 80a1600:	fa5f fa88 	uxtb.w	sl, r8
 80a1604:	f9b3 4000 	ldrsh.w	r4, [r3]
 80a1608:	4b27      	ldr	r3, [pc, #156]	; (80a16a8 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x13c>)
 80a160a:	45a2      	cmp	sl, r4
 80a160c:	f9b3 0000 	ldrsh.w	r0, [r3]
 80a1610:	da45      	bge.n	80a169e <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x132>
            float level = 0;

            // Calculate level intensity
            for (char x = 0; x < NUM_BINS; x++) {
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a1612:	fb99 f0f0 	sdiv	r0, r9, r0
 80a1616:	f008 f96f 	bl	80a98f8 <__aeabi_i2f>
 80a161a:	4683      	mov	fp, r0
 80a161c:	fb9a f0f4 	sdiv	r0, sl, r4
 80a1620:	f008 f96a 	bl	80a98f8 <__aeabi_i2f>
 80a1624:	4601      	mov	r1, r0
 80a1626:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80a1628:	f008 fa6e 	bl	80a9b08 <__aeabi_fdiv>
            for (char x = 0; x < NUM_BINS; x++) {
 80a162c:	2400      	movs	r4, #0
            float level = 0;
 80a162e:	2600      	movs	r6, #0
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a1630:	aa0a      	add	r2, sp, #40	; 0x28
 80a1632:	9006      	str	r0, [sp, #24]
 80a1634:	ab11      	add	r3, sp, #68	; 0x44
 80a1636:	9205      	str	r2, [sp, #20]
                level += intensities[x] * distance;
 80a1638:	f853 2b04 	ldr.w	r2, [r3], #4
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a163c:	4659      	mov	r1, fp
                level += intensities[x] * distance;
 80a163e:	e9cd 2308 	strd	r2, r3, [sp, #32]
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a1642:	9b05      	ldr	r3, [sp, #20]
            for (char x = 0; x < NUM_BINS; x++) {
 80a1644:	3401      	adds	r4, #1
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a1646:	f853 0b04 	ldr.w	r0, [r3], #4
            for (char x = 0; x < NUM_BINS; x++) {
 80a164a:	b2e4      	uxtb	r4, r4
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a164c:	9305      	str	r3, [sp, #20]
 80a164e:	f008 f89d 	bl	80a978c <__aeabi_fsub>
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80a1652:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 80a1656:	9822      	ldr	r0, [sp, #136]	; 0x88
 80a1658:	f008 fa56 	bl	80a9b08 <__aeabi_fdiv>
 80a165c:	9906      	ldr	r1, [sp, #24]
 80a165e:	f008 f897 	bl	80a9790 <__addsf3>
                level += intensities[x] * distance;
 80a1662:	9a08      	ldr	r2, [sp, #32]
 80a1664:	4611      	mov	r1, r2
 80a1666:	f008 f99b 	bl	80a99a0 <__aeabi_fmul>
 80a166a:	4601      	mov	r1, r0
 80a166c:	4630      	mov	r0, r6
 80a166e:	f008 f88f 	bl	80a9790 <__addsf3>
            for (char x = 0; x < NUM_BINS; x++) {
 80a1672:	2c07      	cmp	r4, #7
                level += intensities[x] * distance;
 80a1674:	4606      	mov	r6, r0
            for (char x = 0; x < NUM_BINS; x++) {
 80a1676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a1678:	d1de      	bne.n	80a1638 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0xcc>
            }

            //level *= 2*PI;
            //mix_pixel(i, j, in_factor, cos(level)*255*level, cos(level - 2*PI/3)*255*level, cos(level - 4*PI/3)*255*level);
            mix_pixel(i, j, in_factor, level*255, level*255, level*255);
 80a167a:	490d      	ldr	r1, [pc, #52]	; (80a16b0 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x144>)
 80a167c:	f008 f990 	bl	80a99a0 <__aeabi_fmul>
 80a1680:	f008 fb90 	bl	80a9da4 <__aeabi_f2uiz>
 80a1684:	b2c0      	uxtb	r0, r0
 80a1686:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80a168a:	9000      	str	r0, [sp, #0]
 80a168c:	4652      	mov	r2, sl
 80a168e:	4649      	mov	r1, r9
 80a1690:	4628      	mov	r0, r5
 80a1692:	9b07      	ldr	r3, [sp, #28]
 80a1694:	f7fe fe3a 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = 0; j < disp_height; j++) {
 80a1698:	f108 0801 	add.w	r8, r8, #1
 80a169c:	e7af      	b.n	80a15fe <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x92>
    for (char i = 0; i < disp_width; i++) {
 80a169e:	3701      	adds	r7, #1
 80a16a0:	e7a4      	b.n	80a15ec <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x80>
        }
    }
}
 80a16a2:	b019      	add	sp, #100	; 0x64
 80a16a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a16a8:	2000007e 	.word	0x2000007e
 80a16ac:	2000007c 	.word	0x2000007c
 80a16b0:	437f0000 	.word	0x437f0000
 80a16b4:	457ff000 	.word	0x457ff000

080a16b8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff>:

void Bar_Matrix::visualizer_rainbow(audio_bins* bins, float in_factor, float out_factor) {
 80a16b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a16bc:	b08d      	sub	sp, #52	; 0x34
 80a16be:	9005      	str	r0, [sp, #20]
    decay(out_factor);
 80a16c0:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_rainbow(audio_bins* bins, float in_factor, float out_factor) {
 80a16c2:	920a      	str	r2, [sp, #40]	; 0x28
 80a16c4:	468a      	mov	sl, r1
    decay(out_factor);
 80a16c6:	f007 fcbd 	bl	80a9044 <__aeabi_f2d>
 80a16ca:	4602      	mov	r2, r0
 80a16cc:	460b      	mov	r3, r1
 80a16ce:	9805      	ldr	r0, [sp, #20]
 80a16d0:	f7fe fcf2 	bl	80a00b8 <_ZN10Bar_Matrix5decayEd>
 80a16d4:	f04f 0b00 	mov.w	fp, #0

    for (char i = 0; i < disp_width/2; i++) {
 80a16d8:	4bb4      	ldr	r3, [pc, #720]	; (80a19ac <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
 80a16da:	fa5f f78b 	uxtb.w	r7, fp
 80a16de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a16e2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80a16e6:	ebb7 0f63 	cmp.w	r7, r3, asr #1
 80a16ea:	ea4f 0463 	mov.w	r4, r3, asr #1
 80a16ee:	da6d      	bge.n	80a17cc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x114>
        int led_index = 0;
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a16f0:	2400      	movs	r4, #0
            // get bin
            int level = bins->left[j/10];
 80a16f2:	260a      	movs	r6, #10
        int led_index = 0;
 80a16f4:	46a0      	mov	r8, r4
            int level = bins->left[j/10];
 80a16f6:	fbb4 f3f6 	udiv	r3, r4, r6
            level *= FREQ_GAIN;
 80a16fa:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 80a16fe:	f008 f8fb 	bl	80a98f8 <__aeabi_i2f>
 80a1702:	f008 fb29 	bl	80a9d58 <__aeabi_f2iz>
            // set bar
            if (i < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
 80a1706:	f008 f8f7 	bl	80a98f8 <__aeabi_i2f>
 80a170a:	49a9      	ldr	r1, [pc, #676]	; (80a19b0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f8>)
 80a170c:	f008 f9fc 	bl	80a9b08 <__aeabi_fdiv>
 80a1710:	2102      	movs	r1, #2
 80a1712:	f7ff f937 	bl	80a0984 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a1716:	4602      	mov	r2, r0
 80a1718:	460b      	mov	r3, r1
 80a171a:	4638      	mov	r0, r7
 80a171c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a1720:	f007 fc7e 	bl	80a9020 <__aeabi_i2d>
 80a1724:	4ba1      	ldr	r3, [pc, #644]	; (80a19ac <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
 80a1726:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a172a:	f9b3 0000 	ldrsh.w	r0, [r3]
 80a172e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80a1732:	1040      	asrs	r0, r0, #1
 80a1734:	f007 fc74 	bl	80a9020 <__aeabi_i2d>
 80a1738:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a173c:	f007 fcda 	bl	80a90f4 <__aeabi_dmul>
 80a1740:	4602      	mov	r2, r0
 80a1742:	460b      	mov	r3, r1
 80a1744:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a1748:	f007 ff46 	bl	80a95d8 <__aeabi_dcmplt>
 80a174c:	2800      	cmp	r0, #0
 80a174e:	d030      	beq.n	80a17b2 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0xfa>
 80a1750:	fa1f f588 	uxth.w	r5, r8
 80a1754:	f105 0350 	add.w	r3, r5, #80	; 0x50
 80a1758:	b29b      	uxth	r3, r3
 80a175a:	9306      	str	r3, [sp, #24]
                float val = level*PI/BINS_MAX;
                for (int x = 0; x < 10; x++) {
                    //mix_pixel((disp_width/2)-i-1, x*NUM_BARS+led_index, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                    mix_pixel((disp_width/2)-i-1, x*NUM_BARS+led_index, in_factor, bd->r(), bd->g(), bd->b());
 80a175c:	43f9      	mvns	r1, r7
 80a175e:	4b93      	ldr	r3, [pc, #588]	; (80a19ac <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
 80a1760:	f9b3 9000 	ldrsh.w	r9, [r3]
 80a1764:	4b93      	ldr	r3, [pc, #588]	; (80a19b4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
 80a1766:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
 80a176a:	6818      	ldr	r0, [r3, #0]
 80a176c:	eb01 0969 	add.w	r9, r1, r9, asr #1
 80a1770:	f000 fcb3 	bl	80a20da <_ZN14Beat_Detection1rEv>
 80a1774:	4b8f      	ldr	r3, [pc, #572]	; (80a19b4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
 80a1776:	900b      	str	r0, [sp, #44]	; 0x2c
 80a1778:	6818      	ldr	r0, [r3, #0]
 80a177a:	f000 fcb0 	bl	80a20de <_ZN14Beat_Detection1gEv>
 80a177e:	4b8d      	ldr	r3, [pc, #564]	; (80a19b4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
 80a1780:	9008      	str	r0, [sp, #32]
 80a1782:	6818      	ldr	r0, [r3, #0]
 80a1784:	f000 fcad 	bl	80a20e2 <_ZN14Beat_Detection1bEv>
 80a1788:	9a08      	ldr	r2, [sp, #32]
 80a178a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a178c:	b2c0      	uxtb	r0, r0
 80a178e:	9002      	str	r0, [sp, #8]
 80a1790:	b2d0      	uxtb	r0, r2
 80a1792:	9001      	str	r0, [sp, #4]
 80a1794:	fa5f f989 	uxtb.w	r9, r9
 80a1798:	b2d8      	uxtb	r0, r3
 80a179a:	462a      	mov	r2, r5
 80a179c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a179e:	9000      	str	r0, [sp, #0]
 80a17a0:	4649      	mov	r1, r9
 80a17a2:	9805      	ldr	r0, [sp, #20]
 80a17a4:	f7fe fdb2 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
                for (int x = 0; x < 10; x++) {
 80a17a8:	3508      	adds	r5, #8
 80a17aa:	9b06      	ldr	r3, [sp, #24]
 80a17ac:	b2ad      	uxth	r5, r5
 80a17ae:	42ab      	cmp	r3, r5
 80a17b0:	d1d4      	bne.n	80a175c <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0xa4>
                }
            }

            led_index++;
 80a17b2:	f108 0301 	add.w	r3, r8, #1
            led_index = led_index%10;
 80a17b6:	fbb3 f2f6 	udiv	r2, r3, r6
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a17ba:	340a      	adds	r4, #10
 80a17bc:	b2e4      	uxtb	r4, r4
 80a17be:	2c46      	cmp	r4, #70	; 0x46
            led_index = led_index%10;
 80a17c0:	fb06 3812 	mls	r8, r6, r2, r3
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a17c4:	d197      	bne.n	80a16f6 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3e>
    for (char i = 0; i < disp_width/2; i++) {
 80a17c6:	f10b 0b01 	add.w	fp, fp, #1
 80a17ca:	e785      	b.n	80a16d8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x20>
            // set bar
            if (i-disp_width/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
                float val = level*PI/BINS_MAX;
                for (int x = 0; x < 10; x++) {
                    //mix_pixel(i, x*NUM_BARS+led_index, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                    mix_pixel(i, x*NUM_BARS+led_index, in_factor, bd->r(), bd->g(), bd->b());
 80a17cc:	4f79      	ldr	r7, [pc, #484]	; (80a19b4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
    for (char i = disp_width/2; i < disp_width; i++) {
 80a17ce:	b2e4      	uxtb	r4, r4
 80a17d0:	4b76      	ldr	r3, [pc, #472]	; (80a19ac <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
 80a17d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a17d6:	429c      	cmp	r4, r3
 80a17d8:	da69      	bge.n	80a18ae <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x1f6>
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a17da:	2500      	movs	r5, #0
            int level = bins->right[j/10];
 80a17dc:	f04f 080a 	mov.w	r8, #10
        int led_index = 0;
 80a17e0:	462e      	mov	r6, r5
            int level = bins->right[j/10];
 80a17e2:	fbb5 f3f8 	udiv	r3, r5, r8
 80a17e6:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
            level *= FREQ_GAIN;
 80a17ea:	69d8      	ldr	r0, [r3, #28]
 80a17ec:	f008 f884 	bl	80a98f8 <__aeabi_i2f>
            if (i-disp_width/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
 80a17f0:	4b6e      	ldr	r3, [pc, #440]	; (80a19ac <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
            level *= FREQ_GAIN;
 80a17f2:	4681      	mov	r9, r0
            if (i-disp_width/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
 80a17f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a17f8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80a17fc:	eba4 0063 	sub.w	r0, r4, r3, asr #1
 80a1800:	f007 fc0e 	bl	80a9020 <__aeabi_i2d>
 80a1804:	e9cd 0106 	strd	r0, r1, [sp, #24]
            level *= FREQ_GAIN;
 80a1808:	4648      	mov	r0, r9
 80a180a:	f008 faa5 	bl	80a9d58 <__aeabi_f2iz>
            if (i-disp_width/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
 80a180e:	f008 f873 	bl	80a98f8 <__aeabi_i2f>
 80a1812:	4967      	ldr	r1, [pc, #412]	; (80a19b0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f8>)
 80a1814:	f008 f978 	bl	80a9b08 <__aeabi_fdiv>
 80a1818:	2102      	movs	r1, #2
 80a181a:	f7ff f8b3 	bl	80a0984 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a181e:	4602      	mov	r2, r0
 80a1820:	460b      	mov	r3, r1
 80a1822:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a1826:	4b61      	ldr	r3, [pc, #388]	; (80a19ac <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
 80a1828:	f9b3 0000 	ldrsh.w	r0, [r3]
 80a182c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80a1830:	1040      	asrs	r0, r0, #1
 80a1832:	f007 fbf5 	bl	80a9020 <__aeabi_i2d>
 80a1836:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a183a:	f007 fc5b 	bl	80a90f4 <__aeabi_dmul>
 80a183e:	4602      	mov	r2, r0
 80a1840:	460b      	mov	r3, r1
 80a1842:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a1846:	f007 fec7 	bl	80a95d8 <__aeabi_dcmplt>
 80a184a:	b320      	cbz	r0, 80a1896 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x1de>
 80a184c:	fa1f fb86 	uxth.w	fp, r6
 80a1850:	f10b 0950 	add.w	r9, fp, #80	; 0x50
 80a1854:	fa1f f989 	uxth.w	r9, r9
                    mix_pixel(i, x*NUM_BARS+led_index, in_factor, bd->r(), bd->g(), bd->b());
 80a1858:	6838      	ldr	r0, [r7, #0]
 80a185a:	f000 fc3e 	bl	80a20da <_ZN14Beat_Detection1rEv>
 80a185e:	9008      	str	r0, [sp, #32]
 80a1860:	6838      	ldr	r0, [r7, #0]
 80a1862:	f000 fc3c 	bl	80a20de <_ZN14Beat_Detection1gEv>
 80a1866:	9006      	str	r0, [sp, #24]
 80a1868:	6838      	ldr	r0, [r7, #0]
 80a186a:	f000 fc3a 	bl	80a20e2 <_ZN14Beat_Detection1bEv>
 80a186e:	9a06      	ldr	r2, [sp, #24]
 80a1870:	9b08      	ldr	r3, [sp, #32]
 80a1872:	b2d2      	uxtb	r2, r2
 80a1874:	b2c0      	uxtb	r0, r0
 80a1876:	9201      	str	r2, [sp, #4]
 80a1878:	b2db      	uxtb	r3, r3
 80a187a:	465a      	mov	r2, fp
 80a187c:	f10b 0b08 	add.w	fp, fp, #8
 80a1880:	9002      	str	r0, [sp, #8]
 80a1882:	9300      	str	r3, [sp, #0]
 80a1884:	4621      	mov	r1, r4
 80a1886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1888:	9805      	ldr	r0, [sp, #20]
 80a188a:	fa1f fb8b 	uxth.w	fp, fp
 80a188e:	f7fe fd3d 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
                for (int x = 0; x < 10; x++) {
 80a1892:	45d9      	cmp	r9, fp
 80a1894:	d1e0      	bne.n	80a1858 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x1a0>
                }
            }

            led_index++;
 80a1896:	3601      	adds	r6, #1
            led_index = led_index%10;
 80a1898:	fbb6 f3f8 	udiv	r3, r6, r8
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a189c:	350a      	adds	r5, #10
 80a189e:	b2ed      	uxtb	r5, r5
 80a18a0:	2d46      	cmp	r5, #70	; 0x46
            led_index = led_index%10;
 80a18a2:	fb08 6613 	mls	r6, r8, r3, r6
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a18a6:	d19c      	bne.n	80a17e2 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x12a>
    for (char i = disp_width/2; i < disp_width; i++) {
 80a18a8:	3401      	adds	r4, #1
 80a18aa:	b2e4      	uxtb	r4, r4
 80a18ac:	e790      	b.n	80a17d0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x118>
 80a18ae:	2300      	movs	r3, #0
                break;
            }
            level *= FREQ_GAIN;

            // set bar
            if (j < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
 80a18b0:	4d3f      	ldr	r5, [pc, #252]	; (80a19b0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f8>)
 80a18b2:	930a      	str	r3, [sp, #40]	; 0x28
    for (char i = 0; i < disp_width; i++) {
 80a18b4:	4b3d      	ldr	r3, [pc, #244]	; (80a19ac <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
 80a18b6:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 80a18ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a18be:	429c      	cmp	r4, r3
 80a18c0:	f280 80dc 	bge.w	80a1a7c <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3c4>
 80a18c4:	f04f 0b00 	mov.w	fp, #0
            switch(i) {
 80a18c8:	2c07      	cmp	r4, #7
 80a18ca:	d86d      	bhi.n	80a19a8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f0>
 80a18cc:	e8df f004 	tbb	[pc, r4]
 80a18d0:	605d5a04 	.word	0x605d5a04
 80a18d4:	69606663 	.word	0x69606663
                level = bins->left[LEFT_63]; //1kHz
 80a18d8:	f8da 0000 	ldr.w	r0, [sl]
            level *= FREQ_GAIN;
 80a18dc:	f008 f80c 	bl	80a98f8 <__aeabi_i2f>
 80a18e0:	f008 fa3a 	bl	80a9d58 <__aeabi_f2iz>
            if (j < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
 80a18e4:	f008 f808 	bl	80a98f8 <__aeabi_i2f>
 80a18e8:	4629      	mov	r1, r5
 80a18ea:	f008 f90d 	bl	80a9b08 <__aeabi_fdiv>
 80a18ee:	2102      	movs	r1, #2
 80a18f0:	f7ff f848 	bl	80a0984 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a18f4:	4680      	mov	r8, r0
 80a18f6:	4658      	mov	r0, fp
 80a18f8:	4689      	mov	r9, r1
 80a18fa:	f007 fb91 	bl	80a9020 <__aeabi_i2d>
 80a18fe:	2200      	movs	r2, #0
 80a1900:	4606      	mov	r6, r0
 80a1902:	460f      	mov	r7, r1
 80a1904:	4b2c      	ldr	r3, [pc, #176]	; (80a19b8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x300>)
 80a1906:	4640      	mov	r0, r8
 80a1908:	4649      	mov	r1, r9
 80a190a:	f007 fbf3 	bl	80a90f4 <__aeabi_dmul>
 80a190e:	4602      	mov	r2, r0
 80a1910:	460b      	mov	r3, r1
 80a1912:	4630      	mov	r0, r6
 80a1914:	4639      	mov	r1, r7
 80a1916:	f007 fe5f 	bl	80a95d8 <__aeabi_dcmplt>
 80a191a:	b300      	cbz	r0, 80a195e <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2a6>
                float val = level*2*PI/BINS_MAX;
                mix_pixel(i, STRIP_LENGTH/2 - j, .95, 255-bd->r(), 255-bd->g(), 255-bd->b());
 80a191c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80a19b4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>
 80a1920:	f8d8 0000 	ldr.w	r0, [r8]
 80a1924:	f000 fbd9 	bl	80a20da <_ZN14Beat_Detection1rEv>
 80a1928:	4606      	mov	r6, r0
 80a192a:	f8d8 0000 	ldr.w	r0, [r8]
 80a192e:	f000 fbd6 	bl	80a20de <_ZN14Beat_Detection1gEv>
 80a1932:	4607      	mov	r7, r0
 80a1934:	f8d8 0000 	ldr.w	r0, [r8]
 80a1938:	f000 fbd3 	bl	80a20e2 <_ZN14Beat_Detection1bEv>
 80a193c:	43ff      	mvns	r7, r7
 80a193e:	43c0      	mvns	r0, r0
 80a1940:	43f6      	mvns	r6, r6
 80a1942:	b2c0      	uxtb	r0, r0
 80a1944:	f1cb 0223 	rsb	r2, fp, #35	; 0x23
 80a1948:	b2ff      	uxtb	r7, r7
 80a194a:	b2f6      	uxtb	r6, r6
 80a194c:	9002      	str	r0, [sp, #8]
 80a194e:	4621      	mov	r1, r4
 80a1950:	4b1a      	ldr	r3, [pc, #104]	; (80a19bc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x304>)
 80a1952:	9805      	ldr	r0, [sp, #20]
 80a1954:	9701      	str	r7, [sp, #4]
 80a1956:	9600      	str	r6, [sp, #0]
 80a1958:	b292      	uxth	r2, r2
 80a195a:	f7fe fcd7 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = 0; j < STRIP_LENGTH/4; j++) {
 80a195e:	f10b 0b01 	add.w	fp, fp, #1
 80a1962:	f1bb 0f11 	cmp.w	fp, #17
 80a1966:	d1af      	bne.n	80a18c8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x210>
 80a1968:	f04f 0b23 	mov.w	fp, #35	; 0x23
            }
        }

        // Left bins, grow upwards
        for (char j = STRIP_LENGTH/2; j < STRIP_LENGTH*0.75f; j++) {
 80a196c:	f1bb 0f35 	cmp.w	fp, #53	; 0x35
 80a1970:	f000 8080 	beq.w	80a1a74 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3bc>
            // get bin
            int level = 0;
            switch(i) {
 80a1974:	2c07      	cmp	r4, #7
 80a1976:	d87b      	bhi.n	80a1a70 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3b8>
 80a1978:	e8df f004 	tbb	[pc, r4]
 80a197c:	6e6b6822 	.word	0x6e6b6822
 80a1980:	776e7471 	.word	0x776e7471
                level = bins->left[LEFT_160]; //6.25kHz
 80a1984:	f8da 0004 	ldr.w	r0, [sl, #4]
                break;
 80a1988:	e7a8      	b.n	80a18dc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
                level = bins->left[LEFT_400]; //63Hz
 80a198a:	f8da 0008 	ldr.w	r0, [sl, #8]
                break;
 80a198e:	e7a5      	b.n	80a18dc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
                level = bins->left[LEFT_1000]; //400Hz
 80a1990:	f8da 000c 	ldr.w	r0, [sl, #12]
                break;
 80a1994:	e7a2      	b.n	80a18dc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
                level = bins->left[LEFT_2500]; //400Hz
 80a1996:	f8da 0010 	ldr.w	r0, [sl, #16]
                break;
 80a199a:	e79f      	b.n	80a18dc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
                level = bins->left[LEFT_6250]; //63Hz
 80a199c:	f8da 0014 	ldr.w	r0, [sl, #20]
                break;
 80a19a0:	e79c      	b.n	80a18dc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
                level = bins->left[LEFT_16000]; //1kHz
 80a19a2:	f8da 0018 	ldr.w	r0, [sl, #24]
                break;
 80a19a6:	e799      	b.n	80a18dc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
 80a19a8:	2000      	movs	r0, #0
 80a19aa:	e797      	b.n	80a18dc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
 80a19ac:	2000007e 	.word	0x2000007e
 80a19b0:	457ff000 	.word	0x457ff000
 80a19b4:	20000074 	.word	0x20000074
 80a19b8:	40418000 	.word	0x40418000
 80a19bc:	3f733333 	.word	0x3f733333
                case 0:
                level = bins->right[LEFT_63]; //1kHz
 80a19c0:	f8da 001c 	ldr.w	r0, [sl, #28]
                break;
                case 7:
                level = bins->right[LEFT_16000]; //1kHz
                break;
            }
            level *= FREQ_GAIN;
 80a19c4:	f007 ff98 	bl	80a98f8 <__aeabi_i2f>
 80a19c8:	f008 f9c6 	bl	80a9d58 <__aeabi_f2iz>
            // set bar
            float p = (float)(level)/(float)(BINS_MAX);
 80a19cc:	f007 ff94 	bl	80a98f8 <__aeabi_i2f>
 80a19d0:	4629      	mov	r1, r5
 80a19d2:	f008 f899 	bl	80a9b08 <__aeabi_fdiv>
            if (j-STRIP_LENGTH/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
 80a19d6:	2102      	movs	r1, #2
 80a19d8:	f7fe ffd4 	bl	80a0984 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a19dc:	4606      	mov	r6, r0
 80a19de:	f1ab 0023 	sub.w	r0, fp, #35	; 0x23
 80a19e2:	460f      	mov	r7, r1
 80a19e4:	f007 fb1c 	bl	80a9020 <__aeabi_i2d>
 80a19e8:	2200      	movs	r2, #0
 80a19ea:	4680      	mov	r8, r0
 80a19ec:	4689      	mov	r9, r1
 80a19ee:	4b25      	ldr	r3, [pc, #148]	; (80a1a84 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3cc>)
 80a19f0:	4630      	mov	r0, r6
 80a19f2:	4639      	mov	r1, r7
 80a19f4:	f007 fb7e 	bl	80a90f4 <__aeabi_dmul>
 80a19f8:	4602      	mov	r2, r0
 80a19fa:	460b      	mov	r3, r1
 80a19fc:	4640      	mov	r0, r8
 80a19fe:	4649      	mov	r1, r9
 80a1a00:	f007 fdea 	bl	80a95d8 <__aeabi_dcmplt>
 80a1a04:	b1f8      	cbz	r0, 80a1a46 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x38e>
                //j-STRIP_LENGTH/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
                float val = level*2*PI/BINS_MAX;
                //mix_pixel(i, j, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                mix_pixel(i, j, .95, 255-bd->r(), 255-bd->g(), 255-bd->b());//reds[i], greens[i], blues[i]);
 80a1a06:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80a1a8c <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3d4>
 80a1a0a:	f8d8 0000 	ldr.w	r0, [r8]
 80a1a0e:	f000 fb64 	bl	80a20da <_ZN14Beat_Detection1rEv>
 80a1a12:	4606      	mov	r6, r0
 80a1a14:	f8d8 0000 	ldr.w	r0, [r8]
 80a1a18:	f000 fb61 	bl	80a20de <_ZN14Beat_Detection1gEv>
 80a1a1c:	4607      	mov	r7, r0
 80a1a1e:	f8d8 0000 	ldr.w	r0, [r8]
 80a1a22:	f000 fb5e 	bl	80a20e2 <_ZN14Beat_Detection1bEv>
 80a1a26:	43ff      	mvns	r7, r7
 80a1a28:	43c0      	mvns	r0, r0
 80a1a2a:	43f6      	mvns	r6, r6
 80a1a2c:	b2c0      	uxtb	r0, r0
 80a1a2e:	b2ff      	uxtb	r7, r7
 80a1a30:	b2f6      	uxtb	r6, r6
 80a1a32:	9002      	str	r0, [sp, #8]
 80a1a34:	4621      	mov	r1, r4
 80a1a36:	4b14      	ldr	r3, [pc, #80]	; (80a1a88 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3d0>)
 80a1a38:	9805      	ldr	r0, [sp, #20]
 80a1a3a:	9701      	str	r7, [sp, #4]
 80a1a3c:	9600      	str	r6, [sp, #0]
 80a1a3e:	fa1f f28b 	uxth.w	r2, fp
 80a1a42:	f7fe fc63 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = STRIP_LENGTH/2; j < STRIP_LENGTH*0.75f; j++) {
 80a1a46:	f10b 0b01 	add.w	fp, fp, #1
 80a1a4a:	e78f      	b.n	80a196c <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2b4>
                level = bins->right[LEFT_160]; //6.25kHz
 80a1a4c:	f8da 0020 	ldr.w	r0, [sl, #32]
                break;
 80a1a50:	e7b8      	b.n	80a19c4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
                level = bins->right[LEFT_400]; //63Hz
 80a1a52:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
                break;
 80a1a56:	e7b5      	b.n	80a19c4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
                level = bins->right[LEFT_1000]; //400Hz
 80a1a58:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
                break;
 80a1a5c:	e7b2      	b.n	80a19c4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
                level = bins->right[LEFT_2500]; //400Hz
 80a1a5e:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
                break;
 80a1a62:	e7af      	b.n	80a19c4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
                level = bins->right[LEFT_6250]; //63Hz
 80a1a64:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
                break;
 80a1a68:	e7ac      	b.n	80a19c4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
                level = bins->right[LEFT_16000]; //1kHz
 80a1a6a:	f8da 0034 	ldr.w	r0, [sl, #52]	; 0x34
                break;
 80a1a6e:	e7a9      	b.n	80a19c4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
        for (char j = STRIP_LENGTH/2; j < STRIP_LENGTH*0.75f; j++) {
 80a1a70:	2000      	movs	r0, #0
 80a1a72:	e7a7      	b.n	80a19c4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
    for (char i = 0; i < disp_width; i++) {
 80a1a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1a76:	3301      	adds	r3, #1
 80a1a78:	930a      	str	r3, [sp, #40]	; 0x28
 80a1a7a:	e71b      	b.n	80a18b4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x1fc>
            }
        }
    }
}
 80a1a7c:	b00d      	add	sp, #52	; 0x34
 80a1a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1a82:	bf00      	nop
 80a1a84:	40418000 	.word	0x40418000
 80a1a88:	3f733333 	.word	0x3f733333
 80a1a8c:	20000074 	.word	0x20000074

080a1a90 <_ZN10Bar_Matrix11snake_linesEf>:
    unsigned char r, g, b;

    // TODO: add code to convert from HSV to RGB and vice versa in
    //       constructor.
    Color_Value(unsigned char red, unsigned char green, unsigned char blue) :
    c((red << 16) | (green << 8) | blue), r(red), g(green), b(blue) {}
 80a1a90:	2300      	movs	r3, #0
/* ================================================================== *
 * Function: snake_lines
 * Description: Snake runs up and down each bar
 * Parameters: [float] speed - speed snake moves at
 * ================================================================== */
void Bar_Matrix::snake_lines(float speed) {
 80a1a92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1a96:	4605      	mov	r5, r0
 80a1a98:	b086      	sub	sp, #24
 80a1a9a:	9304      	str	r3, [sp, #16]
 80a1a9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80a1aa0:	f88d 3016 	strb.w	r3, [sp, #22]
    bool noChange = true;

    fill_matrix(Color_Value(0, 0, 0));
 80a1aa4:	ab06      	add	r3, sp, #24
 80a1aa6:	e913 0006 	ldmdb	r3, {r1, r2}
 80a1aaa:	f7fe fbeb 	bl	80a0284 <_ZN10Bar_Matrix11fill_matrixE11Color_Value>

    for (int x = 0; x < NUM_SNAKES; x++) {
 80a1aae:	462c      	mov	r4, r5
    bool noChange = true;
 80a1ab0:	2601      	movs	r6, #1
        Snake *s = &snakes[x];

        for (int i = 0; i < s->len; i++) {
            int b = (s->pos + i) / 70; // bar
 80a1ab2:	2746      	movs	r7, #70	; 0x46

            if (b % 2 == 1) {
                p = 69-p;
            }

            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1ab4:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80a1bcc <_ZN10Bar_Matrix11snake_linesEf+0x13c>
 80a1ab8:	f105 0880 	add.w	r8, r5, #128	; 0x80
        for (int i = 0; i < s->len; i++) {
 80a1abc:	f04f 0a00 	mov.w	sl, #0
 80a1ac0:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 80a1ac4:	4553      	cmp	r3, sl
 80a1ac6:	dd21      	ble.n	80a1b0c <_ZN10Bar_Matrix11snake_linesEf+0x7c>
            int b = (s->pos + i) / 70; // bar
 80a1ac8:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1acc:	4628      	mov	r0, r5
            int b = (s->pos + i) / 70; // bar
 80a1ace:	4452      	add	r2, sl
 80a1ad0:	fb92 f1f7 	sdiv	r1, r2, r7
            if (b % 2 == 1) {
 80a1ad4:	f001 0301 	and.w	r3, r1, #1
 80a1ad8:	2900      	cmp	r1, #0
 80a1ada:	bfb8      	it	lt
 80a1adc:	425b      	neglt	r3, r3
 80a1ade:	2b01      	cmp	r3, #1
            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1ae0:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
            int p = (s->pos + i) % 70; // pixel
 80a1ae4:	fb07 2211 	mls	r2, r7, r1, r2
            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1ae8:	9302      	str	r3, [sp, #8]
 80a1aea:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
                p = 69-p;
 80a1aee:	bf08      	it	eq
 80a1af0:	f1c2 0245 	rsbeq	r2, r2, #69	; 0x45
            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1af4:	9301      	str	r3, [sp, #4]
 80a1af6:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 80a1afa:	b292      	uxth	r2, r2
 80a1afc:	9300      	str	r3, [sp, #0]
 80a1afe:	b2c9      	uxtb	r1, r1
 80a1b00:	464b      	mov	r3, r9
 80a1b02:	f7fe fc03 	bl	80a030c <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (int i = 0; i < s->len; i++) {
 80a1b06:	f10a 0a01 	add.w	sl, sl, #1
 80a1b0a:	e7d9      	b.n	80a1ac0 <_ZN10Bar_Matrix11snake_linesEf+0x30>
        }

        if (noChange && random(0, 10) > 7) {
 80a1b0c:	b1b6      	cbz	r6, 80a1b3c <_ZN10Bar_Matrix11snake_linesEf+0xac>
 80a1b0e:	210a      	movs	r1, #10
 80a1b10:	2000      	movs	r0, #0
 80a1b12:	f002 fe04 	bl	80a471e <_Z6randomii>
 80a1b16:	2807      	cmp	r0, #7
 80a1b18:	dd10      	ble.n	80a1b3c <_ZN10Bar_Matrix11snake_linesEf+0xac>
            s->r = bd->r();
 80a1b1a:	4e2a      	ldr	r6, [pc, #168]	; (80a1bc4 <_ZN10Bar_Matrix11snake_linesEf+0x134>)
 80a1b1c:	6830      	ldr	r0, [r6, #0]
 80a1b1e:	f000 fadc 	bl	80a20da <_ZN14Beat_Detection1rEv>
 80a1b22:	f8c4 00f4 	str.w	r0, [r4, #244]	; 0xf4
            s->g = bd->g();
 80a1b26:	6830      	ldr	r0, [r6, #0]
 80a1b28:	f000 fad9 	bl	80a20de <_ZN14Beat_Detection1gEv>
 80a1b2c:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
            s->b = bd->b();
 80a1b30:	6830      	ldr	r0, [r6, #0]
 80a1b32:	f000 fad6 	bl	80a20e2 <_ZN14Beat_Detection1bEv>
            noChange = false;
 80a1b36:	2600      	movs	r6, #0
            s->b = bd->b();
 80a1b38:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
        }

        s->posTicks++;
 80a1b3c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
        if (s->posTicks >= s->ticksNeeded) {
 80a1b40:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
        s->posTicks++;
 80a1b44:	3301      	adds	r3, #1
        if (s->posTicks >= s->ticksNeeded) {
 80a1b46:	4293      	cmp	r3, r2
        s->posTicks++;
 80a1b48:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        if (s->posTicks >= s->ticksNeeded) {
 80a1b4c:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 80a1b50:	db07      	blt.n	80a1b62 <_ZN10Bar_Matrix11snake_linesEf+0xd2>
            s->posTicks = 0;
 80a1b52:	2300      	movs	r3, #0
 80a1b54:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
            s->pos += s->dir;
 80a1b58:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80a1b5c:	4413      	add	r3, r2
 80a1b5e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
        }
        if ((s->dir > 0 && s->pos > 8*70+s->len) ||
 80a1b62:	2a00      	cmp	r2, #0
 80a1b64:	dd0d      	ble.n	80a1b82 <_ZN10Bar_Matrix11snake_linesEf+0xf2>
 80a1b66:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 80a1b6a:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
 80a1b6e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80a1b72:	429a      	cmp	r2, r3
 80a1b74:	dc0d      	bgt.n	80a1b92 <_ZN10Bar_Matrix11snake_linesEf+0x102>
    for (int x = 0; x < NUM_SNAKES; x++) {
 80a1b76:	3420      	adds	r4, #32
 80a1b78:	45a0      	cmp	r8, r4
 80a1b7a:	d19f      	bne.n	80a1abc <_ZN10Bar_Matrix11snake_linesEf+0x2c>
            color_table_idx = color_table_idx % 50;

            s->pos = s->dir > 0 ? -s->len : 8*70;
        }
    }
}
 80a1b7c:	b006      	add	sp, #24
 80a1b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((s->dir > 0 && s->pos > 8*70+s->len) ||
 80a1b82:	d0f8      	beq.n	80a1b76 <_ZN10Bar_Matrix11snake_linesEf+0xe6>
            (s->dir < 0 && s->pos < -s->len))
 80a1b84:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 80a1b88:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
 80a1b8c:	425b      	negs	r3, r3
 80a1b8e:	429a      	cmp	r2, r3
 80a1b90:	daf1      	bge.n	80a1b76 <_ZN10Bar_Matrix11snake_linesEf+0xe6>
            color_table_idx += random(0, 10);
 80a1b92:	210a      	movs	r1, #10
 80a1b94:	2000      	movs	r0, #0
 80a1b96:	f002 fdc2 	bl	80a471e <_Z6randomii>
            color_table_idx = color_table_idx % 50;
 80a1b9a:	2132      	movs	r1, #50	; 0x32
 80a1b9c:	4a0a      	ldr	r2, [pc, #40]	; (80a1bc8 <_ZN10Bar_Matrix11snake_linesEf+0x138>)
            color_table_idx += random(0, 10);
 80a1b9e:	6813      	ldr	r3, [r2, #0]
 80a1ba0:	4418      	add	r0, r3
            color_table_idx = color_table_idx % 50;
 80a1ba2:	fb90 f3f1 	sdiv	r3, r0, r1
 80a1ba6:	fb01 0013 	mls	r0, r1, r3, r0
 80a1baa:	6010      	str	r0, [r2, #0]
            s->pos = s->dir > 0 ? -s->len : 8*70;
 80a1bac:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80a1bb0:	2b00      	cmp	r3, #0
 80a1bb2:	bfd2      	itee	le
 80a1bb4:	f44f 730c 	movle.w	r3, #560	; 0x230
 80a1bb8:	f8d4 30e4 	ldrgt.w	r3, [r4, #228]	; 0xe4
 80a1bbc:	425b      	neggt	r3, r3
 80a1bbe:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 80a1bc2:	e7d8      	b.n	80a1b76 <_ZN10Bar_Matrix11snake_linesEf+0xe6>
 80a1bc4:	20000074 	.word	0x20000074
 80a1bc8:	20000078 	.word	0x20000078
 80a1bcc:	3f733333 	.word	0x3f733333

080a1bd0 <_ZN10Bar_Matrix16visualizer_wheelEff>:
 * Description: Sets all bars to a color while rotating through all
 *              hues in order of the rainbow
 * Parameters: [float] intensity - intensity of lights
 *             [float] speed - speed wheel rotates at
 * ================================================================== */
void Bar_Matrix::visualizer_wheel(float intensity, float speed) {
 80a1bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1bd4:	460c      	mov	r4, r1
 80a1bd6:	4683      	mov	fp, r0
 80a1bd8:	f001 ff02 	bl	80a39e0 <HAL_Timer_Get_Milli_Seconds>
    float val = fmod(millis()/10000.0f,1.0f)*2.0f*PI;
 80a1bdc:	f007 fe88 	bl	80a98f0 <__aeabi_ui2f>
 80a1be0:	493d      	ldr	r1, [pc, #244]	; (80a1cd8 <_ZN10Bar_Matrix16visualizer_wheelEff+0x108>)
 80a1be2:	f007 ff91 	bl	80a9b08 <__aeabi_fdiv>
  { return __builtin_fmodf(__x, __y); }
 80a1be6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a1bea:	f003 ff41 	bl	80a5a70 <fmodf>
 80a1bee:	4601      	mov	r1, r0
 80a1bf0:	f007 fdce 	bl	80a9790 <__addsf3>
 80a1bf4:	f007 fa26 	bl	80a9044 <__aeabi_f2d>
 80a1bf8:	a32f      	add	r3, pc, #188	; (adr r3, 80a1cb8 <_ZN10Bar_Matrix16visualizer_wheelEff+0xe8>)
 80a1bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1bfe:	f007 fa79 	bl	80a90f4 <__aeabi_dmul>
 80a1c02:	f007 fd6f 	bl	80a96e4 <__aeabi_d2f>
 80a1c06:	4605      	mov	r5, r0
  { return __builtin_cosf(__x); }
 80a1c08:	f003 fd58 	bl	80a56bc <cosf>
    fill_matrix(Color_Value(cos(val)*255*intensity, cos(val - 2*PI/3)*255*intensity, cos(val - 4*PI/3)*255*intensity));
 80a1c0c:	4933      	ldr	r1, [pc, #204]	; (80a1cdc <_ZN10Bar_Matrix16visualizer_wheelEff+0x10c>)
 80a1c0e:	f007 fec7 	bl	80a99a0 <__aeabi_fmul>
 80a1c12:	4621      	mov	r1, r4
 80a1c14:	f007 fec4 	bl	80a99a0 <__aeabi_fmul>
 80a1c18:	f008 f8c4 	bl	80a9da4 <__aeabi_f2uiz>
 80a1c1c:	fa5f fa80 	uxtb.w	sl, r0
 80a1c20:	4628      	mov	r0, r5
 80a1c22:	f007 fa0f 	bl	80a9044 <__aeabi_f2d>
 80a1c26:	a326      	add	r3, pc, #152	; (adr r3, 80a1cc0 <_ZN10Bar_Matrix16visualizer_wheelEff+0xf0>)
 80a1c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c2c:	4606      	mov	r6, r0
 80a1c2e:	460f      	mov	r7, r1
 80a1c30:	f007 f8a8 	bl	80a8d84 <__aeabi_dsub>
 80a1c34:	f003 fcec 	bl	80a5610 <cos>
 80a1c38:	4680      	mov	r8, r0
 80a1c3a:	4620      	mov	r0, r4
 80a1c3c:	4689      	mov	r9, r1
 80a1c3e:	f007 fa01 	bl	80a9044 <__aeabi_f2d>
 80a1c42:	a321      	add	r3, pc, #132	; (adr r3, 80a1cc8 <_ZN10Bar_Matrix16visualizer_wheelEff+0xf8>)
 80a1c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c48:	4604      	mov	r4, r0
 80a1c4a:	460d      	mov	r5, r1
 80a1c4c:	4640      	mov	r0, r8
 80a1c4e:	4649      	mov	r1, r9
 80a1c50:	f007 fa50 	bl	80a90f4 <__aeabi_dmul>
 80a1c54:	4622      	mov	r2, r4
 80a1c56:	462b      	mov	r3, r5
 80a1c58:	f007 fa4c 	bl	80a90f4 <__aeabi_dmul>
 80a1c5c:	f007 fd22 	bl	80a96a4 <__aeabi_d2uiz>
 80a1c60:	a31b      	add	r3, pc, #108	; (adr r3, 80a1cd0 <_ZN10Bar_Matrix16visualizer_wheelEff+0x100>)
 80a1c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c66:	fa5f f880 	uxtb.w	r8, r0
 80a1c6a:	4639      	mov	r1, r7
 80a1c6c:	4630      	mov	r0, r6
 80a1c6e:	f007 f889 	bl	80a8d84 <__aeabi_dsub>
 80a1c72:	f003 fccd 	bl	80a5610 <cos>
 80a1c76:	a314      	add	r3, pc, #80	; (adr r3, 80a1cc8 <_ZN10Bar_Matrix16visualizer_wheelEff+0xf8>)
 80a1c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c7c:	f007 fa3a 	bl	80a90f4 <__aeabi_dmul>
 80a1c80:	4622      	mov	r2, r4
 80a1c82:	462b      	mov	r3, r5
 80a1c84:	f007 fa36 	bl	80a90f4 <__aeabi_dmul>
 80a1c88:	f007 fd0c 	bl	80a96a4 <__aeabi_d2uiz>
 80a1c8c:	ea4f 2308 	mov.w	r3, r8, lsl #8
 80a1c90:	b2c0      	uxtb	r0, r0
 80a1c92:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80a1c96:	4303      	orrs	r3, r0
 80a1c98:	f88d 0006 	strb.w	r0, [sp, #6]
 80a1c9c:	4658      	mov	r0, fp
 80a1c9e:	9300      	str	r3, [sp, #0]
 80a1ca0:	f88d a004 	strb.w	sl, [sp, #4]
 80a1ca4:	f88d 8005 	strb.w	r8, [sp, #5]
 80a1ca8:	ab02      	add	r3, sp, #8
 80a1caa:	e913 0006 	ldmdb	r3, {r1, r2}
}
 80a1cae:	b003      	add	sp, #12
 80a1cb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fill_matrix(Color_Value(cos(val)*255*intensity, cos(val - 2*PI/3)*255*intensity, cos(val - 4*PI/3)*255*intensity));
 80a1cb4:	f7fe bae6 	b.w	80a0284 <_ZN10Bar_Matrix11fill_matrixE11Color_Value>
 80a1cb8:	fc8b007a 	.word	0xfc8b007a
 80a1cbc:	400921fa 	.word	0x400921fa
 80a1cc0:	fdb20051 	.word	0xfdb20051
 80a1cc4:	4000c151 	.word	0x4000c151
 80a1cc8:	00000000 	.word	0x00000000
 80a1ccc:	406fe000 	.word	0x406fe000
 80a1cd0:	fdb20051 	.word	0xfdb20051
 80a1cd4:	4010c151 	.word	0x4010c151
 80a1cd8:	461c4000 	.word	0x461c4000
 80a1cdc:	437f0000 	.word	0x437f0000

080a1ce0 <_ZN10Bar_Matrix4tickEP10audio_binsi>:
    switch (visualizer_type) {
 80a1ce0:	2a09      	cmp	r2, #9
void Bar_Matrix::tick(audio_bins * bins, int visualizer_type) {
 80a1ce2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a1ce4:	4604      	mov	r4, r0
    switch (visualizer_type) {
 80a1ce6:	dc0b      	bgt.n	80a1d00 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x20>
 80a1ce8:	2a00      	cmp	r2, #0
 80a1cea:	db10      	blt.n	80a1d0e <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
 80a1cec:	3a01      	subs	r2, #1
 80a1cee:	2a08      	cmp	r2, #8
 80a1cf0:	d81e      	bhi.n	80a1d30 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x50>
 80a1cf2:	e8df f002 	tbb	[pc, r2]
 80a1cf6:	3924      	.short	0x3924
 80a1cf8:	34524d43 	.word	0x34524d43
 80a1cfc:	293f      	.short	0x293f
 80a1cfe:	2e          	.byte	0x2e
 80a1cff:	00          	.byte	0x00
 80a1d00:	2a4e      	cmp	r2, #78	; 0x4e
 80a1d02:	d053      	beq.n	80a1dac <_ZN10Bar_Matrix4tickEP10audio_binsi+0xcc>
 80a1d04:	dc0d      	bgt.n	80a1d22 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x42>
 80a1d06:	2a42      	cmp	r2, #66	; 0x42
 80a1d08:	d058      	beq.n	80a1dbc <_ZN10Bar_Matrix4tickEP10audio_binsi+0xdc>
 80a1d0a:	2a4d      	cmp	r2, #77	; 0x4d
 80a1d0c:	d04b      	beq.n	80a1da6 <_ZN10Bar_Matrix4tickEP10audio_binsi+0xc6>
    bd->frame_ticked();
 80a1d0e:	4b33      	ldr	r3, [pc, #204]	; (80a1ddc <_ZN10Bar_Matrix4tickEP10audio_binsi+0xfc>)
 80a1d10:	6818      	ldr	r0, [r3, #0]
 80a1d12:	f000 f9d3 	bl	80a20bc <_ZN14Beat_Detection12frame_tickedEv>
    show_all();
 80a1d16:	4620      	mov	r0, r4
}
 80a1d18:	b004      	add	sp, #16
 80a1d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    show_all();
 80a1d1e:	f7fe bce5 	b.w	80a06ec <_ZN10Bar_Matrix8show_allEv>
    switch (visualizer_type) {
 80a1d22:	2a58      	cmp	r2, #88	; 0x58
 80a1d24:	d047      	beq.n	80a1db6 <_ZN10Bar_Matrix4tickEP10audio_binsi+0xd6>
 80a1d26:	2a63      	cmp	r2, #99	; 0x63
 80a1d28:	d1f1      	bne.n	80a1d0e <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          pixel_test();
 80a1d2a:	f7fe fe05 	bl	80a0938 <_ZN10Bar_Matrix10pixel_testEv>
          break;
 80a1d2e:	e7ee      	b.n	80a1d0e <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_bars(bins, 0.15, 0.85, false);
 80a1d30:	2300      	movs	r3, #0
 80a1d32:	4a2b      	ldr	r2, [pc, #172]	; (80a1de0 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d34:	9300      	str	r3, [sp, #0]
 80a1d36:	4b2b      	ldr	r3, [pc, #172]	; (80a1de4 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x104>)
 80a1d38:	f7fe fe36 	bl	80a09a8 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb>
          break;
 80a1d3c:	e7e7      	b.n	80a1d0e <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_bars_middle(bins, 0.15, 0.85);
 80a1d3e:	4b29      	ldr	r3, [pc, #164]	; (80a1de4 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x104>)
 80a1d40:	4a27      	ldr	r2, [pc, #156]	; (80a1de0 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d42:	f7fe ffa1 	bl	80a0c88 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff>
          break;
 80a1d46:	e7e2      	b.n	80a1d0e <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_bass_middle(bins, 0.15, 0.80);
 80a1d48:	4b27      	ldr	r3, [pc, #156]	; (80a1de8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x108>)
 80a1d4a:	4a25      	ldr	r2, [pc, #148]	; (80a1de0 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d4c:	f7ff f87e 	bl	80a0e4c <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff>
          break;
 80a1d50:	e7dd      	b.n	80a1d0e <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_bass_slide(bins, 0.15, 0.75);
 80a1d52:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80a1d56:	4a22      	ldr	r2, [pc, #136]	; (80a1de0 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d58:	f7ff f91e 	bl	80a0f98 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff>
          break;
 80a1d5c:	e7d7      	b.n	80a1d0e <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
            visualizer_classic(bins, 0.15, 0.9);
 80a1d5e:	4b23      	ldr	r3, [pc, #140]	; (80a1dec <_ZN10Bar_Matrix4tickEP10audio_binsi+0x10c>)
 80a1d60:	4a1f      	ldr	r2, [pc, #124]	; (80a1de0 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d62:	f7ff fa11 	bl	80a1188 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff>
            break;
 80a1d66:	e7d2      	b.n	80a1d0e <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_plasma(bins, 0.5, 0.965);
 80a1d68:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80a1d6c:	4b20      	ldr	r3, [pc, #128]	; (80a1df0 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x110>)
 80a1d6e:	f7ff fa5b 	bl	80a1228 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff>
          break;
 80a1d72:	e7cc      	b.n	80a1d0e <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_pong(0.965);
 80a1d74:	491e      	ldr	r1, [pc, #120]	; (80a1df0 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x110>)
 80a1d76:	f7ff fb45 	bl	80a1404 <_ZN10Bar_Matrix15visualizer_pongEf>
          break;
 80a1d7a:	e7c8      	b.n	80a1d0e <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_pulse(bins, 0.15, 0.8, 1.0f, 20.0f);
 80a1d7c:	4b1d      	ldr	r3, [pc, #116]	; (80a1df4 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x114>)
 80a1d7e:	4a18      	ldr	r2, [pc, #96]	; (80a1de0 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d80:	9301      	str	r3, [sp, #4]
 80a1d82:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80a1d86:	9300      	str	r3, [sp, #0]
 80a1d88:	4b17      	ldr	r3, [pc, #92]	; (80a1de8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x108>)
 80a1d8a:	f7ff fbef 	bl	80a156c <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff>
          break;
 80a1d8e:	e7be      	b.n	80a1d0e <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_rainbow(bins, 0.15, 0.8);
 80a1d90:	4b15      	ldr	r3, [pc, #84]	; (80a1de8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x108>)
 80a1d92:	4a13      	ldr	r2, [pc, #76]	; (80a1de0 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d94:	f7ff fc90 	bl	80a16b8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff>
          break;
 80a1d98:	e7b9      	b.n	80a1d0e <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_wheel(0.25, 10);
 80a1d9a:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a1d9e:	4a16      	ldr	r2, [pc, #88]	; (80a1df8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x118>)
 80a1da0:	f7ff ff16 	bl	80a1bd0 <_ZN10Bar_Matrix16visualizer_wheelEff>
          break;
 80a1da4:	e7b3      	b.n	80a1d0e <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          bouncing_lines();
 80a1da6:	f7fe fcd7 	bl	80a0758 <_ZN10Bar_Matrix14bouncing_linesEv>
          break;
 80a1daa:	e7b0      	b.n	80a1d0e <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
            snake_lines(0.75);
 80a1dac:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 80a1db0:	f7ff fe6e 	bl	80a1a90 <_ZN10Bar_Matrix11snake_linesEf>
            break;
 80a1db4:	e7ab      	b.n	80a1d0e <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          bar_test();
 80a1db6:	f7fe fcaf 	bl	80a0718 <_ZN10Bar_Matrix8bar_testEv>
          break;
 80a1dba:	e7a8      	b.n	80a1d0e <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
    Color_Value(unsigned char red, unsigned char green, unsigned char blue) :
 80a1dbc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80a1dc0:	9302      	str	r3, [sp, #8]
 80a1dc2:	23ff      	movs	r3, #255	; 0xff
 80a1dc4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a1dc8:	2300      	movs	r3, #0
 80a1dca:	f88d 300e 	strb.w	r3, [sp, #14]
    fill_matrix(c);
 80a1dce:	ab04      	add	r3, sp, #16
 80a1dd0:	e913 0006 	ldmdb	r3, {r1, r2}
 80a1dd4:	f7fe fa56 	bl	80a0284 <_ZN10Bar_Matrix11fill_matrixE11Color_Value>
          break;
 80a1dd8:	e799      	b.n	80a1d0e <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
 80a1dda:	bf00      	nop
 80a1ddc:	20000074 	.word	0x20000074
 80a1de0:	3e19999a 	.word	0x3e19999a
 80a1de4:	3f59999a 	.word	0x3f59999a
 80a1de8:	3f4ccccd 	.word	0x3f4ccccd
 80a1dec:	3f666666 	.word	0x3f666666
 80a1df0:	3f770a3d 	.word	0x3f770a3d
 80a1df4:	41a00000 	.word	0x41a00000
 80a1df8:	41200000 	.word	0x41200000

080a1dfc <_ZN14Beat_DetectionC1Ev>:

    red = 0;
    green = 0;
    blue = 0;
    beat_count = 0;
    beats_per_flip = 3;
 80a1dfc:	2203      	movs	r2, #3
    beat_on = false;
 80a1dfe:	2300      	movs	r3, #0
    beats_per_flip = 3;
 80a1e00:	6142      	str	r2, [r0, #20]
    sma_long_index = 0;
    sma_short_index = 0;

    bpm_long_total = 0.0;
 80a1e02:	2200      	movs	r2, #0
    green = 0;
 80a1e04:	e9c0 3301 	strd	r3, r3, [r0, #4]
    beat_count = 0;
 80a1e08:	e9c0 3303 	strd	r3, r3, [r0, #12]
    sma_short_index = 0;
 80a1e0c:	e9c0 3307 	strd	r3, r3, [r0, #28]
Beat_Detection::Beat_Detection() {
 80a1e10:	b530      	push	{r4, r5, lr}
    beat_on = false;
 80a1e12:	8003      	strh	r3, [r0, #0]
    flip_on = false;
 80a1e14:	7083      	strb	r3, [r0, #2]
    bpm_long_total = 0.0;
 80a1e16:	f8c0 2d8c 	str.w	r2, [r0, #3468]	; 0xd8c
    bpm_short_total = 0.0;
 80a1e1a:	f8c0 2d90 	str.w	r2, [r0, #3472]	; 0xd90

    for (int i = 0; i < NUM_BINS; i++) {
 80a1e1e:	f500 613a 	add.w	r1, r0, #2976	; 0xba0
 80a1e22:	f600 34d8 	addw	r4, r0, #3032	; 0xbd8
 80a1e26:	f600 35bc 	addw	r5, r0, #3004	; 0xbbc
        sma_long_totals[i] = 0.0;
 80a1e2a:	f841 2b04 	str.w	r2, [r1], #4
        sma_short_totals[i] = 0.0;
 80a1e2e:	618a      	str	r2, [r1, #24]
    for (int i = 0; i < NUM_BINS; i++) {
 80a1e30:	42a9      	cmp	r1, r5
        beat_on_bins[i] = false;
 80a1e32:	f804 3b01 	strb.w	r3, [r4], #1
        beat_reporter_bins[i] = false;
 80a1e36:	71a3      	strb	r3, [r4, #6]
    for (int i = 0; i < NUM_BINS; i++) {
 80a1e38:	d1f7      	bne.n	80a1e2a <_ZN14Beat_DetectionC1Ev+0x2e>
    }
}
 80a1e3a:	bd30      	pop	{r4, r5, pc}
 80a1e3c:	0000      	movs	r0, r0
	...

080a1e40 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi>:
    sma_long_index = sma_long_index % SMA_LONG_LENGTH;
    sma_short_index++;
    sma_short_index = sma_short_index % SMA_SHORT_LENGTH;
}

void Beat_Detection::tick_beat_detection(audio_bins * bins, int cur_bin) {
 80a1e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1e44:	6a03      	ldr	r3, [r0, #32]
 80a1e46:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 80a1e4a:	441d      	add	r5, r3
 80a1e4c:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 80a1e50:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80a1e54:	4607      	mov	r7, r0
 80a1e56:	460e      	mov	r6, r1
    sma_short_totals[cur_bin] -= sma_short_bins[cur_bin][sma_short_index];
 80a1e58:	f8d8 0bbc 	ldr.w	r0, [r8, #3004]	; 0xbbc
 80a1e5c:	f8d5 1b14 	ldr.w	r1, [r5, #2836]	; 0xb14
void Beat_Detection::tick_beat_detection(audio_bins * bins, int cur_bin) {
 80a1e60:	4614      	mov	r4, r2
 80a1e62:	ea4f 0a82 	mov.w	sl, r2, lsl #2
    sma_short_totals[cur_bin] -= sma_short_bins[cur_bin][sma_short_index];
 80a1e66:	f007 fc91 	bl	80a978c <__aeabi_fsub>
 80a1e6a:	f8c8 0bbc 	str.w	r0, [r8, #3004]	; 0xbbc
 80a1e6e:	4681      	mov	r9, r0
    sma_short_bins[cur_bin][sma_short_index]  = (bins->left[cur_bin]*bins->left[cur_bin])/2;
 80a1e70:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80a1e74:	44b2      	add	sl, r6
 80a1e76:	4340      	muls	r0, r0
 80a1e78:	1040      	asrs	r0, r0, #1
 80a1e7a:	f007 fd3d 	bl	80a98f8 <__aeabi_i2f>
 80a1e7e:	4606      	mov	r6, r0
 80a1e80:	f8c5 0b14 	str.w	r0, [r5, #2836]	; 0xb14
    sma_short_bins[cur_bin][sma_short_index] += (bins->right[cur_bin]*bins->right[cur_bin])/2;
 80a1e84:	f8da 001c 	ldr.w	r0, [sl, #28]
 80a1e88:	4340      	muls	r0, r0
 80a1e8a:	1040      	asrs	r0, r0, #1
 80a1e8c:	f007 fd34 	bl	80a98f8 <__aeabi_i2f>
 80a1e90:	4631      	mov	r1, r6
 80a1e92:	f007 fc7d 	bl	80a9790 <__addsf3>
 80a1e96:	4606      	mov	r6, r0
    sma_short_totals[cur_bin] += sma_short_bins[cur_bin][sma_short_index];
 80a1e98:	4601      	mov	r1, r0
    sma_short_bins[cur_bin][sma_short_index] += (bins->right[cur_bin]*bins->right[cur_bin])/2;
 80a1e9a:	f8c5 0b14 	str.w	r0, [r5, #2836]	; 0xb14
    sma_short_totals[cur_bin] += sma_short_bins[cur_bin][sma_short_index];
 80a1e9e:	4648      	mov	r0, r9
 80a1ea0:	f007 fc76 	bl	80a9790 <__addsf3>
 80a1ea4:	2564      	movs	r5, #100	; 0x64
    float sma_short = sma_short_totals[cur_bin] / SMA_SHORT_LENGTH;
 80a1ea6:	4924      	ldr	r1, [pc, #144]	; (80a1f38 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xf8>)
    sma_short_totals[cur_bin] += sma_short_bins[cur_bin][sma_short_index];
 80a1ea8:	f8c8 0bbc 	str.w	r0, [r8, #3004]	; 0xbbc
    float sma_short = sma_short_totals[cur_bin] / SMA_SHORT_LENGTH;
 80a1eac:	f007 fe2c 	bl	80a9b08 <__aeabi_fdiv>
 80a1eb0:	69fb      	ldr	r3, [r7, #28]
 80a1eb2:	4681      	mov	r9, r0

    sma_long_totals[cur_bin] -= sma_long_bins[cur_bin][sma_long_index];
 80a1eb4:	fb05 3504 	mla	r5, r5, r4, r3
 80a1eb8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80a1ebc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80a1ebe:	f8d8 0ba0 	ldr.w	r0, [r8, #2976]	; 0xba0
 80a1ec2:	f007 fc63 	bl	80a978c <__aeabi_fsub>
    sma_long_bins[cur_bin][sma_long_index] = sma_short_bins[cur_bin][sma_short_index];
 80a1ec6:	626e      	str	r6, [r5, #36]	; 0x24
    sma_long_totals[cur_bin] -= sma_long_bins[cur_bin][sma_long_index];
 80a1ec8:	4601      	mov	r1, r0
    sma_long_totals[cur_bin] += sma_long_bins[cur_bin][sma_long_index];
 80a1eca:	4630      	mov	r0, r6
 80a1ecc:	f007 fc60 	bl	80a9790 <__addsf3>
    float sma_long = sma_long_totals[cur_bin] / SMA_LONG_LENGTH;
 80a1ed0:	491a      	ldr	r1, [pc, #104]	; (80a1f3c <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xfc>)
    sma_long_totals[cur_bin] += sma_long_bins[cur_bin][sma_long_index];
 80a1ed2:	f8c8 0ba0 	str.w	r0, [r8, #2976]	; 0xba0
    float sma_long = sma_long_totals[cur_bin] / SMA_LONG_LENGTH;
 80a1ed6:	f007 fe17 	bl	80a9b08 <__aeabi_fdiv>

    if (!beat_on_bins[cur_bin] && sma_short > 1.6*sma_long) {
 80a1eda:	443c      	add	r4, r7
 80a1edc:	f894 3bd8 	ldrb.w	r3, [r4, #3032]	; 0xbd8
    float sma_long = sma_long_totals[cur_bin] / SMA_LONG_LENGTH;
 80a1ee0:	4605      	mov	r5, r0
    if (!beat_on_bins[cur_bin] && sma_short > 1.6*sma_long) {
 80a1ee2:	b9d3      	cbnz	r3, 80a1f1a <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xda>
 80a1ee4:	4648      	mov	r0, r9
 80a1ee6:	f007 f8ad 	bl	80a9044 <__aeabi_f2d>
 80a1eea:	4606      	mov	r6, r0
 80a1eec:	4628      	mov	r0, r5
 80a1eee:	460f      	mov	r7, r1
 80a1ef0:	f007 f8a8 	bl	80a9044 <__aeabi_f2d>
 80a1ef4:	a30e      	add	r3, pc, #56	; (adr r3, 80a1f30 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xf0>)
 80a1ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1efa:	f007 f8fb 	bl	80a90f4 <__aeabi_dmul>
 80a1efe:	4602      	mov	r2, r0
 80a1f00:	460b      	mov	r3, r1
 80a1f02:	4630      	mov	r0, r6
 80a1f04:	4639      	mov	r1, r7
 80a1f06:	f007 fb85 	bl	80a9614 <__aeabi_dcmpgt>
 80a1f0a:	b120      	cbz	r0, 80a1f16 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xd6>
        //beat detected
        // beat_reporter is used by visualizers, it is cleared after every frame
        // beat_on is used by beat detection, it is cleared whenever a beat ends
        beat_on_bins[cur_bin] = true;
 80a1f0c:	2301      	movs	r3, #1
 80a1f0e:	f884 3bd8 	strb.w	r3, [r4, #3032]	; 0xbd8
        beat_reporter_bins[cur_bin] = true;
 80a1f12:	f884 3bdf 	strb.w	r3, [r4, #3039]	; 0xbdf
    } else if (beat_on_bins[cur_bin] && sma_short < 1.0*sma_long) {
        //beat reset
        beat_on_bins[cur_bin] = false;
    }
}
 80a1f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (beat_on_bins[cur_bin] && sma_short < 1.0*sma_long) {
 80a1f1a:	4601      	mov	r1, r0
 80a1f1c:	4648      	mov	r0, r9
 80a1f1e:	f007 fedd 	bl	80a9cdc <__aeabi_fcmplt>
 80a1f22:	2800      	cmp	r0, #0
 80a1f24:	d0f7      	beq.n	80a1f16 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xd6>
        beat_on_bins[cur_bin] = false;
 80a1f26:	2300      	movs	r3, #0
 80a1f28:	f884 3bd8 	strb.w	r3, [r4, #3032]	; 0xbd8
}
 80a1f2c:	e7f3      	b.n	80a1f16 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xd6>
 80a1f2e:	bf00      	nop
 80a1f30:	9999999a 	.word	0x9999999a
 80a1f34:	3ff99999 	.word	0x3ff99999
 80a1f38:	40a00000 	.word	0x40a00000
 80a1f3c:	42c80000 	.word	0x42c80000

080a1f40 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins>:

void Beat_Detection::tick_bpm_detection(audio_bins * bins) {
 80a1f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1f44:	6a06      	ldr	r6, [r0, #32]
 80a1f46:	4604      	mov	r4, r0
 80a1f48:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80a1f4c:	460d      	mov	r5, r1
    bpm_short_total -= bpm_short_values[sma_short_index];
 80a1f4e:	f8d0 0d90 	ldr.w	r0, [r0, #3472]	; 0xd90
 80a1f52:	f8d6 1d78 	ldr.w	r1, [r6, #3448]	; 0xd78
 80a1f56:	f007 fc19 	bl	80a978c <__aeabi_fsub>
 80a1f5a:	f8c4 0d90 	str.w	r0, [r4, #3472]	; 0xd90
    bpm_short_values[sma_short_index] = (bins->left[0]*bins->left[0] + bins->right[0]*bins->right[0])/4;
 80a1f5e:	69eb      	ldr	r3, [r5, #28]
    bpm_short_total -= bpm_short_values[sma_short_index];
 80a1f60:	4607      	mov	r7, r0
    bpm_short_values[sma_short_index] = (bins->left[0]*bins->left[0] + bins->right[0]*bins->right[0])/4;
 80a1f62:	435b      	muls	r3, r3
 80a1f64:	6828      	ldr	r0, [r5, #0]
 80a1f66:	fb00 3000 	mla	r0, r0, r0, r3
 80a1f6a:	1080      	asrs	r0, r0, #2
 80a1f6c:	f007 fcc4 	bl	80a98f8 <__aeabi_i2f>
 80a1f70:	4680      	mov	r8, r0
 80a1f72:	f8c6 0d78 	str.w	r0, [r6, #3448]	; 0xd78
    bpm_short_values[sma_short_index] += (bins->left[1]*bins->left[1] + bins->right[1]*bins->right[1])/4;
 80a1f76:	6a2b      	ldr	r3, [r5, #32]
 80a1f78:	6868      	ldr	r0, [r5, #4]
 80a1f7a:	435b      	muls	r3, r3
 80a1f7c:	fb00 3000 	mla	r0, r0, r0, r3
 80a1f80:	1080      	asrs	r0, r0, #2
 80a1f82:	f007 fcb9 	bl	80a98f8 <__aeabi_i2f>
 80a1f86:	4641      	mov	r1, r8
 80a1f88:	f007 fc02 	bl	80a9790 <__addsf3>
 80a1f8c:	4605      	mov	r5, r0
    //bpm_short_values[sma_short_index] = (bins->left[0]*bins->left[0] + bins->left[1]*bins->left[1])/2;
    bpm_short_total += bpm_short_values[sma_short_index];
 80a1f8e:	4601      	mov	r1, r0
    bpm_short_values[sma_short_index] += (bins->left[1]*bins->left[1] + bins->right[1]*bins->right[1])/4;
 80a1f90:	f8c6 0d78 	str.w	r0, [r6, #3448]	; 0xd78
    bpm_short_total += bpm_short_values[sma_short_index];
 80a1f94:	4638      	mov	r0, r7
 80a1f96:	f007 fbfb 	bl	80a9790 <__addsf3>
 80a1f9a:	69e7      	ldr	r7, [r4, #28]
 80a1f9c:	f8c4 0d90 	str.w	r0, [r4, #3472]	; 0xd90
    float sma_short = bpm_short_total / SMA_SHORT_LENGTH;
 80a1fa0:	eb04 0787 	add.w	r7, r4, r7, lsl #2

    bpm_long_total -= bpm_long_values[sma_long_index];
 80a1fa4:	f8d7 1be8 	ldr.w	r1, [r7, #3048]	; 0xbe8
    bpm_short_total += bpm_short_values[sma_short_index];
 80a1fa8:	4606      	mov	r6, r0
    bpm_long_total -= bpm_long_values[sma_long_index];
 80a1faa:	f8d4 0d8c 	ldr.w	r0, [r4, #3468]	; 0xd8c
 80a1fae:	f007 fbed 	bl	80a978c <__aeabi_fsub>
    bpm_long_values[sma_long_index] = bpm_short_values[sma_short_index];
 80a1fb2:	f8c7 5be8 	str.w	r5, [r7, #3048]	; 0xbe8
    bpm_long_total -= bpm_long_values[sma_long_index];
 80a1fb6:	4601      	mov	r1, r0
    bpm_long_total += bpm_long_values[sma_long_index];
 80a1fb8:	4628      	mov	r0, r5
 80a1fba:	f007 fbe9 	bl	80a9790 <__addsf3>
    float sma_short = bpm_short_total / SMA_SHORT_LENGTH;
 80a1fbe:	492c      	ldr	r1, [pc, #176]	; (80a2070 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x130>)
    bpm_long_total += bpm_long_values[sma_long_index];
 80a1fc0:	4605      	mov	r5, r0
 80a1fc2:	f8c4 0d8c 	str.w	r0, [r4, #3468]	; 0xd8c
    float sma_short = bpm_short_total / SMA_SHORT_LENGTH;
 80a1fc6:	4630      	mov	r0, r6
 80a1fc8:	f007 fd9e 	bl	80a9b08 <__aeabi_fdiv>
 80a1fcc:	f007 f83a 	bl	80a9044 <__aeabi_f2d>
 80a1fd0:	4606      	mov	r6, r0
 80a1fd2:	460f      	mov	r7, r1
    float sma_long = bpm_long_total / SMA_LONG_LENGTH;
 80a1fd4:	4628      	mov	r0, r5
 80a1fd6:	4927      	ldr	r1, [pc, #156]	; (80a2074 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x134>)
 80a1fd8:	f007 fd96 	bl	80a9b08 <__aeabi_fdiv>
 80a1fdc:	f007 f832 	bl	80a9044 <__aeabi_f2d>

    if (!beat_on && sma_short > 1.40*sma_long) {
 80a1fe0:	7823      	ldrb	r3, [r4, #0]
 80a1fe2:	bb83      	cbnz	r3, 80a2046 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x106>
 80a1fe4:	a320      	add	r3, pc, #128	; (adr r3, 80a2068 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x128>)
 80a1fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1fea:	f007 f883 	bl	80a90f4 <__aeabi_dmul>
 80a1fee:	4632      	mov	r2, r6
 80a1ff0:	463b      	mov	r3, r7
 80a1ff2:	f007 faf1 	bl	80a95d8 <__aeabi_dcmplt>
 80a1ff6:	b320      	cbz	r0, 80a2042 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x102>
        //beat detected
        beat_count++;
 80a1ff8:	6923      	ldr	r3, [r4, #16]

        if (beat_count % beats_per_flip == 0) {
 80a1ffa:	6961      	ldr	r1, [r4, #20]
        beat_count++;
 80a1ffc:	3301      	adds	r3, #1
        if (beat_count % beats_per_flip == 0) {
 80a1ffe:	fb93 f2f1 	sdiv	r2, r3, r1
        beat_count++;
 80a2002:	6123      	str	r3, [r4, #16]
        if (beat_count % beats_per_flip == 0) {
 80a2004:	fb01 3312 	mls	r3, r1, r2, r3
 80a2008:	b91b      	cbnz	r3, 80a2012 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0xd2>
            flip_on = !flip_on;
 80a200a:	78a3      	ldrb	r3, [r4, #2]
 80a200c:	f083 0301 	eor.w	r3, r3, #1
 80a2010:	70a3      	strb	r3, [r4, #2]
        }

        blue = (green+red) % 255;
 80a2012:	26ff      	movs	r6, #255	; 0xff
 80a2014:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
 80a2018:	442b      	add	r3, r5
 80a201a:	fb93 f2f6 	sdiv	r2, r3, r6
 80a201e:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80a2022:	1a9b      	subs	r3, r3, r2
        green = red;
 80a2024:	e9c4 5302 	strd	r5, r3, [r4, #8]
        red = (red+random(255)) % 255;
 80a2028:	4630      	mov	r0, r6
 80a202a:	f002 fb6d 	bl	80a4708 <_Z6randomi>
 80a202e:	4405      	add	r5, r0
 80a2030:	fb95 f6f6 	sdiv	r6, r5, r6

        // beat_reporter is used by visualizers, it is cleared after every frame
        // beat_on is used by beat detection, it is cleared whenever a beat ends
        beat_on = true;
 80a2034:	f240 1301 	movw	r3, #257	; 0x101
        red = (red+random(255)) % 255;
 80a2038:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 80a203c:	1bad      	subs	r5, r5, r6
 80a203e:	6065      	str	r5, [r4, #4]
        beat_on = true;
 80a2040:	8023      	strh	r3, [r4, #0]
        beat_reporter = true;
    } else if (beat_on && sma_short < 1.20*sma_long) {
        //beat reset
        beat_on = false;
    }
}
 80a2042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (beat_on && sma_short < 1.20*sma_long) {
 80a2046:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80a204a:	4b0b      	ldr	r3, [pc, #44]	; (80a2078 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x138>)
 80a204c:	f007 f852 	bl	80a90f4 <__aeabi_dmul>
 80a2050:	4632      	mov	r2, r6
 80a2052:	463b      	mov	r3, r7
 80a2054:	f007 fade 	bl	80a9614 <__aeabi_dcmpgt>
 80a2058:	2800      	cmp	r0, #0
 80a205a:	d0f2      	beq.n	80a2042 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x102>
        beat_on = false;
 80a205c:	2300      	movs	r3, #0
 80a205e:	7023      	strb	r3, [r4, #0]
}
 80a2060:	e7ef      	b.n	80a2042 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x102>
 80a2062:	bf00      	nop
 80a2064:	f3af 8000 	nop.w
 80a2068:	66666666 	.word	0x66666666
 80a206c:	3ff66666 	.word	0x3ff66666
 80a2070:	40a00000 	.word	0x40a00000
 80a2074:	42c80000 	.word	0x42c80000
 80a2078:	3ff33333 	.word	0x3ff33333

080a207c <_ZN14Beat_Detection4tickEP10audio_bins>:
void Beat_Detection::tick(audio_bins* bins) {
 80a207c:	b570      	push	{r4, r5, r6, lr}
 80a207e:	4604      	mov	r4, r0
 80a2080:	460e      	mov	r6, r1
    for (int i = 0; i < NUM_BINS; i++) {
 80a2082:	2500      	movs	r5, #0
    tick_bpm_detection(bins);
 80a2084:	f7ff ff5c 	bl	80a1f40 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins>
        tick_beat_detection(bins, i);
 80a2088:	462a      	mov	r2, r5
 80a208a:	4631      	mov	r1, r6
 80a208c:	4620      	mov	r0, r4
    for (int i = 0; i < NUM_BINS; i++) {
 80a208e:	3501      	adds	r5, #1
        tick_beat_detection(bins, i);
 80a2090:	f7ff fed6 	bl	80a1e40 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi>
    for (int i = 0; i < NUM_BINS; i++) {
 80a2094:	2d07      	cmp	r5, #7
 80a2096:	d1f7      	bne.n	80a2088 <_ZN14Beat_Detection4tickEP10audio_bins+0xc>
    sma_long_index = sma_long_index % SMA_LONG_LENGTH;
 80a2098:	2164      	movs	r1, #100	; 0x64
    sma_long_index++;
 80a209a:	69e3      	ldr	r3, [r4, #28]
 80a209c:	3301      	adds	r3, #1
    sma_long_index = sma_long_index % SMA_LONG_LENGTH;
 80a209e:	fb93 f2f1 	sdiv	r2, r3, r1
 80a20a2:	fb01 3312 	mls	r3, r1, r2, r3
    sma_short_index = sma_short_index % SMA_SHORT_LENGTH;
 80a20a6:	2205      	movs	r2, #5
    sma_long_index = sma_long_index % SMA_LONG_LENGTH;
 80a20a8:	61e3      	str	r3, [r4, #28]
    sma_short_index++;
 80a20aa:	6a23      	ldr	r3, [r4, #32]
 80a20ac:	3301      	adds	r3, #1
    sma_short_index = sma_short_index % SMA_SHORT_LENGTH;
 80a20ae:	fb93 f2f2 	sdiv	r2, r3, r2
 80a20b2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80a20b6:	1a9b      	subs	r3, r3, r2
 80a20b8:	6223      	str	r3, [r4, #32]
}
 80a20ba:	bd70      	pop	{r4, r5, r6, pc}

080a20bc <_ZN14Beat_Detection12frame_tickedEv>:
 * Function: frame_ticked
 * Description: Clear all beat detection reporters
 * Parameters: none
 * ================================================================== */
void Beat_Detection::frame_ticked() {
    beat_reporter = false;
 80a20bc:	2300      	movs	r3, #0
 80a20be:	7043      	strb	r3, [r0, #1]
    for (int i = 0; i < NUM_BINS; i++) {
        beat_reporter_bins[i] = false;
 80a20c0:	f880 3bdf 	strb.w	r3, [r0, #3039]	; 0xbdf
 80a20c4:	f8c0 3be0 	str.w	r3, [r0, #3040]	; 0xbe0
 80a20c8:	f8a0 3be4 	strh.w	r3, [r0, #3044]	; 0xbe4
    }
}
 80a20cc:	4770      	bx	lr

080a20ce <_ZN14Beat_Detection11beat_on_binEi>:
 * Description: Returns the beat reporter for the given bin
 * Parameters: [int] bin - The bin to check
 * Returns: True if a beat was detected within the last frame, false otherwise.
 * ================================================================== */
bool Beat_Detection::beat_on_bin(int bin) {
    return beat_reporter_bins[bin];
 80a20ce:	4408      	add	r0, r1
}
 80a20d0:	f890 0bdf 	ldrb.w	r0, [r0, #3039]	; 0xbdf
 80a20d4:	4770      	bx	lr

080a20d6 <_ZN14Beat_Detection9num_beatsEv>:
 * Description: Returns the current number of beats detected
 * Parameters: none
 * ================================================================== */
int Beat_Detection::num_beats() {
    return beat_count;
}
 80a20d6:	6900      	ldr	r0, [r0, #16]
 80a20d8:	4770      	bx	lr

080a20da <_ZN14Beat_Detection1rEv>:
 * Description: Returns the current red value
 * Parameters: none
 * ================================================================== */
int Beat_Detection::r() {
    return red;
}
 80a20da:	6840      	ldr	r0, [r0, #4]
 80a20dc:	4770      	bx	lr

080a20de <_ZN14Beat_Detection1gEv>:
 * Description: Returns the current green value
 * Parameters: none
 * ================================================================== */
int Beat_Detection::g() {
    return green;
}
 80a20de:	6880      	ldr	r0, [r0, #8]
 80a20e0:	4770      	bx	lr

080a20e2 <_ZN14Beat_Detection1bEv>:
 * Description: Returns the current blue value
 * Parameters: none
 * ================================================================== */
int Beat_Detection::b() {
    return blue;
}
 80a20e2:	68c0      	ldr	r0, [r0, #12]
 80a20e4:	4770      	bx	lr

080a20e6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a20e6:	b510      	push	{r4, lr}
 80a20e8:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a20ea:	6800      	ldr	r0, [r0, #0]
 80a20ec:	b108      	cbz	r0, 80a20f2 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80a20ee:	f001 fe85 	bl	80a3dfc <free>
class SystemClass {
 80a20f2:	4620      	mov	r0, r4
 80a20f4:	bd10      	pop	{r4, pc}

080a20f6 <_Z7init_eqv>:
/* ================================================================== *
 *  Function: init_eq
 *  Description: Sends reset sequence to MSGEQ7's allowing for data
 *  reading to begin
 * ================================================================== */
void init_eq() {
 80a20f6:	b508      	push	{r3, lr}
     *
     *  rst     _|‾‾‾‾‾|__
     *
     *  strobe  _|‾‾|__|‾‾
     */
    digitalWrite(rst, HIGH);
 80a20f8:	2101      	movs	r1, #1
 80a20fa:	200d      	movs	r0, #13
 80a20fc:	f003 f9f3 	bl	80a54e6 <digitalWrite>
    digitalWrite(strobe, HIGH);
 80a2100:	2101      	movs	r1, #1
 80a2102:	200e      	movs	r0, #14
 80a2104:	f003 f9ef 	bl	80a54e6 <digitalWrite>
    delay(1);
 80a2108:	2001      	movs	r0, #1
 80a210a:	f001 feaf 	bl	80a3e6c <delay>
    digitalWrite(strobe, LOW);
 80a210e:	2100      	movs	r1, #0
 80a2110:	200e      	movs	r0, #14
 80a2112:	f003 f9e8 	bl	80a54e6 <digitalWrite>
    delay(1);
 80a2116:	2001      	movs	r0, #1
 80a2118:	f001 fea8 	bl	80a3e6c <delay>
    digitalWrite(rst, LOW);
 80a211c:	2100      	movs	r1, #0
 80a211e:	200d      	movs	r0, #13
 80a2120:	f003 f9e1 	bl	80a54e6 <digitalWrite>
    digitalWrite(strobe, HIGH);
 80a2124:	200e      	movs	r0, #14
 80a2126:	2101      	movs	r1, #1
 80a2128:	f003 f9dd 	bl	80a54e6 <digitalWrite>
    delay(1);
}
 80a212c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(1);
 80a2130:	2001      	movs	r0, #1
 80a2132:	f001 be9b 	b.w	80a3e6c <delay>
	...

080a2138 <_Z11sample_freqP10audio_bins>:
/* ================================================================== *
 *  Function: sample_freq
 *  Description: Reads bins from MSGEQ7's and stores them to struct
 *  Parameters:  [audio_bins]* bins - frequency bins read from chip
 * ================================================================== */
void sample_freq(audio_bins* bins) {
 80a2138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (int i = 0; i < NUM_BINS; i++) {
        digitalWrite(strobe, LOW);
        delayMicroseconds(40); // allow for EQ mux to fully switch

        // Moving average bins with new sample
        bins->left[i]  = analogRead(audio_l) * 0.8 + bins->left[i]  * 0.2;
 80a213c:	f20f 09b8 	addw	r9, pc, #184	; 0xb8
 80a2140:	e9d9 8900 	ldrd	r8, r9, [r9]
 80a2144:	a72e      	add	r7, pc, #184	; (adr r7, 80a2200 <_Z11sample_freqP10audio_bins+0xc8>)
 80a2146:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a214a:	f100 0318 	add.w	r3, r0, #24
 80a214e:	f1a0 0a04 	sub.w	sl, r0, #4
 80a2152:	9301      	str	r3, [sp, #4]
        digitalWrite(strobe, LOW);
 80a2154:	2100      	movs	r1, #0
 80a2156:	200e      	movs	r0, #14
 80a2158:	f003 f9c5 	bl	80a54e6 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a215c:	2028      	movs	r0, #40	; 0x28
 80a215e:	f001 fc2f 	bl	80a39c0 <HAL_Delay_Microseconds>
        bins->left[i]  = analogRead(audio_l) * 0.8 + bins->left[i]  * 0.2;
 80a2162:	200b      	movs	r0, #11
 80a2164:	f003 f9d8 	bl	80a5518 <analogRead>
 80a2168:	4683      	mov	fp, r0
 80a216a:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80a216e:	f006 ff57 	bl	80a9020 <__aeabi_i2d>
 80a2172:	4642      	mov	r2, r8
 80a2174:	464b      	mov	r3, r9
 80a2176:	f006 ffbd 	bl	80a90f4 <__aeabi_dmul>
 80a217a:	4604      	mov	r4, r0
 80a217c:	4658      	mov	r0, fp
 80a217e:	460d      	mov	r5, r1
 80a2180:	f006 ff4e 	bl	80a9020 <__aeabi_i2d>
 80a2184:	4632      	mov	r2, r6
 80a2186:	463b      	mov	r3, r7
 80a2188:	f006 ffb4 	bl	80a90f4 <__aeabi_dmul>
 80a218c:	4602      	mov	r2, r0
 80a218e:	460b      	mov	r3, r1
 80a2190:	4620      	mov	r0, r4
 80a2192:	4629      	mov	r1, r5
 80a2194:	f006 fdf8 	bl	80a8d88 <__adddf3>
 80a2198:	f007 fa5c 	bl	80a9654 <__aeabi_d2iz>
 80a219c:	f8ca 0000 	str.w	r0, [sl]
        bins->right[i] = analogRead(audio_r) * 0.8 + bins->right[i] * 0.2;
 80a21a0:	200a      	movs	r0, #10
 80a21a2:	f003 f9b9 	bl	80a5518 <analogRead>
 80a21a6:	4683      	mov	fp, r0
 80a21a8:	f8da 001c 	ldr.w	r0, [sl, #28]
 80a21ac:	f006 ff38 	bl	80a9020 <__aeabi_i2d>
 80a21b0:	4642      	mov	r2, r8
 80a21b2:	464b      	mov	r3, r9
 80a21b4:	f006 ff9e 	bl	80a90f4 <__aeabi_dmul>
 80a21b8:	4604      	mov	r4, r0
 80a21ba:	4658      	mov	r0, fp
 80a21bc:	460d      	mov	r5, r1
 80a21be:	f006 ff2f 	bl	80a9020 <__aeabi_i2d>
 80a21c2:	4632      	mov	r2, r6
 80a21c4:	463b      	mov	r3, r7
 80a21c6:	f006 ff95 	bl	80a90f4 <__aeabi_dmul>
 80a21ca:	460b      	mov	r3, r1
 80a21cc:	4602      	mov	r2, r0
 80a21ce:	4629      	mov	r1, r5
 80a21d0:	4620      	mov	r0, r4
 80a21d2:	f006 fdd9 	bl	80a8d88 <__adddf3>
 80a21d6:	f007 fa3d 	bl	80a9654 <__aeabi_d2iz>

        digitalWrite(strobe, HIGH);
 80a21da:	2101      	movs	r1, #1
        bins->right[i] = analogRead(audio_r) * 0.8 + bins->right[i] * 0.2;
 80a21dc:	f8ca 001c 	str.w	r0, [sl, #28]
        digitalWrite(strobe, HIGH);
 80a21e0:	200e      	movs	r0, #14
 80a21e2:	f003 f980 	bl	80a54e6 <digitalWrite>
 80a21e6:	2028      	movs	r0, #40	; 0x28
 80a21e8:	f001 fbea 	bl	80a39c0 <HAL_Delay_Microseconds>
    for (int i = 0; i < NUM_BINS; i++) {
 80a21ec:	9b01      	ldr	r3, [sp, #4]
 80a21ee:	459a      	cmp	sl, r3
 80a21f0:	d1b0      	bne.n	80a2154 <_Z11sample_freqP10audio_bins+0x1c>
        delayMicroseconds(40); // allow for EQ mux to fully switch
    }
}
 80a21f2:	b003      	add	sp, #12
 80a21f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a21f8:	9999999a 	.word	0x9999999a
 80a21fc:	3fc99999 	.word	0x3fc99999
 80a2200:	9999999a 	.word	0x9999999a
 80a2204:	3fe99999 	.word	0x3fe99999

080a2208 <_Z11psu_startupv>:
/* ================================================================== *
 *  Function: psu_startup
 *  Description: Turns the psu on
 *  Parameters:  none
 * ================================================================== */
void psu_startup() {
 80a2208:	b570      	push	{r4, r5, r6, lr}
    #if ENABLE_PSU_CONTROL
    if (!psu_is_on) {
 80a220a:	4c08      	ldr	r4, [pc, #32]	; (80a222c <_Z11psu_startupv+0x24>)
 80a220c:	7825      	ldrb	r5, [r4, #0]
 80a220e:	b955      	cbnz	r5, 80a2226 <_Z11psu_startupv+0x1e>
        matrix->clear_matrix();
 80a2210:	4e07      	ldr	r6, [pc, #28]	; (80a2230 <_Z11psu_startupv+0x28>)
 80a2212:	6830      	ldr	r0, [r6, #0]
 80a2214:	f7fe f8e8 	bl	80a03e8 <_ZN10Bar_Matrix12clear_matrixEv>
        matrix->show_all();
 80a2218:	6830      	ldr	r0, [r6, #0]
 80a221a:	f7fe fa67 	bl	80a06ec <_ZN10Bar_Matrix8show_allEv>
        digitalWrite(ps_on, LOW);
 80a221e:	4629      	mov	r1, r5
 80a2220:	2013      	movs	r0, #19
 80a2222:	f003 f960 	bl	80a54e6 <digitalWrite>
    }
    psu_is_on = true;
 80a2226:	2301      	movs	r3, #1
 80a2228:	7023      	strb	r3, [r4, #0]
    #endif
}
 80a222a:	bd70      	pop	{r4, r5, r6, pc}
 80a222c:	200000d1 	.word	0x200000d1
 80a2230:	200000cc 	.word	0x200000cc

080a2234 <_Z15powered_on_tickv>:
void powered_on_tick() {
 80a2234:	b510      	push	{r4, lr}
    if (!psu_is_on) { psu_startup(); }
 80a2236:	4b15      	ldr	r3, [pc, #84]	; (80a228c <_Z15powered_on_tickv+0x58>)
 80a2238:	781b      	ldrb	r3, [r3, #0]
 80a223a:	b90b      	cbnz	r3, 80a2240 <_Z15powered_on_tickv+0xc>
 80a223c:	f7ff ffe4 	bl	80a2208 <_Z11psu_startupv>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a2240:	f001 fbce 	bl	80a39e0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - last_sample_millis >= SAMPLE_UPDATE_INTERVAL) {
 80a2244:	4c12      	ldr	r4, [pc, #72]	; (80a2290 <_Z15powered_on_tickv+0x5c>)
 80a2246:	6823      	ldr	r3, [r4, #0]
 80a2248:	1ac0      	subs	r0, r0, r3
 80a224a:	2809      	cmp	r0, #9
 80a224c:	d909      	bls.n	80a2262 <_Z15powered_on_tickv+0x2e>
 80a224e:	f001 fbc7 	bl	80a39e0 <HAL_Timer_Get_Milli_Seconds>
        last_sample_millis = millis();
 80a2252:	6020      	str	r0, [r4, #0]
        sample_freq(&bins);
 80a2254:	480f      	ldr	r0, [pc, #60]	; (80a2294 <_Z15powered_on_tickv+0x60>)
 80a2256:	f7ff ff6f 	bl	80a2138 <_Z11sample_freqP10audio_bins>
        beat_detect.tick(&bins);
 80a225a:	490e      	ldr	r1, [pc, #56]	; (80a2294 <_Z15powered_on_tickv+0x60>)
 80a225c:	480e      	ldr	r0, [pc, #56]	; (80a2298 <_Z15powered_on_tickv+0x64>)
 80a225e:	f7ff ff0d 	bl	80a207c <_ZN14Beat_Detection4tickEP10audio_bins>
 80a2262:	f001 fbbd 	bl	80a39e0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - last_display_update >= DISPLAY_UPDATE_INTERVAL) {
 80a2266:	4c0d      	ldr	r4, [pc, #52]	; (80a229c <_Z15powered_on_tickv+0x68>)
 80a2268:	6823      	ldr	r3, [r4, #0]
 80a226a:	1ac0      	subs	r0, r0, r3
 80a226c:	2813      	cmp	r0, #19
 80a226e:	d90c      	bls.n	80a228a <_Z15powered_on_tickv+0x56>
 80a2270:	f001 fbb6 	bl	80a39e0 <HAL_Timer_Get_Milli_Seconds>
        matrix->tick(&bins, STATIC_VISUALIZER);
 80a2274:	4b0a      	ldr	r3, [pc, #40]	; (80a22a0 <_Z15powered_on_tickv+0x6c>)
 80a2276:	2200      	movs	r2, #0
        last_display_update = millis();
 80a2278:	6020      	str	r0, [r4, #0]
        matrix->tick(&bins, STATIC_VISUALIZER);
 80a227a:	4906      	ldr	r1, [pc, #24]	; (80a2294 <_Z15powered_on_tickv+0x60>)
 80a227c:	6818      	ldr	r0, [r3, #0]
 80a227e:	f7ff fd2f 	bl	80a1ce0 <_ZN10Bar_Matrix4tickEP10audio_binsi>
        frame_count++;
 80a2282:	4a08      	ldr	r2, [pc, #32]	; (80a22a4 <_Z15powered_on_tickv+0x70>)
 80a2284:	6813      	ldr	r3, [r2, #0]
 80a2286:	3301      	adds	r3, #1
 80a2288:	6013      	str	r3, [r2, #0]
}
 80a228a:	bd10      	pop	{r4, pc}
 80a228c:	200000d1 	.word	0x200000d1
 80a2290:	20000e74 	.word	0x20000e74
 80a2294:	20000094 	.word	0x20000094
 80a2298:	200000d4 	.word	0x200000d4
 80a229c:	20000e70 	.word	0x20000e70
 80a22a0:	200000cc 	.word	0x200000cc
 80a22a4:	20000e68 	.word	0x20000e68

080a22a8 <setup>:
void setup() {
 80a22a8:	b530      	push	{r4, r5, lr}
    last_sample_millis = 0;
 80a22aa:	2400      	movs	r4, #0
void setup() {
 80a22ac:	b0a1      	sub	sp, #132	; 0x84
    pinMode(rst, OUTPUT);
 80a22ae:	2101      	movs	r1, #1
 80a22b0:	200d      	movs	r0, #13
 80a22b2:	f003 f907 	bl	80a54c4 <pinMode>
    pinMode(strobe, OUTPUT);
 80a22b6:	2101      	movs	r1, #1
 80a22b8:	200e      	movs	r0, #14
 80a22ba:	f003 f903 	bl	80a54c4 <pinMode>
    pinMode(audio_l, INPUT);
 80a22be:	2100      	movs	r1, #0
 80a22c0:	200b      	movs	r0, #11
 80a22c2:	f003 f8ff 	bl	80a54c4 <pinMode>
    pinMode(audio_r, INPUT);
 80a22c6:	2100      	movs	r1, #0
 80a22c8:	200a      	movs	r0, #10
 80a22ca:	f003 f8fb 	bl	80a54c4 <pinMode>
    init_eq();
 80a22ce:	f7ff ff12 	bl	80a20f6 <_Z7init_eqv>
    last_sample_millis = 0;
 80a22d2:	4b54      	ldr	r3, [pc, #336]	; (80a2424 <setup+0x17c>)
    pinMode(ps_on, OUTPUT);
 80a22d4:	2101      	movs	r1, #1
 80a22d6:	2013      	movs	r0, #19
    last_sample_millis = 0;
 80a22d8:	601c      	str	r4, [r3, #0]
    pinMode(ps_on, OUTPUT);
 80a22da:	f003 f8f3 	bl	80a54c4 <pinMode>
    psu_is_on = false;
 80a22de:	4b52      	ldr	r3, [pc, #328]	; (80a2428 <setup+0x180>)
 80a22e0:	701c      	strb	r4, [r3, #0]
    psu_startup();
 80a22e2:	f7ff ff91 	bl	80a2208 <_Z11psu_startupv>
    matrix = new Bar_Matrix(NUM_BARS, STRIP_LENGTH, LED_TYPE, matrix_pins, &beat_detect);
 80a22e6:	f44f 7027 	mov.w	r0, #668	; 0x29c
 80a22ea:	f7fd fed6 	bl	80a009a <_Znwj>
 80a22ee:	4604      	mov	r4, r0
 80a22f0:	b140      	cbz	r0, 80a2304 <setup+0x5c>
 80a22f2:	4b4e      	ldr	r3, [pc, #312]	; (80a242c <setup+0x184>)
 80a22f4:	2246      	movs	r2, #70	; 0x46
 80a22f6:	9301      	str	r3, [sp, #4]
 80a22f8:	4b4d      	ldr	r3, [pc, #308]	; (80a2430 <setup+0x188>)
 80a22fa:	2108      	movs	r1, #8
 80a22fc:	9300      	str	r3, [sp, #0]
 80a22fe:	2302      	movs	r3, #2
 80a2300:	f7fe f898 	bl	80a0434 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection>
 80a2304:	4b4b      	ldr	r3, [pc, #300]	; (80a2434 <setup+0x18c>)
    frame_count_publish = 0;
 80a2306:	4d4c      	ldr	r5, [pc, #304]	; (80a2438 <setup+0x190>)
    matrix = new Bar_Matrix(NUM_BARS, STRIP_LENGTH, LED_TYPE, matrix_pins, &beat_detect);
 80a2308:	601c      	str	r4, [r3, #0]
    last_display_update = 0;
 80a230a:	2400      	movs	r4, #0
 80a230c:	4b4b      	ldr	r3, [pc, #300]	; (80a243c <setup+0x194>)
 80a230e:	601c      	str	r4, [r3, #0]
    last_sound_seconds = Time.now();
 80a2310:	f002 fbb2 	bl	80a4a78 <_ZN9TimeClass3nowEv>
 80a2314:	4b4a      	ldr	r3, [pc, #296]	; (80a2440 <setup+0x198>)
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a2316:	2202      	movs	r2, #2
 80a2318:	6018      	str	r0, [r3, #0]
    tick_count = 0;
 80a231a:	4b4a      	ldr	r3, [pc, #296]	; (80a2444 <setup+0x19c>)
 80a231c:	494a      	ldr	r1, [pc, #296]	; (80a2448 <setup+0x1a0>)
 80a231e:	601c      	str	r4, [r3, #0]
    last_tick_update = 0;
 80a2320:	4b4a      	ldr	r3, [pc, #296]	; (80a244c <setup+0x1a4>)
 80a2322:	484b      	ldr	r0, [pc, #300]	; (80a2450 <setup+0x1a8>)
 80a2324:	601c      	str	r4, [r3, #0]
    frame_count = 0;
 80a2326:	4b4b      	ldr	r3, [pc, #300]	; (80a2454 <setup+0x1ac>)
    frame_count_publish = 0;
 80a2328:	602c      	str	r4, [r5, #0]
    frame_count = 0;
 80a232a:	601c      	str	r4, [r3, #0]
 80a232c:	4623      	mov	r3, r4
 80a232e:	f001 fcd5 	bl	80a3cdc <spark_variable>
 80a2332:	4623      	mov	r3, r4
 80a2334:	2202      	movs	r2, #2
 80a2336:	4629      	mov	r1, r5
 80a2338:	4847      	ldr	r0, [pc, #284]	; (80a2458 <setup+0x1b0>)
 80a233a:	f001 fccf 	bl	80a3cdc <spark_variable>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a233e:	4b47      	ldr	r3, [pc, #284]	; (80a245c <setup+0x1b4>)
 80a2340:	4622      	mov	r2, r4
 80a2342:	6858      	ldr	r0, [r3, #4]
 80a2344:	4621      	mov	r1, r4
 80a2346:	f001 fcf9 	bl	80a3d3c <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a234a:	1c81      	adds	r1, r0, #2
 80a234c:	a81a      	add	r0, sp, #104	; 0x68
 80a234e:	f002 f8dd 	bl	80a450c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
  String ipStr = String(myIP[0])+"."+String(myIP[1])+"."+String(myIP[2])+"."+String(myIP[3]);
 80a2352:	220a      	movs	r2, #10
 80a2354:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80a2358:	a806      	add	r0, sp, #24
 80a235a:	f002 fabb 	bl	80a48d4 <_ZN6StringC1Ehh>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a235e:	a906      	add	r1, sp, #24
 80a2360:	a80a      	add	r0, sp, #40	; 0x28
 80a2362:	f002 fa93 	bl	80a488c <_ZN6StringC1ERKS_>
 80a2366:	493e      	ldr	r1, [pc, #248]	; (80a2460 <setup+0x1b8>)
 80a2368:	a80a      	add	r0, sp, #40	; 0x28
 80a236a:	f002 fae8 	bl	80a493e <_ZplRK15StringSumHelperPKc>
 80a236e:	4604      	mov	r4, r0
 80a2370:	220a      	movs	r2, #10
 80a2372:	f89d 106e 	ldrb.w	r1, [sp, #110]	; 0x6e
 80a2376:	a80e      	add	r0, sp, #56	; 0x38
 80a2378:	f002 faac 	bl	80a48d4 <_ZN6StringC1Ehh>
 80a237c:	4620      	mov	r0, r4
 80a237e:	a90e      	add	r1, sp, #56	; 0x38
 80a2380:	f002 fad1 	bl	80a4926 <_ZplRK15StringSumHelperRK6String>
 80a2384:	4936      	ldr	r1, [pc, #216]	; (80a2460 <setup+0x1b8>)
 80a2386:	f002 fada 	bl	80a493e <_ZplRK15StringSumHelperPKc>
 80a238a:	4604      	mov	r4, r0
 80a238c:	220a      	movs	r2, #10
 80a238e:	f89d 106d 	ldrb.w	r1, [sp, #109]	; 0x6d
 80a2392:	a812      	add	r0, sp, #72	; 0x48
 80a2394:	f002 fa9e 	bl	80a48d4 <_ZN6StringC1Ehh>
 80a2398:	4620      	mov	r0, r4
 80a239a:	a912      	add	r1, sp, #72	; 0x48
 80a239c:	f002 fac3 	bl	80a4926 <_ZplRK15StringSumHelperRK6String>
 80a23a0:	492f      	ldr	r1, [pc, #188]	; (80a2460 <setup+0x1b8>)
 80a23a2:	f002 facc 	bl	80a493e <_ZplRK15StringSumHelperPKc>
 80a23a6:	4604      	mov	r4, r0
 80a23a8:	220a      	movs	r2, #10
 80a23aa:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80a23ae:	a816      	add	r0, sp, #88	; 0x58
 80a23b0:	f002 fa90 	bl	80a48d4 <_ZN6StringC1Ehh>
 80a23b4:	4620      	mov	r0, r4
 80a23b6:	a916      	add	r1, sp, #88	; 0x58
 80a23b8:	f002 fab5 	bl	80a4926 <_ZplRK15StringSumHelperRK6String>
 80a23bc:	4601      	mov	r1, r0
 80a23be:	a802      	add	r0, sp, #8
 80a23c0:	f002 fa64 	bl	80a488c <_ZN6StringC1ERKS_>
 80a23c4:	a816      	add	r0, sp, #88	; 0x58
 80a23c6:	f002 f9d8 	bl	80a477a <_ZN6StringD1Ev>
 80a23ca:	a812      	add	r0, sp, #72	; 0x48
 80a23cc:	f002 f9d5 	bl	80a477a <_ZN6StringD1Ev>
 80a23d0:	a80e      	add	r0, sp, #56	; 0x38
 80a23d2:	f002 f9d2 	bl	80a477a <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a23d6:	a80a      	add	r0, sp, #40	; 0x28
 80a23d8:	f002 f9cf 	bl	80a477a <_ZN6StringD1Ev>
 80a23dc:	a806      	add	r0, sp, #24
 80a23de:	f002 f9cc 	bl	80a477a <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a23e2:	4b20      	ldr	r3, [pc, #128]	; (80a2464 <setup+0x1bc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a23e4:	9a02      	ldr	r2, [sp, #8]
 80a23e6:	781b      	ldrb	r3, [r3, #0]
 80a23e8:	491f      	ldr	r1, [pc, #124]	; (80a2468 <setup+0x1c0>)
 80a23ea:	f88d 3000 	strb.w	r3, [sp]
 80a23ee:	a816      	add	r0, sp, #88	; 0x58
 80a23f0:	233c      	movs	r3, #60	; 0x3c
 80a23f2:	f001 feaf 	bl	80a4154 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a23f6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80a23f8:	b17c      	cbz	r4, 80a241a <setup+0x172>
      if (--_M_use_count == 0)
 80a23fa:	6863      	ldr	r3, [r4, #4]
 80a23fc:	3b01      	subs	r3, #1
 80a23fe:	6063      	str	r3, [r4, #4]
 80a2400:	b95b      	cbnz	r3, 80a241a <setup+0x172>
          _M_dispose();
 80a2402:	6823      	ldr	r3, [r4, #0]
 80a2404:	4620      	mov	r0, r4
 80a2406:	689b      	ldr	r3, [r3, #8]
 80a2408:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a240a:	68a3      	ldr	r3, [r4, #8]
 80a240c:	3b01      	subs	r3, #1
 80a240e:	60a3      	str	r3, [r4, #8]
 80a2410:	b91b      	cbnz	r3, 80a241a <setup+0x172>
            _M_destroy();
 80a2412:	6823      	ldr	r3, [r4, #0]
 80a2414:	4620      	mov	r0, r4
 80a2416:	68db      	ldr	r3, [r3, #12]
 80a2418:	4798      	blx	r3
 80a241a:	a802      	add	r0, sp, #8
 80a241c:	f002 f9ad 	bl	80a477a <_ZN6StringD1Ev>
}
 80a2420:	b021      	add	sp, #132	; 0x84
 80a2422:	bd30      	pop	{r4, r5, pc}
 80a2424:	20000e74 	.word	0x20000e74
 80a2428:	200000d1 	.word	0x200000d1
 80a242c:	200000d4 	.word	0x200000d4
 80a2430:	080aa1e1 	.word	0x080aa1e1
 80a2434:	200000cc 	.word	0x200000cc
 80a2438:	20000e6c 	.word	0x20000e6c
 80a243c:	20000e70 	.word	0x20000e70
 80a2440:	20000090 	.word	0x20000090
 80a2444:	20000e7c 	.word	0x20000e7c
 80a2448:	20000e80 	.word	0x20000e80
 80a244c:	20000e78 	.word	0x20000e78
 80a2450:	080aa1c4 	.word	0x080aa1c4
 80a2454:	20000e68 	.word	0x20000e68
 80a2458:	080aa1cd 	.word	0x080aa1cd
 80a245c:	20000f20 	.word	0x20000f20
 80a2460:	080aa1d7 	.word	0x080aa1d7
 80a2464:	200000d0 	.word	0x200000d0
 80a2468:	080aa1d9 	.word	0x080aa1d9

080a246c <_Z12psu_shutdownv>:
/* ================================================================== *
 *  Function: psu_shutdown
 *  Description: turns the psu off, sets psu_is_on to false
 *  Parameters:  none
 * ================================================================== */
void psu_shutdown() {
 80a246c:	b538      	push	{r3, r4, r5, lr}
    #if ENABLE_PSU_CONTROL
    if (psu_is_on) {
 80a246e:	4c08      	ldr	r4, [pc, #32]	; (80a2490 <_Z12psu_shutdownv+0x24>)
 80a2470:	7822      	ldrb	r2, [r4, #0]
 80a2472:	b152      	cbz	r2, 80a248a <_Z12psu_shutdownv+0x1e>
        digitalWrite(ps_on, HIGH);
        matrix->clear_matrix();
 80a2474:	4d07      	ldr	r5, [pc, #28]	; (80a2494 <_Z12psu_shutdownv+0x28>)
        digitalWrite(ps_on, HIGH);
 80a2476:	2101      	movs	r1, #1
 80a2478:	2013      	movs	r0, #19
 80a247a:	f003 f834 	bl	80a54e6 <digitalWrite>
        matrix->clear_matrix();
 80a247e:	6828      	ldr	r0, [r5, #0]
 80a2480:	f7fd ffb2 	bl	80a03e8 <_ZN10Bar_Matrix12clear_matrixEv>
        matrix->show_all();
 80a2484:	6828      	ldr	r0, [r5, #0]
 80a2486:	f7fe f931 	bl	80a06ec <_ZN10Bar_Matrix8show_allEv>
    }
    psu_is_on = false;
 80a248a:	2300      	movs	r3, #0
 80a248c:	7023      	strb	r3, [r4, #0]
    #endif
}
 80a248e:	bd38      	pop	{r3, r4, r5, pc}
 80a2490:	200000d1 	.word	0x200000d1
 80a2494:	200000cc 	.word	0x200000cc

080a2498 <loop>:
        for (int i = 0; i < NUM_BINS; i++) {
 80a2498:	2200      	movs	r2, #0
            if (bins.right[i] > SCREENSAVER_MINIMUM || bins.left[i] > SCREENSAVER_MINIMUM) {
 80a249a:	f240 5114 	movw	r1, #1300	; 0x514
void loop() {
 80a249e:	b538      	push	{r3, r4, r5, lr}
 80a24a0:	4b22      	ldr	r3, [pc, #136]	; (80a252c <loop+0x94>)
            if (bins.right[i] > SCREENSAVER_MINIMUM || bins.left[i] > SCREENSAVER_MINIMUM) {
 80a24a2:	69dc      	ldr	r4, [r3, #28]
 80a24a4:	4618      	mov	r0, r3
 80a24a6:	428c      	cmp	r4, r1
 80a24a8:	dc03      	bgt.n	80a24b2 <loop+0x1a>
 80a24aa:	6800      	ldr	r0, [r0, #0]
 80a24ac:	3304      	adds	r3, #4
 80a24ae:	4288      	cmp	r0, r1
 80a24b0:	dd37      	ble.n	80a2522 <loop+0x8a>
                if (!psu_is_on) { psu_startup(); }
 80a24b2:	4b1f      	ldr	r3, [pc, #124]	; (80a2530 <loop+0x98>)
 80a24b4:	781b      	ldrb	r3, [r3, #0]
 80a24b6:	b90b      	cbnz	r3, 80a24bc <loop+0x24>
 80a24b8:	f7ff fea6 	bl	80a2208 <_Z11psu_startupv>
                last_sound_seconds = Time.now();
 80a24bc:	f002 fadc 	bl	80a4a78 <_ZN9TimeClass3nowEv>
 80a24c0:	4b1c      	ldr	r3, [pc, #112]	; (80a2534 <loop+0x9c>)
 80a24c2:	6018      	str	r0, [r3, #0]
        if (psu_is_on) {
 80a24c4:	4c1a      	ldr	r4, [pc, #104]	; (80a2530 <loop+0x98>)
 80a24c6:	7822      	ldrb	r2, [r4, #0]
 80a24c8:	b10a      	cbz	r2, 80a24ce <loop+0x36>
            powered_on_tick();
 80a24ca:	f7ff feb3 	bl	80a2234 <_Z15powered_on_tickv>
        if (Time.now()-last_sound_seconds > SCREENSAVER_SECS_TO_PSU_OFF) {
 80a24ce:	f002 fad3 	bl	80a4a78 <_ZN9TimeClass3nowEv>
 80a24d2:	4b18      	ldr	r3, [pc, #96]	; (80a2534 <loop+0x9c>)
 80a24d4:	681b      	ldr	r3, [r3, #0]
 80a24d6:	1ac0      	subs	r0, r0, r3
 80a24d8:	281e      	cmp	r0, #30
 80a24da:	d903      	bls.n	80a24e4 <loop+0x4c>
            if (psu_is_on) { psu_shutdown(); }
 80a24dc:	7823      	ldrb	r3, [r4, #0]
 80a24de:	b10b      	cbz	r3, 80a24e4 <loop+0x4c>
 80a24e0:	f7ff ffc4 	bl	80a246c <_Z12psu_shutdownv>
    tick_count++;
 80a24e4:	4c14      	ldr	r4, [pc, #80]	; (80a2538 <loop+0xa0>)
    if (millis() - last_tick_update >= 10000) {
 80a24e6:	4d15      	ldr	r5, [pc, #84]	; (80a253c <loop+0xa4>)
    tick_count++;
 80a24e8:	6823      	ldr	r3, [r4, #0]
 80a24ea:	3301      	adds	r3, #1
 80a24ec:	6023      	str	r3, [r4, #0]
 80a24ee:	f001 fa77 	bl	80a39e0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - last_tick_update >= 10000) {
 80a24f2:	682b      	ldr	r3, [r5, #0]
 80a24f4:	1ac0      	subs	r0, r0, r3
 80a24f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80a24fa:	4298      	cmp	r0, r3
 80a24fc:	d90c      	bls.n	80a2518 <loop+0x80>
 80a24fe:	f001 fa6f 	bl	80a39e0 <HAL_Timer_Get_Milli_Seconds>
        tick_count_publish = tick_count;
 80a2502:	6822      	ldr	r2, [r4, #0]
 80a2504:	4b0e      	ldr	r3, [pc, #56]	; (80a2540 <loop+0xa8>)
        last_tick_update = millis();
 80a2506:	6028      	str	r0, [r5, #0]
        tick_count_publish = tick_count;
 80a2508:	601a      	str	r2, [r3, #0]
        frame_count_publish = frame_count;
 80a250a:	4b0e      	ldr	r3, [pc, #56]	; (80a2544 <loop+0xac>)
 80a250c:	4a0e      	ldr	r2, [pc, #56]	; (80a2548 <loop+0xb0>)
 80a250e:	6819      	ldr	r1, [r3, #0]
 80a2510:	6011      	str	r1, [r2, #0]
        tick_count = 0;
 80a2512:	2200      	movs	r2, #0
 80a2514:	6022      	str	r2, [r4, #0]
        frame_count = 0;
 80a2516:	601a      	str	r2, [r3, #0]
    delay(1);
 80a2518:	2001      	movs	r0, #1
}
 80a251a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(1);
 80a251e:	f001 bca5 	b.w	80a3e6c <delay>
        for (int i = 0; i < NUM_BINS; i++) {
 80a2522:	3201      	adds	r2, #1
 80a2524:	2a07      	cmp	r2, #7
 80a2526:	d1bc      	bne.n	80a24a2 <loop+0xa>
 80a2528:	e7cc      	b.n	80a24c4 <loop+0x2c>
 80a252a:	bf00      	nop
 80a252c:	20000094 	.word	0x20000094
 80a2530:	200000d1 	.word	0x200000d1
 80a2534:	20000090 	.word	0x20000090
 80a2538:	20000e7c 	.word	0x20000e7c
 80a253c:	20000e78 	.word	0x20000e78
 80a2540:	20000e80 	.word	0x20000e80
 80a2544:	20000e68 	.word	0x20000e68
 80a2548:	20000e6c 	.word	0x20000e6c

080a254c <_GLOBAL__sub_I_SystemMode>:
        val_(val) {
 80a254c:	2001      	movs	r0, #1
 80a254e:	4b0b      	ldr	r3, [pc, #44]	; (80a257c <_GLOBAL__sub_I_SystemMode+0x30>)
}
 80a2550:	b510      	push	{r4, lr}
 80a2552:	7018      	strb	r0, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
 80a2554:	2300      	movs	r3, #0
 80a2556:	4c0a      	ldr	r4, [pc, #40]	; (80a2580 <_GLOBAL__sub_I_SystemMode+0x34>)
 80a2558:	6023      	str	r3, [r4, #0]
 80a255a:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
 80a255c:	71a3      	strb	r3, [r4, #6]
 80a255e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80a2562:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2564:	f001 fb7e 	bl	80a3c64 <set_system_mode>
SYSTEM_MODE(AUTOMATIC);
 80a2568:	4620      	mov	r0, r4
 80a256a:	4a06      	ldr	r2, [pc, #24]	; (80a2584 <_GLOBAL__sub_I_SystemMode+0x38>)
 80a256c:	4906      	ldr	r1, [pc, #24]	; (80a2588 <_GLOBAL__sub_I_SystemMode+0x3c>)
 80a256e:	f003 f843 	bl	80a55f8 <__aeabi_atexit>
}
 80a2572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Beat_Detection beat_detect;
 80a2576:	4805      	ldr	r0, [pc, #20]	; (80a258c <_GLOBAL__sub_I_SystemMode+0x40>)
 80a2578:	f7ff bc40 	b.w	80a1dfc <_ZN14Beat_DetectionC1Ev>
 80a257c:	200000d0 	.word	0x200000d0
 80a2580:	20000084 	.word	0x20000084
 80a2584:	2000006c 	.word	0x2000006c
 80a2588:	080a20e7 	.word	0x080a20e7
 80a258c:	200000d4 	.word	0x200000d4

080a2590 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Core or Photon ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) : 
 80a2590:	b538      	push	{r3, r4, r5, lr}
 80a2592:	4604      	mov	r4, r0
  numLEDs(n), numBytes(n*3), pin(p), brightness(0), pixels(NULL), type(t), endTime(0)
 80a2594:	2500      	movs	r5, #0
 80a2596:	8001      	strh	r1, [r0, #0]
 80a2598:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a259c:	b288      	uxth	r0, r1
 80a259e:	e9c4 5502 	strd	r5, r5, [r4, #8]
 80a25a2:	8060      	strh	r0, [r4, #2]
 80a25a4:	7123      	strb	r3, [r4, #4]
 80a25a6:	7162      	strb	r2, [r4, #5]
 80a25a8:	71a5      	strb	r5, [r4, #6]
{
  if((pixels = (uint8_t *)malloc(numBytes))) {
 80a25aa:	f001 fc1f 	bl	80a3dec <malloc>
 80a25ae:	60a0      	str	r0, [r4, #8]
 80a25b0:	b118      	cbz	r0, 80a25ba <_ZN17Adafruit_NeoPixelC1Ethh+0x2a>
    memset(pixels, 0, numBytes);
 80a25b2:	4629      	mov	r1, r5
 80a25b4:	8862      	ldrh	r2, [r4, #2]
 80a25b6:	f007 fc31 	bl	80a9e1c <memset>
  }
}
 80a25ba:	4620      	mov	r0, r4
 80a25bc:	bd38      	pop	{r3, r4, r5, pc}

080a25be <_ZN17Adafruit_NeoPixel5beginEv>:
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if(pixels) free(pixels);
  pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::begin(void) {
 80a25be:	b510      	push	{r4, lr}
 80a25c0:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a25c2:	2101      	movs	r1, #1
 80a25c4:	7940      	ldrb	r0, [r0, #5]
 80a25c6:	f002 ff7d 	bl	80a54c4 <pinMode>
  digitalWrite(pin, LOW);
 80a25ca:	7960      	ldrb	r0, [r4, #5]
 80a25cc:	2100      	movs	r1, #0
}
 80a25ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(pin, LOW);
 80a25d2:	f002 bf88 	b.w	80a54e6 <digitalWrite>
	...

080a25d8 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a25d8:	6883      	ldr	r3, [r0, #8]
 80a25da:	2b00      	cmp	r3, #0
 80a25dc:	f000 856f 	beq.w	80a30be <_ZN17Adafruit_NeoPixel4showEv+0xae6>
void Adafruit_NeoPixel::show(void) {
 80a25e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a25e2:	7903      	ldrb	r3, [r0, #4]
 80a25e4:	4604      	mov	r4, r0
 80a25e6:	2b03      	cmp	r3, #3
void Adafruit_NeoPixel::show(void) {
 80a25e8:	b087      	sub	sp, #28
  switch(type) {
 80a25ea:	f000 8287 	beq.w	80a2afc <_ZN17Adafruit_NeoPixel4showEv+0x524>
 80a25ee:	2b04      	cmp	r3, #4
 80a25f0:	bf14      	ite	ne
 80a25f2:	2532      	movne	r5, #50	; 0x32
 80a25f4:	f44f 75fa 	moveq.w	r5, #500	; 0x1f4
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a25f8:	f001 f9ea 	bl	80a39d0 <HAL_Timer_Get_Micro_Seconds>
    case WS2811: // WS2811 = 50us reset pulse
    default:     // default = 50us reset pulse
      wait_time = 50L;
      break;
  }
  while((micros() - endTime) < wait_time);
 80a25fc:	68e3      	ldr	r3, [r4, #12]
 80a25fe:	1ac0      	subs	r0, r0, r3
 80a2600:	42a8      	cmp	r0, r5
 80a2602:	d3f9      	bcc.n	80a25f8 <_ZN17Adafruit_NeoPixel4showEv+0x20>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a2604:	b672      	cpsid	i
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit pixel color
    mask; // 8-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a2606:	8863      	ldrh	r3, [r4, #2]
   *ptr = pixels,   // Pointer to next byte
    g,              // Current green byte value
    r,              // Current red byte value
    b;              // Current blue byte value

  if(type == WS2812B) { // same as WS2812, 800 KHz bitstream
 80a2608:	7921      	ldrb	r1, [r4, #4]
  volatile uint16_t i = numBytes; // Output loop counter
 80a260a:	f8ad 300a 	strh.w	r3, [sp, #10]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a260e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  if(type == WS2812B) { // same as WS2812, 800 KHz bitstream
 80a2612:	2902      	cmp	r1, #2
   *ptr = pixels,   // Pointer to next byte
 80a2614:	68a5      	ldr	r5, [r4, #8]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2616:	b29b      	uxth	r3, r3
  if(type == WS2812B) { // same as WS2812, 800 KHz bitstream
 80a2618:	f000 813a 	beq.w	80a2890 <_ZN17Adafruit_NeoPixel4showEv+0x2b8>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2) { // WS2812B with DWT timer
 80a261c:	2905      	cmp	r1, #5
 80a261e:	f000 826f 	beq.w	80a2b00 <_ZN17Adafruit_NeoPixel4showEv+0x528>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a2622:	2900      	cmp	r1, #0
 80a2624:	f000 82e5 	beq.w	80a2bf2 <_ZN17Adafruit_NeoPixel4showEv+0x61a>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a2628:	2903      	cmp	r1, #3
 80a262a:	f000 8549 	beq.w	80a30c0 <_ZN17Adafruit_NeoPixel4showEv+0xae8>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a262e:	2b00      	cmp	r3, #0
 80a2630:	f000 8128 	beq.w	80a2884 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a2634:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a2638:	2600      	movs	r6, #0
 80a263a:	4a18      	ldr	r2, [pc, #96]	; (80a269c <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
      mask = 0x800000; // reset the mask
 80a263c:	9104      	str	r1, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a263e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      pinSet(pin, LOW); // LOW
 80a2642:	7960      	ldrb	r0, [r4, #5]
      i = i-3;      // decrement bytes remaining
 80a2644:	3b03      	subs	r3, #3
 80a2646:	b29b      	uxth	r3, r3
 80a2648:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a264c:	782b      	ldrb	r3, [r5, #0]
      pinSet(pin, LOW); // LOW
 80a264e:	6817      	ldr	r7, [r2, #0]
      r = *ptr++;   // Next red byte value
 80a2650:	b2db      	uxtb	r3, r3
 80a2652:	f88d 3008 	strb.w	r3, [sp, #8]
      b = *ptr++;   // Next blue byte value
 80a2656:	786b      	ldrb	r3, [r5, #1]
      pinSet(pin, LOW); // LOW
 80a2658:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
      b = *ptr++;   // Next blue byte value
 80a265c:	b2db      	uxtb	r3, r3
 80a265e:	f88d 3009 	strb.w	r3, [sp, #9]
      g = *ptr++;   // Next green byte value
 80a2662:	78ab      	ldrb	r3, [r5, #2]
      pinSet(pin, LOW); // LOW
 80a2664:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
      g = *ptr++;   // Next green byte value
 80a2668:	b2db      	uxtb	r3, r3
 80a266a:	f88d 3007 	strb.w	r3, [sp, #7]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a266e:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a2672:	f89d 3009 	ldrb.w	r3, [sp, #9]
      pinSet(pin, LOW); // LOW
 80a2676:	f8bc c004 	ldrh.w	ip, [ip, #4]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a267a:	021b      	lsls	r3, r3, #8
 80a267c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80a2680:	f89d e007 	ldrb.w	lr, [sp, #7]
      pinSet(pin, LOW); // LOW
 80a2684:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a2688:	ea43 030e 	orr.w	r3, r3, lr
 80a268c:	9303      	str	r3, [sp, #12]
      g = *ptr++;   // Next green byte value
 80a268e:	3503      	adds	r5, #3
      j = 0;        // reset the 24-bit counter
 80a2690:	f88d 6006 	strb.w	r6, [sp, #6]
      pinSet(pin, LOW); // LOW
 80a2694:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a2698:	e07d      	b.n	80a2796 <_ZN17Adafruit_NeoPixel4showEv+0x1be>
 80a269a:	bf00      	nop
 80a269c:	20000e84 	.word	0x20000e84
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a26a0:	9b04      	ldr	r3, [sp, #16]
 80a26a2:	085b      	lsrs	r3, r3, #1
 80a26a4:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a26a6:	4600      	mov	r0, r0
 80a26a8:	bf00      	nop
 80a26aa:	bf00      	nop
 80a26ac:	bf00      	nop
 80a26ae:	bf00      	nop
 80a26b0:	bf00      	nop
 80a26b2:	bf00      	nop
 80a26b4:	bf00      	nop
 80a26b6:	bf00      	nop
 80a26b8:	bf00      	nop
 80a26ba:	bf00      	nop
 80a26bc:	bf00      	nop
 80a26be:	bf00      	nop
 80a26c0:	bf00      	nop
 80a26c2:	bf00      	nop
 80a26c4:	bf00      	nop
 80a26c6:	bf00      	nop
 80a26c8:	bf00      	nop
 80a26ca:	bf00      	nop
 80a26cc:	bf00      	nop
 80a26ce:	bf00      	nop
 80a26d0:	bf00      	nop
 80a26d2:	bf00      	nop
 80a26d4:	bf00      	nop
 80a26d6:	bf00      	nop
 80a26d8:	bf00      	nop
 80a26da:	bf00      	nop
 80a26dc:	bf00      	nop
 80a26de:	bf00      	nop
 80a26e0:	bf00      	nop
 80a26e2:	bf00      	nop
 80a26e4:	bf00      	nop
 80a26e6:	bf00      	nop
 80a26e8:	bf00      	nop
 80a26ea:	bf00      	nop
 80a26ec:	bf00      	nop
 80a26ee:	bf00      	nop
 80a26f0:	bf00      	nop
 80a26f2:	bf00      	nop
 80a26f4:	bf00      	nop
 80a26f6:	bf00      	nop
 80a26f8:	bf00      	nop
 80a26fa:	bf00      	nop
 80a26fc:	bf00      	nop
 80a26fe:	bf00      	nop
 80a2700:	bf00      	nop
 80a2702:	bf00      	nop
 80a2704:	bf00      	nop
 80a2706:	bf00      	nop
 80a2708:	bf00      	nop
 80a270a:	bf00      	nop
 80a270c:	bf00      	nop
 80a270e:	bf00      	nop
 80a2710:	bf00      	nop
 80a2712:	bf00      	nop
 80a2714:	bf00      	nop
 80a2716:	bf00      	nop
 80a2718:	bf00      	nop
 80a271a:	bf00      	nop
 80a271c:	bf00      	nop
 80a271e:	bf00      	nop
 80a2720:	bf00      	nop
 80a2722:	bf00      	nop
 80a2724:	bf00      	nop
 80a2726:	bf00      	nop
 80a2728:	bf00      	nop
 80a272a:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a272c:	7960      	ldrb	r0, [r4, #5]
 80a272e:	6817      	ldr	r7, [r2, #0]
          j++;
 80a2730:	f89d 3006 	ldrb.w	r3, [sp, #6]
          pinSet(pin, HIGH); // HIGH
 80a2734:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a2738:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
 80a273c:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a2740:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
          j++;
 80a2744:	3301      	adds	r3, #1
 80a2746:	b2db      	uxtb	r3, r3
 80a2748:	f88d 3006 	strb.w	r3, [sp, #6]
          pinSet(pin, HIGH); // HIGH
 80a274c:	f8a0 c018 	strh.w	ip, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2750:	4600      	mov	r0, r0
 80a2752:	bf00      	nop
 80a2754:	bf00      	nop
 80a2756:	bf00      	nop
 80a2758:	bf00      	nop
 80a275a:	bf00      	nop
 80a275c:	bf00      	nop
 80a275e:	bf00      	nop
 80a2760:	bf00      	nop
 80a2762:	bf00      	nop
 80a2764:	bf00      	nop
 80a2766:	bf00      	nop
 80a2768:	bf00      	nop
 80a276a:	bf00      	nop
 80a276c:	bf00      	nop
 80a276e:	bf00      	nop
 80a2770:	bf00      	nop
 80a2772:	bf00      	nop
 80a2774:	bf00      	nop
 80a2776:	bf00      	nop
 80a2778:	bf00      	nop
          if(j==24) break;
 80a277a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a277e:	2b18      	cmp	r3, #24
 80a2780:	d07a      	beq.n	80a2878 <_ZN17Adafruit_NeoPixel4showEv+0x2a0>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a2782:	7963      	ldrb	r3, [r4, #5]
 80a2784:	6810      	ldr	r0, [r2, #0]
 80a2786:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a278a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a278e:	88bf      	ldrh	r7, [r7, #4]
 80a2790:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2794:	835f      	strh	r7, [r3, #26]
        if (c & mask) { // if masked bit is high
 80a2796:	9803      	ldr	r0, [sp, #12]
 80a2798:	9b04      	ldr	r3, [sp, #16]
 80a279a:	4218      	tst	r0, r3
 80a279c:	d180      	bne.n	80a26a0 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            ::: "r0", "cc", "memory");
 80a279e:	4600      	mov	r0, r0
 80a27a0:	bf00      	nop
 80a27a2:	bf00      	nop
 80a27a4:	bf00      	nop
 80a27a6:	bf00      	nop
 80a27a8:	bf00      	nop
 80a27aa:	bf00      	nop
 80a27ac:	bf00      	nop
 80a27ae:	bf00      	nop
 80a27b0:	bf00      	nop
 80a27b2:	bf00      	nop
 80a27b4:	bf00      	nop
 80a27b6:	bf00      	nop
 80a27b8:	bf00      	nop
 80a27ba:	bf00      	nop
 80a27bc:	bf00      	nop
 80a27be:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a27c0:	7963      	ldrb	r3, [r4, #5]
 80a27c2:	6810      	ldr	r0, [r2, #0]
 80a27c4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a27c8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a27cc:	88bf      	ldrh	r7, [r7, #4]
 80a27ce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a27d2:	831f      	strh	r7, [r3, #24]
          j++;
 80a27d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a27d8:	3301      	adds	r3, #1
 80a27da:	b2db      	uxtb	r3, r3
 80a27dc:	f88d 3006 	strb.w	r3, [sp, #6]
          mask >>= 1; // Do this task during the long delay of this bit
 80a27e0:	9b04      	ldr	r3, [sp, #16]
 80a27e2:	085b      	lsrs	r3, r3, #1
 80a27e4:	9304      	str	r3, [sp, #16]
            ::: "r0", "cc", "memory");
 80a27e6:	4600      	mov	r0, r0
 80a27e8:	bf00      	nop
 80a27ea:	bf00      	nop
 80a27ec:	bf00      	nop
 80a27ee:	bf00      	nop
 80a27f0:	bf00      	nop
 80a27f2:	bf00      	nop
 80a27f4:	bf00      	nop
 80a27f6:	bf00      	nop
 80a27f8:	bf00      	nop
 80a27fa:	bf00      	nop
 80a27fc:	bf00      	nop
 80a27fe:	bf00      	nop
 80a2800:	bf00      	nop
 80a2802:	bf00      	nop
 80a2804:	bf00      	nop
 80a2806:	bf00      	nop
 80a2808:	bf00      	nop
 80a280a:	bf00      	nop
 80a280c:	bf00      	nop
 80a280e:	bf00      	nop
 80a2810:	bf00      	nop
 80a2812:	bf00      	nop
 80a2814:	bf00      	nop
 80a2816:	bf00      	nop
 80a2818:	bf00      	nop
 80a281a:	bf00      	nop
 80a281c:	bf00      	nop
 80a281e:	bf00      	nop
 80a2820:	bf00      	nop
 80a2822:	bf00      	nop
 80a2824:	bf00      	nop
 80a2826:	bf00      	nop
 80a2828:	bf00      	nop
 80a282a:	bf00      	nop
 80a282c:	bf00      	nop
 80a282e:	bf00      	nop
 80a2830:	bf00      	nop
 80a2832:	bf00      	nop
 80a2834:	bf00      	nop
 80a2836:	bf00      	nop
 80a2838:	bf00      	nop
 80a283a:	bf00      	nop
 80a283c:	bf00      	nop
 80a283e:	bf00      	nop
 80a2840:	bf00      	nop
 80a2842:	bf00      	nop
 80a2844:	bf00      	nop
 80a2846:	bf00      	nop
 80a2848:	bf00      	nop
 80a284a:	bf00      	nop
 80a284c:	bf00      	nop
 80a284e:	bf00      	nop
 80a2850:	bf00      	nop
 80a2852:	bf00      	nop
 80a2854:	bf00      	nop
 80a2856:	bf00      	nop
 80a2858:	bf00      	nop
 80a285a:	bf00      	nop
 80a285c:	bf00      	nop
 80a285e:	bf00      	nop
 80a2860:	bf00      	nop
 80a2862:	bf00      	nop
 80a2864:	bf00      	nop
 80a2866:	bf00      	nop
 80a2868:	bf00      	nop
 80a286a:	bf00      	nop
 80a286c:	bf00      	nop
 80a286e:	bf00      	nop
          if(j==24) break;
 80a2870:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a2874:	2b18      	cmp	r3, #24
 80a2876:	d184      	bne.n	80a2782 <_ZN17Adafruit_NeoPixel4showEv+0x1aa>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2878:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a287c:	b29b      	uxth	r3, r3
 80a287e:	2b00      	cmp	r3, #0
 80a2880:	f47f aedc 	bne.w	80a263c <_ZN17Adafruit_NeoPixel4showEv+0x64>
  __ASM volatile ("cpsie i");
 80a2884:	b662      	cpsie	i
 80a2886:	f001 f8a3 	bl	80a39d0 <HAL_Timer_Get_Micro_Seconds>
      }
    } // end while(i) ... no more pixels
  }

  __enable_irq();
  endTime = micros(); // Save EOD time for latch on next call
 80a288a:	60e0      	str	r0, [r4, #12]
}
 80a288c:	b007      	add	sp, #28
 80a288e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2890:	2b00      	cmp	r3, #0
 80a2892:	d0f7      	beq.n	80a2884 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a2894:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a2898:	2600      	movs	r6, #0
 80a289a:	4a13      	ldr	r2, [pc, #76]	; (80a28e8 <_ZN17Adafruit_NeoPixel4showEv+0x310>)
      mask = 0x800000; // reset the mask
 80a289c:	9104      	str	r1, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a289e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a28a2:	3503      	adds	r5, #3
      i = i-3;      // decrement bytes remaining
 80a28a4:	3b03      	subs	r3, #3
 80a28a6:	b29b      	uxth	r3, r3
 80a28a8:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a28ac:	f815 3c03 	ldrb.w	r3, [r5, #-3]
 80a28b0:	b2db      	uxtb	r3, r3
 80a28b2:	f88d 3007 	strb.w	r3, [sp, #7]
      r = *ptr++;   // Next red byte value
 80a28b6:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 80a28ba:	b2db      	uxtb	r3, r3
 80a28bc:	f88d 3008 	strb.w	r3, [sp, #8]
      b = *ptr++;   // Next blue byte value
 80a28c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80a28c4:	b2db      	uxtb	r3, r3
 80a28c6:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a28ca:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a28ce:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80a28d2:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a28d6:	021b      	lsls	r3, r3, #8
 80a28d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a28dc:	4303      	orrs	r3, r0
 80a28de:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a28e0:	f88d 6006 	strb.w	r6, [sp, #6]
 80a28e4:	e080      	b.n	80a29e8 <_ZN17Adafruit_NeoPixel4showEv+0x410>
 80a28e6:	bf00      	nop
 80a28e8:	20000e84 	.word	0x20000e84
            ::: "r0", "cc", "memory");
 80a28ec:	4600      	mov	r0, r0
 80a28ee:	bf00      	nop
 80a28f0:	bf00      	nop
 80a28f2:	bf00      	nop
 80a28f4:	bf00      	nop
 80a28f6:	bf00      	nop
 80a28f8:	bf00      	nop
 80a28fa:	bf00      	nop
 80a28fc:	bf00      	nop
 80a28fe:	bf00      	nop
 80a2900:	bf00      	nop
 80a2902:	bf00      	nop
 80a2904:	bf00      	nop
 80a2906:	bf00      	nop
 80a2908:	bf00      	nop
 80a290a:	bf00      	nop
 80a290c:	bf00      	nop
 80a290e:	bf00      	nop
 80a2910:	bf00      	nop
 80a2912:	bf00      	nop
 80a2914:	bf00      	nop
 80a2916:	bf00      	nop
 80a2918:	bf00      	nop
 80a291a:	bf00      	nop
 80a291c:	bf00      	nop
 80a291e:	bf00      	nop
 80a2920:	bf00      	nop
 80a2922:	bf00      	nop
 80a2924:	bf00      	nop
 80a2926:	bf00      	nop
 80a2928:	bf00      	nop
 80a292a:	bf00      	nop
 80a292c:	bf00      	nop
 80a292e:	bf00      	nop
 80a2930:	bf00      	nop
 80a2932:	bf00      	nop
 80a2934:	bf00      	nop
 80a2936:	bf00      	nop
 80a2938:	bf00      	nop
 80a293a:	bf00      	nop
 80a293c:	bf00      	nop
 80a293e:	bf00      	nop
 80a2940:	bf00      	nop
 80a2942:	bf00      	nop
 80a2944:	bf00      	nop
 80a2946:	bf00      	nop
 80a2948:	bf00      	nop
 80a294a:	bf00      	nop
 80a294c:	bf00      	nop
 80a294e:	bf00      	nop
 80a2950:	bf00      	nop
 80a2952:	bf00      	nop
 80a2954:	bf00      	nop
 80a2956:	bf00      	nop
 80a2958:	bf00      	nop
 80a295a:	bf00      	nop
 80a295c:	bf00      	nop
 80a295e:	bf00      	nop
 80a2960:	bf00      	nop
 80a2962:	bf00      	nop
 80a2964:	bf00      	nop
 80a2966:	bf00      	nop
 80a2968:	bf00      	nop
 80a296a:	bf00      	nop
 80a296c:	bf00      	nop
 80a296e:	bf00      	nop
 80a2970:	bf00      	nop
 80a2972:	bf00      	nop
 80a2974:	bf00      	nop
 80a2976:	bf00      	nop
 80a2978:	bf00      	nop
 80a297a:	bf00      	nop
 80a297c:	bf00      	nop
 80a297e:	bf00      	nop
 80a2980:	bf00      	nop
 80a2982:	bf00      	nop
 80a2984:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a2986:	7963      	ldrb	r3, [r4, #5]
 80a2988:	6810      	ldr	r0, [r2, #0]
 80a298a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a298e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2992:	88bf      	ldrh	r7, [r7, #4]
 80a2994:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2998:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a299a:	4600      	mov	r0, r0
 80a299c:	bf00      	nop
 80a299e:	bf00      	nop
 80a29a0:	bf00      	nop
 80a29a2:	bf00      	nop
 80a29a4:	bf00      	nop
 80a29a6:	bf00      	nop
 80a29a8:	bf00      	nop
 80a29aa:	bf00      	nop
 80a29ac:	bf00      	nop
 80a29ae:	bf00      	nop
 80a29b0:	bf00      	nop
 80a29b2:	bf00      	nop
 80a29b4:	bf00      	nop
 80a29b6:	bf00      	nop
 80a29b8:	bf00      	nop
 80a29ba:	bf00      	nop
 80a29bc:	bf00      	nop
 80a29be:	bf00      	nop
 80a29c0:	bf00      	nop
 80a29c2:	bf00      	nop
 80a29c4:	bf00      	nop
 80a29c6:	bf00      	nop
 80a29c8:	bf00      	nop
 80a29ca:	bf00      	nop
 80a29cc:	bf00      	nop
 80a29ce:	bf00      	nop
        mask >>= 1;
 80a29d0:	9b04      	ldr	r3, [sp, #16]
 80a29d2:	085b      	lsrs	r3, r3, #1
 80a29d4:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a29d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a29da:	3301      	adds	r3, #1
 80a29dc:	b2db      	uxtb	r3, r3
 80a29de:	2b17      	cmp	r3, #23
 80a29e0:	f88d 3006 	strb.w	r3, [sp, #6]
 80a29e4:	f200 8083 	bhi.w	80a2aee <_ZN17Adafruit_NeoPixel4showEv+0x516>
        pinSet(pin, HIGH); // HIGH
 80a29e8:	7963      	ldrb	r3, [r4, #5]
 80a29ea:	6810      	ldr	r0, [r2, #0]
 80a29ec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a29f0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a29f4:	88bf      	ldrh	r7, [r7, #4]
 80a29f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a29fa:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a29fc:	9803      	ldr	r0, [sp, #12]
 80a29fe:	9b04      	ldr	r3, [sp, #16]
 80a2a00:	4218      	tst	r0, r3
 80a2a02:	f47f af73 	bne.w	80a28ec <_ZN17Adafruit_NeoPixel4showEv+0x314>
            ::: "r0", "cc", "memory");
 80a2a06:	4600      	mov	r0, r0
 80a2a08:	bf00      	nop
 80a2a0a:	bf00      	nop
 80a2a0c:	bf00      	nop
 80a2a0e:	bf00      	nop
 80a2a10:	bf00      	nop
 80a2a12:	bf00      	nop
 80a2a14:	bf00      	nop
 80a2a16:	bf00      	nop
 80a2a18:	bf00      	nop
 80a2a1a:	bf00      	nop
 80a2a1c:	bf00      	nop
 80a2a1e:	bf00      	nop
 80a2a20:	bf00      	nop
 80a2a22:	bf00      	nop
 80a2a24:	bf00      	nop
 80a2a26:	bf00      	nop
 80a2a28:	bf00      	nop
 80a2a2a:	bf00      	nop
 80a2a2c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a2a2e:	7963      	ldrb	r3, [r4, #5]
 80a2a30:	6810      	ldr	r0, [r2, #0]
 80a2a32:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2a36:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2a3a:	88bf      	ldrh	r7, [r7, #4]
 80a2a3c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2a40:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a2a42:	4600      	mov	r0, r0
 80a2a44:	bf00      	nop
 80a2a46:	bf00      	nop
 80a2a48:	bf00      	nop
 80a2a4a:	bf00      	nop
 80a2a4c:	bf00      	nop
 80a2a4e:	bf00      	nop
 80a2a50:	bf00      	nop
 80a2a52:	bf00      	nop
 80a2a54:	bf00      	nop
 80a2a56:	bf00      	nop
 80a2a58:	bf00      	nop
 80a2a5a:	bf00      	nop
 80a2a5c:	bf00      	nop
 80a2a5e:	bf00      	nop
 80a2a60:	bf00      	nop
 80a2a62:	bf00      	nop
 80a2a64:	bf00      	nop
 80a2a66:	bf00      	nop
 80a2a68:	bf00      	nop
 80a2a6a:	bf00      	nop
 80a2a6c:	bf00      	nop
 80a2a6e:	bf00      	nop
 80a2a70:	bf00      	nop
 80a2a72:	bf00      	nop
 80a2a74:	bf00      	nop
 80a2a76:	bf00      	nop
 80a2a78:	bf00      	nop
 80a2a7a:	bf00      	nop
 80a2a7c:	bf00      	nop
 80a2a7e:	bf00      	nop
 80a2a80:	bf00      	nop
 80a2a82:	bf00      	nop
 80a2a84:	bf00      	nop
 80a2a86:	bf00      	nop
 80a2a88:	bf00      	nop
 80a2a8a:	bf00      	nop
 80a2a8c:	bf00      	nop
 80a2a8e:	bf00      	nop
 80a2a90:	bf00      	nop
 80a2a92:	bf00      	nop
 80a2a94:	bf00      	nop
 80a2a96:	bf00      	nop
 80a2a98:	bf00      	nop
 80a2a9a:	bf00      	nop
 80a2a9c:	bf00      	nop
 80a2a9e:	bf00      	nop
 80a2aa0:	bf00      	nop
 80a2aa2:	bf00      	nop
 80a2aa4:	bf00      	nop
 80a2aa6:	bf00      	nop
 80a2aa8:	bf00      	nop
 80a2aaa:	bf00      	nop
 80a2aac:	bf00      	nop
 80a2aae:	bf00      	nop
 80a2ab0:	bf00      	nop
 80a2ab2:	bf00      	nop
 80a2ab4:	bf00      	nop
 80a2ab6:	bf00      	nop
 80a2ab8:	bf00      	nop
 80a2aba:	bf00      	nop
 80a2abc:	bf00      	nop
 80a2abe:	bf00      	nop
 80a2ac0:	bf00      	nop
 80a2ac2:	bf00      	nop
 80a2ac4:	bf00      	nop
 80a2ac6:	bf00      	nop
 80a2ac8:	bf00      	nop
 80a2aca:	bf00      	nop
 80a2acc:	bf00      	nop
 80a2ace:	bf00      	nop
 80a2ad0:	bf00      	nop
 80a2ad2:	bf00      	nop
 80a2ad4:	bf00      	nop
 80a2ad6:	bf00      	nop
 80a2ad8:	bf00      	nop
 80a2ada:	bf00      	nop
 80a2adc:	bf00      	nop
 80a2ade:	bf00      	nop
 80a2ae0:	bf00      	nop
 80a2ae2:	bf00      	nop
 80a2ae4:	bf00      	nop
 80a2ae6:	bf00      	nop
 80a2ae8:	bf00      	nop
 80a2aea:	bf00      	nop
 80a2aec:	e770      	b.n	80a29d0 <_ZN17Adafruit_NeoPixel4showEv+0x3f8>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2aee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a2af2:	b29b      	uxth	r3, r3
 80a2af4:	2b00      	cmp	r3, #0
 80a2af6:	f47f aed1 	bne.w	80a289c <_ZN17Adafruit_NeoPixel4showEv+0x2c4>
 80a2afa:	e6c3      	b.n	80a2884 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      wait_time = 24L;
 80a2afc:	2518      	movs	r5, #24
 80a2afe:	e57b      	b.n	80a25f8 <_ZN17Adafruit_NeoPixel4showEv+0x20>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2b00:	2b00      	cmp	r3, #0
 80a2b02:	f43f aebf 	beq.w	80a2884 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a2b06:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a2b0a:	2600      	movs	r6, #0
        pinSet(pin, HIGH); // HIGH
 80a2b0c:	4b4e      	ldr	r3, [pc, #312]	; (80a2c48 <_ZN17Adafruit_NeoPixel4showEv+0x670>)
 80a2b0e:	6819      	ldr	r1, [r3, #0]
        cyc = DWT->CYCCNT;
 80a2b10:	4b4e      	ldr	r3, [pc, #312]	; (80a2c4c <_ZN17Adafruit_NeoPixel4showEv+0x674>)
      mask = 0x800000; // reset the mask
 80a2b12:	f8cd e010 	str.w	lr, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a2b16:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a2b1a:	3503      	adds	r5, #3
      i = i-3;      // decrement bytes remaining
 80a2b1c:	3a03      	subs	r2, #3
 80a2b1e:	b292      	uxth	r2, r2
 80a2b20:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a2b24:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 80a2b28:	b2d2      	uxtb	r2, r2
 80a2b2a:	f88d 2007 	strb.w	r2, [sp, #7]
      r = *ptr++;   // Next red byte value
 80a2b2e:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80a2b32:	b2d2      	uxtb	r2, r2
 80a2b34:	f88d 2008 	strb.w	r2, [sp, #8]
      b = *ptr++;   // Next blue byte value
 80a2b38:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80a2b3c:	b2d2      	uxtb	r2, r2
 80a2b3e:	f88d 2009 	strb.w	r2, [sp, #9]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a2b42:	f89d c007 	ldrb.w	ip, [sp, #7]
 80a2b46:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80a2b4a:	f89d 7009 	ldrb.w	r7, [sp, #9]
 80a2b4e:	0212      	lsls	r2, r2, #8
 80a2b50:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80a2b54:	433a      	orrs	r2, r7
 80a2b56:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a2b58:	f88d 6006 	strb.w	r6, [sp, #6]
        pinSet(pin, HIGH); // HIGH
 80a2b5c:	7962      	ldrb	r2, [r4, #5]
        cyc = DWT->CYCCNT;
 80a2b5e:	6858      	ldr	r0, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a2b60:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a2b64:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 80a2b68:	88bf      	ldrh	r7, [r7, #4]
 80a2b6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
        cyc = DWT->CYCCNT;
 80a2b6e:	9005      	str	r0, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a2b70:	8317      	strh	r7, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a2b72:	9f03      	ldr	r7, [sp, #12]
 80a2b74:	9a04      	ldr	r2, [sp, #16]
 80a2b76:	4217      	tst	r7, r2
 80a2b78:	d025      	beq.n	80a2bc6 <_ZN17Adafruit_NeoPixel4showEv+0x5ee>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a2b7a:	685a      	ldr	r2, [r3, #4]
 80a2b7c:	9f05      	ldr	r7, [sp, #20]
 80a2b7e:	1bd2      	subs	r2, r2, r7
 80a2b80:	2a4f      	cmp	r2, #79	; 0x4f
 80a2b82:	d9fa      	bls.n	80a2b7a <_ZN17Adafruit_NeoPixel4showEv+0x5a2>
          pinSet(pin, LOW);
 80a2b84:	7962      	ldrb	r2, [r4, #5]
 80a2b86:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a2b8a:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 80a2b8e:	88bf      	ldrh	r7, [r7, #4]
 80a2b90:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a2b94:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a2b96:	685a      	ldr	r2, [r3, #4]
 80a2b98:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a2b9a:	685a      	ldr	r2, [r3, #4]
 80a2b9c:	9f05      	ldr	r7, [sp, #20]
 80a2b9e:	1bd2      	subs	r2, r2, r7
 80a2ba0:	2a07      	cmp	r2, #7
 80a2ba2:	d9fa      	bls.n	80a2b9a <_ZN17Adafruit_NeoPixel4showEv+0x5c2>
        mask >>= 1;
 80a2ba4:	9a04      	ldr	r2, [sp, #16]
 80a2ba6:	0852      	lsrs	r2, r2, #1
 80a2ba8:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a2baa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a2bae:	3201      	adds	r2, #1
 80a2bb0:	b2d2      	uxtb	r2, r2
 80a2bb2:	2a17      	cmp	r2, #23
 80a2bb4:	f88d 2006 	strb.w	r2, [sp, #6]
 80a2bb8:	d9d0      	bls.n	80a2b5c <_ZN17Adafruit_NeoPixel4showEv+0x584>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2bba:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a2bbe:	b292      	uxth	r2, r2
 80a2bc0:	2a00      	cmp	r2, #0
 80a2bc2:	d1a6      	bne.n	80a2b12 <_ZN17Adafruit_NeoPixel4showEv+0x53a>
 80a2bc4:	e65e      	b.n	80a2884 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a2bc6:	685a      	ldr	r2, [r3, #4]
 80a2bc8:	9f05      	ldr	r7, [sp, #20]
 80a2bca:	1bd2      	subs	r2, r2, r7
 80a2bcc:	2a18      	cmp	r2, #24
 80a2bce:	d9fa      	bls.n	80a2bc6 <_ZN17Adafruit_NeoPixel4showEv+0x5ee>
          pinSet(pin, LOW);
 80a2bd0:	7962      	ldrb	r2, [r4, #5]
 80a2bd2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a2bd6:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 80a2bda:	88bf      	ldrh	r7, [r7, #4]
 80a2bdc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a2be0:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a2be2:	685a      	ldr	r2, [r3, #4]
 80a2be4:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a2be6:	685a      	ldr	r2, [r3, #4]
 80a2be8:	9f05      	ldr	r7, [sp, #20]
 80a2bea:	1bd2      	subs	r2, r2, r7
 80a2bec:	2a45      	cmp	r2, #69	; 0x45
 80a2bee:	d9fa      	bls.n	80a2be6 <_ZN17Adafruit_NeoPixel4showEv+0x60e>
 80a2bf0:	e7d8      	b.n	80a2ba4 <_ZN17Adafruit_NeoPixel4showEv+0x5cc>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2bf2:	2b00      	cmp	r3, #0
 80a2bf4:	f43f ae46 	beq.w	80a2884 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a2bf8:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 80a2bfc:	4a12      	ldr	r2, [pc, #72]	; (80a2c48 <_ZN17Adafruit_NeoPixel4showEv+0x670>)
 80a2bfe:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a2c00:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a2c04:	3503      	adds	r5, #3
      i = i-3;      // decrement bytes remaining
 80a2c06:	3b03      	subs	r3, #3
 80a2c08:	b29b      	uxth	r3, r3
 80a2c0a:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a2c0e:	f815 3c03 	ldrb.w	r3, [r5, #-3]
 80a2c12:	b2db      	uxtb	r3, r3
 80a2c14:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a2c18:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 80a2c1c:	b2db      	uxtb	r3, r3
 80a2c1e:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a2c22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80a2c26:	b2db      	uxtb	r3, r3
 80a2c28:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a2c2c:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a2c30:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a2c34:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a2c38:	021b      	lsls	r3, r3, #8
 80a2c3a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a2c3e:	4303      	orrs	r3, r0
 80a2c40:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a2c42:	f88d 1006 	strb.w	r1, [sp, #6]
 80a2c46:	e11a      	b.n	80a2e7e <_ZN17Adafruit_NeoPixel4showEv+0x8a6>
 80a2c48:	20000e84 	.word	0x20000e84
 80a2c4c:	e0001000 	.word	0xe0001000
            ::: "r0", "cc", "memory");
 80a2c50:	4600      	mov	r0, r0
 80a2c52:	bf00      	nop
 80a2c54:	bf00      	nop
 80a2c56:	bf00      	nop
 80a2c58:	bf00      	nop
 80a2c5a:	bf00      	nop
 80a2c5c:	bf00      	nop
 80a2c5e:	bf00      	nop
 80a2c60:	bf00      	nop
 80a2c62:	bf00      	nop
 80a2c64:	bf00      	nop
 80a2c66:	bf00      	nop
 80a2c68:	bf00      	nop
 80a2c6a:	bf00      	nop
 80a2c6c:	bf00      	nop
 80a2c6e:	bf00      	nop
 80a2c70:	bf00      	nop
 80a2c72:	bf00      	nop
 80a2c74:	bf00      	nop
 80a2c76:	bf00      	nop
 80a2c78:	bf00      	nop
 80a2c7a:	bf00      	nop
 80a2c7c:	bf00      	nop
 80a2c7e:	bf00      	nop
 80a2c80:	bf00      	nop
 80a2c82:	bf00      	nop
 80a2c84:	bf00      	nop
 80a2c86:	bf00      	nop
 80a2c88:	bf00      	nop
 80a2c8a:	bf00      	nop
 80a2c8c:	bf00      	nop
 80a2c8e:	bf00      	nop
 80a2c90:	bf00      	nop
 80a2c92:	bf00      	nop
 80a2c94:	bf00      	nop
 80a2c96:	bf00      	nop
 80a2c98:	bf00      	nop
 80a2c9a:	bf00      	nop
 80a2c9c:	bf00      	nop
 80a2c9e:	bf00      	nop
 80a2ca0:	bf00      	nop
 80a2ca2:	bf00      	nop
 80a2ca4:	bf00      	nop
 80a2ca6:	bf00      	nop
 80a2ca8:	bf00      	nop
 80a2caa:	bf00      	nop
 80a2cac:	bf00      	nop
 80a2cae:	bf00      	nop
 80a2cb0:	bf00      	nop
 80a2cb2:	bf00      	nop
 80a2cb4:	bf00      	nop
 80a2cb6:	bf00      	nop
 80a2cb8:	bf00      	nop
 80a2cba:	bf00      	nop
 80a2cbc:	bf00      	nop
 80a2cbe:	bf00      	nop
 80a2cc0:	bf00      	nop
 80a2cc2:	bf00      	nop
 80a2cc4:	bf00      	nop
 80a2cc6:	bf00      	nop
 80a2cc8:	bf00      	nop
 80a2cca:	bf00      	nop
 80a2ccc:	bf00      	nop
 80a2cce:	bf00      	nop
 80a2cd0:	bf00      	nop
 80a2cd2:	bf00      	nop
 80a2cd4:	bf00      	nop
 80a2cd6:	bf00      	nop
 80a2cd8:	bf00      	nop
 80a2cda:	bf00      	nop
 80a2cdc:	bf00      	nop
 80a2cde:	bf00      	nop
 80a2ce0:	bf00      	nop
 80a2ce2:	bf00      	nop
 80a2ce4:	bf00      	nop
 80a2ce6:	bf00      	nop
 80a2ce8:	bf00      	nop
 80a2cea:	bf00      	nop
 80a2cec:	bf00      	nop
 80a2cee:	bf00      	nop
 80a2cf0:	bf00      	nop
 80a2cf2:	bf00      	nop
 80a2cf4:	bf00      	nop
 80a2cf6:	bf00      	nop
 80a2cf8:	bf00      	nop
 80a2cfa:	bf00      	nop
 80a2cfc:	bf00      	nop
 80a2cfe:	bf00      	nop
 80a2d00:	bf00      	nop
 80a2d02:	bf00      	nop
 80a2d04:	bf00      	nop
 80a2d06:	bf00      	nop
 80a2d08:	bf00      	nop
 80a2d0a:	bf00      	nop
 80a2d0c:	bf00      	nop
 80a2d0e:	bf00      	nop
 80a2d10:	bf00      	nop
 80a2d12:	bf00      	nop
 80a2d14:	bf00      	nop
 80a2d16:	bf00      	nop
 80a2d18:	bf00      	nop
 80a2d1a:	bf00      	nop
 80a2d1c:	bf00      	nop
 80a2d1e:	bf00      	nop
 80a2d20:	bf00      	nop
 80a2d22:	bf00      	nop
 80a2d24:	bf00      	nop
 80a2d26:	bf00      	nop
 80a2d28:	bf00      	nop
 80a2d2a:	bf00      	nop
 80a2d2c:	bf00      	nop
 80a2d2e:	bf00      	nop
 80a2d30:	bf00      	nop
 80a2d32:	bf00      	nop
 80a2d34:	bf00      	nop
 80a2d36:	bf00      	nop
 80a2d38:	bf00      	nop
 80a2d3a:	bf00      	nop
 80a2d3c:	bf00      	nop
 80a2d3e:	bf00      	nop
 80a2d40:	bf00      	nop
 80a2d42:	bf00      	nop
 80a2d44:	bf00      	nop
 80a2d46:	bf00      	nop
 80a2d48:	bf00      	nop
 80a2d4a:	bf00      	nop
 80a2d4c:	bf00      	nop
 80a2d4e:	bf00      	nop
 80a2d50:	bf00      	nop
 80a2d52:	bf00      	nop
 80a2d54:	bf00      	nop
 80a2d56:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a2d58:	7963      	ldrb	r3, [r4, #5]
 80a2d5a:	6810      	ldr	r0, [r2, #0]
 80a2d5c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2d60:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2d64:	88bf      	ldrh	r7, [r7, #4]
 80a2d66:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2d6a:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a2d6c:	4600      	mov	r0, r0
 80a2d6e:	bf00      	nop
 80a2d70:	bf00      	nop
 80a2d72:	bf00      	nop
 80a2d74:	bf00      	nop
 80a2d76:	bf00      	nop
 80a2d78:	bf00      	nop
 80a2d7a:	bf00      	nop
 80a2d7c:	bf00      	nop
 80a2d7e:	bf00      	nop
 80a2d80:	bf00      	nop
 80a2d82:	bf00      	nop
 80a2d84:	bf00      	nop
 80a2d86:	bf00      	nop
 80a2d88:	bf00      	nop
 80a2d8a:	bf00      	nop
 80a2d8c:	bf00      	nop
 80a2d8e:	bf00      	nop
 80a2d90:	bf00      	nop
 80a2d92:	bf00      	nop
 80a2d94:	bf00      	nop
 80a2d96:	bf00      	nop
 80a2d98:	bf00      	nop
 80a2d9a:	bf00      	nop
 80a2d9c:	bf00      	nop
 80a2d9e:	bf00      	nop
 80a2da0:	bf00      	nop
 80a2da2:	bf00      	nop
 80a2da4:	bf00      	nop
 80a2da6:	bf00      	nop
 80a2da8:	bf00      	nop
 80a2daa:	bf00      	nop
 80a2dac:	bf00      	nop
 80a2dae:	bf00      	nop
 80a2db0:	bf00      	nop
 80a2db2:	bf00      	nop
 80a2db4:	bf00      	nop
 80a2db6:	bf00      	nop
 80a2db8:	bf00      	nop
 80a2dba:	bf00      	nop
 80a2dbc:	bf00      	nop
 80a2dbe:	bf00      	nop
 80a2dc0:	bf00      	nop
 80a2dc2:	bf00      	nop
 80a2dc4:	bf00      	nop
 80a2dc6:	bf00      	nop
 80a2dc8:	bf00      	nop
 80a2dca:	bf00      	nop
 80a2dcc:	bf00      	nop
 80a2dce:	bf00      	nop
 80a2dd0:	bf00      	nop
 80a2dd2:	bf00      	nop
 80a2dd4:	bf00      	nop
 80a2dd6:	bf00      	nop
 80a2dd8:	bf00      	nop
 80a2dda:	bf00      	nop
 80a2ddc:	bf00      	nop
 80a2dde:	bf00      	nop
 80a2de0:	bf00      	nop
 80a2de2:	bf00      	nop
 80a2de4:	bf00      	nop
 80a2de6:	bf00      	nop
 80a2de8:	bf00      	nop
 80a2dea:	bf00      	nop
 80a2dec:	bf00      	nop
 80a2dee:	bf00      	nop
 80a2df0:	bf00      	nop
 80a2df2:	bf00      	nop
 80a2df4:	bf00      	nop
 80a2df6:	bf00      	nop
 80a2df8:	bf00      	nop
 80a2dfa:	bf00      	nop
 80a2dfc:	bf00      	nop
 80a2dfe:	bf00      	nop
 80a2e00:	bf00      	nop
 80a2e02:	bf00      	nop
 80a2e04:	bf00      	nop
 80a2e06:	bf00      	nop
 80a2e08:	bf00      	nop
 80a2e0a:	bf00      	nop
 80a2e0c:	bf00      	nop
 80a2e0e:	bf00      	nop
 80a2e10:	bf00      	nop
 80a2e12:	bf00      	nop
 80a2e14:	bf00      	nop
 80a2e16:	bf00      	nop
 80a2e18:	bf00      	nop
 80a2e1a:	bf00      	nop
 80a2e1c:	bf00      	nop
 80a2e1e:	bf00      	nop
 80a2e20:	bf00      	nop
 80a2e22:	bf00      	nop
 80a2e24:	bf00      	nop
 80a2e26:	bf00      	nop
 80a2e28:	bf00      	nop
 80a2e2a:	bf00      	nop
 80a2e2c:	bf00      	nop
 80a2e2e:	bf00      	nop
 80a2e30:	bf00      	nop
 80a2e32:	bf00      	nop
 80a2e34:	bf00      	nop
 80a2e36:	bf00      	nop
 80a2e38:	bf00      	nop
 80a2e3a:	bf00      	nop
 80a2e3c:	bf00      	nop
 80a2e3e:	bf00      	nop
 80a2e40:	bf00      	nop
 80a2e42:	bf00      	nop
 80a2e44:	bf00      	nop
 80a2e46:	bf00      	nop
 80a2e48:	bf00      	nop
 80a2e4a:	bf00      	nop
 80a2e4c:	bf00      	nop
 80a2e4e:	bf00      	nop
 80a2e50:	bf00      	nop
 80a2e52:	bf00      	nop
 80a2e54:	bf00      	nop
 80a2e56:	bf00      	nop
 80a2e58:	bf00      	nop
 80a2e5a:	bf00      	nop
 80a2e5c:	bf00      	nop
 80a2e5e:	bf00      	nop
 80a2e60:	bf00      	nop
 80a2e62:	bf00      	nop
 80a2e64:	bf00      	nop
        mask >>= 1;
 80a2e66:	9b04      	ldr	r3, [sp, #16]
 80a2e68:	085b      	lsrs	r3, r3, #1
 80a2e6a:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a2e6c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a2e70:	3301      	adds	r3, #1
 80a2e72:	b2db      	uxtb	r3, r3
 80a2e74:	2b17      	cmp	r3, #23
 80a2e76:	f88d 3006 	strb.w	r3, [sp, #6]
 80a2e7a:	f200 8118 	bhi.w	80a30ae <_ZN17Adafruit_NeoPixel4showEv+0xad6>
        pinSet(pin, HIGH); // HIGH
 80a2e7e:	7963      	ldrb	r3, [r4, #5]
 80a2e80:	6810      	ldr	r0, [r2, #0]
 80a2e82:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2e86:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2e8a:	88bf      	ldrh	r7, [r7, #4]
 80a2e8c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2e90:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a2e92:	9803      	ldr	r0, [sp, #12]
 80a2e94:	9b04      	ldr	r3, [sp, #16]
 80a2e96:	4218      	tst	r0, r3
 80a2e98:	f47f aeda 	bne.w	80a2c50 <_ZN17Adafruit_NeoPixel4showEv+0x678>
            ::: "r0", "cc", "memory");
 80a2e9c:	4600      	mov	r0, r0
 80a2e9e:	bf00      	nop
 80a2ea0:	bf00      	nop
 80a2ea2:	bf00      	nop
 80a2ea4:	bf00      	nop
 80a2ea6:	bf00      	nop
 80a2ea8:	bf00      	nop
 80a2eaa:	bf00      	nop
 80a2eac:	bf00      	nop
 80a2eae:	bf00      	nop
 80a2eb0:	bf00      	nop
 80a2eb2:	bf00      	nop
 80a2eb4:	bf00      	nop
 80a2eb6:	bf00      	nop
 80a2eb8:	bf00      	nop
 80a2eba:	bf00      	nop
 80a2ebc:	bf00      	nop
 80a2ebe:	bf00      	nop
 80a2ec0:	bf00      	nop
 80a2ec2:	bf00      	nop
 80a2ec4:	bf00      	nop
 80a2ec6:	bf00      	nop
 80a2ec8:	bf00      	nop
 80a2eca:	bf00      	nop
 80a2ecc:	bf00      	nop
 80a2ece:	bf00      	nop
 80a2ed0:	bf00      	nop
 80a2ed2:	bf00      	nop
 80a2ed4:	bf00      	nop
 80a2ed6:	bf00      	nop
 80a2ed8:	bf00      	nop
 80a2eda:	bf00      	nop
 80a2edc:	bf00      	nop
 80a2ede:	bf00      	nop
 80a2ee0:	bf00      	nop
 80a2ee2:	bf00      	nop
 80a2ee4:	bf00      	nop
 80a2ee6:	bf00      	nop
 80a2ee8:	bf00      	nop
 80a2eea:	bf00      	nop
 80a2eec:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a2eee:	7963      	ldrb	r3, [r4, #5]
 80a2ef0:	6810      	ldr	r0, [r2, #0]
 80a2ef2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2ef6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2efa:	88bf      	ldrh	r7, [r7, #4]
 80a2efc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2f00:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a2f02:	4600      	mov	r0, r0
 80a2f04:	bf00      	nop
 80a2f06:	bf00      	nop
 80a2f08:	bf00      	nop
 80a2f0a:	bf00      	nop
 80a2f0c:	bf00      	nop
 80a2f0e:	bf00      	nop
 80a2f10:	bf00      	nop
 80a2f12:	bf00      	nop
 80a2f14:	bf00      	nop
 80a2f16:	bf00      	nop
 80a2f18:	bf00      	nop
 80a2f1a:	bf00      	nop
 80a2f1c:	bf00      	nop
 80a2f1e:	bf00      	nop
 80a2f20:	bf00      	nop
 80a2f22:	bf00      	nop
 80a2f24:	bf00      	nop
 80a2f26:	bf00      	nop
 80a2f28:	bf00      	nop
 80a2f2a:	bf00      	nop
 80a2f2c:	bf00      	nop
 80a2f2e:	bf00      	nop
 80a2f30:	bf00      	nop
 80a2f32:	bf00      	nop
 80a2f34:	bf00      	nop
 80a2f36:	bf00      	nop
 80a2f38:	bf00      	nop
 80a2f3a:	bf00      	nop
 80a2f3c:	bf00      	nop
 80a2f3e:	bf00      	nop
 80a2f40:	bf00      	nop
 80a2f42:	bf00      	nop
 80a2f44:	bf00      	nop
 80a2f46:	bf00      	nop
 80a2f48:	bf00      	nop
 80a2f4a:	bf00      	nop
 80a2f4c:	bf00      	nop
 80a2f4e:	bf00      	nop
 80a2f50:	bf00      	nop
 80a2f52:	bf00      	nop
 80a2f54:	bf00      	nop
 80a2f56:	bf00      	nop
 80a2f58:	bf00      	nop
 80a2f5a:	bf00      	nop
 80a2f5c:	bf00      	nop
 80a2f5e:	bf00      	nop
 80a2f60:	bf00      	nop
 80a2f62:	bf00      	nop
 80a2f64:	bf00      	nop
 80a2f66:	bf00      	nop
 80a2f68:	bf00      	nop
 80a2f6a:	bf00      	nop
 80a2f6c:	bf00      	nop
 80a2f6e:	bf00      	nop
 80a2f70:	bf00      	nop
 80a2f72:	bf00      	nop
 80a2f74:	bf00      	nop
 80a2f76:	bf00      	nop
 80a2f78:	bf00      	nop
 80a2f7a:	bf00      	nop
 80a2f7c:	bf00      	nop
 80a2f7e:	bf00      	nop
 80a2f80:	bf00      	nop
 80a2f82:	bf00      	nop
 80a2f84:	bf00      	nop
 80a2f86:	bf00      	nop
 80a2f88:	bf00      	nop
 80a2f8a:	bf00      	nop
 80a2f8c:	bf00      	nop
 80a2f8e:	bf00      	nop
 80a2f90:	bf00      	nop
 80a2f92:	bf00      	nop
 80a2f94:	bf00      	nop
 80a2f96:	bf00      	nop
 80a2f98:	bf00      	nop
 80a2f9a:	bf00      	nop
 80a2f9c:	bf00      	nop
 80a2f9e:	bf00      	nop
 80a2fa0:	bf00      	nop
 80a2fa2:	bf00      	nop
 80a2fa4:	bf00      	nop
 80a2fa6:	bf00      	nop
 80a2fa8:	bf00      	nop
 80a2faa:	bf00      	nop
 80a2fac:	bf00      	nop
 80a2fae:	bf00      	nop
 80a2fb0:	bf00      	nop
 80a2fb2:	bf00      	nop
 80a2fb4:	bf00      	nop
 80a2fb6:	bf00      	nop
 80a2fb8:	bf00      	nop
 80a2fba:	bf00      	nop
 80a2fbc:	bf00      	nop
 80a2fbe:	bf00      	nop
 80a2fc0:	bf00      	nop
 80a2fc2:	bf00      	nop
 80a2fc4:	bf00      	nop
 80a2fc6:	bf00      	nop
 80a2fc8:	bf00      	nop
 80a2fca:	bf00      	nop
 80a2fcc:	bf00      	nop
 80a2fce:	bf00      	nop
 80a2fd0:	bf00      	nop
 80a2fd2:	bf00      	nop
 80a2fd4:	bf00      	nop
 80a2fd6:	bf00      	nop
 80a2fd8:	bf00      	nop
 80a2fda:	bf00      	nop
 80a2fdc:	bf00      	nop
 80a2fde:	bf00      	nop
 80a2fe0:	bf00      	nop
 80a2fe2:	bf00      	nop
 80a2fe4:	bf00      	nop
 80a2fe6:	bf00      	nop
 80a2fe8:	bf00      	nop
 80a2fea:	bf00      	nop
 80a2fec:	bf00      	nop
 80a2fee:	bf00      	nop
 80a2ff0:	bf00      	nop
 80a2ff2:	bf00      	nop
 80a2ff4:	bf00      	nop
 80a2ff6:	bf00      	nop
 80a2ff8:	bf00      	nop
 80a2ffa:	bf00      	nop
 80a2ffc:	bf00      	nop
 80a2ffe:	bf00      	nop
 80a3000:	bf00      	nop
 80a3002:	bf00      	nop
 80a3004:	bf00      	nop
 80a3006:	bf00      	nop
 80a3008:	bf00      	nop
 80a300a:	bf00      	nop
 80a300c:	bf00      	nop
 80a300e:	bf00      	nop
 80a3010:	bf00      	nop
 80a3012:	bf00      	nop
 80a3014:	bf00      	nop
 80a3016:	bf00      	nop
 80a3018:	bf00      	nop
 80a301a:	bf00      	nop
 80a301c:	bf00      	nop
 80a301e:	bf00      	nop
 80a3020:	bf00      	nop
 80a3022:	bf00      	nop
 80a3024:	bf00      	nop
 80a3026:	bf00      	nop
 80a3028:	bf00      	nop
 80a302a:	bf00      	nop
 80a302c:	bf00      	nop
 80a302e:	bf00      	nop
 80a3030:	bf00      	nop
 80a3032:	bf00      	nop
 80a3034:	bf00      	nop
 80a3036:	bf00      	nop
 80a3038:	bf00      	nop
 80a303a:	bf00      	nop
 80a303c:	bf00      	nop
 80a303e:	bf00      	nop
 80a3040:	bf00      	nop
 80a3042:	bf00      	nop
 80a3044:	bf00      	nop
 80a3046:	bf00      	nop
 80a3048:	bf00      	nop
 80a304a:	bf00      	nop
 80a304c:	bf00      	nop
 80a304e:	bf00      	nop
 80a3050:	bf00      	nop
 80a3052:	bf00      	nop
 80a3054:	bf00      	nop
 80a3056:	bf00      	nop
 80a3058:	bf00      	nop
 80a305a:	bf00      	nop
 80a305c:	bf00      	nop
 80a305e:	bf00      	nop
 80a3060:	bf00      	nop
 80a3062:	bf00      	nop
 80a3064:	bf00      	nop
 80a3066:	bf00      	nop
 80a3068:	bf00      	nop
 80a306a:	bf00      	nop
 80a306c:	bf00      	nop
 80a306e:	bf00      	nop
 80a3070:	bf00      	nop
 80a3072:	bf00      	nop
 80a3074:	bf00      	nop
 80a3076:	bf00      	nop
 80a3078:	bf00      	nop
 80a307a:	bf00      	nop
 80a307c:	bf00      	nop
 80a307e:	bf00      	nop
 80a3080:	bf00      	nop
 80a3082:	bf00      	nop
 80a3084:	bf00      	nop
 80a3086:	bf00      	nop
 80a3088:	bf00      	nop
 80a308a:	bf00      	nop
 80a308c:	bf00      	nop
 80a308e:	bf00      	nop
 80a3090:	bf00      	nop
 80a3092:	bf00      	nop
 80a3094:	bf00      	nop
 80a3096:	bf00      	nop
 80a3098:	bf00      	nop
 80a309a:	bf00      	nop
 80a309c:	bf00      	nop
 80a309e:	bf00      	nop
 80a30a0:	bf00      	nop
 80a30a2:	bf00      	nop
 80a30a4:	bf00      	nop
 80a30a6:	bf00      	nop
 80a30a8:	bf00      	nop
 80a30aa:	bf00      	nop
 80a30ac:	e6db      	b.n	80a2e66 <_ZN17Adafruit_NeoPixel4showEv+0x88e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a30ae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a30b2:	b29b      	uxth	r3, r3
 80a30b4:	2b00      	cmp	r3, #0
 80a30b6:	f47f ada2 	bne.w	80a2bfe <_ZN17Adafruit_NeoPixel4showEv+0x626>
 80a30ba:	f7ff bbe3 	b.w	80a2884 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
 80a30be:	4770      	bx	lr
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a30c0:	2b00      	cmp	r3, #0
 80a30c2:	f43f abdf 	beq.w	80a2884 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a30c6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a30ca:	2600      	movs	r6, #0
 80a30cc:	4a12      	ldr	r2, [pc, #72]	; (80a3118 <_ZN17Adafruit_NeoPixel4showEv+0xb40>)
      mask = 0x800000; // reset the mask
 80a30ce:	9104      	str	r1, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a30d0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next green byte value
 80a30d4:	3503      	adds	r5, #3
      i = i-3;      // decrement bytes remaining
 80a30d6:	3b03      	subs	r3, #3
 80a30d8:	b29b      	uxth	r3, r3
 80a30da:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a30de:	f815 3c03 	ldrb.w	r3, [r5, #-3]
 80a30e2:	b2db      	uxtb	r3, r3
 80a30e4:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next blue byte value
 80a30e8:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 80a30ec:	b2db      	uxtb	r3, r3
 80a30ee:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next green byte value
 80a30f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80a30f6:	b2db      	uxtb	r3, r3
 80a30f8:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a30fc:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a3100:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a3104:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a3108:	021b      	lsls	r3, r3, #8
 80a310a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a310e:	4303      	orrs	r3, r0
 80a3110:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a3112:	f88d 6006 	strb.w	r6, [sp, #6]
 80a3116:	e0e0      	b.n	80a32da <_ZN17Adafruit_NeoPixel4showEv+0xd02>
 80a3118:	20000e84 	.word	0x20000e84
            ::: "r0", "cc", "memory");
 80a311c:	4600      	mov	r0, r0
 80a311e:	bf00      	nop
 80a3120:	bf00      	nop
 80a3122:	bf00      	nop
 80a3124:	bf00      	nop
 80a3126:	bf00      	nop
 80a3128:	bf00      	nop
 80a312a:	bf00      	nop
 80a312c:	bf00      	nop
 80a312e:	bf00      	nop
 80a3130:	bf00      	nop
 80a3132:	bf00      	nop
 80a3134:	bf00      	nop
 80a3136:	bf00      	nop
 80a3138:	bf00      	nop
 80a313a:	bf00      	nop
 80a313c:	bf00      	nop
 80a313e:	bf00      	nop
 80a3140:	bf00      	nop
 80a3142:	bf00      	nop
 80a3144:	bf00      	nop
 80a3146:	bf00      	nop
 80a3148:	bf00      	nop
 80a314a:	bf00      	nop
 80a314c:	bf00      	nop
 80a314e:	bf00      	nop
 80a3150:	bf00      	nop
 80a3152:	bf00      	nop
 80a3154:	bf00      	nop
 80a3156:	bf00      	nop
 80a3158:	bf00      	nop
 80a315a:	bf00      	nop
 80a315c:	bf00      	nop
 80a315e:	bf00      	nop
 80a3160:	bf00      	nop
 80a3162:	bf00      	nop
 80a3164:	bf00      	nop
 80a3166:	bf00      	nop
 80a3168:	bf00      	nop
 80a316a:	bf00      	nop
 80a316c:	bf00      	nop
 80a316e:	bf00      	nop
 80a3170:	bf00      	nop
 80a3172:	bf00      	nop
 80a3174:	bf00      	nop
 80a3176:	bf00      	nop
 80a3178:	bf00      	nop
 80a317a:	bf00      	nop
 80a317c:	bf00      	nop
 80a317e:	bf00      	nop
 80a3180:	bf00      	nop
 80a3182:	bf00      	nop
 80a3184:	bf00      	nop
 80a3186:	bf00      	nop
 80a3188:	bf00      	nop
 80a318a:	bf00      	nop
 80a318c:	bf00      	nop
 80a318e:	bf00      	nop
 80a3190:	bf00      	nop
 80a3192:	bf00      	nop
 80a3194:	bf00      	nop
 80a3196:	bf00      	nop
 80a3198:	bf00      	nop
 80a319a:	bf00      	nop
 80a319c:	bf00      	nop
 80a319e:	bf00      	nop
 80a31a0:	bf00      	nop
 80a31a2:	bf00      	nop
 80a31a4:	bf00      	nop
 80a31a6:	bf00      	nop
 80a31a8:	bf00      	nop
 80a31aa:	bf00      	nop
 80a31ac:	bf00      	nop
 80a31ae:	bf00      	nop
 80a31b0:	bf00      	nop
 80a31b2:	bf00      	nop
 80a31b4:	bf00      	nop
 80a31b6:	bf00      	nop
 80a31b8:	bf00      	nop
 80a31ba:	bf00      	nop
 80a31bc:	bf00      	nop
 80a31be:	bf00      	nop
 80a31c0:	bf00      	nop
 80a31c2:	bf00      	nop
 80a31c4:	bf00      	nop
 80a31c6:	bf00      	nop
 80a31c8:	bf00      	nop
 80a31ca:	bf00      	nop
 80a31cc:	bf00      	nop
 80a31ce:	bf00      	nop
 80a31d0:	bf00      	nop
 80a31d2:	bf00      	nop
 80a31d4:	bf00      	nop
 80a31d6:	bf00      	nop
 80a31d8:	bf00      	nop
 80a31da:	bf00      	nop
 80a31dc:	bf00      	nop
 80a31de:	bf00      	nop
 80a31e0:	bf00      	nop
 80a31e2:	bf00      	nop
 80a31e4:	bf00      	nop
 80a31e6:	bf00      	nop
 80a31e8:	bf00      	nop
 80a31ea:	bf00      	nop
 80a31ec:	bf00      	nop
 80a31ee:	bf00      	nop
 80a31f0:	bf00      	nop
 80a31f2:	bf00      	nop
 80a31f4:	bf00      	nop
 80a31f6:	bf00      	nop
 80a31f8:	bf00      	nop
 80a31fa:	bf00      	nop
 80a31fc:	bf00      	nop
 80a31fe:	bf00      	nop
 80a3200:	bf00      	nop
 80a3202:	bf00      	nop
 80a3204:	bf00      	nop
 80a3206:	bf00      	nop
 80a3208:	bf00      	nop
 80a320a:	bf00      	nop
 80a320c:	bf00      	nop
 80a320e:	bf00      	nop
 80a3210:	bf00      	nop
 80a3212:	bf00      	nop
 80a3214:	bf00      	nop
 80a3216:	bf00      	nop
 80a3218:	bf00      	nop
 80a321a:	bf00      	nop
 80a321c:	bf00      	nop
 80a321e:	bf00      	nop
 80a3220:	bf00      	nop
 80a3222:	bf00      	nop
 80a3224:	bf00      	nop
 80a3226:	bf00      	nop
 80a3228:	bf00      	nop
 80a322a:	bf00      	nop
 80a322c:	bf00      	nop
 80a322e:	bf00      	nop
 80a3230:	bf00      	nop
 80a3232:	bf00      	nop
 80a3234:	bf00      	nop
 80a3236:	bf00      	nop
 80a3238:	bf00      	nop
 80a323a:	bf00      	nop
 80a323c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a323e:	7963      	ldrb	r3, [r4, #5]
 80a3240:	6810      	ldr	r0, [r2, #0]
 80a3242:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3246:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a324a:	88bf      	ldrh	r7, [r7, #4]
 80a324c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3250:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a3252:	4600      	mov	r0, r0
 80a3254:	bf00      	nop
 80a3256:	bf00      	nop
 80a3258:	bf00      	nop
 80a325a:	bf00      	nop
 80a325c:	bf00      	nop
 80a325e:	bf00      	nop
 80a3260:	bf00      	nop
 80a3262:	bf00      	nop
 80a3264:	bf00      	nop
 80a3266:	bf00      	nop
 80a3268:	bf00      	nop
 80a326a:	bf00      	nop
 80a326c:	bf00      	nop
 80a326e:	bf00      	nop
 80a3270:	bf00      	nop
 80a3272:	bf00      	nop
 80a3274:	bf00      	nop
 80a3276:	bf00      	nop
 80a3278:	bf00      	nop
 80a327a:	bf00      	nop
 80a327c:	bf00      	nop
 80a327e:	bf00      	nop
 80a3280:	bf00      	nop
 80a3282:	bf00      	nop
 80a3284:	bf00      	nop
 80a3286:	bf00      	nop
 80a3288:	bf00      	nop
 80a328a:	bf00      	nop
 80a328c:	bf00      	nop
 80a328e:	bf00      	nop
 80a3290:	bf00      	nop
 80a3292:	bf00      	nop
 80a3294:	bf00      	nop
 80a3296:	bf00      	nop
 80a3298:	bf00      	nop
 80a329a:	bf00      	nop
 80a329c:	bf00      	nop
 80a329e:	bf00      	nop
 80a32a0:	bf00      	nop
 80a32a2:	bf00      	nop
 80a32a4:	bf00      	nop
 80a32a6:	bf00      	nop
 80a32a8:	bf00      	nop
 80a32aa:	bf00      	nop
 80a32ac:	bf00      	nop
 80a32ae:	bf00      	nop
 80a32b0:	bf00      	nop
 80a32b2:	bf00      	nop
 80a32b4:	bf00      	nop
 80a32b6:	bf00      	nop
 80a32b8:	bf00      	nop
 80a32ba:	bf00      	nop
 80a32bc:	bf00      	nop
 80a32be:	bf00      	nop
 80a32c0:	bf00      	nop
        mask >>= 1;
 80a32c2:	9b04      	ldr	r3, [sp, #16]
 80a32c4:	085b      	lsrs	r3, r3, #1
 80a32c6:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a32c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a32cc:	3301      	adds	r3, #1
 80a32ce:	b2db      	uxtb	r3, r3
 80a32d0:	2b17      	cmp	r3, #23
 80a32d2:	f88d 3006 	strb.w	r3, [sp, #6]
 80a32d6:	f200 80e3 	bhi.w	80a34a0 <_ZN17Adafruit_NeoPixel4showEv+0xec8>
        pinSet(pin, HIGH); // HIGH
 80a32da:	7963      	ldrb	r3, [r4, #5]
 80a32dc:	6810      	ldr	r0, [r2, #0]
 80a32de:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a32e2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a32e6:	88bf      	ldrh	r7, [r7, #4]
 80a32e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a32ec:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a32ee:	9803      	ldr	r0, [sp, #12]
 80a32f0:	9b04      	ldr	r3, [sp, #16]
 80a32f2:	4218      	tst	r0, r3
 80a32f4:	f47f af12 	bne.w	80a311c <_ZN17Adafruit_NeoPixel4showEv+0xb44>
            ::: "r0", "cc", "memory");
 80a32f8:	4600      	mov	r0, r0
 80a32fa:	bf00      	nop
 80a32fc:	bf00      	nop
 80a32fe:	bf00      	nop
 80a3300:	bf00      	nop
 80a3302:	bf00      	nop
 80a3304:	bf00      	nop
 80a3306:	bf00      	nop
 80a3308:	bf00      	nop
 80a330a:	bf00      	nop
 80a330c:	bf00      	nop
 80a330e:	bf00      	nop
 80a3310:	bf00      	nop
 80a3312:	bf00      	nop
 80a3314:	bf00      	nop
 80a3316:	bf00      	nop
 80a3318:	bf00      	nop
 80a331a:	bf00      	nop
 80a331c:	bf00      	nop
 80a331e:	bf00      	nop
 80a3320:	bf00      	nop
 80a3322:	bf00      	nop
 80a3324:	bf00      	nop
 80a3326:	bf00      	nop
 80a3328:	bf00      	nop
 80a332a:	bf00      	nop
 80a332c:	bf00      	nop
 80a332e:	bf00      	nop
 80a3330:	bf00      	nop
 80a3332:	bf00      	nop
 80a3334:	bf00      	nop
 80a3336:	bf00      	nop
 80a3338:	bf00      	nop
 80a333a:	bf00      	nop
 80a333c:	bf00      	nop
 80a333e:	bf00      	nop
 80a3340:	bf00      	nop
 80a3342:	bf00      	nop
 80a3344:	bf00      	nop
 80a3346:	bf00      	nop
 80a3348:	bf00      	nop
 80a334a:	bf00      	nop
 80a334c:	bf00      	nop
 80a334e:	bf00      	nop
 80a3350:	bf00      	nop
 80a3352:	bf00      	nop
 80a3354:	bf00      	nop
 80a3356:	bf00      	nop
 80a3358:	bf00      	nop
 80a335a:	bf00      	nop
 80a335c:	bf00      	nop
 80a335e:	bf00      	nop
 80a3360:	bf00      	nop
 80a3362:	bf00      	nop
 80a3364:	bf00      	nop
 80a3366:	bf00      	nop
 80a3368:	bf00      	nop
 80a336a:	bf00      	nop
 80a336c:	bf00      	nop
 80a336e:	bf00      	nop
 80a3370:	bf00      	nop
 80a3372:	bf00      	nop
 80a3374:	bf00      	nop
 80a3376:	bf00      	nop
 80a3378:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a337a:	7963      	ldrb	r3, [r4, #5]
 80a337c:	6810      	ldr	r0, [r2, #0]
 80a337e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3382:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a3386:	88bf      	ldrh	r7, [r7, #4]
 80a3388:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a338c:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a338e:	4600      	mov	r0, r0
 80a3390:	bf00      	nop
 80a3392:	bf00      	nop
 80a3394:	bf00      	nop
 80a3396:	bf00      	nop
 80a3398:	bf00      	nop
 80a339a:	bf00      	nop
 80a339c:	bf00      	nop
 80a339e:	bf00      	nop
 80a33a0:	bf00      	nop
 80a33a2:	bf00      	nop
 80a33a4:	bf00      	nop
 80a33a6:	bf00      	nop
 80a33a8:	bf00      	nop
 80a33aa:	bf00      	nop
 80a33ac:	bf00      	nop
 80a33ae:	bf00      	nop
 80a33b0:	bf00      	nop
 80a33b2:	bf00      	nop
 80a33b4:	bf00      	nop
 80a33b6:	bf00      	nop
 80a33b8:	bf00      	nop
 80a33ba:	bf00      	nop
 80a33bc:	bf00      	nop
 80a33be:	bf00      	nop
 80a33c0:	bf00      	nop
 80a33c2:	bf00      	nop
 80a33c4:	bf00      	nop
 80a33c6:	bf00      	nop
 80a33c8:	bf00      	nop
 80a33ca:	bf00      	nop
 80a33cc:	bf00      	nop
 80a33ce:	bf00      	nop
 80a33d0:	bf00      	nop
 80a33d2:	bf00      	nop
 80a33d4:	bf00      	nop
 80a33d6:	bf00      	nop
 80a33d8:	bf00      	nop
 80a33da:	bf00      	nop
 80a33dc:	bf00      	nop
 80a33de:	bf00      	nop
 80a33e0:	bf00      	nop
 80a33e2:	bf00      	nop
 80a33e4:	bf00      	nop
 80a33e6:	bf00      	nop
 80a33e8:	bf00      	nop
 80a33ea:	bf00      	nop
 80a33ec:	bf00      	nop
 80a33ee:	bf00      	nop
 80a33f0:	bf00      	nop
 80a33f2:	bf00      	nop
 80a33f4:	bf00      	nop
 80a33f6:	bf00      	nop
 80a33f8:	bf00      	nop
 80a33fa:	bf00      	nop
 80a33fc:	bf00      	nop
 80a33fe:	bf00      	nop
 80a3400:	bf00      	nop
 80a3402:	bf00      	nop
 80a3404:	bf00      	nop
 80a3406:	bf00      	nop
 80a3408:	bf00      	nop
 80a340a:	bf00      	nop
 80a340c:	bf00      	nop
 80a340e:	bf00      	nop
 80a3410:	bf00      	nop
 80a3412:	bf00      	nop
 80a3414:	bf00      	nop
 80a3416:	bf00      	nop
 80a3418:	bf00      	nop
 80a341a:	bf00      	nop
 80a341c:	bf00      	nop
 80a341e:	bf00      	nop
 80a3420:	bf00      	nop
 80a3422:	bf00      	nop
 80a3424:	bf00      	nop
 80a3426:	bf00      	nop
 80a3428:	bf00      	nop
 80a342a:	bf00      	nop
 80a342c:	bf00      	nop
 80a342e:	bf00      	nop
 80a3430:	bf00      	nop
 80a3432:	bf00      	nop
 80a3434:	bf00      	nop
 80a3436:	bf00      	nop
 80a3438:	bf00      	nop
 80a343a:	bf00      	nop
 80a343c:	bf00      	nop
 80a343e:	bf00      	nop
 80a3440:	bf00      	nop
 80a3442:	bf00      	nop
 80a3444:	bf00      	nop
 80a3446:	bf00      	nop
 80a3448:	bf00      	nop
 80a344a:	bf00      	nop
 80a344c:	bf00      	nop
 80a344e:	bf00      	nop
 80a3450:	bf00      	nop
 80a3452:	bf00      	nop
 80a3454:	bf00      	nop
 80a3456:	bf00      	nop
 80a3458:	bf00      	nop
 80a345a:	bf00      	nop
 80a345c:	bf00      	nop
 80a345e:	bf00      	nop
 80a3460:	bf00      	nop
 80a3462:	bf00      	nop
 80a3464:	bf00      	nop
 80a3466:	bf00      	nop
 80a3468:	bf00      	nop
 80a346a:	bf00      	nop
 80a346c:	bf00      	nop
 80a346e:	bf00      	nop
 80a3470:	bf00      	nop
 80a3472:	bf00      	nop
 80a3474:	bf00      	nop
 80a3476:	bf00      	nop
 80a3478:	bf00      	nop
 80a347a:	bf00      	nop
 80a347c:	bf00      	nop
 80a347e:	bf00      	nop
 80a3480:	bf00      	nop
 80a3482:	bf00      	nop
 80a3484:	bf00      	nop
 80a3486:	bf00      	nop
 80a3488:	bf00      	nop
 80a348a:	bf00      	nop
 80a348c:	bf00      	nop
 80a348e:	bf00      	nop
 80a3490:	bf00      	nop
 80a3492:	bf00      	nop
 80a3494:	bf00      	nop
 80a3496:	bf00      	nop
 80a3498:	bf00      	nop
 80a349a:	bf00      	nop
 80a349c:	bf00      	nop
 80a349e:	e710      	b.n	80a32c2 <_ZN17Adafruit_NeoPixel4showEv+0xcea>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a34a0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a34a4:	b29b      	uxth	r3, r3
 80a34a6:	2b00      	cmp	r3, #0
 80a34a8:	f47f ae11 	bne.w	80a30ce <_ZN17Adafruit_NeoPixel4showEv+0xaf6>
 80a34ac:	f7ff b9ea 	b.w	80a2884 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>

080a34b0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  digitalWrite(p, LOW);
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a34b0:	b570      	push	{r4, r5, r6, lr}
  if(n < numLEDs) {
 80a34b2:	8805      	ldrh	r5, [r0, #0]
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a34b4:	f89d 4010 	ldrb.w	r4, [sp, #16]
  if(n < numLEDs) {
 80a34b8:	428d      	cmp	r5, r1
 80a34ba:	d916      	bls.n	80a34ea <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3a>
    if(brightness) { // See notes in setBrightness()
 80a34bc:	7985      	ldrb	r5, [r0, #6]
 80a34be:	b12d      	cbz	r5, 80a34cc <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x1c>
      r = (r * brightness) >> 8;
 80a34c0:	436a      	muls	r2, r5
      g = (g * brightness) >> 8;
 80a34c2:	436b      	muls	r3, r5
      b = (b * brightness) >> 8;
 80a34c4:	436c      	muls	r4, r5
      r = (r * brightness) >> 8;
 80a34c6:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
 80a34c8:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
 80a34ca:	0a24      	lsrs	r4, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
 80a34cc:	6886      	ldr	r6, [r0, #8]
    switch(type) {
 80a34ce:	7900      	ldrb	r0, [r0, #4]
    uint8_t *p = &pixels[n * 3];
 80a34d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    switch(type) {
 80a34d4:	2804      	cmp	r0, #4
    uint8_t *p = &pixels[n * 3];
 80a34d6:	eb06 0501 	add.w	r5, r6, r1
    switch(type) {
 80a34da:	d007      	beq.n	80a34ec <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3c>
 80a34dc:	2805      	cmp	r0, #5
 80a34de:	d001      	beq.n	80a34e4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x34>
 80a34e0:	2802      	cmp	r0, #2
 80a34e2:	d10a      	bne.n	80a34fa <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4a>
      case WS2812B: // WS2812 & WS2812B is GRB order.
      case WS2812B2:
        *p++ = g;
 80a34e4:	5473      	strb	r3, [r6, r1]
        *p++ = r;
 80a34e6:	706a      	strb	r2, [r5, #1]
        *p = b;
 80a34e8:	70ac      	strb	r4, [r5, #2]
        *p++ = g;
        *p = b;
        break;
    }
  }
}
 80a34ea:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = r;
 80a34ec:	2afe      	cmp	r2, #254	; 0xfe
 80a34ee:	bf28      	it	cs
 80a34f0:	22fe      	movcs	r2, #254	; 0xfe
 80a34f2:	5472      	strb	r2, [r6, r1]
        *p++ = b;
 80a34f4:	706c      	strb	r4, [r5, #1]
        *p = g;
 80a34f6:	70ab      	strb	r3, [r5, #2]
        break;
 80a34f8:	e7f7      	b.n	80a34ea <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3a>
        *p++ = r;
 80a34fa:	5472      	strb	r2, [r6, r1]
        *p++ = g;
 80a34fc:	706b      	strb	r3, [r5, #1]
        *p = b;
 80a34fe:	70ac      	strb	r4, [r5, #2]
}
 80a3500:	e7f3      	b.n	80a34ea <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3a>

080a3502 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a3502:	b570      	push	{r4, r5, r6, lr}
  if(n < numLEDs) {
 80a3504:	8803      	ldrh	r3, [r0, #0]
 80a3506:	428b      	cmp	r3, r1
 80a3508:	d91d      	bls.n	80a3546 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x44>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a350a:	7985      	ldrb	r5, [r0, #6]
 80a350c:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a3510:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a3514:	b2d2      	uxtb	r2, r2
 80a3516:	b13d      	cbz	r5, 80a3528 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
 80a3518:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a351a:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a351c:	436a      	muls	r2, r5
      r = (r * brightness) >> 8;
 80a351e:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a3522:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a3526:	0a12      	lsrs	r2, r2, #8
    }
    uint8_t *p = &pixels[n * 3];
 80a3528:	6886      	ldr	r6, [r0, #8]
    switch(type) {
 80a352a:	7900      	ldrb	r0, [r0, #4]
    uint8_t *p = &pixels[n * 3];
 80a352c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    switch(type) {
 80a3530:	2804      	cmp	r0, #4
    uint8_t *p = &pixels[n * 3];
 80a3532:	eb06 0501 	add.w	r5, r6, r1
    switch(type) {
 80a3536:	d007      	beq.n	80a3548 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x46>
 80a3538:	2805      	cmp	r0, #5
 80a353a:	d001      	beq.n	80a3540 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x3e>
 80a353c:	2802      	cmp	r0, #2
 80a353e:	d10a      	bne.n	80a3556 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>
      case WS2812B: // WS2812 & WS2812B is GRB order.
      case WS2812B2:
        *p++ = g;
 80a3540:	5474      	strb	r4, [r6, r1]
        *p++ = r;
 80a3542:	706b      	strb	r3, [r5, #1]
        *p = b;
 80a3544:	70aa      	strb	r2, [r5, #2]
        *p++ = g;
        *p = b;
        break;
    }
  }
}
 80a3546:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = r;
 80a3548:	2bfe      	cmp	r3, #254	; 0xfe
 80a354a:	bf28      	it	cs
 80a354c:	23fe      	movcs	r3, #254	; 0xfe
 80a354e:	5473      	strb	r3, [r6, r1]
        *p++ = b;
 80a3550:	706a      	strb	r2, [r5, #1]
        *p = g;
 80a3552:	70ac      	strb	r4, [r5, #2]
        break;
 80a3554:	e7f7      	b.n	80a3546 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x44>
        *p++ = r;
 80a3556:	5473      	strb	r3, [r6, r1]
        *p++ = g;
 80a3558:	706c      	strb	r4, [r5, #1]
        *p = b;
 80a355a:	70aa      	strb	r2, [r5, #2]
}
 80a355c:	e7f3      	b.n	80a3546 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x44>

080a355e <_ZNK17Adafruit_NeoPixel13getPixelColorEt>:
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
 80a355e:	b513      	push	{r0, r1, r4, lr}
  if(n >= numLEDs) {
 80a3560:	8803      	ldrh	r3, [r0, #0]
 80a3562:	428b      	cmp	r3, r1
 80a3564:	d938      	bls.n	80a35d8 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x7a>
    // Out of bounds, return no color.
    return 0;
  }
  uint8_t *p = &pixels[n * 3];
 80a3566:	6882      	ldr	r2, [r0, #8]
  uint32_t c;

  switch(type) {
 80a3568:	7904      	ldrb	r4, [r0, #4]
  uint8_t *p = &pixels[n * 3];
 80a356a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a356e:	1853      	adds	r3, r2, r1
  switch(type) {
 80a3570:	2c04      	cmp	r4, #4
 80a3572:	5c51      	ldrb	r1, [r2, r1]
 80a3574:	789a      	ldrb	r2, [r3, #2]
 80a3576:	785b      	ldrb	r3, [r3, #1]
 80a3578:	d022      	beq.n	80a35c0 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x62>
 80a357a:	2c05      	cmp	r4, #5
 80a357c:	d001      	beq.n	80a3582 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x24>
 80a357e:	2c02      	cmp	r4, #2
 80a3580:	d124      	bne.n	80a35cc <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x6e>
    case WS2812B: // WS2812 & WS2812B is GRB order.
    case WS2812B2:
      c = ((uint32_t)p[1] << 16) | ((uint32_t)p[0] <<  8) | (uint32_t)p[2];
 80a3582:	0209      	lsls	r1, r1, #8
 80a3584:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80a3588:	4313      	orrs	r3, r2
 80a358a:	9301      	str	r3, [sp, #4]
      break;
  }

  // Adjust this back up to the true color, as setting a pixel color will
  // scale it back down again.
  if(brightness) { // See notes in setBrightness()
 80a358c:	7981      	ldrb	r1, [r0, #6]
 80a358e:	b1a1      	cbz	r1, 80a35ba <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x5c>
    //Cast the color to a byte array
    uint8_t * c_ptr =reinterpret_cast<uint8_t*>(&c);
    c_ptr[0] = (c_ptr[0] << 8)/brightness;
 80a3590:	f89d 2004 	ldrb.w	r2, [sp, #4]
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
 80a3594:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c_ptr[0] = (c_ptr[0] << 8)/brightness;
 80a3598:	0212      	lsls	r2, r2, #8
 80a359a:	fbb2 f2f1 	udiv	r2, r2, r1
 80a359e:	f88d 2004 	strb.w	r2, [sp, #4]
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
 80a35a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
 80a35a6:	021b      	lsls	r3, r3, #8
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
 80a35a8:	0212      	lsls	r2, r2, #8
 80a35aa:	fbb2 f2f1 	udiv	r2, r2, r1
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
 80a35ae:	fbb3 f3f1 	udiv	r3, r3, r1
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
 80a35b2:	f88d 2005 	strb.w	r2, [sp, #5]
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
 80a35b6:	f88d 3006 	strb.w	r3, [sp, #6]
  }
  return c; // Pixel # is out of bounds
 80a35ba:	9801      	ldr	r0, [sp, #4]
}
 80a35bc:	b002      	add	sp, #8
 80a35be:	bd10      	pop	{r4, pc}
      c = ((uint32_t)p[0] << 16) | ((uint32_t)p[2] <<  8) | (uint32_t)p[1];
 80a35c0:	0212      	lsls	r2, r2, #8
 80a35c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80a35c6:	4313      	orrs	r3, r2
 80a35c8:	9301      	str	r3, [sp, #4]
      break;
 80a35ca:	e7df      	b.n	80a358c <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x2e>
      c = ((uint32_t)p[0] << 16) | ((uint32_t)p[1] <<  8) | (uint32_t)p[2];
 80a35cc:	021b      	lsls	r3, r3, #8
 80a35ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80a35d2:	4313      	orrs	r3, r2
 80a35d4:	9301      	str	r3, [sp, #4]
      break;
 80a35d6:	e7d9      	b.n	80a358c <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x2e>
    return 0;
 80a35d8:	2000      	movs	r0, #0
 80a35da:	e7ef      	b.n	80a35bc <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x5e>

080a35dc <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a35dc:	b508      	push	{r3, lr}
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a35de:	f000 fa17 	bl	80a3a10 <HAL_Pin_Map>
 80a35e2:	4b01      	ldr	r3, [pc, #4]	; (80a35e8 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
 80a35e4:	6018      	str	r0, [r3, #0]
}
 80a35e6:	bd08      	pop	{r3, pc}
 80a35e8:	20000e84 	.word	0x20000e84

080a35ec <_ZN8PongBallC1Ev>:
#include "pong_ball.h"
#include "muse.h"

PongBall::PongBall() {}
 80a35ec:	4770      	bx	lr
	...

080a35f0 <_ZN8PongBallC1Eiffjiii>:

PongBall::PongBall(int len, float velX, float velY, unsigned int tickTime, int r, int g, int b) {
 80a35f0:	b510      	push	{r4, lr}
    this->len = len;
    xVel = velX;
    yVel = velY;
 80a35f2:	60c3      	str	r3, [r0, #12]
    x = NUM_BARS / 2;
 80a35f4:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80a35f8:	6103      	str	r3, [r0, #16]
    y = STRIP_LENGTH / 2;
 80a35fa:	4b09      	ldr	r3, [pc, #36]	; (80a3620 <_ZN8PongBallC1Eiffjiii+0x30>)
PongBall::PongBall(int len, float velX, float velY, unsigned int tickTime, int r, int g, int b) {
 80a35fc:	4604      	mov	r4, r0
    y = STRIP_LENGTH / 2;
 80a35fe:	6143      	str	r3, [r0, #20]

    tick_time = tickTime;
 80a3600:	9b02      	ldr	r3, [sp, #8]
    this->len = len;
 80a3602:	6181      	str	r1, [r0, #24]
    xVel = velX;
 80a3604:	6082      	str	r2, [r0, #8]
    tick_time = tickTime;
 80a3606:	6203      	str	r3, [r0, #32]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a3608:	f000 f9ea 	bl	80a39e0 <HAL_Timer_Get_Milli_Seconds>

int PongBall::xPos() { return (int) x; }
int PongBall::yPos() { return (int) y; }

void PongBall::setColor(int r, int g, int b) {
    this->r = r;
 80a360c:	9b03      	ldr	r3, [sp, #12]
    last_tick = millis();
 80a360e:	61e0      	str	r0, [r4, #28]
    this->r = r;
 80a3610:	6263      	str	r3, [r4, #36]	; 0x24
    this->g = g;
 80a3612:	9b04      	ldr	r3, [sp, #16]
}
 80a3614:	4620      	mov	r0, r4
    this->g = g;
 80a3616:	62a3      	str	r3, [r4, #40]	; 0x28
    this->b = b;
 80a3618:	9b05      	ldr	r3, [sp, #20]
 80a361a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80a361c:	bd10      	pop	{r4, pc}
 80a361e:	bf00      	nop
 80a3620:	420c0000 	.word	0x420c0000

080a3624 <_ZN8PongBall4tickEv>:
void PongBall::tick() {
 80a3624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3628:	4604      	mov	r4, r0
 80a362a:	f000 f9d9 	bl	80a39e0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - last_tick > tick_time) {
 80a362e:	69e3      	ldr	r3, [r4, #28]
 80a3630:	1ac0      	subs	r0, r0, r3
 80a3632:	6a23      	ldr	r3, [r4, #32]
 80a3634:	4298      	cmp	r0, r3
 80a3636:	d926      	bls.n	80a3686 <_ZN8PongBall4tickEv+0x62>
 80a3638:	f000 f9d2 	bl	80a39e0 <HAL_Timer_Get_Milli_Seconds>
        x += xVel;
 80a363c:	68a6      	ldr	r6, [r4, #8]
 80a363e:	6921      	ldr	r1, [r4, #16]
        last_tick = millis();
 80a3640:	61e0      	str	r0, [r4, #28]
        x += xVel;
 80a3642:	4630      	mov	r0, r6
 80a3644:	f006 f8a4 	bl	80a9790 <__addsf3>
        y += yVel;
 80a3648:	68e5      	ldr	r5, [r4, #12]
 80a364a:	6961      	ldr	r1, [r4, #20]
        x += xVel;
 80a364c:	4681      	mov	r9, r0
 80a364e:	6120      	str	r0, [r4, #16]
        y += yVel;
 80a3650:	4628      	mov	r0, r5
 80a3652:	f006 f89d 	bl	80a9790 <__addsf3>
        if (x <= 0) {
 80a3656:	f04f 0800 	mov.w	r8, #0
        y += yVel;
 80a365a:	4607      	mov	r7, r0
 80a365c:	6160      	str	r0, [r4, #20]
        if (x <= 0) {
 80a365e:	4641      	mov	r1, r8
 80a3660:	4648      	mov	r0, r9
 80a3662:	f006 fb45 	bl	80a9cf0 <__aeabi_fcmple>
 80a3666:	b180      	cbz	r0, 80a368a <_ZN8PongBall4tickEv+0x66>
            xVel = -xVel;
 80a3668:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
            x = 0;
 80a366c:	f8c4 8010 	str.w	r8, [r4, #16]
            xVel = -xVel;
 80a3670:	60a6      	str	r6, [r4, #8]
        if (y <= 0) {
 80a3672:	2100      	movs	r1, #0
 80a3674:	4638      	mov	r0, r7
 80a3676:	f006 fb3b 	bl	80a9cf0 <__aeabi_fcmple>
 80a367a:	b198      	cbz	r0, 80a36a4 <_ZN8PongBall4tickEv+0x80>
            yVel = -yVel;
 80a367c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
            y = 0;
 80a3680:	f8c4 8014 	str.w	r8, [r4, #20]
            yVel = -yVel;
 80a3684:	60e5      	str	r5, [r4, #12]
}
 80a3686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        } else if (x >= NUM_BARS) {
 80a368a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80a368e:	4648      	mov	r0, r9
 80a3690:	f006 fb38 	bl	80a9d04 <__aeabi_fcmpge>
 80a3694:	2800      	cmp	r0, #0
 80a3696:	d0ec      	beq.n	80a3672 <_ZN8PongBall4tickEv+0x4e>
            x = NUM_BARS-1;
 80a3698:	4b0d      	ldr	r3, [pc, #52]	; (80a36d0 <_ZN8PongBall4tickEv+0xac>)
            xVel = -xVel;
 80a369a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
            x = NUM_BARS-1;
 80a369e:	6123      	str	r3, [r4, #16]
            xVel = -xVel;
 80a36a0:	60a6      	str	r6, [r4, #8]
 80a36a2:	e7e6      	b.n	80a3672 <_ZN8PongBall4tickEv+0x4e>
        } else if (y+len >= STRIP_LENGTH) {
 80a36a4:	69a6      	ldr	r6, [r4, #24]
 80a36a6:	4630      	mov	r0, r6
 80a36a8:	f006 f926 	bl	80a98f8 <__aeabi_i2f>
 80a36ac:	4639      	mov	r1, r7
 80a36ae:	f006 f86f 	bl	80a9790 <__addsf3>
 80a36b2:	4908      	ldr	r1, [pc, #32]	; (80a36d4 <_ZN8PongBall4tickEv+0xb0>)
 80a36b4:	f006 fb26 	bl	80a9d04 <__aeabi_fcmpge>
 80a36b8:	2800      	cmp	r0, #0
 80a36ba:	d0e4      	beq.n	80a3686 <_ZN8PongBall4tickEv+0x62>
            y = STRIP_LENGTH-len;
 80a36bc:	f1c6 0046 	rsb	r0, r6, #70	; 0x46
 80a36c0:	f006 f91a 	bl	80a98f8 <__aeabi_i2f>
            yVel = -yVel;
 80a36c4:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
            y = STRIP_LENGTH-len;
 80a36c8:	6160      	str	r0, [r4, #20]
            yVel = -yVel;
 80a36ca:	60e5      	str	r5, [r4, #12]
}
 80a36cc:	e7db      	b.n	80a3686 <_ZN8PongBall4tickEv+0x62>
 80a36ce:	bf00      	nop
 80a36d0:	40e00000 	.word	0x40e00000
 80a36d4:	428c0000 	.word	0x428c0000

080a36d8 <_ZN8PongBall4xPosEv>:
int PongBall::xPos() { return (int) x; }
 80a36d8:	b508      	push	{r3, lr}
 80a36da:	6900      	ldr	r0, [r0, #16]
 80a36dc:	f006 fb3c 	bl	80a9d58 <__aeabi_f2iz>
 80a36e0:	bd08      	pop	{r3, pc}

080a36e2 <_ZN8PongBall4yPosEv>:
int PongBall::yPos() { return (int) y; }
 80a36e2:	b508      	push	{r3, lr}
 80a36e4:	6940      	ldr	r0, [r0, #20]
 80a36e6:	f006 fb37 	bl	80a9d58 <__aeabi_f2iz>
 80a36ea:	bd08      	pop	{r3, pc}

080a36ec <_ZN8PongBall8setColorEiii>:
    this->g = g;
 80a36ec:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
    this->b = b;
 80a36f0:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80a36f2:	4770      	bx	lr

080a36f4 <_ZN10PongPaddleC1Ev>:
#include "pong_paddle.h"

#include "muse.h"

PongPaddle::PongPaddle() {}
 80a36f4:	4770      	bx	lr

080a36f6 <_ZN10PongPaddleC1Eiffffjiii>:

PongPaddle::PongPaddle(int len, float x, float y, float maxXVel, float maxYVel, unsigned int tickTime, int r, int g, int b) {
 80a36f6:	b538      	push	{r3, r4, r5, lr}
 80a36f8:	4604      	mov	r4, r0
    this->len = len;
    this->x = x;
    this->y = y;
 80a36fa:	60a3      	str	r3, [r4, #8]

int PongPaddle::xPos() { return (int) x; }
int PongPaddle::yPos() { return (int) y; }

void PongPaddle::setColor(int r, int g, int b) {
    this->r = r;
 80a36fc:	9b07      	ldr	r3, [sp, #28]
PongPaddle::PongPaddle(int len, float x, float y, float maxXVel, float maxYVel, unsigned int tickTime, int r, int g, int b) {
 80a36fe:	9d04      	ldr	r5, [sp, #16]
    this->r = r;
 80a3700:	6263      	str	r3, [r4, #36]	; 0x24
    this->g = g;
 80a3702:	9b08      	ldr	r3, [sp, #32]
PongPaddle::PongPaddle(int len, float x, float y, float maxXVel, float maxYVel, unsigned int tickTime, int r, int g, int b) {
 80a3704:	9805      	ldr	r0, [sp, #20]
    this->g = g;
 80a3706:	62a3      	str	r3, [r4, #40]	; 0x28
    this->b = b;
 80a3708:	9b09      	ldr	r3, [sp, #36]	; 0x24
    this->len = len;
 80a370a:	6021      	str	r1, [r4, #0]
    this->b = b;
 80a370c:	62e3      	str	r3, [r4, #44]	; 0x2c
    this->x = x;
 80a370e:	6062      	str	r2, [r4, #4]
    this->maxXVel = maxXVel;
 80a3710:	6165      	str	r5, [r4, #20]
    this->maxYVel = maxYVel;
 80a3712:	61a0      	str	r0, [r4, #24]
    this->xVel = maxXVel;
 80a3714:	60e5      	str	r5, [r4, #12]
    this->yVel = maxYVel;
 80a3716:	6120      	str	r0, [r4, #16]
 80a3718:	f000 f962 	bl	80a39e0 <HAL_Timer_Get_Milli_Seconds>
    tick_time = tickTime;
 80a371c:	9b06      	ldr	r3, [sp, #24]
    last_tick = millis();
 80a371e:	61e0      	str	r0, [r4, #28]
    tick_time = tickTime;
 80a3720:	6223      	str	r3, [r4, #32]
}
 80a3722:	4620      	mov	r0, r4
 80a3724:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3728 <_ZN10PongPaddle4tickEP8PongBall>:
void PongPaddle::tick(PongBall * pb) {
 80a3728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a372c:	4604      	mov	r4, r0
 80a372e:	460d      	mov	r5, r1
 80a3730:	f000 f956 	bl	80a39e0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - last_tick > tick_time) {
 80a3734:	69e3      	ldr	r3, [r4, #28]
 80a3736:	1ac0      	subs	r0, r0, r3
 80a3738:	6a23      	ldr	r3, [r4, #32]
 80a373a:	4298      	cmp	r0, r3
 80a373c:	d944      	bls.n	80a37c8 <_ZN10PongPaddle4tickEP8PongBall+0xa0>
 80a373e:	f000 f94f 	bl	80a39e0 <HAL_Timer_Get_Milli_Seconds>
        last_tick = millis();
 80a3742:	61e0      	str	r0, [r4, #28]
        if ((x < pb->x && pb->xVel < 0) || (x > pb->x && pb->xVel > 0)) {
 80a3744:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80a3748:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80a374c:	4640      	mov	r0, r8
 80a374e:	4649      	mov	r1, r9
 80a3750:	f006 fac4 	bl	80a9cdc <__aeabi_fcmplt>
 80a3754:	2700      	movs	r7, #0
 80a3756:	6826      	ldr	r6, [r4, #0]
 80a3758:	b120      	cbz	r0, 80a3764 <_ZN10PongPaddle4tickEP8PongBall+0x3c>
 80a375a:	4639      	mov	r1, r7
 80a375c:	68a8      	ldr	r0, [r5, #8]
 80a375e:	f006 fabd 	bl	80a9cdc <__aeabi_fcmplt>
 80a3762:	b958      	cbnz	r0, 80a377c <_ZN10PongPaddle4tickEP8PongBall+0x54>
 80a3764:	4649      	mov	r1, r9
 80a3766:	4640      	mov	r0, r8
 80a3768:	f006 fad6 	bl	80a9d18 <__aeabi_fcmpgt>
 80a376c:	2800      	cmp	r0, #0
 80a376e:	d038      	beq.n	80a37e2 <_ZN10PongPaddle4tickEP8PongBall+0xba>
 80a3770:	2100      	movs	r1, #0
 80a3772:	68a8      	ldr	r0, [r5, #8]
 80a3774:	f006 fad0 	bl	80a9d18 <__aeabi_fcmpgt>
 80a3778:	2800      	cmp	r0, #0
 80a377a:	d032      	beq.n	80a37e2 <_ZN10PongPaddle4tickEP8PongBall+0xba>
            if (y+len < pb->y) { yVel = maxYVel; }
 80a377c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80a3780:	696d      	ldr	r5, [r5, #20]
 80a3782:	6820      	ldr	r0, [r4, #0]
 80a3784:	f006 f8b8 	bl	80a98f8 <__aeabi_i2f>
 80a3788:	4641      	mov	r1, r8
 80a378a:	f006 f801 	bl	80a9790 <__addsf3>
 80a378e:	4629      	mov	r1, r5
 80a3790:	f006 faa4 	bl	80a9cdc <__aeabi_fcmplt>
 80a3794:	b1d0      	cbz	r0, 80a37cc <_ZN10PongPaddle4tickEP8PongBall+0xa4>
 80a3796:	69a3      	ldr	r3, [r4, #24]
 80a3798:	6123      	str	r3, [r4, #16]
        y += yVel;
 80a379a:	6921      	ldr	r1, [r4, #16]
 80a379c:	68a0      	ldr	r0, [r4, #8]
 80a379e:	f005 fff7 	bl	80a9790 <__addsf3>
 80a37a2:	4605      	mov	r5, r0
 80a37a4:	60a0      	str	r0, [r4, #8]
        if ((y+len) >= STRIP_LENGTH) {
 80a37a6:	4630      	mov	r0, r6
 80a37a8:	f006 f8a6 	bl	80a98f8 <__aeabi_i2f>
 80a37ac:	4629      	mov	r1, r5
 80a37ae:	f005 ffef 	bl	80a9790 <__addsf3>
 80a37b2:	492c      	ldr	r1, [pc, #176]	; (80a3864 <_ZN10PongPaddle4tickEP8PongBall+0x13c>)
 80a37b4:	f006 faa6 	bl	80a9d04 <__aeabi_fcmpge>
 80a37b8:	2800      	cmp	r0, #0
 80a37ba:	d049      	beq.n	80a3850 <_ZN10PongPaddle4tickEP8PongBall+0x128>
            y = STRIP_LENGTH-len;
 80a37bc:	f1c6 0046 	rsb	r0, r6, #70	; 0x46
 80a37c0:	f006 f89a 	bl	80a98f8 <__aeabi_i2f>
            yVel = 0;
 80a37c4:	6127      	str	r7, [r4, #16]
            y = STRIP_LENGTH-len;
 80a37c6:	60a0      	str	r0, [r4, #8]
}
 80a37c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            else if (y > pb->y) { yVel = -maxYVel; }
 80a37cc:	4629      	mov	r1, r5
 80a37ce:	4640      	mov	r0, r8
 80a37d0:	f006 faa2 	bl	80a9d18 <__aeabi_fcmpgt>
 80a37d4:	2800      	cmp	r0, #0
 80a37d6:	d0e0      	beq.n	80a379a <_ZN10PongPaddle4tickEP8PongBall+0x72>
 80a37d8:	69a3      	ldr	r3, [r4, #24]
 80a37da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a37de:	6123      	str	r3, [r4, #16]
 80a37e0:	e7db      	b.n	80a379a <_ZN10PongPaddle4tickEP8PongBall+0x72>
            if (abs(y+len/2 - STRIP_LENGTH/2) > len/4) {
 80a37e2:	eb06 70d6 	add.w	r0, r6, r6, lsr #31
 80a37e6:	1040      	asrs	r0, r0, #1
 80a37e8:	f006 f886 	bl	80a98f8 <__aeabi_i2f>
 80a37ec:	68a1      	ldr	r1, [r4, #8]
 80a37ee:	f005 ffcf 	bl	80a9790 <__addsf3>
 80a37f2:	4680      	mov	r8, r0
 80a37f4:	4630      	mov	r0, r6
 80a37f6:	2e00      	cmp	r6, #0
 80a37f8:	bfb8      	it	lt
 80a37fa:	1cf0      	addlt	r0, r6, #3
 80a37fc:	1080      	asrs	r0, r0, #2
 80a37fe:	f006 f87b 	bl	80a98f8 <__aeabi_i2f>
 80a3802:	4919      	ldr	r1, [pc, #100]	; (80a3868 <_ZN10PongPaddle4tickEP8PongBall+0x140>)
 80a3804:	4605      	mov	r5, r0
 80a3806:	4640      	mov	r0, r8
 80a3808:	f005 ffc0 	bl	80a978c <__aeabi_fsub>
 80a380c:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 80a3810:	4628      	mov	r0, r5
 80a3812:	f006 fa63 	bl	80a9cdc <__aeabi_fcmplt>
 80a3816:	b1c8      	cbz	r0, 80a384c <_ZN10PongPaddle4tickEP8PongBall+0x124>
                if (y+len/2 > STRIP_LENGTH/2) { yVel = 1.0 < maxYVel ? -1.0 : -maxYVel; }
 80a3818:	4913      	ldr	r1, [pc, #76]	; (80a3868 <_ZN10PongPaddle4tickEP8PongBall+0x140>)
 80a381a:	4640      	mov	r0, r8
 80a381c:	f006 fa7c 	bl	80a9d18 <__aeabi_fcmpgt>
 80a3820:	69a5      	ldr	r5, [r4, #24]
 80a3822:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a3826:	b148      	cbz	r0, 80a383c <_ZN10PongPaddle4tickEP8PongBall+0x114>
 80a3828:	4628      	mov	r0, r5
 80a382a:	f006 fa75 	bl	80a9d18 <__aeabi_fcmpgt>
 80a382e:	b918      	cbnz	r0, 80a3838 <_ZN10PongPaddle4tickEP8PongBall+0x110>
 80a3830:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
                else { yVel = 1.0 < maxYVel ? 1.0 : maxYVel; }
 80a3834:	6125      	str	r5, [r4, #16]
 80a3836:	e7b0      	b.n	80a379a <_ZN10PongPaddle4tickEP8PongBall+0x72>
                if (y+len/2 > STRIP_LENGTH/2) { yVel = 1.0 < maxYVel ? -1.0 : -maxYVel; }
 80a3838:	4d0c      	ldr	r5, [pc, #48]	; (80a386c <_ZN10PongPaddle4tickEP8PongBall+0x144>)
 80a383a:	e7fb      	b.n	80a3834 <_ZN10PongPaddle4tickEP8PongBall+0x10c>
                else { yVel = 1.0 < maxYVel ? 1.0 : maxYVel; }
 80a383c:	4628      	mov	r0, r5
 80a383e:	f006 fa6b 	bl	80a9d18 <__aeabi_fcmpgt>
 80a3842:	2800      	cmp	r0, #0
 80a3844:	d0f6      	beq.n	80a3834 <_ZN10PongPaddle4tickEP8PongBall+0x10c>
 80a3846:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 80a384a:	e7f3      	b.n	80a3834 <_ZN10PongPaddle4tickEP8PongBall+0x10c>
                yVel = 0;
 80a384c:	6127      	str	r7, [r4, #16]
 80a384e:	e7a4      	b.n	80a379a <_ZN10PongPaddle4tickEP8PongBall+0x72>
        } else if (y <= 0) {
 80a3850:	2100      	movs	r1, #0
 80a3852:	4628      	mov	r0, r5
 80a3854:	f006 fa4c 	bl	80a9cf0 <__aeabi_fcmple>
 80a3858:	2800      	cmp	r0, #0
 80a385a:	d0b5      	beq.n	80a37c8 <_ZN10PongPaddle4tickEP8PongBall+0xa0>
            y = 0;
 80a385c:	60a7      	str	r7, [r4, #8]
            yVel = 0;
 80a385e:	6127      	str	r7, [r4, #16]
}
 80a3860:	e7b2      	b.n	80a37c8 <_ZN10PongPaddle4tickEP8PongBall+0xa0>
 80a3862:	bf00      	nop
 80a3864:	428c0000 	.word	0x428c0000
 80a3868:	420c0000 	.word	0x420c0000
 80a386c:	bf800000 	.word	0xbf800000

080a3870 <_ZN10PongPaddle4xPosEv>:
int PongPaddle::xPos() { return (int) x; }
 80a3870:	b508      	push	{r3, lr}
 80a3872:	6840      	ldr	r0, [r0, #4]
 80a3874:	f006 fa70 	bl	80a9d58 <__aeabi_f2iz>
 80a3878:	bd08      	pop	{r3, pc}

080a387a <_ZN10PongPaddle4yPosEv>:
int PongPaddle::yPos() { return (int) y; }
 80a387a:	b508      	push	{r3, lr}
 80a387c:	6880      	ldr	r0, [r0, #8]
 80a387e:	f006 fa6b 	bl	80a9d58 <__aeabi_f2iz>
 80a3882:	bd08      	pop	{r3, pc}

080a3884 <_ZN10PongPaddle8setColorEiii>:
    this->g = g;
 80a3884:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
    this->b = b;
 80a3888:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80a388a:	4770      	bx	lr

080a388c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a388c:	4770      	bx	lr

080a388e <_ZN9IPAddressD0Ev>:
 80a388e:	b510      	push	{r4, lr}
 80a3890:	4604      	mov	r4, r0
 80a3892:	2118      	movs	r1, #24
 80a3894:	f001 feb5 	bl	80a5602 <_ZdlPvj>
 80a3898:	4620      	mov	r0, r4
 80a389a:	bd10      	pop	{r4, pc}

080a389c <_ZN8TCPBeatsC1Ev>:
#include "tcp_beats.h"

//const unsigned char server[] = {10, 0, 0, 70}; // Cabinet light RPi
IPAddress remoteIP(192, 168, 1, 69);

TCPBeats::TCPBeats() {
 80a389c:	b510      	push	{r4, lr}
 80a389e:	4604      	mov	r4, r0
 80a38a0:	f001 fa96 	bl	80a4dd0 <_ZN3UDPC1Ev>
 80a38a4:	4903      	ldr	r1, [pc, #12]	; (80a38b4 <_ZN8TCPBeatsC1Ev+0x18>)
 80a38a6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80a38aa:	f000 ffb0 	bl	80a480e <_ZN6StringC1EPKc>

}
 80a38ae:	4620      	mov	r0, r4
 80a38b0:	bd10      	pop	{r4, pc}
 80a38b2:	bf00      	nop
 80a38b4:	080aa1d8 	.word	0x080aa1d8

080a38b8 <_GLOBAL__sub_I_remoteIP>:
IPAddress remoteIP(192, 168, 1, 69);
 80a38b8:	2345      	movs	r3, #69	; 0x45
    str = String::format("AB,%03d,%03d,%03d,CD", r, g, b);
    str.getBytes(cmd_buffer, 18);

    udpcode = udp.sendPacket(cmd_buffer, str.length(), remoteIP, 1738);
    udpsends++;
}
 80a38ba:	b513      	push	{r0, r1, r4, lr}
IPAddress remoteIP(192, 168, 1, 69);
 80a38bc:	4c07      	ldr	r4, [pc, #28]	; (80a38dc <_GLOBAL__sub_I_remoteIP+0x24>)
 80a38be:	9300      	str	r3, [sp, #0]
 80a38c0:	22a8      	movs	r2, #168	; 0xa8
 80a38c2:	2301      	movs	r3, #1
 80a38c4:	21c0      	movs	r1, #192	; 0xc0
 80a38c6:	4620      	mov	r0, r4
 80a38c8:	f000 fe48 	bl	80a455c <_ZN9IPAddressC1Ehhhh>
 80a38cc:	4620      	mov	r0, r4
 80a38ce:	4a04      	ldr	r2, [pc, #16]	; (80a38e0 <_GLOBAL__sub_I_remoteIP+0x28>)
 80a38d0:	4904      	ldr	r1, [pc, #16]	; (80a38e4 <_GLOBAL__sub_I_remoteIP+0x2c>)
}
 80a38d2:	b002      	add	sp, #8
 80a38d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
IPAddress remoteIP(192, 168, 1, 69);
 80a38d8:	f001 be8e 	b.w	80a55f8 <__aeabi_atexit>
 80a38dc:	20000e88 	.word	0x20000e88
 80a38e0:	2000006c 	.word	0x2000006c
 80a38e4:	080a388d 	.word	0x080a388d

080a38e8 <_ZN8TCPBeats4initEv>:
    udp.begin(0);
 80a38e8:	2200      	movs	r2, #0
void TCPBeats::init() {
 80a38ea:	b510      	push	{r4, lr}
 80a38ec:	4604      	mov	r4, r0
    udp.begin(0);
 80a38ee:	4611      	mov	r1, r2
 80a38f0:	f001 f924 	bl	80a4b3c <_ZN3UDP5beginEtm>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a38f4:	2300      	movs	r3, #0
 80a38f6:	2202      	movs	r2, #2
 80a38f8:	f104 0178 	add.w	r1, r4, #120	; 0x78
 80a38fc:	4806      	ldr	r0, [pc, #24]	; (80a3918 <_ZN8TCPBeats4initEv+0x30>)
 80a38fe:	f000 f9ed 	bl	80a3cdc <spark_variable>
 80a3902:	2300      	movs	r3, #0
 80a3904:	2202      	movs	r2, #2
 80a3906:	4805      	ldr	r0, [pc, #20]	; (80a391c <_ZN8TCPBeats4initEv+0x34>)
 80a3908:	f104 017c 	add.w	r1, r4, #124	; 0x7c
 80a390c:	f000 f9e6 	bl	80a3cdc <spark_variable>
    udpsends = 0;
 80a3910:	2300      	movs	r3, #0
    udpcode = 0;
 80a3912:	e9c4 331e 	strd	r3, r3, [r4, #120]	; 0x78
}
 80a3916:	bd10      	pop	{r4, pc}
 80a3918:	080aa1e9 	.word	0x080aa1e9
 80a391c:	080aa1f2 	.word	0x080aa1f2

080a3920 <_ZN8TCPBeats13stevenSendRGBEiii>:
void TCPBeats::stevenSendRGB(int r, int g, int b) {
 80a3920:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3922:	4604      	mov	r4, r0
 80a3924:	b089      	sub	sp, #36	; 0x24
    str = String::format("AB,%03d,%03d,%03d,CD", r, g, b);
 80a3926:	f100 054c 	add.w	r5, r0, #76	; 0x4c
 80a392a:	9300      	str	r3, [sp, #0]
 80a392c:	a802      	add	r0, sp, #8
 80a392e:	4613      	mov	r3, r2
 80a3930:	460a      	mov	r2, r1
 80a3932:	4914      	ldr	r1, [pc, #80]	; (80a3984 <_ZN8TCPBeats13stevenSendRGBEiii+0x64>)
 80a3934:	f001 f830 	bl	80a4998 <_ZN6String6formatEPKcz>
 80a3938:	a902      	add	r1, sp, #8
 80a393a:	4628      	mov	r0, r5
 80a393c:	f000 ffb1 	bl	80a48a2 <_ZN6StringaSEOS_>
    str.getBytes(cmd_buffer, 18);
 80a3940:	f104 075c 	add.w	r7, r4, #92	; 0x5c
    str = String::format("AB,%03d,%03d,%03d,CD", r, g, b);
 80a3944:	a802      	add	r0, sp, #8
 80a3946:	f000 ff18 	bl	80a477a <_ZN6StringD1Ev>
    str.getBytes(cmd_buffer, 18);
 80a394a:	4639      	mov	r1, r7
 80a394c:	4628      	mov	r0, r5
 80a394e:	2300      	movs	r3, #0
 80a3950:	2212      	movs	r2, #18
 80a3952:	f001 f808 	bl	80a4966 <_ZNK6String8getBytesEPhjj>
class IPAddress : public Printable {
 80a3956:	4e0c      	ldr	r6, [pc, #48]	; (80a3988 <_ZN8TCPBeats13stevenSendRGBEiii+0x68>)
 80a3958:	4b0c      	ldr	r3, [pc, #48]	; (80a398c <_ZN8TCPBeats13stevenSendRGBEiii+0x6c>)
 80a395a:	ad03      	add	r5, sp, #12
 80a395c:	9302      	str	r3, [sp, #8]
 80a395e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a3960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a3962:	6833      	ldr	r3, [r6, #0]
    udpcode = udp.sendPacket(cmd_buffer, str.length(), remoteIP, 1738);
 80a3964:	4639      	mov	r1, r7
 80a3966:	702b      	strb	r3, [r5, #0]
 80a3968:	f240 63ca 	movw	r3, #1738	; 0x6ca
 80a396c:	4620      	mov	r0, r4
 80a396e:	9300      	str	r3, [sp, #0]
 80a3970:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80a3972:	ab02      	add	r3, sp, #8
 80a3974:	f001 f91f 	bl	80a4bb6 <_ZN3UDP10sendPacketEPKhj9IPAddresst>
    udpsends++;
 80a3978:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    udpcode = udp.sendPacket(cmd_buffer, str.length(), remoteIP, 1738);
 80a397a:	67e0      	str	r0, [r4, #124]	; 0x7c
    udpsends++;
 80a397c:	3301      	adds	r3, #1
 80a397e:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80a3980:	b009      	add	sp, #36	; 0x24
 80a3982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3984:	080aa1fa 	.word	0x080aa1fa
 80a3988:	20000e8c 	.word	0x20000e8c
 80a398c:	080aa25c 	.word	0x080aa25c

080a3990 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a3990:	b508      	push	{r3, lr}
 80a3992:	4b02      	ldr	r3, [pc, #8]	; (80a399c <os_mutex_recursive_create+0xc>)
 80a3994:	681b      	ldr	r3, [r3, #0]
 80a3996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3998:	9301      	str	r3, [sp, #4]
 80a399a:	bd08      	pop	{r3, pc}
 80a399c:	080601d0 	.word	0x080601d0

080a39a0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a39a0:	b508      	push	{r3, lr}
 80a39a2:	4b02      	ldr	r3, [pc, #8]	; (80a39ac <os_mutex_recursive_destroy+0xc>)
 80a39a4:	681b      	ldr	r3, [r3, #0]
 80a39a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a39a8:	9301      	str	r3, [sp, #4]
 80a39aa:	bd08      	pop	{r3, pc}
 80a39ac:	080601d0 	.word	0x080601d0

080a39b0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a39b0:	b508      	push	{r3, lr}
 80a39b2:	4b02      	ldr	r3, [pc, #8]	; (80a39bc <HAL_RNG_GetRandomNumber+0xc>)
 80a39b4:	681b      	ldr	r3, [r3, #0]
 80a39b6:	685b      	ldr	r3, [r3, #4]
 80a39b8:	9301      	str	r3, [sp, #4]
 80a39ba:	bd08      	pop	{r3, pc}
 80a39bc:	0806019c 	.word	0x0806019c

080a39c0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a39c0:	b508      	push	{r3, lr}
 80a39c2:	4b02      	ldr	r3, [pc, #8]	; (80a39cc <HAL_Delay_Microseconds+0xc>)
 80a39c4:	681b      	ldr	r3, [r3, #0]
 80a39c6:	68db      	ldr	r3, [r3, #12]
 80a39c8:	9301      	str	r3, [sp, #4]
 80a39ca:	bd08      	pop	{r3, pc}
 80a39cc:	0806019c 	.word	0x0806019c

080a39d0 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a39d0:	b508      	push	{r3, lr}
 80a39d2:	4b02      	ldr	r3, [pc, #8]	; (80a39dc <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a39d4:	681b      	ldr	r3, [r3, #0]
 80a39d6:	691b      	ldr	r3, [r3, #16]
 80a39d8:	9301      	str	r3, [sp, #4]
 80a39da:	bd08      	pop	{r3, pc}
 80a39dc:	0806019c 	.word	0x0806019c

080a39e0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a39e0:	b508      	push	{r3, lr}
 80a39e2:	4b02      	ldr	r3, [pc, #8]	; (80a39ec <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a39e4:	681b      	ldr	r3, [r3, #0]
 80a39e6:	695b      	ldr	r3, [r3, #20]
 80a39e8:	9301      	str	r3, [sp, #4]
 80a39ea:	bd08      	pop	{r3, pc}
 80a39ec:	0806019c 	.word	0x0806019c

080a39f0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a39f0:	b508      	push	{r3, lr}
 80a39f2:	4b02      	ldr	r3, [pc, #8]	; (80a39fc <hal_rtc_time_is_valid+0xc>)
 80a39f4:	681b      	ldr	r3, [r3, #0]
 80a39f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a39f8:	9301      	str	r3, [sp, #4]
 80a39fa:	bd08      	pop	{r3, pc}
 80a39fc:	0806019c 	.word	0x0806019c

080a3a00 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a3a00:	b508      	push	{r3, lr}
 80a3a02:	4b02      	ldr	r3, [pc, #8]	; (80a3a0c <hal_rtc_get_time+0xc>)
 80a3a04:	681b      	ldr	r3, [r3, #0]
 80a3a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a3a08:	9301      	str	r3, [sp, #4]
 80a3a0a:	bd08      	pop	{r3, pc}
 80a3a0c:	0806019c 	.word	0x0806019c

080a3a10 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a3a10:	b508      	push	{r3, lr}
 80a3a12:	4b02      	ldr	r3, [pc, #8]	; (80a3a1c <HAL_Pin_Map+0xc>)
 80a3a14:	681b      	ldr	r3, [r3, #0]
 80a3a16:	681b      	ldr	r3, [r3, #0]
 80a3a18:	9301      	str	r3, [sp, #4]
 80a3a1a:	bd08      	pop	{r3, pc}
 80a3a1c:	080601b0 	.word	0x080601b0

080a3a20 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a3a20:	b508      	push	{r3, lr}
 80a3a22:	4b02      	ldr	r3, [pc, #8]	; (80a3a2c <HAL_Validate_Pin_Function+0xc>)
 80a3a24:	681b      	ldr	r3, [r3, #0]
 80a3a26:	685b      	ldr	r3, [r3, #4]
 80a3a28:	9301      	str	r3, [sp, #4]
 80a3a2a:	bd08      	pop	{r3, pc}
 80a3a2c:	080601b0 	.word	0x080601b0

080a3a30 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a3a30:	b508      	push	{r3, lr}
 80a3a32:	4b02      	ldr	r3, [pc, #8]	; (80a3a3c <HAL_Pin_Mode+0xc>)
 80a3a34:	681b      	ldr	r3, [r3, #0]
 80a3a36:	689b      	ldr	r3, [r3, #8]
 80a3a38:	9301      	str	r3, [sp, #4]
 80a3a3a:	bd08      	pop	{r3, pc}
 80a3a3c:	080601b0 	.word	0x080601b0

080a3a40 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a3a40:	b508      	push	{r3, lr}
 80a3a42:	4b02      	ldr	r3, [pc, #8]	; (80a3a4c <HAL_Get_Pin_Mode+0xc>)
 80a3a44:	681b      	ldr	r3, [r3, #0]
 80a3a46:	68db      	ldr	r3, [r3, #12]
 80a3a48:	9301      	str	r3, [sp, #4]
 80a3a4a:	bd08      	pop	{r3, pc}
 80a3a4c:	080601b0 	.word	0x080601b0

080a3a50 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a3a50:	b508      	push	{r3, lr}
 80a3a52:	4b02      	ldr	r3, [pc, #8]	; (80a3a5c <HAL_GPIO_Write+0xc>)
 80a3a54:	681b      	ldr	r3, [r3, #0]
 80a3a56:	691b      	ldr	r3, [r3, #16]
 80a3a58:	9301      	str	r3, [sp, #4]
 80a3a5a:	bd08      	pop	{r3, pc}
 80a3a5c:	080601b0 	.word	0x080601b0

080a3a60 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a3a60:	b508      	push	{r3, lr}
 80a3a62:	4b02      	ldr	r3, [pc, #8]	; (80a3a6c <hal_adc_read+0xc>)
 80a3a64:	681b      	ldr	r3, [r3, #0]
 80a3a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3a68:	9301      	str	r3, [sp, #4]
 80a3a6a:	bd08      	pop	{r3, pc}
 80a3a6c:	080601b0 	.word	0x080601b0

080a3a70 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a3a70:	b508      	push	{r3, lr}
 80a3a72:	4b02      	ldr	r3, [pc, #8]	; (80a3a7c <hal_i2c_write+0xc>)
 80a3a74:	681b      	ldr	r3, [r3, #0]
 80a3a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a3a78:	9301      	str	r3, [sp, #4]
 80a3a7a:	bd08      	pop	{r3, pc}
 80a3a7c:	080601ac 	.word	0x080601ac

080a3a80 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a3a80:	b508      	push	{r3, lr}
 80a3a82:	4b02      	ldr	r3, [pc, #8]	; (80a3a8c <hal_i2c_available+0xc>)
 80a3a84:	681b      	ldr	r3, [r3, #0]
 80a3a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a3a88:	9301      	str	r3, [sp, #4]
 80a3a8a:	bd08      	pop	{r3, pc}
 80a3a8c:	080601ac 	.word	0x080601ac

080a3a90 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a3a90:	b508      	push	{r3, lr}
 80a3a92:	4b02      	ldr	r3, [pc, #8]	; (80a3a9c <hal_i2c_read+0xc>)
 80a3a94:	681b      	ldr	r3, [r3, #0]
 80a3a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a3a98:	9301      	str	r3, [sp, #4]
 80a3a9a:	bd08      	pop	{r3, pc}
 80a3a9c:	080601ac 	.word	0x080601ac

080a3aa0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a3aa0:	b508      	push	{r3, lr}
 80a3aa2:	4b02      	ldr	r3, [pc, #8]	; (80a3aac <hal_i2c_peek+0xc>)
 80a3aa4:	681b      	ldr	r3, [r3, #0]
 80a3aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a3aa8:	9301      	str	r3, [sp, #4]
 80a3aaa:	bd08      	pop	{r3, pc}
 80a3aac:	080601ac 	.word	0x080601ac

080a3ab0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a3ab0:	b508      	push	{r3, lr}
 80a3ab2:	4b02      	ldr	r3, [pc, #8]	; (80a3abc <hal_i2c_flush+0xc>)
 80a3ab4:	681b      	ldr	r3, [r3, #0]
 80a3ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a3ab8:	9301      	str	r3, [sp, #4]
 80a3aba:	bd08      	pop	{r3, pc}
 80a3abc:	080601ac 	.word	0x080601ac

080a3ac0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a3ac0:	b508      	push	{r3, lr}
 80a3ac2:	4b02      	ldr	r3, [pc, #8]	; (80a3acc <hal_i2c_is_enabled+0xc>)
 80a3ac4:	681b      	ldr	r3, [r3, #0]
 80a3ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a3ac8:	9301      	str	r3, [sp, #4]
 80a3aca:	bd08      	pop	{r3, pc}
 80a3acc:	080601ac 	.word	0x080601ac

080a3ad0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a3ad0:	b508      	push	{r3, lr}
 80a3ad2:	4b03      	ldr	r3, [pc, #12]	; (80a3ae0 <hal_i2c_init+0x10>)
 80a3ad4:	681b      	ldr	r3, [r3, #0]
 80a3ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a3ada:	9301      	str	r3, [sp, #4]
 80a3adc:	bd08      	pop	{r3, pc}
 80a3ade:	0000      	.short	0x0000
 80a3ae0:	080601ac 	.word	0x080601ac

080a3ae4 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a3ae4:	b508      	push	{r3, lr}
 80a3ae6:	4b02      	ldr	r3, [pc, #8]	; (80a3af0 <socket_handle_valid+0xc>)
 80a3ae8:	681b      	ldr	r3, [r3, #0]
 80a3aea:	685b      	ldr	r3, [r3, #4]
 80a3aec:	9301      	str	r3, [sp, #4]
 80a3aee:	bd08      	pop	{r3, pc}
 80a3af0:	080601bc 	.word	0x080601bc

080a3af4 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a3af4:	b508      	push	{r3, lr}
 80a3af6:	4b02      	ldr	r3, [pc, #8]	; (80a3b00 <socket_create+0xc>)
 80a3af8:	681b      	ldr	r3, [r3, #0]
 80a3afa:	689b      	ldr	r3, [r3, #8]
 80a3afc:	9301      	str	r3, [sp, #4]
 80a3afe:	bd08      	pop	{r3, pc}
 80a3b00:	080601bc 	.word	0x080601bc

080a3b04 <socket_sendto>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a3b04:	b508      	push	{r3, lr}
 80a3b06:	4b02      	ldr	r3, [pc, #8]	; (80a3b10 <socket_sendto+0xc>)
 80a3b08:	681b      	ldr	r3, [r3, #0]
 80a3b0a:	69db      	ldr	r3, [r3, #28]
 80a3b0c:	9301      	str	r3, [sp, #4]
 80a3b0e:	bd08      	pop	{r3, pc}
 80a3b10:	080601bc 	.word	0x080601bc

080a3b14 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a3b14:	b508      	push	{r3, lr}
 80a3b16:	4b02      	ldr	r3, [pc, #8]	; (80a3b20 <socket_close+0xc>)
 80a3b18:	681b      	ldr	r3, [r3, #0]
 80a3b1a:	6a1b      	ldr	r3, [r3, #32]
 80a3b1c:	9301      	str	r3, [sp, #4]
 80a3b1e:	bd08      	pop	{r3, pc}
 80a3b20:	080601bc 	.word	0x080601bc

080a3b24 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a3b24:	b508      	push	{r3, lr}
 80a3b26:	4b02      	ldr	r3, [pc, #8]	; (80a3b30 <socket_handle_invalid+0xc>)
 80a3b28:	681b      	ldr	r3, [r3, #0]
 80a3b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3b2c:	9301      	str	r3, [sp, #4]
 80a3b2e:	bd08      	pop	{r3, pc}
 80a3b30:	080601bc 	.word	0x080601bc

080a3b34 <socket_receivefrom_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
DYNALIB_FN(18, hal_socket, socket_receivefrom_ex, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*, system_tick_t, void*))
 80a3b34:	b508      	push	{r3, lr}
 80a3b36:	4b02      	ldr	r3, [pc, #8]	; (80a3b40 <socket_receivefrom_ex+0xc>)
 80a3b38:	681b      	ldr	r3, [r3, #0]
 80a3b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3b3c:	9301      	str	r3, [sp, #4]
 80a3b3e:	bd08      	pop	{r3, pc}
 80a3b40:	080601bc 	.word	0x080601bc

080a3b44 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a3b44:	b508      	push	{r3, lr}
 80a3b46:	4b02      	ldr	r3, [pc, #8]	; (80a3b50 <hal_spi_init+0xc>)
 80a3b48:	681b      	ldr	r3, [r3, #0]
 80a3b4a:	69db      	ldr	r3, [r3, #28]
 80a3b4c:	9301      	str	r3, [sp, #4]
 80a3b4e:	bd08      	pop	{r3, pc}
 80a3b50:	080601b4 	.word	0x080601b4

080a3b54 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a3b54:	b508      	push	{r3, lr}
 80a3b56:	4b02      	ldr	r3, [pc, #8]	; (80a3b60 <hal_spi_is_enabled+0xc>)
 80a3b58:	681b      	ldr	r3, [r3, #0]
 80a3b5a:	6a1b      	ldr	r3, [r3, #32]
 80a3b5c:	9301      	str	r3, [sp, #4]
 80a3b5e:	bd08      	pop	{r3, pc}
 80a3b60:	080601b4 	.word	0x080601b4

080a3b64 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a3b64:	b508      	push	{r3, lr}
 80a3b66:	4b02      	ldr	r3, [pc, #8]	; (80a3b70 <hal_usart_init+0xc>)
 80a3b68:	681b      	ldr	r3, [r3, #0]
 80a3b6a:	699b      	ldr	r3, [r3, #24]
 80a3b6c:	9301      	str	r3, [sp, #4]
 80a3b6e:	bd08      	pop	{r3, pc}
 80a3b70:	080601c4 	.word	0x080601c4

080a3b74 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a3b74:	b508      	push	{r3, lr}
 80a3b76:	4b02      	ldr	r3, [pc, #8]	; (80a3b80 <hal_usart_write+0xc>)
 80a3b78:	681b      	ldr	r3, [r3, #0]
 80a3b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3b7c:	9301      	str	r3, [sp, #4]
 80a3b7e:	bd08      	pop	{r3, pc}
 80a3b80:	080601c4 	.word	0x080601c4

080a3b84 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a3b84:	b508      	push	{r3, lr}
 80a3b86:	4b02      	ldr	r3, [pc, #8]	; (80a3b90 <hal_usart_available+0xc>)
 80a3b88:	681b      	ldr	r3, [r3, #0]
 80a3b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3b8c:	9301      	str	r3, [sp, #4]
 80a3b8e:	bd08      	pop	{r3, pc}
 80a3b90:	080601c4 	.word	0x080601c4

080a3b94 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a3b94:	b508      	push	{r3, lr}
 80a3b96:	4b02      	ldr	r3, [pc, #8]	; (80a3ba0 <hal_usart_read+0xc>)
 80a3b98:	681b      	ldr	r3, [r3, #0]
 80a3b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3b9c:	9301      	str	r3, [sp, #4]
 80a3b9e:	bd08      	pop	{r3, pc}
 80a3ba0:	080601c4 	.word	0x080601c4

080a3ba4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a3ba4:	b508      	push	{r3, lr}
 80a3ba6:	4b02      	ldr	r3, [pc, #8]	; (80a3bb0 <hal_usart_peek+0xc>)
 80a3ba8:	681b      	ldr	r3, [r3, #0]
 80a3baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3bac:	9301      	str	r3, [sp, #4]
 80a3bae:	bd08      	pop	{r3, pc}
 80a3bb0:	080601c4 	.word	0x080601c4

080a3bb4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a3bb4:	b508      	push	{r3, lr}
 80a3bb6:	4b02      	ldr	r3, [pc, #8]	; (80a3bc0 <hal_usart_flush+0xc>)
 80a3bb8:	681b      	ldr	r3, [r3, #0]
 80a3bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3bbc:	9301      	str	r3, [sp, #4]
 80a3bbe:	bd08      	pop	{r3, pc}
 80a3bc0:	080601c4 	.word	0x080601c4

080a3bc4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a3bc4:	b508      	push	{r3, lr}
 80a3bc6:	4b02      	ldr	r3, [pc, #8]	; (80a3bd0 <hal_usart_is_enabled+0xc>)
 80a3bc8:	681b      	ldr	r3, [r3, #0]
 80a3bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a3bcc:	9301      	str	r3, [sp, #4]
 80a3bce:	bd08      	pop	{r3, pc}
 80a3bd0:	080601c4 	.word	0x080601c4

080a3bd4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a3bd4:	b508      	push	{r3, lr}
 80a3bd6:	4b02      	ldr	r3, [pc, #8]	; (80a3be0 <hal_usart_available_data_for_write+0xc>)
 80a3bd8:	681b      	ldr	r3, [r3, #0]
 80a3bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3bdc:	9301      	str	r3, [sp, #4]
 80a3bde:	bd08      	pop	{r3, pc}
 80a3be0:	080601c4 	.word	0x080601c4

080a3be4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a3be4:	b508      	push	{r3, lr}
 80a3be6:	4b02      	ldr	r3, [pc, #8]	; (80a3bf0 <HAL_USB_USART_Init+0xc>)
 80a3be8:	681b      	ldr	r3, [r3, #0]
 80a3bea:	681b      	ldr	r3, [r3, #0]
 80a3bec:	9301      	str	r3, [sp, #4]
 80a3bee:	bd08      	pop	{r3, pc}
 80a3bf0:	080601d8 	.word	0x080601d8

080a3bf4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a3bf4:	b508      	push	{r3, lr}
 80a3bf6:	4b02      	ldr	r3, [pc, #8]	; (80a3c00 <HAL_USB_USART_Available_Data+0xc>)
 80a3bf8:	681b      	ldr	r3, [r3, #0]
 80a3bfa:	691b      	ldr	r3, [r3, #16]
 80a3bfc:	9301      	str	r3, [sp, #4]
 80a3bfe:	bd08      	pop	{r3, pc}
 80a3c00:	080601d8 	.word	0x080601d8

080a3c04 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a3c04:	b508      	push	{r3, lr}
 80a3c06:	4b02      	ldr	r3, [pc, #8]	; (80a3c10 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a3c08:	681b      	ldr	r3, [r3, #0]
 80a3c0a:	695b      	ldr	r3, [r3, #20]
 80a3c0c:	9301      	str	r3, [sp, #4]
 80a3c0e:	bd08      	pop	{r3, pc}
 80a3c10:	080601d8 	.word	0x080601d8

080a3c14 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3c14:	b508      	push	{r3, lr}
 80a3c16:	4b02      	ldr	r3, [pc, #8]	; (80a3c20 <HAL_USB_USART_Receive_Data+0xc>)
 80a3c18:	681b      	ldr	r3, [r3, #0]
 80a3c1a:	699b      	ldr	r3, [r3, #24]
 80a3c1c:	9301      	str	r3, [sp, #4]
 80a3c1e:	bd08      	pop	{r3, pc}
 80a3c20:	080601d8 	.word	0x080601d8

080a3c24 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3c24:	b508      	push	{r3, lr}
 80a3c26:	4b02      	ldr	r3, [pc, #8]	; (80a3c30 <HAL_USB_USART_Send_Data+0xc>)
 80a3c28:	681b      	ldr	r3, [r3, #0]
 80a3c2a:	69db      	ldr	r3, [r3, #28]
 80a3c2c:	9301      	str	r3, [sp, #4]
 80a3c2e:	bd08      	pop	{r3, pc}
 80a3c30:	080601d8 	.word	0x080601d8

080a3c34 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a3c34:	b508      	push	{r3, lr}
 80a3c36:	4b02      	ldr	r3, [pc, #8]	; (80a3c40 <HAL_USB_USART_Flush_Data+0xc>)
 80a3c38:	681b      	ldr	r3, [r3, #0]
 80a3c3a:	6a1b      	ldr	r3, [r3, #32]
 80a3c3c:	9301      	str	r3, [sp, #4]
 80a3c3e:	bd08      	pop	{r3, pc}
 80a3c40:	080601d8 	.word	0x080601d8

080a3c44 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a3c44:	b508      	push	{r3, lr}
 80a3c46:	4b02      	ldr	r3, [pc, #8]	; (80a3c50 <inet_gethostbyname+0xc>)
 80a3c48:	681b      	ldr	r3, [r3, #0]
 80a3c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3c4c:	9301      	str	r3, [sp, #4]
 80a3c4e:	bd08      	pop	{r3, pc}
 80a3c50:	080601c0 	.word	0x080601c0

080a3c54 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a3c54:	b508      	push	{r3, lr}
 80a3c56:	4b02      	ldr	r3, [pc, #8]	; (80a3c60 <system_mode+0xc>)
 80a3c58:	681b      	ldr	r3, [r3, #0]
 80a3c5a:	681b      	ldr	r3, [r3, #0]
 80a3c5c:	9301      	str	r3, [sp, #4]
 80a3c5e:	bd08      	pop	{r3, pc}
 80a3c60:	080601a4 	.word	0x080601a4

080a3c64 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a3c64:	b508      	push	{r3, lr}
 80a3c66:	4b02      	ldr	r3, [pc, #8]	; (80a3c70 <set_system_mode+0xc>)
 80a3c68:	681b      	ldr	r3, [r3, #0]
 80a3c6a:	685b      	ldr	r3, [r3, #4]
 80a3c6c:	9301      	str	r3, [sp, #4]
 80a3c6e:	bd08      	pop	{r3, pc}
 80a3c70:	080601a4 	.word	0x080601a4

080a3c74 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a3c74:	b508      	push	{r3, lr}
 80a3c76:	4b02      	ldr	r3, [pc, #8]	; (80a3c80 <system_delay_ms+0xc>)
 80a3c78:	681b      	ldr	r3, [r3, #0]
 80a3c7a:	695b      	ldr	r3, [r3, #20]
 80a3c7c:	9301      	str	r3, [sp, #4]
 80a3c7e:	bd08      	pop	{r3, pc}
 80a3c80:	080601a4 	.word	0x080601a4

080a3c84 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a3c84:	b508      	push	{r3, lr}
 80a3c86:	4b02      	ldr	r3, [pc, #8]	; (80a3c90 <application_thread_current+0xc>)
 80a3c88:	681b      	ldr	r3, [r3, #0]
 80a3c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a3c8c:	9301      	str	r3, [sp, #4]
 80a3c8e:	bd08      	pop	{r3, pc}
 80a3c90:	080601a4 	.word	0x080601a4

080a3c94 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a3c94:	b508      	push	{r3, lr}
 80a3c96:	4b02      	ldr	r3, [pc, #8]	; (80a3ca0 <application_thread_invoke+0xc>)
 80a3c98:	681b      	ldr	r3, [r3, #0]
 80a3c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a3c9c:	9301      	str	r3, [sp, #4]
 80a3c9e:	bd08      	pop	{r3, pc}
 80a3ca0:	080601a4 	.word	0x080601a4

080a3ca4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a3ca4:	b508      	push	{r3, lr}
 80a3ca6:	4b02      	ldr	r3, [pc, #8]	; (80a3cb0 <system_thread_get_state+0xc>)
 80a3ca8:	681b      	ldr	r3, [r3, #0]
 80a3caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3cac:	9301      	str	r3, [sp, #4]
 80a3cae:	bd08      	pop	{r3, pc}
 80a3cb0:	080601a4 	.word	0x080601a4

080a3cb4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a3cb4:	b508      	push	{r3, lr}
 80a3cb6:	4b03      	ldr	r3, [pc, #12]	; (80a3cc4 <system_ctrl_set_app_request_handler+0x10>)
 80a3cb8:	681b      	ldr	r3, [r3, #0]
 80a3cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a3cbe:	9301      	str	r3, [sp, #4]
 80a3cc0:	bd08      	pop	{r3, pc}
 80a3cc2:	0000      	.short	0x0000
 80a3cc4:	080601a4 	.word	0x080601a4

080a3cc8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a3cc8:	b508      	push	{r3, lr}
 80a3cca:	4b03      	ldr	r3, [pc, #12]	; (80a3cd8 <system_ctrl_set_result+0x10>)
 80a3ccc:	681b      	ldr	r3, [r3, #0]
 80a3cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a3cd2:	9301      	str	r3, [sp, #4]
 80a3cd4:	bd08      	pop	{r3, pc}
 80a3cd6:	0000      	.short	0x0000
 80a3cd8:	080601a4 	.word	0x080601a4

080a3cdc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a3cdc:	b508      	push	{r3, lr}
 80a3cde:	4b02      	ldr	r3, [pc, #8]	; (80a3ce8 <spark_variable+0xc>)
 80a3ce0:	681b      	ldr	r3, [r3, #0]
 80a3ce2:	681b      	ldr	r3, [r3, #0]
 80a3ce4:	9301      	str	r3, [sp, #4]
 80a3ce6:	bd08      	pop	{r3, pc}
 80a3ce8:	080601cc 	.word	0x080601cc

080a3cec <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a3cec:	b508      	push	{r3, lr}
 80a3cee:	4b02      	ldr	r3, [pc, #8]	; (80a3cf8 <spark_process+0xc>)
 80a3cf0:	681b      	ldr	r3, [r3, #0]
 80a3cf2:	689b      	ldr	r3, [r3, #8]
 80a3cf4:	9301      	str	r3, [sp, #4]
 80a3cf6:	bd08      	pop	{r3, pc}
 80a3cf8:	080601cc 	.word	0x080601cc

080a3cfc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a3cfc:	b508      	push	{r3, lr}
 80a3cfe:	4b02      	ldr	r3, [pc, #8]	; (80a3d08 <spark_cloud_flag_connected+0xc>)
 80a3d00:	681b      	ldr	r3, [r3, #0]
 80a3d02:	695b      	ldr	r3, [r3, #20]
 80a3d04:	9301      	str	r3, [sp, #4]
 80a3d06:	bd08      	pop	{r3, pc}
 80a3d08:	080601cc 	.word	0x080601cc

080a3d0c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a3d0c:	b508      	push	{r3, lr}
 80a3d0e:	4b02      	ldr	r3, [pc, #8]	; (80a3d18 <spark_send_event+0xc>)
 80a3d10:	681b      	ldr	r3, [r3, #0]
 80a3d12:	6a1b      	ldr	r3, [r3, #32]
 80a3d14:	9301      	str	r3, [sp, #4]
 80a3d16:	bd08      	pop	{r3, pc}
 80a3d18:	080601cc 	.word	0x080601cc

080a3d1c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a3d1c:	b508      	push	{r3, lr}
 80a3d1e:	4b02      	ldr	r3, [pc, #8]	; (80a3d28 <spark_sync_time_pending+0xc>)
 80a3d20:	681b      	ldr	r3, [r3, #0]
 80a3d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3d24:	9301      	str	r3, [sp, #4]
 80a3d26:	bd08      	pop	{r3, pc}
 80a3d28:	080601cc 	.word	0x080601cc

080a3d2c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a3d2c:	b508      	push	{r3, lr}
 80a3d2e:	4b02      	ldr	r3, [pc, #8]	; (80a3d38 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a3d30:	681b      	ldr	r3, [r3, #0]
 80a3d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a3d34:	9301      	str	r3, [sp, #4]
 80a3d36:	bd08      	pop	{r3, pc}
 80a3d38:	080601cc 	.word	0x080601cc

080a3d3c <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a3d3c:	b508      	push	{r3, lr}
 80a3d3e:	4b02      	ldr	r3, [pc, #8]	; (80a3d48 <network_config+0xc>)
 80a3d40:	681b      	ldr	r3, [r3, #0]
 80a3d42:	681b      	ldr	r3, [r3, #0]
 80a3d44:	9301      	str	r3, [sp, #4]
 80a3d46:	bd08      	pop	{r3, pc}
 80a3d48:	080601c8 	.word	0x080601c8

080a3d4c <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3d4c:	b508      	push	{r3, lr}
 80a3d4e:	4b02      	ldr	r3, [pc, #8]	; (80a3d58 <network_connect+0xc>)
 80a3d50:	681b      	ldr	r3, [r3, #0]
 80a3d52:	685b      	ldr	r3, [r3, #4]
 80a3d54:	9301      	str	r3, [sp, #4]
 80a3d56:	bd08      	pop	{r3, pc}
 80a3d58:	080601c8 	.word	0x080601c8

080a3d5c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a3d5c:	b508      	push	{r3, lr}
 80a3d5e:	4b02      	ldr	r3, [pc, #8]	; (80a3d68 <network_connecting+0xc>)
 80a3d60:	681b      	ldr	r3, [r3, #0]
 80a3d62:	689b      	ldr	r3, [r3, #8]
 80a3d64:	9301      	str	r3, [sp, #4]
 80a3d66:	bd08      	pop	{r3, pc}
 80a3d68:	080601c8 	.word	0x080601c8

080a3d6c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a3d6c:	b508      	push	{r3, lr}
 80a3d6e:	4b02      	ldr	r3, [pc, #8]	; (80a3d78 <network_disconnect+0xc>)
 80a3d70:	681b      	ldr	r3, [r3, #0]
 80a3d72:	68db      	ldr	r3, [r3, #12]
 80a3d74:	9301      	str	r3, [sp, #4]
 80a3d76:	bd08      	pop	{r3, pc}
 80a3d78:	080601c8 	.word	0x080601c8

080a3d7c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a3d7c:	b508      	push	{r3, lr}
 80a3d7e:	4b02      	ldr	r3, [pc, #8]	; (80a3d88 <network_ready+0xc>)
 80a3d80:	681b      	ldr	r3, [r3, #0]
 80a3d82:	691b      	ldr	r3, [r3, #16]
 80a3d84:	9301      	str	r3, [sp, #4]
 80a3d86:	bd08      	pop	{r3, pc}
 80a3d88:	080601c8 	.word	0x080601c8

080a3d8c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3d8c:	b508      	push	{r3, lr}
 80a3d8e:	4b02      	ldr	r3, [pc, #8]	; (80a3d98 <network_on+0xc>)
 80a3d90:	681b      	ldr	r3, [r3, #0]
 80a3d92:	695b      	ldr	r3, [r3, #20]
 80a3d94:	9301      	str	r3, [sp, #4]
 80a3d96:	bd08      	pop	{r3, pc}
 80a3d98:	080601c8 	.word	0x080601c8

080a3d9c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3d9c:	b508      	push	{r3, lr}
 80a3d9e:	4b02      	ldr	r3, [pc, #8]	; (80a3da8 <network_off+0xc>)
 80a3da0:	681b      	ldr	r3, [r3, #0]
 80a3da2:	699b      	ldr	r3, [r3, #24]
 80a3da4:	9301      	str	r3, [sp, #4]
 80a3da6:	bd08      	pop	{r3, pc}
 80a3da8:	080601c8 	.word	0x080601c8

080a3dac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a3dac:	b508      	push	{r3, lr}
 80a3dae:	4b02      	ldr	r3, [pc, #8]	; (80a3db8 <network_listen+0xc>)
 80a3db0:	681b      	ldr	r3, [r3, #0]
 80a3db2:	69db      	ldr	r3, [r3, #28]
 80a3db4:	9301      	str	r3, [sp, #4]
 80a3db6:	bd08      	pop	{r3, pc}
 80a3db8:	080601c8 	.word	0x080601c8

080a3dbc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a3dbc:	b508      	push	{r3, lr}
 80a3dbe:	4b02      	ldr	r3, [pc, #8]	; (80a3dc8 <network_listening+0xc>)
 80a3dc0:	681b      	ldr	r3, [r3, #0]
 80a3dc2:	6a1b      	ldr	r3, [r3, #32]
 80a3dc4:	9301      	str	r3, [sp, #4]
 80a3dc6:	bd08      	pop	{r3, pc}
 80a3dc8:	080601c8 	.word	0x080601c8

080a3dcc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a3dcc:	b508      	push	{r3, lr}
 80a3dce:	4b02      	ldr	r3, [pc, #8]	; (80a3dd8 <network_set_listen_timeout+0xc>)
 80a3dd0:	681b      	ldr	r3, [r3, #0]
 80a3dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3dd4:	9301      	str	r3, [sp, #4]
 80a3dd6:	bd08      	pop	{r3, pc}
 80a3dd8:	080601c8 	.word	0x080601c8

080a3ddc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a3ddc:	b508      	push	{r3, lr}
 80a3dde:	4b02      	ldr	r3, [pc, #8]	; (80a3de8 <network_get_listen_timeout+0xc>)
 80a3de0:	681b      	ldr	r3, [r3, #0]
 80a3de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3de4:	9301      	str	r3, [sp, #4]
 80a3de6:	bd08      	pop	{r3, pc}
 80a3de8:	080601c8 	.word	0x080601c8

080a3dec <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a3dec:	b508      	push	{r3, lr}
 80a3dee:	4b02      	ldr	r3, [pc, #8]	; (80a3df8 <malloc+0xc>)
 80a3df0:	681b      	ldr	r3, [r3, #0]
 80a3df2:	681b      	ldr	r3, [r3, #0]
 80a3df4:	9301      	str	r3, [sp, #4]
 80a3df6:	bd08      	pop	{r3, pc}
 80a3df8:	080601a0 	.word	0x080601a0

080a3dfc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a3dfc:	b508      	push	{r3, lr}
 80a3dfe:	4b02      	ldr	r3, [pc, #8]	; (80a3e08 <free+0xc>)
 80a3e00:	681b      	ldr	r3, [r3, #0]
 80a3e02:	685b      	ldr	r3, [r3, #4]
 80a3e04:	9301      	str	r3, [sp, #4]
 80a3e06:	bd08      	pop	{r3, pc}
 80a3e08:	080601a0 	.word	0x080601a0

080a3e0c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a3e0c:	b508      	push	{r3, lr}
 80a3e0e:	4b02      	ldr	r3, [pc, #8]	; (80a3e18 <realloc+0xc>)
 80a3e10:	681b      	ldr	r3, [r3, #0]
 80a3e12:	689b      	ldr	r3, [r3, #8]
 80a3e14:	9301      	str	r3, [sp, #4]
 80a3e16:	bd08      	pop	{r3, pc}
 80a3e18:	080601a0 	.word	0x080601a0

080a3e1c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a3e1c:	b508      	push	{r3, lr}
 80a3e1e:	4b02      	ldr	r3, [pc, #8]	; (80a3e28 <vsnprintf+0xc>)
 80a3e20:	681b      	ldr	r3, [r3, #0]
 80a3e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3e24:	9301      	str	r3, [sp, #4]
 80a3e26:	bd08      	pop	{r3, pc}
 80a3e28:	080601a0 	.word	0x080601a0

080a3e2c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a3e2c:	b508      	push	{r3, lr}
 80a3e2e:	4b02      	ldr	r3, [pc, #8]	; (80a3e38 <abort+0xc>)
 80a3e30:	681b      	ldr	r3, [r3, #0]
 80a3e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3e34:	9301      	str	r3, [sp, #4]
 80a3e36:	bd08      	pop	{r3, pc}
 80a3e38:	080601a0 	.word	0x080601a0

080a3e3c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a3e3c:	b508      	push	{r3, lr}
 80a3e3e:	4b02      	ldr	r3, [pc, #8]	; (80a3e48 <_malloc_r+0xc>)
 80a3e40:	681b      	ldr	r3, [r3, #0]
 80a3e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3e44:	9301      	str	r3, [sp, #4]
 80a3e46:	bd08      	pop	{r3, pc}
 80a3e48:	080601a0 	.word	0x080601a0

080a3e4c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a3e4c:	b508      	push	{r3, lr}
 80a3e4e:	4b02      	ldr	r3, [pc, #8]	; (80a3e58 <__errno+0xc>)
 80a3e50:	681b      	ldr	r3, [r3, #0]
 80a3e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a3e54:	9301      	str	r3, [sp, #4]
 80a3e56:	bd08      	pop	{r3, pc}
 80a3e58:	080601a0 	.word	0x080601a0

080a3e5c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a3e5c:	b508      	push	{r3, lr}
 80a3e5e:	4b02      	ldr	r3, [pc, #8]	; (80a3e68 <newlib_impure_ptr_callback+0xc>)
 80a3e60:	681b      	ldr	r3, [r3, #0]
 80a3e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3e64:	9301      	str	r3, [sp, #4]
 80a3e66:	bd08      	pop	{r3, pc}
 80a3e68:	080601a0 	.word	0x080601a0

080a3e6c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a3e6c:	2100      	movs	r1, #0
 80a3e6e:	f7ff bf01 	b.w	80a3c74 <system_delay_ms>

080a3e72 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a3e72:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3e74:	6883      	ldr	r3, [r0, #8]
 80a3e76:	4604      	mov	r4, r0
 80a3e78:	b90b      	cbnz	r3, 80a3e7e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a3e7a:	f001 fbc6 	bl	80a560a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3e7e:	68c3      	ldr	r3, [r0, #12]
 80a3e80:	4798      	blx	r3
      if (_M_manager)
 80a3e82:	68a3      	ldr	r3, [r4, #8]
 80a3e84:	b11b      	cbz	r3, 80a3e8e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a3e86:	2203      	movs	r2, #3
 80a3e88:	4621      	mov	r1, r4
 80a3e8a:	4620      	mov	r0, r4
 80a3e8c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a3e8e:	4620      	mov	r0, r4
}
 80a3e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a3e94:	2110      	movs	r1, #16
 80a3e96:	f001 bbb4 	b.w	80a5602 <_ZdlPvj>

080a3e9a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a3e9a:	4770      	bx	lr

080a3e9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a3e9c:	2000      	movs	r0, #0
 80a3e9e:	4770      	bx	lr

080a3ea0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a3ea0:	b510      	push	{r4, lr}
 80a3ea2:	4604      	mov	r4, r0
 80a3ea4:	2110      	movs	r1, #16
 80a3ea6:	f001 fbac 	bl	80a5602 <_ZdlPvj>
 80a3eaa:	4620      	mov	r0, r4
 80a3eac:	bd10      	pop	{r4, pc}

080a3eae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a3eae:	b508      	push	{r3, lr}
      { delete this; }
 80a3eb0:	f7ff fff6 	bl	80a3ea0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a3eb4:	bd08      	pop	{r3, pc}

080a3eb6 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a3eb6:	b510      	push	{r4, lr}
      if (_M_manager)
 80a3eb8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a3eba:	4604      	mov	r4, r0
      if (_M_manager)
 80a3ebc:	b113      	cbz	r3, 80a3ec4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a3ebe:	2203      	movs	r2, #3
 80a3ec0:	4601      	mov	r1, r0
 80a3ec2:	4798      	blx	r3
    }
 80a3ec4:	4620      	mov	r0, r4
 80a3ec6:	bd10      	pop	{r4, pc}

080a3ec8 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a3ec8:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a3eca:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a3ecc:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a3ed0:	6002      	str	r2, [r0, #0]
 80a3ed2:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a3ed4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3ed6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a3ed8:	680c      	ldr	r4, [r1, #0]
 80a3eda:	8085      	strh	r5, [r0, #4]
 80a3edc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3ede:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a3ee0:	bd30      	pop	{r4, r5, pc}

080a3ee2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a3ee2:	b510      	push	{r4, lr}
 80a3ee4:	4604      	mov	r4, r0
    free((void*)msg_);
 80a3ee6:	6800      	ldr	r0, [r0, #0]
 80a3ee8:	f7ff ff88 	bl	80a3dfc <free>
}
 80a3eec:	4620      	mov	r0, r4
 80a3eee:	bd10      	pop	{r4, pc}

080a3ef0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a3ef0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a3ef2:	68c4      	ldr	r4, [r0, #12]
 80a3ef4:	b1f4      	cbz	r4, 80a3f34 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a3ef6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a3ef8:	2b02      	cmp	r3, #2
 80a3efa:	d103      	bne.n	80a3f04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a3efc:	f104 000c 	add.w	r0, r4, #12
 80a3f00:	f7ff ffef 	bl	80a3ee2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a3f04:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a3f06:	b135      	cbz	r5, 80a3f16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a3f08:	4628      	mov	r0, r5
 80a3f0a:	f7ff ffd4 	bl	80a3eb6 <_ZNSt14_Function_baseD1Ev>
 80a3f0e:	2110      	movs	r1, #16
 80a3f10:	4628      	mov	r0, r5
 80a3f12:	f001 fb76 	bl	80a5602 <_ZdlPvj>
 80a3f16:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a3f18:	b135      	cbz	r5, 80a3f28 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a3f1a:	4628      	mov	r0, r5
 80a3f1c:	f7ff ffcb 	bl	80a3eb6 <_ZNSt14_Function_baseD1Ev>
 80a3f20:	2110      	movs	r1, #16
 80a3f22:	4628      	mov	r0, r5
 80a3f24:	f001 fb6d 	bl	80a5602 <_ZdlPvj>
 80a3f28:	4620      	mov	r0, r4
 80a3f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a3f2e:	2114      	movs	r1, #20
 80a3f30:	f001 bb67 	b.w	80a5602 <_ZdlPvj>
 80a3f34:	bd38      	pop	{r3, r4, r5, pc}

080a3f36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a3f36:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a3f38:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a3f3a:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a3f3c:	b17c      	cbz	r4, 80a3f5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a3f3e:	6863      	ldr	r3, [r4, #4]
 80a3f40:	3b01      	subs	r3, #1
 80a3f42:	6063      	str	r3, [r4, #4]
 80a3f44:	b95b      	cbnz	r3, 80a3f5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a3f46:	6823      	ldr	r3, [r4, #0]
 80a3f48:	4620      	mov	r0, r4
 80a3f4a:	689b      	ldr	r3, [r3, #8]
 80a3f4c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a3f4e:	68a3      	ldr	r3, [r4, #8]
 80a3f50:	3b01      	subs	r3, #1
 80a3f52:	60a3      	str	r3, [r4, #8]
 80a3f54:	b91b      	cbnz	r3, 80a3f5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a3f56:	6823      	ldr	r3, [r4, #0]
 80a3f58:	4620      	mov	r0, r4
 80a3f5a:	68db      	ldr	r3, [r3, #12]
 80a3f5c:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a3f5e:	4628      	mov	r0, r5
 80a3f60:	bd38      	pop	{r3, r4, r5, pc}

080a3f62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a3f62:	680b      	ldr	r3, [r1, #0]
 80a3f64:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a3f66:	b113      	cbz	r3, 80a3f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a3f68:	685a      	ldr	r2, [r3, #4]
 80a3f6a:	3201      	adds	r2, #1
 80a3f6c:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 80a3f6e:	4770      	bx	lr

080a3f70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a3f70:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a3f72:	460e      	mov	r6, r1
 80a3f74:	4604      	mov	r4, r0
 80a3f76:	f856 3b04 	ldr.w	r3, [r6], #4
 80a3f7a:	460d      	mov	r5, r1
 80a3f7c:	a801      	add	r0, sp, #4
 80a3f7e:	4631      	mov	r1, r6
 80a3f80:	9300      	str	r3, [sp, #0]
 80a3f82:	f7ff ffee 	bl	80a3f62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3f86:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a3f88:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3f8a:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a3f8c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a3f8e:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a3f90:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a3f92:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a3f94:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a3f96:	f7ff ffce 	bl	80a3f36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3f9a:	4630      	mov	r0, r6
 80a3f9c:	f7ff ffcb 	bl	80a3f36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a3fa0:	4628      	mov	r0, r5
 80a3fa2:	2108      	movs	r1, #8
 80a3fa4:	f001 fb2d 	bl	80a5602 <_ZdlPvj>
        return p;
    }
 80a3fa8:	4620      	mov	r0, r4
 80a3faa:	b002      	add	sp, #8
 80a3fac:	bd70      	pop	{r4, r5, r6, pc}

080a3fae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a3fae:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3fb0:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a3fb2:	460b      	mov	r3, r1
 80a3fb4:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3fb6:	c803      	ldmia	r0, {r0, r1}
 80a3fb8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a3fbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a3fc0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a3fc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a3fc8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a3fcc:	b002      	add	sp, #8
 80a3fce:	bd10      	pop	{r4, pc}

080a3fd0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a3fd0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a3fd2:	b510      	push	{r4, lr}
      if (_M_empty())
 80a3fd4:	b90a      	cbnz	r2, 80a3fda <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a3fd6:	f001 fb18 	bl	80a560a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3fda:	68c3      	ldr	r3, [r0, #12]
    }
 80a3fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3fe0:	4718      	bx	r3

080a3fe2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a3fe2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a3fe4:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a3fe6:	f100 0110 	add.w	r1, r0, #16
 80a3fea:	f7ff fff1 	bl	80a3fd0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a3fee:	bd08      	pop	{r3, pc}

080a3ff0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a3ff0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a3ff2:	b510      	push	{r4, lr}
      if (_M_empty())
 80a3ff4:	b90a      	cbnz	r2, 80a3ffa <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a3ff6:	f001 fb08 	bl	80a560a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3ffa:	68c3      	ldr	r3, [r0, #12]
    }
 80a3ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4000:	4718      	bx	r3

080a4002 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a4002:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a4004:	6800      	ldr	r0, [r0, #0]
 80a4006:	f100 0110 	add.w	r1, r0, #16
 80a400a:	f7ff fff1 	bl	80a3ff0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a400e:	bd08      	pop	{r3, pc}

080a4010 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a4010:	b538      	push	{r3, r4, r5, lr}
 80a4012:	2300      	movs	r3, #0
 80a4014:	4604      	mov	r4, r0
 80a4016:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a4018:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a401a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a401c:	f7fc f83d 	bl	80a009a <_Znwj>
 80a4020:	b128      	cbz	r0, 80a402e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a4022:	2301      	movs	r3, #1
 80a4024:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a4028:	4b02      	ldr	r3, [pc, #8]	; (80a4034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a402a:	60c5      	str	r5, [r0, #12]
 80a402c:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a402e:	6020      	str	r0, [r4, #0]
	}
 80a4030:	4620      	mov	r0, r4
 80a4032:	bd38      	pop	{r3, r4, r5, pc}
 80a4034:	080aa218 	.word	0x080aa218

080a4038 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a4038:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a403a:	2300      	movs	r3, #0
 80a403c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a403e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a4040:	4604      	mov	r4, r0
 80a4042:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a4044:	b12b      	cbz	r3, 80a4052 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a4046:	2202      	movs	r2, #2
 80a4048:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a404a:	68eb      	ldr	r3, [r5, #12]
 80a404c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a404e:	68ab      	ldr	r3, [r5, #8]
 80a4050:	60a3      	str	r3, [r4, #8]
    }
 80a4052:	4620      	mov	r0, r4
 80a4054:	bd38      	pop	{r3, r4, r5, pc}
	...

080a4058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a4058:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a405a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a405c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a405e:	4668      	mov	r0, sp
 80a4060:	f7ff ff32 	bl	80a3ec8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a4064:	f04f 0302 	mov.w	r3, #2
 80a4068:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a406c:	2a00      	cmp	r2, #0
 80a406e:	d103      	bne.n	80a4078 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a4070:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a4074:	2900      	cmp	r1, #0
 80a4076:	d1f7      	bne.n	80a4068 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a4078:	d125      	bne.n	80a40c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a407a:	f104 050c 	add.w	r5, r4, #12
 80a407e:	4669      	mov	r1, sp
 80a4080:	4628      	mov	r0, r5
 80a4082:	f7ff ff21 	bl	80a3ec8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a4086:	2301      	movs	r3, #1
 80a4088:	f3bf 8f5b 	dmb	ish
 80a408c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a408e:	2000      	movs	r0, #0
 80a4090:	f3bf 8f5b 	dmb	ish
 80a4094:	f104 0308 	add.w	r3, r4, #8
 80a4098:	e853 6f00 	ldrex	r6, [r3]
 80a409c:	e843 0200 	strex	r2, r0, [r3]
 80a40a0:	2a00      	cmp	r2, #0
 80a40a2:	d1f9      	bne.n	80a4098 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a40a4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a40a8:	b16e      	cbz	r6, 80a40c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a40aa:	f7ff fdeb 	bl	80a3c84 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a40ae:	b178      	cbz	r0, 80a40d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a40b0:	4629      	mov	r1, r5
 80a40b2:	4630      	mov	r0, r6
 80a40b4:	f7ff ff8c 	bl	80a3fd0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a40b8:	4630      	mov	r0, r6
 80a40ba:	f7ff fefc 	bl	80a3eb6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a40be:	2110      	movs	r1, #16
 80a40c0:	4630      	mov	r0, r6
 80a40c2:	f001 fa9e 	bl	80a5602 <_ZdlPvj>
        p_->setError(std::move(error));
 80a40c6:	4668      	mov	r0, sp
 80a40c8:	f7ff ff0b 	bl	80a3ee2 <_ZN8particle5ErrorD1Ev>
    }
 80a40cc:	b009      	add	sp, #36	; 0x24
 80a40ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a40d0:	4631      	mov	r1, r6
 80a40d2:	a802      	add	r0, sp, #8
 80a40d4:	f7ff ffb0 	bl	80a4038 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a40d8:	68e0      	ldr	r0, [r4, #12]
 80a40da:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a40de:	b108      	cbz	r0, 80a40e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a40e0:	f005 ff04 	bl	80a9eec <strdup>
        type_(type) {
 80a40e4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a40e6:	2010      	movs	r0, #16
 80a40e8:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a40ec:	f7fb ffd5 	bl	80a009a <_Znwj>
 80a40f0:	4605      	mov	r5, r0
 80a40f2:	b1e8      	cbz	r0, 80a4130 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a40f4:	2700      	movs	r7, #0
 80a40f6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a40f8:	2018      	movs	r0, #24
 80a40fa:	f7fb ffce 	bl	80a009a <_Znwj>
 80a40fe:	4604      	mov	r4, r0
 80a4100:	b188      	cbz	r0, 80a4126 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a4102:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a4104:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a4106:	a802      	add	r0, sp, #8
 80a4108:	f7ff ff51 	bl	80a3fae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a410c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a410e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4110:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4112:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a4114:	9204      	str	r2, [sp, #16]
 80a4116:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a4118:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a411a:	60e3      	str	r3, [r4, #12]
 80a411c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a4120:	9205      	str	r2, [sp, #20]
 80a4122:	f7ff fed1 	bl	80a3ec8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a4126:	4b08      	ldr	r3, [pc, #32]	; (80a4148 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4128:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a412a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a412c:	4b07      	ldr	r3, [pc, #28]	; (80a414c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a412e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a4130:	a806      	add	r0, sp, #24
 80a4132:	f7ff fed6 	bl	80a3ee2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a4136:	a802      	add	r0, sp, #8
 80a4138:	f7ff febd 	bl	80a3eb6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a413c:	2200      	movs	r2, #0
 80a413e:	4629      	mov	r1, r5
 80a4140:	4803      	ldr	r0, [pc, #12]	; (80a4150 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a4142:	f7ff fda7 	bl	80a3c94 <application_thread_invoke>
 80a4146:	e7b7      	b.n	80a40b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a4148:	080a3fe3 	.word	0x080a3fe3
 80a414c:	080a4279 	.word	0x080a4279
 80a4150:	080a3e73 	.word	0x080a3e73

080a4154 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a4154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4158:	b08a      	sub	sp, #40	; 0x28
 80a415a:	4605      	mov	r5, r0
 80a415c:	460c      	mov	r4, r1
 80a415e:	4617      	mov	r7, r2
 80a4160:	4698      	mov	r8, r3
 80a4162:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a4166:	f7ff fdc9 	bl	80a3cfc <spark_cloud_flag_connected>
 80a416a:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a416c:	4682      	mov	sl, r0
 80a416e:	bb38      	cbnz	r0, 80a41c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a4170:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a4174:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a4176:	a905      	add	r1, sp, #20
 80a4178:	4630      	mov	r0, r6
 80a417a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a417e:	f7ff fea3 	bl	80a3ec8 <_ZN8particle5ErrorC1EOS0_>
 80a4182:	2014      	movs	r0, #20
 80a4184:	f7fb ff89 	bl	80a009a <_Znwj>
 80a4188:	4604      	mov	r4, r0
 80a418a:	b148      	cbz	r0, 80a41a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a418c:	2302      	movs	r3, #2
 80a418e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a4190:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a4192:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a4196:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a4198:	4631      	mov	r1, r6
 80a419a:	300c      	adds	r0, #12
 80a419c:	f7ff fe94 	bl	80a3ec8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a41a0:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a41a2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a41a4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a41a8:	f7ff ff32 	bl	80a4010 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a41ac:	4630      	mov	r0, r6
 80a41ae:	f7ff fe98 	bl	80a3ee2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a41b2:	a805      	add	r0, sp, #20
 80a41b4:	f7ff fe95 	bl	80a3ee2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a41b8:	4628      	mov	r0, r5
 80a41ba:	b00a      	add	sp, #40	; 0x28
 80a41bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a41c0:	230c      	movs	r3, #12
 80a41c2:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a41c6:	2014      	movs	r0, #20
 80a41c8:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a41cc:	9307      	str	r3, [sp, #28]
 80a41ce:	f7fb ff64 	bl	80a009a <_Znwj>
 80a41d2:	4601      	mov	r1, r0
 80a41d4:	b128      	cbz	r0, 80a41e2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a41d6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a41da:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a41de:	f880 a001 	strb.w	sl, [r0, #1]
 80a41e2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a41e4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a41e6:	f7ff ff13 	bl	80a4010 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a41ea:	4b22      	ldr	r3, [pc, #136]	; (80a4274 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a41ec:	2008      	movs	r0, #8
 80a41ee:	9308      	str	r3, [sp, #32]
 80a41f0:	f7fb ff53 	bl	80a009a <_Znwj>
 80a41f4:	4682      	mov	sl, r0
 80a41f6:	b128      	cbz	r0, 80a4204 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a41f8:	9b03      	ldr	r3, [sp, #12]
 80a41fa:	a904      	add	r1, sp, #16
 80a41fc:	f840 3b04 	str.w	r3, [r0], #4
 80a4200:	f7ff feaf 	bl	80a3f62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a4204:	4642      	mov	r2, r8
 80a4206:	4639      	mov	r1, r7
 80a4208:	4620      	mov	r0, r4
 80a420a:	9600      	str	r6, [sp, #0]
 80a420c:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a4210:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a4214:	f7ff fd7a 	bl	80a3d0c <spark_send_event>
 80a4218:	b9b8      	cbnz	r0, 80a424a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a421a:	9b03      	ldr	r3, [sp, #12]
 80a421c:	785b      	ldrb	r3, [r3, #1]
 80a421e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a4222:	b993      	cbnz	r3, 80a424a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a4224:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a4228:	a905      	add	r1, sp, #20
 80a422a:	a803      	add	r0, sp, #12
 80a422c:	9205      	str	r2, [sp, #20]
 80a422e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a4232:	f7ff ff11 	bl	80a4058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a4236:	a805      	add	r0, sp, #20
 80a4238:	f7ff fe53 	bl	80a3ee2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a423c:	a805      	add	r0, sp, #20
 80a423e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a4240:	f7ff fe96 	bl	80a3f70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a4244:	a806      	add	r0, sp, #24
 80a4246:	f7ff fe76 	bl	80a3f36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a424a:	9b03      	ldr	r3, [sp, #12]
 80a424c:	a904      	add	r1, sp, #16
 80a424e:	a806      	add	r0, sp, #24
 80a4250:	9305      	str	r3, [sp, #20]
 80a4252:	f7ff fe86 	bl	80a3f62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a4256:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a4258:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a425a:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a425c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a425e:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a4260:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a4262:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a4264:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a4266:	f7ff fe66 	bl	80a3f36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a426a:	a804      	add	r0, sp, #16
 80a426c:	f7ff fe63 	bl	80a3f36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a4270:	e7a2      	b.n	80a41b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a4272:	bf00      	nop
 80a4274:	080a433d 	.word	0x080a433d

080a4278 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a4278:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a427a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a427c:	4605      	mov	r5, r0
	  switch (__op)
 80a427e:	d007      	beq.n	80a4290 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a4280:	2a03      	cmp	r2, #3
 80a4282:	d018      	beq.n	80a42b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a4284:	2a01      	cmp	r2, #1
 80a4286:	d101      	bne.n	80a428c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a4288:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a428a:	6003      	str	r3, [r0, #0]
	}
 80a428c:	2000      	movs	r0, #0
 80a428e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a4290:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a4292:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a4294:	f7fb ff01 	bl	80a009a <_Znwj>
 80a4298:	4604      	mov	r4, r0
 80a429a:	b150      	cbz	r0, 80a42b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a429c:	4631      	mov	r1, r6
 80a429e:	f7ff fecb 	bl	80a4038 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a42a2:	6930      	ldr	r0, [r6, #16]
 80a42a4:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a42a8:	b108      	cbz	r0, 80a42ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a42aa:	f005 fe1f 	bl	80a9eec <strdup>
        type_(type) {
 80a42ae:	6120      	str	r0, [r4, #16]
 80a42b0:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a42b2:	602c      	str	r4, [r5, #0]
	}
 80a42b4:	e7ea      	b.n	80a428c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a42b6:	6804      	ldr	r4, [r0, #0]
 80a42b8:	2c00      	cmp	r4, #0
 80a42ba:	d0e7      	beq.n	80a428c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a42bc:	f104 0010 	add.w	r0, r4, #16
 80a42c0:	f7ff fe0f 	bl	80a3ee2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a42c4:	4620      	mov	r0, r4
 80a42c6:	f7ff fdf6 	bl	80a3eb6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a42ca:	2118      	movs	r1, #24
 80a42cc:	4620      	mov	r0, r4
 80a42ce:	f001 f998 	bl	80a5602 <_ZdlPvj>
 80a42d2:	e7db      	b.n	80a428c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a42d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a42d4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a42d6:	2300      	movs	r3, #0
 80a42d8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a42da:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a42dc:	4604      	mov	r4, r0
 80a42de:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a42e0:	b12b      	cbz	r3, 80a42ee <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a42e2:	2202      	movs	r2, #2
 80a42e4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a42e6:	68eb      	ldr	r3, [r5, #12]
 80a42e8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a42ea:	68ab      	ldr	r3, [r5, #8]
 80a42ec:	60a3      	str	r3, [r4, #8]
    }
 80a42ee:	4620      	mov	r0, r4
 80a42f0:	bd38      	pop	{r3, r4, r5, pc}

080a42f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a42f2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a42f4:	b570      	push	{r4, r5, r6, lr}
 80a42f6:	4604      	mov	r4, r0
	  switch (__op)
 80a42f8:	d007      	beq.n	80a430a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a42fa:	2a03      	cmp	r2, #3
 80a42fc:	d012      	beq.n	80a4324 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a42fe:	2a01      	cmp	r2, #1
 80a4300:	d101      	bne.n	80a4306 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a4302:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a4304:	6003      	str	r3, [r0, #0]
	}
 80a4306:	2000      	movs	r0, #0
 80a4308:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a430a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a430c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a430e:	f7fb fec4 	bl	80a009a <_Znwj>
 80a4312:	4605      	mov	r5, r0
 80a4314:	b120      	cbz	r0, 80a4320 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a4316:	4631      	mov	r1, r6
 80a4318:	f7ff ffdc 	bl	80a42d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a431c:	7c33      	ldrb	r3, [r6, #16]
 80a431e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a4320:	6025      	str	r5, [r4, #0]
	}
 80a4322:	e7f0      	b.n	80a4306 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a4324:	6804      	ldr	r4, [r0, #0]
 80a4326:	2c00      	cmp	r4, #0
 80a4328:	d0ed      	beq.n	80a4306 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a432a:	4620      	mov	r0, r4
 80a432c:	f7ff fdc3 	bl	80a3eb6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a4330:	2114      	movs	r1, #20
 80a4332:	4620      	mov	r0, r4
 80a4334:	f001 f965 	bl	80a5602 <_ZdlPvj>
 80a4338:	e7e5      	b.n	80a4306 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a433c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a433c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a433e:	4604      	mov	r4, r0
 80a4340:	b089      	sub	sp, #36	; 0x24
 80a4342:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a4344:	a801      	add	r0, sp, #4
 80a4346:	4611      	mov	r1, r2
 80a4348:	f7ff fe12 	bl	80a3f70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a434c:	b1a4      	cbz	r4, 80a4378 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a434e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a4350:	b11d      	cbz	r5, 80a435a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a4352:	4628      	mov	r0, r5
 80a4354:	f005 fdca 	bl	80a9eec <strdup>
 80a4358:	4605      	mov	r5, r0
 80a435a:	a801      	add	r0, sp, #4
 80a435c:	a903      	add	r1, sp, #12
        type_(type) {
 80a435e:	9503      	str	r5, [sp, #12]
 80a4360:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a4364:	f7ff fe78 	bl	80a4058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a4368:	a803      	add	r0, sp, #12
 80a436a:	f7ff fdba 	bl	80a3ee2 <_ZN8particle5ErrorD1Ev>
 80a436e:	a802      	add	r0, sp, #8
 80a4370:	f7ff fde1 	bl	80a3f36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a4374:	b009      	add	sp, #36	; 0x24
 80a4376:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a4378:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a437a:	9d01      	ldr	r5, [sp, #4]
 80a437c:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a4380:	2a00      	cmp	r2, #0
 80a4382:	d103      	bne.n	80a438c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a4384:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a4388:	2900      	cmp	r1, #0
 80a438a:	d1f7      	bne.n	80a437c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a438c:	d1ef      	bne.n	80a436e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a438e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a4390:	f3bf 8f5b 	dmb	ish
 80a4394:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a4396:	f3bf 8f5b 	dmb	ish
 80a439a:	1d2b      	adds	r3, r5, #4
 80a439c:	e853 6f00 	ldrex	r6, [r3]
 80a43a0:	e843 4200 	strex	r2, r4, [r3]
 80a43a4:	2a00      	cmp	r2, #0
 80a43a6:	d1f9      	bne.n	80a439c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a43a8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a43ac:	2e00      	cmp	r6, #0
 80a43ae:	d0de      	beq.n	80a436e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a43b0:	4620      	mov	r0, r4
 80a43b2:	f7ff fc67 	bl	80a3c84 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a43b6:	4607      	mov	r7, r0
 80a43b8:	b160      	cbz	r0, 80a43d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a43ba:	4630      	mov	r0, r6
 80a43bc:	f105 010c 	add.w	r1, r5, #12
 80a43c0:	f7ff fe16 	bl	80a3ff0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a43c4:	4630      	mov	r0, r6
 80a43c6:	f7ff fd76 	bl	80a3eb6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a43ca:	2110      	movs	r1, #16
 80a43cc:	4630      	mov	r0, r6
 80a43ce:	f001 f918 	bl	80a5602 <_ZdlPvj>
 80a43d2:	e7cc      	b.n	80a436e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a43d4:	4631      	mov	r1, r6
 80a43d6:	a803      	add	r0, sp, #12
 80a43d8:	f7ff ff7c 	bl	80a42d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a43dc:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a43de:	2010      	movs	r0, #16
 80a43e0:	f88d 301c 	strb.w	r3, [sp, #28]
 80a43e4:	f7fb fe59 	bl	80a009a <_Znwj>
 80a43e8:	4605      	mov	r5, r0
 80a43ea:	b1d0      	cbz	r0, 80a4422 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a43ec:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a43ee:	2014      	movs	r0, #20
 80a43f0:	f7fb fe53 	bl	80a009a <_Znwj>
 80a43f4:	4604      	mov	r4, r0
 80a43f6:	b178      	cbz	r0, 80a4418 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a43f8:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a43fa:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a43fc:	a803      	add	r0, sp, #12
 80a43fe:	f7ff fdd6 	bl	80a3fae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4402:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a4404:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4406:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4408:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a440a:	9205      	str	r2, [sp, #20]
 80a440c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a440e:	60e3      	str	r3, [r4, #12]
 80a4410:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a4414:	9206      	str	r2, [sp, #24]
 80a4416:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a4418:	4b06      	ldr	r3, [pc, #24]	; (80a4434 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a441a:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a441c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a441e:	4b06      	ldr	r3, [pc, #24]	; (80a4438 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a4420:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a4422:	a803      	add	r0, sp, #12
 80a4424:	f7ff fd47 	bl	80a3eb6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a4428:	2200      	movs	r2, #0
 80a442a:	4629      	mov	r1, r5
 80a442c:	4803      	ldr	r0, [pc, #12]	; (80a443c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a442e:	f7ff fc31 	bl	80a3c94 <application_thread_invoke>
 80a4432:	e7c7      	b.n	80a43c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a4434:	080a4003 	.word	0x080a4003
 80a4438:	080a42f3 	.word	0x080a42f3
 80a443c:	080a3e73 	.word	0x080a3e73

080a4440 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a4440:	4770      	bx	lr

080a4442 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a4442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4444:	4606      	mov	r6, r0
 80a4446:	4615      	mov	r5, r2
 80a4448:	460c      	mov	r4, r1
 80a444a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a444c:	42bc      	cmp	r4, r7
 80a444e:	d006      	beq.n	80a445e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a4450:	6833      	ldr	r3, [r6, #0]
 80a4452:	4630      	mov	r0, r6
 80a4454:	689b      	ldr	r3, [r3, #8]
 80a4456:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a445a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a445c:	e7f6      	b.n	80a444c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a445e:	4628      	mov	r0, r5
 80a4460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4462 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a4462:	2200      	movs	r2, #0
 80a4464:	7c00      	ldrb	r0, [r0, #16]
 80a4466:	f7ff bb03 	b.w	80a3a70 <hal_i2c_write>

080a446a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a446a:	2100      	movs	r1, #0
 80a446c:	7c00      	ldrb	r0, [r0, #16]
 80a446e:	f7ff bb07 	b.w	80a3a80 <hal_i2c_available>

080a4472 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a4472:	2100      	movs	r1, #0
 80a4474:	7c00      	ldrb	r0, [r0, #16]
 80a4476:	f7ff bb0b 	b.w	80a3a90 <hal_i2c_read>

080a447a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a447a:	2100      	movs	r1, #0
 80a447c:	7c00      	ldrb	r0, [r0, #16]
 80a447e:	f7ff bb0f 	b.w	80a3aa0 <hal_i2c_peek>

080a4482 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a4482:	2100      	movs	r1, #0
 80a4484:	7c00      	ldrb	r0, [r0, #16]
 80a4486:	f7ff bb13 	b.w	80a3ab0 <hal_i2c_flush>

080a448a <_ZN7TwoWireD0Ev>:
 80a448a:	b510      	push	{r4, lr}
 80a448c:	4604      	mov	r4, r0
 80a448e:	2114      	movs	r1, #20
 80a4490:	f001 f8b7 	bl	80a5602 <_ZdlPvj>
 80a4494:	4620      	mov	r0, r4
 80a4496:	bd10      	pop	{r4, pc}

080a4498 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a4498:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a449a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a449e:	4604      	mov	r4, r0
 80a44a0:	4608      	mov	r0, r1
 80a44a2:	2100      	movs	r1, #0
 80a44a4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a44a8:	4b03      	ldr	r3, [pc, #12]	; (80a44b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a44aa:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a44ac:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a44ae:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a44b0:	f7ff fb0e 	bl	80a3ad0 <hal_i2c_init>
}
 80a44b4:	4620      	mov	r0, r4
 80a44b6:	bd10      	pop	{r4, pc}
 80a44b8:	080aa234 	.word	0x080aa234

080a44bc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a44bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a44be:	460e      	mov	r6, r1
 80a44c0:	2400      	movs	r4, #0
 80a44c2:	f100 0708 	add.w	r7, r0, #8
 80a44c6:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a44c8:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a44cc:	220a      	movs	r2, #10
 80a44ce:	4630      	mov	r0, r6
 80a44d0:	f000 f8fd 	bl	80a46ce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a44d4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a44d6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a44d8:	d101      	bne.n	80a44de <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a44da:	4620      	mov	r0, r4
 80a44dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a44de:	2c00      	cmp	r4, #0
 80a44e0:	d0f2      	beq.n	80a44c8 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a44e2:	212e      	movs	r1, #46	; 0x2e
 80a44e4:	4630      	mov	r0, r6
 80a44e6:	f000 f8ef 	bl	80a46c8 <_ZN5Print5printEc>
 80a44ea:	4404      	add	r4, r0
 80a44ec:	e7ec      	b.n	80a44c8 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a44f0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a44f0:	b510      	push	{r4, lr}
 80a44f2:	4604      	mov	r4, r0
 80a44f4:	4b04      	ldr	r3, [pc, #16]	; (80a4508 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a44f6:	2211      	movs	r2, #17
 80a44f8:	2100      	movs	r1, #0
 80a44fa:	f840 3b04 	str.w	r3, [r0], #4
 80a44fe:	f005 fc8d 	bl	80a9e1c <memset>
}
 80a4502:	4620      	mov	r0, r4
 80a4504:	bd10      	pop	{r4, pc}
 80a4506:	bf00      	nop
 80a4508:	080aa25c 	.word	0x080aa25c

080a450c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a450c:	4603      	mov	r3, r0
 80a450e:	4a07      	ldr	r2, [pc, #28]	; (80a452c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a4510:	b510      	push	{r4, lr}
 80a4512:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a4516:	f101 0210 	add.w	r2, r1, #16
 80a451a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a451e:	4291      	cmp	r1, r2
 80a4520:	f843 4b04 	str.w	r4, [r3], #4
 80a4524:	d1f9      	bne.n	80a451a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a4526:	780a      	ldrb	r2, [r1, #0]
 80a4528:	701a      	strb	r2, [r3, #0]
}
 80a452a:	bd10      	pop	{r4, pc}
 80a452c:	080aa25c 	.word	0x080aa25c

080a4530 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a4530:	4a02      	ldr	r2, [pc, #8]	; (80a453c <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a4532:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a4536:	2204      	movs	r2, #4
 80a4538:	7502      	strb	r2, [r0, #20]
}
 80a453a:	4770      	bx	lr
 80a453c:	080aa25c 	.word	0x080aa25c

080a4540 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a4540:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a4542:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a4546:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a454a:	2304      	movs	r3, #4
 80a454c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a4550:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a4554:	6044      	str	r4, [r0, #4]
 80a4556:	7503      	strb	r3, [r0, #20]
}
 80a4558:	bd10      	pop	{r4, pc}
	...

080a455c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a455c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a455e:	4d04      	ldr	r5, [pc, #16]	; (80a4570 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a4560:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a4562:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a4566:	9500      	str	r5, [sp, #0]
 80a4568:	f7ff ffea 	bl	80a4540 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a456c:	b003      	add	sp, #12
 80a456e:	bd30      	pop	{r4, r5, pc}
 80a4570:	080aa25c 	.word	0x080aa25c

080a4574 <_ZN9IPAddressaSEPKh>:
{
 80a4574:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a4576:	78cb      	ldrb	r3, [r1, #3]
 80a4578:	9300      	str	r3, [sp, #0]
 80a457a:	788b      	ldrb	r3, [r1, #2]
 80a457c:	784a      	ldrb	r2, [r1, #1]
 80a457e:	7809      	ldrb	r1, [r1, #0]
 80a4580:	f7ff ffde 	bl	80a4540 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4584:	b002      	add	sp, #8
 80a4586:	bd10      	pop	{r4, pc}

080a4588 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a4588:	4b01      	ldr	r3, [pc, #4]	; (80a4590 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a458a:	4a02      	ldr	r2, [pc, #8]	; (80a4594 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a458c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a458e:	4770      	bx	lr
 80a4590:	20000ea0 	.word	0x20000ea0
 80a4594:	080aa268 	.word	0x080aa268

080a4598 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a4598:	2300      	movs	r3, #0
 80a459a:	6840      	ldr	r0, [r0, #4]
 80a459c:	461a      	mov	r2, r3
 80a459e:	f7ff bbd5 	b.w	80a3d4c <network_connect>

080a45a2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a45a2:	2200      	movs	r2, #0
 80a45a4:	2102      	movs	r1, #2
 80a45a6:	6840      	ldr	r0, [r0, #4]
 80a45a8:	f7ff bbe0 	b.w	80a3d6c <network_disconnect>

080a45ac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a45ac:	2200      	movs	r2, #0
 80a45ae:	6840      	ldr	r0, [r0, #4]
 80a45b0:	4611      	mov	r1, r2
 80a45b2:	f7ff bbd3 	b.w	80a3d5c <network_connecting>

080a45b6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a45b6:	2200      	movs	r2, #0
 80a45b8:	6840      	ldr	r0, [r0, #4]
 80a45ba:	4611      	mov	r1, r2
 80a45bc:	f7ff bbde 	b.w	80a3d7c <network_ready>

080a45c0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a45c0:	2300      	movs	r3, #0
 80a45c2:	6840      	ldr	r0, [r0, #4]
 80a45c4:	461a      	mov	r2, r3
 80a45c6:	4619      	mov	r1, r3
 80a45c8:	f7ff bbe0 	b.w	80a3d8c <network_on>

080a45cc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a45cc:	2300      	movs	r3, #0
 80a45ce:	6840      	ldr	r0, [r0, #4]
 80a45d0:	461a      	mov	r2, r3
 80a45d2:	4619      	mov	r1, r3
 80a45d4:	f7ff bbe2 	b.w	80a3d9c <network_off>

080a45d8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a45d8:	2200      	movs	r2, #0
 80a45da:	6840      	ldr	r0, [r0, #4]
 80a45dc:	f081 0101 	eor.w	r1, r1, #1
 80a45e0:	f7ff bbe4 	b.w	80a3dac <network_listen>

080a45e4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a45e4:	2200      	movs	r2, #0
 80a45e6:	6840      	ldr	r0, [r0, #4]
 80a45e8:	f7ff bbf0 	b.w	80a3dcc <network_set_listen_timeout>

080a45ec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a45ec:	2200      	movs	r2, #0
 80a45ee:	6840      	ldr	r0, [r0, #4]
 80a45f0:	4611      	mov	r1, r2
 80a45f2:	f7ff bbf3 	b.w	80a3ddc <network_get_listen_timeout>

080a45f6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a45f6:	2200      	movs	r2, #0
 80a45f8:	6840      	ldr	r0, [r0, #4]
 80a45fa:	4611      	mov	r1, r2
 80a45fc:	f7ff bbde 	b.w	80a3dbc <network_listening>

080a4600 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a4600:	b570      	push	{r4, r5, r6, lr}
 80a4602:	4615      	mov	r5, r2
 80a4604:	b08e      	sub	sp, #56	; 0x38
 80a4606:	4604      	mov	r4, r0
    IPAddress addr;
 80a4608:	a808      	add	r0, sp, #32
 80a460a:	f7ff ff71 	bl	80a44f0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a460e:	2211      	movs	r2, #17
 80a4610:	2100      	movs	r1, #0
 80a4612:	a803      	add	r0, sp, #12
 80a4614:	f005 fc02 	bl	80a9e1c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a4618:	2600      	movs	r6, #0
 80a461a:	4628      	mov	r0, r5
 80a461c:	f005 fc81 	bl	80a9f22 <strlen>
 80a4620:	4b0a      	ldr	r3, [pc, #40]	; (80a464c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a4622:	9600      	str	r6, [sp, #0]
 80a4624:	b281      	uxth	r1, r0
 80a4626:	685b      	ldr	r3, [r3, #4]
 80a4628:	4628      	mov	r0, r5
 80a462a:	aa03      	add	r2, sp, #12
 80a462c:	f7ff fb0a 	bl	80a3c44 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4630:	b130      	cbz	r0, 80a4640 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a4632:	4631      	mov	r1, r6
 80a4634:	4620      	mov	r0, r4
 80a4636:	f7ff ff7b 	bl	80a4530 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a463a:	4620      	mov	r0, r4
 80a463c:	b00e      	add	sp, #56	; 0x38
 80a463e:	bd70      	pop	{r4, r5, r6, pc}
 80a4640:	4620      	mov	r0, r4
 80a4642:	a903      	add	r1, sp, #12
 80a4644:	f7ff ff62 	bl	80a450c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a4648:	e7f7      	b.n	80a463a <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a464a:	bf00      	nop
 80a464c:	20000f20 	.word	0x20000f20

080a4650 <_ZN5spark12NetworkClass4fromEm>:
}
 80a4650:	4a03      	ldr	r2, [pc, #12]	; (80a4660 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a4652:	4b04      	ldr	r3, [pc, #16]	; (80a4664 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a4654:	2804      	cmp	r0, #4
 80a4656:	bf14      	ite	ne
 80a4658:	4610      	movne	r0, r2
 80a465a:	4618      	moveq	r0, r3
 80a465c:	4770      	bx	lr
 80a465e:	bf00      	nop
 80a4660:	20000ea4 	.word	0x20000ea4
 80a4664:	20000f20 	.word	0x20000f20

080a4668 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a4668:	4b02      	ldr	r3, [pc, #8]	; (80a4674 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a466a:	4a03      	ldr	r2, [pc, #12]	; (80a4678 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a466c:	601a      	str	r2, [r3, #0]
 80a466e:	2200      	movs	r2, #0
 80a4670:	605a      	str	r2, [r3, #4]

} // spark
 80a4672:	4770      	bx	lr
 80a4674:	20000ea4 	.word	0x20000ea4
 80a4678:	080aa274 	.word	0x080aa274

080a467c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a467e:	4606      	mov	r6, r0
 80a4680:	460d      	mov	r5, r1
  size_t n = 0;
 80a4682:	2400      	movs	r4, #0
 80a4684:	188f      	adds	r7, r1, r2
  while (size--) {
 80a4686:	42bd      	cmp	r5, r7
 80a4688:	d00c      	beq.n	80a46a4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a468a:	6833      	ldr	r3, [r6, #0]
 80a468c:	4630      	mov	r0, r6
 80a468e:	689b      	ldr	r3, [r3, #8]
 80a4690:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a4694:	4798      	blx	r3
     if (chunk>=0)
 80a4696:	1e03      	subs	r3, r0, #0
 80a4698:	db01      	blt.n	80a469e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a469a:	441c      	add	r4, r3
  while (size--) {
 80a469c:	e7f3      	b.n	80a4686 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a469e:	2c00      	cmp	r4, #0
 80a46a0:	bf08      	it	eq
 80a46a2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a46a4:	4620      	mov	r0, r4
 80a46a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a46a8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a46a8:	b570      	push	{r4, r5, r6, lr}
 80a46aa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a46ac:	460c      	mov	r4, r1
    }
 80a46ae:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a46b0:	b149      	cbz	r1, 80a46c6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a46b2:	f005 fc36 	bl	80a9f22 <strlen>
 80a46b6:	682b      	ldr	r3, [r5, #0]
 80a46b8:	4602      	mov	r2, r0
 80a46ba:	4621      	mov	r1, r4
 80a46bc:	4628      	mov	r0, r5
    }
 80a46be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a46c2:	68db      	ldr	r3, [r3, #12]
 80a46c4:	4718      	bx	r3
    }
 80a46c6:	bd70      	pop	{r4, r5, r6, pc}

080a46c8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a46c8:	6803      	ldr	r3, [r0, #0]
 80a46ca:	689b      	ldr	r3, [r3, #8]
 80a46cc:	4718      	bx	r3

080a46ce <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a46ce:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a46d0:	2a01      	cmp	r2, #1
 80a46d2:	bf98      	it	ls
 80a46d4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a46d6:	b530      	push	{r4, r5, lr}
 80a46d8:	b08b      	sub	sp, #44	; 0x2c
 80a46da:	460c      	mov	r4, r1
  *str = '\0';
 80a46dc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a46e0:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a46e2:	4625      	mov	r5, r4
 80a46e4:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a46e8:	fb04 5312 	mls	r3, r4, r2, r5
 80a46ec:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a46ee:	2b09      	cmp	r3, #9
 80a46f0:	bf94      	ite	ls
 80a46f2:	3330      	addls	r3, #48	; 0x30
 80a46f4:	3337      	addhi	r3, #55	; 0x37
 80a46f6:	b2db      	uxtb	r3, r3
  } while(n);
 80a46f8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a46fa:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a46fe:	d9f0      	bls.n	80a46e2 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a4700:	f7ff ffd2 	bl	80a46a8 <_ZN5Print5writeEPKc>
}
 80a4704:	b00b      	add	sp, #44	; 0x2c
 80a4706:	bd30      	pop	{r4, r5, pc}

080a4708 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
 80a4708:	b510      	push	{r4, lr}
  if (0 == max) {
 80a470a:	4604      	mov	r4, r0
 80a470c:	b128      	cbz	r0, 80a471a <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
 80a470e:	f005 fbb1 	bl	80a9e74 <rand>
 80a4712:	fb90 f3f4 	sdiv	r3, r0, r4
 80a4716:	fb03 0414 	mls	r4, r3, r4, r0
}
 80a471a:	4620      	mov	r0, r4
 80a471c:	bd10      	pop	{r4, pc}

080a471e <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
 80a471e:	4288      	cmp	r0, r1
{
 80a4720:	b510      	push	{r4, lr}
 80a4722:	4604      	mov	r4, r0
  if (min >= max) {
 80a4724:	da03      	bge.n	80a472e <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
 80a4726:	1a08      	subs	r0, r1, r0
 80a4728:	f7ff ffee 	bl	80a4708 <_Z6randomi>
 80a472c:	4404      	add	r4, r0
}
 80a472e:	4620      	mov	r0, r4
 80a4730:	bd10      	pop	{r4, pc}

080a4732 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a4732:	b510      	push	{r4, lr}
 80a4734:	4604      	mov	r4, r0
 80a4736:	f7ff fbbe 	bl	80a3eb6 <_ZNSt14_Function_baseD1Ev>
 80a473a:	4620      	mov	r0, r4
 80a473c:	bd10      	pop	{r4, pc}
	...

080a4740 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a4740:	2300      	movs	r3, #0
 80a4742:	4803      	ldr	r0, [pc, #12]	; (80a4750 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a4744:	4a03      	ldr	r2, [pc, #12]	; (80a4754 <_GLOBAL__sub_I_RGB+0x14>)
 80a4746:	4904      	ldr	r1, [pc, #16]	; (80a4758 <_GLOBAL__sub_I_RGB+0x18>)
 80a4748:	6083      	str	r3, [r0, #8]
 80a474a:	f000 bf55 	b.w	80a55f8 <__aeabi_atexit>
 80a474e:	bf00      	nop
 80a4750:	20000eac 	.word	0x20000eac
 80a4754:	2000006c 	.word	0x2000006c
 80a4758:	080a4733 	.word	0x080a4733

080a475c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a475c:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a475e:	2600      	movs	r6, #0
 80a4760:	4604      	mov	r4, r0
 80a4762:	460d      	mov	r5, r1
 80a4764:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a4768:	f7ff f912 	bl	80a3990 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a476c:	4628      	mov	r0, r5
    _spi = spi;
 80a476e:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a4770:	f7ff f9e8 	bl	80a3b44 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a4774:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a4776:	6066      	str	r6, [r4, #4]
}
 80a4778:	bd70      	pop	{r4, r5, r6, pc}

080a477a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a477a:	b510      	push	{r4, lr}
 80a477c:	4604      	mov	r4, r0
{
	free(buffer);
 80a477e:	6800      	ldr	r0, [r0, #0]
 80a4780:	f7ff fb3c 	bl	80a3dfc <free>
}
 80a4784:	4620      	mov	r0, r4
 80a4786:	bd10      	pop	{r4, pc}

080a4788 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a4788:	b510      	push	{r4, lr}
 80a478a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a478c:	6800      	ldr	r0, [r0, #0]
 80a478e:	b108      	cbz	r0, 80a4794 <_ZN6String10invalidateEv+0xc>
 80a4790:	f7ff fb34 	bl	80a3dfc <free>
	buffer = NULL;
 80a4794:	2300      	movs	r3, #0
	capacity = len = 0;
 80a4796:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a479a:	6023      	str	r3, [r4, #0]
}
 80a479c:	bd10      	pop	{r4, pc}

080a479e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a479e:	b538      	push	{r3, r4, r5, lr}
 80a47a0:	4604      	mov	r4, r0
 80a47a2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a47a4:	6800      	ldr	r0, [r0, #0]
 80a47a6:	3101      	adds	r1, #1
 80a47a8:	f7ff fb30 	bl	80a3e0c <realloc>
	if (newbuffer) {
 80a47ac:	b110      	cbz	r0, 80a47b4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a47ae:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a47b2:	2001      	movs	r0, #1
	}
	return 0;
}
 80a47b4:	bd38      	pop	{r3, r4, r5, pc}

080a47b6 <_ZN6String7reserveEj>:
{
 80a47b6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a47b8:	6803      	ldr	r3, [r0, #0]
{
 80a47ba:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a47bc:	b123      	cbz	r3, 80a47c8 <_ZN6String7reserveEj+0x12>
 80a47be:	6843      	ldr	r3, [r0, #4]
 80a47c0:	428b      	cmp	r3, r1
 80a47c2:	d301      	bcc.n	80a47c8 <_ZN6String7reserveEj+0x12>
 80a47c4:	2001      	movs	r0, #1
}
 80a47c6:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a47c8:	4620      	mov	r0, r4
 80a47ca:	f7ff ffe8 	bl	80a479e <_ZN6String12changeBufferEj>
 80a47ce:	2800      	cmp	r0, #0
 80a47d0:	d0f9      	beq.n	80a47c6 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a47d2:	68a3      	ldr	r3, [r4, #8]
 80a47d4:	2b00      	cmp	r3, #0
 80a47d6:	d1f5      	bne.n	80a47c4 <_ZN6String7reserveEj+0xe>
 80a47d8:	6822      	ldr	r2, [r4, #0]
 80a47da:	7013      	strb	r3, [r2, #0]
 80a47dc:	e7f2      	b.n	80a47c4 <_ZN6String7reserveEj+0xe>

080a47de <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a47de:	b570      	push	{r4, r5, r6, lr}
 80a47e0:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a47e2:	4611      	mov	r1, r2
{
 80a47e4:	4604      	mov	r4, r0
 80a47e6:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a47e8:	f7ff ffe5 	bl	80a47b6 <_ZN6String7reserveEj>
 80a47ec:	b920      	cbnz	r0, 80a47f8 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a47ee:	4620      	mov	r0, r4
 80a47f0:	f7ff ffca 	bl	80a4788 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a47f4:	4620      	mov	r0, r4
 80a47f6:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a47f8:	462a      	mov	r2, r5
 80a47fa:	4631      	mov	r1, r6
 80a47fc:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a47fe:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a4800:	f005 fafe 	bl	80a9e00 <memcpy>
	buffer[len] = 0;
 80a4804:	2100      	movs	r1, #0
 80a4806:	6822      	ldr	r2, [r4, #0]
 80a4808:	68a3      	ldr	r3, [r4, #8]
 80a480a:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a480c:	e7f2      	b.n	80a47f4 <_ZN6String4copyEPKcj+0x16>

080a480e <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a480e:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a4810:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a4812:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a4814:	460d      	mov	r5, r1
	capacity = 0;
 80a4816:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a481a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a481c:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a481e:	b139      	cbz	r1, 80a4830 <_ZN6StringC1EPKc+0x22>
 80a4820:	4608      	mov	r0, r1
 80a4822:	f005 fb7e 	bl	80a9f22 <strlen>
 80a4826:	4629      	mov	r1, r5
 80a4828:	4602      	mov	r2, r0
 80a482a:	4620      	mov	r0, r4
 80a482c:	f7ff ffd7 	bl	80a47de <_ZN6String4copyEPKcj>
}
 80a4830:	4620      	mov	r0, r4
 80a4832:	bd38      	pop	{r3, r4, r5, pc}

080a4834 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a4834:	b538      	push	{r3, r4, r5, lr}
 80a4836:	4605      	mov	r5, r0
	if (buffer) {
 80a4838:	6800      	ldr	r0, [r0, #0]
{
 80a483a:	460c      	mov	r4, r1
	if (buffer) {
 80a483c:	b168      	cbz	r0, 80a485a <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a483e:	686a      	ldr	r2, [r5, #4]
 80a4840:	688b      	ldr	r3, [r1, #8]
 80a4842:	429a      	cmp	r2, r3
 80a4844:	d307      	bcc.n	80a4856 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a4846:	6809      	ldr	r1, [r1, #0]
 80a4848:	f005 fb48 	bl	80a9edc <strcpy>
			len = rhs.len;
 80a484c:	68a3      	ldr	r3, [r4, #8]
 80a484e:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a4850:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a4852:	60a3      	str	r3, [r4, #8]
}
 80a4854:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a4856:	f7ff fad1 	bl	80a3dfc <free>
	buffer = rhs.buffer;
 80a485a:	6823      	ldr	r3, [r4, #0]
 80a485c:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a485e:	6863      	ldr	r3, [r4, #4]
 80a4860:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a4862:	68a3      	ldr	r3, [r4, #8]
 80a4864:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a4866:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a4868:	e9c4 3300 	strd	r3, r3, [r4]
 80a486c:	e7f1      	b.n	80a4852 <_ZN6String4moveERS_+0x1e>

080a486e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a486e:	4288      	cmp	r0, r1
{
 80a4870:	b510      	push	{r4, lr}
 80a4872:	460b      	mov	r3, r1
 80a4874:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a4876:	d004      	beq.n	80a4882 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a4878:	6809      	ldr	r1, [r1, #0]
 80a487a:	b121      	cbz	r1, 80a4886 <_ZN6StringaSERKS_+0x18>
 80a487c:	689a      	ldr	r2, [r3, #8]
 80a487e:	f7ff ffae 	bl	80a47de <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a4882:	4620      	mov	r0, r4
 80a4884:	bd10      	pop	{r4, pc}
	else invalidate();
 80a4886:	f7ff ff7f 	bl	80a4788 <_ZN6String10invalidateEv>
 80a488a:	e7fa      	b.n	80a4882 <_ZN6StringaSERKS_+0x14>

080a488c <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a488c:	2300      	movs	r3, #0
String::String(const String &value)
 80a488e:	b510      	push	{r4, lr}
 80a4890:	4604      	mov	r4, r0
	capacity = 0;
 80a4892:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a4896:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a4898:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a489a:	f7ff ffe8 	bl	80a486e <_ZN6StringaSERKS_>
}
 80a489e:	4620      	mov	r0, r4
 80a48a0:	bd10      	pop	{r4, pc}

080a48a2 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a48a2:	4288      	cmp	r0, r1
{
 80a48a4:	b510      	push	{r4, lr}
 80a48a6:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a48a8:	d001      	beq.n	80a48ae <_ZN6StringaSEOS_+0xc>
 80a48aa:	f7ff ffc3 	bl	80a4834 <_ZN6String4moveERS_>
	return *this;
}
 80a48ae:	4620      	mov	r0, r4
 80a48b0:	bd10      	pop	{r4, pc}

080a48b2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a48b2:	b538      	push	{r3, r4, r5, lr}
 80a48b4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a48b6:	460c      	mov	r4, r1
 80a48b8:	b149      	cbz	r1, 80a48ce <_ZN6StringaSEPKc+0x1c>
 80a48ba:	4608      	mov	r0, r1
 80a48bc:	f005 fb31 	bl	80a9f22 <strlen>
 80a48c0:	4621      	mov	r1, r4
 80a48c2:	4602      	mov	r2, r0
 80a48c4:	4628      	mov	r0, r5
 80a48c6:	f7ff ff8a 	bl	80a47de <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a48ca:	4628      	mov	r0, r5
 80a48cc:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a48ce:	f7ff ff5b 	bl	80a4788 <_ZN6String10invalidateEv>
 80a48d2:	e7fa      	b.n	80a48ca <_ZN6StringaSEPKc+0x18>

080a48d4 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
 80a48d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a48d6:	4604      	mov	r4, r0
	buffer = NULL;
 80a48d8:	2300      	movs	r3, #0
String::String(unsigned char value, unsigned char base)
 80a48da:	4608      	mov	r0, r1
	capacity = 0;
 80a48dc:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a48e0:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a48e2:	7323      	strb	r3, [r4, #12]
	utoa(value, buf, base);
 80a48e4:	a901      	add	r1, sp, #4
 80a48e6:	f000 fcf4 	bl	80a52d2 <utoa>
	*this = buf;
 80a48ea:	4620      	mov	r0, r4
 80a48ec:	a901      	add	r1, sp, #4
 80a48ee:	f7ff ffe0 	bl	80a48b2 <_ZN6StringaSEPKc>
}
 80a48f2:	4620      	mov	r0, r4
 80a48f4:	b004      	add	sp, #16
 80a48f6:	bd10      	pop	{r4, pc}

080a48f8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a48f8:	b570      	push	{r4, r5, r6, lr}
 80a48fa:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a48fc:	460e      	mov	r6, r1
 80a48fe:	b909      	cbnz	r1, 80a4904 <_ZN6String6concatEPKcj+0xc>
 80a4900:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a4902:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a4904:	b16a      	cbz	r2, 80a4922 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a4906:	6884      	ldr	r4, [r0, #8]
 80a4908:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a490a:	4621      	mov	r1, r4
 80a490c:	f7ff ff53 	bl	80a47b6 <_ZN6String7reserveEj>
 80a4910:	2800      	cmp	r0, #0
 80a4912:	d0f5      	beq.n	80a4900 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a4914:	6828      	ldr	r0, [r5, #0]
 80a4916:	68ab      	ldr	r3, [r5, #8]
 80a4918:	4631      	mov	r1, r6
 80a491a:	4418      	add	r0, r3
 80a491c:	f005 fade 	bl	80a9edc <strcpy>
	len = newlen;
 80a4920:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a4922:	2001      	movs	r0, #1
 80a4924:	e7ed      	b.n	80a4902 <_ZN6String6concatEPKcj+0xa>

080a4926 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a4926:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a4928:	688a      	ldr	r2, [r1, #8]
 80a492a:	6809      	ldr	r1, [r1, #0]
{
 80a492c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a492e:	f7ff ffe3 	bl	80a48f8 <_ZN6String6concatEPKcj>
 80a4932:	b910      	cbnz	r0, 80a493a <_ZplRK15StringSumHelperRK6String+0x14>
 80a4934:	4620      	mov	r0, r4
 80a4936:	f7ff ff27 	bl	80a4788 <_ZN6String10invalidateEv>
	return a;
}
 80a493a:	4620      	mov	r0, r4
 80a493c:	bd10      	pop	{r4, pc}

080a493e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a493e:	b538      	push	{r3, r4, r5, lr}
 80a4940:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a4942:	460d      	mov	r5, r1
 80a4944:	b921      	cbnz	r1, 80a4950 <_ZplRK15StringSumHelperPKc+0x12>
 80a4946:	4620      	mov	r0, r4
 80a4948:	f7ff ff1e 	bl	80a4788 <_ZN6String10invalidateEv>
	return a;
}
 80a494c:	4620      	mov	r0, r4
 80a494e:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a4950:	4608      	mov	r0, r1
 80a4952:	f005 fae6 	bl	80a9f22 <strlen>
 80a4956:	4629      	mov	r1, r5
 80a4958:	4602      	mov	r2, r0
 80a495a:	4620      	mov	r0, r4
 80a495c:	f7ff ffcc 	bl	80a48f8 <_ZN6String6concatEPKcj>
 80a4960:	2800      	cmp	r0, #0
 80a4962:	d0f0      	beq.n	80a4946 <_ZplRK15StringSumHelperPKc+0x8>
 80a4964:	e7f2      	b.n	80a494c <_ZplRK15StringSumHelperPKc+0xe>

080a4966 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 80a4966:	b558      	push	{r3, r4, r6, lr}
 80a4968:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 80a496a:	b12a      	cbz	r2, 80a4978 <_ZNK6String8getBytesEPhjj+0x12>
 80a496c:	b121      	cbz	r1, 80a4978 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
 80a496e:	6884      	ldr	r4, [r0, #8]
 80a4970:	429c      	cmp	r4, r3
 80a4972:	d802      	bhi.n	80a497a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 80a4974:	2300      	movs	r3, #0
 80a4976:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
 80a4978:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
 80a497a:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
 80a497c:	3a01      	subs	r2, #1
	if (n > len - index) n = len - index;
 80a497e:	4294      	cmp	r4, r2
 80a4980:	bf28      	it	cs
 80a4982:	4614      	movcs	r4, r2
	strncpy((char *)buf, buffer + index, n);
 80a4984:	6801      	ldr	r1, [r0, #0]
 80a4986:	4622      	mov	r2, r4
 80a4988:	4419      	add	r1, r3
 80a498a:	4630      	mov	r0, r6
 80a498c:	f005 fad1 	bl	80a9f32 <strncpy>
	buf[n] = 0;
 80a4990:	2300      	movs	r3, #0
 80a4992:	5533      	strb	r3, [r6, r4]
 80a4994:	e7f0      	b.n	80a4978 <_ZNK6String8getBytesEPhjj+0x12>
	...

080a4998 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80a4998:	b40e      	push	{r1, r2, r3}
 80a499a:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80a499c:	ad09      	add	r5, sp, #36	; 0x24
 80a499e:	f855 7b04 	ldr.w	r7, [r5], #4
 80a49a2:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a49a4:	462b      	mov	r3, r5
 80a49a6:	463a      	mov	r2, r7
 80a49a8:	2105      	movs	r1, #5
 80a49aa:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 80a49ac:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a49ae:	f7ff fa35 	bl	80a3e1c <vsnprintf>
 80a49b2:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80a49b4:	490b      	ldr	r1, [pc, #44]	; (80a49e4 <_ZN6String6formatEPKcz+0x4c>)
 80a49b6:	4620      	mov	r0, r4
 80a49b8:	f7ff ff29 	bl	80a480e <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
 80a49bc:	4631      	mov	r1, r6
 80a49be:	4620      	mov	r0, r4
 80a49c0:	f7ff fef9 	bl	80a47b6 <_ZN6String7reserveEj>
    if (result.buffer) {
 80a49c4:	6820      	ldr	r0, [r4, #0]
 80a49c6:	b130      	cbz	r0, 80a49d6 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a49c8:	462b      	mov	r3, r5
 80a49ca:	463a      	mov	r2, r7
 80a49cc:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 80a49ce:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a49d0:	f7ff fa24 	bl	80a3e1c <vsnprintf>
        va_end(marker);
        result.len = n;
 80a49d4:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 80a49d6:	4620      	mov	r0, r4
 80a49d8:	b004      	add	sp, #16
 80a49da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80a49de:	b003      	add	sp, #12
 80a49e0:	4770      	bx	lr
 80a49e2:	bf00      	nop
 80a49e4:	080aa1d8 	.word	0x080aa1d8

080a49e8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a49e8:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a49ea:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a49ec:	b510      	push	{r4, lr}
 80a49ee:	4b08      	ldr	r3, [pc, #32]	; (80a4a10 <_GLOBAL__sub_I_System+0x28>)
 80a49f0:	4c08      	ldr	r4, [pc, #32]	; (80a4a14 <_GLOBAL__sub_I_System+0x2c>)
 80a49f2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a49f4:	4b08      	ldr	r3, [pc, #32]	; (80a4a18 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a49f6:	6020      	str	r0, [r4, #0]
 80a49f8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a49fa:	71a0      	strb	r0, [r4, #6]
 80a49fc:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a49fe:	f7ff f931 	bl	80a3c64 <set_system_mode>
SystemClass System;
 80a4a02:	4620      	mov	r0, r4
 80a4a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a4a08:	4a04      	ldr	r2, [pc, #16]	; (80a4a1c <_GLOBAL__sub_I_System+0x34>)
 80a4a0a:	4905      	ldr	r1, [pc, #20]	; (80a4a20 <_GLOBAL__sub_I_System+0x38>)
 80a4a0c:	f000 bdf4 	b.w	80a55f8 <__aeabi_atexit>
 80a4a10:	20000ec8 	.word	0x20000ec8
 80a4a14:	20000ebc 	.word	0x20000ebc
 80a4a18:	ffff0000 	.word	0xffff0000
 80a4a1c:	2000006c 	.word	0x2000006c
 80a4a20:	080a20e7 	.word	0x080a20e7

080a4a24 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 80a4a24:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a4a26:	2000      	movs	r0, #0
 80a4a28:	f7ff f978 	bl	80a3d1c <spark_sync_time_pending>
 80a4a2c:	b128      	cbz	r0, 80a4a3a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a4a2e:	f7ff f965 	bl	80a3cfc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a4a32:	f080 0001 	eor.w	r0, r0, #1
 80a4a36:	b2c0      	uxtb	r0, r0
    }
 80a4a38:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a4a3a:	2001      	movs	r0, #1
 80a4a3c:	e7fc      	b.n	80a4a38 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

080a4a3e <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a4a3e:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a4a40:	2000      	movs	r0, #0
 80a4a42:	f7fe ffd5 	bl	80a39f0 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a4a46:	4604      	mov	r4, r0
 80a4a48:	b9a0      	cbnz	r0, 80a4a74 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a4a4a:	f7ff f903 	bl	80a3c54 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a4a4e:	2801      	cmp	r0, #1
 80a4a50:	d110      	bne.n	80a4a74 <_ZN9TimeClass7isValidEv+0x36>
 80a4a52:	4620      	mov	r0, r4
 80a4a54:	f7ff f926 	bl	80a3ca4 <system_thread_get_state>
 80a4a58:	b960      	cbnz	r0, 80a4a74 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a4a5a:	f7ff ffe3 	bl	80a4a24 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a4a5e:	b910      	cbnz	r0, 80a4a66 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a4a60:	f7ff f944 	bl	80a3cec <spark_process>
        while (_while() && !_condition()) {
 80a4a64:	e7f9      	b.n	80a4a5a <_ZN9TimeClass7isValidEv+0x1c>
 80a4a66:	f7ff ffdd 	bl	80a4a24 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a4a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a4a6e:	2000      	movs	r0, #0
 80a4a70:	f7fe bfbe 	b.w	80a39f0 <hal_rtc_time_is_valid>
}
 80a4a74:	4620      	mov	r0, r4
 80a4a76:	bd10      	pop	{r4, pc}

080a4a78 <_ZN9TimeClass3nowEv>:
{
 80a4a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a4a7a:	f7ff ffe0 	bl	80a4a3e <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a4a7e:	2210      	movs	r2, #16
 80a4a80:	2100      	movs	r1, #0
 80a4a82:	4668      	mov	r0, sp
 80a4a84:	f005 f9ca 	bl	80a9e1c <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a4a88:	2100      	movs	r1, #0
 80a4a8a:	4668      	mov	r0, sp
 80a4a8c:	f7fe ffb8 	bl	80a3a00 <hal_rtc_get_time>
}
 80a4a90:	9800      	ldr	r0, [sp, #0]
 80a4a92:	b005      	add	sp, #20
 80a4a94:	f85d fb04 	ldr.w	pc, [sp], #4

080a4a98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a4a98:	4b02      	ldr	r3, [pc, #8]	; (80a4aa4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a4a9a:	681a      	ldr	r2, [r3, #0]
 80a4a9c:	4b02      	ldr	r3, [pc, #8]	; (80a4aa8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a4a9e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a4aa0:	4770      	bx	lr
 80a4aa2:	bf00      	nop
 80a4aa4:	20000000 	.word	0x20000000
 80a4aa8:	20000ecc 	.word	0x20000ecc

080a4aac <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a4aac:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a4aae:	6804      	ldr	r4, [r0, #0]
 80a4ab0:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a4ab2:	46a4      	mov	ip, r4
    }
 80a4ab4:	bc10      	pop	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a4ab6:	4760      	bx	ip

080a4ab8 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a4ab8:	6803      	ldr	r3, [r0, #0]
 80a4aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a4abc:	4718      	bx	r3

080a4abe <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a4abe:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a4ac0:	4770      	bx	lr

080a4ac2 <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a4ac2:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a4ac4:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a4ac6:	1a10      	subs	r0, r2, r0
 80a4ac8:	4770      	bx	lr

080a4aca <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a4aca:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
 80a4acc:	6803      	ldr	r3, [r0, #0]
{
 80a4ace:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
 80a4ad2:	2201      	movs	r2, #1
 80a4ad4:	68db      	ldr	r3, [r3, #12]
 80a4ad6:	f10d 0107 	add.w	r1, sp, #7
 80a4ada:	4798      	blx	r3
}
 80a4adc:	b003      	add	sp, #12
 80a4ade:	f85d fb04 	ldr.w	pc, [sp], #4

080a4ae2 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a4ae2:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a4ae4:	6803      	ldr	r3, [r0, #0]
{
 80a4ae6:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a4ae8:	691b      	ldr	r3, [r3, #16]
 80a4aea:	4798      	blx	r3
 80a4aec:	b128      	cbz	r0, 80a4afa <_ZN3UDP4readEv+0x18>
 80a4aee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a4af0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a4af2:	1c59      	adds	r1, r3, #1
 80a4af4:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a4af6:	5cd0      	ldrb	r0, [r2, r3]
}
 80a4af8:	bd10      	pop	{r4, pc}
  return available() ? _buffer[_offset++] : -1;
 80a4afa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a4afe:	e7fb      	b.n	80a4af8 <_ZN3UDP4readEv+0x16>

080a4b00 <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a4b00:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a4b02:	6803      	ldr	r3, [r0, #0]
{
 80a4b04:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a4b06:	691b      	ldr	r3, [r3, #16]
 80a4b08:	4798      	blx	r3
 80a4b0a:	b118      	cbz	r0, 80a4b14 <_ZN3UDP4peekEv+0x14>
 80a4b0c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a4b0e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a4b10:	5cd0      	ldrb	r0, [r2, r3]
}
 80a4b12:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
 80a4b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a4b18:	e7fb      	b.n	80a4b12 <_ZN3UDP4peekEv+0x12>

080a4b1a <_ZN3UDP5flushEv>:

void UDP::flush()
{
}
 80a4b1a:	4770      	bx	lr

080a4b1c <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a4b1c:	4603      	mov	r3, r0
 80a4b1e:	4608      	mov	r0, r1
 80a4b20:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a4b22:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a4b24:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
 80a4b26:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer+_offset, size);
 80a4b28:	6803      	ldr	r3, [r0, #0]
 80a4b2a:	1a52      	subs	r2, r2, r1
 80a4b2c:	68db      	ldr	r3, [r3, #12]
 80a4b2e:	4421      	add	r1, r4
}
 80a4b30:	bc10      	pop	{r4}
    return p.write(_buffer+_offset, size);
 80a4b32:	4718      	bx	r3

080a4b34 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a4b34:	f1a0 0010 	sub.w	r0, r0, #16
 80a4b38:	f7ff bff0 	b.w	80a4b1c <_ZNK3UDP7printToER5Print>

080a4b3c <_ZN3UDP5beginEtm>:
{
 80a4b3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a4b40:	4616      	mov	r6, r2
    stop();
 80a4b42:	6803      	ldr	r3, [r0, #0]
{
 80a4b44:	4688      	mov	r8, r1
    stop();
 80a4b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 80a4b48:	4604      	mov	r4, r0
    stop();
 80a4b4a:	4798      	blx	r3
    if(Network.from(nif).ready())
 80a4b4c:	4630      	mov	r0, r6
 80a4b4e:	f7ff fd7f 	bl	80a4650 <_ZN5spark12NetworkClass4fromEm>
 80a4b52:	6803      	ldr	r3, [r0, #0]
 80a4b54:	68db      	ldr	r3, [r3, #12]
 80a4b56:	4798      	blx	r3
 80a4b58:	4605      	mov	r5, r0
 80a4b5a:	b188      	cbz	r0, 80a4b80 <_ZN3UDP5beginEtm+0x44>
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a4b5c:	2102      	movs	r1, #2
 80a4b5e:	4643      	mov	r3, r8
 80a4b60:	2211      	movs	r2, #17
 80a4b62:	4608      	mov	r0, r1
 80a4b64:	9600      	str	r6, [sp, #0]
 80a4b66:	f7fe ffc5 	bl	80a3af4 <socket_create>
 80a4b6a:	6160      	str	r0, [r4, #20]
        if (socket_handle_valid(_sock))
 80a4b6c:	f7fe ffba 	bl	80a3ae4 <socket_handle_valid>
 80a4b70:	4607      	mov	r7, r0
 80a4b72:	b148      	cbz	r0, 80a4b88 <_ZN3UDP5beginEtm+0x4c>
  _offset = 0;
 80a4b74:	2300      	movs	r3, #0
            _port = port;
 80a4b76:	f8a4 8018 	strh.w	r8, [r4, #24]
  _offset = 0;
 80a4b7a:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a4b7c:	8723      	strh	r3, [r4, #56]	; 0x38
            _nif = nif;
 80a4b7e:	6466      	str	r6, [r4, #68]	; 0x44
}
 80a4b80:	4628      	mov	r0, r5
 80a4b82:	b002      	add	sp, #8
 80a4b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            stop();
 80a4b88:	6823      	ldr	r3, [r4, #0]
 80a4b8a:	4620      	mov	r0, r4
 80a4b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a4b8e:	4798      	blx	r3
            bound = false;
 80a4b90:	463d      	mov	r5, r7
 80a4b92:	e7f5      	b.n	80a4b80 <_ZN3UDP5beginEtm+0x44>

080a4b94 <_ZN3UDP4stopEv>:
{
 80a4b94:	b538      	push	{r3, r4, r5, lr}
 80a4b96:	4604      	mov	r4, r0
    if (isOpen(_sock))
 80a4b98:	6945      	ldr	r5, [r0, #20]
   return sd != socket_handle_invalid();
 80a4b9a:	f7fe ffc3 	bl	80a3b24 <socket_handle_invalid>
    if (isOpen(_sock))
 80a4b9e:	4285      	cmp	r5, r0
 80a4ba0:	d002      	beq.n	80a4ba8 <_ZN3UDP4stopEv+0x14>
        socket_close(_sock);
 80a4ba2:	6960      	ldr	r0, [r4, #20]
 80a4ba4:	f7fe ffb6 	bl	80a3b14 <socket_close>
    _sock = socket_handle_invalid();
 80a4ba8:	f7fe ffbc 	bl	80a3b24 <socket_handle_invalid>
  _offset = 0;
 80a4bac:	2300      	movs	r3, #0
    _sock = socket_handle_invalid();
 80a4bae:	6160      	str	r0, [r4, #20]
  _offset = 0;
 80a4bb0:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a4bb2:	8723      	strh	r3, [r4, #56]	; 0x38
}
 80a4bb4:	bd38      	pop	{r3, r4, r5, pc}

080a4bb6 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
{
 80a4bb6:	b510      	push	{r4, lr}
    remoteSockAddr.sa_family = AF_INET;
 80a4bb8:	2402      	movs	r4, #2
{
 80a4bba:	b086      	sub	sp, #24
    remoteSockAddr.sa_family = AF_INET;
 80a4bbc:	f8ad 4008 	strh.w	r4, [sp, #8]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a4bc0:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80a4bc4:	ba64      	rev16	r4, r4
 80a4bc6:	f8ad 400a 	strh.w	r4, [sp, #10]
    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a4bca:	79dc      	ldrb	r4, [r3, #7]
 80a4bcc:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a4bd0:	799c      	ldrb	r4, [r3, #6]
 80a4bd2:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a4bd6:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a4bd8:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a4bda:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a4bde:	f88d 300f 	strb.w	r3, [sp, #15]
    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a4be2:	2310      	movs	r3, #16
 80a4be4:	9301      	str	r3, [sp, #4]
 80a4be6:	ab02      	add	r3, sp, #8
 80a4be8:	9300      	str	r3, [sp, #0]
 80a4bea:	6940      	ldr	r0, [r0, #20]
 80a4bec:	2300      	movs	r3, #0
 80a4bee:	f7fe ff89 	bl	80a3b04 <socket_sendto>
}
 80a4bf2:	b006      	add	sp, #24
 80a4bf4:	bd10      	pop	{r4, pc}

080a4bf6 <_ZN3UDP5writeEPKhj>:
{
 80a4bf6:	b570      	push	{r4, r5, r6, lr}
 80a4bf8:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a4bfa:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a4bfc:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80a4bfe:	b168      	cbz	r0, 80a4c1c <_ZN3UDP5writeEPKhj+0x26>
 80a4c00:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80a4c02:	1b9c      	subs	r4, r3, r6
    if (size>available)
 80a4c04:	4294      	cmp	r4, r2
 80a4c06:	bf28      	it	cs
 80a4c08:	4614      	movcs	r4, r2
    memcpy(_buffer+_offset, buffer, size);
 80a4c0a:	4430      	add	r0, r6
 80a4c0c:	4622      	mov	r2, r4
 80a4c0e:	f005 f8f7 	bl	80a9e00 <memcpy>
    _offset += size;
 80a4c12:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
}
 80a4c14:	4620      	mov	r0, r4
    _offset += size;
 80a4c16:	4423      	add	r3, r4
 80a4c18:	86eb      	strh	r3, [r5, #54]	; 0x36
}
 80a4c1a:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a4c1c:	4604      	mov	r4, r0
 80a4c1e:	e7f1      	b.n	80a4c04 <_ZN3UDP5writeEPKhj+0xe>

080a4c20 <_ZN3UDP4readEPhj>:
{
 80a4c20:	b570      	push	{r4, r5, r6, lr}
    if (available())
 80a4c22:	6803      	ldr	r3, [r0, #0]
{
 80a4c24:	4604      	mov	r4, r0
    if (available())
 80a4c26:	691b      	ldr	r3, [r3, #16]
{
 80a4c28:	460e      	mov	r6, r1
 80a4c2a:	4615      	mov	r5, r2
    if (available())
 80a4c2c:	4798      	blx	r3
 80a4c2e:	b190      	cbz	r0, 80a4c56 <_ZN3UDP4readEPhj+0x36>
    read = min(int(len), available());
 80a4c30:	6823      	ldr	r3, [r4, #0]
 80a4c32:	4620      	mov	r0, r4
 80a4c34:	691b      	ldr	r3, [r3, #16]
 80a4c36:	4798      	blx	r3
 80a4c38:	4285      	cmp	r5, r0
 80a4c3a:	bfa8      	it	ge
 80a4c3c:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a4c3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a4c40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a4c42:	462a      	mov	r2, r5
 80a4c44:	4419      	add	r1, r3
 80a4c46:	4630      	mov	r0, r6
 80a4c48:	f005 f8da 	bl	80a9e00 <memcpy>
      _offset += read;
 80a4c4c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a4c4e:	442b      	add	r3, r5
 80a4c50:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 80a4c52:	4628      	mov	r0, r5
 80a4c54:	bd70      	pop	{r4, r5, r6, pc}
    int read = -1;
 80a4c56:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    return read;
 80a4c5a:	e7fa      	b.n	80a4c52 <_ZN3UDP4readEPhj+0x32>

080a4c5c <_ZN3UDP13receivePacketEPhjm>:
{
 80a4c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4c60:	4604      	mov	r4, r0
 80a4c62:	b08a      	sub	sp, #40	; 0x28
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a4c64:	6c40      	ldr	r0, [r0, #68]	; 0x44
{
 80a4c66:	461f      	mov	r7, r3
 80a4c68:	460d      	mov	r5, r1
 80a4c6a:	4616      	mov	r6, r2
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a4c6c:	f7ff fcf0 	bl	80a4650 <_ZN5spark12NetworkClass4fromEm>
 80a4c70:	6803      	ldr	r3, [r0, #0]
 80a4c72:	68db      	ldr	r3, [r3, #12]
 80a4c74:	4798      	blx	r3
 80a4c76:	b928      	cbnz	r0, 80a4c84 <_ZN3UDP13receivePacketEPhjm+0x28>
    int ret = -1;
 80a4c78:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
 80a4c7c:	4628      	mov	r0, r5
 80a4c7e:	b00a      	add	sp, #40	; 0x28
 80a4c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a4c84:	f8d4 8014 	ldr.w	r8, [r4, #20]
   return sd != socket_handle_invalid();
 80a4c88:	f7fe ff4c 	bl	80a3b24 <socket_handle_invalid>
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a4c8c:	4580      	cmp	r8, r0
 80a4c8e:	d0f3      	beq.n	80a4c78 <_ZN3UDP13receivePacketEPhjm+0x1c>
 80a4c90:	2d00      	cmp	r5, #0
 80a4c92:	d0f1      	beq.n	80a4c78 <_ZN3UDP13receivePacketEPhjm+0x1c>
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a4c94:	2310      	movs	r3, #16
 80a4c96:	9305      	str	r3, [sp, #20]
        ret = socket_receivefrom_ex(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen, timeout, nullptr);
 80a4c98:	2300      	movs	r3, #0
 80a4c9a:	aa05      	add	r2, sp, #20
 80a4c9c:	9201      	str	r2, [sp, #4]
 80a4c9e:	aa06      	add	r2, sp, #24
 80a4ca0:	4629      	mov	r1, r5
 80a4ca2:	9200      	str	r2, [sp, #0]
 80a4ca4:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80a4ca8:	4632      	mov	r2, r6
 80a4caa:	6960      	ldr	r0, [r4, #20]
 80a4cac:	f7fe ff42 	bl	80a3b34 <socket_receivefrom_ex>
        if (ret >= 0)
 80a4cb0:	1e05      	subs	r5, r0, #0
 80a4cb2:	dbe3      	blt.n	80a4c7c <_ZN3UDP13receivePacketEPhjm+0x20>
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a4cb4:	f89d 201a 	ldrb.w	r2, [sp, #26]
 80a4cb8:	f89d 301b 	ldrb.w	r3, [sp, #27]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a4cbc:	a907      	add	r1, sp, #28
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a4cbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a4cc2:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a4cc4:	f104 001c 	add.w	r0, r4, #28
 80a4cc8:	f7ff fc54 	bl	80a4574 <_ZN9IPAddressaSEPKh>
    return ret;
 80a4ccc:	e7d6      	b.n	80a4c7c <_ZN3UDP13receivePacketEPhjm+0x20>
	...

080a4cd0 <_ZN3UDP11beginPacketEPKct>:
{
 80a4cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4cd4:	4606      	mov	r6, r0
 80a4cd6:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a4cd8:	6c40      	ldr	r0, [r0, #68]	; 0x44
{
 80a4cda:	460d      	mov	r5, r1
 80a4cdc:	4617      	mov	r7, r2
    if(Network.from(_nif).ready())
 80a4cde:	f7ff fcb7 	bl	80a4650 <_ZN5spark12NetworkClass4fromEm>
 80a4ce2:	6803      	ldr	r3, [r0, #0]
 80a4ce4:	68db      	ldr	r3, [r3, #12]
 80a4ce6:	4798      	blx	r3
 80a4ce8:	b1f0      	cbz	r0, 80a4d28 <_ZN3UDP11beginPacketEPKct+0x58>
        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a4cea:	4628      	mov	r0, r5
 80a4cec:	f005 f919 	bl	80a9f22 <strlen>
 80a4cf0:	2400      	movs	r4, #0
 80a4cf2:	b281      	uxth	r1, r0
 80a4cf4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a4cf6:	4628      	mov	r0, r5
 80a4cf8:	9400      	str	r4, [sp, #0]
 80a4cfa:	aa03      	add	r2, sp, #12
 80a4cfc:	f7fe ffa2 	bl	80a3c44 <inet_gethostbyname>
 80a4d00:	b9a8      	cbnz	r0, 80a4d2e <_ZN3UDP11beginPacketEPKct+0x5e>
            IPAddress remote_addr(ip_addr);
 80a4d02:	a903      	add	r1, sp, #12
 80a4d04:	a808      	add	r0, sp, #32
 80a4d06:	f7ff fc01 	bl	80a450c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a4d0a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a4d0c:	ac0f      	add	r4, sp, #60	; 0x3c
 80a4d0e:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
 80a4d12:	4b08      	ldr	r3, [pc, #32]	; (80a4d34 <_ZN3UDP11beginPacketEPKct+0x64>)
 80a4d14:	ad09      	add	r5, sp, #36	; 0x24
 80a4d16:	930e      	str	r3, [sp, #56]	; 0x38
 80a4d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a4d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a4d1c:	682b      	ldr	r3, [r5, #0]
 80a4d1e:	463a      	mov	r2, r7
 80a4d20:	4630      	mov	r0, r6
 80a4d22:	7023      	strb	r3, [r4, #0]
 80a4d24:	a90e      	add	r1, sp, #56	; 0x38
 80a4d26:	47c0      	blx	r8
}
 80a4d28:	b014      	add	sp, #80	; 0x50
 80a4d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 0;
 80a4d2e:	4620      	mov	r0, r4
 80a4d30:	e7fa      	b.n	80a4d28 <_ZN3UDP11beginPacketEPKct+0x58>
 80a4d32:	bf00      	nop
 80a4d34:	080aa25c 	.word	0x080aa25c

080a4d38 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
 80a4d38:	b570      	push	{r4, r5, r6, lr}
 80a4d3a:	4604      	mov	r4, r0
 80a4d3c:	4606      	mov	r6, r0
 80a4d3e:	4b05      	ldr	r3, [pc, #20]	; (80a4d54 <_ZN3UDP8remoteIPEv+0x1c>)
 80a4d40:	f101 0520 	add.w	r5, r1, #32
 80a4d44:	f844 3b04 	str.w	r3, [r4], #4
 80a4d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a4d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a4d4c:	682b      	ldr	r3, [r5, #0]
 80a4d4e:	4630      	mov	r0, r6
 80a4d50:	7023      	strb	r3, [r4, #0]
 80a4d52:	bd70      	pop	{r4, r5, r6, pc}
 80a4d54:	080aa25c 	.word	0x080aa25c

080a4d58 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a4d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4d5a:	468c      	mov	ip, r1
 80a4d5c:	4696      	mov	lr, r2
 80a4d5e:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a4d60:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a4d62:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a4d64:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a4d66:	4a09      	ldr	r2, [pc, #36]	; (80a4d8c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a4d68:	ad03      	add	r5, sp, #12
 80a4d6a:	1d1c      	adds	r4, r3, #4
 80a4d6c:	9202      	str	r2, [sp, #8]
 80a4d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a4d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a4d72:	6823      	ldr	r3, [r4, #0]
 80a4d74:	4672      	mov	r2, lr
 80a4d76:	702b      	strb	r3, [r5, #0]
 80a4d78:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a4d7c:	4661      	mov	r1, ip
 80a4d7e:	9300      	str	r3, [sp, #0]
 80a4d80:	4630      	mov	r0, r6
 80a4d82:	ab02      	add	r3, sp, #8
 80a4d84:	47b8      	blx	r7
    }
 80a4d86:	b009      	add	sp, #36	; 0x24
 80a4d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4d8a:	bf00      	nop
 80a4d8c:	080aa25c 	.word	0x080aa25c

080a4d90 <_ZN3UDP9endPacketEv>:
{
 80a4d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4d92:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a4d94:	6803      	ldr	r3, [r0, #0]
{
 80a4d96:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a4d98:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a4d9a:	4b0c      	ldr	r3, [pc, #48]	; (80a4dcc <_ZN3UDP9endPacketEv+0x3c>)
 80a4d9c:	ad03      	add	r5, sp, #12
 80a4d9e:	f100 0620 	add.w	r6, r0, #32
 80a4da2:	9302      	str	r3, [sp, #8]
 80a4da4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a4da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a4da8:	6833      	ldr	r3, [r6, #0]
 80a4daa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80a4dac:	702b      	strb	r3, [r5, #0]
 80a4dae:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a4db0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a4db2:	9300      	str	r3, [sp, #0]
 80a4db4:	4620      	mov	r0, r4
 80a4db6:	ab02      	add	r3, sp, #8
 80a4db8:	47b8      	blx	r7
 80a4dba:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a4dbc:	6823      	ldr	r3, [r4, #0]
 80a4dbe:	4620      	mov	r0, r4
 80a4dc0:	69db      	ldr	r3, [r3, #28]
 80a4dc2:	4798      	blx	r3
}
 80a4dc4:	4628      	mov	r0, r5
 80a4dc6:	b009      	add	sp, #36	; 0x24
 80a4dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4dca:	bf00      	nop
 80a4dcc:	080aa25c 	.word	0x080aa25c

080a4dd0 <_ZN3UDPC1Ev>:
UDP::UDP() :
 80a4dd0:	b538      	push	{r3, r4, r5, lr}
 80a4dd2:	2500      	movs	r5, #0
 80a4dd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4dd8:	e9c0 5301 	strd	r5, r3, [r0, #4]
        _buffer_allocated(false)
 80a4ddc:	4b0c      	ldr	r3, [pc, #48]	; (80a4e10 <_ZN3UDPC1Ev+0x40>)
UDP::UDP() :
 80a4dde:	4604      	mov	r4, r0
        _buffer_allocated(false)
 80a4de0:	f103 0208 	add.w	r2, r3, #8
 80a4de4:	336c      	adds	r3, #108	; 0x6c
 80a4de6:	6002      	str	r2, [r0, #0]
 80a4de8:	6103      	str	r3, [r0, #16]
        _sock(socket_handle_invalid()),
 80a4dea:	f7fe fe9b 	bl	80a3b24 <socket_handle_invalid>
        _buffer_allocated(false)
 80a4dee:	6160      	str	r0, [r4, #20]
 80a4df0:	f104 001c 	add.w	r0, r4, #28
 80a4df4:	f7ff fb7c 	bl	80a44f0 <_ZN9IPAddressC1Ev>
 80a4df8:	f44f 7300 	mov.w	r3, #512	; 0x200
}
 80a4dfc:	4620      	mov	r0, r4
        _buffer_allocated(false)
 80a4dfe:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
 80a4e02:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a4e04:	8725      	strh	r5, [r4, #56]	; 0x38
 80a4e06:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a4e08:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
 80a4e0c:	bd38      	pop	{r3, r4, r5, pc}
 80a4e0e:	bf00      	nop
 80a4e10:	080aa2bc 	.word	0x080aa2bc

080a4e14 <_ZN3UDP13releaseBufferEv>:
{
 80a4e14:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a4e16:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 80a4e1a:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a4e1c:	b123      	cbz	r3, 80a4e28 <_ZN3UDP13releaseBufferEv+0x14>
 80a4e1e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a4e20:	b110      	cbz	r0, 80a4e28 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a4e22:	2101      	movs	r1, #1
 80a4e24:	f000 fbed 	bl	80a5602 <_ZdlPvj>
    _buffer = NULL;
 80a4e28:	2300      	movs	r3, #0
 80a4e2a:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a4e2c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a4e30:	6423      	str	r3, [r4, #64]	; 0x40
  _offset = 0;
 80a4e32:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a4e34:	8723      	strh	r3, [r4, #56]	; 0x38
}
 80a4e36:	bd10      	pop	{r4, pc}

080a4e38 <_ZN3UDP9setBufferEjPh>:
{
 80a4e38:	b570      	push	{r4, r5, r6, lr}
 80a4e3a:	4604      	mov	r4, r0
 80a4e3c:	4616      	mov	r6, r2
 80a4e3e:	460d      	mov	r5, r1
    releaseBuffer();
 80a4e40:	f7ff ffe8 	bl	80a4e14 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
 80a4e44:	2300      	movs	r3, #0
    _buffer = buffer;
 80a4e46:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a4e48:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a4e4a:	b12e      	cbz	r6, 80a4e58 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
 80a4e4c:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
 80a4e4e:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a4e50:	3800      	subs	r0, #0
 80a4e52:	bf18      	it	ne
 80a4e54:	2001      	movne	r0, #1
 80a4e56:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
 80a4e58:	2d00      	cmp	r5, #0
 80a4e5a:	d0f8      	beq.n	80a4e4e <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
 80a4e5c:	4628      	mov	r0, r5
 80a4e5e:	f7fb f91e 	bl	80a009e <_Znaj>
        _buffer_allocated = true;
 80a4e62:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
 80a4e64:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a4e66:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
 80a4e6a:	2800      	cmp	r0, #0
 80a4e6c:	d0ef      	beq.n	80a4e4e <_ZN3UDP9setBufferEjPh+0x16>
 80a4e6e:	e7ed      	b.n	80a4e4c <_ZN3UDP9setBufferEjPh+0x14>

080a4e70 <_ZN3UDP11beginPacketE9IPAddresst>:
{
 80a4e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4e72:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
 80a4e74:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
{
 80a4e76:	4605      	mov	r5, r0
 80a4e78:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
 80a4e7a:	b91a      	cbnz	r2, 80a4e84 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a4e7c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a4e7e:	b109      	cbz	r1, 80a4e84 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a4e80:	f7ff ffda 	bl	80a4e38 <_ZN3UDP9setBufferEjPh>
 80a4e84:	f105 0620 	add.w	r6, r5, #32
 80a4e88:	3404      	adds	r4, #4
 80a4e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a4e8c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a4e8e:	6823      	ldr	r3, [r4, #0]
 80a4e90:	7033      	strb	r3, [r6, #0]
  _offset = 0;
 80a4e92:	2300      	movs	r3, #0
}
 80a4e94:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
 80a4e96:	86af      	strh	r7, [r5, #52]	; 0x34
  _offset = 0;
 80a4e98:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a4e9a:	872b      	strh	r3, [r5, #56]	; 0x38
}
 80a4e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4e9e <_ZN3UDP11parsePacketEm>:
{
 80a4e9e:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a4ea0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
{
 80a4ea2:	4604      	mov	r4, r0
 80a4ea4:	460d      	mov	r5, r1
    if (!_buffer && _buffer_size) {
 80a4ea6:	b91a      	cbnz	r2, 80a4eb0 <_ZN3UDP11parsePacketEm+0x12>
 80a4ea8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a4eaa:	b109      	cbz	r1, 80a4eb0 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
 80a4eac:	f7ff ffc4 	bl	80a4e38 <_ZN3UDP9setBufferEjPh>
  _offset = 0;
 80a4eb0:	2300      	movs	r3, #0
    if (_buffer && _buffer_size) {
 80a4eb2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  _offset = 0;
 80a4eb4:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a4eb6:	8723      	strh	r3, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
 80a4eb8:	b149      	cbz	r1, 80a4ece <_ZN3UDP11parsePacketEm+0x30>
 80a4eba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a4ebc:	b13a      	cbz	r2, 80a4ece <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
 80a4ebe:	6823      	ldr	r3, [r4, #0]
 80a4ec0:	4620      	mov	r0, r4
 80a4ec2:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80a4ec4:	462b      	mov	r3, r5
 80a4ec6:	47b0      	blx	r6
        if (result>0) {
 80a4ec8:	2800      	cmp	r0, #0
            _total = result;
 80a4eca:	bfc8      	it	gt
 80a4ecc:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
 80a4ece:	6823      	ldr	r3, [r4, #0]
 80a4ed0:	4620      	mov	r0, r4
}
 80a4ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return available();
 80a4ed6:	691b      	ldr	r3, [r3, #16]
 80a4ed8:	4718      	bx	r3
	...

080a4edc <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a4edc:	b510      	push	{r4, lr}
 80a4ede:	4604      	mov	r4, r0
 80a4ee0:	4b06      	ldr	r3, [pc, #24]	; (80a4efc <_ZN3UDPD1Ev+0x20>)
 80a4ee2:	f103 0208 	add.w	r2, r3, #8
 80a4ee6:	336c      	adds	r3, #108	; 0x6c
 80a4ee8:	6002      	str	r2, [r0, #0]
 80a4eea:	6103      	str	r3, [r0, #16]
 80a4eec:	f7ff fe52 	bl	80a4b94 <_ZN3UDP4stopEv>
 80a4ef0:	4620      	mov	r0, r4
 80a4ef2:	f7ff ff8f 	bl	80a4e14 <_ZN3UDP13releaseBufferEv>
 80a4ef6:	4620      	mov	r0, r4
 80a4ef8:	bd10      	pop	{r4, pc}
 80a4efa:	bf00      	nop
 80a4efc:	080aa2bc 	.word	0x080aa2bc

080a4f00 <_ZN3UDPD0Ev>:
 80a4f00:	b510      	push	{r4, lr}
 80a4f02:	4604      	mov	r4, r0
 80a4f04:	f7ff ffea 	bl	80a4edc <_ZN3UDPD1Ev>
 80a4f08:	4620      	mov	r0, r4
 80a4f0a:	214c      	movs	r1, #76	; 0x4c
 80a4f0c:	f000 fb79 	bl	80a5602 <_ZdlPvj>
 80a4f10:	4620      	mov	r0, r4
 80a4f12:	bd10      	pop	{r4, pc}

080a4f14 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a4f14:	4770      	bx	lr

080a4f16 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4f16:	7441      	strb	r1, [r0, #17]
}
 80a4f18:	4770      	bx	lr

080a4f1a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a4f1a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a4f1c:	7c00      	ldrb	r0, [r0, #16]
 80a4f1e:	f7fe fe59 	bl	80a3bd4 <hal_usart_available_data_for_write>
}
 80a4f22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4f26:	bd08      	pop	{r3, pc}

080a4f28 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a4f28:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a4f2a:	7c00      	ldrb	r0, [r0, #16]
 80a4f2c:	f7fe fe2a 	bl	80a3b84 <hal_usart_available>
}
 80a4f30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4f34:	bd08      	pop	{r3, pc}

080a4f36 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a4f36:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a4f38:	7c00      	ldrb	r0, [r0, #16]
 80a4f3a:	f7fe fe33 	bl	80a3ba4 <hal_usart_peek>
}
 80a4f3e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4f42:	bd08      	pop	{r3, pc}

080a4f44 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a4f44:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a4f46:	7c00      	ldrb	r0, [r0, #16]
 80a4f48:	f7fe fe24 	bl	80a3b94 <hal_usart_read>
}
 80a4f4c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4f50:	bd08      	pop	{r3, pc}

080a4f52 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a4f52:	7c00      	ldrb	r0, [r0, #16]
 80a4f54:	f7fe be2e 	b.w	80a3bb4 <hal_usart_flush>

080a4f58 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a4f58:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4f5a:	7c46      	ldrb	r6, [r0, #17]
{
 80a4f5c:	4604      	mov	r4, r0
 80a4f5e:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4f60:	b12e      	cbz	r6, 80a4f6e <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a4f62:	4629      	mov	r1, r5
 80a4f64:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a4f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a4f6a:	f7fe be03 	b.w	80a3b74 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4f6e:	7c00      	ldrb	r0, [r0, #16]
 80a4f70:	f7fe fe30 	bl	80a3bd4 <hal_usart_available_data_for_write>
 80a4f74:	2800      	cmp	r0, #0
 80a4f76:	dcf4      	bgt.n	80a4f62 <_ZN11USARTSerial5writeEh+0xa>
}
 80a4f78:	4630      	mov	r0, r6
 80a4f7a:	bd70      	pop	{r4, r5, r6, pc}

080a4f7c <_ZN11USARTSerialD0Ev>:
 80a4f7c:	b510      	push	{r4, lr}
 80a4f7e:	4604      	mov	r4, r0
 80a4f80:	2114      	movs	r1, #20
 80a4f82:	f000 fb3e 	bl	80a5602 <_ZdlPvj>
 80a4f86:	4620      	mov	r0, r4
 80a4f88:	bd10      	pop	{r4, pc}
	...

080a4f8c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a4f8c:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a4f90:	b510      	push	{r4, lr}
 80a4f92:	4604      	mov	r4, r0
 80a4f94:	4608      	mov	r0, r1
 80a4f96:	4611      	mov	r1, r2
 80a4f98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a4f9c:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a4fa0:	4a04      	ldr	r2, [pc, #16]	; (80a4fb4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a4fa2:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a4fa4:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a4fa6:	2201      	movs	r2, #1
 80a4fa8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a4faa:	461a      	mov	r2, r3
 80a4fac:	f7fe fdda 	bl	80a3b64 <hal_usart_init>
}
 80a4fb0:	4620      	mov	r0, r4
 80a4fb2:	bd10      	pop	{r4, pc}
 80a4fb4:	080aa334 	.word	0x080aa334

080a4fb8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a4fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a4fba:	4c1a      	ldr	r4, [pc, #104]	; (80a5024 <_Z22__fetch_global_Serial1v+0x6c>)
 80a4fbc:	6826      	ldr	r6, [r4, #0]
 80a4fbe:	b94e      	cbnz	r6, 80a4fd4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80a4fc0:	2084      	movs	r0, #132	; 0x84
 80a4fc2:	f7fb f86a 	bl	80a009a <_Znwj>
 80a4fc6:	4605      	mov	r5, r0
 80a4fc8:	b118      	cbz	r0, 80a4fd2 <_Z22__fetch_global_Serial1v+0x1a>
 80a4fca:	2284      	movs	r2, #132	; 0x84
 80a4fcc:	4631      	mov	r1, r6
 80a4fce:	f004 ff25 	bl	80a9e1c <memset>
 80a4fd2:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a4fd4:	4d14      	ldr	r5, [pc, #80]	; (80a5028 <_Z22__fetch_global_Serial1v+0x70>)
 80a4fd6:	682f      	ldr	r7, [r5, #0]
 80a4fd8:	b94f      	cbnz	r7, 80a4fee <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80a4fda:	2084      	movs	r0, #132	; 0x84
 80a4fdc:	f7fb f85d 	bl	80a009a <_Znwj>
 80a4fe0:	4606      	mov	r6, r0
 80a4fe2:	b118      	cbz	r0, 80a4fec <_Z22__fetch_global_Serial1v+0x34>
 80a4fe4:	2284      	movs	r2, #132	; 0x84
 80a4fe6:	4639      	mov	r1, r7
 80a4fe8:	f004 ff18 	bl	80a9e1c <memset>
 80a4fec:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a4fee:	4f0f      	ldr	r7, [pc, #60]	; (80a502c <_Z22__fetch_global_Serial1v+0x74>)
 80a4ff0:	7839      	ldrb	r1, [r7, #0]
 80a4ff2:	f3bf 8f5b 	dmb	ish
 80a4ff6:	f011 0601 	ands.w	r6, r1, #1
 80a4ffa:	d111      	bne.n	80a5020 <_Z22__fetch_global_Serial1v+0x68>
 80a4ffc:	4638      	mov	r0, r7
 80a4ffe:	f7fb f852 	bl	80a00a6 <__cxa_guard_acquire>
 80a5002:	b168      	cbz	r0, 80a5020 <_Z22__fetch_global_Serial1v+0x68>
 80a5004:	4631      	mov	r1, r6
 80a5006:	6822      	ldr	r2, [r4, #0]
 80a5008:	682b      	ldr	r3, [r5, #0]
 80a500a:	4809      	ldr	r0, [pc, #36]	; (80a5030 <_Z22__fetch_global_Serial1v+0x78>)
 80a500c:	f7ff ffbe 	bl	80a4f8c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a5010:	4638      	mov	r0, r7
 80a5012:	f7fb f84d 	bl	80a00b0 <__cxa_guard_release>
 80a5016:	4a07      	ldr	r2, [pc, #28]	; (80a5034 <_Z22__fetch_global_Serial1v+0x7c>)
 80a5018:	4907      	ldr	r1, [pc, #28]	; (80a5038 <_Z22__fetch_global_Serial1v+0x80>)
 80a501a:	4805      	ldr	r0, [pc, #20]	; (80a5030 <_Z22__fetch_global_Serial1v+0x78>)
 80a501c:	f000 faec 	bl	80a55f8 <__aeabi_atexit>
#endif
	return serial1;
}
 80a5020:	4803      	ldr	r0, [pc, #12]	; (80a5030 <_Z22__fetch_global_Serial1v+0x78>)
 80a5022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a5024:	20000ed4 	.word	0x20000ed4
 80a5028:	20000ed8 	.word	0x20000ed8
 80a502c:	20000ed0 	.word	0x20000ed0
 80a5030:	20000edc 	.word	0x20000edc
 80a5034:	2000006c 	.word	0x2000006c
 80a5038:	080a4f15 	.word	0x080a4f15

080a503c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a503c:	7441      	strb	r1, [r0, #17]
}
 80a503e:	4770      	bx	lr

080a5040 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a5040:	4770      	bx	lr

080a5042 <_ZN9USBSerial4readEv>:
{
 80a5042:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a5044:	2100      	movs	r1, #0
 80a5046:	7c00      	ldrb	r0, [r0, #16]
 80a5048:	f7fe fde4 	bl	80a3c14 <HAL_USB_USART_Receive_Data>
}
 80a504c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a5050:	bd08      	pop	{r3, pc}

080a5052 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a5052:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a5054:	2101      	movs	r1, #1
 80a5056:	7c00      	ldrb	r0, [r0, #16]
 80a5058:	f7fe fddc 	bl	80a3c14 <HAL_USB_USART_Receive_Data>
}
 80a505c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a5060:	bd08      	pop	{r3, pc}

080a5062 <_ZN9USBSerial17availableForWriteEv>:
{
 80a5062:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a5064:	7c00      	ldrb	r0, [r0, #16]
 80a5066:	f7fe fdcd 	bl	80a3c04 <HAL_USB_USART_Available_Data_For_Write>
}
 80a506a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a506e:	bd08      	pop	{r3, pc}

080a5070 <_ZN9USBSerial9availableEv>:
{
 80a5070:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a5072:	7c00      	ldrb	r0, [r0, #16]
 80a5074:	f7fe fdbe 	bl	80a3bf4 <HAL_USB_USART_Available_Data>
}
 80a5078:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a507c:	bd08      	pop	{r3, pc}

080a507e <_ZN9USBSerial5writeEh>:
{
 80a507e:	b538      	push	{r3, r4, r5, lr}
 80a5080:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a5082:	7c00      	ldrb	r0, [r0, #16]
{
 80a5084:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a5086:	f7fe fdbd 	bl	80a3c04 <HAL_USB_USART_Available_Data_For_Write>
 80a508a:	2800      	cmp	r0, #0
 80a508c:	dc01      	bgt.n	80a5092 <_ZN9USBSerial5writeEh+0x14>
 80a508e:	7c60      	ldrb	r0, [r4, #17]
 80a5090:	b128      	cbz	r0, 80a509e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a5092:	4629      	mov	r1, r5
 80a5094:	7c20      	ldrb	r0, [r4, #16]
 80a5096:	f7fe fdc5 	bl	80a3c24 <HAL_USB_USART_Send_Data>
 80a509a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a509e:	bd38      	pop	{r3, r4, r5, pc}

080a50a0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a50a0:	7c00      	ldrb	r0, [r0, #16]
 80a50a2:	f7fe bdc7 	b.w	80a3c34 <HAL_USB_USART_Flush_Data>

080a50a6 <_ZN9USBSerialD0Ev>:
 80a50a6:	b510      	push	{r4, lr}
 80a50a8:	4604      	mov	r4, r0
 80a50aa:	2114      	movs	r1, #20
 80a50ac:	f000 faa9 	bl	80a5602 <_ZdlPvj>
 80a50b0:	4620      	mov	r0, r4
 80a50b2:	bd10      	pop	{r4, pc}

080a50b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a50b4:	b510      	push	{r4, lr}
 80a50b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a50ba:	4604      	mov	r4, r0
 80a50bc:	4608      	mov	r0, r1
 80a50be:	2100      	movs	r1, #0
 80a50c0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a50c4:	4b04      	ldr	r3, [pc, #16]	; (80a50d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a50c6:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a50c8:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a50ca:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a50cc:	4611      	mov	r1, r2
  _blocking = true;
 80a50ce:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a50d0:	f7fe fd88 	bl	80a3be4 <HAL_USB_USART_Init>
}
 80a50d4:	4620      	mov	r0, r4
 80a50d6:	bd10      	pop	{r4, pc}
 80a50d8:	080aa364 	.word	0x080aa364

080a50dc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a50dc:	b510      	push	{r4, lr}
 80a50de:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a50e0:	2214      	movs	r2, #20
 80a50e2:	2100      	movs	r1, #0
 80a50e4:	f004 fe9a 	bl	80a9e1c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a50e8:	4620      	mov	r0, r4
 80a50ea:	bd10      	pop	{r4, pc}

080a50ec <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a50ec:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a50ee:	4d0f      	ldr	r5, [pc, #60]	; (80a512c <_Z16_fetch_usbserialv+0x40>)
{
 80a50f0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a50f2:	a801      	add	r0, sp, #4
 80a50f4:	f7ff fff2 	bl	80a50dc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a50f8:	7829      	ldrb	r1, [r5, #0]
 80a50fa:	f3bf 8f5b 	dmb	ish
 80a50fe:	f011 0401 	ands.w	r4, r1, #1
 80a5102:	d110      	bne.n	80a5126 <_Z16_fetch_usbserialv+0x3a>
 80a5104:	4628      	mov	r0, r5
 80a5106:	f7fa ffce 	bl	80a00a6 <__cxa_guard_acquire>
 80a510a:	b160      	cbz	r0, 80a5126 <_Z16_fetch_usbserialv+0x3a>
 80a510c:	4621      	mov	r1, r4
 80a510e:	aa01      	add	r2, sp, #4
 80a5110:	4807      	ldr	r0, [pc, #28]	; (80a5130 <_Z16_fetch_usbserialv+0x44>)
 80a5112:	f7ff ffcf 	bl	80a50b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a5116:	4628      	mov	r0, r5
 80a5118:	f7fa ffca 	bl	80a00b0 <__cxa_guard_release>
 80a511c:	4a05      	ldr	r2, [pc, #20]	; (80a5134 <_Z16_fetch_usbserialv+0x48>)
 80a511e:	4906      	ldr	r1, [pc, #24]	; (80a5138 <_Z16_fetch_usbserialv+0x4c>)
 80a5120:	4803      	ldr	r0, [pc, #12]	; (80a5130 <_Z16_fetch_usbserialv+0x44>)
 80a5122:	f000 fa69 	bl	80a55f8 <__aeabi_atexit>
	return _usbserial;
}
 80a5126:	4802      	ldr	r0, [pc, #8]	; (80a5130 <_Z16_fetch_usbserialv+0x44>)
 80a5128:	b007      	add	sp, #28
 80a512a:	bd30      	pop	{r4, r5, pc}
 80a512c:	20000ef0 	.word	0x20000ef0
 80a5130:	20000ef8 	.word	0x20000ef8
 80a5134:	2000006c 	.word	0x2000006c
 80a5138:	080a5041 	.word	0x080a5041

080a513c <_Z23acquireUSBSerial1Bufferv>:
 80a513c:	b510      	push	{r4, lr}
 80a513e:	4604      	mov	r4, r0
 80a5140:	2214      	movs	r2, #20
 80a5142:	2100      	movs	r1, #0
 80a5144:	f004 fe6a 	bl	80a9e1c <memset>
 80a5148:	4620      	mov	r0, r4
 80a514a:	bd10      	pop	{r4, pc}

080a514c <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a514c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a514e:	4c0f      	ldr	r4, [pc, #60]	; (80a518c <_Z17_fetch_usbserial1v+0x40>)
{
 80a5150:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a5152:	a801      	add	r0, sp, #4
 80a5154:	f7ff fff2 	bl	80a513c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a5158:	7823      	ldrb	r3, [r4, #0]
 80a515a:	f3bf 8f5b 	dmb	ish
 80a515e:	07db      	lsls	r3, r3, #31
 80a5160:	d410      	bmi.n	80a5184 <_Z17_fetch_usbserial1v+0x38>
 80a5162:	4620      	mov	r0, r4
 80a5164:	f7fa ff9f 	bl	80a00a6 <__cxa_guard_acquire>
 80a5168:	b160      	cbz	r0, 80a5184 <_Z17_fetch_usbserial1v+0x38>
 80a516a:	2101      	movs	r1, #1
 80a516c:	aa01      	add	r2, sp, #4
 80a516e:	4808      	ldr	r0, [pc, #32]	; (80a5190 <_Z17_fetch_usbserial1v+0x44>)
 80a5170:	f7ff ffa0 	bl	80a50b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a5174:	4620      	mov	r0, r4
 80a5176:	f7fa ff9b 	bl	80a00b0 <__cxa_guard_release>
 80a517a:	4a06      	ldr	r2, [pc, #24]	; (80a5194 <_Z17_fetch_usbserial1v+0x48>)
 80a517c:	4906      	ldr	r1, [pc, #24]	; (80a5198 <_Z17_fetch_usbserial1v+0x4c>)
 80a517e:	4804      	ldr	r0, [pc, #16]	; (80a5190 <_Z17_fetch_usbserial1v+0x44>)
 80a5180:	f000 fa3a 	bl	80a55f8 <__aeabi_atexit>
  return _usbserial1;
}
 80a5184:	4802      	ldr	r0, [pc, #8]	; (80a5190 <_Z17_fetch_usbserial1v+0x44>)
 80a5186:	b006      	add	sp, #24
 80a5188:	bd10      	pop	{r4, pc}
 80a518a:	bf00      	nop
 80a518c:	20000ef4 	.word	0x20000ef4
 80a5190:	20000f0c 	.word	0x20000f0c
 80a5194:	2000006c 	.word	0x2000006c
 80a5198:	080a5041 	.word	0x080a5041

080a519c <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a519c:	2200      	movs	r2, #0
 80a519e:	6840      	ldr	r0, [r0, #4]
 80a51a0:	4611      	mov	r1, r2
 80a51a2:	f7fe bdeb 	b.w	80a3d7c <network_ready>

080a51a6 <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a51a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a51a8:	4615      	mov	r5, r2
 80a51aa:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a51ac:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a51ae:	460e      	mov	r6, r1
 80a51b0:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a51b2:	2100      	movs	r1, #0
 80a51b4:	a803      	add	r0, sp, #12
 80a51b6:	f004 fe31 	bl	80a9e1c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a51ba:	4628      	mov	r0, r5
 80a51bc:	f004 feb1 	bl	80a9f22 <strlen>
 80a51c0:	2700      	movs	r7, #0
 80a51c2:	b281      	uxth	r1, r0
 80a51c4:	6873      	ldr	r3, [r6, #4]
 80a51c6:	4628      	mov	r0, r5
 80a51c8:	9700      	str	r7, [sp, #0]
 80a51ca:	aa03      	add	r2, sp, #12
 80a51cc:	f7fe fd3a 	bl	80a3c44 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a51d0:	b130      	cbz	r0, 80a51e0 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a51d2:	4639      	mov	r1, r7
 80a51d4:	4620      	mov	r0, r4
 80a51d6:	f7ff f9ab 	bl	80a4530 <_ZN9IPAddressC1Em>
    }
 80a51da:	4620      	mov	r0, r4
 80a51dc:	b009      	add	sp, #36	; 0x24
 80a51de:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a51e0:	4620      	mov	r0, r4
 80a51e2:	a903      	add	r1, sp, #12
 80a51e4:	f7ff f992 	bl	80a450c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a51e8:	e7f7      	b.n	80a51da <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a51ea <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a51ea:	2200      	movs	r2, #0
 80a51ec:	6840      	ldr	r0, [r0, #4]
 80a51ee:	4611      	mov	r1, r2
 80a51f0:	f7fe bde4 	b.w	80a3dbc <network_listening>

080a51f4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a51f4:	2200      	movs	r2, #0
 80a51f6:	6840      	ldr	r0, [r0, #4]
 80a51f8:	4611      	mov	r1, r2
 80a51fa:	f7fe bdef 	b.w	80a3ddc <network_get_listen_timeout>

080a51fe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a51fe:	2200      	movs	r2, #0
 80a5200:	6840      	ldr	r0, [r0, #4]
 80a5202:	f7fe bde3 	b.w	80a3dcc <network_set_listen_timeout>

080a5206 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a5206:	2200      	movs	r2, #0
 80a5208:	6840      	ldr	r0, [r0, #4]
 80a520a:	f081 0101 	eor.w	r1, r1, #1
 80a520e:	f7fe bdcd 	b.w	80a3dac <network_listen>

080a5212 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a5212:	2300      	movs	r3, #0
 80a5214:	6840      	ldr	r0, [r0, #4]
 80a5216:	461a      	mov	r2, r3
 80a5218:	4619      	mov	r1, r3
 80a521a:	f7fe bdbf 	b.w	80a3d9c <network_off>

080a521e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a521e:	2300      	movs	r3, #0
 80a5220:	6840      	ldr	r0, [r0, #4]
 80a5222:	461a      	mov	r2, r3
 80a5224:	4619      	mov	r1, r3
 80a5226:	f7fe bdb1 	b.w	80a3d8c <network_on>

080a522a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a522a:	2200      	movs	r2, #0
 80a522c:	6840      	ldr	r0, [r0, #4]
 80a522e:	4611      	mov	r1, r2
 80a5230:	f7fe bd94 	b.w	80a3d5c <network_connecting>

080a5234 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a5234:	2200      	movs	r2, #0
 80a5236:	2102      	movs	r1, #2
 80a5238:	6840      	ldr	r0, [r0, #4]
 80a523a:	f7fe bd97 	b.w	80a3d6c <network_disconnect>

080a523e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a523e:	2300      	movs	r3, #0
 80a5240:	6840      	ldr	r0, [r0, #4]
 80a5242:	461a      	mov	r2, r3
 80a5244:	f7fe bd82 	b.w	80a3d4c <network_connect>

080a5248 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a5248:	2204      	movs	r2, #4
 80a524a:	4b02      	ldr	r3, [pc, #8]	; (80a5254 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a524c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a524e:	4a02      	ldr	r2, [pc, #8]	; (80a5258 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a5250:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a5252:	4770      	bx	lr
 80a5254:	20000f20 	.word	0x20000f20
 80a5258:	080aa394 	.word	0x080aa394

080a525c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a525c:	b510      	push	{r4, lr}
 80a525e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a5260:	f004 fe5f 	bl	80a9f22 <strlen>
 80a5264:	1e43      	subs	r3, r0, #1
 80a5266:	4620      	mov	r0, r4
 80a5268:	4423      	add	r3, r4
	while(i<j){
 80a526a:	4283      	cmp	r3, r0
 80a526c:	d906      	bls.n	80a527c <_Z11str_reversePc+0x20>
		c = *i;
 80a526e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a5270:	7819      	ldrb	r1, [r3, #0]
 80a5272:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a5276:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a527a:	e7f6      	b.n	80a526a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a527c:	bd10      	pop	{r4, pc}

080a527e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a527e:	b570      	push	{r4, r5, r6, lr}
 80a5280:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a5282:	1e91      	subs	r1, r2, #2
 80a5284:	2922      	cmp	r1, #34	; 0x22
 80a5286:	d822      	bhi.n	80a52ce <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 80a5288:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a528a:	b168      	cbz	r0, 80a52a8 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a528c:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a5290:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a5294:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a5296:	2809      	cmp	r0, #9
                *ptr += '0';
 80a5298:	bf94      	ite	ls
 80a529a:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a529c:	3157      	addhi	r1, #87	; 0x57
 80a529e:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 80a52a0:	4630      	mov	r0, r6
 80a52a2:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a52a6:	e7f0      	b.n	80a528a <ultoa+0xc>
 80a52a8:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a52aa:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 80a52ac:	4423      	add	r3, r4
 80a52ae:	4293      	cmp	r3, r2
 80a52b0:	d902      	bls.n	80a52b8 <ultoa+0x3a>
            *ptr++ = '0';
 80a52b2:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80a52b6:	e7fa      	b.n	80a52ae <ultoa+0x30>
 80a52b8:	1b5a      	subs	r2, r3, r5
 80a52ba:	42ab      	cmp	r3, r5
 80a52bc:	bf38      	it	cc
 80a52be:	2200      	movcc	r2, #0

	*ptr = '\0';
 80a52c0:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a52c2:	4620      	mov	r0, r4
	*ptr = '\0';
 80a52c4:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80a52c6:	f7ff ffc9 	bl	80a525c <_Z11str_reversePc>
	return buffer;
 80a52ca:	4620      	mov	r0, r4
}
 80a52cc:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a52ce:	2000      	movs	r0, #0
 80a52d0:	e7fc      	b.n	80a52cc <ultoa+0x4e>

080a52d2 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 80a52d2:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 80a52d4:	2301      	movs	r3, #1
 80a52d6:	f7ff ffd2 	bl	80a527e <ultoa>
}
 80a52da:	bd08      	pop	{r3, pc}

080a52dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a52dc:	4b01      	ldr	r3, [pc, #4]	; (80a52e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a52de:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a52e0:	4770      	bx	lr
 80a52e2:	bf00      	nop
 80a52e4:	20000008 	.word	0x20000008

080a52e8 <serialEventRun>:
{
 80a52e8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a52ea:	4b13      	ldr	r3, [pc, #76]	; (80a5338 <serialEventRun+0x50>)
 80a52ec:	b143      	cbz	r3, 80a5300 <serialEventRun+0x18>
 80a52ee:	f7ff fefd 	bl	80a50ec <_Z16_fetch_usbserialv>
 80a52f2:	6803      	ldr	r3, [r0, #0]
 80a52f4:	691b      	ldr	r3, [r3, #16]
 80a52f6:	4798      	blx	r3
 80a52f8:	2800      	cmp	r0, #0
 80a52fa:	dd01      	ble.n	80a5300 <serialEventRun+0x18>
        serialEvent();
 80a52fc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a5300:	4b0e      	ldr	r3, [pc, #56]	; (80a533c <serialEventRun+0x54>)
 80a5302:	b143      	cbz	r3, 80a5316 <serialEventRun+0x2e>
 80a5304:	f7ff fe58 	bl	80a4fb8 <_Z22__fetch_global_Serial1v>
 80a5308:	6803      	ldr	r3, [r0, #0]
 80a530a:	691b      	ldr	r3, [r3, #16]
 80a530c:	4798      	blx	r3
 80a530e:	2800      	cmp	r0, #0
 80a5310:	dd01      	ble.n	80a5316 <serialEventRun+0x2e>
        serialEvent1();
 80a5312:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a5316:	4b0a      	ldr	r3, [pc, #40]	; (80a5340 <serialEventRun+0x58>)
 80a5318:	b10b      	cbz	r3, 80a531e <serialEventRun+0x36>
 80a531a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a531e:	4b09      	ldr	r3, [pc, #36]	; (80a5344 <serialEventRun+0x5c>)
 80a5320:	b143      	cbz	r3, 80a5334 <serialEventRun+0x4c>
 80a5322:	f7ff ff13 	bl	80a514c <_Z17_fetch_usbserial1v>
 80a5326:	6803      	ldr	r3, [r0, #0]
 80a5328:	691b      	ldr	r3, [r3, #16]
 80a532a:	4798      	blx	r3
 80a532c:	2800      	cmp	r0, #0
 80a532e:	dd01      	ble.n	80a5334 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a5330:	f3af 8000 	nop.w
}
 80a5334:	bd08      	pop	{r3, pc}
 80a5336:	bf00      	nop
	...

080a5348 <_post_loop>:
{
 80a5348:	b508      	push	{r3, lr}
	serialEventRun();
 80a534a:	f7ff ffcd 	bl	80a52e8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a534e:	f7fe fb47 	bl	80a39e0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a5352:	4b01      	ldr	r3, [pc, #4]	; (80a5358 <_post_loop+0x10>)
 80a5354:	6018      	str	r0, [r3, #0]
}
 80a5356:	bd08      	pop	{r3, pc}
 80a5358:	20000f40 	.word	0x20000f40

080a535c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a535c:	4802      	ldr	r0, [pc, #8]	; (80a5368 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a535e:	4a03      	ldr	r2, [pc, #12]	; (80a536c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a5360:	4903      	ldr	r1, [pc, #12]	; (80a5370 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a5362:	1a12      	subs	r2, r2, r0
 80a5364:	f004 bd4c 	b.w	80a9e00 <memcpy>
 80a5368:	40024000 	.word	0x40024000
 80a536c:	40024004 	.word	0x40024004
 80a5370:	080aa9c0 	.word	0x080aa9c0

080a5374 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a5374:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a5376:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a5378:	461a      	mov	r2, r3
 80a537a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a537e:	9300      	str	r3, [sp, #0]
 80a5380:	f7fe fca2 	bl	80a3cc8 <system_ctrl_set_result>
}
 80a5384:	b003      	add	sp, #12
 80a5386:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a538c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a538c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a538e:	8843      	ldrh	r3, [r0, #2]
 80a5390:	2b0a      	cmp	r3, #10
 80a5392:	d008      	beq.n	80a53a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a5394:	2b50      	cmp	r3, #80	; 0x50
 80a5396:	d10b      	bne.n	80a53b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a5398:	4b09      	ldr	r3, [pc, #36]	; (80a53c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a539a:	681b      	ldr	r3, [r3, #0]
 80a539c:	b14b      	cbz	r3, 80a53b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a539e:	b003      	add	sp, #12
 80a53a0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a53a4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a53a6:	f7ff ffe5 	bl	80a5374 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a53aa:	b003      	add	sp, #12
 80a53ac:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a53b0:	2300      	movs	r3, #0
 80a53b2:	461a      	mov	r2, r3
 80a53b4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a53b8:	9300      	str	r3, [sp, #0]
 80a53ba:	f7fe fc85 	bl	80a3cc8 <system_ctrl_set_result>
}
 80a53be:	e7f4      	b.n	80a53aa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a53c0:	20000f2c 	.word	0x20000f2c

080a53c4 <module_user_init_hook>:
{
 80a53c4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a53c6:	4c12      	ldr	r4, [pc, #72]	; (80a5410 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a53c8:	2100      	movs	r1, #0
 80a53ca:	4812      	ldr	r0, [pc, #72]	; (80a5414 <module_user_init_hook+0x50>)
 80a53cc:	f7fe fd46 	bl	80a3e5c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a53d0:	4d11      	ldr	r5, [pc, #68]	; (80a5418 <module_user_init_hook+0x54>)
 80a53d2:	6823      	ldr	r3, [r4, #0]
 80a53d4:	42ab      	cmp	r3, r5
 80a53d6:	bf0c      	ite	eq
 80a53d8:	2201      	moveq	r2, #1
 80a53da:	2200      	movne	r2, #0
 80a53dc:	4b0f      	ldr	r3, [pc, #60]	; (80a541c <module_user_init_hook+0x58>)
 80a53de:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a53e0:	d002      	beq.n	80a53e8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a53e2:	f7ff ffbb 	bl	80a535c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a53e6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a53e8:	f7fe fae2 	bl	80a39b0 <HAL_RNG_GetRandomNumber>
 80a53ec:	4604      	mov	r4, r0
    srand(seed);
 80a53ee:	f004 fd1d 	bl	80a9e2c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a53f2:	4b0b      	ldr	r3, [pc, #44]	; (80a5420 <module_user_init_hook+0x5c>)
 80a53f4:	b113      	cbz	r3, 80a53fc <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a53f6:	4620      	mov	r0, r4
 80a53f8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a53fc:	2100      	movs	r1, #0
 80a53fe:	4808      	ldr	r0, [pc, #32]	; (80a5420 <module_user_init_hook+0x5c>)
 80a5400:	f7fe fc94 	bl	80a3d2c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a5404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a5408:	2100      	movs	r1, #0
 80a540a:	4806      	ldr	r0, [pc, #24]	; (80a5424 <module_user_init_hook+0x60>)
 80a540c:	f7fe bc52 	b.w	80a3cb4 <system_ctrl_set_app_request_handler>
 80a5410:	40024000 	.word	0x40024000
 80a5414:	080a52dd 	.word	0x080a52dd
 80a5418:	9a271c1e 	.word	0x9a271c1e
 80a541c:	20000f28 	.word	0x20000f28
 80a5420:	00000000 	.word	0x00000000
 80a5424:	080a538d 	.word	0x080a538d

080a5428 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a5428:	b510      	push	{r4, lr}
 80a542a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a542c:	6880      	ldr	r0, [r0, #8]
 80a542e:	b108      	cbz	r0, 80a5434 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a5430:	f7fe fab6 	bl	80a39a0 <os_mutex_recursive_destroy>
 80a5434:	4620      	mov	r0, r4
 80a5436:	bd10      	pop	{r4, pc}

080a5438 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a5438:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a543a:	b570      	push	{r4, r5, r6, lr}
 80a543c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a543e:	d901      	bls.n	80a5444 <pinAvailable+0xc>
    return false;
 80a5440:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a5442:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a5444:	f1a0 030d 	sub.w	r3, r0, #13
 80a5448:	2b02      	cmp	r3, #2
 80a544a:	d90b      	bls.n	80a5464 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a544c:	2801      	cmp	r0, #1
 80a544e:	d826      	bhi.n	80a549e <pinAvailable+0x66>
 80a5450:	f000 f892 	bl	80a5578 <_Z19__fetch_global_Wirev>
 80a5454:	2100      	movs	r1, #0
 80a5456:	7c00      	ldrb	r0, [r0, #16]
 80a5458:	f7fe fb32 	bl	80a3ac0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a545c:	f080 0001 	eor.w	r0, r0, #1
 80a5460:	b2c0      	uxtb	r0, r0
 80a5462:	e7ee      	b.n	80a5442 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a5464:	4e13      	ldr	r6, [pc, #76]	; (80a54b4 <pinAvailable+0x7c>)
 80a5466:	7831      	ldrb	r1, [r6, #0]
 80a5468:	f3bf 8f5b 	dmb	ish
 80a546c:	f011 0501 	ands.w	r5, r1, #1
 80a5470:	d10f      	bne.n	80a5492 <pinAvailable+0x5a>
 80a5472:	4630      	mov	r0, r6
 80a5474:	f7fa fe17 	bl	80a00a6 <__cxa_guard_acquire>
 80a5478:	b158      	cbz	r0, 80a5492 <pinAvailable+0x5a>
 80a547a:	4629      	mov	r1, r5
 80a547c:	480e      	ldr	r0, [pc, #56]	; (80a54b8 <pinAvailable+0x80>)
 80a547e:	f7ff f96d 	bl	80a475c <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a5482:	4630      	mov	r0, r6
 80a5484:	f7fa fe14 	bl	80a00b0 <__cxa_guard_release>
 80a5488:	4a0c      	ldr	r2, [pc, #48]	; (80a54bc <pinAvailable+0x84>)
 80a548a:	490d      	ldr	r1, [pc, #52]	; (80a54c0 <pinAvailable+0x88>)
 80a548c:	480a      	ldr	r0, [pc, #40]	; (80a54b8 <pinAvailable+0x80>)
 80a548e:	f000 f8b3 	bl	80a55f8 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a5492:	4b09      	ldr	r3, [pc, #36]	; (80a54b8 <pinAvailable+0x80>)
 80a5494:	7818      	ldrb	r0, [r3, #0]
 80a5496:	f7fe fb5d 	bl	80a3b54 <hal_spi_is_enabled>
 80a549a:	2800      	cmp	r0, #0
 80a549c:	d1d0      	bne.n	80a5440 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a549e:	3c12      	subs	r4, #18
 80a54a0:	2c01      	cmp	r4, #1
 80a54a2:	d805      	bhi.n	80a54b0 <pinAvailable+0x78>
 80a54a4:	f7ff fd88 	bl	80a4fb8 <_Z22__fetch_global_Serial1v>
 80a54a8:	7c00      	ldrb	r0, [r0, #16]
 80a54aa:	f7fe fb8b 	bl	80a3bc4 <hal_usart_is_enabled>
 80a54ae:	e7d5      	b.n	80a545c <pinAvailable+0x24>
  return true; // 'pin' is available
 80a54b0:	2001      	movs	r0, #1
 80a54b2:	e7c6      	b.n	80a5442 <pinAvailable+0xa>
 80a54b4:	20000f30 	.word	0x20000f30
 80a54b8:	20000f34 	.word	0x20000f34
 80a54bc:	2000006c 	.word	0x2000006c
 80a54c0:	080a5429 	.word	0x080a5429

080a54c4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a54c4:	2817      	cmp	r0, #23
{
 80a54c6:	b538      	push	{r3, r4, r5, lr}
 80a54c8:	4604      	mov	r4, r0
 80a54ca:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a54cc:	d80a      	bhi.n	80a54e4 <pinMode+0x20>
 80a54ce:	29ff      	cmp	r1, #255	; 0xff
 80a54d0:	d008      	beq.n	80a54e4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a54d2:	f7ff ffb1 	bl	80a5438 <pinAvailable>
 80a54d6:	b128      	cbz	r0, 80a54e4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a54d8:	4629      	mov	r1, r5
 80a54da:	4620      	mov	r0, r4
}
 80a54dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a54e0:	f7fe baa6 	b.w	80a3a30 <HAL_Pin_Mode>
}
 80a54e4:	bd38      	pop	{r3, r4, r5, pc}

080a54e6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a54e6:	b538      	push	{r3, r4, r5, lr}
 80a54e8:	4604      	mov	r4, r0
 80a54ea:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a54ec:	f7fe faa8 	bl	80a3a40 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a54f0:	28ff      	cmp	r0, #255	; 0xff
 80a54f2:	d010      	beq.n	80a5516 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a54f4:	2806      	cmp	r0, #6
 80a54f6:	d804      	bhi.n	80a5502 <digitalWrite+0x1c>
 80a54f8:	234d      	movs	r3, #77	; 0x4d
 80a54fa:	fa23 f000 	lsr.w	r0, r3, r0
 80a54fe:	07c3      	lsls	r3, r0, #31
 80a5500:	d409      	bmi.n	80a5516 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a5502:	4620      	mov	r0, r4
 80a5504:	f7ff ff98 	bl	80a5438 <pinAvailable>
 80a5508:	b128      	cbz	r0, 80a5516 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a550a:	4629      	mov	r1, r5
 80a550c:	4620      	mov	r0, r4
}
 80a550e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a5512:	f7fe ba9d 	b.w	80a3a50 <HAL_GPIO_Write>
}
 80a5516:	bd38      	pop	{r3, r4, r5, pc}

080a5518 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a5518:	b510      	push	{r4, lr}
 80a551a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a551c:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a551e:	bf9c      	itt	ls
 80a5520:	340a      	addls	r4, #10
 80a5522:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a5524:	4620      	mov	r0, r4
 80a5526:	f7ff ff87 	bl	80a5438 <pinAvailable>
 80a552a:	b150      	cbz	r0, 80a5542 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a552c:	2103      	movs	r1, #3
 80a552e:	4620      	mov	r0, r4
 80a5530:	f7fe fa76 	bl	80a3a20 <HAL_Validate_Pin_Function>
 80a5534:	2803      	cmp	r0, #3
 80a5536:	d104      	bne.n	80a5542 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a5538:	4620      	mov	r0, r4
}
 80a553a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a553e:	f7fe ba8f 	b.w	80a3a60 <hal_adc_read>
}
 80a5542:	2000      	movs	r0, #0
 80a5544:	bd10      	pop	{r4, pc}
	...

080a5548 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a5548:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a554a:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a554c:	2520      	movs	r5, #32
 80a554e:	8043      	strh	r3, [r0, #2]
 80a5550:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5552:	4e08      	ldr	r6, [pc, #32]	; (80a5574 <_Z17acquireWireBufferv+0x2c>)
{
 80a5554:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a5556:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5558:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a555a:	6085      	str	r5, [r0, #8]
 80a555c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a555e:	4628      	mov	r0, r5
 80a5560:	f000 f851 	bl	80a5606 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5564:	4631      	mov	r1, r6
	};
 80a5566:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5568:	4628      	mov	r0, r5
 80a556a:	f000 f84c 	bl	80a5606 <_ZnajRKSt9nothrow_t>
	};
 80a556e:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a5570:	4620      	mov	r0, r4
 80a5572:	bd70      	pop	{r4, r5, r6, pc}
 80a5574:	080aa3c0 	.word	0x080aa3c0

080a5578 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a5578:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a557a:	4d0f      	ldr	r5, [pc, #60]	; (80a55b8 <_Z19__fetch_global_Wirev+0x40>)
{
 80a557c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a557e:	7829      	ldrb	r1, [r5, #0]
 80a5580:	f3bf 8f5b 	dmb	ish
 80a5584:	f011 0401 	ands.w	r4, r1, #1
 80a5588:	d113      	bne.n	80a55b2 <_Z19__fetch_global_Wirev+0x3a>
 80a558a:	4628      	mov	r0, r5
 80a558c:	f7fa fd8b 	bl	80a00a6 <__cxa_guard_acquire>
 80a5590:	b178      	cbz	r0, 80a55b2 <_Z19__fetch_global_Wirev+0x3a>
 80a5592:	a801      	add	r0, sp, #4
 80a5594:	f7ff ffd8 	bl	80a5548 <_Z17acquireWireBufferv>
 80a5598:	4621      	mov	r1, r4
 80a559a:	aa01      	add	r2, sp, #4
 80a559c:	4807      	ldr	r0, [pc, #28]	; (80a55bc <_Z19__fetch_global_Wirev+0x44>)
 80a559e:	f7fe ff7b 	bl	80a4498 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a55a2:	4628      	mov	r0, r5
 80a55a4:	f7fa fd84 	bl	80a00b0 <__cxa_guard_release>
 80a55a8:	4a05      	ldr	r2, [pc, #20]	; (80a55c0 <_Z19__fetch_global_Wirev+0x48>)
 80a55aa:	4906      	ldr	r1, [pc, #24]	; (80a55c4 <_Z19__fetch_global_Wirev+0x4c>)
 80a55ac:	4803      	ldr	r0, [pc, #12]	; (80a55bc <_Z19__fetch_global_Wirev+0x44>)
 80a55ae:	f000 f823 	bl	80a55f8 <__aeabi_atexit>
	return wire;
}
 80a55b2:	4802      	ldr	r0, [pc, #8]	; (80a55bc <_Z19__fetch_global_Wirev+0x44>)
 80a55b4:	b007      	add	sp, #28
 80a55b6:	bd30      	pop	{r4, r5, pc}
 80a55b8:	20000f44 	.word	0x20000f44
 80a55bc:	20000f48 	.word	0x20000f48
 80a55c0:	2000006c 	.word	0x2000006c
 80a55c4:	080a4441 	.word	0x080a4441

080a55c8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a55c8:	2300      	movs	r3, #0
 80a55ca:	b513      	push	{r0, r1, r4, lr}
 80a55cc:	4c07      	ldr	r4, [pc, #28]	; (80a55ec <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a55ce:	461a      	mov	r2, r3
 80a55d0:	4619      	mov	r1, r3
 80a55d2:	4620      	mov	r0, r4
 80a55d4:	9300      	str	r3, [sp, #0]
 80a55d6:	f7fe ffc1 	bl	80a455c <_ZN9IPAddressC1Ehhhh>
 80a55da:	4620      	mov	r0, r4
 80a55dc:	4a04      	ldr	r2, [pc, #16]	; (80a55f0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a55de:	4905      	ldr	r1, [pc, #20]	; (80a55f4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a55e0:	b002      	add	sp, #8
 80a55e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a55e6:	f000 b807 	b.w	80a55f8 <__aeabi_atexit>
 80a55ea:	bf00      	nop
 80a55ec:	20000f5c 	.word	0x20000f5c
 80a55f0:	2000006c 	.word	0x2000006c
 80a55f4:	080a388d 	.word	0x080a388d

080a55f8 <__aeabi_atexit>:
 80a55f8:	460b      	mov	r3, r1
 80a55fa:	4601      	mov	r1, r0
 80a55fc:	4618      	mov	r0, r3
 80a55fe:	f004 bbf1 	b.w	80a9de4 <__cxa_atexit>

080a5602 <_ZdlPvj>:
 80a5602:	f7fa bd4e 	b.w	80a00a2 <_ZdlPv>

080a5606 <_ZnajRKSt9nothrow_t>:
 80a5606:	f7fa bd4a 	b.w	80a009e <_Znaj>

080a560a <_ZSt25__throw_bad_function_callv>:
 80a560a:	b508      	push	{r3, lr}
 80a560c:	f7fe fc0e 	bl	80a3e2c <abort>

080a5610 <cos>:
 80a5610:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a5612:	4d28      	ldr	r5, [pc, #160]	; (80a56b4 <cos+0xa4>)
 80a5614:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a5618:	42ab      	cmp	r3, r5
 80a561a:	b087      	sub	sp, #28
 80a561c:	dd21      	ble.n	80a5662 <cos+0x52>
 80a561e:	4d26      	ldr	r5, [pc, #152]	; (80a56b8 <cos+0xa8>)
 80a5620:	42ab      	cmp	r3, r5
 80a5622:	dd09      	ble.n	80a5638 <cos+0x28>
 80a5624:	4602      	mov	r2, r0
 80a5626:	460b      	mov	r3, r1
 80a5628:	f003 fbac 	bl	80a8d84 <__aeabi_dsub>
 80a562c:	4602      	mov	r2, r0
 80a562e:	460b      	mov	r3, r1
 80a5630:	4610      	mov	r0, r2
 80a5632:	4619      	mov	r1, r3
 80a5634:	b007      	add	sp, #28
 80a5636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a5638:	aa02      	add	r2, sp, #8
 80a563a:	f001 f891 	bl	80a6760 <__ieee754_rem_pio2>
 80a563e:	f000 0003 	and.w	r0, r0, #3
 80a5642:	2801      	cmp	r0, #1
 80a5644:	d017      	beq.n	80a5676 <cos+0x66>
 80a5646:	2802      	cmp	r0, #2
 80a5648:	d029      	beq.n	80a569e <cos+0x8e>
 80a564a:	b1f8      	cbz	r0, 80a568c <cos+0x7c>
 80a564c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a5650:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5654:	2401      	movs	r4, #1
 80a5656:	9400      	str	r4, [sp, #0]
 80a5658:	f002 fbea 	bl	80a7e30 <__kernel_sin>
 80a565c:	4602      	mov	r2, r0
 80a565e:	460b      	mov	r3, r1
 80a5660:	e7e6      	b.n	80a5630 <cos+0x20>
 80a5662:	2200      	movs	r2, #0
 80a5664:	2300      	movs	r3, #0
 80a5666:	f001 fe97 	bl	80a7398 <__kernel_cos>
 80a566a:	4602      	mov	r2, r0
 80a566c:	460b      	mov	r3, r1
 80a566e:	4610      	mov	r0, r2
 80a5670:	4619      	mov	r1, r3
 80a5672:	b007      	add	sp, #28
 80a5674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a5676:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a567a:	9000      	str	r0, [sp, #0]
 80a567c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5680:	f002 fbd6 	bl	80a7e30 <__kernel_sin>
 80a5684:	4602      	mov	r2, r0
 80a5686:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a568a:	e7d1      	b.n	80a5630 <cos+0x20>
 80a568c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a5690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5694:	f001 fe80 	bl	80a7398 <__kernel_cos>
 80a5698:	4602      	mov	r2, r0
 80a569a:	460b      	mov	r3, r1
 80a569c:	e7c8      	b.n	80a5630 <cos+0x20>
 80a569e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a56a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a56a6:	f001 fe77 	bl	80a7398 <__kernel_cos>
 80a56aa:	4602      	mov	r2, r0
 80a56ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a56b0:	e7be      	b.n	80a5630 <cos+0x20>
 80a56b2:	bf00      	nop
 80a56b4:	3fe921fb 	.word	0x3fe921fb
 80a56b8:	7fefffff 	.word	0x7fefffff

080a56bc <cosf>:
 80a56bc:	b500      	push	{lr}
 80a56be:	4a1c      	ldr	r2, [pc, #112]	; (80a5730 <cosf+0x74>)
 80a56c0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80a56c4:	4293      	cmp	r3, r2
 80a56c6:	b083      	sub	sp, #12
 80a56c8:	dd18      	ble.n	80a56fc <cosf+0x40>
 80a56ca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80a56ce:	db05      	blt.n	80a56dc <cosf+0x20>
 80a56d0:	4601      	mov	r1, r0
 80a56d2:	f004 f85b 	bl	80a978c <__aeabi_fsub>
 80a56d6:	b003      	add	sp, #12
 80a56d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80a56dc:	4669      	mov	r1, sp
 80a56de:	f001 fce7 	bl	80a70b0 <__ieee754_rem_pio2f>
 80a56e2:	f000 0203 	and.w	r2, r0, #3
 80a56e6:	2a01      	cmp	r2, #1
 80a56e8:	d00e      	beq.n	80a5708 <cosf+0x4c>
 80a56ea:	2a02      	cmp	r2, #2
 80a56ec:	d018      	beq.n	80a5720 <cosf+0x64>
 80a56ee:	b192      	cbz	r2, 80a5716 <cosf+0x5a>
 80a56f0:	2201      	movs	r2, #1
 80a56f2:	9901      	ldr	r1, [sp, #4]
 80a56f4:	9800      	ldr	r0, [sp, #0]
 80a56f6:	f003 f895 	bl	80a8824 <__kernel_sinf>
 80a56fa:	e7ec      	b.n	80a56d6 <cosf+0x1a>
 80a56fc:	2100      	movs	r1, #0
 80a56fe:	f002 fc59 	bl	80a7fb4 <__kernel_cosf>
 80a5702:	b003      	add	sp, #12
 80a5704:	f85d fb04 	ldr.w	pc, [sp], #4
 80a5708:	9901      	ldr	r1, [sp, #4]
 80a570a:	9800      	ldr	r0, [sp, #0]
 80a570c:	f003 f88a 	bl	80a8824 <__kernel_sinf>
 80a5710:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a5714:	e7df      	b.n	80a56d6 <cosf+0x1a>
 80a5716:	9901      	ldr	r1, [sp, #4]
 80a5718:	9800      	ldr	r0, [sp, #0]
 80a571a:	f002 fc4b 	bl	80a7fb4 <__kernel_cosf>
 80a571e:	e7da      	b.n	80a56d6 <cosf+0x1a>
 80a5720:	9901      	ldr	r1, [sp, #4]
 80a5722:	9800      	ldr	r0, [sp, #0]
 80a5724:	f002 fc46 	bl	80a7fb4 <__kernel_cosf>
 80a5728:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a572c:	e7d3      	b.n	80a56d6 <cosf+0x1a>
 80a572e:	bf00      	nop
 80a5730:	3f490fd8 	.word	0x3f490fd8

080a5734 <pow>:
 80a5734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5738:	b08f      	sub	sp, #60	; 0x3c
 80a573a:	461d      	mov	r5, r3
 80a573c:	4606      	mov	r6, r0
 80a573e:	460f      	mov	r7, r1
 80a5740:	4614      	mov	r4, r2
 80a5742:	f000 fa75 	bl	80a5c30 <__ieee754_pow>
 80a5746:	4ba4      	ldr	r3, [pc, #656]	; (80a59d8 <pow+0x2a4>)
 80a5748:	e9cd 0100 	strd	r0, r1, [sp]
 80a574c:	f993 9000 	ldrsb.w	r9, [r3]
 80a5750:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80a5754:	d038      	beq.n	80a57c8 <pow+0x94>
 80a5756:	4622      	mov	r2, r4
 80a5758:	462b      	mov	r3, r5
 80a575a:	4620      	mov	r0, r4
 80a575c:	4629      	mov	r1, r5
 80a575e:	f003 ff63 	bl	80a9628 <__aeabi_dcmpun>
 80a5762:	4683      	mov	fp, r0
 80a5764:	bb80      	cbnz	r0, 80a57c8 <pow+0x94>
 80a5766:	4632      	mov	r2, r6
 80a5768:	463b      	mov	r3, r7
 80a576a:	4630      	mov	r0, r6
 80a576c:	4639      	mov	r1, r7
 80a576e:	f003 ff5b 	bl	80a9628 <__aeabi_dcmpun>
 80a5772:	4680      	mov	r8, r0
 80a5774:	2800      	cmp	r0, #0
 80a5776:	f040 80d9 	bne.w	80a592c <pow+0x1f8>
 80a577a:	f04f 0a00 	mov.w	sl, #0
 80a577e:	f04f 0b00 	mov.w	fp, #0
 80a5782:	4630      	mov	r0, r6
 80a5784:	4639      	mov	r1, r7
 80a5786:	4652      	mov	r2, sl
 80a5788:	465b      	mov	r3, fp
 80a578a:	f003 ff1b 	bl	80a95c4 <__aeabi_dcmpeq>
 80a578e:	b300      	cbz	r0, 80a57d2 <pow+0x9e>
 80a5790:	4652      	mov	r2, sl
 80a5792:	465b      	mov	r3, fp
 80a5794:	4620      	mov	r0, r4
 80a5796:	4629      	mov	r1, r5
 80a5798:	f003 ff14 	bl	80a95c4 <__aeabi_dcmpeq>
 80a579c:	9003      	str	r0, [sp, #12]
 80a579e:	2800      	cmp	r0, #0
 80a57a0:	d048      	beq.n	80a5834 <pow+0x100>
 80a57a2:	2201      	movs	r2, #1
 80a57a4:	4b8d      	ldr	r3, [pc, #564]	; (80a59dc <pow+0x2a8>)
 80a57a6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a57aa:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a57ae:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80a57b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a57b6:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80a57ba:	f1b9 0f00 	cmp.w	r9, #0
 80a57be:	d068      	beq.n	80a5892 <pow+0x15e>
 80a57c0:	2300      	movs	r3, #0
 80a57c2:	4c87      	ldr	r4, [pc, #540]	; (80a59e0 <pow+0x2ac>)
 80a57c4:	e9cd 3400 	strd	r3, r4, [sp]
 80a57c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a57cc:	b00f      	add	sp, #60	; 0x3c
 80a57ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a57d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a57d6:	f003 f89f 	bl	80a8918 <finite>
 80a57da:	4680      	mov	r8, r0
 80a57dc:	2800      	cmp	r0, #0
 80a57de:	d069      	beq.n	80a58b4 <pow+0x180>
 80a57e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a57e4:	f04f 0800 	mov.w	r8, #0
 80a57e8:	f04f 0900 	mov.w	r9, #0
 80a57ec:	4642      	mov	r2, r8
 80a57ee:	464b      	mov	r3, r9
 80a57f0:	f003 fee8 	bl	80a95c4 <__aeabi_dcmpeq>
 80a57f4:	2800      	cmp	r0, #0
 80a57f6:	d0e7      	beq.n	80a57c8 <pow+0x94>
 80a57f8:	4630      	mov	r0, r6
 80a57fa:	4639      	mov	r1, r7
 80a57fc:	f003 f88c 	bl	80a8918 <finite>
 80a5800:	2800      	cmp	r0, #0
 80a5802:	d0e1      	beq.n	80a57c8 <pow+0x94>
 80a5804:	4620      	mov	r0, r4
 80a5806:	4629      	mov	r1, r5
 80a5808:	f003 f886 	bl	80a8918 <finite>
 80a580c:	2800      	cmp	r0, #0
 80a580e:	d0db      	beq.n	80a57c8 <pow+0x94>
 80a5810:	2004      	movs	r0, #4
 80a5812:	2100      	movs	r1, #0
 80a5814:	4b70      	ldr	r3, [pc, #448]	; (80a59d8 <pow+0x2a4>)
 80a5816:	4a71      	ldr	r2, [pc, #452]	; (80a59dc <pow+0x2a8>)
 80a5818:	f993 3000 	ldrsb.w	r3, [r3]
 80a581c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a5820:	2b02      	cmp	r3, #2
 80a5822:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a5826:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a582a:	9004      	str	r0, [sp, #16]
 80a582c:	910c      	str	r1, [sp, #48]	; 0x30
 80a582e:	9205      	str	r2, [sp, #20]
 80a5830:	d172      	bne.n	80a5918 <pow+0x1e4>
 80a5832:	e076      	b.n	80a5922 <pow+0x1ee>
 80a5834:	4620      	mov	r0, r4
 80a5836:	4629      	mov	r1, r5
 80a5838:	f003 f86e 	bl	80a8918 <finite>
 80a583c:	2800      	cmp	r0, #0
 80a583e:	d0c3      	beq.n	80a57c8 <pow+0x94>
 80a5840:	4652      	mov	r2, sl
 80a5842:	465b      	mov	r3, fp
 80a5844:	4620      	mov	r0, r4
 80a5846:	4629      	mov	r1, r5
 80a5848:	f003 fec6 	bl	80a95d8 <__aeabi_dcmplt>
 80a584c:	2800      	cmp	r0, #0
 80a584e:	d0bb      	beq.n	80a57c8 <pow+0x94>
 80a5850:	2101      	movs	r1, #1
 80a5852:	9a03      	ldr	r2, [sp, #12]
 80a5854:	4b60      	ldr	r3, [pc, #384]	; (80a59d8 <pow+0x2a4>)
 80a5856:	920c      	str	r2, [sp, #48]	; 0x30
 80a5858:	f993 3000 	ldrsb.w	r3, [r3]
 80a585c:	4a5f      	ldr	r2, [pc, #380]	; (80a59dc <pow+0x2a8>)
 80a585e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a5862:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a5866:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80a586a:	2b00      	cmp	r3, #0
 80a586c:	d17b      	bne.n	80a5966 <pow+0x232>
 80a586e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80a5872:	a804      	add	r0, sp, #16
 80a5874:	f003 f8d4 	bl	80a8a20 <matherr>
 80a5878:	2800      	cmp	r0, #0
 80a587a:	d07b      	beq.n	80a5974 <pow+0x240>
 80a587c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a587e:	b11b      	cbz	r3, 80a5888 <pow+0x154>
 80a5880:	f7fe fae4 	bl	80a3e4c <__errno>
 80a5884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a5886:	6003      	str	r3, [r0, #0]
 80a5888:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80a588c:	e9cd 3400 	strd	r3, r4, [sp]
 80a5890:	e79a      	b.n	80a57c8 <pow+0x94>
 80a5892:	a804      	add	r0, sp, #16
 80a5894:	f003 f8c4 	bl	80a8a20 <matherr>
 80a5898:	2800      	cmp	r0, #0
 80a589a:	d070      	beq.n	80a597e <pow+0x24a>
 80a589c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a589e:	2b00      	cmp	r3, #0
 80a58a0:	d0f2      	beq.n	80a5888 <pow+0x154>
 80a58a2:	f7fe fad3 	bl	80a3e4c <__errno>
 80a58a6:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80a58aa:	e9cd 3400 	strd	r3, r4, [sp]
 80a58ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a58b0:	6003      	str	r3, [r0, #0]
 80a58b2:	e789      	b.n	80a57c8 <pow+0x94>
 80a58b4:	4630      	mov	r0, r6
 80a58b6:	4639      	mov	r1, r7
 80a58b8:	f003 f82e 	bl	80a8918 <finite>
 80a58bc:	2800      	cmp	r0, #0
 80a58be:	d08f      	beq.n	80a57e0 <pow+0xac>
 80a58c0:	4620      	mov	r0, r4
 80a58c2:	4629      	mov	r1, r5
 80a58c4:	f003 f828 	bl	80a8918 <finite>
 80a58c8:	2800      	cmp	r0, #0
 80a58ca:	d089      	beq.n	80a57e0 <pow+0xac>
 80a58cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a58d0:	4610      	mov	r0, r2
 80a58d2:	4619      	mov	r1, r3
 80a58d4:	f003 fea8 	bl	80a9628 <__aeabi_dcmpun>
 80a58d8:	2800      	cmp	r0, #0
 80a58da:	f040 80a4 	bne.w	80a5a26 <pow+0x2f2>
 80a58de:	2203      	movs	r2, #3
 80a58e0:	9204      	str	r2, [sp, #16]
 80a58e2:	4a3d      	ldr	r2, [pc, #244]	; (80a59d8 <pow+0x2a4>)
 80a58e4:	4b3d      	ldr	r3, [pc, #244]	; (80a59dc <pow+0x2a8>)
 80a58e6:	f992 8000 	ldrsb.w	r8, [r2]
 80a58ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a58ee:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a58f2:	900c      	str	r0, [sp, #48]	; 0x30
 80a58f4:	9305      	str	r3, [sp, #20]
 80a58f6:	f1b8 0f00 	cmp.w	r8, #0
 80a58fa:	d145      	bne.n	80a5988 <pow+0x254>
 80a58fc:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
 80a5900:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80a59f4 <pow+0x2c0>
 80a5904:	4652      	mov	r2, sl
 80a5906:	465b      	mov	r3, fp
 80a5908:	4630      	mov	r0, r6
 80a590a:	4639      	mov	r1, r7
 80a590c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a5910:	f003 fe62 	bl	80a95d8 <__aeabi_dcmplt>
 80a5914:	2800      	cmp	r0, #0
 80a5916:	d146      	bne.n	80a59a6 <pow+0x272>
 80a5918:	a804      	add	r0, sp, #16
 80a591a:	f003 f881 	bl	80a8a20 <matherr>
 80a591e:	2800      	cmp	r0, #0
 80a5920:	d1ac      	bne.n	80a587c <pow+0x148>
 80a5922:	f7fe fa93 	bl	80a3e4c <__errno>
 80a5926:	2322      	movs	r3, #34	; 0x22
 80a5928:	6003      	str	r3, [r0, #0]
 80a592a:	e7a7      	b.n	80a587c <pow+0x148>
 80a592c:	2200      	movs	r2, #0
 80a592e:	2300      	movs	r3, #0
 80a5930:	4620      	mov	r0, r4
 80a5932:	4629      	mov	r1, r5
 80a5934:	f003 fe46 	bl	80a95c4 <__aeabi_dcmpeq>
 80a5938:	2800      	cmp	r0, #0
 80a593a:	f43f af45 	beq.w	80a57c8 <pow+0x94>
 80a593e:	2201      	movs	r2, #1
 80a5940:	2000      	movs	r0, #0
 80a5942:	4927      	ldr	r1, [pc, #156]	; (80a59e0 <pow+0x2ac>)
 80a5944:	4b25      	ldr	r3, [pc, #148]	; (80a59dc <pow+0x2a8>)
 80a5946:	f1b9 0f02 	cmp.w	r9, #2
 80a594a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a594e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a5952:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a5956:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80a595a:	9204      	str	r2, [sp, #16]
 80a595c:	9305      	str	r3, [sp, #20]
 80a595e:	d198      	bne.n	80a5892 <pow+0x15e>
 80a5960:	e9cd 0100 	strd	r0, r1, [sp]
 80a5964:	e730      	b.n	80a57c8 <pow+0x94>
 80a5966:	2000      	movs	r0, #0
 80a5968:	491e      	ldr	r1, [pc, #120]	; (80a59e4 <pow+0x2b0>)
 80a596a:	2b02      	cmp	r3, #2
 80a596c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a5970:	f47f af7f 	bne.w	80a5872 <pow+0x13e>
 80a5974:	f7fe fa6a 	bl	80a3e4c <__errno>
 80a5978:	2321      	movs	r3, #33	; 0x21
 80a597a:	6003      	str	r3, [r0, #0]
 80a597c:	e77e      	b.n	80a587c <pow+0x148>
 80a597e:	f7fe fa65 	bl	80a3e4c <__errno>
 80a5982:	2321      	movs	r3, #33	; 0x21
 80a5984:	6003      	str	r3, [r0, #0]
 80a5986:	e789      	b.n	80a589c <pow+0x168>
 80a5988:	4630      	mov	r0, r6
 80a598a:	2600      	movs	r6, #0
 80a598c:	4639      	mov	r1, r7
 80a598e:	4f16      	ldr	r7, [pc, #88]	; (80a59e8 <pow+0x2b4>)
 80a5990:	4652      	mov	r2, sl
 80a5992:	465b      	mov	r3, fp
 80a5994:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80a5998:	f003 fe1e 	bl	80a95d8 <__aeabi_dcmplt>
 80a599c:	bb60      	cbnz	r0, 80a59f8 <pow+0x2c4>
 80a599e:	f1b8 0f02 	cmp.w	r8, #2
 80a59a2:	d0be      	beq.n	80a5922 <pow+0x1ee>
 80a59a4:	e7b8      	b.n	80a5918 <pow+0x1e4>
 80a59a6:	2200      	movs	r2, #0
 80a59a8:	4b10      	ldr	r3, [pc, #64]	; (80a59ec <pow+0x2b8>)
 80a59aa:	4620      	mov	r0, r4
 80a59ac:	4629      	mov	r1, r5
 80a59ae:	f003 fba1 	bl	80a90f4 <__aeabi_dmul>
 80a59b2:	4604      	mov	r4, r0
 80a59b4:	460d      	mov	r5, r1
 80a59b6:	f003 f83b 	bl	80a8a30 <rint>
 80a59ba:	4622      	mov	r2, r4
 80a59bc:	462b      	mov	r3, r5
 80a59be:	f003 fe01 	bl	80a95c4 <__aeabi_dcmpeq>
 80a59c2:	bb60      	cbnz	r0, 80a5a1e <pow+0x2ea>
 80a59c4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a59c8:	4b09      	ldr	r3, [pc, #36]	; (80a59f0 <pow+0x2bc>)
 80a59ca:	4903      	ldr	r1, [pc, #12]	; (80a59d8 <pow+0x2a4>)
 80a59cc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a59d0:	f991 8000 	ldrsb.w	r8, [r1]
 80a59d4:	e7e3      	b.n	80a599e <pow+0x26a>
 80a59d6:	bf00      	nop
 80a59d8:	20000004 	.word	0x20000004
 80a59dc:	080aa3c4 	.word	0x080aa3c4
 80a59e0:	3ff00000 	.word	0x3ff00000
 80a59e4:	fff00000 	.word	0xfff00000
 80a59e8:	7ff00000 	.word	0x7ff00000
 80a59ec:	3fe00000 	.word	0x3fe00000
 80a59f0:	c7efffff 	.word	0xc7efffff
 80a59f4:	47efffff 	.word	0x47efffff
 80a59f8:	2200      	movs	r2, #0
 80a59fa:	4b19      	ldr	r3, [pc, #100]	; (80a5a60 <pow+0x32c>)
 80a59fc:	4620      	mov	r0, r4
 80a59fe:	4629      	mov	r1, r5
 80a5a00:	f003 fb78 	bl	80a90f4 <__aeabi_dmul>
 80a5a04:	4604      	mov	r4, r0
 80a5a06:	460d      	mov	r5, r1
 80a5a08:	f003 f812 	bl	80a8a30 <rint>
 80a5a0c:	4622      	mov	r2, r4
 80a5a0e:	462b      	mov	r3, r5
 80a5a10:	f003 fdd8 	bl	80a95c4 <__aeabi_dcmpeq>
 80a5a14:	b918      	cbnz	r0, 80a5a1e <pow+0x2ea>
 80a5a16:	2200      	movs	r2, #0
 80a5a18:	4b12      	ldr	r3, [pc, #72]	; (80a5a64 <pow+0x330>)
 80a5a1a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a5a1e:	4b12      	ldr	r3, [pc, #72]	; (80a5a68 <pow+0x334>)
 80a5a20:	f993 8000 	ldrsb.w	r8, [r3]
 80a5a24:	e7bb      	b.n	80a599e <pow+0x26a>
 80a5a26:	2201      	movs	r2, #1
 80a5a28:	4b0f      	ldr	r3, [pc, #60]	; (80a5a68 <pow+0x334>)
 80a5a2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a5a2e:	f993 9000 	ldrsb.w	r9, [r3]
 80a5a32:	4b0e      	ldr	r3, [pc, #56]	; (80a5a6c <pow+0x338>)
 80a5a34:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a5a38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a5a3c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80a5a40:	f1b9 0f00 	cmp.w	r9, #0
 80a5a44:	f43f af13 	beq.w	80a586e <pow+0x13a>
 80a5a48:	4652      	mov	r2, sl
 80a5a4a:	465b      	mov	r3, fp
 80a5a4c:	4650      	mov	r0, sl
 80a5a4e:	4659      	mov	r1, fp
 80a5a50:	f003 fc7a 	bl	80a9348 <__aeabi_ddiv>
 80a5a54:	f1b9 0f02 	cmp.w	r9, #2
 80a5a58:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a5a5c:	d08a      	beq.n	80a5974 <pow+0x240>
 80a5a5e:	e708      	b.n	80a5872 <pow+0x13e>
 80a5a60:	3fe00000 	.word	0x3fe00000
 80a5a64:	fff00000 	.word	0xfff00000
 80a5a68:	20000004 	.word	0x20000004
 80a5a6c:	080aa3c4 	.word	0x080aa3c4

080a5a70 <fmodf>:
 80a5a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5a74:	b08a      	sub	sp, #40	; 0x28
 80a5a76:	4607      	mov	r7, r0
 80a5a78:	460c      	mov	r4, r1
 80a5a7a:	f001 f957 	bl	80a6d2c <__ieee754_fmodf>
 80a5a7e:	4b2a      	ldr	r3, [pc, #168]	; (80a5b28 <fmodf+0xb8>)
 80a5a80:	4605      	mov	r5, r0
 80a5a82:	f993 8000 	ldrsb.w	r8, [r3]
 80a5a86:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80a5a8a:	d03a      	beq.n	80a5b02 <fmodf+0x92>
 80a5a8c:	4621      	mov	r1, r4
 80a5a8e:	4620      	mov	r0, r4
 80a5a90:	f004 f94c 	bl	80a9d2c <__aeabi_fcmpun>
 80a5a94:	2800      	cmp	r0, #0
 80a5a96:	d134      	bne.n	80a5b02 <fmodf+0x92>
 80a5a98:	4639      	mov	r1, r7
 80a5a9a:	4638      	mov	r0, r7
 80a5a9c:	f004 f946 	bl	80a9d2c <__aeabi_fcmpun>
 80a5aa0:	4606      	mov	r6, r0
 80a5aa2:	bb70      	cbnz	r0, 80a5b02 <fmodf+0x92>
 80a5aa4:	2100      	movs	r1, #0
 80a5aa6:	4620      	mov	r0, r4
 80a5aa8:	f004 f90e 	bl	80a9cc8 <__aeabi_fcmpeq>
 80a5aac:	b348      	cbz	r0, 80a5b02 <fmodf+0x92>
 80a5aae:	2201      	movs	r2, #1
 80a5ab0:	4b1e      	ldr	r3, [pc, #120]	; (80a5b2c <fmodf+0xbc>)
 80a5ab2:	4638      	mov	r0, r7
 80a5ab4:	e9cd 2300 	strd	r2, r3, [sp]
 80a5ab8:	9608      	str	r6, [sp, #32]
 80a5aba:	f003 fac3 	bl	80a9044 <__aeabi_f2d>
 80a5abe:	4606      	mov	r6, r0
 80a5ac0:	460f      	mov	r7, r1
 80a5ac2:	4620      	mov	r0, r4
 80a5ac4:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80a5ac8:	f003 fabc 	bl	80a9044 <__aeabi_f2d>
 80a5acc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a5ad0:	f1b8 0f00 	cmp.w	r8, #0
 80a5ad4:	d019      	beq.n	80a5b0a <fmodf+0x9a>
 80a5ad6:	2200      	movs	r2, #0
 80a5ad8:	2300      	movs	r3, #0
 80a5ada:	4610      	mov	r0, r2
 80a5adc:	4619      	mov	r1, r3
 80a5ade:	f003 fc33 	bl	80a9348 <__aeabi_ddiv>
 80a5ae2:	f1b8 0f02 	cmp.w	r8, #2
 80a5ae6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a5aea:	d110      	bne.n	80a5b0e <fmodf+0x9e>
 80a5aec:	f7fe f9ae 	bl	80a3e4c <__errno>
 80a5af0:	2321      	movs	r3, #33	; 0x21
 80a5af2:	6003      	str	r3, [r0, #0]
 80a5af4:	9b08      	ldr	r3, [sp, #32]
 80a5af6:	b993      	cbnz	r3, 80a5b1e <fmodf+0xae>
 80a5af8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a5afc:	f003 fdf2 	bl	80a96e4 <__aeabi_d2f>
 80a5b00:	4605      	mov	r5, r0
 80a5b02:	4628      	mov	r0, r5
 80a5b04:	b00a      	add	sp, #40	; 0x28
 80a5b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a5b0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a5b0e:	4668      	mov	r0, sp
 80a5b10:	f002 ff86 	bl	80a8a20 <matherr>
 80a5b14:	2800      	cmp	r0, #0
 80a5b16:	d0e9      	beq.n	80a5aec <fmodf+0x7c>
 80a5b18:	9b08      	ldr	r3, [sp, #32]
 80a5b1a:	2b00      	cmp	r3, #0
 80a5b1c:	d0ec      	beq.n	80a5af8 <fmodf+0x88>
 80a5b1e:	f7fe f995 	bl	80a3e4c <__errno>
 80a5b22:	9b08      	ldr	r3, [sp, #32]
 80a5b24:	6003      	str	r3, [r0, #0]
 80a5b26:	e7e7      	b.n	80a5af8 <fmodf+0x88>
 80a5b28:	20000004 	.word	0x20000004
 80a5b2c:	080aa3c8 	.word	0x080aa3c8

080a5b30 <logf>:
 80a5b30:	b570      	push	{r4, r5, r6, lr}
 80a5b32:	b08a      	sub	sp, #40	; 0x28
 80a5b34:	4604      	mov	r4, r0
 80a5b36:	f001 f97b 	bl	80a6e30 <__ieee754_logf>
 80a5b3a:	4b37      	ldr	r3, [pc, #220]	; (80a5c18 <logf+0xe8>)
 80a5b3c:	4605      	mov	r5, r0
 80a5b3e:	f993 6000 	ldrsb.w	r6, [r3]
 80a5b42:	1c73      	adds	r3, r6, #1
 80a5b44:	d033      	beq.n	80a5bae <logf+0x7e>
 80a5b46:	4621      	mov	r1, r4
 80a5b48:	4620      	mov	r0, r4
 80a5b4a:	f004 f8ef 	bl	80a9d2c <__aeabi_fcmpun>
 80a5b4e:	2800      	cmp	r0, #0
 80a5b50:	d12d      	bne.n	80a5bae <logf+0x7e>
 80a5b52:	2100      	movs	r1, #0
 80a5b54:	4620      	mov	r0, r4
 80a5b56:	f004 f8df 	bl	80a9d18 <__aeabi_fcmpgt>
 80a5b5a:	4603      	mov	r3, r0
 80a5b5c:	bb38      	cbnz	r0, 80a5bae <logf+0x7e>
 80a5b5e:	4a2f      	ldr	r2, [pc, #188]	; (80a5c1c <logf+0xec>)
 80a5b60:	4620      	mov	r0, r4
 80a5b62:	9308      	str	r3, [sp, #32]
 80a5b64:	9201      	str	r2, [sp, #4]
 80a5b66:	f003 fa6d 	bl	80a9044 <__aeabi_f2d>
 80a5b6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a5b6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a5b72:	b1fe      	cbz	r6, 80a5bb4 <logf+0x84>
 80a5b74:	2200      	movs	r2, #0
 80a5b76:	4b2a      	ldr	r3, [pc, #168]	; (80a5c20 <logf+0xf0>)
 80a5b78:	4620      	mov	r0, r4
 80a5b7a:	2100      	movs	r1, #0
 80a5b7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a5b80:	f004 f8a2 	bl	80a9cc8 <__aeabi_fcmpeq>
 80a5b84:	2800      	cmp	r0, #0
 80a5b86:	d03d      	beq.n	80a5c04 <logf+0xd4>
 80a5b88:	2302      	movs	r3, #2
 80a5b8a:	429e      	cmp	r6, r3
 80a5b8c:	9300      	str	r3, [sp, #0]
 80a5b8e:	d133      	bne.n	80a5bf8 <logf+0xc8>
 80a5b90:	f7fe f95c 	bl	80a3e4c <__errno>
 80a5b94:	2322      	movs	r3, #34	; 0x22
 80a5b96:	6003      	str	r3, [r0, #0]
 80a5b98:	9b08      	ldr	r3, [sp, #32]
 80a5b9a:	b31b      	cbz	r3, 80a5be4 <logf+0xb4>
 80a5b9c:	f7fe f956 	bl	80a3e4c <__errno>
 80a5ba0:	9b08      	ldr	r3, [sp, #32]
 80a5ba2:	6003      	str	r3, [r0, #0]
 80a5ba4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a5ba8:	f003 fd9c 	bl	80a96e4 <__aeabi_d2f>
 80a5bac:	4605      	mov	r5, r0
 80a5bae:	4628      	mov	r0, r5
 80a5bb0:	b00a      	add	sp, #40	; 0x28
 80a5bb2:	bd70      	pop	{r4, r5, r6, pc}
 80a5bb4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a5bb8:	4b1a      	ldr	r3, [pc, #104]	; (80a5c24 <logf+0xf4>)
 80a5bba:	4620      	mov	r0, r4
 80a5bbc:	2100      	movs	r1, #0
 80a5bbe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a5bc2:	f004 f881 	bl	80a9cc8 <__aeabi_fcmpeq>
 80a5bc6:	b9a8      	cbnz	r0, 80a5bf4 <logf+0xc4>
 80a5bc8:	2301      	movs	r3, #1
 80a5bca:	9300      	str	r3, [sp, #0]
 80a5bcc:	4668      	mov	r0, sp
 80a5bce:	f002 ff27 	bl	80a8a20 <matherr>
 80a5bd2:	b1d8      	cbz	r0, 80a5c0c <logf+0xdc>
 80a5bd4:	4814      	ldr	r0, [pc, #80]	; (80a5c28 <logf+0xf8>)
 80a5bd6:	f002 ff25 	bl	80a8a24 <nan>
 80a5bda:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a5bde:	9b08      	ldr	r3, [sp, #32]
 80a5be0:	2b00      	cmp	r3, #0
 80a5be2:	d1db      	bne.n	80a5b9c <logf+0x6c>
 80a5be4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a5be8:	f003 fd7c 	bl	80a96e4 <__aeabi_d2f>
 80a5bec:	4605      	mov	r5, r0
 80a5bee:	4628      	mov	r0, r5
 80a5bf0:	b00a      	add	sp, #40	; 0x28
 80a5bf2:	bd70      	pop	{r4, r5, r6, pc}
 80a5bf4:	2302      	movs	r3, #2
 80a5bf6:	9300      	str	r3, [sp, #0]
 80a5bf8:	4668      	mov	r0, sp
 80a5bfa:	f002 ff11 	bl	80a8a20 <matherr>
 80a5bfe:	2800      	cmp	r0, #0
 80a5c00:	d1ed      	bne.n	80a5bde <logf+0xae>
 80a5c02:	e7c5      	b.n	80a5b90 <logf+0x60>
 80a5c04:	2301      	movs	r3, #1
 80a5c06:	2e02      	cmp	r6, #2
 80a5c08:	9300      	str	r3, [sp, #0]
 80a5c0a:	d1df      	bne.n	80a5bcc <logf+0x9c>
 80a5c0c:	f7fe f91e 	bl	80a3e4c <__errno>
 80a5c10:	2321      	movs	r3, #33	; 0x21
 80a5c12:	6003      	str	r3, [r0, #0]
 80a5c14:	e7de      	b.n	80a5bd4 <logf+0xa4>
 80a5c16:	bf00      	nop
 80a5c18:	20000004 	.word	0x20000004
 80a5c1c:	080aa3d0 	.word	0x080aa3d0
 80a5c20:	fff00000 	.word	0xfff00000
 80a5c24:	c7efffff 	.word	0xc7efffff
 80a5c28:	080aa3d4 	.word	0x080aa3d4
 80a5c2c:	00000000 	.word	0x00000000

080a5c30 <__ieee754_pow>:
 80a5c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5c34:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80a5c38:	461f      	mov	r7, r3
 80a5c3a:	4698      	mov	r8, r3
 80a5c3c:	ea55 0302 	orrs.w	r3, r5, r2
 80a5c40:	b095      	sub	sp, #84	; 0x54
 80a5c42:	d037      	beq.n	80a5cb4 <__ieee754_pow+0x84>
 80a5c44:	468b      	mov	fp, r1
 80a5c46:	4689      	mov	r9, r1
 80a5c48:	496f      	ldr	r1, [pc, #444]	; (80a5e08 <__ieee754_pow+0x1d8>)
 80a5c4a:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
 80a5c4e:	428c      	cmp	r4, r1
 80a5c50:	4682      	mov	sl, r0
 80a5c52:	4603      	mov	r3, r0
 80a5c54:	dc28      	bgt.n	80a5ca8 <__ieee754_pow+0x78>
 80a5c56:	4616      	mov	r6, r2
 80a5c58:	d035      	beq.n	80a5cc6 <__ieee754_pow+0x96>
 80a5c5a:	428d      	cmp	r5, r1
 80a5c5c:	dc24      	bgt.n	80a5ca8 <__ieee754_pow+0x78>
 80a5c5e:	496a      	ldr	r1, [pc, #424]	; (80a5e08 <__ieee754_pow+0x1d8>)
 80a5c60:	428d      	cmp	r5, r1
 80a5c62:	d01f      	beq.n	80a5ca4 <__ieee754_pow+0x74>
 80a5c64:	f1b9 0f00 	cmp.w	r9, #0
 80a5c68:	db36      	blt.n	80a5cd8 <__ieee754_pow+0xa8>
 80a5c6a:	2100      	movs	r1, #0
 80a5c6c:	9102      	str	r1, [sp, #8]
 80a5c6e:	2a00      	cmp	r2, #0
 80a5c70:	d14d      	bne.n	80a5d0e <__ieee754_pow+0xde>
 80a5c72:	4a65      	ldr	r2, [pc, #404]	; (80a5e08 <__ieee754_pow+0x1d8>)
 80a5c74:	4295      	cmp	r5, r2
 80a5c76:	f000 809d 	beq.w	80a5db4 <__ieee754_pow+0x184>
 80a5c7a:	4a64      	ldr	r2, [pc, #400]	; (80a5e0c <__ieee754_pow+0x1dc>)
 80a5c7c:	4295      	cmp	r5, r2
 80a5c7e:	f000 80ab 	beq.w	80a5dd8 <__ieee754_pow+0x1a8>
 80a5c82:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
 80a5c86:	f000 84d4 	beq.w	80a6632 <__ieee754_pow+0xa02>
 80a5c8a:	4a61      	ldr	r2, [pc, #388]	; (80a5e10 <__ieee754_pow+0x1e0>)
 80a5c8c:	4590      	cmp	r8, r2
 80a5c8e:	d13e      	bne.n	80a5d0e <__ieee754_pow+0xde>
 80a5c90:	f1b9 0f00 	cmp.w	r9, #0
 80a5c94:	db3b      	blt.n	80a5d0e <__ieee754_pow+0xde>
 80a5c96:	4650      	mov	r0, sl
 80a5c98:	4659      	mov	r1, fp
 80a5c9a:	b015      	add	sp, #84	; 0x54
 80a5c9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5ca0:	f000 bf80 	b.w	80a6ba4 <__ieee754_sqrt>
 80a5ca4:	2a00      	cmp	r2, #0
 80a5ca6:	d0dd      	beq.n	80a5c64 <__ieee754_pow+0x34>
 80a5ca8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a5cac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a5cb0:	4323      	orrs	r3, r4
 80a5cb2:	d10b      	bne.n	80a5ccc <__ieee754_pow+0x9c>
 80a5cb4:	2300      	movs	r3, #0
 80a5cb6:	4c55      	ldr	r4, [pc, #340]	; (80a5e0c <__ieee754_pow+0x1dc>)
 80a5cb8:	e9cd 3400 	strd	r3, r4, [sp]
 80a5cbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a5cc0:	b015      	add	sp, #84	; 0x54
 80a5cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5cc6:	b908      	cbnz	r0, 80a5ccc <__ieee754_pow+0x9c>
 80a5cc8:	42a5      	cmp	r5, r4
 80a5cca:	ddc8      	ble.n	80a5c5e <__ieee754_pow+0x2e>
 80a5ccc:	4851      	ldr	r0, [pc, #324]	; (80a5e14 <__ieee754_pow+0x1e4>)
 80a5cce:	b015      	add	sp, #84	; 0x54
 80a5cd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5cd4:	f002 bea6 	b.w	80a8a24 <nan>
 80a5cd8:	494f      	ldr	r1, [pc, #316]	; (80a5e18 <__ieee754_pow+0x1e8>)
 80a5cda:	428d      	cmp	r5, r1
 80a5cdc:	f300 8085 	bgt.w	80a5dea <__ieee754_pow+0x1ba>
 80a5ce0:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80a5ce4:	428d      	cmp	r5, r1
 80a5ce6:	dd0e      	ble.n	80a5d06 <__ieee754_pow+0xd6>
 80a5ce8:	1529      	asrs	r1, r5, #20
 80a5cea:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80a5cee:	2914      	cmp	r1, #20
 80a5cf0:	f340 84a9 	ble.w	80a6646 <__ieee754_pow+0xa16>
 80a5cf4:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80a5cf8:	fa22 f001 	lsr.w	r0, r2, r1
 80a5cfc:	fa00 f101 	lsl.w	r1, r0, r1
 80a5d00:	4291      	cmp	r1, r2
 80a5d02:	f000 84f6 	beq.w	80a66f2 <__ieee754_pow+0xac2>
 80a5d06:	2100      	movs	r1, #0
 80a5d08:	9102      	str	r1, [sp, #8]
 80a5d0a:	2a00      	cmp	r2, #0
 80a5d0c:	d0b5      	beq.n	80a5c7a <__ieee754_pow+0x4a>
 80a5d0e:	4650      	mov	r0, sl
 80a5d10:	4659      	mov	r1, fp
 80a5d12:	930c      	str	r3, [sp, #48]	; 0x30
 80a5d14:	f002 fdfc 	bl	80a8910 <fabs>
 80a5d18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a5d1a:	e9cd 0100 	strd	r0, r1, [sp]
 80a5d1e:	bb43      	cbnz	r3, 80a5d72 <__ieee754_pow+0x142>
 80a5d20:	b124      	cbz	r4, 80a5d2c <__ieee754_pow+0xfc>
 80a5d22:	4b3a      	ldr	r3, [pc, #232]	; (80a5e0c <__ieee754_pow+0x1dc>)
 80a5d24:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80a5d28:	429a      	cmp	r2, r3
 80a5d2a:	d122      	bne.n	80a5d72 <__ieee754_pow+0x142>
 80a5d2c:	f1b8 0f00 	cmp.w	r8, #0
 80a5d30:	da07      	bge.n	80a5d42 <__ieee754_pow+0x112>
 80a5d32:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a5d36:	2000      	movs	r0, #0
 80a5d38:	4934      	ldr	r1, [pc, #208]	; (80a5e0c <__ieee754_pow+0x1dc>)
 80a5d3a:	f003 fb05 	bl	80a9348 <__aeabi_ddiv>
 80a5d3e:	e9cd 0100 	strd	r0, r1, [sp]
 80a5d42:	f1b9 0f00 	cmp.w	r9, #0
 80a5d46:	dab9      	bge.n	80a5cbc <__ieee754_pow+0x8c>
 80a5d48:	9b02      	ldr	r3, [sp, #8]
 80a5d4a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a5d4e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a5d52:	4323      	orrs	r3, r4
 80a5d54:	f040 849c 	bne.w	80a6690 <__ieee754_pow+0xa60>
 80a5d58:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a5d5c:	4610      	mov	r0, r2
 80a5d5e:	4619      	mov	r1, r3
 80a5d60:	f003 f810 	bl	80a8d84 <__aeabi_dsub>
 80a5d64:	4602      	mov	r2, r0
 80a5d66:	460b      	mov	r3, r1
 80a5d68:	f003 faee 	bl	80a9348 <__aeabi_ddiv>
 80a5d6c:	e9cd 0100 	strd	r0, r1, [sp]
 80a5d70:	e7a4      	b.n	80a5cbc <__ieee754_pow+0x8c>
 80a5d72:	9a02      	ldr	r2, [sp, #8]
 80a5d74:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80a5d78:	3b01      	subs	r3, #1
 80a5d7a:	930c      	str	r3, [sp, #48]	; 0x30
 80a5d7c:	4313      	orrs	r3, r2
 80a5d7e:	d037      	beq.n	80a5df0 <__ieee754_pow+0x1c0>
 80a5d80:	4b26      	ldr	r3, [pc, #152]	; (80a5e1c <__ieee754_pow+0x1ec>)
 80a5d82:	429d      	cmp	r5, r3
 80a5d84:	dd4e      	ble.n	80a5e24 <__ieee754_pow+0x1f4>
 80a5d86:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80a5d8a:	429d      	cmp	r5, r3
 80a5d8c:	4b24      	ldr	r3, [pc, #144]	; (80a5e20 <__ieee754_pow+0x1f0>)
 80a5d8e:	f340 83df 	ble.w	80a6550 <__ieee754_pow+0x920>
 80a5d92:	429c      	cmp	r4, r3
 80a5d94:	f340 835e 	ble.w	80a6454 <__ieee754_pow+0x824>
 80a5d98:	f1b8 0f00 	cmp.w	r8, #0
 80a5d9c:	f340 835e 	ble.w	80a645c <__ieee754_pow+0x82c>
 80a5da0:	a317      	add	r3, pc, #92	; (adr r3, 80a5e00 <__ieee754_pow+0x1d0>)
 80a5da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5da6:	4610      	mov	r0, r2
 80a5da8:	4619      	mov	r1, r3
 80a5daa:	f003 f9a3 	bl	80a90f4 <__aeabi_dmul>
 80a5dae:	e9cd 0100 	strd	r0, r1, [sp]
 80a5db2:	e783      	b.n	80a5cbc <__ieee754_pow+0x8c>
 80a5db4:	f104 4240 	add.w	r2, r4, #3221225472	; 0xc0000000
 80a5db8:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80a5dbc:	4313      	orrs	r3, r2
 80a5dbe:	f43f af79 	beq.w	80a5cb4 <__ieee754_pow+0x84>
 80a5dc2:	4b17      	ldr	r3, [pc, #92]	; (80a5e20 <__ieee754_pow+0x1f0>)
 80a5dc4:	429c      	cmp	r4, r3
 80a5dc6:	f340 8373 	ble.w	80a64b0 <__ieee754_pow+0x880>
 80a5dca:	f1b8 0f00 	cmp.w	r8, #0
 80a5dce:	f2c0 8345 	blt.w	80a645c <__ieee754_pow+0x82c>
 80a5dd2:	e9cd 6700 	strd	r6, r7, [sp]
 80a5dd6:	e771      	b.n	80a5cbc <__ieee754_pow+0x8c>
 80a5dd8:	f1b8 0f00 	cmp.w	r8, #0
 80a5ddc:	f2c0 841f 	blt.w	80a661e <__ieee754_pow+0x9ee>
 80a5de0:	4650      	mov	r0, sl
 80a5de2:	4659      	mov	r1, fp
 80a5de4:	e9cd 0100 	strd	r0, r1, [sp]
 80a5de8:	e768      	b.n	80a5cbc <__ieee754_pow+0x8c>
 80a5dea:	2102      	movs	r1, #2
 80a5dec:	9102      	str	r1, [sp, #8]
 80a5dee:	e73e      	b.n	80a5c6e <__ieee754_pow+0x3e>
 80a5df0:	4652      	mov	r2, sl
 80a5df2:	4650      	mov	r0, sl
 80a5df4:	465b      	mov	r3, fp
 80a5df6:	4659      	mov	r1, fp
 80a5df8:	e7b2      	b.n	80a5d60 <__ieee754_pow+0x130>
 80a5dfa:	bf00      	nop
 80a5dfc:	f3af 8000 	nop.w
 80a5e00:	8800759c 	.word	0x8800759c
 80a5e04:	7e37e43c 	.word	0x7e37e43c
 80a5e08:	7ff00000 	.word	0x7ff00000
 80a5e0c:	3ff00000 	.word	0x3ff00000
 80a5e10:	3fe00000 	.word	0x3fe00000
 80a5e14:	080aa3d4 	.word	0x080aa3d4
 80a5e18:	433fffff 	.word	0x433fffff
 80a5e1c:	41e00000 	.word	0x41e00000
 80a5e20:	3fefffff 	.word	0x3fefffff
 80a5e24:	4bd0      	ldr	r3, [pc, #832]	; (80a6168 <__ieee754_pow+0x538>)
 80a5e26:	ea09 0303 	and.w	r3, r9, r3
 80a5e2a:	2b00      	cmp	r3, #0
 80a5e2c:	f040 8356 	bne.w	80a64dc <__ieee754_pow+0x8ac>
 80a5e30:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a5e34:	2200      	movs	r2, #0
 80a5e36:	4bcd      	ldr	r3, [pc, #820]	; (80a616c <__ieee754_pow+0x53c>)
 80a5e38:	f003 f95c 	bl	80a90f4 <__aeabi_dmul>
 80a5e3c:	f06f 0c34 	mvn.w	ip, #52	; 0x34
 80a5e40:	460c      	mov	r4, r1
 80a5e42:	e9cd 0100 	strd	r0, r1, [sp]
 80a5e46:	1523      	asrs	r3, r4, #20
 80a5e48:	4ac9      	ldr	r2, [pc, #804]	; (80a6170 <__ieee754_pow+0x540>)
 80a5e4a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80a5e4e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a5e52:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80a5e56:	eb03 010c 	add.w	r1, r3, ip
 80a5e5a:	4294      	cmp	r4, r2
 80a5e5c:	910d      	str	r1, [sp, #52]	; 0x34
 80a5e5e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80a5e62:	f340 832e 	ble.w	80a64c2 <__ieee754_pow+0x892>
 80a5e66:	4bc3      	ldr	r3, [pc, #780]	; (80a6174 <__ieee754_pow+0x544>)
 80a5e68:	429c      	cmp	r4, r3
 80a5e6a:	f340 841e 	ble.w	80a66aa <__ieee754_pow+0xa7a>
 80a5e6e:	2300      	movs	r3, #0
 80a5e70:	2400      	movs	r4, #0
 80a5e72:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a5e76:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a5e7a:	2300      	movs	r3, #0
 80a5e7c:	f04f 0a00 	mov.w	sl, #0
 80a5e80:	4cbd      	ldr	r4, [pc, #756]	; (80a6178 <__ieee754_pow+0x548>)
 80a5e82:	3101      	adds	r1, #1
 80a5e84:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a5e88:	910d      	str	r1, [sp, #52]	; 0x34
 80a5e8a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80a5e8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a5e92:	4629      	mov	r1, r5
 80a5e94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a5e98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a5e9c:	f002 ff72 	bl	80a8d84 <__aeabi_dsub>
 80a5ea0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a5ea4:	4680      	mov	r8, r0
 80a5ea6:	4689      	mov	r9, r1
 80a5ea8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a5eac:	f002 ff6c 	bl	80a8d88 <__adddf3>
 80a5eb0:	4602      	mov	r2, r0
 80a5eb2:	460b      	mov	r3, r1
 80a5eb4:	2000      	movs	r0, #0
 80a5eb6:	49b0      	ldr	r1, [pc, #704]	; (80a6178 <__ieee754_pow+0x548>)
 80a5eb8:	f003 fa46 	bl	80a9348 <__aeabi_ddiv>
 80a5ebc:	4603      	mov	r3, r0
 80a5ebe:	460c      	mov	r4, r1
 80a5ec0:	461a      	mov	r2, r3
 80a5ec2:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 80a5ec6:	4640      	mov	r0, r8
 80a5ec8:	4623      	mov	r3, r4
 80a5eca:	4649      	mov	r1, r9
 80a5ecc:	f003 f912 	bl	80a90f4 <__aeabi_dmul>
 80a5ed0:	460c      	mov	r4, r1
 80a5ed2:	4603      	mov	r3, r0
 80a5ed4:	4601      	mov	r1, r0
 80a5ed6:	4622      	mov	r2, r4
 80a5ed8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80a5edc:	2400      	movs	r4, #0
 80a5ede:	2000      	movs	r0, #0
 80a5ee0:	106b      	asrs	r3, r5, #1
 80a5ee2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80a5ee6:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80a5eea:	e9cd 1200 	strd	r1, r2, [sp]
 80a5eee:	eb03 010a 	add.w	r1, r3, sl
 80a5ef2:	9400      	str	r4, [sp, #0]
 80a5ef4:	e9dd ab00 	ldrd	sl, fp, [sp]
 80a5ef8:	4604      	mov	r4, r0
 80a5efa:	460d      	mov	r5, r1
 80a5efc:	4602      	mov	r2, r0
 80a5efe:	460b      	mov	r3, r1
 80a5f00:	4650      	mov	r0, sl
 80a5f02:	4659      	mov	r1, fp
 80a5f04:	f003 f8f6 	bl	80a90f4 <__aeabi_dmul>
 80a5f08:	4602      	mov	r2, r0
 80a5f0a:	460b      	mov	r3, r1
 80a5f0c:	4640      	mov	r0, r8
 80a5f0e:	4649      	mov	r1, r9
 80a5f10:	f002 ff38 	bl	80a8d84 <__aeabi_dsub>
 80a5f14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a5f18:	4680      	mov	r8, r0
 80a5f1a:	4689      	mov	r9, r1
 80a5f1c:	4620      	mov	r0, r4
 80a5f1e:	4629      	mov	r1, r5
 80a5f20:	f002 ff30 	bl	80a8d84 <__aeabi_dsub>
 80a5f24:	4602      	mov	r2, r0
 80a5f26:	460b      	mov	r3, r1
 80a5f28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a5f2c:	f002 ff2a 	bl	80a8d84 <__aeabi_dsub>
 80a5f30:	4652      	mov	r2, sl
 80a5f32:	465b      	mov	r3, fp
 80a5f34:	f003 f8de 	bl	80a90f4 <__aeabi_dmul>
 80a5f38:	4602      	mov	r2, r0
 80a5f3a:	460b      	mov	r3, r1
 80a5f3c:	4640      	mov	r0, r8
 80a5f3e:	4649      	mov	r1, r9
 80a5f40:	f002 ff20 	bl	80a8d84 <__aeabi_dsub>
 80a5f44:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a5f48:	f003 f8d4 	bl	80a90f4 <__aeabi_dmul>
 80a5f4c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80a5f50:	4604      	mov	r4, r0
 80a5f52:	460d      	mov	r5, r1
 80a5f54:	4642      	mov	r2, r8
 80a5f56:	464b      	mov	r3, r9
 80a5f58:	4640      	mov	r0, r8
 80a5f5a:	4649      	mov	r1, r9
 80a5f5c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a5f60:	f003 f8c8 	bl	80a90f4 <__aeabi_dmul>
 80a5f64:	a36e      	add	r3, pc, #440	; (adr r3, 80a6120 <__ieee754_pow+0x4f0>)
 80a5f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5f6a:	4604      	mov	r4, r0
 80a5f6c:	460d      	mov	r5, r1
 80a5f6e:	f003 f8c1 	bl	80a90f4 <__aeabi_dmul>
 80a5f72:	a36d      	add	r3, pc, #436	; (adr r3, 80a6128 <__ieee754_pow+0x4f8>)
 80a5f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5f78:	f002 ff06 	bl	80a8d88 <__adddf3>
 80a5f7c:	4622      	mov	r2, r4
 80a5f7e:	462b      	mov	r3, r5
 80a5f80:	f003 f8b8 	bl	80a90f4 <__aeabi_dmul>
 80a5f84:	a36a      	add	r3, pc, #424	; (adr r3, 80a6130 <__ieee754_pow+0x500>)
 80a5f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5f8a:	f002 fefd 	bl	80a8d88 <__adddf3>
 80a5f8e:	4622      	mov	r2, r4
 80a5f90:	462b      	mov	r3, r5
 80a5f92:	f003 f8af 	bl	80a90f4 <__aeabi_dmul>
 80a5f96:	a368      	add	r3, pc, #416	; (adr r3, 80a6138 <__ieee754_pow+0x508>)
 80a5f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5f9c:	f002 fef4 	bl	80a8d88 <__adddf3>
 80a5fa0:	4622      	mov	r2, r4
 80a5fa2:	462b      	mov	r3, r5
 80a5fa4:	f003 f8a6 	bl	80a90f4 <__aeabi_dmul>
 80a5fa8:	a365      	add	r3, pc, #404	; (adr r3, 80a6140 <__ieee754_pow+0x510>)
 80a5faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5fae:	f002 feeb 	bl	80a8d88 <__adddf3>
 80a5fb2:	4622      	mov	r2, r4
 80a5fb4:	462b      	mov	r3, r5
 80a5fb6:	f003 f89d 	bl	80a90f4 <__aeabi_dmul>
 80a5fba:	a363      	add	r3, pc, #396	; (adr r3, 80a6148 <__ieee754_pow+0x518>)
 80a5fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5fc0:	f002 fee2 	bl	80a8d88 <__adddf3>
 80a5fc4:	4622      	mov	r2, r4
 80a5fc6:	462b      	mov	r3, r5
 80a5fc8:	4604      	mov	r4, r0
 80a5fca:	460d      	mov	r5, r1
 80a5fcc:	4610      	mov	r0, r2
 80a5fce:	4619      	mov	r1, r3
 80a5fd0:	f003 f890 	bl	80a90f4 <__aeabi_dmul>
 80a5fd4:	4602      	mov	r2, r0
 80a5fd6:	460b      	mov	r3, r1
 80a5fd8:	4620      	mov	r0, r4
 80a5fda:	4629      	mov	r1, r5
 80a5fdc:	f003 f88a 	bl	80a90f4 <__aeabi_dmul>
 80a5fe0:	4604      	mov	r4, r0
 80a5fe2:	460d      	mov	r5, r1
 80a5fe4:	4652      	mov	r2, sl
 80a5fe6:	465b      	mov	r3, fp
 80a5fe8:	4640      	mov	r0, r8
 80a5fea:	4649      	mov	r1, r9
 80a5fec:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80a5ff0:	f002 feca 	bl	80a8d88 <__adddf3>
 80a5ff4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a5ff8:	f003 f87c 	bl	80a90f4 <__aeabi_dmul>
 80a5ffc:	4622      	mov	r2, r4
 80a5ffe:	462b      	mov	r3, r5
 80a6000:	f002 fec2 	bl	80a8d88 <__adddf3>
 80a6004:	4652      	mov	r2, sl
 80a6006:	4604      	mov	r4, r0
 80a6008:	460d      	mov	r5, r1
 80a600a:	465b      	mov	r3, fp
 80a600c:	4650      	mov	r0, sl
 80a600e:	4659      	mov	r1, fp
 80a6010:	f003 f870 	bl	80a90f4 <__aeabi_dmul>
 80a6014:	46a0      	mov	r8, r4
 80a6016:	46a9      	mov	r9, r5
 80a6018:	4604      	mov	r4, r0
 80a601a:	460d      	mov	r5, r1
 80a601c:	2200      	movs	r2, #0
 80a601e:	4b57      	ldr	r3, [pc, #348]	; (80a617c <__ieee754_pow+0x54c>)
 80a6020:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80a6024:	f002 feb0 	bl	80a8d88 <__adddf3>
 80a6028:	4642      	mov	r2, r8
 80a602a:	464b      	mov	r3, r9
 80a602c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80a6030:	f002 feaa 	bl	80a8d88 <__adddf3>
 80a6034:	460d      	mov	r5, r1
 80a6036:	9c00      	ldr	r4, [sp, #0]
 80a6038:	462b      	mov	r3, r5
 80a603a:	4622      	mov	r2, r4
 80a603c:	4650      	mov	r0, sl
 80a603e:	4659      	mov	r1, fp
 80a6040:	f003 f858 	bl	80a90f4 <__aeabi_dmul>
 80a6044:	4680      	mov	r8, r0
 80a6046:	4689      	mov	r9, r1
 80a6048:	2200      	movs	r2, #0
 80a604a:	4620      	mov	r0, r4
 80a604c:	4629      	mov	r1, r5
 80a604e:	4b4b      	ldr	r3, [pc, #300]	; (80a617c <__ieee754_pow+0x54c>)
 80a6050:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a6054:	f002 fe96 	bl	80a8d84 <__aeabi_dsub>
 80a6058:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80a605c:	f002 fe92 	bl	80a8d84 <__aeabi_dsub>
 80a6060:	4602      	mov	r2, r0
 80a6062:	460b      	mov	r3, r1
 80a6064:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80a6068:	f002 fe8c 	bl	80a8d84 <__aeabi_dsub>
 80a606c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a6070:	f003 f840 	bl	80a90f4 <__aeabi_dmul>
 80a6074:	4622      	mov	r2, r4
 80a6076:	4680      	mov	r8, r0
 80a6078:	4689      	mov	r9, r1
 80a607a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a607e:	462b      	mov	r3, r5
 80a6080:	f003 f838 	bl	80a90f4 <__aeabi_dmul>
 80a6084:	4602      	mov	r2, r0
 80a6086:	460b      	mov	r3, r1
 80a6088:	4640      	mov	r0, r8
 80a608a:	4649      	mov	r1, r9
 80a608c:	f002 fe7c 	bl	80a8d88 <__adddf3>
 80a6090:	4682      	mov	sl, r0
 80a6092:	468b      	mov	fp, r1
 80a6094:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a6098:	4652      	mov	r2, sl
 80a609a:	465b      	mov	r3, fp
 80a609c:	f002 fe74 	bl	80a8d88 <__adddf3>
 80a60a0:	a32b      	add	r3, pc, #172	; (adr r3, 80a6150 <__ieee754_pow+0x520>)
 80a60a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a60a6:	9c00      	ldr	r4, [sp, #0]
 80a60a8:	460d      	mov	r5, r1
 80a60aa:	4620      	mov	r0, r4
 80a60ac:	f003 f822 	bl	80a90f4 <__aeabi_dmul>
 80a60b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a60b4:	4680      	mov	r8, r0
 80a60b6:	4689      	mov	r9, r1
 80a60b8:	4620      	mov	r0, r4
 80a60ba:	4629      	mov	r1, r5
 80a60bc:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80a60c0:	f002 fe60 	bl	80a8d84 <__aeabi_dsub>
 80a60c4:	4602      	mov	r2, r0
 80a60c6:	460b      	mov	r3, r1
 80a60c8:	4650      	mov	r0, sl
 80a60ca:	4659      	mov	r1, fp
 80a60cc:	f002 fe5a 	bl	80a8d84 <__aeabi_dsub>
 80a60d0:	a321      	add	r3, pc, #132	; (adr r3, 80a6158 <__ieee754_pow+0x528>)
 80a60d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a60d6:	f003 f80d 	bl	80a90f4 <__aeabi_dmul>
 80a60da:	a321      	add	r3, pc, #132	; (adr r3, 80a6160 <__ieee754_pow+0x530>)
 80a60dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a60e0:	4680      	mov	r8, r0
 80a60e2:	4689      	mov	r9, r1
 80a60e4:	4620      	mov	r0, r4
 80a60e6:	4629      	mov	r1, r5
 80a60e8:	f003 f804 	bl	80a90f4 <__aeabi_dmul>
 80a60ec:	4602      	mov	r2, r0
 80a60ee:	460b      	mov	r3, r1
 80a60f0:	4640      	mov	r0, r8
 80a60f2:	4649      	mov	r1, r9
 80a60f4:	f002 fe48 	bl	80a8d88 <__adddf3>
 80a60f8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80a60fc:	f002 fe44 	bl	80a8d88 <__adddf3>
 80a6100:	4682      	mov	sl, r0
 80a6102:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a6104:	468b      	mov	fp, r1
 80a6106:	f002 ff8b 	bl	80a9020 <__aeabi_i2d>
 80a610a:	4680      	mov	r8, r0
 80a610c:	4689      	mov	r9, r1
 80a610e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a6112:	4652      	mov	r2, sl
 80a6114:	465b      	mov	r3, fp
 80a6116:	f002 fe37 	bl	80a8d88 <__adddf3>
 80a611a:	e031      	b.n	80a6180 <__ieee754_pow+0x550>
 80a611c:	f3af 8000 	nop.w
 80a6120:	4a454eef 	.word	0x4a454eef
 80a6124:	3fca7e28 	.word	0x3fca7e28
 80a6128:	93c9db65 	.word	0x93c9db65
 80a612c:	3fcd864a 	.word	0x3fcd864a
 80a6130:	a91d4101 	.word	0xa91d4101
 80a6134:	3fd17460 	.word	0x3fd17460
 80a6138:	518f264d 	.word	0x518f264d
 80a613c:	3fd55555 	.word	0x3fd55555
 80a6140:	db6fabff 	.word	0xdb6fabff
 80a6144:	3fdb6db6 	.word	0x3fdb6db6
 80a6148:	33333303 	.word	0x33333303
 80a614c:	3fe33333 	.word	0x3fe33333
 80a6150:	e0000000 	.word	0xe0000000
 80a6154:	3feec709 	.word	0x3feec709
 80a6158:	dc3a03fd 	.word	0xdc3a03fd
 80a615c:	3feec709 	.word	0x3feec709
 80a6160:	145b01f5 	.word	0x145b01f5
 80a6164:	be3e2fe0 	.word	0xbe3e2fe0
 80a6168:	7ff00000 	.word	0x7ff00000
 80a616c:	43400000 	.word	0x43400000
 80a6170:	0003988e 	.word	0x0003988e
 80a6174:	000bb679 	.word	0x000bb679
 80a6178:	3ff00000 	.word	0x3ff00000
 80a617c:	40080000 	.word	0x40080000
 80a6180:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a6184:	f002 fe00 	bl	80a8d88 <__adddf3>
 80a6188:	4642      	mov	r2, r8
 80a618a:	464b      	mov	r3, r9
 80a618c:	f002 fdfc 	bl	80a8d88 <__adddf3>
 80a6190:	9c00      	ldr	r4, [sp, #0]
 80a6192:	4642      	mov	r2, r8
 80a6194:	464b      	mov	r3, r9
 80a6196:	4620      	mov	r0, r4
 80a6198:	460d      	mov	r5, r1
 80a619a:	f002 fdf3 	bl	80a8d84 <__aeabi_dsub>
 80a619e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a61a2:	f002 fdef 	bl	80a8d84 <__aeabi_dsub>
 80a61a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a61aa:	f002 fdeb 	bl	80a8d84 <__aeabi_dsub>
 80a61ae:	4602      	mov	r2, r0
 80a61b0:	460b      	mov	r3, r1
 80a61b2:	4650      	mov	r0, sl
 80a61b4:	4659      	mov	r1, fp
 80a61b6:	f002 fde5 	bl	80a8d84 <__aeabi_dsub>
 80a61ba:	4682      	mov	sl, r0
 80a61bc:	468b      	mov	fp, r1
 80a61be:	9b02      	ldr	r3, [sp, #8]
 80a61c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a61c2:	3b01      	subs	r3, #1
 80a61c4:	4313      	orrs	r3, r2
 80a61c6:	f04f 0200 	mov.w	r2, #0
 80a61ca:	bf0c      	ite	eq
 80a61cc:	4bda      	ldreq	r3, [pc, #872]	; (80a6538 <__ieee754_pow+0x908>)
 80a61ce:	4bdb      	ldrne	r3, [pc, #876]	; (80a653c <__ieee754_pow+0x90c>)
 80a61d0:	e9cd 6700 	strd	r6, r7, [sp]
 80a61d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a61d8:	2300      	movs	r3, #0
 80a61da:	9300      	str	r3, [sp, #0]
 80a61dc:	e9dd 8900 	ldrd	r8, r9, [sp]
 80a61e0:	4630      	mov	r0, r6
 80a61e2:	4642      	mov	r2, r8
 80a61e4:	4639      	mov	r1, r7
 80a61e6:	464b      	mov	r3, r9
 80a61e8:	f002 fdcc 	bl	80a8d84 <__aeabi_dsub>
 80a61ec:	4622      	mov	r2, r4
 80a61ee:	462b      	mov	r3, r5
 80a61f0:	f002 ff80 	bl	80a90f4 <__aeabi_dmul>
 80a61f4:	4632      	mov	r2, r6
 80a61f6:	463b      	mov	r3, r7
 80a61f8:	4606      	mov	r6, r0
 80a61fa:	460f      	mov	r7, r1
 80a61fc:	4650      	mov	r0, sl
 80a61fe:	4659      	mov	r1, fp
 80a6200:	f002 ff78 	bl	80a90f4 <__aeabi_dmul>
 80a6204:	4602      	mov	r2, r0
 80a6206:	460b      	mov	r3, r1
 80a6208:	4630      	mov	r0, r6
 80a620a:	4639      	mov	r1, r7
 80a620c:	f002 fdbc 	bl	80a8d88 <__adddf3>
 80a6210:	4642      	mov	r2, r8
 80a6212:	4682      	mov	sl, r0
 80a6214:	468b      	mov	fp, r1
 80a6216:	464b      	mov	r3, r9
 80a6218:	4620      	mov	r0, r4
 80a621a:	4629      	mov	r1, r5
 80a621c:	f002 ff6a 	bl	80a90f4 <__aeabi_dmul>
 80a6220:	4606      	mov	r6, r0
 80a6222:	460f      	mov	r7, r1
 80a6224:	4650      	mov	r0, sl
 80a6226:	463b      	mov	r3, r7
 80a6228:	4659      	mov	r1, fp
 80a622a:	4632      	mov	r2, r6
 80a622c:	f002 fdac 	bl	80a8d88 <__adddf3>
 80a6230:	4bc3      	ldr	r3, [pc, #780]	; (80a6540 <__ieee754_pow+0x910>)
 80a6232:	4604      	mov	r4, r0
 80a6234:	4299      	cmp	r1, r3
 80a6236:	460d      	mov	r5, r1
 80a6238:	4688      	mov	r8, r1
 80a623a:	f340 8114 	ble.w	80a6466 <__ieee754_pow+0x836>
 80a623e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80a6242:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80a6246:	4303      	orrs	r3, r0
 80a6248:	f040 8212 	bne.w	80a6670 <__ieee754_pow+0xa40>
 80a624c:	a3a6      	add	r3, pc, #664	; (adr r3, 80a64e8 <__ieee754_pow+0x8b8>)
 80a624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6252:	4650      	mov	r0, sl
 80a6254:	4659      	mov	r1, fp
 80a6256:	f002 fd97 	bl	80a8d88 <__adddf3>
 80a625a:	4632      	mov	r2, r6
 80a625c:	e9cd 0100 	strd	r0, r1, [sp]
 80a6260:	463b      	mov	r3, r7
 80a6262:	4620      	mov	r0, r4
 80a6264:	4629      	mov	r1, r5
 80a6266:	f002 fd8d 	bl	80a8d84 <__aeabi_dsub>
 80a626a:	4602      	mov	r2, r0
 80a626c:	460b      	mov	r3, r1
 80a626e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a6272:	f003 f9cf 	bl	80a9614 <__aeabi_dcmpgt>
 80a6276:	2800      	cmp	r0, #0
 80a6278:	f040 81fa 	bne.w	80a6670 <__ieee754_pow+0xa40>
 80a627c:	f3c8 530a 	ubfx	r3, r8, #20, #11
 80a6280:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80a6284:	2000      	movs	r0, #0
 80a6286:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80a628a:	fa42 f303 	asr.w	r3, r2, r3
 80a628e:	4443      	add	r3, r8
 80a6290:	4cac      	ldr	r4, [pc, #688]	; (80a6544 <__ieee754_pow+0x914>)
 80a6292:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80a6296:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a629a:	fa44 fc02 	asr.w	ip, r4, r2
 80a629e:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80a62a2:	ea23 010c 	bic.w	r1, r3, ip
 80a62a6:	f1c2 0414 	rsb	r4, r2, #20
 80a62aa:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 80a62ae:	f1b8 0f00 	cmp.w	r8, #0
 80a62b2:	460b      	mov	r3, r1
 80a62b4:	fa45 f104 	asr.w	r1, r5, r4
 80a62b8:	910c      	str	r1, [sp, #48]	; 0x30
 80a62ba:	bfb8      	it	lt
 80a62bc:	4249      	neglt	r1, r1
 80a62be:	4602      	mov	r2, r0
 80a62c0:	bfb8      	it	lt
 80a62c2:	910c      	strlt	r1, [sp, #48]	; 0x30
 80a62c4:	4630      	mov	r0, r6
 80a62c6:	4639      	mov	r1, r7
 80a62c8:	f002 fd5c 	bl	80a8d84 <__aeabi_dsub>
 80a62cc:	4606      	mov	r6, r0
 80a62ce:	460f      	mov	r7, r1
 80a62d0:	4650      	mov	r0, sl
 80a62d2:	463b      	mov	r3, r7
 80a62d4:	4659      	mov	r1, fp
 80a62d6:	4632      	mov	r2, r6
 80a62d8:	f002 fd56 	bl	80a8d88 <__adddf3>
 80a62dc:	460d      	mov	r5, r1
 80a62de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a62e0:	051b      	lsls	r3, r3, #20
 80a62e2:	9300      	str	r3, [sp, #0]
 80a62e4:	2400      	movs	r4, #0
 80a62e6:	a382      	add	r3, pc, #520	; (adr r3, 80a64f0 <__ieee754_pow+0x8c0>)
 80a62e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a62ec:	4620      	mov	r0, r4
 80a62ee:	4629      	mov	r1, r5
 80a62f0:	f002 ff00 	bl	80a90f4 <__aeabi_dmul>
 80a62f4:	4632      	mov	r2, r6
 80a62f6:	4680      	mov	r8, r0
 80a62f8:	4689      	mov	r9, r1
 80a62fa:	463b      	mov	r3, r7
 80a62fc:	4620      	mov	r0, r4
 80a62fe:	4629      	mov	r1, r5
 80a6300:	f002 fd40 	bl	80a8d84 <__aeabi_dsub>
 80a6304:	4602      	mov	r2, r0
 80a6306:	460b      	mov	r3, r1
 80a6308:	4650      	mov	r0, sl
 80a630a:	4659      	mov	r1, fp
 80a630c:	f002 fd3a 	bl	80a8d84 <__aeabi_dsub>
 80a6310:	a379      	add	r3, pc, #484	; (adr r3, 80a64f8 <__ieee754_pow+0x8c8>)
 80a6312:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6316:	f002 feed 	bl	80a90f4 <__aeabi_dmul>
 80a631a:	a379      	add	r3, pc, #484	; (adr r3, 80a6500 <__ieee754_pow+0x8d0>)
 80a631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6320:	4606      	mov	r6, r0
 80a6322:	460f      	mov	r7, r1
 80a6324:	4620      	mov	r0, r4
 80a6326:	4629      	mov	r1, r5
 80a6328:	f002 fee4 	bl	80a90f4 <__aeabi_dmul>
 80a632c:	4602      	mov	r2, r0
 80a632e:	460b      	mov	r3, r1
 80a6330:	4630      	mov	r0, r6
 80a6332:	4639      	mov	r1, r7
 80a6334:	f002 fd28 	bl	80a8d88 <__adddf3>
 80a6338:	4606      	mov	r6, r0
 80a633a:	460f      	mov	r7, r1
 80a633c:	4632      	mov	r2, r6
 80a633e:	463b      	mov	r3, r7
 80a6340:	4640      	mov	r0, r8
 80a6342:	4649      	mov	r1, r9
 80a6344:	f002 fd20 	bl	80a8d88 <__adddf3>
 80a6348:	4642      	mov	r2, r8
 80a634a:	464b      	mov	r3, r9
 80a634c:	460d      	mov	r5, r1
 80a634e:	4604      	mov	r4, r0
 80a6350:	f002 fd18 	bl	80a8d84 <__aeabi_dsub>
 80a6354:	4602      	mov	r2, r0
 80a6356:	460b      	mov	r3, r1
 80a6358:	4630      	mov	r0, r6
 80a635a:	4639      	mov	r1, r7
 80a635c:	f002 fd12 	bl	80a8d84 <__aeabi_dsub>
 80a6360:	462b      	mov	r3, r5
 80a6362:	4682      	mov	sl, r0
 80a6364:	468b      	mov	fp, r1
 80a6366:	4622      	mov	r2, r4
 80a6368:	4629      	mov	r1, r5
 80a636a:	4620      	mov	r0, r4
 80a636c:	f002 fec2 	bl	80a90f4 <__aeabi_dmul>
 80a6370:	a365      	add	r3, pc, #404	; (adr r3, 80a6508 <__ieee754_pow+0x8d8>)
 80a6372:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6376:	4606      	mov	r6, r0
 80a6378:	460f      	mov	r7, r1
 80a637a:	f002 febb 	bl	80a90f4 <__aeabi_dmul>
 80a637e:	a364      	add	r3, pc, #400	; (adr r3, 80a6510 <__ieee754_pow+0x8e0>)
 80a6380:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6384:	f002 fcfe 	bl	80a8d84 <__aeabi_dsub>
 80a6388:	4632      	mov	r2, r6
 80a638a:	463b      	mov	r3, r7
 80a638c:	f002 feb2 	bl	80a90f4 <__aeabi_dmul>
 80a6390:	a361      	add	r3, pc, #388	; (adr r3, 80a6518 <__ieee754_pow+0x8e8>)
 80a6392:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6396:	f002 fcf7 	bl	80a8d88 <__adddf3>
 80a639a:	4632      	mov	r2, r6
 80a639c:	463b      	mov	r3, r7
 80a639e:	f002 fea9 	bl	80a90f4 <__aeabi_dmul>
 80a63a2:	a35f      	add	r3, pc, #380	; (adr r3, 80a6520 <__ieee754_pow+0x8f0>)
 80a63a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a63a8:	f002 fcec 	bl	80a8d84 <__aeabi_dsub>
 80a63ac:	4632      	mov	r2, r6
 80a63ae:	463b      	mov	r3, r7
 80a63b0:	f002 fea0 	bl	80a90f4 <__aeabi_dmul>
 80a63b4:	a35c      	add	r3, pc, #368	; (adr r3, 80a6528 <__ieee754_pow+0x8f8>)
 80a63b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a63ba:	f002 fce5 	bl	80a8d88 <__adddf3>
 80a63be:	4632      	mov	r2, r6
 80a63c0:	463b      	mov	r3, r7
 80a63c2:	f002 fe97 	bl	80a90f4 <__aeabi_dmul>
 80a63c6:	4602      	mov	r2, r0
 80a63c8:	460b      	mov	r3, r1
 80a63ca:	4620      	mov	r0, r4
 80a63cc:	4629      	mov	r1, r5
 80a63ce:	f002 fcd9 	bl	80a8d84 <__aeabi_dsub>
 80a63d2:	4606      	mov	r6, r0
 80a63d4:	460f      	mov	r7, r1
 80a63d6:	4632      	mov	r2, r6
 80a63d8:	463b      	mov	r3, r7
 80a63da:	4629      	mov	r1, r5
 80a63dc:	4620      	mov	r0, r4
 80a63de:	f002 fe89 	bl	80a90f4 <__aeabi_dmul>
 80a63e2:	2200      	movs	r2, #0
 80a63e4:	4680      	mov	r8, r0
 80a63e6:	4689      	mov	r9, r1
 80a63e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a63ec:	4630      	mov	r0, r6
 80a63ee:	4639      	mov	r1, r7
 80a63f0:	f002 fcc8 	bl	80a8d84 <__aeabi_dsub>
 80a63f4:	4602      	mov	r2, r0
 80a63f6:	460b      	mov	r3, r1
 80a63f8:	4640      	mov	r0, r8
 80a63fa:	4649      	mov	r1, r9
 80a63fc:	f002 ffa4 	bl	80a9348 <__aeabi_ddiv>
 80a6400:	4652      	mov	r2, sl
 80a6402:	4606      	mov	r6, r0
 80a6404:	460f      	mov	r7, r1
 80a6406:	465b      	mov	r3, fp
 80a6408:	4629      	mov	r1, r5
 80a640a:	4620      	mov	r0, r4
 80a640c:	f002 fe72 	bl	80a90f4 <__aeabi_dmul>
 80a6410:	4652      	mov	r2, sl
 80a6412:	465b      	mov	r3, fp
 80a6414:	f002 fcb8 	bl	80a8d88 <__adddf3>
 80a6418:	4602      	mov	r2, r0
 80a641a:	460b      	mov	r3, r1
 80a641c:	4630      	mov	r0, r6
 80a641e:	4639      	mov	r1, r7
 80a6420:	f002 fcb0 	bl	80a8d84 <__aeabi_dsub>
 80a6424:	462b      	mov	r3, r5
 80a6426:	4622      	mov	r2, r4
 80a6428:	f002 fcac 	bl	80a8d84 <__aeabi_dsub>
 80a642c:	4602      	mov	r2, r0
 80a642e:	460b      	mov	r3, r1
 80a6430:	2000      	movs	r0, #0
 80a6432:	4942      	ldr	r1, [pc, #264]	; (80a653c <__ieee754_pow+0x90c>)
 80a6434:	f002 fca6 	bl	80a8d84 <__aeabi_dsub>
 80a6438:	9d00      	ldr	r5, [sp, #0]
 80a643a:	440d      	add	r5, r1
 80a643c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80a6440:	f2c0 8153 	blt.w	80a66ea <__ieee754_pow+0xaba>
 80a6444:	4629      	mov	r1, r5
 80a6446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a644a:	f002 fe53 	bl	80a90f4 <__aeabi_dmul>
 80a644e:	e9cd 0100 	strd	r0, r1, [sp]
 80a6452:	e433      	b.n	80a5cbc <__ieee754_pow+0x8c>
 80a6454:	f1b8 0f00 	cmp.w	r8, #0
 80a6458:	f6ff aca2 	blt.w	80a5da0 <__ieee754_pow+0x170>
 80a645c:	2300      	movs	r3, #0
 80a645e:	2400      	movs	r4, #0
 80a6460:	e9cd 3400 	strd	r3, r4, [sp]
 80a6464:	e42a      	b.n	80a5cbc <__ieee754_pow+0x8c>
 80a6466:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80a654c <__ieee754_pow+0x91c>
 80a646a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a646e:	4563      	cmp	r3, ip
 80a6470:	f340 80f6 	ble.w	80a6660 <__ieee754_pow+0xa30>
 80a6474:	4b34      	ldr	r3, [pc, #208]	; (80a6548 <__ieee754_pow+0x918>)
 80a6476:	440b      	add	r3, r1
 80a6478:	4303      	orrs	r3, r0
 80a647a:	d10a      	bne.n	80a6492 <__ieee754_pow+0x862>
 80a647c:	4632      	mov	r2, r6
 80a647e:	463b      	mov	r3, r7
 80a6480:	f002 fc80 	bl	80a8d84 <__aeabi_dsub>
 80a6484:	4652      	mov	r2, sl
 80a6486:	465b      	mov	r3, fp
 80a6488:	f003 f8ba 	bl	80a9600 <__aeabi_dcmpge>
 80a648c:	2800      	cmp	r0, #0
 80a648e:	f43f aef5 	beq.w	80a627c <__ieee754_pow+0x64c>
 80a6492:	a327      	add	r3, pc, #156	; (adr r3, 80a6530 <__ieee754_pow+0x900>)
 80a6494:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6498:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a649c:	f002 fe2a 	bl	80a90f4 <__aeabi_dmul>
 80a64a0:	a323      	add	r3, pc, #140	; (adr r3, 80a6530 <__ieee754_pow+0x900>)
 80a64a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a64a6:	f002 fe25 	bl	80a90f4 <__aeabi_dmul>
 80a64aa:	e9cd 0100 	strd	r0, r1, [sp]
 80a64ae:	e405      	b.n	80a5cbc <__ieee754_pow+0x8c>
 80a64b0:	f1b8 0f00 	cmp.w	r8, #0
 80a64b4:	dad2      	bge.n	80a645c <__ieee754_pow+0x82c>
 80a64b6:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80a64ba:	9600      	str	r6, [sp, #0]
 80a64bc:	9301      	str	r3, [sp, #4]
 80a64be:	f7ff bbfd 	b.w	80a5cbc <__ieee754_pow+0x8c>
 80a64c2:	2300      	movs	r3, #0
 80a64c4:	2400      	movs	r4, #0
 80a64c6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a64ca:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a64ce:	2300      	movs	r3, #0
 80a64d0:	4c1a      	ldr	r4, [pc, #104]	; (80a653c <__ieee754_pow+0x90c>)
 80a64d2:	f04f 0a00 	mov.w	sl, #0
 80a64d6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a64da:	e4d8      	b.n	80a5e8e <__ieee754_pow+0x25e>
 80a64dc:	f04f 0c00 	mov.w	ip, #0
 80a64e0:	e4b1      	b.n	80a5e46 <__ieee754_pow+0x216>
 80a64e2:	bf00      	nop
 80a64e4:	f3af 8000 	nop.w
 80a64e8:	652b82fe 	.word	0x652b82fe
 80a64ec:	3c971547 	.word	0x3c971547
 80a64f0:	00000000 	.word	0x00000000
 80a64f4:	3fe62e43 	.word	0x3fe62e43
 80a64f8:	fefa39ef 	.word	0xfefa39ef
 80a64fc:	3fe62e42 	.word	0x3fe62e42
 80a6500:	0ca86c39 	.word	0x0ca86c39
 80a6504:	be205c61 	.word	0xbe205c61
 80a6508:	72bea4d0 	.word	0x72bea4d0
 80a650c:	3e663769 	.word	0x3e663769
 80a6510:	c5d26bf1 	.word	0xc5d26bf1
 80a6514:	3ebbbd41 	.word	0x3ebbbd41
 80a6518:	af25de2c 	.word	0xaf25de2c
 80a651c:	3f11566a 	.word	0x3f11566a
 80a6520:	16bebd93 	.word	0x16bebd93
 80a6524:	3f66c16c 	.word	0x3f66c16c
 80a6528:	5555553e 	.word	0x5555553e
 80a652c:	3fc55555 	.word	0x3fc55555
 80a6530:	c2f8f359 	.word	0xc2f8f359
 80a6534:	01a56e1f 	.word	0x01a56e1f
 80a6538:	bff00000 	.word	0xbff00000
 80a653c:	3ff00000 	.word	0x3ff00000
 80a6540:	408fffff 	.word	0x408fffff
 80a6544:	000fffff 	.word	0x000fffff
 80a6548:	3f6f3400 	.word	0x3f6f3400
 80a654c:	4090cbff 	.word	0x4090cbff
 80a6550:	429c      	cmp	r4, r3
 80a6552:	f6ff af7f 	blt.w	80a6454 <__ieee754_pow+0x824>
 80a6556:	4b7e      	ldr	r3, [pc, #504]	; (80a6750 <__ieee754_pow+0xb20>)
 80a6558:	429c      	cmp	r4, r3
 80a655a:	f73f ac1d 	bgt.w	80a5d98 <__ieee754_pow+0x168>
 80a655e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a6562:	2200      	movs	r2, #0
 80a6564:	4b7a      	ldr	r3, [pc, #488]	; (80a6750 <__ieee754_pow+0xb20>)
 80a6566:	f002 fc0d 	bl	80a8d84 <__aeabi_dsub>
 80a656a:	a36b      	add	r3, pc, #428	; (adr r3, 80a6718 <__ieee754_pow+0xae8>)
 80a656c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6570:	4604      	mov	r4, r0
 80a6572:	460d      	mov	r5, r1
 80a6574:	f002 fdbe 	bl	80a90f4 <__aeabi_dmul>
 80a6578:	a369      	add	r3, pc, #420	; (adr r3, 80a6720 <__ieee754_pow+0xaf0>)
 80a657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a657e:	4682      	mov	sl, r0
 80a6580:	468b      	mov	fp, r1
 80a6582:	4620      	mov	r0, r4
 80a6584:	4629      	mov	r1, r5
 80a6586:	f002 fdb5 	bl	80a90f4 <__aeabi_dmul>
 80a658a:	2200      	movs	r2, #0
 80a658c:	4680      	mov	r8, r0
 80a658e:	4689      	mov	r9, r1
 80a6590:	4620      	mov	r0, r4
 80a6592:	4629      	mov	r1, r5
 80a6594:	4b6f      	ldr	r3, [pc, #444]	; (80a6754 <__ieee754_pow+0xb24>)
 80a6596:	f002 fdad 	bl	80a90f4 <__aeabi_dmul>
 80a659a:	4602      	mov	r2, r0
 80a659c:	460b      	mov	r3, r1
 80a659e:	a162      	add	r1, pc, #392	; (adr r1, 80a6728 <__ieee754_pow+0xaf8>)
 80a65a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a65a4:	f002 fbee 	bl	80a8d84 <__aeabi_dsub>
 80a65a8:	4622      	mov	r2, r4
 80a65aa:	462b      	mov	r3, r5
 80a65ac:	f002 fda2 	bl	80a90f4 <__aeabi_dmul>
 80a65b0:	4602      	mov	r2, r0
 80a65b2:	460b      	mov	r3, r1
 80a65b4:	2000      	movs	r0, #0
 80a65b6:	4968      	ldr	r1, [pc, #416]	; (80a6758 <__ieee754_pow+0xb28>)
 80a65b8:	f002 fbe4 	bl	80a8d84 <__aeabi_dsub>
 80a65bc:	4622      	mov	r2, r4
 80a65be:	462b      	mov	r3, r5
 80a65c0:	4604      	mov	r4, r0
 80a65c2:	460d      	mov	r5, r1
 80a65c4:	4610      	mov	r0, r2
 80a65c6:	4619      	mov	r1, r3
 80a65c8:	f002 fd94 	bl	80a90f4 <__aeabi_dmul>
 80a65cc:	4602      	mov	r2, r0
 80a65ce:	460b      	mov	r3, r1
 80a65d0:	4620      	mov	r0, r4
 80a65d2:	4629      	mov	r1, r5
 80a65d4:	f002 fd8e 	bl	80a90f4 <__aeabi_dmul>
 80a65d8:	a355      	add	r3, pc, #340	; (adr r3, 80a6730 <__ieee754_pow+0xb00>)
 80a65da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a65de:	f002 fd89 	bl	80a90f4 <__aeabi_dmul>
 80a65e2:	4602      	mov	r2, r0
 80a65e4:	460b      	mov	r3, r1
 80a65e6:	4640      	mov	r0, r8
 80a65e8:	4649      	mov	r1, r9
 80a65ea:	f002 fbcb 	bl	80a8d84 <__aeabi_dsub>
 80a65ee:	4680      	mov	r8, r0
 80a65f0:	4689      	mov	r9, r1
 80a65f2:	4650      	mov	r0, sl
 80a65f4:	4659      	mov	r1, fp
 80a65f6:	4642      	mov	r2, r8
 80a65f8:	464b      	mov	r3, r9
 80a65fa:	2400      	movs	r4, #0
 80a65fc:	f002 fbc4 	bl	80a8d88 <__adddf3>
 80a6600:	4652      	mov	r2, sl
 80a6602:	465b      	mov	r3, fp
 80a6604:	4620      	mov	r0, r4
 80a6606:	460d      	mov	r5, r1
 80a6608:	f002 fbbc 	bl	80a8d84 <__aeabi_dsub>
 80a660c:	4602      	mov	r2, r0
 80a660e:	460b      	mov	r3, r1
 80a6610:	4640      	mov	r0, r8
 80a6612:	4649      	mov	r1, r9
 80a6614:	f002 fbb6 	bl	80a8d84 <__aeabi_dsub>
 80a6618:	4682      	mov	sl, r0
 80a661a:	468b      	mov	fp, r1
 80a661c:	e5cf      	b.n	80a61be <__ieee754_pow+0x58e>
 80a661e:	4652      	mov	r2, sl
 80a6620:	465b      	mov	r3, fp
 80a6622:	2000      	movs	r0, #0
 80a6624:	494a      	ldr	r1, [pc, #296]	; (80a6750 <__ieee754_pow+0xb20>)
 80a6626:	f002 fe8f 	bl	80a9348 <__aeabi_ddiv>
 80a662a:	e9cd 0100 	strd	r0, r1, [sp]
 80a662e:	f7ff bb45 	b.w	80a5cbc <__ieee754_pow+0x8c>
 80a6632:	4652      	mov	r2, sl
 80a6634:	4650      	mov	r0, sl
 80a6636:	465b      	mov	r3, fp
 80a6638:	4659      	mov	r1, fp
 80a663a:	f002 fd5b 	bl	80a90f4 <__aeabi_dmul>
 80a663e:	e9cd 0100 	strd	r0, r1, [sp]
 80a6642:	f7ff bb3b 	b.w	80a5cbc <__ieee754_pow+0x8c>
 80a6646:	2a00      	cmp	r2, #0
 80a6648:	d141      	bne.n	80a66ce <__ieee754_pow+0xa9e>
 80a664a:	f1c1 0114 	rsb	r1, r1, #20
 80a664e:	fa45 f001 	asr.w	r0, r5, r1
 80a6652:	fa00 f101 	lsl.w	r1, r0, r1
 80a6656:	42a9      	cmp	r1, r5
 80a6658:	d055      	beq.n	80a6706 <__ieee754_pow+0xad6>
 80a665a:	9202      	str	r2, [sp, #8]
 80a665c:	f7ff bb0d 	b.w	80a5c7a <__ieee754_pow+0x4a>
 80a6660:	4a3d      	ldr	r2, [pc, #244]	; (80a6758 <__ieee754_pow+0xb28>)
 80a6662:	4293      	cmp	r3, r2
 80a6664:	dc56      	bgt.n	80a6714 <__ieee754_pow+0xae4>
 80a6666:	e9dd 1200 	ldrd	r1, r2, [sp]
 80a666a:	9100      	str	r1, [sp, #0]
 80a666c:	910c      	str	r1, [sp, #48]	; 0x30
 80a666e:	e639      	b.n	80a62e4 <__ieee754_pow+0x6b4>
 80a6670:	a331      	add	r3, pc, #196	; (adr r3, 80a6738 <__ieee754_pow+0xb08>)
 80a6672:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a667a:	f002 fd3b 	bl	80a90f4 <__aeabi_dmul>
 80a667e:	a32e      	add	r3, pc, #184	; (adr r3, 80a6738 <__ieee754_pow+0xb08>)
 80a6680:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6684:	f002 fd36 	bl	80a90f4 <__aeabi_dmul>
 80a6688:	e9cd 0100 	strd	r0, r1, [sp]
 80a668c:	f7ff bb16 	b.w	80a5cbc <__ieee754_pow+0x8c>
 80a6690:	9b02      	ldr	r3, [sp, #8]
 80a6692:	2b01      	cmp	r3, #1
 80a6694:	f47f ab12 	bne.w	80a5cbc <__ieee754_pow+0x8c>
 80a6698:	e9dd 4500 	ldrd	r4, r5, [sp]
 80a669c:	4622      	mov	r2, r4
 80a669e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a66a2:	e9cd 2300 	strd	r2, r3, [sp]
 80a66a6:	f7ff bb09 	b.w	80a5cbc <__ieee754_pow+0x8c>
 80a66aa:	a425      	add	r4, pc, #148	; (adr r4, 80a6740 <__ieee754_pow+0xb10>)
 80a66ac:	e9d4 3400 	ldrd	r3, r4, [r4]
 80a66b0:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a66b4:	a424      	add	r4, pc, #144	; (adr r4, 80a6748 <__ieee754_pow+0xb18>)
 80a66b6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80a66ba:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a66be:	2300      	movs	r3, #0
 80a66c0:	4c26      	ldr	r4, [pc, #152]	; (80a675c <__ieee754_pow+0xb2c>)
 80a66c2:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
 80a66c6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a66ca:	f7ff bbe0 	b.w	80a5e8e <__ieee754_pow+0x25e>
 80a66ce:	4650      	mov	r0, sl
 80a66d0:	4659      	mov	r1, fp
 80a66d2:	9302      	str	r3, [sp, #8]
 80a66d4:	f002 f91c 	bl	80a8910 <fabs>
 80a66d8:	9b02      	ldr	r3, [sp, #8]
 80a66da:	e9cd 0100 	strd	r0, r1, [sp]
 80a66de:	2b00      	cmp	r3, #0
 80a66e0:	f47f ab86 	bne.w	80a5df0 <__ieee754_pow+0x1c0>
 80a66e4:	9302      	str	r3, [sp, #8]
 80a66e6:	f7ff bb1b 	b.w	80a5d20 <__ieee754_pow+0xf0>
 80a66ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a66ec:	f002 fa30 	bl	80a8b50 <scalbn>
 80a66f0:	e6a9      	b.n	80a6446 <__ieee754_pow+0x816>
 80a66f2:	f000 0001 	and.w	r0, r0, #1
 80a66f6:	f1c0 0102 	rsb	r1, r0, #2
 80a66fa:	9102      	str	r1, [sp, #8]
 80a66fc:	2a00      	cmp	r2, #0
 80a66fe:	f43f aabc 	beq.w	80a5c7a <__ieee754_pow+0x4a>
 80a6702:	f7ff bb04 	b.w	80a5d0e <__ieee754_pow+0xde>
 80a6706:	f000 0001 	and.w	r0, r0, #1
 80a670a:	f1c0 0202 	rsb	r2, r0, #2
 80a670e:	9202      	str	r2, [sp, #8]
 80a6710:	f7ff bab3 	b.w	80a5c7a <__ieee754_pow+0x4a>
 80a6714:	151b      	asrs	r3, r3, #20
 80a6716:	e5b3      	b.n	80a6280 <__ieee754_pow+0x650>
 80a6718:	60000000 	.word	0x60000000
 80a671c:	3ff71547 	.word	0x3ff71547
 80a6720:	f85ddf44 	.word	0xf85ddf44
 80a6724:	3e54ae0b 	.word	0x3e54ae0b
 80a6728:	55555555 	.word	0x55555555
 80a672c:	3fd55555 	.word	0x3fd55555
 80a6730:	652b82fe 	.word	0x652b82fe
 80a6734:	3ff71547 	.word	0x3ff71547
 80a6738:	8800759c 	.word	0x8800759c
 80a673c:	7e37e43c 	.word	0x7e37e43c
 80a6740:	40000000 	.word	0x40000000
 80a6744:	3fe2b803 	.word	0x3fe2b803
 80a6748:	43cfd006 	.word	0x43cfd006
 80a674c:	3e4cfdeb 	.word	0x3e4cfdeb
 80a6750:	3ff00000 	.word	0x3ff00000
 80a6754:	3fd00000 	.word	0x3fd00000
 80a6758:	3fe00000 	.word	0x3fe00000
 80a675c:	3ff80000 	.word	0x3ff80000

080a6760 <__ieee754_rem_pio2>:
 80a6760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6764:	4f8c      	ldr	r7, [pc, #560]	; (80a6998 <__ieee754_rem_pio2+0x238>)
 80a6766:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 80a676a:	42bd      	cmp	r5, r7
 80a676c:	4614      	mov	r4, r2
 80a676e:	4606      	mov	r6, r0
 80a6770:	b08d      	sub	sp, #52	; 0x34
 80a6772:	f340 8086 	ble.w	80a6882 <__ieee754_rem_pio2+0x122>
 80a6776:	4a89      	ldr	r2, [pc, #548]	; (80a699c <__ieee754_rem_pio2+0x23c>)
 80a6778:	468b      	mov	fp, r1
 80a677a:	4295      	cmp	r5, r2
 80a677c:	dc27      	bgt.n	80a67ce <__ieee754_rem_pio2+0x6e>
 80a677e:	a37c      	add	r3, pc, #496	; (adr r3, 80a6970 <__ieee754_rem_pio2+0x210>)
 80a6780:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6784:	2900      	cmp	r1, #0
 80a6786:	f340 81b8 	ble.w	80a6afa <__ieee754_rem_pio2+0x39a>
 80a678a:	f002 fafb 	bl	80a8d84 <__aeabi_dsub>
 80a678e:	4b84      	ldr	r3, [pc, #528]	; (80a69a0 <__ieee754_rem_pio2+0x240>)
 80a6790:	4606      	mov	r6, r0
 80a6792:	429d      	cmp	r5, r3
 80a6794:	460f      	mov	r7, r1
 80a6796:	f000 808b 	beq.w	80a68b0 <__ieee754_rem_pio2+0x150>
 80a679a:	a377      	add	r3, pc, #476	; (adr r3, 80a6978 <__ieee754_rem_pio2+0x218>)
 80a679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a67a0:	f002 faf0 	bl	80a8d84 <__aeabi_dsub>
 80a67a4:	4602      	mov	r2, r0
 80a67a6:	460b      	mov	r3, r1
 80a67a8:	4630      	mov	r0, r6
 80a67aa:	e9c4 2300 	strd	r2, r3, [r4]
 80a67ae:	4639      	mov	r1, r7
 80a67b0:	f002 fae8 	bl	80a8d84 <__aeabi_dsub>
 80a67b4:	a370      	add	r3, pc, #448	; (adr r3, 80a6978 <__ieee754_rem_pio2+0x218>)
 80a67b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a67ba:	f002 fae3 	bl	80a8d84 <__aeabi_dsub>
 80a67be:	f04f 0a01 	mov.w	sl, #1
 80a67c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a67c6:	4650      	mov	r0, sl
 80a67c8:	b00d      	add	sp, #52	; 0x34
 80a67ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a67ce:	4a75      	ldr	r2, [pc, #468]	; (80a69a4 <__ieee754_rem_pio2+0x244>)
 80a67d0:	4295      	cmp	r5, r2
 80a67d2:	f340 808e 	ble.w	80a68f2 <__ieee754_rem_pio2+0x192>
 80a67d6:	4a74      	ldr	r2, [pc, #464]	; (80a69a8 <__ieee754_rem_pio2+0x248>)
 80a67d8:	4295      	cmp	r5, r2
 80a67da:	dc5e      	bgt.n	80a689a <__ieee754_rem_pio2+0x13a>
 80a67dc:	ea4f 5a25 	mov.w	sl, r5, asr #20
 80a67e0:	f2aa 4a16 	subw	sl, sl, #1046	; 0x416
 80a67e4:	eba5 510a 	sub.w	r1, r5, sl, lsl #20
 80a67e8:	460f      	mov	r7, r1
 80a67ea:	f002 ff33 	bl	80a9654 <__aeabi_d2iz>
 80a67ee:	f002 fc17 	bl	80a9020 <__aeabi_i2d>
 80a67f2:	4680      	mov	r8, r0
 80a67f4:	4689      	mov	r9, r1
 80a67f6:	4630      	mov	r0, r6
 80a67f8:	4639      	mov	r1, r7
 80a67fa:	4642      	mov	r2, r8
 80a67fc:	464b      	mov	r3, r9
 80a67fe:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80a6802:	f002 fabf 	bl	80a8d84 <__aeabi_dsub>
 80a6806:	2200      	movs	r2, #0
 80a6808:	4b68      	ldr	r3, [pc, #416]	; (80a69ac <__ieee754_rem_pio2+0x24c>)
 80a680a:	f002 fc73 	bl	80a90f4 <__aeabi_dmul>
 80a680e:	460f      	mov	r7, r1
 80a6810:	4606      	mov	r6, r0
 80a6812:	f002 ff1f 	bl	80a9654 <__aeabi_d2iz>
 80a6816:	4605      	mov	r5, r0
 80a6818:	f002 fc02 	bl	80a9020 <__aeabi_i2d>
 80a681c:	4602      	mov	r2, r0
 80a681e:	460b      	mov	r3, r1
 80a6820:	4630      	mov	r0, r6
 80a6822:	4639      	mov	r1, r7
 80a6824:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a6828:	f002 faac 	bl	80a8d84 <__aeabi_dsub>
 80a682c:	2200      	movs	r2, #0
 80a682e:	4b5f      	ldr	r3, [pc, #380]	; (80a69ac <__ieee754_rem_pio2+0x24c>)
 80a6830:	f002 fc60 	bl	80a90f4 <__aeabi_dmul>
 80a6834:	4602      	mov	r2, r0
 80a6836:	460b      	mov	r3, r1
 80a6838:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a683c:	2200      	movs	r2, #0
 80a683e:	2300      	movs	r3, #0
 80a6840:	f002 fec0 	bl	80a95c4 <__aeabi_dcmpeq>
 80a6844:	2800      	cmp	r0, #0
 80a6846:	f000 8156 	beq.w	80a6af6 <__ieee754_rem_pio2+0x396>
 80a684a:	2d00      	cmp	r5, #0
 80a684c:	bf0c      	ite	eq
 80a684e:	2301      	moveq	r3, #1
 80a6850:	2302      	movne	r3, #2
 80a6852:	2002      	movs	r0, #2
 80a6854:	4956      	ldr	r1, [pc, #344]	; (80a69b0 <__ieee754_rem_pio2+0x250>)
 80a6856:	4652      	mov	r2, sl
 80a6858:	e9cd 0100 	strd	r0, r1, [sp]
 80a685c:	4621      	mov	r1, r4
 80a685e:	a806      	add	r0, sp, #24
 80a6860:	f000 fec2 	bl	80a75e8 <__kernel_rem_pio2>
 80a6864:	f1bb 0f00 	cmp.w	fp, #0
 80a6868:	4682      	mov	sl, r0
 80a686a:	daac      	bge.n	80a67c6 <__ieee754_rem_pio2+0x66>
 80a686c:	6862      	ldr	r2, [r4, #4]
 80a686e:	68e3      	ldr	r3, [r4, #12]
 80a6870:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a6874:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a6878:	f1c0 0a00 	rsb	sl, r0, #0
 80a687c:	6062      	str	r2, [r4, #4]
 80a687e:	60e3      	str	r3, [r4, #12]
 80a6880:	e7a1      	b.n	80a67c6 <__ieee754_rem_pio2+0x66>
 80a6882:	f04f 0a00 	mov.w	sl, #0
 80a6886:	2200      	movs	r2, #0
 80a6888:	2300      	movs	r3, #0
 80a688a:	e9c4 0100 	strd	r0, r1, [r4]
 80a688e:	4650      	mov	r0, sl
 80a6890:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a6894:	b00d      	add	sp, #52	; 0x34
 80a6896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a689a:	4602      	mov	r2, r0
 80a689c:	465b      	mov	r3, fp
 80a689e:	f002 fa71 	bl	80a8d84 <__aeabi_dsub>
 80a68a2:	f04f 0a00 	mov.w	sl, #0
 80a68a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a68aa:	e9c4 0100 	strd	r0, r1, [r4]
 80a68ae:	e78a      	b.n	80a67c6 <__ieee754_rem_pio2+0x66>
 80a68b0:	a333      	add	r3, pc, #204	; (adr r3, 80a6980 <__ieee754_rem_pio2+0x220>)
 80a68b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a68b6:	f002 fa65 	bl	80a8d84 <__aeabi_dsub>
 80a68ba:	a333      	add	r3, pc, #204	; (adr r3, 80a6988 <__ieee754_rem_pio2+0x228>)
 80a68bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a68c0:	4606      	mov	r6, r0
 80a68c2:	460f      	mov	r7, r1
 80a68c4:	f002 fa5e 	bl	80a8d84 <__aeabi_dsub>
 80a68c8:	4602      	mov	r2, r0
 80a68ca:	460b      	mov	r3, r1
 80a68cc:	4630      	mov	r0, r6
 80a68ce:	e9c4 2300 	strd	r2, r3, [r4]
 80a68d2:	4639      	mov	r1, r7
 80a68d4:	f002 fa56 	bl	80a8d84 <__aeabi_dsub>
 80a68d8:	a32b      	add	r3, pc, #172	; (adr r3, 80a6988 <__ieee754_rem_pio2+0x228>)
 80a68da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a68de:	f002 fa51 	bl	80a8d84 <__aeabi_dsub>
 80a68e2:	f04f 0a01 	mov.w	sl, #1
 80a68e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a68ea:	4650      	mov	r0, sl
 80a68ec:	b00d      	add	sp, #52	; 0x34
 80a68ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a68f2:	f002 f80d 	bl	80a8910 <fabs>
 80a68f6:	a326      	add	r3, pc, #152	; (adr r3, 80a6990 <__ieee754_rem_pio2+0x230>)
 80a68f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a68fc:	4606      	mov	r6, r0
 80a68fe:	460f      	mov	r7, r1
 80a6900:	f002 fbf8 	bl	80a90f4 <__aeabi_dmul>
 80a6904:	2200      	movs	r2, #0
 80a6906:	4b2b      	ldr	r3, [pc, #172]	; (80a69b4 <__ieee754_rem_pio2+0x254>)
 80a6908:	f002 fa3e 	bl	80a8d88 <__adddf3>
 80a690c:	f002 fea2 	bl	80a9654 <__aeabi_d2iz>
 80a6910:	4682      	mov	sl, r0
 80a6912:	f002 fb85 	bl	80a9020 <__aeabi_i2d>
 80a6916:	a316      	add	r3, pc, #88	; (adr r3, 80a6970 <__ieee754_rem_pio2+0x210>)
 80a6918:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a691c:	4680      	mov	r8, r0
 80a691e:	4689      	mov	r9, r1
 80a6920:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80a6924:	f002 fbe6 	bl	80a90f4 <__aeabi_dmul>
 80a6928:	4602      	mov	r2, r0
 80a692a:	460b      	mov	r3, r1
 80a692c:	4630      	mov	r0, r6
 80a692e:	4639      	mov	r1, r7
 80a6930:	f002 fa28 	bl	80a8d84 <__aeabi_dsub>
 80a6934:	a310      	add	r3, pc, #64	; (adr r3, 80a6978 <__ieee754_rem_pio2+0x218>)
 80a6936:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a693a:	4606      	mov	r6, r0
 80a693c:	460f      	mov	r7, r1
 80a693e:	4640      	mov	r0, r8
 80a6940:	4649      	mov	r1, r9
 80a6942:	46b0      	mov	r8, r6
 80a6944:	46b9      	mov	r9, r7
 80a6946:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80a694a:	f002 fbd3 	bl	80a90f4 <__aeabi_dmul>
 80a694e:	f1ba 0f1f 	cmp.w	sl, #31
 80a6952:	4606      	mov	r6, r0
 80a6954:	460f      	mov	r7, r1
 80a6956:	dc31      	bgt.n	80a69bc <__ieee754_rem_pio2+0x25c>
 80a6958:	4b17      	ldr	r3, [pc, #92]	; (80a69b8 <__ieee754_rem_pio2+0x258>)
 80a695a:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80a695e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6962:	42ab      	cmp	r3, r5
 80a6964:	d02a      	beq.n	80a69bc <__ieee754_rem_pio2+0x25c>
 80a6966:	4602      	mov	r2, r0
 80a6968:	460b      	mov	r3, r1
 80a696a:	4640      	mov	r0, r8
 80a696c:	4649      	mov	r1, r9
 80a696e:	e09e      	b.n	80a6aae <__ieee754_rem_pio2+0x34e>
 80a6970:	54400000 	.word	0x54400000
 80a6974:	3ff921fb 	.word	0x3ff921fb
 80a6978:	1a626331 	.word	0x1a626331
 80a697c:	3dd0b461 	.word	0x3dd0b461
 80a6980:	1a600000 	.word	0x1a600000
 80a6984:	3dd0b461 	.word	0x3dd0b461
 80a6988:	2e037073 	.word	0x2e037073
 80a698c:	3ba3198a 	.word	0x3ba3198a
 80a6990:	6dc9c883 	.word	0x6dc9c883
 80a6994:	3fe45f30 	.word	0x3fe45f30
 80a6998:	3fe921fb 	.word	0x3fe921fb
 80a699c:	4002d97b 	.word	0x4002d97b
 80a69a0:	3ff921fb 	.word	0x3ff921fb
 80a69a4:	413921fb 	.word	0x413921fb
 80a69a8:	7fefffff 	.word	0x7fefffff
 80a69ac:	41700000 	.word	0x41700000
 80a69b0:	080aa458 	.word	0x080aa458
 80a69b4:	3fe00000 	.word	0x3fe00000
 80a69b8:	080aa3d8 	.word	0x080aa3d8
 80a69bc:	463b      	mov	r3, r7
 80a69be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a69c2:	4632      	mov	r2, r6
 80a69c4:	f002 f9de 	bl	80a8d84 <__aeabi_dsub>
 80a69c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a69cc:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
 80a69d0:	2b10      	cmp	r3, #16
 80a69d2:	4689      	mov	r9, r1
 80a69d4:	4680      	mov	r8, r0
 80a69d6:	ea4f 5525 	mov.w	r5, r5, asr #20
 80a69da:	dd6c      	ble.n	80a6ab6 <__ieee754_rem_pio2+0x356>
 80a69dc:	a366      	add	r3, pc, #408	; (adr r3, 80a6b78 <__ieee754_rem_pio2+0x418>)
 80a69de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a69e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a69e6:	f002 fb85 	bl	80a90f4 <__aeabi_dmul>
 80a69ea:	4606      	mov	r6, r0
 80a69ec:	460f      	mov	r7, r1
 80a69ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a69f2:	4632      	mov	r2, r6
 80a69f4:	463b      	mov	r3, r7
 80a69f6:	f002 f9c5 	bl	80a8d84 <__aeabi_dsub>
 80a69fa:	4680      	mov	r8, r0
 80a69fc:	4689      	mov	r9, r1
 80a69fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a6a02:	4642      	mov	r2, r8
 80a6a04:	464b      	mov	r3, r9
 80a6a06:	f002 f9bd 	bl	80a8d84 <__aeabi_dsub>
 80a6a0a:	4632      	mov	r2, r6
 80a6a0c:	463b      	mov	r3, r7
 80a6a0e:	f002 f9b9 	bl	80a8d84 <__aeabi_dsub>
 80a6a12:	a35b      	add	r3, pc, #364	; (adr r3, 80a6b80 <__ieee754_rem_pio2+0x420>)
 80a6a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6a18:	4606      	mov	r6, r0
 80a6a1a:	460f      	mov	r7, r1
 80a6a1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a6a20:	f002 fb68 	bl	80a90f4 <__aeabi_dmul>
 80a6a24:	4632      	mov	r2, r6
 80a6a26:	463b      	mov	r3, r7
 80a6a28:	f002 f9ac 	bl	80a8d84 <__aeabi_dsub>
 80a6a2c:	4606      	mov	r6, r0
 80a6a2e:	460f      	mov	r7, r1
 80a6a30:	4640      	mov	r0, r8
 80a6a32:	4649      	mov	r1, r9
 80a6a34:	463b      	mov	r3, r7
 80a6a36:	4632      	mov	r2, r6
 80a6a38:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80a6a3c:	f002 f9a2 	bl	80a8d84 <__aeabi_dsub>
 80a6a40:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a6a44:	1aed      	subs	r5, r5, r3
 80a6a46:	2d31      	cmp	r5, #49	; 0x31
 80a6a48:	4689      	mov	r9, r1
 80a6a4a:	4680      	mov	r8, r0
 80a6a4c:	dd33      	ble.n	80a6ab6 <__ieee754_rem_pio2+0x356>
 80a6a4e:	a34e      	add	r3, pc, #312	; (adr r3, 80a6b88 <__ieee754_rem_pio2+0x428>)
 80a6a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6a54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a6a58:	f002 fb4c 	bl	80a90f4 <__aeabi_dmul>
 80a6a5c:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
 80a6a60:	4680      	mov	r8, r0
 80a6a62:	4689      	mov	r9, r1
 80a6a64:	4642      	mov	r2, r8
 80a6a66:	4631      	mov	r1, r6
 80a6a68:	464b      	mov	r3, r9
 80a6a6a:	4628      	mov	r0, r5
 80a6a6c:	f002 f98a 	bl	80a8d84 <__aeabi_dsub>
 80a6a70:	4602      	mov	r2, r0
 80a6a72:	460b      	mov	r3, r1
 80a6a74:	4628      	mov	r0, r5
 80a6a76:	4631      	mov	r1, r6
 80a6a78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a6a7c:	f002 f982 	bl	80a8d84 <__aeabi_dsub>
 80a6a80:	4642      	mov	r2, r8
 80a6a82:	464b      	mov	r3, r9
 80a6a84:	f002 f97e 	bl	80a8d84 <__aeabi_dsub>
 80a6a88:	a341      	add	r3, pc, #260	; (adr r3, 80a6b90 <__ieee754_rem_pio2+0x430>)
 80a6a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6a8e:	4606      	mov	r6, r0
 80a6a90:	460f      	mov	r7, r1
 80a6a92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a6a96:	f002 fb2d 	bl	80a90f4 <__aeabi_dmul>
 80a6a9a:	4632      	mov	r2, r6
 80a6a9c:	463b      	mov	r3, r7
 80a6a9e:	f002 f971 	bl	80a8d84 <__aeabi_dsub>
 80a6aa2:	4606      	mov	r6, r0
 80a6aa4:	460f      	mov	r7, r1
 80a6aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a6aaa:	4632      	mov	r2, r6
 80a6aac:	463b      	mov	r3, r7
 80a6aae:	f002 f969 	bl	80a8d84 <__aeabi_dsub>
 80a6ab2:	4680      	mov	r8, r0
 80a6ab4:	4689      	mov	r9, r1
 80a6ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a6aba:	4642      	mov	r2, r8
 80a6abc:	464b      	mov	r3, r9
 80a6abe:	e9c4 2300 	strd	r2, r3, [r4]
 80a6ac2:	f002 f95f 	bl	80a8d84 <__aeabi_dsub>
 80a6ac6:	4632      	mov	r2, r6
 80a6ac8:	463b      	mov	r3, r7
 80a6aca:	f002 f95b 	bl	80a8d84 <__aeabi_dsub>
 80a6ace:	4602      	mov	r2, r0
 80a6ad0:	460b      	mov	r3, r1
 80a6ad2:	f1bb 0f00 	cmp.w	fp, #0
 80a6ad6:	4605      	mov	r5, r0
 80a6ad8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a6adc:	f6bf ae73 	bge.w	80a67c6 <__ieee754_rem_pio2+0x66>
 80a6ae0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a6ae4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a6ae8:	e9c4 8300 	strd	r8, r3, [r4]
 80a6aec:	e9c4 5102 	strd	r5, r1, [r4, #8]
 80a6af0:	f1ca 0a00 	rsb	sl, sl, #0
 80a6af4:	e667      	b.n	80a67c6 <__ieee754_rem_pio2+0x66>
 80a6af6:	2303      	movs	r3, #3
 80a6af8:	e6ab      	b.n	80a6852 <__ieee754_rem_pio2+0xf2>
 80a6afa:	f002 f945 	bl	80a8d88 <__adddf3>
 80a6afe:	4b28      	ldr	r3, [pc, #160]	; (80a6ba0 <__ieee754_rem_pio2+0x440>)
 80a6b00:	4606      	mov	r6, r0
 80a6b02:	429d      	cmp	r5, r3
 80a6b04:	460f      	mov	r7, r1
 80a6b06:	d016      	beq.n	80a6b36 <__ieee754_rem_pio2+0x3d6>
 80a6b08:	a323      	add	r3, pc, #140	; (adr r3, 80a6b98 <__ieee754_rem_pio2+0x438>)
 80a6b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6b0e:	f002 f93b 	bl	80a8d88 <__adddf3>
 80a6b12:	4602      	mov	r2, r0
 80a6b14:	460b      	mov	r3, r1
 80a6b16:	4630      	mov	r0, r6
 80a6b18:	e9c4 2300 	strd	r2, r3, [r4]
 80a6b1c:	4639      	mov	r1, r7
 80a6b1e:	f002 f931 	bl	80a8d84 <__aeabi_dsub>
 80a6b22:	a31d      	add	r3, pc, #116	; (adr r3, 80a6b98 <__ieee754_rem_pio2+0x438>)
 80a6b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6b28:	f002 f92e 	bl	80a8d88 <__adddf3>
 80a6b2c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80a6b30:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a6b34:	e647      	b.n	80a67c6 <__ieee754_rem_pio2+0x66>
 80a6b36:	a310      	add	r3, pc, #64	; (adr r3, 80a6b78 <__ieee754_rem_pio2+0x418>)
 80a6b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6b3c:	f002 f924 	bl	80a8d88 <__adddf3>
 80a6b40:	a30f      	add	r3, pc, #60	; (adr r3, 80a6b80 <__ieee754_rem_pio2+0x420>)
 80a6b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6b46:	4606      	mov	r6, r0
 80a6b48:	460f      	mov	r7, r1
 80a6b4a:	f002 f91d 	bl	80a8d88 <__adddf3>
 80a6b4e:	4602      	mov	r2, r0
 80a6b50:	460b      	mov	r3, r1
 80a6b52:	4630      	mov	r0, r6
 80a6b54:	e9c4 2300 	strd	r2, r3, [r4]
 80a6b58:	4639      	mov	r1, r7
 80a6b5a:	f002 f913 	bl	80a8d84 <__aeabi_dsub>
 80a6b5e:	a308      	add	r3, pc, #32	; (adr r3, 80a6b80 <__ieee754_rem_pio2+0x420>)
 80a6b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6b64:	f002 f910 	bl	80a8d88 <__adddf3>
 80a6b68:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80a6b6c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a6b70:	e629      	b.n	80a67c6 <__ieee754_rem_pio2+0x66>
 80a6b72:	bf00      	nop
 80a6b74:	f3af 8000 	nop.w
 80a6b78:	1a600000 	.word	0x1a600000
 80a6b7c:	3dd0b461 	.word	0x3dd0b461
 80a6b80:	2e037073 	.word	0x2e037073
 80a6b84:	3ba3198a 	.word	0x3ba3198a
 80a6b88:	2e000000 	.word	0x2e000000
 80a6b8c:	3ba3198a 	.word	0x3ba3198a
 80a6b90:	252049c1 	.word	0x252049c1
 80a6b94:	397b839a 	.word	0x397b839a
 80a6b98:	1a626331 	.word	0x1a626331
 80a6b9c:	3dd0b461 	.word	0x3dd0b461
 80a6ba0:	3ff921fb 	.word	0x3ff921fb

080a6ba4 <__ieee754_sqrt>:
 80a6ba4:	4a60      	ldr	r2, [pc, #384]	; (80a6d28 <__ieee754_sqrt+0x184>)
 80a6ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6baa:	438a      	bics	r2, r1
 80a6bac:	460e      	mov	r6, r1
 80a6bae:	4605      	mov	r5, r0
 80a6bb0:	f000 8097 	beq.w	80a6ce2 <__ieee754_sqrt+0x13e>
 80a6bb4:	2900      	cmp	r1, #0
 80a6bb6:	460b      	mov	r3, r1
 80a6bb8:	4604      	mov	r4, r0
 80a6bba:	dd4e      	ble.n	80a6c5a <__ieee754_sqrt+0xb6>
 80a6bbc:	1509      	asrs	r1, r1, #20
 80a6bbe:	d05a      	beq.n	80a6c76 <__ieee754_sqrt+0xd2>
 80a6bc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a6bc4:	07ca      	lsls	r2, r1, #31
 80a6bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a6bca:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
 80a6bce:	d403      	bmi.n	80a6bd8 <__ieee754_sqrt+0x34>
 80a6bd0:	005b      	lsls	r3, r3, #1
 80a6bd2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80a6bd6:	0064      	lsls	r4, r4, #1
 80a6bd8:	f04f 0c00 	mov.w	ip, #0
 80a6bdc:	2516      	movs	r5, #22
 80a6bde:	4666      	mov	r6, ip
 80a6be0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80a6be4:	0fe1      	lsrs	r1, r4, #31
 80a6be6:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a6bea:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80a6bee:	0064      	lsls	r4, r4, #1
 80a6bf0:	18b1      	adds	r1, r6, r2
 80a6bf2:	4299      	cmp	r1, r3
 80a6bf4:	dc02      	bgt.n	80a6bfc <__ieee754_sqrt+0x58>
 80a6bf6:	1a5b      	subs	r3, r3, r1
 80a6bf8:	188e      	adds	r6, r1, r2
 80a6bfa:	4494      	add	ip, r2
 80a6bfc:	005b      	lsls	r3, r3, #1
 80a6bfe:	3d01      	subs	r5, #1
 80a6c00:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80a6c04:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a6c08:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80a6c0c:	d1f0      	bne.n	80a6bf0 <__ieee754_sqrt+0x4c>
 80a6c0e:	462f      	mov	r7, r5
 80a6c10:	2020      	movs	r0, #32
 80a6c12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80a6c16:	e009      	b.n	80a6c2c <__ieee754_sqrt+0x88>
 80a6c18:	d03d      	beq.n	80a6c96 <__ieee754_sqrt+0xf2>
 80a6c1a:	0fe1      	lsrs	r1, r4, #31
 80a6c1c:	3801      	subs	r0, #1
 80a6c1e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a6c22:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80a6c26:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80a6c2a:	d03d      	beq.n	80a6ca8 <__ieee754_sqrt+0x104>
 80a6c2c:	42b3      	cmp	r3, r6
 80a6c2e:	eb02 0105 	add.w	r1, r2, r5
 80a6c32:	ddf1      	ble.n	80a6c18 <__ieee754_sqrt+0x74>
 80a6c34:	2900      	cmp	r1, #0
 80a6c36:	eb01 0502 	add.w	r5, r1, r2
 80a6c3a:	db09      	blt.n	80a6c50 <__ieee754_sqrt+0xac>
 80a6c3c:	46b0      	mov	r8, r6
 80a6c3e:	1b9b      	subs	r3, r3, r6
 80a6c40:	42a1      	cmp	r1, r4
 80a6c42:	bf88      	it	hi
 80a6c44:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80a6c48:	4646      	mov	r6, r8
 80a6c4a:	1a64      	subs	r4, r4, r1
 80a6c4c:	4417      	add	r7, r2
 80a6c4e:	e7e4      	b.n	80a6c1a <__ieee754_sqrt+0x76>
 80a6c50:	2d00      	cmp	r5, #0
 80a6c52:	dbf3      	blt.n	80a6c3c <__ieee754_sqrt+0x98>
 80a6c54:	f106 0801 	add.w	r8, r6, #1
 80a6c58:	e7f1      	b.n	80a6c3e <__ieee754_sqrt+0x9a>
 80a6c5a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a6c5e:	4302      	orrs	r2, r0
 80a6c60:	d057      	beq.n	80a6d12 <__ieee754_sqrt+0x16e>
 80a6c62:	2900      	cmp	r1, #0
 80a6c64:	d14b      	bne.n	80a6cfe <__ieee754_sqrt+0x15a>
 80a6c66:	0ae2      	lsrs	r2, r4, #11
 80a6c68:	4613      	mov	r3, r2
 80a6c6a:	3915      	subs	r1, #21
 80a6c6c:	0564      	lsls	r4, r4, #21
 80a6c6e:	2a00      	cmp	r2, #0
 80a6c70:	d0f9      	beq.n	80a6c66 <__ieee754_sqrt+0xc2>
 80a6c72:	02d7      	lsls	r7, r2, #11
 80a6c74:	d452      	bmi.n	80a6d1c <__ieee754_sqrt+0x178>
 80a6c76:	2000      	movs	r0, #0
 80a6c78:	005b      	lsls	r3, r3, #1
 80a6c7a:	02de      	lsls	r6, r3, #11
 80a6c7c:	4605      	mov	r5, r0
 80a6c7e:	f100 0001 	add.w	r0, r0, #1
 80a6c82:	d5f9      	bpl.n	80a6c78 <__ieee754_sqrt+0xd4>
 80a6c84:	461a      	mov	r2, r3
 80a6c86:	4623      	mov	r3, r4
 80a6c88:	4084      	lsls	r4, r0
 80a6c8a:	f1c0 0020 	rsb	r0, r0, #32
 80a6c8e:	40c3      	lsrs	r3, r0
 80a6c90:	4313      	orrs	r3, r2
 80a6c92:	1b49      	subs	r1, r1, r5
 80a6c94:	e794      	b.n	80a6bc0 <__ieee754_sqrt+0x1c>
 80a6c96:	42a1      	cmp	r1, r4
 80a6c98:	d8bf      	bhi.n	80a6c1a <__ieee754_sqrt+0x76>
 80a6c9a:	2900      	cmp	r1, #0
 80a6c9c:	eb01 0502 	add.w	r5, r1, r2
 80a6ca0:	dbd6      	blt.n	80a6c50 <__ieee754_sqrt+0xac>
 80a6ca2:	4698      	mov	r8, r3
 80a6ca4:	2300      	movs	r3, #0
 80a6ca6:	e7cf      	b.n	80a6c48 <__ieee754_sqrt+0xa4>
 80a6ca8:	4323      	orrs	r3, r4
 80a6caa:	d113      	bne.n	80a6cd4 <__ieee754_sqrt+0x130>
 80a6cac:	0878      	lsrs	r0, r7, #1
 80a6cae:	ea4f 036c 	mov.w	r3, ip, asr #1
 80a6cb2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a6cb6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a6cba:	f01c 0f01 	tst.w	ip, #1
 80a6cbe:	bf18      	it	ne
 80a6cc0:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
 80a6cc4:	eb03 550e 	add.w	r5, r3, lr, lsl #20
 80a6cc8:	4602      	mov	r2, r0
 80a6cca:	462b      	mov	r3, r5
 80a6ccc:	4610      	mov	r0, r2
 80a6cce:	4619      	mov	r1, r3
 80a6cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6cd4:	1c7b      	adds	r3, r7, #1
 80a6cd6:	bf16      	itet	ne
 80a6cd8:	1c78      	addne	r0, r7, #1
 80a6cda:	f10c 0c01 	addeq.w	ip, ip, #1
 80a6cde:	0840      	lsrne	r0, r0, #1
 80a6ce0:	e7e5      	b.n	80a6cae <__ieee754_sqrt+0x10a>
 80a6ce2:	4602      	mov	r2, r0
 80a6ce4:	460b      	mov	r3, r1
 80a6ce6:	f002 fa05 	bl	80a90f4 <__aeabi_dmul>
 80a6cea:	462a      	mov	r2, r5
 80a6cec:	4633      	mov	r3, r6
 80a6cee:	f002 f84b 	bl	80a8d88 <__adddf3>
 80a6cf2:	4602      	mov	r2, r0
 80a6cf4:	460b      	mov	r3, r1
 80a6cf6:	4610      	mov	r0, r2
 80a6cf8:	4619      	mov	r1, r3
 80a6cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6cfe:	4602      	mov	r2, r0
 80a6d00:	f002 f840 	bl	80a8d84 <__aeabi_dsub>
 80a6d04:	4602      	mov	r2, r0
 80a6d06:	460b      	mov	r3, r1
 80a6d08:	f002 fb1e 	bl	80a9348 <__aeabi_ddiv>
 80a6d0c:	4602      	mov	r2, r0
 80a6d0e:	460b      	mov	r3, r1
 80a6d10:	e7dc      	b.n	80a6ccc <__ieee754_sqrt+0x128>
 80a6d12:	4602      	mov	r2, r0
 80a6d14:	4619      	mov	r1, r3
 80a6d16:	4610      	mov	r0, r2
 80a6d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6d1c:	4623      	mov	r3, r4
 80a6d1e:	2020      	movs	r0, #32
 80a6d20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a6d24:	e7b3      	b.n	80a6c8e <__ieee754_sqrt+0xea>
 80a6d26:	bf00      	nop
 80a6d28:	7ff00000 	.word	0x7ff00000

080a6d2c <__ieee754_fmodf>:
 80a6d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a6d2e:	f031 4700 	bics.w	r7, r1, #2147483648	; 0x80000000
 80a6d32:	d041      	beq.n	80a6db8 <__ieee754_fmodf+0x8c>
 80a6d34:	f020 4c00 	bic.w	ip, r0, #2147483648	; 0x80000000
 80a6d38:	f1bc 4fff 	cmp.w	ip, #2139095040	; 0x7f800000
 80a6d3c:	4603      	mov	r3, r0
 80a6d3e:	da3b      	bge.n	80a6db8 <__ieee754_fmodf+0x8c>
 80a6d40:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80a6d44:	dc38      	bgt.n	80a6db8 <__ieee754_fmodf+0x8c>
 80a6d46:	45bc      	cmp	ip, r7
 80a6d48:	db3b      	blt.n	80a6dc2 <__ieee754_fmodf+0x96>
 80a6d4a:	f000 4600 	and.w	r6, r0, #2147483648	; 0x80000000
 80a6d4e:	d039      	beq.n	80a6dc4 <__ieee754_fmodf+0x98>
 80a6d50:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80a6d54:	460c      	mov	r4, r1
 80a6d56:	d14e      	bne.n	80a6df6 <__ieee754_fmodf+0xca>
 80a6d58:	ea4f 210c 	mov.w	r1, ip, lsl #8
 80a6d5c:	2900      	cmp	r1, #0
 80a6d5e:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 80a6d62:	dd04      	ble.n	80a6d6e <__ieee754_fmodf+0x42>
 80a6d64:	0049      	lsls	r1, r1, #1
 80a6d66:	2900      	cmp	r1, #0
 80a6d68:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80a6d6c:	dcfa      	bgt.n	80a6d64 <__ieee754_fmodf+0x38>
 80a6d6e:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
 80a6d72:	d150      	bne.n	80a6e16 <__ieee754_fmodf+0xea>
 80a6d74:	0239      	lsls	r1, r7, #8
 80a6d76:	f06f 057d 	mvn.w	r5, #125	; 0x7d
 80a6d7a:	d403      	bmi.n	80a6d84 <__ieee754_fmodf+0x58>
 80a6d7c:	0049      	lsls	r1, r1, #1
 80a6d7e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80a6d82:	d5fb      	bpl.n	80a6d7c <__ieee754_fmodf+0x50>
 80a6d84:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80a6d88:	db3f      	blt.n	80a6e0a <__ieee754_fmodf+0xde>
 80a6d8a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80a6d8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80a6d92:	f115 0f7e 	cmn.w	r5, #126	; 0x7e
 80a6d96:	db32      	blt.n	80a6dfe <__ieee754_fmodf+0xd2>
 80a6d98:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80a6d9c:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 80a6da0:	1b52      	subs	r2, r2, r5
 80a6da2:	d104      	bne.n	80a6dae <__ieee754_fmodf+0x82>
 80a6da4:	e013      	b.n	80a6dce <__ieee754_fmodf+0xa2>
 80a6da6:	d00d      	beq.n	80a6dc4 <__ieee754_fmodf+0x98>
 80a6da8:	004b      	lsls	r3, r1, #1
 80a6daa:	3a01      	subs	r2, #1
 80a6dac:	d00f      	beq.n	80a6dce <__ieee754_fmodf+0xa2>
 80a6dae:	1b19      	subs	r1, r3, r4
 80a6db0:	2900      	cmp	r1, #0
 80a6db2:	daf8      	bge.n	80a6da6 <__ieee754_fmodf+0x7a>
 80a6db4:	005b      	lsls	r3, r3, #1
 80a6db6:	e7f8      	b.n	80a6daa <__ieee754_fmodf+0x7e>
 80a6db8:	f002 fdf2 	bl	80a99a0 <__aeabi_fmul>
 80a6dbc:	4601      	mov	r1, r0
 80a6dbe:	f002 fea3 	bl	80a9b08 <__aeabi_fdiv>
 80a6dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a6dc4:	4b19      	ldr	r3, [pc, #100]	; (80a6e2c <__ieee754_fmodf+0x100>)
 80a6dc6:	0ff0      	lsrs	r0, r6, #31
 80a6dc8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80a6dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a6dce:	1b1c      	subs	r4, r3, r4
 80a6dd0:	bf58      	it	pl
 80a6dd2:	4623      	movpl	r3, r4
 80a6dd4:	b913      	cbnz	r3, 80a6ddc <__ieee754_fmodf+0xb0>
 80a6dd6:	e7f5      	b.n	80a6dc4 <__ieee754_fmodf+0x98>
 80a6dd8:	005b      	lsls	r3, r3, #1
 80a6dda:	3d01      	subs	r5, #1
 80a6ddc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80a6de0:	dbfa      	blt.n	80a6dd8 <__ieee754_fmodf+0xac>
 80a6de2:	f115 0f7e 	cmn.w	r5, #126	; 0x7e
 80a6de6:	db19      	blt.n	80a6e1c <__ieee754_fmodf+0xf0>
 80a6de8:	f5a3 0000 	sub.w	r0, r3, #8388608	; 0x800000
 80a6dec:	4330      	orrs	r0, r6
 80a6dee:	357f      	adds	r5, #127	; 0x7f
 80a6df0:	ea40 50c5 	orr.w	r0, r0, r5, lsl #23
 80a6df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a6df6:	ea4f 52ec 	mov.w	r2, ip, asr #23
 80a6dfa:	3a7f      	subs	r2, #127	; 0x7f
 80a6dfc:	e7b7      	b.n	80a6d6e <__ieee754_fmodf+0x42>
 80a6dfe:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80a6e02:	1b49      	subs	r1, r1, r5
 80a6e04:	fa07 f401 	lsl.w	r4, r7, r1
 80a6e08:	e7ca      	b.n	80a6da0 <__ieee754_fmodf+0x74>
 80a6e0a:	f06f 037d 	mvn.w	r3, #125	; 0x7d
 80a6e0e:	1a9b      	subs	r3, r3, r2
 80a6e10:	fa0c f303 	lsl.w	r3, ip, r3
 80a6e14:	e7bd      	b.n	80a6d92 <__ieee754_fmodf+0x66>
 80a6e16:	15fd      	asrs	r5, r7, #23
 80a6e18:	3d7f      	subs	r5, #127	; 0x7f
 80a6e1a:	e7b3      	b.n	80a6d84 <__ieee754_fmodf+0x58>
 80a6e1c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80a6e20:	1b40      	subs	r0, r0, r5
 80a6e22:	fa43 f000 	asr.w	r0, r3, r0
 80a6e26:	4330      	orrs	r0, r6
 80a6e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a6e2a:	bf00      	nop
 80a6e2c:	080aa560 	.word	0x080aa560

080a6e30 <__ieee754_logf>:
 80a6e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a6e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a6e38:	d02b      	beq.n	80a6e92 <__ieee754_logf+0x62>
 80a6e3a:	2800      	cmp	r0, #0
 80a6e3c:	4601      	mov	r1, r0
 80a6e3e:	4603      	mov	r3, r0
 80a6e40:	db40      	blt.n	80a6ec4 <__ieee754_logf+0x94>
 80a6e42:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80a6e46:	da39      	bge.n	80a6ebc <__ieee754_logf+0x8c>
 80a6e48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a6e4c:	db41      	blt.n	80a6ed2 <__ieee754_logf+0xa2>
 80a6e4e:	2100      	movs	r1, #0
 80a6e50:	4a8a      	ldr	r2, [pc, #552]	; (80a707c <__ieee754_logf+0x24c>)
 80a6e52:	f3c3 0616 	ubfx	r6, r3, #0, #23
 80a6e56:	4432      	add	r2, r6
 80a6e58:	15dc      	asrs	r4, r3, #23
 80a6e5a:	f402 0000 	and.w	r0, r2, #8388608	; 0x800000
 80a6e5e:	3c7f      	subs	r4, #127	; 0x7f
 80a6e60:	f080 507e 	eor.w	r0, r0, #1065353216	; 0x3f800000
 80a6e64:	440c      	add	r4, r1
 80a6e66:	4330      	orrs	r0, r6
 80a6e68:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a6e6c:	eb04 54d2 	add.w	r4, r4, r2, lsr #23
 80a6e70:	f002 fc8c 	bl	80a978c <__aeabi_fsub>
 80a6e74:	4b82      	ldr	r3, [pc, #520]	; (80a7080 <__ieee754_logf+0x250>)
 80a6e76:	f106 020f 	add.w	r2, r6, #15
 80a6e7a:	4013      	ands	r3, r2
 80a6e7c:	4605      	mov	r5, r0
 80a6e7e:	bb83      	cbnz	r3, 80a6ee2 <__ieee754_logf+0xb2>
 80a6e80:	2100      	movs	r1, #0
 80a6e82:	f002 ff21 	bl	80a9cc8 <__aeabi_fcmpeq>
 80a6e86:	2800      	cmp	r0, #0
 80a6e88:	f000 80a2 	beq.w	80a6fd0 <__ieee754_logf+0x1a0>
 80a6e8c:	b944      	cbnz	r4, 80a6ea0 <__ieee754_logf+0x70>
 80a6e8e:	2000      	movs	r0, #0
 80a6e90:	e004      	b.n	80a6e9c <__ieee754_logf+0x6c>
 80a6e92:	2100      	movs	r1, #0
 80a6e94:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 80a6e98:	f002 fe36 	bl	80a9b08 <__aeabi_fdiv>
 80a6e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6ea0:	4620      	mov	r0, r4
 80a6ea2:	f002 fd29 	bl	80a98f8 <__aeabi_i2f>
 80a6ea6:	4977      	ldr	r1, [pc, #476]	; (80a7084 <__ieee754_logf+0x254>)
 80a6ea8:	4605      	mov	r5, r0
 80a6eaa:	f002 fd79 	bl	80a99a0 <__aeabi_fmul>
 80a6eae:	4976      	ldr	r1, [pc, #472]	; (80a7088 <__ieee754_logf+0x258>)
 80a6eb0:	4604      	mov	r4, r0
 80a6eb2:	4628      	mov	r0, r5
 80a6eb4:	f002 fd74 	bl	80a99a0 <__aeabi_fmul>
 80a6eb8:	4601      	mov	r1, r0
 80a6eba:	4620      	mov	r0, r4
 80a6ebc:	f002 fc68 	bl	80a9790 <__addsf3>
 80a6ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6ec4:	f002 fc62 	bl	80a978c <__aeabi_fsub>
 80a6ec8:	2100      	movs	r1, #0
 80a6eca:	f002 fe1d 	bl	80a9b08 <__aeabi_fdiv>
 80a6ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6ed2:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80a6ed6:	f002 fd63 	bl	80a99a0 <__aeabi_fmul>
 80a6eda:	f06f 0118 	mvn.w	r1, #24
 80a6ede:	4603      	mov	r3, r0
 80a6ee0:	e7b6      	b.n	80a6e50 <__ieee754_logf+0x20>
 80a6ee2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80a6ee6:	f002 fc53 	bl	80a9790 <__addsf3>
 80a6eea:	4601      	mov	r1, r0
 80a6eec:	4628      	mov	r0, r5
 80a6eee:	f002 fe0b 	bl	80a9b08 <__aeabi_fdiv>
 80a6ef2:	4680      	mov	r8, r0
 80a6ef4:	4620      	mov	r0, r4
 80a6ef6:	f002 fcff 	bl	80a98f8 <__aeabi_i2f>
 80a6efa:	4641      	mov	r1, r8
 80a6efc:	4681      	mov	r9, r0
 80a6efe:	4640      	mov	r0, r8
 80a6f00:	f002 fd4e 	bl	80a99a0 <__aeabi_fmul>
 80a6f04:	4601      	mov	r1, r0
 80a6f06:	4682      	mov	sl, r0
 80a6f08:	f002 fd4a 	bl	80a99a0 <__aeabi_fmul>
 80a6f0c:	4607      	mov	r7, r0
 80a6f0e:	495f      	ldr	r1, [pc, #380]	; (80a708c <__ieee754_logf+0x25c>)
 80a6f10:	f002 fd46 	bl	80a99a0 <__aeabi_fmul>
 80a6f14:	495e      	ldr	r1, [pc, #376]	; (80a7090 <__ieee754_logf+0x260>)
 80a6f16:	f002 fc3b 	bl	80a9790 <__addsf3>
 80a6f1a:	4639      	mov	r1, r7
 80a6f1c:	f002 fd40 	bl	80a99a0 <__aeabi_fmul>
 80a6f20:	495c      	ldr	r1, [pc, #368]	; (80a7094 <__ieee754_logf+0x264>)
 80a6f22:	f002 fc35 	bl	80a9790 <__addsf3>
 80a6f26:	4639      	mov	r1, r7
 80a6f28:	f002 fd3a 	bl	80a99a0 <__aeabi_fmul>
 80a6f2c:	495a      	ldr	r1, [pc, #360]	; (80a7098 <__ieee754_logf+0x268>)
 80a6f2e:	f002 fc2f 	bl	80a9790 <__addsf3>
 80a6f32:	4651      	mov	r1, sl
 80a6f34:	f002 fd34 	bl	80a99a0 <__aeabi_fmul>
 80a6f38:	4958      	ldr	r1, [pc, #352]	; (80a709c <__ieee754_logf+0x26c>)
 80a6f3a:	4682      	mov	sl, r0
 80a6f3c:	4638      	mov	r0, r7
 80a6f3e:	f002 fd2f 	bl	80a99a0 <__aeabi_fmul>
 80a6f42:	4957      	ldr	r1, [pc, #348]	; (80a70a0 <__ieee754_logf+0x270>)
 80a6f44:	f002 fc24 	bl	80a9790 <__addsf3>
 80a6f48:	4639      	mov	r1, r7
 80a6f4a:	f002 fd29 	bl	80a99a0 <__aeabi_fmul>
 80a6f4e:	4955      	ldr	r1, [pc, #340]	; (80a70a4 <__ieee754_logf+0x274>)
 80a6f50:	f002 fc1e 	bl	80a9790 <__addsf3>
 80a6f54:	4639      	mov	r1, r7
 80a6f56:	f002 fd23 	bl	80a99a0 <__aeabi_fmul>
 80a6f5a:	4601      	mov	r1, r0
 80a6f5c:	4650      	mov	r0, sl
 80a6f5e:	f002 fc17 	bl	80a9790 <__addsf3>
 80a6f62:	4a51      	ldr	r2, [pc, #324]	; (80a70a8 <__ieee754_logf+0x278>)
 80a6f64:	f5c6 1357 	rsb	r3, r6, #3522560	; 0x35c000
 80a6f68:	4432      	add	r2, r6
 80a6f6a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80a6f6e:	4313      	orrs	r3, r2
 80a6f70:	2b00      	cmp	r3, #0
 80a6f72:	4606      	mov	r6, r0
 80a6f74:	dd4f      	ble.n	80a7016 <__ieee754_logf+0x1e6>
 80a6f76:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a6f7a:	4628      	mov	r0, r5
 80a6f7c:	f002 fd10 	bl	80a99a0 <__aeabi_fmul>
 80a6f80:	4629      	mov	r1, r5
 80a6f82:	f002 fd0d 	bl	80a99a0 <__aeabi_fmul>
 80a6f86:	4607      	mov	r7, r0
 80a6f88:	2c00      	cmp	r4, #0
 80a6f8a:	d051      	beq.n	80a7030 <__ieee754_logf+0x200>
 80a6f8c:	493d      	ldr	r1, [pc, #244]	; (80a7084 <__ieee754_logf+0x254>)
 80a6f8e:	4648      	mov	r0, r9
 80a6f90:	f002 fd06 	bl	80a99a0 <__aeabi_fmul>
 80a6f94:	4639      	mov	r1, r7
 80a6f96:	4604      	mov	r4, r0
 80a6f98:	4630      	mov	r0, r6
 80a6f9a:	f002 fbf9 	bl	80a9790 <__addsf3>
 80a6f9e:	4641      	mov	r1, r8
 80a6fa0:	f002 fcfe 	bl	80a99a0 <__aeabi_fmul>
 80a6fa4:	4938      	ldr	r1, [pc, #224]	; (80a7088 <__ieee754_logf+0x258>)
 80a6fa6:	4606      	mov	r6, r0
 80a6fa8:	4648      	mov	r0, r9
 80a6faa:	f002 fcf9 	bl	80a99a0 <__aeabi_fmul>
 80a6fae:	4601      	mov	r1, r0
 80a6fb0:	4630      	mov	r0, r6
 80a6fb2:	f002 fbed 	bl	80a9790 <__addsf3>
 80a6fb6:	4601      	mov	r1, r0
 80a6fb8:	4638      	mov	r0, r7
 80a6fba:	f002 fbe7 	bl	80a978c <__aeabi_fsub>
 80a6fbe:	4629      	mov	r1, r5
 80a6fc0:	f002 fbe4 	bl	80a978c <__aeabi_fsub>
 80a6fc4:	4601      	mov	r1, r0
 80a6fc6:	4620      	mov	r0, r4
 80a6fc8:	f002 fbe0 	bl	80a978c <__aeabi_fsub>
 80a6fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6fd0:	4936      	ldr	r1, [pc, #216]	; (80a70ac <__ieee754_logf+0x27c>)
 80a6fd2:	4628      	mov	r0, r5
 80a6fd4:	f002 fce4 	bl	80a99a0 <__aeabi_fmul>
 80a6fd8:	4601      	mov	r1, r0
 80a6fda:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80a6fde:	f002 fbd5 	bl	80a978c <__aeabi_fsub>
 80a6fe2:	4629      	mov	r1, r5
 80a6fe4:	4606      	mov	r6, r0
 80a6fe6:	4628      	mov	r0, r5
 80a6fe8:	f002 fcda 	bl	80a99a0 <__aeabi_fmul>
 80a6fec:	4601      	mov	r1, r0
 80a6fee:	4630      	mov	r0, r6
 80a6ff0:	f002 fcd6 	bl	80a99a0 <__aeabi_fmul>
 80a6ff4:	4606      	mov	r6, r0
 80a6ff6:	b35c      	cbz	r4, 80a7050 <__ieee754_logf+0x220>
 80a6ff8:	4620      	mov	r0, r4
 80a6ffa:	f002 fc7d 	bl	80a98f8 <__aeabi_i2f>
 80a6ffe:	4921      	ldr	r1, [pc, #132]	; (80a7084 <__ieee754_logf+0x254>)
 80a7000:	4607      	mov	r7, r0
 80a7002:	f002 fccd 	bl	80a99a0 <__aeabi_fmul>
 80a7006:	4604      	mov	r4, r0
 80a7008:	4638      	mov	r0, r7
 80a700a:	491f      	ldr	r1, [pc, #124]	; (80a7088 <__ieee754_logf+0x258>)
 80a700c:	f002 fcc8 	bl	80a99a0 <__aeabi_fmul>
 80a7010:	4601      	mov	r1, r0
 80a7012:	4630      	mov	r0, r6
 80a7014:	e7d1      	b.n	80a6fba <__ieee754_logf+0x18a>
 80a7016:	bb04      	cbnz	r4, 80a705a <__ieee754_logf+0x22a>
 80a7018:	4601      	mov	r1, r0
 80a701a:	4628      	mov	r0, r5
 80a701c:	f002 fbb6 	bl	80a978c <__aeabi_fsub>
 80a7020:	4641      	mov	r1, r8
 80a7022:	f002 fcbd 	bl	80a99a0 <__aeabi_fmul>
 80a7026:	4601      	mov	r1, r0
 80a7028:	4628      	mov	r0, r5
 80a702a:	f002 fbaf 	bl	80a978c <__aeabi_fsub>
 80a702e:	e735      	b.n	80a6e9c <__ieee754_logf+0x6c>
 80a7030:	4639      	mov	r1, r7
 80a7032:	4630      	mov	r0, r6
 80a7034:	f002 fbac 	bl	80a9790 <__addsf3>
 80a7038:	4641      	mov	r1, r8
 80a703a:	f002 fcb1 	bl	80a99a0 <__aeabi_fmul>
 80a703e:	4601      	mov	r1, r0
 80a7040:	4638      	mov	r0, r7
 80a7042:	f002 fba3 	bl	80a978c <__aeabi_fsub>
 80a7046:	4601      	mov	r1, r0
 80a7048:	4628      	mov	r0, r5
 80a704a:	f002 fb9f 	bl	80a978c <__aeabi_fsub>
 80a704e:	e725      	b.n	80a6e9c <__ieee754_logf+0x6c>
 80a7050:	4601      	mov	r1, r0
 80a7052:	4628      	mov	r0, r5
 80a7054:	f002 fb9a 	bl	80a978c <__aeabi_fsub>
 80a7058:	e720      	b.n	80a6e9c <__ieee754_logf+0x6c>
 80a705a:	490a      	ldr	r1, [pc, #40]	; (80a7084 <__ieee754_logf+0x254>)
 80a705c:	4648      	mov	r0, r9
 80a705e:	f002 fc9f 	bl	80a99a0 <__aeabi_fmul>
 80a7062:	4631      	mov	r1, r6
 80a7064:	4604      	mov	r4, r0
 80a7066:	4628      	mov	r0, r5
 80a7068:	f002 fb90 	bl	80a978c <__aeabi_fsub>
 80a706c:	4641      	mov	r1, r8
 80a706e:	f002 fc97 	bl	80a99a0 <__aeabi_fmul>
 80a7072:	4905      	ldr	r1, [pc, #20]	; (80a7088 <__ieee754_logf+0x258>)
 80a7074:	4606      	mov	r6, r0
 80a7076:	4648      	mov	r0, r9
 80a7078:	e7c8      	b.n	80a700c <__ieee754_logf+0x1dc>
 80a707a:	bf00      	nop
 80a707c:	004afb20 	.word	0x004afb20
 80a7080:	007ffff0 	.word	0x007ffff0
 80a7084:	3f317180 	.word	0x3f317180
 80a7088:	3717f7d1 	.word	0x3717f7d1
 80a708c:	3e178897 	.word	0x3e178897
 80a7090:	3e3a3325 	.word	0x3e3a3325
 80a7094:	3e924925 	.word	0x3e924925
 80a7098:	3f2aaaab 	.word	0x3f2aaaab
 80a709c:	3e1cd04f 	.word	0x3e1cd04f
 80a70a0:	3e638e29 	.word	0x3e638e29
 80a70a4:	3ecccccd 	.word	0x3ecccccd
 80a70a8:	ffcf5c30 	.word	0xffcf5c30
 80a70ac:	3eaaaaab 	.word	0x3eaaaaab

080a70b0 <__ieee754_rem_pio2f>:
 80a70b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a70b4:	4aab      	ldr	r2, [pc, #684]	; (80a7364 <__ieee754_rem_pio2f+0x2b4>)
 80a70b6:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80a70ba:	4294      	cmp	r4, r2
 80a70bc:	460d      	mov	r5, r1
 80a70be:	b089      	sub	sp, #36	; 0x24
 80a70c0:	dd6c      	ble.n	80a719c <__ieee754_rem_pio2f+0xec>
 80a70c2:	4aa9      	ldr	r2, [pc, #676]	; (80a7368 <__ieee754_rem_pio2f+0x2b8>)
 80a70c4:	4607      	mov	r7, r0
 80a70c6:	4294      	cmp	r4, r2
 80a70c8:	dc1c      	bgt.n	80a7104 <__ieee754_rem_pio2f+0x54>
 80a70ca:	2800      	cmp	r0, #0
 80a70cc:	49a7      	ldr	r1, [pc, #668]	; (80a736c <__ieee754_rem_pio2f+0x2bc>)
 80a70ce:	f340 811e 	ble.w	80a730e <__ieee754_rem_pio2f+0x25e>
 80a70d2:	f002 fb5b 	bl	80a978c <__aeabi_fsub>
 80a70d6:	4ba6      	ldr	r3, [pc, #664]	; (80a7370 <__ieee754_rem_pio2f+0x2c0>)
 80a70d8:	f024 040f 	bic.w	r4, r4, #15
 80a70dc:	429c      	cmp	r4, r3
 80a70de:	4606      	mov	r6, r0
 80a70e0:	d06b      	beq.n	80a71ba <__ieee754_rem_pio2f+0x10a>
 80a70e2:	49a4      	ldr	r1, [pc, #656]	; (80a7374 <__ieee754_rem_pio2f+0x2c4>)
 80a70e4:	f002 fb52 	bl	80a978c <__aeabi_fsub>
 80a70e8:	4601      	mov	r1, r0
 80a70ea:	4630      	mov	r0, r6
 80a70ec:	6029      	str	r1, [r5, #0]
 80a70ee:	f002 fb4d 	bl	80a978c <__aeabi_fsub>
 80a70f2:	49a0      	ldr	r1, [pc, #640]	; (80a7374 <__ieee754_rem_pio2f+0x2c4>)
 80a70f4:	f002 fb4a 	bl	80a978c <__aeabi_fsub>
 80a70f8:	2601      	movs	r6, #1
 80a70fa:	6068      	str	r0, [r5, #4]
 80a70fc:	4630      	mov	r0, r6
 80a70fe:	b009      	add	sp, #36	; 0x24
 80a7100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7104:	4a9c      	ldr	r2, [pc, #624]	; (80a7378 <__ieee754_rem_pio2f+0x2c8>)
 80a7106:	4294      	cmp	r4, r2
 80a7108:	dd6c      	ble.n	80a71e4 <__ieee754_rem_pio2f+0x134>
 80a710a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80a710e:	da4d      	bge.n	80a71ac <__ieee754_rem_pio2f+0xfc>
 80a7110:	15e6      	asrs	r6, r4, #23
 80a7112:	3e86      	subs	r6, #134	; 0x86
 80a7114:	eba4 54c6 	sub.w	r4, r4, r6, lsl #23
 80a7118:	4620      	mov	r0, r4
 80a711a:	f002 fe1d 	bl	80a9d58 <__aeabi_f2iz>
 80a711e:	f002 fbeb 	bl	80a98f8 <__aeabi_i2f>
 80a7122:	4601      	mov	r1, r0
 80a7124:	4620      	mov	r0, r4
 80a7126:	9105      	str	r1, [sp, #20]
 80a7128:	f002 fb30 	bl	80a978c <__aeabi_fsub>
 80a712c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a7130:	f002 fc36 	bl	80a99a0 <__aeabi_fmul>
 80a7134:	4680      	mov	r8, r0
 80a7136:	f002 fe0f 	bl	80a9d58 <__aeabi_f2iz>
 80a713a:	f002 fbdd 	bl	80a98f8 <__aeabi_i2f>
 80a713e:	4604      	mov	r4, r0
 80a7140:	4640      	mov	r0, r8
 80a7142:	4621      	mov	r1, r4
 80a7144:	9406      	str	r4, [sp, #24]
 80a7146:	f002 fb21 	bl	80a978c <__aeabi_fsub>
 80a714a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a714e:	f002 fc27 	bl	80a99a0 <__aeabi_fmul>
 80a7152:	2100      	movs	r1, #0
 80a7154:	9007      	str	r0, [sp, #28]
 80a7156:	f002 fdb7 	bl	80a9cc8 <__aeabi_fcmpeq>
 80a715a:	2800      	cmp	r0, #0
 80a715c:	f000 80b8 	beq.w	80a72d0 <__ieee754_rem_pio2f+0x220>
 80a7160:	4620      	mov	r0, r4
 80a7162:	2100      	movs	r1, #0
 80a7164:	f002 fdb0 	bl	80a9cc8 <__aeabi_fcmpeq>
 80a7168:	2800      	cmp	r0, #0
 80a716a:	bf14      	ite	ne
 80a716c:	2301      	movne	r3, #1
 80a716e:	2302      	moveq	r3, #2
 80a7170:	2002      	movs	r0, #2
 80a7172:	4982      	ldr	r1, [pc, #520]	; (80a737c <__ieee754_rem_pio2f+0x2cc>)
 80a7174:	4632      	mov	r2, r6
 80a7176:	e9cd 0100 	strd	r0, r1, [sp]
 80a717a:	4629      	mov	r1, r5
 80a717c:	a805      	add	r0, sp, #20
 80a717e:	f000 ffdf 	bl	80a8140 <__kernel_rem_pio2f>
 80a7182:	2f00      	cmp	r7, #0
 80a7184:	4606      	mov	r6, r0
 80a7186:	dab9      	bge.n	80a70fc <__ieee754_rem_pio2f+0x4c>
 80a7188:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a718c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a7190:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a7194:	4246      	negs	r6, r0
 80a7196:	602a      	str	r2, [r5, #0]
 80a7198:	606b      	str	r3, [r5, #4]
 80a719a:	e7af      	b.n	80a70fc <__ieee754_rem_pio2f+0x4c>
 80a719c:	2600      	movs	r6, #0
 80a719e:	6028      	str	r0, [r5, #0]
 80a71a0:	2200      	movs	r2, #0
 80a71a2:	4630      	mov	r0, r6
 80a71a4:	604a      	str	r2, [r1, #4]
 80a71a6:	b009      	add	sp, #36	; 0x24
 80a71a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a71ac:	4601      	mov	r1, r0
 80a71ae:	f002 faed 	bl	80a978c <__aeabi_fsub>
 80a71b2:	2600      	movs	r6, #0
 80a71b4:	6068      	str	r0, [r5, #4]
 80a71b6:	6028      	str	r0, [r5, #0]
 80a71b8:	e7a0      	b.n	80a70fc <__ieee754_rem_pio2f+0x4c>
 80a71ba:	4971      	ldr	r1, [pc, #452]	; (80a7380 <__ieee754_rem_pio2f+0x2d0>)
 80a71bc:	f002 fae6 	bl	80a978c <__aeabi_fsub>
 80a71c0:	4970      	ldr	r1, [pc, #448]	; (80a7384 <__ieee754_rem_pio2f+0x2d4>)
 80a71c2:	4604      	mov	r4, r0
 80a71c4:	f002 fae2 	bl	80a978c <__aeabi_fsub>
 80a71c8:	4601      	mov	r1, r0
 80a71ca:	4620      	mov	r0, r4
 80a71cc:	6029      	str	r1, [r5, #0]
 80a71ce:	f002 fadd 	bl	80a978c <__aeabi_fsub>
 80a71d2:	496c      	ldr	r1, [pc, #432]	; (80a7384 <__ieee754_rem_pio2f+0x2d4>)
 80a71d4:	f002 fada 	bl	80a978c <__aeabi_fsub>
 80a71d8:	2601      	movs	r6, #1
 80a71da:	6068      	str	r0, [r5, #4]
 80a71dc:	4630      	mov	r0, r6
 80a71de:	b009      	add	sp, #36	; 0x24
 80a71e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a71e4:	f001 fd2e 	bl	80a8c44 <fabsf>
 80a71e8:	4967      	ldr	r1, [pc, #412]	; (80a7388 <__ieee754_rem_pio2f+0x2d8>)
 80a71ea:	4680      	mov	r8, r0
 80a71ec:	f002 fbd8 	bl	80a99a0 <__aeabi_fmul>
 80a71f0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a71f4:	f002 facc 	bl	80a9790 <__addsf3>
 80a71f8:	f002 fdae 	bl	80a9d58 <__aeabi_f2iz>
 80a71fc:	4606      	mov	r6, r0
 80a71fe:	f002 fb7b 	bl	80a98f8 <__aeabi_i2f>
 80a7202:	495a      	ldr	r1, [pc, #360]	; (80a736c <__ieee754_rem_pio2f+0x2bc>)
 80a7204:	4683      	mov	fp, r0
 80a7206:	f002 fbcb 	bl	80a99a0 <__aeabi_fmul>
 80a720a:	4601      	mov	r1, r0
 80a720c:	4640      	mov	r0, r8
 80a720e:	f002 fabd 	bl	80a978c <__aeabi_fsub>
 80a7212:	4958      	ldr	r1, [pc, #352]	; (80a7374 <__ieee754_rem_pio2f+0x2c4>)
 80a7214:	4682      	mov	sl, r0
 80a7216:	4658      	mov	r0, fp
 80a7218:	f002 fbc2 	bl	80a99a0 <__aeabi_fmul>
 80a721c:	2e1f      	cmp	r6, #31
 80a721e:	4681      	mov	r9, r0
 80a7220:	4601      	mov	r1, r0
 80a7222:	4650      	mov	r0, sl
 80a7224:	dc20      	bgt.n	80a7268 <__ieee754_rem_pio2f+0x1b8>
 80a7226:	4b59      	ldr	r3, [pc, #356]	; (80a738c <__ieee754_rem_pio2f+0x2dc>)
 80a7228:	1e72      	subs	r2, r6, #1
 80a722a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a722e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80a7232:	429a      	cmp	r2, r3
 80a7234:	d018      	beq.n	80a7268 <__ieee754_rem_pio2f+0x1b8>
 80a7236:	f002 faa9 	bl	80a978c <__aeabi_fsub>
 80a723a:	4680      	mov	r8, r0
 80a723c:	f8c5 8000 	str.w	r8, [r5]
 80a7240:	4641      	mov	r1, r8
 80a7242:	4650      	mov	r0, sl
 80a7244:	f002 faa2 	bl	80a978c <__aeabi_fsub>
 80a7248:	4649      	mov	r1, r9
 80a724a:	f002 fa9f 	bl	80a978c <__aeabi_fsub>
 80a724e:	2f00      	cmp	r7, #0
 80a7250:	6068      	str	r0, [r5, #4]
 80a7252:	f6bf af53 	bge.w	80a70fc <__ieee754_rem_pio2f+0x4c>
 80a7256:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
 80a725a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a725e:	f8c5 8000 	str.w	r8, [r5]
 80a7262:	6068      	str	r0, [r5, #4]
 80a7264:	4276      	negs	r6, r6
 80a7266:	e749      	b.n	80a70fc <__ieee754_rem_pio2f+0x4c>
 80a7268:	f002 fa90 	bl	80a978c <__aeabi_fsub>
 80a726c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80a7270:	ebc3 53d4 	rsb	r3, r3, r4, lsr #23
 80a7274:	2b08      	cmp	r3, #8
 80a7276:	4680      	mov	r8, r0
 80a7278:	ea4f 52e4 	mov.w	r2, r4, asr #23
 80a727c:	ddde      	ble.n	80a723c <__ieee754_rem_pio2f+0x18c>
 80a727e:	4940      	ldr	r1, [pc, #256]	; (80a7380 <__ieee754_rem_pio2f+0x2d0>)
 80a7280:	4658      	mov	r0, fp
 80a7282:	9203      	str	r2, [sp, #12]
 80a7284:	f002 fb8c 	bl	80a99a0 <__aeabi_fmul>
 80a7288:	4680      	mov	r8, r0
 80a728a:	4650      	mov	r0, sl
 80a728c:	4641      	mov	r1, r8
 80a728e:	f002 fa7d 	bl	80a978c <__aeabi_fsub>
 80a7292:	4604      	mov	r4, r0
 80a7294:	4650      	mov	r0, sl
 80a7296:	4621      	mov	r1, r4
 80a7298:	f002 fa78 	bl	80a978c <__aeabi_fsub>
 80a729c:	4641      	mov	r1, r8
 80a729e:	f002 fa75 	bl	80a978c <__aeabi_fsub>
 80a72a2:	4680      	mov	r8, r0
 80a72a4:	4937      	ldr	r1, [pc, #220]	; (80a7384 <__ieee754_rem_pio2f+0x2d4>)
 80a72a6:	4658      	mov	r0, fp
 80a72a8:	f002 fb7a 	bl	80a99a0 <__aeabi_fmul>
 80a72ac:	4641      	mov	r1, r8
 80a72ae:	f002 fa6d 	bl	80a978c <__aeabi_fsub>
 80a72b2:	4681      	mov	r9, r0
 80a72b4:	4620      	mov	r0, r4
 80a72b6:	4649      	mov	r1, r9
 80a72b8:	f002 fa68 	bl	80a978c <__aeabi_fsub>
 80a72bc:	9a03      	ldr	r2, [sp, #12]
 80a72be:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80a72c2:	1ad2      	subs	r2, r2, r3
 80a72c4:	2a19      	cmp	r2, #25
 80a72c6:	4680      	mov	r8, r0
 80a72c8:	dc04      	bgt.n	80a72d4 <__ieee754_rem_pio2f+0x224>
 80a72ca:	46a2      	mov	sl, r4
 80a72cc:	6028      	str	r0, [r5, #0]
 80a72ce:	e7b7      	b.n	80a7240 <__ieee754_rem_pio2f+0x190>
 80a72d0:	2303      	movs	r3, #3
 80a72d2:	e74d      	b.n	80a7170 <__ieee754_rem_pio2f+0xc0>
 80a72d4:	492e      	ldr	r1, [pc, #184]	; (80a7390 <__ieee754_rem_pio2f+0x2e0>)
 80a72d6:	4658      	mov	r0, fp
 80a72d8:	f002 fb62 	bl	80a99a0 <__aeabi_fmul>
 80a72dc:	4680      	mov	r8, r0
 80a72de:	4620      	mov	r0, r4
 80a72e0:	4641      	mov	r1, r8
 80a72e2:	f002 fa53 	bl	80a978c <__aeabi_fsub>
 80a72e6:	4682      	mov	sl, r0
 80a72e8:	4620      	mov	r0, r4
 80a72ea:	4651      	mov	r1, sl
 80a72ec:	f002 fa4e 	bl	80a978c <__aeabi_fsub>
 80a72f0:	4641      	mov	r1, r8
 80a72f2:	f002 fa4b 	bl	80a978c <__aeabi_fsub>
 80a72f6:	4604      	mov	r4, r0
 80a72f8:	4926      	ldr	r1, [pc, #152]	; (80a7394 <__ieee754_rem_pio2f+0x2e4>)
 80a72fa:	4658      	mov	r0, fp
 80a72fc:	f002 fb50 	bl	80a99a0 <__aeabi_fmul>
 80a7300:	4621      	mov	r1, r4
 80a7302:	f002 fa43 	bl	80a978c <__aeabi_fsub>
 80a7306:	4681      	mov	r9, r0
 80a7308:	4650      	mov	r0, sl
 80a730a:	4649      	mov	r1, r9
 80a730c:	e793      	b.n	80a7236 <__ieee754_rem_pio2f+0x186>
 80a730e:	f002 fa3f 	bl	80a9790 <__addsf3>
 80a7312:	4b17      	ldr	r3, [pc, #92]	; (80a7370 <__ieee754_rem_pio2f+0x2c0>)
 80a7314:	f024 040f 	bic.w	r4, r4, #15
 80a7318:	429c      	cmp	r4, r3
 80a731a:	4606      	mov	r6, r0
 80a731c:	d00e      	beq.n	80a733c <__ieee754_rem_pio2f+0x28c>
 80a731e:	4915      	ldr	r1, [pc, #84]	; (80a7374 <__ieee754_rem_pio2f+0x2c4>)
 80a7320:	f002 fa36 	bl	80a9790 <__addsf3>
 80a7324:	4601      	mov	r1, r0
 80a7326:	4630      	mov	r0, r6
 80a7328:	6029      	str	r1, [r5, #0]
 80a732a:	f002 fa2f 	bl	80a978c <__aeabi_fsub>
 80a732e:	4911      	ldr	r1, [pc, #68]	; (80a7374 <__ieee754_rem_pio2f+0x2c4>)
 80a7330:	f002 fa2e 	bl	80a9790 <__addsf3>
 80a7334:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a7338:	6068      	str	r0, [r5, #4]
 80a733a:	e6df      	b.n	80a70fc <__ieee754_rem_pio2f+0x4c>
 80a733c:	4910      	ldr	r1, [pc, #64]	; (80a7380 <__ieee754_rem_pio2f+0x2d0>)
 80a733e:	f002 fa27 	bl	80a9790 <__addsf3>
 80a7342:	4910      	ldr	r1, [pc, #64]	; (80a7384 <__ieee754_rem_pio2f+0x2d4>)
 80a7344:	4604      	mov	r4, r0
 80a7346:	f002 fa23 	bl	80a9790 <__addsf3>
 80a734a:	4601      	mov	r1, r0
 80a734c:	4620      	mov	r0, r4
 80a734e:	6029      	str	r1, [r5, #0]
 80a7350:	f002 fa1c 	bl	80a978c <__aeabi_fsub>
 80a7354:	490b      	ldr	r1, [pc, #44]	; (80a7384 <__ieee754_rem_pio2f+0x2d4>)
 80a7356:	f002 fa1b 	bl	80a9790 <__addsf3>
 80a735a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a735e:	6068      	str	r0, [r5, #4]
 80a7360:	e6cc      	b.n	80a70fc <__ieee754_rem_pio2f+0x4c>
 80a7362:	bf00      	nop
 80a7364:	3f490fd8 	.word	0x3f490fd8
 80a7368:	4016cbe3 	.word	0x4016cbe3
 80a736c:	3fc90f80 	.word	0x3fc90f80
 80a7370:	3fc90fd0 	.word	0x3fc90fd0
 80a7374:	37354443 	.word	0x37354443
 80a7378:	43490f80 	.word	0x43490f80
 80a737c:	080aa5e8 	.word	0x080aa5e8
 80a7380:	37354400 	.word	0x37354400
 80a7384:	2e85a308 	.word	0x2e85a308
 80a7388:	3f22f984 	.word	0x3f22f984
 80a738c:	080aa568 	.word	0x080aa568
 80a7390:	2e85a300 	.word	0x2e85a300
 80a7394:	248d3132 	.word	0x248d3132

080a7398 <__kernel_cos>:
 80a7398:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 80a739c:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80a73a0:	b086      	sub	sp, #24
 80a73a2:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80a73a6:	4688      	mov	r8, r1
 80a73a8:	4606      	mov	r6, r0
 80a73aa:	e9cd 2300 	strd	r2, r3, [sp]
 80a73ae:	da6c      	bge.n	80a748a <__kernel_cos+0xf2>
 80a73b0:	f002 f950 	bl	80a9654 <__aeabi_d2iz>
 80a73b4:	2800      	cmp	r0, #0
 80a73b6:	f000 80ed 	beq.w	80a7594 <__kernel_cos+0x1fc>
 80a73ba:	4632      	mov	r2, r6
 80a73bc:	4643      	mov	r3, r8
 80a73be:	4630      	mov	r0, r6
 80a73c0:	4641      	mov	r1, r8
 80a73c2:	f001 fe97 	bl	80a90f4 <__aeabi_dmul>
 80a73c6:	a376      	add	r3, pc, #472	; (adr r3, 80a75a0 <__kernel_cos+0x208>)
 80a73c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a73cc:	4604      	mov	r4, r0
 80a73ce:	460d      	mov	r5, r1
 80a73d0:	f001 fe90 	bl	80a90f4 <__aeabi_dmul>
 80a73d4:	a374      	add	r3, pc, #464	; (adr r3, 80a75a8 <__kernel_cos+0x210>)
 80a73d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a73da:	f001 fcd5 	bl	80a8d88 <__adddf3>
 80a73de:	4622      	mov	r2, r4
 80a73e0:	462b      	mov	r3, r5
 80a73e2:	f001 fe87 	bl	80a90f4 <__aeabi_dmul>
 80a73e6:	a372      	add	r3, pc, #456	; (adr r3, 80a75b0 <__kernel_cos+0x218>)
 80a73e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a73ec:	f001 fcca 	bl	80a8d84 <__aeabi_dsub>
 80a73f0:	4622      	mov	r2, r4
 80a73f2:	462b      	mov	r3, r5
 80a73f4:	f001 fe7e 	bl	80a90f4 <__aeabi_dmul>
 80a73f8:	a36f      	add	r3, pc, #444	; (adr r3, 80a75b8 <__kernel_cos+0x220>)
 80a73fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a73fe:	f001 fcc3 	bl	80a8d88 <__adddf3>
 80a7402:	4622      	mov	r2, r4
 80a7404:	462b      	mov	r3, r5
 80a7406:	f001 fe75 	bl	80a90f4 <__aeabi_dmul>
 80a740a:	a36d      	add	r3, pc, #436	; (adr r3, 80a75c0 <__kernel_cos+0x228>)
 80a740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7410:	f001 fcb8 	bl	80a8d84 <__aeabi_dsub>
 80a7414:	4622      	mov	r2, r4
 80a7416:	462b      	mov	r3, r5
 80a7418:	f001 fe6c 	bl	80a90f4 <__aeabi_dmul>
 80a741c:	a36a      	add	r3, pc, #424	; (adr r3, 80a75c8 <__kernel_cos+0x230>)
 80a741e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7422:	f001 fcb1 	bl	80a8d88 <__adddf3>
 80a7426:	4622      	mov	r2, r4
 80a7428:	462b      	mov	r3, r5
 80a742a:	f001 fe63 	bl	80a90f4 <__aeabi_dmul>
 80a742e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a7432:	2200      	movs	r2, #0
 80a7434:	4620      	mov	r0, r4
 80a7436:	4629      	mov	r1, r5
 80a7438:	4b65      	ldr	r3, [pc, #404]	; (80a75d0 <__kernel_cos+0x238>)
 80a743a:	f001 fe5b 	bl	80a90f4 <__aeabi_dmul>
 80a743e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a7442:	4682      	mov	sl, r0
 80a7444:	468b      	mov	fp, r1
 80a7446:	4620      	mov	r0, r4
 80a7448:	4629      	mov	r1, r5
 80a744a:	f001 fe53 	bl	80a90f4 <__aeabi_dmul>
 80a744e:	4632      	mov	r2, r6
 80a7450:	460f      	mov	r7, r1
 80a7452:	4606      	mov	r6, r0
 80a7454:	4641      	mov	r1, r8
 80a7456:	4610      	mov	r0, r2
 80a7458:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a745c:	f001 fe4a 	bl	80a90f4 <__aeabi_dmul>
 80a7460:	4602      	mov	r2, r0
 80a7462:	460b      	mov	r3, r1
 80a7464:	4630      	mov	r0, r6
 80a7466:	4639      	mov	r1, r7
 80a7468:	f001 fc8c 	bl	80a8d84 <__aeabi_dsub>
 80a746c:	4602      	mov	r2, r0
 80a746e:	460b      	mov	r3, r1
 80a7470:	4650      	mov	r0, sl
 80a7472:	4659      	mov	r1, fp
 80a7474:	f001 fc86 	bl	80a8d84 <__aeabi_dsub>
 80a7478:	4602      	mov	r2, r0
 80a747a:	460b      	mov	r3, r1
 80a747c:	2000      	movs	r0, #0
 80a747e:	4955      	ldr	r1, [pc, #340]	; (80a75d4 <__kernel_cos+0x23c>)
 80a7480:	f001 fc80 	bl	80a8d84 <__aeabi_dsub>
 80a7484:	b006      	add	sp, #24
 80a7486:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80a748a:	4602      	mov	r2, r0
 80a748c:	460b      	mov	r3, r1
 80a748e:	f001 fe31 	bl	80a90f4 <__aeabi_dmul>
 80a7492:	a343      	add	r3, pc, #268	; (adr r3, 80a75a0 <__kernel_cos+0x208>)
 80a7494:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7498:	4604      	mov	r4, r0
 80a749a:	460d      	mov	r5, r1
 80a749c:	f001 fe2a 	bl	80a90f4 <__aeabi_dmul>
 80a74a0:	a341      	add	r3, pc, #260	; (adr r3, 80a75a8 <__kernel_cos+0x210>)
 80a74a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a74a6:	f001 fc6f 	bl	80a8d88 <__adddf3>
 80a74aa:	4622      	mov	r2, r4
 80a74ac:	462b      	mov	r3, r5
 80a74ae:	f001 fe21 	bl	80a90f4 <__aeabi_dmul>
 80a74b2:	a33f      	add	r3, pc, #252	; (adr r3, 80a75b0 <__kernel_cos+0x218>)
 80a74b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a74b8:	f001 fc64 	bl	80a8d84 <__aeabi_dsub>
 80a74bc:	4622      	mov	r2, r4
 80a74be:	462b      	mov	r3, r5
 80a74c0:	f001 fe18 	bl	80a90f4 <__aeabi_dmul>
 80a74c4:	a33c      	add	r3, pc, #240	; (adr r3, 80a75b8 <__kernel_cos+0x220>)
 80a74c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a74ca:	f001 fc5d 	bl	80a8d88 <__adddf3>
 80a74ce:	4622      	mov	r2, r4
 80a74d0:	462b      	mov	r3, r5
 80a74d2:	f001 fe0f 	bl	80a90f4 <__aeabi_dmul>
 80a74d6:	a33a      	add	r3, pc, #232	; (adr r3, 80a75c0 <__kernel_cos+0x228>)
 80a74d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a74dc:	f001 fc52 	bl	80a8d84 <__aeabi_dsub>
 80a74e0:	4622      	mov	r2, r4
 80a74e2:	462b      	mov	r3, r5
 80a74e4:	f001 fe06 	bl	80a90f4 <__aeabi_dmul>
 80a74e8:	a337      	add	r3, pc, #220	; (adr r3, 80a75c8 <__kernel_cos+0x230>)
 80a74ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a74ee:	f001 fc4b 	bl	80a8d88 <__adddf3>
 80a74f2:	462b      	mov	r3, r5
 80a74f4:	4622      	mov	r2, r4
 80a74f6:	f001 fdfd 	bl	80a90f4 <__aeabi_dmul>
 80a74fa:	4b37      	ldr	r3, [pc, #220]	; (80a75d8 <__kernel_cos+0x240>)
 80a74fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a7500:	429f      	cmp	r7, r3
 80a7502:	dd96      	ble.n	80a7432 <__kernel_cos+0x9a>
 80a7504:	4b35      	ldr	r3, [pc, #212]	; (80a75dc <__kernel_cos+0x244>)
 80a7506:	429f      	cmp	r7, r3
 80a7508:	dc3b      	bgt.n	80a7582 <__kernel_cos+0x1ea>
 80a750a:	f04f 0a00 	mov.w	sl, #0
 80a750e:	f5a7 1b00 	sub.w	fp, r7, #2097152	; 0x200000
 80a7512:	2000      	movs	r0, #0
 80a7514:	4652      	mov	r2, sl
 80a7516:	465b      	mov	r3, fp
 80a7518:	492e      	ldr	r1, [pc, #184]	; (80a75d4 <__kernel_cos+0x23c>)
 80a751a:	f001 fc33 	bl	80a8d84 <__aeabi_dsub>
 80a751e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a7522:	2200      	movs	r2, #0
 80a7524:	4620      	mov	r0, r4
 80a7526:	4629      	mov	r1, r5
 80a7528:	4b29      	ldr	r3, [pc, #164]	; (80a75d0 <__kernel_cos+0x238>)
 80a752a:	f001 fde3 	bl	80a90f4 <__aeabi_dmul>
 80a752e:	4652      	mov	r2, sl
 80a7530:	465b      	mov	r3, fp
 80a7532:	f001 fc27 	bl	80a8d84 <__aeabi_dsub>
 80a7536:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a753a:	4682      	mov	sl, r0
 80a753c:	468b      	mov	fp, r1
 80a753e:	4620      	mov	r0, r4
 80a7540:	4629      	mov	r1, r5
 80a7542:	f001 fdd7 	bl	80a90f4 <__aeabi_dmul>
 80a7546:	4632      	mov	r2, r6
 80a7548:	460f      	mov	r7, r1
 80a754a:	4606      	mov	r6, r0
 80a754c:	4641      	mov	r1, r8
 80a754e:	4610      	mov	r0, r2
 80a7550:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a7554:	f001 fdce 	bl	80a90f4 <__aeabi_dmul>
 80a7558:	4602      	mov	r2, r0
 80a755a:	460b      	mov	r3, r1
 80a755c:	4630      	mov	r0, r6
 80a755e:	4639      	mov	r1, r7
 80a7560:	f001 fc10 	bl	80a8d84 <__aeabi_dsub>
 80a7564:	4602      	mov	r2, r0
 80a7566:	460b      	mov	r3, r1
 80a7568:	4650      	mov	r0, sl
 80a756a:	4659      	mov	r1, fp
 80a756c:	f001 fc0a 	bl	80a8d84 <__aeabi_dsub>
 80a7570:	4602      	mov	r2, r0
 80a7572:	460b      	mov	r3, r1
 80a7574:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a7578:	f001 fc04 	bl	80a8d84 <__aeabi_dsub>
 80a757c:	b006      	add	sp, #24
 80a757e:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80a7582:	2200      	movs	r2, #0
 80a7584:	4b16      	ldr	r3, [pc, #88]	; (80a75e0 <__kernel_cos+0x248>)
 80a7586:	f04f 0a00 	mov.w	sl, #0
 80a758a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a758e:	f8df b054 	ldr.w	fp, [pc, #84]	; 80a75e4 <__kernel_cos+0x24c>
 80a7592:	e7c6      	b.n	80a7522 <__kernel_cos+0x18a>
 80a7594:	2000      	movs	r0, #0
 80a7596:	490f      	ldr	r1, [pc, #60]	; (80a75d4 <__kernel_cos+0x23c>)
 80a7598:	b006      	add	sp, #24
 80a759a:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80a759e:	bf00      	nop
 80a75a0:	be8838d4 	.word	0xbe8838d4
 80a75a4:	bda8fae9 	.word	0xbda8fae9
 80a75a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80a75ac:	3e21ee9e 	.word	0x3e21ee9e
 80a75b0:	809c52ad 	.word	0x809c52ad
 80a75b4:	3e927e4f 	.word	0x3e927e4f
 80a75b8:	19cb1590 	.word	0x19cb1590
 80a75bc:	3efa01a0 	.word	0x3efa01a0
 80a75c0:	16c15177 	.word	0x16c15177
 80a75c4:	3f56c16c 	.word	0x3f56c16c
 80a75c8:	5555554c 	.word	0x5555554c
 80a75cc:	3fa55555 	.word	0x3fa55555
 80a75d0:	3fe00000 	.word	0x3fe00000
 80a75d4:	3ff00000 	.word	0x3ff00000
 80a75d8:	3fd33332 	.word	0x3fd33332
 80a75dc:	3fe90000 	.word	0x3fe90000
 80a75e0:	3fe70000 	.word	0x3fe70000
 80a75e4:	3fd20000 	.word	0x3fd20000

080a75e8 <__kernel_rem_pio2>:
 80a75e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a75ec:	461c      	mov	r4, r3
 80a75ee:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80a75f2:	910b      	str	r1, [sp, #44]	; 0x2c
 80a75f4:	1e61      	subs	r1, r4, #1
 80a75f6:	9308      	str	r3, [sp, #32]
 80a75f8:	9103      	str	r1, [sp, #12]
 80a75fa:	4bb8      	ldr	r3, [pc, #736]	; (80a78dc <__kernel_rem_pio2+0x2f4>)
 80a75fc:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80a75fe:	f112 0f14 	cmn.w	r2, #20
 80a7602:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80a7606:	4607      	mov	r7, r0
 80a7608:	9305      	str	r3, [sp, #20]
 80a760a:	f2c0 8341 	blt.w	80a7c90 <__kernel_rem_pio2+0x6a8>
 80a760e:	49b4      	ldr	r1, [pc, #720]	; (80a78e0 <__kernel_rem_pio2+0x2f8>)
 80a7610:	1ed3      	subs	r3, r2, #3
 80a7612:	fb81 0103 	smull	r0, r1, r1, r3
 80a7616:	17db      	asrs	r3, r3, #31
 80a7618:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 80a761c:	9307      	str	r3, [sp, #28]
 80a761e:	3301      	adds	r3, #1
 80a7620:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80a7624:	00db      	lsls	r3, r3, #3
 80a7626:	18d3      	adds	r3, r2, r3
 80a7628:	9306      	str	r3, [sp, #24]
 80a762a:	9a07      	ldr	r2, [sp, #28]
 80a762c:	9b03      	ldr	r3, [sp, #12]
 80a762e:	1ad6      	subs	r6, r2, r3
 80a7630:	9a05      	ldr	r2, [sp, #20]
 80a7632:	eb12 0903 	adds.w	r9, r2, r3
 80a7636:	d41b      	bmi.n	80a7670 <__kernel_rem_pio2+0x88>
 80a7638:	f109 0901 	add.w	r9, r9, #1
 80a763c:	2400      	movs	r4, #0
 80a763e:	2500      	movs	r5, #0
 80a7640:	f8dd a28c 	ldr.w	sl, [sp, #652]	; 0x28c
 80a7644:	44b1      	add	r9, r6
 80a7646:	f10d 0880 	add.w	r8, sp, #128	; 0x80
 80a764a:	e008      	b.n	80a765e <__kernel_rem_pio2+0x76>
 80a764c:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 80a7650:	f001 fce6 	bl	80a9020 <__aeabi_i2d>
 80a7654:	3601      	adds	r6, #1
 80a7656:	454e      	cmp	r6, r9
 80a7658:	e8e8 0102 	strd	r0, r1, [r8], #8
 80a765c:	d008      	beq.n	80a7670 <__kernel_rem_pio2+0x88>
 80a765e:	2e00      	cmp	r6, #0
 80a7660:	daf4      	bge.n	80a764c <__kernel_rem_pio2+0x64>
 80a7662:	4620      	mov	r0, r4
 80a7664:	4629      	mov	r1, r5
 80a7666:	3601      	adds	r6, #1
 80a7668:	454e      	cmp	r6, r9
 80a766a:	e8e8 0102 	strd	r0, r1, [r8], #8
 80a766e:	d1f6      	bne.n	80a765e <__kernel_rem_pio2+0x76>
 80a7670:	9b05      	ldr	r3, [sp, #20]
 80a7672:	2b00      	cmp	r3, #0
 80a7674:	f1a7 0308 	sub.w	r3, r7, #8
 80a7678:	9304      	str	r3, [sp, #16]
 80a767a:	f2c0 83b8 	blt.w	80a7dee <__kernel_rem_pio2+0x806>
 80a767e:	4619      	mov	r1, r3
 80a7680:	9b08      	ldr	r3, [sp, #32]
 80a7682:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80a7686:	00da      	lsls	r2, r3, #3
 80a7688:	9202      	str	r2, [sp, #8]
 80a768a:	9a05      	ldr	r2, [sp, #20]
 80a768c:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 80a7690:	a920      	add	r1, sp, #128	; 0x80
 80a7692:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 80a7696:	18d3      	adds	r3, r2, r3
 80a7698:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80a769c:	9301      	str	r3, [sp, #4]
 80a769e:	9b03      	ldr	r3, [sp, #12]
 80a76a0:	2b00      	cmp	r3, #0
 80a76a2:	f2c0 81b0 	blt.w	80a7a06 <__kernel_rem_pio2+0x41e>
 80a76a6:	4657      	mov	r7, sl
 80a76a8:	2400      	movs	r4, #0
 80a76aa:	2500      	movs	r5, #0
 80a76ac:	9e04      	ldr	r6, [sp, #16]
 80a76ae:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 80a76b2:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 80a76b6:	f001 fd1d 	bl	80a90f4 <__aeabi_dmul>
 80a76ba:	4602      	mov	r2, r0
 80a76bc:	460b      	mov	r3, r1
 80a76be:	4620      	mov	r0, r4
 80a76c0:	4629      	mov	r1, r5
 80a76c2:	f001 fb61 	bl	80a8d88 <__adddf3>
 80a76c6:	4546      	cmp	r6, r8
 80a76c8:	4604      	mov	r4, r0
 80a76ca:	460d      	mov	r5, r1
 80a76cc:	d1ef      	bne.n	80a76ae <__kernel_rem_pio2+0xc6>
 80a76ce:	9b01      	ldr	r3, [sp, #4]
 80a76d0:	f109 0901 	add.w	r9, r9, #1
 80a76d4:	4599      	cmp	r9, r3
 80a76d6:	e8eb 4502 	strd	r4, r5, [fp], #8
 80a76da:	f10a 0a08 	add.w	sl, sl, #8
 80a76de:	d1de      	bne.n	80a769e <__kernel_rem_pio2+0xb6>
 80a76e0:	9a05      	ldr	r2, [sp, #20]
 80a76e2:	a90c      	add	r1, sp, #48	; 0x30
 80a76e4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80a76e8:	9804      	ldr	r0, [sp, #16]
 80a76ea:	9902      	ldr	r1, [sp, #8]
 80a76ec:	3b08      	subs	r3, #8
 80a76ee:	4401      	add	r1, r0
 80a76f0:	468b      	mov	fp, r1
 80a76f2:	9309      	str	r3, [sp, #36]	; 0x24
 80a76f4:	ab0b      	add	r3, sp, #44	; 0x2c
 80a76f6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a76fa:	9201      	str	r2, [sp, #4]
 80a76fc:	930a      	str	r3, [sp, #40]	; 0x28
 80a76fe:	9a01      	ldr	r2, [sp, #4]
 80a7700:	a998      	add	r1, sp, #608	; 0x260
 80a7702:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 80a7706:	2a00      	cmp	r2, #0
 80a7708:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80a770c:	dd2a      	ble.n	80a7764 <__kernel_rem_pio2+0x17c>
 80a770e:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80a7712:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80a7716:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 80a771a:	2200      	movs	r2, #0
 80a771c:	4b71      	ldr	r3, [pc, #452]	; (80a78e4 <__kernel_rem_pio2+0x2fc>)
 80a771e:	4620      	mov	r0, r4
 80a7720:	4629      	mov	r1, r5
 80a7722:	f001 fce7 	bl	80a90f4 <__aeabi_dmul>
 80a7726:	f001 ff95 	bl	80a9654 <__aeabi_d2iz>
 80a772a:	f001 fc79 	bl	80a9020 <__aeabi_i2d>
 80a772e:	2200      	movs	r2, #0
 80a7730:	4b6d      	ldr	r3, [pc, #436]	; (80a78e8 <__kernel_rem_pio2+0x300>)
 80a7732:	4606      	mov	r6, r0
 80a7734:	460f      	mov	r7, r1
 80a7736:	f001 fcdd 	bl	80a90f4 <__aeabi_dmul>
 80a773a:	4602      	mov	r2, r0
 80a773c:	460b      	mov	r3, r1
 80a773e:	4620      	mov	r0, r4
 80a7740:	4629      	mov	r1, r5
 80a7742:	f001 fb1f 	bl	80a8d84 <__aeabi_dsub>
 80a7746:	f001 ff85 	bl	80a9654 <__aeabi_d2iz>
 80a774a:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80a774e:	4604      	mov	r4, r0
 80a7750:	4639      	mov	r1, r7
 80a7752:	f849 4b04 	str.w	r4, [r9], #4
 80a7756:	4630      	mov	r0, r6
 80a7758:	f001 fb16 	bl	80a8d88 <__adddf3>
 80a775c:	45d0      	cmp	r8, sl
 80a775e:	4604      	mov	r4, r0
 80a7760:	460d      	mov	r5, r1
 80a7762:	d1da      	bne.n	80a771a <__kernel_rem_pio2+0x132>
 80a7764:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80a7768:	4620      	mov	r0, r4
 80a776a:	4629      	mov	r1, r5
 80a776c:	464a      	mov	r2, r9
 80a776e:	f001 f9ef 	bl	80a8b50 <scalbn>
 80a7772:	2200      	movs	r2, #0
 80a7774:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80a7778:	4604      	mov	r4, r0
 80a777a:	460d      	mov	r5, r1
 80a777c:	f001 fcba 	bl	80a90f4 <__aeabi_dmul>
 80a7780:	f001 f8d2 	bl	80a8928 <floor>
 80a7784:	2200      	movs	r2, #0
 80a7786:	4b59      	ldr	r3, [pc, #356]	; (80a78ec <__kernel_rem_pio2+0x304>)
 80a7788:	f001 fcb4 	bl	80a90f4 <__aeabi_dmul>
 80a778c:	4602      	mov	r2, r0
 80a778e:	460b      	mov	r3, r1
 80a7790:	4620      	mov	r0, r4
 80a7792:	4629      	mov	r1, r5
 80a7794:	f001 faf6 	bl	80a8d84 <__aeabi_dsub>
 80a7798:	4604      	mov	r4, r0
 80a779a:	460d      	mov	r5, r1
 80a779c:	f001 ff5a 	bl	80a9654 <__aeabi_d2iz>
 80a77a0:	4680      	mov	r8, r0
 80a77a2:	f001 fc3d 	bl	80a9020 <__aeabi_i2d>
 80a77a6:	4602      	mov	r2, r0
 80a77a8:	460b      	mov	r3, r1
 80a77aa:	4620      	mov	r0, r4
 80a77ac:	4629      	mov	r1, r5
 80a77ae:	464c      	mov	r4, r9
 80a77b0:	f001 fae8 	bl	80a8d84 <__aeabi_dsub>
 80a77b4:	2c00      	cmp	r4, #0
 80a77b6:	4606      	mov	r6, r0
 80a77b8:	460f      	mov	r7, r1
 80a77ba:	f340 8099 	ble.w	80a78f0 <__kernel_rem_pio2+0x308>
 80a77be:	9b01      	ldr	r3, [sp, #4]
 80a77c0:	f1c9 0218 	rsb	r2, r9, #24
 80a77c4:	1e58      	subs	r0, r3, #1
 80a77c6:	ab0c      	add	r3, sp, #48	; 0x30
 80a77c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80a77cc:	f1c9 0517 	rsb	r5, r9, #23
 80a77d0:	fa43 f102 	asr.w	r1, r3, r2
 80a77d4:	fa01 f202 	lsl.w	r2, r1, r2
 80a77d8:	1a9b      	subs	r3, r3, r2
 80a77da:	fa43 f505 	asr.w	r5, r3, r5
 80a77de:	aa0c      	add	r2, sp, #48	; 0x30
 80a77e0:	2d00      	cmp	r5, #0
 80a77e2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80a77e6:	4488      	add	r8, r1
 80a77e8:	f300 808c 	bgt.w	80a7904 <__kernel_rem_pio2+0x31c>
 80a77ec:	2200      	movs	r2, #0
 80a77ee:	2300      	movs	r3, #0
 80a77f0:	4630      	mov	r0, r6
 80a77f2:	4639      	mov	r1, r7
 80a77f4:	f001 fee6 	bl	80a95c4 <__aeabi_dcmpeq>
 80a77f8:	2800      	cmp	r0, #0
 80a77fa:	f000 8250 	beq.w	80a7c9e <__kernel_rem_pio2+0x6b6>
 80a77fe:	9b01      	ldr	r3, [sp, #4]
 80a7800:	9a05      	ldr	r2, [sp, #20]
 80a7802:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80a7806:	4552      	cmp	r2, sl
 80a7808:	dc10      	bgt.n	80a782c <__kernel_rem_pio2+0x244>
 80a780a:	2200      	movs	r2, #0
 80a780c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a7810:	3b01      	subs	r3, #1
 80a7812:	a90c      	add	r1, sp, #48	; 0x30
 80a7814:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a7816:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a781a:	f853 1904 	ldr.w	r1, [r3], #-4
 80a781e:	4283      	cmp	r3, r0
 80a7820:	ea42 0201 	orr.w	r2, r2, r1
 80a7824:	d1f9      	bne.n	80a781a <__kernel_rem_pio2+0x232>
 80a7826:	2a00      	cmp	r2, #0
 80a7828:	f040 80f0 	bne.w	80a7a0c <__kernel_rem_pio2+0x424>
 80a782c:	9b05      	ldr	r3, [sp, #20]
 80a782e:	aa0c      	add	r2, sp, #48	; 0x30
 80a7830:	3b01      	subs	r3, #1
 80a7832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a7836:	2b00      	cmp	r3, #0
 80a7838:	f040 80e0 	bne.w	80a79fc <__kernel_rem_pio2+0x414>
 80a783c:	2301      	movs	r3, #1
 80a783e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a7840:	f852 1904 	ldr.w	r1, [r2], #-4
 80a7844:	3301      	adds	r3, #1
 80a7846:	2900      	cmp	r1, #0
 80a7848:	d0fa      	beq.n	80a7840 <__kernel_rem_pio2+0x258>
 80a784a:	9901      	ldr	r1, [sp, #4]
 80a784c:	1c4a      	adds	r2, r1, #1
 80a784e:	4691      	mov	r9, r2
 80a7850:	18cb      	adds	r3, r1, r3
 80a7852:	9302      	str	r3, [sp, #8]
 80a7854:	9b07      	ldr	r3, [sp, #28]
 80a7856:	9908      	ldr	r1, [sp, #32]
 80a7858:	eb02 0a03 	add.w	sl, r2, r3
 80a785c:	9b01      	ldr	r3, [sp, #4]
 80a785e:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 80a7862:	440b      	add	r3, r1
 80a7864:	4698      	mov	r8, r3
 80a7866:	ab20      	add	r3, sp, #128	; 0x80
 80a7868:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80a786c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80a786e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80a7872:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 80a7876:	ab70      	add	r3, sp, #448	; 0x1c0
 80a7878:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a787c:	9301      	str	r3, [sp, #4]
 80a787e:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80a7882:	f001 fbcd 	bl	80a9020 <__aeabi_i2d>
 80a7886:	9b03      	ldr	r3, [sp, #12]
 80a7888:	4647      	mov	r7, r8
 80a788a:	2b00      	cmp	r3, #0
 80a788c:	e9c8 0100 	strd	r0, r1, [r8]
 80a7890:	f108 0808 	add.w	r8, r8, #8
 80a7894:	db1f      	blt.n	80a78d6 <__kernel_rem_pio2+0x2ee>
 80a7896:	2400      	movs	r4, #0
 80a7898:	2500      	movs	r5, #0
 80a789a:	9e04      	ldr	r6, [sp, #16]
 80a789c:	3f08      	subs	r7, #8
 80a789e:	e001      	b.n	80a78a4 <__kernel_rem_pio2+0x2bc>
 80a78a0:	e877 0102 	ldrd	r0, r1, [r7], #-8
 80a78a4:	e9f6 2302 	ldrd	r2, r3, [r6, #8]!
 80a78a8:	f001 fc24 	bl	80a90f4 <__aeabi_dmul>
 80a78ac:	4602      	mov	r2, r0
 80a78ae:	460b      	mov	r3, r1
 80a78b0:	4620      	mov	r0, r4
 80a78b2:	4629      	mov	r1, r5
 80a78b4:	f001 fa68 	bl	80a8d88 <__adddf3>
 80a78b8:	455e      	cmp	r6, fp
 80a78ba:	4604      	mov	r4, r0
 80a78bc:	460d      	mov	r5, r1
 80a78be:	d1ef      	bne.n	80a78a0 <__kernel_rem_pio2+0x2b8>
 80a78c0:	9b01      	ldr	r3, [sp, #4]
 80a78c2:	f109 0901 	add.w	r9, r9, #1
 80a78c6:	e8e3 4502 	strd	r4, r5, [r3], #8
 80a78ca:	9301      	str	r3, [sp, #4]
 80a78cc:	9b02      	ldr	r3, [sp, #8]
 80a78ce:	4599      	cmp	r9, r3
 80a78d0:	ddd5      	ble.n	80a787e <__kernel_rem_pio2+0x296>
 80a78d2:	9301      	str	r3, [sp, #4]
 80a78d4:	e713      	b.n	80a76fe <__kernel_rem_pio2+0x116>
 80a78d6:	2400      	movs	r4, #0
 80a78d8:	2500      	movs	r5, #0
 80a78da:	e7f1      	b.n	80a78c0 <__kernel_rem_pio2+0x2d8>
 80a78dc:	080aa940 	.word	0x080aa940
 80a78e0:	2aaaaaab 	.word	0x2aaaaaab
 80a78e4:	3e700000 	.word	0x3e700000
 80a78e8:	41700000 	.word	0x41700000
 80a78ec:	40200000 	.word	0x40200000
 80a78f0:	d16b      	bne.n	80a79ca <__kernel_rem_pio2+0x3e2>
 80a78f2:	9b01      	ldr	r3, [sp, #4]
 80a78f4:	aa0c      	add	r2, sp, #48	; 0x30
 80a78f6:	3b01      	subs	r3, #1
 80a78f8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80a78fc:	15ed      	asrs	r5, r5, #23
 80a78fe:	2d00      	cmp	r5, #0
 80a7900:	f77f af74 	ble.w	80a77ec <__kernel_rem_pio2+0x204>
 80a7904:	9b01      	ldr	r3, [sp, #4]
 80a7906:	f108 0801 	add.w	r8, r8, #1
 80a790a:	2b00      	cmp	r3, #0
 80a790c:	f340 81c5 	ble.w	80a7c9a <__kernel_rem_pio2+0x6b2>
 80a7910:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a7912:	2c00      	cmp	r4, #0
 80a7914:	d151      	bne.n	80a79ba <__kernel_rem_pio2+0x3d2>
 80a7916:	9b01      	ldr	r3, [sp, #4]
 80a7918:	2b01      	cmp	r3, #1
 80a791a:	d020      	beq.n	80a795e <__kernel_rem_pio2+0x376>
 80a791c:	2201      	movs	r2, #1
 80a791e:	ab0c      	add	r3, sp, #48	; 0x30
 80a7920:	f853 4f04 	ldr.w	r4, [r3, #4]!
 80a7924:	2c00      	cmp	r4, #0
 80a7926:	d04b      	beq.n	80a79c0 <__kernel_rem_pio2+0x3d8>
 80a7928:	1c53      	adds	r3, r2, #1
 80a792a:	a90c      	add	r1, sp, #48	; 0x30
 80a792c:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 80a7930:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 80a7934:	9901      	ldr	r1, [sp, #4]
 80a7936:	4299      	cmp	r1, r3
 80a7938:	dd10      	ble.n	80a795c <__kernel_rem_pio2+0x374>
 80a793a:	ac0c      	add	r4, sp, #48	; 0x30
 80a793c:	aa0c      	add	r2, sp, #48	; 0x30
 80a793e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80a7942:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80a7946:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80a794a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80a794e:	e000      	b.n	80a7952 <__kernel_rem_pio2+0x36a>
 80a7950:	681a      	ldr	r2, [r3, #0]
 80a7952:	1a82      	subs	r2, r0, r2
 80a7954:	f843 2b04 	str.w	r2, [r3], #4
 80a7958:	428b      	cmp	r3, r1
 80a795a:	d1f9      	bne.n	80a7950 <__kernel_rem_pio2+0x368>
 80a795c:	2401      	movs	r4, #1
 80a795e:	9b06      	ldr	r3, [sp, #24]
 80a7960:	2b00      	cmp	r3, #0
 80a7962:	dd0e      	ble.n	80a7982 <__kernel_rem_pio2+0x39a>
 80a7964:	2b01      	cmp	r3, #1
 80a7966:	f000 817a 	beq.w	80a7c5e <__kernel_rem_pio2+0x676>
 80a796a:	2b02      	cmp	r3, #2
 80a796c:	d109      	bne.n	80a7982 <__kernel_rem_pio2+0x39a>
 80a796e:	9b01      	ldr	r3, [sp, #4]
 80a7970:	a90c      	add	r1, sp, #48	; 0x30
 80a7972:	1e5a      	subs	r2, r3, #1
 80a7974:	ab0c      	add	r3, sp, #48	; 0x30
 80a7976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a797a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80a797e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a7982:	2d02      	cmp	r5, #2
 80a7984:	f47f af32 	bne.w	80a77ec <__kernel_rem_pio2+0x204>
 80a7988:	4632      	mov	r2, r6
 80a798a:	463b      	mov	r3, r7
 80a798c:	2000      	movs	r0, #0
 80a798e:	49bc      	ldr	r1, [pc, #752]	; (80a7c80 <__kernel_rem_pio2+0x698>)
 80a7990:	f001 f9f8 	bl	80a8d84 <__aeabi_dsub>
 80a7994:	4606      	mov	r6, r0
 80a7996:	460f      	mov	r7, r1
 80a7998:	2c00      	cmp	r4, #0
 80a799a:	f43f af27 	beq.w	80a77ec <__kernel_rem_pio2+0x204>
 80a799e:	9a06      	ldr	r2, [sp, #24]
 80a79a0:	2000      	movs	r0, #0
 80a79a2:	49b7      	ldr	r1, [pc, #732]	; (80a7c80 <__kernel_rem_pio2+0x698>)
 80a79a4:	f001 f8d4 	bl	80a8b50 <scalbn>
 80a79a8:	4602      	mov	r2, r0
 80a79aa:	460b      	mov	r3, r1
 80a79ac:	4630      	mov	r0, r6
 80a79ae:	4639      	mov	r1, r7
 80a79b0:	f001 f9e8 	bl	80a8d84 <__aeabi_dsub>
 80a79b4:	4606      	mov	r6, r0
 80a79b6:	460f      	mov	r7, r1
 80a79b8:	e718      	b.n	80a77ec <__kernel_rem_pio2+0x204>
 80a79ba:	2301      	movs	r3, #1
 80a79bc:	2200      	movs	r2, #0
 80a79be:	e7b4      	b.n	80a792a <__kernel_rem_pio2+0x342>
 80a79c0:	9901      	ldr	r1, [sp, #4]
 80a79c2:	3201      	adds	r2, #1
 80a79c4:	428a      	cmp	r2, r1
 80a79c6:	d1ab      	bne.n	80a7920 <__kernel_rem_pio2+0x338>
 80a79c8:	e7c9      	b.n	80a795e <__kernel_rem_pio2+0x376>
 80a79ca:	2200      	movs	r2, #0
 80a79cc:	4bad      	ldr	r3, [pc, #692]	; (80a7c84 <__kernel_rem_pio2+0x69c>)
 80a79ce:	f001 fe17 	bl	80a9600 <__aeabi_dcmpge>
 80a79d2:	4605      	mov	r5, r0
 80a79d4:	2800      	cmp	r0, #0
 80a79d6:	f43f af09 	beq.w	80a77ec <__kernel_rem_pio2+0x204>
 80a79da:	9b01      	ldr	r3, [sp, #4]
 80a79dc:	f108 0801 	add.w	r8, r8, #1
 80a79e0:	2b00      	cmp	r3, #0
 80a79e2:	bfc8      	it	gt
 80a79e4:	2502      	movgt	r5, #2
 80a79e6:	dc93      	bgt.n	80a7910 <__kernel_rem_pio2+0x328>
 80a79e8:	4632      	mov	r2, r6
 80a79ea:	463b      	mov	r3, r7
 80a79ec:	2000      	movs	r0, #0
 80a79ee:	49a4      	ldr	r1, [pc, #656]	; (80a7c80 <__kernel_rem_pio2+0x698>)
 80a79f0:	f001 f9c8 	bl	80a8d84 <__aeabi_dsub>
 80a79f4:	2502      	movs	r5, #2
 80a79f6:	4606      	mov	r6, r0
 80a79f8:	460f      	mov	r7, r1
 80a79fa:	e6f7      	b.n	80a77ec <__kernel_rem_pio2+0x204>
 80a79fc:	9b01      	ldr	r3, [sp, #4]
 80a79fe:	1c5a      	adds	r2, r3, #1
 80a7a00:	4691      	mov	r9, r2
 80a7a02:	9202      	str	r2, [sp, #8]
 80a7a04:	e726      	b.n	80a7854 <__kernel_rem_pio2+0x26c>
 80a7a06:	2400      	movs	r4, #0
 80a7a08:	2500      	movs	r5, #0
 80a7a0a:	e660      	b.n	80a76ce <__kernel_rem_pio2+0xe6>
 80a7a0c:	9a06      	ldr	r2, [sp, #24]
 80a7a0e:	ab0c      	add	r3, sp, #48	; 0x30
 80a7a10:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 80a7a14:	3a18      	subs	r2, #24
 80a7a16:	f8cd 801c 	str.w	r8, [sp, #28]
 80a7a1a:	9503      	str	r5, [sp, #12]
 80a7a1c:	9206      	str	r2, [sp, #24]
 80a7a1e:	b973      	cbnz	r3, 80a7a3e <__kernel_rem_pio2+0x456>
 80a7a20:	9b01      	ldr	r3, [sp, #4]
 80a7a22:	a90c      	add	r1, sp, #48	; 0x30
 80a7a24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a7a28:	3b02      	subs	r3, #2
 80a7a2a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a7a2e:	f853 1904 	ldr.w	r1, [r3], #-4
 80a7a32:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80a7a36:	3a18      	subs	r2, #24
 80a7a38:	2900      	cmp	r1, #0
 80a7a3a:	d0f8      	beq.n	80a7a2e <__kernel_rem_pio2+0x446>
 80a7a3c:	9206      	str	r2, [sp, #24]
 80a7a3e:	2000      	movs	r0, #0
 80a7a40:	9a06      	ldr	r2, [sp, #24]
 80a7a42:	498f      	ldr	r1, [pc, #572]	; (80a7c80 <__kernel_rem_pio2+0x698>)
 80a7a44:	f001 f884 	bl	80a8b50 <scalbn>
 80a7a48:	f1ba 0f00 	cmp.w	sl, #0
 80a7a4c:	4604      	mov	r4, r0
 80a7a4e:	460d      	mov	r5, r1
 80a7a50:	f2c0 81d1 	blt.w	80a7df6 <__kernel_rem_pio2+0x80e>
 80a7a54:	ab70      	add	r3, sp, #448	; 0x1c0
 80a7a56:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 80a7a5a:	aa0c      	add	r2, sp, #48	; 0x30
 80a7a5c:	f10a 0301 	add.w	r3, sl, #1
 80a7a60:	9306      	str	r3, [sp, #24]
 80a7a62:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 80a7a66:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80a7a6a:	f10b 0908 	add.w	r9, fp, #8
 80a7a6e:	9304      	str	r3, [sp, #16]
 80a7a70:	f858 0d04 	ldr.w	r0, [r8, #-4]!
 80a7a74:	f001 fad4 	bl	80a9020 <__aeabi_i2d>
 80a7a78:	4622      	mov	r2, r4
 80a7a7a:	462b      	mov	r3, r5
 80a7a7c:	f001 fb3a 	bl	80a90f4 <__aeabi_dmul>
 80a7a80:	4606      	mov	r6, r0
 80a7a82:	460f      	mov	r7, r1
 80a7a84:	4620      	mov	r0, r4
 80a7a86:	4629      	mov	r1, r5
 80a7a88:	4b7f      	ldr	r3, [pc, #508]	; (80a7c88 <__kernel_rem_pio2+0x6a0>)
 80a7a8a:	2200      	movs	r2, #0
 80a7a8c:	e969 6702 	strd	r6, r7, [r9, #-8]!
 80a7a90:	f001 fb30 	bl	80a90f4 <__aeabi_dmul>
 80a7a94:	ab0c      	add	r3, sp, #48	; 0x30
 80a7a96:	4598      	cmp	r8, r3
 80a7a98:	4604      	mov	r4, r0
 80a7a9a:	460d      	mov	r5, r1
 80a7a9c:	d1e8      	bne.n	80a7a70 <__kernel_rem_pio2+0x488>
 80a7a9e:	ab48      	add	r3, sp, #288	; 0x120
 80a7aa0:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 80a7aa4:	f8dd a014 	ldr.w	sl, [sp, #20]
 80a7aa8:	f04f 0900 	mov.w	r9, #0
 80a7aac:	f1ba 0f00 	cmp.w	sl, #0
 80a7ab0:	db2c      	blt.n	80a7b0c <__kernel_rem_pio2+0x524>
 80a7ab2:	a371      	add	r3, pc, #452	; (adr r3, 80a7c78 <__kernel_rem_pio2+0x690>)
 80a7ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7ab8:	465f      	mov	r7, fp
 80a7aba:	2400      	movs	r4, #0
 80a7abc:	2500      	movs	r5, #0
 80a7abe:	2600      	movs	r6, #0
 80a7ac0:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80a7c8c <__kernel_rem_pio2+0x6a4>
 80a7ac4:	e003      	b.n	80a7ace <__kernel_rem_pio2+0x4e6>
 80a7ac6:	45b1      	cmp	r9, r6
 80a7ac8:	db10      	blt.n	80a7aec <__kernel_rem_pio2+0x504>
 80a7aca:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80a7ace:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80a7ad2:	f001 fb0f 	bl	80a90f4 <__aeabi_dmul>
 80a7ad6:	4602      	mov	r2, r0
 80a7ad8:	460b      	mov	r3, r1
 80a7ada:	4620      	mov	r0, r4
 80a7adc:	4629      	mov	r1, r5
 80a7ade:	f001 f953 	bl	80a8d88 <__adddf3>
 80a7ae2:	3601      	adds	r6, #1
 80a7ae4:	45b2      	cmp	sl, r6
 80a7ae6:	4604      	mov	r4, r0
 80a7ae8:	460d      	mov	r5, r1
 80a7aea:	daec      	bge.n	80a7ac6 <__kernel_rem_pio2+0x4de>
 80a7aec:	9b01      	ldr	r3, [sp, #4]
 80a7aee:	9a02      	ldr	r2, [sp, #8]
 80a7af0:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80a7af4:	4591      	cmp	r9, r2
 80a7af6:	e9c3 4500 	strd	r4, r5, [r3]
 80a7afa:	f1ab 0b08 	sub.w	fp, fp, #8
 80a7afe:	f109 0301 	add.w	r3, r9, #1
 80a7b02:	d006      	beq.n	80a7b12 <__kernel_rem_pio2+0x52a>
 80a7b04:	f1ba 0f00 	cmp.w	sl, #0
 80a7b08:	4699      	mov	r9, r3
 80a7b0a:	dad2      	bge.n	80a7ab2 <__kernel_rem_pio2+0x4ca>
 80a7b0c:	2400      	movs	r4, #0
 80a7b0e:	2500      	movs	r5, #0
 80a7b10:	e7ec      	b.n	80a7aec <__kernel_rem_pio2+0x504>
 80a7b12:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a7b14:	f8dd a008 	ldr.w	sl, [sp, #8]
 80a7b18:	2b02      	cmp	r3, #2
 80a7b1a:	dc23      	bgt.n	80a7b64 <__kernel_rem_pio2+0x57c>
 80a7b1c:	2b00      	cmp	r3, #0
 80a7b1e:	f300 80f1 	bgt.w	80a7d04 <__kernel_rem_pio2+0x71c>
 80a7b22:	d118      	bne.n	80a7b56 <__kernel_rem_pio2+0x56e>
 80a7b24:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a7b26:	9d04      	ldr	r5, [sp, #16]
 80a7b28:	461c      	mov	r4, r3
 80a7b2a:	9e01      	ldr	r6, [sp, #4]
 80a7b2c:	3508      	adds	r5, #8
 80a7b2e:	4435      	add	r5, r6
 80a7b30:	4618      	mov	r0, r3
 80a7b32:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80a7b36:	4621      	mov	r1, r4
 80a7b38:	f001 f926 	bl	80a8d88 <__adddf3>
 80a7b3c:	42ae      	cmp	r6, r5
 80a7b3e:	4603      	mov	r3, r0
 80a7b40:	460c      	mov	r4, r1
 80a7b42:	d1f5      	bne.n	80a7b30 <__kernel_rem_pio2+0x548>
 80a7b44:	9a03      	ldr	r2, [sp, #12]
 80a7b46:	b10a      	cbz	r2, 80a7b4c <__kernel_rem_pio2+0x564>
 80a7b48:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80a7b4c:	4618      	mov	r0, r3
 80a7b4e:	4621      	mov	r1, r4
 80a7b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a7b52:	e9c3 0100 	strd	r0, r1, [r3]
 80a7b56:	9b07      	ldr	r3, [sp, #28]
 80a7b58:	f003 0007 	and.w	r0, r3, #7
 80a7b5c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a7b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7b64:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a7b66:	2b03      	cmp	r3, #3
 80a7b68:	d1f5      	bne.n	80a7b56 <__kernel_rem_pio2+0x56e>
 80a7b6a:	f1ba 0f00 	cmp.w	sl, #0
 80a7b6e:	f000 8158 	beq.w	80a7e22 <__kernel_rem_pio2+0x83a>
 80a7b72:	9b01      	ldr	r3, [sp, #4]
 80a7b74:	9a04      	ldr	r2, [sp, #16]
 80a7b76:	4413      	add	r3, r2
 80a7b78:	469b      	mov	fp, r3
 80a7b7a:	e9d3 4500 	ldrd	r4, r5, [r3]
 80a7b7e:	e95b 6702 	ldrd	r6, r7, [fp, #-8]
 80a7b82:	4620      	mov	r0, r4
 80a7b84:	4629      	mov	r1, r5
 80a7b86:	4632      	mov	r2, r6
 80a7b88:	463b      	mov	r3, r7
 80a7b8a:	f001 f8fd 	bl	80a8d88 <__adddf3>
 80a7b8e:	46a0      	mov	r8, r4
 80a7b90:	46a9      	mov	r9, r5
 80a7b92:	4604      	mov	r4, r0
 80a7b94:	460d      	mov	r5, r1
 80a7b96:	4622      	mov	r2, r4
 80a7b98:	462b      	mov	r3, r5
 80a7b9a:	4630      	mov	r0, r6
 80a7b9c:	4639      	mov	r1, r7
 80a7b9e:	f001 f8f1 	bl	80a8d84 <__aeabi_dsub>
 80a7ba2:	464b      	mov	r3, r9
 80a7ba4:	4642      	mov	r2, r8
 80a7ba6:	f001 f8ef 	bl	80a8d88 <__adddf3>
 80a7baa:	e9cb 0100 	strd	r0, r1, [fp]
 80a7bae:	e96b 4502 	strd	r4, r5, [fp, #-8]!
 80a7bb2:	9b01      	ldr	r3, [sp, #4]
 80a7bb4:	455b      	cmp	r3, fp
 80a7bb6:	d1e2      	bne.n	80a7b7e <__kernel_rem_pio2+0x596>
 80a7bb8:	f1ba 0f01 	cmp.w	sl, #1
 80a7bbc:	f340 8131 	ble.w	80a7e22 <__kernel_rem_pio2+0x83a>
 80a7bc0:	9b04      	ldr	r3, [sp, #16]
 80a7bc2:	9a01      	ldr	r2, [sp, #4]
 80a7bc4:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 80a7bc8:	4413      	add	r3, r2
 80a7bca:	469a      	mov	sl, r3
 80a7bcc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80a7bd0:	9302      	str	r3, [sp, #8]
 80a7bd2:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80a7bd6:	4620      	mov	r0, r4
 80a7bd8:	4629      	mov	r1, r5
 80a7bda:	4632      	mov	r2, r6
 80a7bdc:	463b      	mov	r3, r7
 80a7bde:	f001 f8d3 	bl	80a8d88 <__adddf3>
 80a7be2:	46a0      	mov	r8, r4
 80a7be4:	46a9      	mov	r9, r5
 80a7be6:	4604      	mov	r4, r0
 80a7be8:	460d      	mov	r5, r1
 80a7bea:	4622      	mov	r2, r4
 80a7bec:	462b      	mov	r3, r5
 80a7bee:	4630      	mov	r0, r6
 80a7bf0:	4639      	mov	r1, r7
 80a7bf2:	f001 f8c7 	bl	80a8d84 <__aeabi_dsub>
 80a7bf6:	4642      	mov	r2, r8
 80a7bf8:	464b      	mov	r3, r9
 80a7bfa:	f001 f8c5 	bl	80a8d88 <__adddf3>
 80a7bfe:	e9ca 0100 	strd	r0, r1, [sl]
 80a7c02:	e96a 4502 	strd	r4, r5, [sl, #-8]!
 80a7c06:	45d3      	cmp	fp, sl
 80a7c08:	d1e3      	bne.n	80a7bd2 <__kernel_rem_pio2+0x5ea>
 80a7c0a:	2300      	movs	r3, #0
 80a7c0c:	461e      	mov	r6, r3
 80a7c0e:	9c02      	ldr	r4, [sp, #8]
 80a7c10:	9a01      	ldr	r2, [sp, #4]
 80a7c12:	3408      	adds	r4, #8
 80a7c14:	f102 0510 	add.w	r5, r2, #16
 80a7c18:	4618      	mov	r0, r3
 80a7c1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80a7c1e:	4631      	mov	r1, r6
 80a7c20:	f001 f8b2 	bl	80a8d88 <__adddf3>
 80a7c24:	42a5      	cmp	r5, r4
 80a7c26:	4603      	mov	r3, r0
 80a7c28:	460e      	mov	r6, r1
 80a7c2a:	d1f5      	bne.n	80a7c18 <__kernel_rem_pio2+0x630>
 80a7c2c:	9a03      	ldr	r2, [sp, #12]
 80a7c2e:	2a00      	cmp	r2, #0
 80a7c30:	f040 80b1 	bne.w	80a7d96 <__kernel_rem_pio2+0x7ae>
 80a7c34:	4618      	mov	r0, r3
 80a7c36:	4631      	mov	r1, r6
 80a7c38:	9a01      	ldr	r2, [sp, #4]
 80a7c3a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a7c3c:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 80a7c40:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 80a7c44:	e9c6 2300 	strd	r2, r3, [r6]
 80a7c48:	9b07      	ldr	r3, [sp, #28]
 80a7c4a:	e9c6 0104 	strd	r0, r1, [r6, #16]
 80a7c4e:	f003 0007 	and.w	r0, r3, #7
 80a7c52:	e9c6 4502 	strd	r4, r5, [r6, #8]
 80a7c56:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a7c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7c5e:	9b01      	ldr	r3, [sp, #4]
 80a7c60:	a90c      	add	r1, sp, #48	; 0x30
 80a7c62:	1e5a      	subs	r2, r3, #1
 80a7c64:	ab0c      	add	r3, sp, #48	; 0x30
 80a7c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a7c6a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80a7c6e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a7c72:	e686      	b.n	80a7982 <__kernel_rem_pio2+0x39a>
 80a7c74:	f3af 8000 	nop.w
 80a7c78:	40000000 	.word	0x40000000
 80a7c7c:	3ff921fb 	.word	0x3ff921fb
 80a7c80:	3ff00000 	.word	0x3ff00000
 80a7c84:	3fe00000 	.word	0x3fe00000
 80a7c88:	3e700000 	.word	0x3e700000
 80a7c8c:	080aa908 	.word	0x080aa908
 80a7c90:	2100      	movs	r1, #0
 80a7c92:	f06f 0317 	mvn.w	r3, #23
 80a7c96:	9107      	str	r1, [sp, #28]
 80a7c98:	e4c5      	b.n	80a7626 <__kernel_rem_pio2+0x3e>
 80a7c9a:	2400      	movs	r4, #0
 80a7c9c:	e65f      	b.n	80a795e <__kernel_rem_pio2+0x376>
 80a7c9e:	4639      	mov	r1, r7
 80a7ca0:	9f06      	ldr	r7, [sp, #24]
 80a7ca2:	4630      	mov	r0, r6
 80a7ca4:	427a      	negs	r2, r7
 80a7ca6:	9503      	str	r5, [sp, #12]
 80a7ca8:	f8cd 801c 	str.w	r8, [sp, #28]
 80a7cac:	f000 ff50 	bl	80a8b50 <scalbn>
 80a7cb0:	2200      	movs	r2, #0
 80a7cb2:	4b5d      	ldr	r3, [pc, #372]	; (80a7e28 <__kernel_rem_pio2+0x840>)
 80a7cb4:	4604      	mov	r4, r0
 80a7cb6:	460d      	mov	r5, r1
 80a7cb8:	f001 fca2 	bl	80a9600 <__aeabi_dcmpge>
 80a7cbc:	2800      	cmp	r0, #0
 80a7cbe:	d060      	beq.n	80a7d82 <__kernel_rem_pio2+0x79a>
 80a7cc0:	2200      	movs	r2, #0
 80a7cc2:	4b5a      	ldr	r3, [pc, #360]	; (80a7e2c <__kernel_rem_pio2+0x844>)
 80a7cc4:	4620      	mov	r0, r4
 80a7cc6:	4629      	mov	r1, r5
 80a7cc8:	f001 fa14 	bl	80a90f4 <__aeabi_dmul>
 80a7ccc:	f001 fcc2 	bl	80a9654 <__aeabi_d2iz>
 80a7cd0:	4606      	mov	r6, r0
 80a7cd2:	f001 f9a5 	bl	80a9020 <__aeabi_i2d>
 80a7cd6:	2200      	movs	r2, #0
 80a7cd8:	4b53      	ldr	r3, [pc, #332]	; (80a7e28 <__kernel_rem_pio2+0x840>)
 80a7cda:	f001 fa0b 	bl	80a90f4 <__aeabi_dmul>
 80a7cde:	4602      	mov	r2, r0
 80a7ce0:	460b      	mov	r3, r1
 80a7ce2:	4620      	mov	r0, r4
 80a7ce4:	4629      	mov	r1, r5
 80a7ce6:	f001 f84d 	bl	80a8d84 <__aeabi_dsub>
 80a7cea:	f001 fcb3 	bl	80a9654 <__aeabi_d2iz>
 80a7cee:	9b01      	ldr	r3, [sp, #4]
 80a7cf0:	aa0c      	add	r2, sp, #48	; 0x30
 80a7cf2:	f103 0a01 	add.w	sl, r3, #1
 80a7cf6:	3718      	adds	r7, #24
 80a7cf8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80a7cfc:	9706      	str	r7, [sp, #24]
 80a7cfe:	f842 602a 	str.w	r6, [r2, sl, lsl #2]
 80a7d02:	e69c      	b.n	80a7a3e <__kernel_rem_pio2+0x456>
 80a7d04:	2600      	movs	r6, #0
 80a7d06:	9b01      	ldr	r3, [sp, #4]
 80a7d08:	9906      	ldr	r1, [sp, #24]
 80a7d0a:	4698      	mov	r8, r3
 80a7d0c:	eb03 07c1 	add.w	r7, r3, r1, lsl #3
 80a7d10:	4631      	mov	r1, r6
 80a7d12:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 80a7d16:	4630      	mov	r0, r6
 80a7d18:	f001 f836 	bl	80a8d88 <__adddf3>
 80a7d1c:	45b8      	cmp	r8, r7
 80a7d1e:	4606      	mov	r6, r0
 80a7d20:	d1f7      	bne.n	80a7d12 <__kernel_rem_pio2+0x72a>
 80a7d22:	9b03      	ldr	r3, [sp, #12]
 80a7d24:	2b00      	cmp	r3, #0
 80a7d26:	d151      	bne.n	80a7dcc <__kernel_rem_pio2+0x7e4>
 80a7d28:	4634      	mov	r4, r6
 80a7d2a:	460d      	mov	r5, r1
 80a7d2c:	4632      	mov	r2, r6
 80a7d2e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a7d30:	460b      	mov	r3, r1
 80a7d32:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80a7d36:	e9c6 4500 	strd	r4, r5, [r6]
 80a7d3a:	f001 f823 	bl	80a8d84 <__aeabi_dsub>
 80a7d3e:	f1ba 0f00 	cmp.w	sl, #0
 80a7d42:	4603      	mov	r3, r0
 80a7d44:	460e      	mov	r6, r1
 80a7d46:	dd10      	ble.n	80a7d6a <__kernel_rem_pio2+0x782>
 80a7d48:	2401      	movs	r4, #1
 80a7d4a:	ad48      	add	r5, sp, #288	; 0x120
 80a7d4c:	4618      	mov	r0, r3
 80a7d4e:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80a7d52:	4631      	mov	r1, r6
 80a7d54:	f001 f818 	bl	80a8d88 <__adddf3>
 80a7d58:	3401      	adds	r4, #1
 80a7d5a:	45a2      	cmp	sl, r4
 80a7d5c:	4603      	mov	r3, r0
 80a7d5e:	460e      	mov	r6, r1
 80a7d60:	daf4      	bge.n	80a7d4c <__kernel_rem_pio2+0x764>
 80a7d62:	9a03      	ldr	r2, [sp, #12]
 80a7d64:	b10a      	cbz	r2, 80a7d6a <__kernel_rem_pio2+0x782>
 80a7d66:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80a7d6a:	4618      	mov	r0, r3
 80a7d6c:	4631      	mov	r1, r6
 80a7d6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a7d70:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80a7d74:	9b07      	ldr	r3, [sp, #28]
 80a7d76:	f003 0007 	and.w	r0, r3, #7
 80a7d7a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a7d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7d82:	4620      	mov	r0, r4
 80a7d84:	4629      	mov	r1, r5
 80a7d86:	f001 fc65 	bl	80a9654 <__aeabi_d2iz>
 80a7d8a:	9b01      	ldr	r3, [sp, #4]
 80a7d8c:	aa0c      	add	r2, sp, #48	; 0x30
 80a7d8e:	469a      	mov	sl, r3
 80a7d90:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80a7d94:	e653      	b.n	80a7a3e <__kernel_rem_pio2+0x456>
 80a7d96:	9a01      	ldr	r2, [sp, #4]
 80a7d98:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a7d9a:	4615      	mov	r5, r2
 80a7d9c:	4604      	mov	r4, r0
 80a7d9e:	6103      	str	r3, [r0, #16]
 80a7da0:	68ab      	ldr	r3, [r5, #8]
 80a7da2:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80a7da6:	6146      	str	r6, [r0, #20]
 80a7da8:	6851      	ldr	r1, [r2, #4]
 80a7daa:	6828      	ldr	r0, [r5, #0]
 80a7dac:	68d2      	ldr	r2, [r2, #12]
 80a7dae:	60a3      	str	r3, [r4, #8]
 80a7db0:	9b07      	ldr	r3, [sp, #28]
 80a7db2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a7db6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a7dba:	6020      	str	r0, [r4, #0]
 80a7dbc:	f003 0007 	and.w	r0, r3, #7
 80a7dc0:	6061      	str	r1, [r4, #4]
 80a7dc2:	60e2      	str	r2, [r4, #12]
 80a7dc4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a7dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7dcc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80a7dce:	f101 4400 	add.w	r4, r1, #2147483648	; 0x80000000
 80a7dd2:	460b      	mov	r3, r1
 80a7dd4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80a7dd8:	4632      	mov	r2, r6
 80a7dda:	e9c5 6400 	strd	r6, r4, [r5]
 80a7dde:	f000 ffd1 	bl	80a8d84 <__aeabi_dsub>
 80a7de2:	f1ba 0f00 	cmp.w	sl, #0
 80a7de6:	4603      	mov	r3, r0
 80a7de8:	460e      	mov	r6, r1
 80a7dea:	dcad      	bgt.n	80a7d48 <__kernel_rem_pio2+0x760>
 80a7dec:	e7bb      	b.n	80a7d66 <__kernel_rem_pio2+0x77e>
 80a7dee:	9b08      	ldr	r3, [sp, #32]
 80a7df0:	00db      	lsls	r3, r3, #3
 80a7df2:	9302      	str	r3, [sp, #8]
 80a7df4:	e474      	b.n	80a76e0 <__kernel_rem_pio2+0xf8>
 80a7df6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a7df8:	2b02      	cmp	r3, #2
 80a7dfa:	dc06      	bgt.n	80a7e0a <__kernel_rem_pio2+0x822>
 80a7dfc:	2b00      	cmp	r3, #0
 80a7dfe:	dc0d      	bgt.n	80a7e1c <__kernel_rem_pio2+0x834>
 80a7e00:	f47f aea9 	bne.w	80a7b56 <__kernel_rem_pio2+0x56e>
 80a7e04:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a7e06:	461c      	mov	r4, r3
 80a7e08:	e69c      	b.n	80a7b44 <__kernel_rem_pio2+0x55c>
 80a7e0a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a7e0c:	2b03      	cmp	r3, #3
 80a7e0e:	f47f aea2 	bne.w	80a7b56 <__kernel_rem_pio2+0x56e>
 80a7e12:	2300      	movs	r3, #0
 80a7e14:	aa48      	add	r2, sp, #288	; 0x120
 80a7e16:	461e      	mov	r6, r3
 80a7e18:	9201      	str	r2, [sp, #4]
 80a7e1a:	e707      	b.n	80a7c2c <__kernel_rem_pio2+0x644>
 80a7e1c:	2600      	movs	r6, #0
 80a7e1e:	4631      	mov	r1, r6
 80a7e20:	e77f      	b.n	80a7d22 <__kernel_rem_pio2+0x73a>
 80a7e22:	2300      	movs	r3, #0
 80a7e24:	461e      	mov	r6, r3
 80a7e26:	e701      	b.n	80a7c2c <__kernel_rem_pio2+0x644>
 80a7e28:	41700000 	.word	0x41700000
 80a7e2c:	3e700000 	.word	0x3e700000

080a7e30 <__kernel_sin>:
 80a7e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7e34:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a7e38:	b085      	sub	sp, #20
 80a7e3a:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80a7e3e:	4604      	mov	r4, r0
 80a7e40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a7e44:	9101      	str	r1, [sp, #4]
 80a7e46:	da04      	bge.n	80a7e52 <__kernel_sin+0x22>
 80a7e48:	f001 fc04 	bl	80a9654 <__aeabi_d2iz>
 80a7e4c:	2800      	cmp	r0, #0
 80a7e4e:	f000 808f 	beq.w	80a7f70 <__kernel_sin+0x140>
 80a7e52:	9b01      	ldr	r3, [sp, #4]
 80a7e54:	4622      	mov	r2, r4
 80a7e56:	4619      	mov	r1, r3
 80a7e58:	4620      	mov	r0, r4
 80a7e5a:	f001 f94b 	bl	80a90f4 <__aeabi_dmul>
 80a7e5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80a7e62:	4606      	mov	r6, r0
 80a7e64:	460f      	mov	r7, r1
 80a7e66:	4602      	mov	r2, r0
 80a7e68:	460b      	mov	r3, r1
 80a7e6a:	4620      	mov	r0, r4
 80a7e6c:	4649      	mov	r1, r9
 80a7e6e:	f001 f941 	bl	80a90f4 <__aeabi_dmul>
 80a7e72:	a343      	add	r3, pc, #268	; (adr r3, 80a7f80 <__kernel_sin+0x150>)
 80a7e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7e78:	4682      	mov	sl, r0
 80a7e7a:	468b      	mov	fp, r1
 80a7e7c:	4630      	mov	r0, r6
 80a7e7e:	4639      	mov	r1, r7
 80a7e80:	f001 f938 	bl	80a90f4 <__aeabi_dmul>
 80a7e84:	a340      	add	r3, pc, #256	; (adr r3, 80a7f88 <__kernel_sin+0x158>)
 80a7e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7e8a:	f000 ff7b 	bl	80a8d84 <__aeabi_dsub>
 80a7e8e:	4632      	mov	r2, r6
 80a7e90:	463b      	mov	r3, r7
 80a7e92:	f001 f92f 	bl	80a90f4 <__aeabi_dmul>
 80a7e96:	a33e      	add	r3, pc, #248	; (adr r3, 80a7f90 <__kernel_sin+0x160>)
 80a7e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7e9c:	f000 ff74 	bl	80a8d88 <__adddf3>
 80a7ea0:	4632      	mov	r2, r6
 80a7ea2:	463b      	mov	r3, r7
 80a7ea4:	f001 f926 	bl	80a90f4 <__aeabi_dmul>
 80a7ea8:	a33b      	add	r3, pc, #236	; (adr r3, 80a7f98 <__kernel_sin+0x168>)
 80a7eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7eae:	f000 ff69 	bl	80a8d84 <__aeabi_dsub>
 80a7eb2:	4632      	mov	r2, r6
 80a7eb4:	463b      	mov	r3, r7
 80a7eb6:	f001 f91d 	bl	80a90f4 <__aeabi_dmul>
 80a7eba:	a339      	add	r3, pc, #228	; (adr r3, 80a7fa0 <__kernel_sin+0x170>)
 80a7ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7ec0:	f000 ff62 	bl	80a8d88 <__adddf3>
 80a7ec4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a7ec6:	4680      	mov	r8, r0
 80a7ec8:	4689      	mov	r9, r1
 80a7eca:	b3bb      	cbz	r3, 80a7f3c <__kernel_sin+0x10c>
 80a7ecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a7ed0:	2200      	movs	r2, #0
 80a7ed2:	4b37      	ldr	r3, [pc, #220]	; (80a7fb0 <__kernel_sin+0x180>)
 80a7ed4:	f001 f90e 	bl	80a90f4 <__aeabi_dmul>
 80a7ed8:	4642      	mov	r2, r8
 80a7eda:	464b      	mov	r3, r9
 80a7edc:	4680      	mov	r8, r0
 80a7ede:	4689      	mov	r9, r1
 80a7ee0:	4650      	mov	r0, sl
 80a7ee2:	4659      	mov	r1, fp
 80a7ee4:	f001 f906 	bl	80a90f4 <__aeabi_dmul>
 80a7ee8:	4602      	mov	r2, r0
 80a7eea:	460b      	mov	r3, r1
 80a7eec:	4640      	mov	r0, r8
 80a7eee:	4649      	mov	r1, r9
 80a7ef0:	f000 ff48 	bl	80a8d84 <__aeabi_dsub>
 80a7ef4:	4632      	mov	r2, r6
 80a7ef6:	463b      	mov	r3, r7
 80a7ef8:	f001 f8fc 	bl	80a90f4 <__aeabi_dmul>
 80a7efc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a7f00:	f000 ff40 	bl	80a8d84 <__aeabi_dsub>
 80a7f04:	a328      	add	r3, pc, #160	; (adr r3, 80a7fa8 <__kernel_sin+0x178>)
 80a7f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7f0a:	4606      	mov	r6, r0
 80a7f0c:	460f      	mov	r7, r1
 80a7f0e:	4650      	mov	r0, sl
 80a7f10:	4659      	mov	r1, fp
 80a7f12:	f001 f8ef 	bl	80a90f4 <__aeabi_dmul>
 80a7f16:	4602      	mov	r2, r0
 80a7f18:	460b      	mov	r3, r1
 80a7f1a:	4630      	mov	r0, r6
 80a7f1c:	4639      	mov	r1, r7
 80a7f1e:	f000 ff33 	bl	80a8d88 <__adddf3>
 80a7f22:	4602      	mov	r2, r0
 80a7f24:	460b      	mov	r3, r1
 80a7f26:	4620      	mov	r0, r4
 80a7f28:	9901      	ldr	r1, [sp, #4]
 80a7f2a:	f000 ff2b 	bl	80a8d84 <__aeabi_dsub>
 80a7f2e:	4604      	mov	r4, r0
 80a7f30:	460d      	mov	r5, r1
 80a7f32:	4620      	mov	r0, r4
 80a7f34:	4629      	mov	r1, r5
 80a7f36:	b005      	add	sp, #20
 80a7f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7f3c:	4602      	mov	r2, r0
 80a7f3e:	460b      	mov	r3, r1
 80a7f40:	4630      	mov	r0, r6
 80a7f42:	4639      	mov	r1, r7
 80a7f44:	f001 f8d6 	bl	80a90f4 <__aeabi_dmul>
 80a7f48:	a317      	add	r3, pc, #92	; (adr r3, 80a7fa8 <__kernel_sin+0x178>)
 80a7f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7f4e:	f000 ff19 	bl	80a8d84 <__aeabi_dsub>
 80a7f52:	4652      	mov	r2, sl
 80a7f54:	465b      	mov	r3, fp
 80a7f56:	f001 f8cd 	bl	80a90f4 <__aeabi_dmul>
 80a7f5a:	4622      	mov	r2, r4
 80a7f5c:	9b01      	ldr	r3, [sp, #4]
 80a7f5e:	f000 ff13 	bl	80a8d88 <__adddf3>
 80a7f62:	4604      	mov	r4, r0
 80a7f64:	460d      	mov	r5, r1
 80a7f66:	4620      	mov	r0, r4
 80a7f68:	4629      	mov	r1, r5
 80a7f6a:	b005      	add	sp, #20
 80a7f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7f70:	9d01      	ldr	r5, [sp, #4]
 80a7f72:	4620      	mov	r0, r4
 80a7f74:	4629      	mov	r1, r5
 80a7f76:	b005      	add	sp, #20
 80a7f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7f7c:	f3af 8000 	nop.w
 80a7f80:	5acfd57c 	.word	0x5acfd57c
 80a7f84:	3de5d93a 	.word	0x3de5d93a
 80a7f88:	8a2b9ceb 	.word	0x8a2b9ceb
 80a7f8c:	3e5ae5e6 	.word	0x3e5ae5e6
 80a7f90:	57b1fe7d 	.word	0x57b1fe7d
 80a7f94:	3ec71de3 	.word	0x3ec71de3
 80a7f98:	19c161d5 	.word	0x19c161d5
 80a7f9c:	3f2a01a0 	.word	0x3f2a01a0
 80a7fa0:	1110f8a6 	.word	0x1110f8a6
 80a7fa4:	3f811111 	.word	0x3f811111
 80a7fa8:	55555549 	.word	0x55555549
 80a7fac:	3fc55555 	.word	0x3fc55555
 80a7fb0:	3fe00000 	.word	0x3fe00000

080a7fb4 <__kernel_cosf>:
 80a7fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a7fb8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80a7fbc:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 80a7fc0:	4606      	mov	r6, r0
 80a7fc2:	4688      	mov	r8, r1
 80a7fc4:	da4a      	bge.n	80a805c <__kernel_cosf+0xa8>
 80a7fc6:	f001 fec7 	bl	80a9d58 <__aeabi_f2iz>
 80a7fca:	2800      	cmp	r0, #0
 80a7fcc:	f000 809f 	beq.w	80a810e <__kernel_cosf+0x15a>
 80a7fd0:	4631      	mov	r1, r6
 80a7fd2:	4630      	mov	r0, r6
 80a7fd4:	f001 fce4 	bl	80a99a0 <__aeabi_fmul>
 80a7fd8:	4604      	mov	r4, r0
 80a7fda:	494f      	ldr	r1, [pc, #316]	; (80a8118 <__kernel_cosf+0x164>)
 80a7fdc:	f001 fce0 	bl	80a99a0 <__aeabi_fmul>
 80a7fe0:	494e      	ldr	r1, [pc, #312]	; (80a811c <__kernel_cosf+0x168>)
 80a7fe2:	f001 fbd5 	bl	80a9790 <__addsf3>
 80a7fe6:	4621      	mov	r1, r4
 80a7fe8:	f001 fcda 	bl	80a99a0 <__aeabi_fmul>
 80a7fec:	494c      	ldr	r1, [pc, #304]	; (80a8120 <__kernel_cosf+0x16c>)
 80a7fee:	f001 fbcd 	bl	80a978c <__aeabi_fsub>
 80a7ff2:	4621      	mov	r1, r4
 80a7ff4:	f001 fcd4 	bl	80a99a0 <__aeabi_fmul>
 80a7ff8:	494a      	ldr	r1, [pc, #296]	; (80a8124 <__kernel_cosf+0x170>)
 80a7ffa:	f001 fbc9 	bl	80a9790 <__addsf3>
 80a7ffe:	4621      	mov	r1, r4
 80a8000:	f001 fcce 	bl	80a99a0 <__aeabi_fmul>
 80a8004:	4948      	ldr	r1, [pc, #288]	; (80a8128 <__kernel_cosf+0x174>)
 80a8006:	f001 fbc1 	bl	80a978c <__aeabi_fsub>
 80a800a:	4621      	mov	r1, r4
 80a800c:	f001 fcc8 	bl	80a99a0 <__aeabi_fmul>
 80a8010:	4946      	ldr	r1, [pc, #280]	; (80a812c <__kernel_cosf+0x178>)
 80a8012:	f001 fbbd 	bl	80a9790 <__addsf3>
 80a8016:	4621      	mov	r1, r4
 80a8018:	f001 fcc2 	bl	80a99a0 <__aeabi_fmul>
 80a801c:	4607      	mov	r7, r0
 80a801e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a8022:	4620      	mov	r0, r4
 80a8024:	f001 fcbc 	bl	80a99a0 <__aeabi_fmul>
 80a8028:	4603      	mov	r3, r0
 80a802a:	4639      	mov	r1, r7
 80a802c:	4620      	mov	r0, r4
 80a802e:	461c      	mov	r4, r3
 80a8030:	f001 fcb6 	bl	80a99a0 <__aeabi_fmul>
 80a8034:	4641      	mov	r1, r8
 80a8036:	4605      	mov	r5, r0
 80a8038:	4630      	mov	r0, r6
 80a803a:	f001 fcb1 	bl	80a99a0 <__aeabi_fmul>
 80a803e:	4601      	mov	r1, r0
 80a8040:	4628      	mov	r0, r5
 80a8042:	f001 fba3 	bl	80a978c <__aeabi_fsub>
 80a8046:	4601      	mov	r1, r0
 80a8048:	4620      	mov	r0, r4
 80a804a:	f001 fb9f 	bl	80a978c <__aeabi_fsub>
 80a804e:	4601      	mov	r1, r0
 80a8050:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a8054:	f001 fb9a 	bl	80a978c <__aeabi_fsub>
 80a8058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a805c:	4601      	mov	r1, r0
 80a805e:	f001 fc9f 	bl	80a99a0 <__aeabi_fmul>
 80a8062:	4604      	mov	r4, r0
 80a8064:	492c      	ldr	r1, [pc, #176]	; (80a8118 <__kernel_cosf+0x164>)
 80a8066:	f001 fc9b 	bl	80a99a0 <__aeabi_fmul>
 80a806a:	492c      	ldr	r1, [pc, #176]	; (80a811c <__kernel_cosf+0x168>)
 80a806c:	f001 fb90 	bl	80a9790 <__addsf3>
 80a8070:	4621      	mov	r1, r4
 80a8072:	f001 fc95 	bl	80a99a0 <__aeabi_fmul>
 80a8076:	492a      	ldr	r1, [pc, #168]	; (80a8120 <__kernel_cosf+0x16c>)
 80a8078:	f001 fb88 	bl	80a978c <__aeabi_fsub>
 80a807c:	4621      	mov	r1, r4
 80a807e:	f001 fc8f 	bl	80a99a0 <__aeabi_fmul>
 80a8082:	4928      	ldr	r1, [pc, #160]	; (80a8124 <__kernel_cosf+0x170>)
 80a8084:	f001 fb84 	bl	80a9790 <__addsf3>
 80a8088:	4621      	mov	r1, r4
 80a808a:	f001 fc89 	bl	80a99a0 <__aeabi_fmul>
 80a808e:	4926      	ldr	r1, [pc, #152]	; (80a8128 <__kernel_cosf+0x174>)
 80a8090:	f001 fb7c 	bl	80a978c <__aeabi_fsub>
 80a8094:	4621      	mov	r1, r4
 80a8096:	f001 fc83 	bl	80a99a0 <__aeabi_fmul>
 80a809a:	4924      	ldr	r1, [pc, #144]	; (80a812c <__kernel_cosf+0x178>)
 80a809c:	f001 fb78 	bl	80a9790 <__addsf3>
 80a80a0:	4621      	mov	r1, r4
 80a80a2:	f001 fc7d 	bl	80a99a0 <__aeabi_fmul>
 80a80a6:	4b22      	ldr	r3, [pc, #136]	; (80a8130 <__kernel_cosf+0x17c>)
 80a80a8:	4607      	mov	r7, r0
 80a80aa:	429d      	cmp	r5, r3
 80a80ac:	ddb7      	ble.n	80a801e <__kernel_cosf+0x6a>
 80a80ae:	4b21      	ldr	r3, [pc, #132]	; (80a8134 <__kernel_cosf+0x180>)
 80a80b0:	429d      	cmp	r5, r3
 80a80b2:	dc28      	bgt.n	80a8106 <__kernel_cosf+0x152>
 80a80b4:	f105 457f 	add.w	r5, r5, #4278190080	; 0xff000000
 80a80b8:	4629      	mov	r1, r5
 80a80ba:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a80be:	f001 fb65 	bl	80a978c <__aeabi_fsub>
 80a80c2:	4681      	mov	r9, r0
 80a80c4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a80c8:	4620      	mov	r0, r4
 80a80ca:	f001 fc69 	bl	80a99a0 <__aeabi_fmul>
 80a80ce:	4629      	mov	r1, r5
 80a80d0:	f001 fb5c 	bl	80a978c <__aeabi_fsub>
 80a80d4:	4603      	mov	r3, r0
 80a80d6:	4639      	mov	r1, r7
 80a80d8:	4620      	mov	r0, r4
 80a80da:	461c      	mov	r4, r3
 80a80dc:	f001 fc60 	bl	80a99a0 <__aeabi_fmul>
 80a80e0:	4641      	mov	r1, r8
 80a80e2:	4605      	mov	r5, r0
 80a80e4:	4630      	mov	r0, r6
 80a80e6:	f001 fc5b 	bl	80a99a0 <__aeabi_fmul>
 80a80ea:	4601      	mov	r1, r0
 80a80ec:	4628      	mov	r0, r5
 80a80ee:	f001 fb4d 	bl	80a978c <__aeabi_fsub>
 80a80f2:	4601      	mov	r1, r0
 80a80f4:	4620      	mov	r0, r4
 80a80f6:	f001 fb49 	bl	80a978c <__aeabi_fsub>
 80a80fa:	4601      	mov	r1, r0
 80a80fc:	4648      	mov	r0, r9
 80a80fe:	f001 fb45 	bl	80a978c <__aeabi_fsub>
 80a8102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a8106:	f8df 9034 	ldr.w	r9, [pc, #52]	; 80a813c <__kernel_cosf+0x188>
 80a810a:	4d0b      	ldr	r5, [pc, #44]	; (80a8138 <__kernel_cosf+0x184>)
 80a810c:	e7da      	b.n	80a80c4 <__kernel_cosf+0x110>
 80a810e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a8112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a8116:	bf00      	nop
 80a8118:	ad47d74e 	.word	0xad47d74e
 80a811c:	310f74f6 	.word	0x310f74f6
 80a8120:	3493f27c 	.word	0x3493f27c
 80a8124:	37d00d01 	.word	0x37d00d01
 80a8128:	3ab60b61 	.word	0x3ab60b61
 80a812c:	3d2aaaab 	.word	0x3d2aaaab
 80a8130:	3e999999 	.word	0x3e999999
 80a8134:	3f480000 	.word	0x3f480000
 80a8138:	3e900000 	.word	0x3e900000
 80a813c:	3f380000 	.word	0x3f380000

080a8140 <__kernel_rem_pio2f>:
 80a8140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8144:	461c      	mov	r4, r3
 80a8146:	b0dd      	sub	sp, #372	; 0x174
 80a8148:	9109      	str	r1, [sp, #36]	; 0x24
 80a814a:	1e61      	subs	r1, r4, #1
 80a814c:	9306      	str	r3, [sp, #24]
 80a814e:	9101      	str	r1, [sp, #4]
 80a8150:	4bbe      	ldr	r3, [pc, #760]	; (80a844c <__kernel_rem_pio2f+0x30c>)
 80a8152:	9966      	ldr	r1, [sp, #408]	; 0x198
 80a8154:	4605      	mov	r5, r0
 80a8156:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80a815a:	920b      	str	r2, [sp, #44]	; 0x2c
 80a815c:	9103      	str	r1, [sp, #12]
 80a815e:	1d11      	adds	r1, r2, #4
 80a8160:	f2c0 8301 	blt.w	80a8766 <__kernel_rem_pio2f+0x626>
 80a8164:	1ed3      	subs	r3, r2, #3
 80a8166:	bf44      	itt	mi
 80a8168:	4613      	movmi	r3, r2
 80a816a:	3304      	addmi	r3, #4
 80a816c:	10db      	asrs	r3, r3, #3
 80a816e:	9305      	str	r3, [sp, #20]
 80a8170:	3301      	adds	r3, #1
 80a8172:	00db      	lsls	r3, r3, #3
 80a8174:	930a      	str	r3, [sp, #40]	; 0x28
 80a8176:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a817a:	1a9b      	subs	r3, r3, r2
 80a817c:	9304      	str	r3, [sp, #16]
 80a817e:	9a05      	ldr	r2, [sp, #20]
 80a8180:	9b01      	ldr	r3, [sp, #4]
 80a8182:	1ad6      	subs	r6, r2, r3
 80a8184:	9a03      	ldr	r2, [sp, #12]
 80a8186:	eb12 0803 	adds.w	r8, r2, r3
 80a818a:	d418      	bmi.n	80a81be <__kernel_rem_pio2f+0x7e>
 80a818c:	f108 0801 	add.w	r8, r8, #1
 80a8190:	2400      	movs	r4, #0
 80a8192:	f8dd 919c 	ldr.w	r9, [sp, #412]	; 0x19c
 80a8196:	44b0      	add	r8, r6
 80a8198:	af20      	add	r7, sp, #128	; 0x80
 80a819a:	e008      	b.n	80a81ae <__kernel_rem_pio2f+0x6e>
 80a819c:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 80a81a0:	f001 fbaa 	bl	80a98f8 <__aeabi_i2f>
 80a81a4:	3601      	adds	r6, #1
 80a81a6:	4546      	cmp	r6, r8
 80a81a8:	f847 0b04 	str.w	r0, [r7], #4
 80a81ac:	d007      	beq.n	80a81be <__kernel_rem_pio2f+0x7e>
 80a81ae:	2e00      	cmp	r6, #0
 80a81b0:	daf4      	bge.n	80a819c <__kernel_rem_pio2f+0x5c>
 80a81b2:	4620      	mov	r0, r4
 80a81b4:	3601      	adds	r6, #1
 80a81b6:	4546      	cmp	r6, r8
 80a81b8:	f847 0b04 	str.w	r0, [r7], #4
 80a81bc:	d1f7      	bne.n	80a81ae <__kernel_rem_pio2f+0x6e>
 80a81be:	9b03      	ldr	r3, [sp, #12]
 80a81c0:	2b00      	cmp	r3, #0
 80a81c2:	f1a5 0304 	sub.w	r3, r5, #4
 80a81c6:	9302      	str	r3, [sp, #8]
 80a81c8:	f2c0 8313 	blt.w	80a87f2 <__kernel_rem_pio2f+0x6b2>
 80a81cc:	4619      	mov	r1, r3
 80a81ce:	9b06      	ldr	r3, [sp, #24]
 80a81d0:	9e01      	ldr	r6, [sp, #4]
 80a81d2:	009a      	lsls	r2, r3, #2
 80a81d4:	9200      	str	r2, [sp, #0]
 80a81d6:	9a03      	ldr	r2, [sp, #12]
 80a81d8:	eb01 0583 	add.w	r5, r1, r3, lsl #2
 80a81dc:	a920      	add	r1, sp, #128	; 0x80
 80a81de:	eb01 0783 	add.w	r7, r1, r3, lsl #2
 80a81e2:	f50d 7890 	add.w	r8, sp, #288	; 0x120
 80a81e6:	eb02 0903 	add.w	r9, r2, r3
 80a81ea:	9b01      	ldr	r3, [sp, #4]
 80a81ec:	2b00      	cmp	r3, #0
 80a81ee:	bfb8      	it	lt
 80a81f0:	2400      	movlt	r4, #0
 80a81f2:	db10      	blt.n	80a8216 <__kernel_rem_pio2f+0xd6>
 80a81f4:	46bb      	mov	fp, r7
 80a81f6:	2400      	movs	r4, #0
 80a81f8:	f8dd a008 	ldr.w	sl, [sp, #8]
 80a81fc:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 80a8200:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80a8204:	f001 fbcc 	bl	80a99a0 <__aeabi_fmul>
 80a8208:	4601      	mov	r1, r0
 80a820a:	4620      	mov	r0, r4
 80a820c:	f001 fac0 	bl	80a9790 <__addsf3>
 80a8210:	45aa      	cmp	sl, r5
 80a8212:	4604      	mov	r4, r0
 80a8214:	d1f2      	bne.n	80a81fc <__kernel_rem_pio2f+0xbc>
 80a8216:	3601      	adds	r6, #1
 80a8218:	454e      	cmp	r6, r9
 80a821a:	f848 4b04 	str.w	r4, [r8], #4
 80a821e:	f107 0704 	add.w	r7, r7, #4
 80a8222:	d1e2      	bne.n	80a81ea <__kernel_rem_pio2f+0xaa>
 80a8224:	9a03      	ldr	r2, [sp, #12]
 80a8226:	a90c      	add	r1, sp, #48	; 0x30
 80a8228:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80a822c:	9802      	ldr	r0, [sp, #8]
 80a822e:	9900      	ldr	r1, [sp, #0]
 80a8230:	4692      	mov	sl, r2
 80a8232:	4401      	add	r1, r0
 80a8234:	460d      	mov	r5, r1
 80a8236:	3b08      	subs	r3, #8
 80a8238:	9307      	str	r3, [sp, #28]
 80a823a:	ab0b      	add	r3, sp, #44	; 0x2c
 80a823c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a8240:	9308      	str	r3, [sp, #32]
 80a8242:	ab5c      	add	r3, sp, #368	; 0x170
 80a8244:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80a8248:	f1ba 0f00 	cmp.w	sl, #0
 80a824c:	f853 9c50 	ldr.w	r9, [r3, #-80]
 80a8250:	ea4f 088a 	mov.w	r8, sl, lsl #2
 80a8254:	dd22      	ble.n	80a829c <__kernel_rem_pio2f+0x15c>
 80a8256:	af48      	add	r7, sp, #288	; 0x120
 80a8258:	ae0c      	add	r6, sp, #48	; 0x30
 80a825a:	eb07 048a 	add.w	r4, r7, sl, lsl #2
 80a825e:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80a8262:	4648      	mov	r0, r9
 80a8264:	f001 fb9c 	bl	80a99a0 <__aeabi_fmul>
 80a8268:	f001 fd76 	bl	80a9d58 <__aeabi_f2iz>
 80a826c:	f001 fb44 	bl	80a98f8 <__aeabi_i2f>
 80a8270:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a8274:	4683      	mov	fp, r0
 80a8276:	f001 fb93 	bl	80a99a0 <__aeabi_fmul>
 80a827a:	4601      	mov	r1, r0
 80a827c:	4648      	mov	r0, r9
 80a827e:	f001 fa85 	bl	80a978c <__aeabi_fsub>
 80a8282:	f001 fd69 	bl	80a9d58 <__aeabi_f2iz>
 80a8286:	4603      	mov	r3, r0
 80a8288:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80a828c:	4658      	mov	r0, fp
 80a828e:	f846 3b04 	str.w	r3, [r6], #4
 80a8292:	f001 fa7d 	bl	80a9790 <__addsf3>
 80a8296:	42bc      	cmp	r4, r7
 80a8298:	4681      	mov	r9, r0
 80a829a:	d1e0      	bne.n	80a825e <__kernel_rem_pio2f+0x11e>
 80a829c:	9e04      	ldr	r6, [sp, #16]
 80a829e:	4648      	mov	r0, r9
 80a82a0:	4631      	mov	r1, r6
 80a82a2:	f000 fd13 	bl	80a8ccc <scalbnf>
 80a82a6:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80a82aa:	4604      	mov	r4, r0
 80a82ac:	f001 fb78 	bl	80a99a0 <__aeabi_fmul>
 80a82b0:	f000 fccc 	bl	80a8c4c <floorf>
 80a82b4:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80a82b8:	f001 fb72 	bl	80a99a0 <__aeabi_fmul>
 80a82bc:	4601      	mov	r1, r0
 80a82be:	4620      	mov	r0, r4
 80a82c0:	f001 fa64 	bl	80a978c <__aeabi_fsub>
 80a82c4:	4604      	mov	r4, r0
 80a82c6:	f001 fd47 	bl	80a9d58 <__aeabi_f2iz>
 80a82ca:	4607      	mov	r7, r0
 80a82cc:	f001 fb14 	bl	80a98f8 <__aeabi_i2f>
 80a82d0:	4601      	mov	r1, r0
 80a82d2:	4620      	mov	r0, r4
 80a82d4:	f001 fa5a 	bl	80a978c <__aeabi_fsub>
 80a82d8:	2e00      	cmp	r6, #0
 80a82da:	4604      	mov	r4, r0
 80a82dc:	f340 808a 	ble.w	80a83f4 <__kernel_rem_pio2f+0x2b4>
 80a82e0:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 80a82e4:	ab0c      	add	r3, sp, #48	; 0x30
 80a82e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80a82ea:	f1c6 0208 	rsb	r2, r6, #8
 80a82ee:	fa43 f102 	asr.w	r1, r3, r2
 80a82f2:	fa01 f202 	lsl.w	r2, r1, r2
 80a82f6:	1a9b      	subs	r3, r3, r2
 80a82f8:	f1c6 0607 	rsb	r6, r6, #7
 80a82fc:	fa43 f606 	asr.w	r6, r3, r6
 80a8300:	aa0c      	add	r2, sp, #48	; 0x30
 80a8302:	2e00      	cmp	r6, #0
 80a8304:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80a8308:	440f      	add	r7, r1
 80a830a:	dc7d      	bgt.n	80a8408 <__kernel_rem_pio2f+0x2c8>
 80a830c:	2100      	movs	r1, #0
 80a830e:	4620      	mov	r0, r4
 80a8310:	f001 fcda 	bl	80a9cc8 <__aeabi_fcmpeq>
 80a8314:	2800      	cmp	r0, #0
 80a8316:	f000 80d4 	beq.w	80a84c2 <__kernel_rem_pio2f+0x382>
 80a831a:	9b03      	ldr	r3, [sp, #12]
 80a831c:	f10a 34ff 	add.w	r4, sl, #4294967295	; 0xffffffff
 80a8320:	42a3      	cmp	r3, r4
 80a8322:	dc10      	bgt.n	80a8346 <__kernel_rem_pio2f+0x206>
 80a8324:	2200      	movs	r2, #0
 80a8326:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 80a832a:	3b01      	subs	r3, #1
 80a832c:	a90c      	add	r1, sp, #48	; 0x30
 80a832e:	9808      	ldr	r0, [sp, #32]
 80a8330:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a8334:	f853 1904 	ldr.w	r1, [r3], #-4
 80a8338:	4283      	cmp	r3, r0
 80a833a:	ea42 0201 	orr.w	r2, r2, r1
 80a833e:	d1f9      	bne.n	80a8334 <__kernel_rem_pio2f+0x1f4>
 80a8340:	2a00      	cmp	r2, #0
 80a8342:	f040 8117 	bne.w	80a8574 <__kernel_rem_pio2f+0x434>
 80a8346:	9b03      	ldr	r3, [sp, #12]
 80a8348:	aa0c      	add	r2, sp, #48	; 0x30
 80a834a:	3b01      	subs	r3, #1
 80a834c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a8350:	2b00      	cmp	r3, #0
 80a8352:	f040 810a 	bne.w	80a856a <__kernel_rem_pio2f+0x42a>
 80a8356:	2701      	movs	r7, #1
 80a8358:	9b07      	ldr	r3, [sp, #28]
 80a835a:	f853 2904 	ldr.w	r2, [r3], #-4
 80a835e:	3701      	adds	r7, #1
 80a8360:	2a00      	cmp	r2, #0
 80a8362:	d0fa      	beq.n	80a835a <__kernel_rem_pio2f+0x21a>
 80a8364:	f10a 0301 	add.w	r3, sl, #1
 80a8368:	4698      	mov	r8, r3
 80a836a:	eb0a 0207 	add.w	r2, sl, r7
 80a836e:	9200      	str	r2, [sp, #0]
 80a8370:	9a05      	ldr	r2, [sp, #20]
 80a8372:	eb03 0902 	add.w	r9, r3, r2
 80a8376:	9a06      	ldr	r2, [sp, #24]
 80a8378:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 80a837c:	eb02 060a 	add.w	r6, r2, sl
 80a8380:	aa20      	add	r2, sp, #128	; 0x80
 80a8382:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a8386:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 80a8388:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80a838c:	eb02 0989 	add.w	r9, r2, r9, lsl #2
 80a8390:	aa48      	add	r2, sp, #288	; 0x120
 80a8392:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 80a8396:	f859 0f04 	ldr.w	r0, [r9, #4]!
 80a839a:	f001 faad 	bl	80a98f8 <__aeabi_i2f>
 80a839e:	9b01      	ldr	r3, [sp, #4]
 80a83a0:	4634      	mov	r4, r6
 80a83a2:	2b00      	cmp	r3, #0
 80a83a4:	6030      	str	r0, [r6, #0]
 80a83a6:	f106 0604 	add.w	r6, r6, #4
 80a83aa:	db1a      	blt.n	80a83e2 <__kernel_rem_pio2f+0x2a2>
 80a83ac:	2700      	movs	r7, #0
 80a83ae:	f8dd b008 	ldr.w	fp, [sp, #8]
 80a83b2:	3c04      	subs	r4, #4
 80a83b4:	e001      	b.n	80a83ba <__kernel_rem_pio2f+0x27a>
 80a83b6:	f854 0904 	ldr.w	r0, [r4], #-4
 80a83ba:	f85b 1f04 	ldr.w	r1, [fp, #4]!
 80a83be:	f001 faef 	bl	80a99a0 <__aeabi_fmul>
 80a83c2:	4601      	mov	r1, r0
 80a83c4:	4638      	mov	r0, r7
 80a83c6:	f001 f9e3 	bl	80a9790 <__addsf3>
 80a83ca:	45ab      	cmp	fp, r5
 80a83cc:	4607      	mov	r7, r0
 80a83ce:	d1f2      	bne.n	80a83b6 <__kernel_rem_pio2f+0x276>
 80a83d0:	9b00      	ldr	r3, [sp, #0]
 80a83d2:	f108 0801 	add.w	r8, r8, #1
 80a83d6:	4598      	cmp	r8, r3
 80a83d8:	f84a 7b04 	str.w	r7, [sl], #4
 80a83dc:	dddb      	ble.n	80a8396 <__kernel_rem_pio2f+0x256>
 80a83de:	469a      	mov	sl, r3
 80a83e0:	e72f      	b.n	80a8242 <__kernel_rem_pio2f+0x102>
 80a83e2:	2700      	movs	r7, #0
 80a83e4:	9b00      	ldr	r3, [sp, #0]
 80a83e6:	f108 0801 	add.w	r8, r8, #1
 80a83ea:	4598      	cmp	r8, r3
 80a83ec:	f84a 7b04 	str.w	r7, [sl], #4
 80a83f0:	ddd1      	ble.n	80a8396 <__kernel_rem_pio2f+0x256>
 80a83f2:	e7f4      	b.n	80a83de <__kernel_rem_pio2f+0x29e>
 80a83f4:	f040 80a1 	bne.w	80a853a <__kernel_rem_pio2f+0x3fa>
 80a83f8:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80a83fc:	aa0c      	add	r2, sp, #48	; 0x30
 80a83fe:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80a8402:	1236      	asrs	r6, r6, #8
 80a8404:	2e00      	cmp	r6, #0
 80a8406:	dd81      	ble.n	80a830c <__kernel_rem_pio2f+0x1cc>
 80a8408:	f1ba 0f00 	cmp.w	sl, #0
 80a840c:	f107 0701 	add.w	r7, r7, #1
 80a8410:	f340 81ae 	ble.w	80a8770 <__kernel_rem_pio2f+0x630>
 80a8414:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a8416:	2a00      	cmp	r2, #0
 80a8418:	f040 8087 	bne.w	80a852a <__kernel_rem_pio2f+0x3ea>
 80a841c:	f1ba 0f01 	cmp.w	sl, #1
 80a8420:	d01e      	beq.n	80a8460 <__kernel_rem_pio2f+0x320>
 80a8422:	2101      	movs	r1, #1
 80a8424:	ab0c      	add	r3, sp, #48	; 0x30
 80a8426:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80a842a:	2a00      	cmp	r2, #0
 80a842c:	f000 8080 	beq.w	80a8530 <__kernel_rem_pio2f+0x3f0>
 80a8430:	1c4b      	adds	r3, r1, #1
 80a8432:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80a8436:	a80c      	add	r0, sp, #48	; 0x30
 80a8438:	459a      	cmp	sl, r3
 80a843a:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 80a843e:	dd0e      	ble.n	80a845e <__kernel_rem_pio2f+0x31e>
 80a8440:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80a8444:	4480      	add	r8, r0
 80a8446:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80a844a:	e002      	b.n	80a8452 <__kernel_rem_pio2f+0x312>
 80a844c:	080aa97c 	.word	0x080aa97c
 80a8450:	681a      	ldr	r2, [r3, #0]
 80a8452:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80a8456:	f843 2b04 	str.w	r2, [r3], #4
 80a845a:	4543      	cmp	r3, r8
 80a845c:	d1f8      	bne.n	80a8450 <__kernel_rem_pio2f+0x310>
 80a845e:	2201      	movs	r2, #1
 80a8460:	9b04      	ldr	r3, [sp, #16]
 80a8462:	2b00      	cmp	r3, #0
 80a8464:	dd0e      	ble.n	80a8484 <__kernel_rem_pio2f+0x344>
 80a8466:	2b01      	cmp	r3, #1
 80a8468:	f000 8172 	beq.w	80a8750 <__kernel_rem_pio2f+0x610>
 80a846c:	2b02      	cmp	r3, #2
 80a846e:	d109      	bne.n	80a8484 <__kernel_rem_pio2f+0x344>
 80a8470:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 80a8474:	ab0c      	add	r3, sp, #48	; 0x30
 80a8476:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80a847a:	a80c      	add	r0, sp, #48	; 0x30
 80a847c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80a8480:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 80a8484:	2e02      	cmp	r6, #2
 80a8486:	f47f af41 	bne.w	80a830c <__kernel_rem_pio2f+0x1cc>
 80a848a:	4621      	mov	r1, r4
 80a848c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a8490:	9200      	str	r2, [sp, #0]
 80a8492:	f001 f97b 	bl	80a978c <__aeabi_fsub>
 80a8496:	9a00      	ldr	r2, [sp, #0]
 80a8498:	4604      	mov	r4, r0
 80a849a:	2a00      	cmp	r2, #0
 80a849c:	f43f af36 	beq.w	80a830c <__kernel_rem_pio2f+0x1cc>
 80a84a0:	9904      	ldr	r1, [sp, #16]
 80a84a2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a84a6:	f000 fc11 	bl	80a8ccc <scalbnf>
 80a84aa:	4601      	mov	r1, r0
 80a84ac:	4620      	mov	r0, r4
 80a84ae:	f001 f96d 	bl	80a978c <__aeabi_fsub>
 80a84b2:	4604      	mov	r4, r0
 80a84b4:	2100      	movs	r1, #0
 80a84b6:	4620      	mov	r0, r4
 80a84b8:	f001 fc06 	bl	80a9cc8 <__aeabi_fcmpeq>
 80a84bc:	2800      	cmp	r0, #0
 80a84be:	f47f af2c 	bne.w	80a831a <__kernel_rem_pio2f+0x1da>
 80a84c2:	4620      	mov	r0, r4
 80a84c4:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 80a84c8:	1a99      	subs	r1, r3, r2
 80a84ca:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80a84ce:	f000 fbfd 	bl	80a8ccc <scalbnf>
 80a84d2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a84d6:	4604      	mov	r4, r0
 80a84d8:	f001 fc14 	bl	80a9d04 <__aeabi_fcmpge>
 80a84dc:	2800      	cmp	r0, #0
 80a84de:	f000 8172 	beq.w	80a87c6 <__kernel_rem_pio2f+0x686>
 80a84e2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80a84e6:	4620      	mov	r0, r4
 80a84e8:	f001 fa5a 	bl	80a99a0 <__aeabi_fmul>
 80a84ec:	f001 fc34 	bl	80a9d58 <__aeabi_f2iz>
 80a84f0:	f001 fa02 	bl	80a98f8 <__aeabi_i2f>
 80a84f4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a84f8:	4605      	mov	r5, r0
 80a84fa:	f001 fa51 	bl	80a99a0 <__aeabi_fmul>
 80a84fe:	4601      	mov	r1, r0
 80a8500:	4620      	mov	r0, r4
 80a8502:	f001 f943 	bl	80a978c <__aeabi_fsub>
 80a8506:	f001 fc27 	bl	80a9d58 <__aeabi_f2iz>
 80a850a:	4603      	mov	r3, r0
 80a850c:	aa0c      	add	r2, sp, #48	; 0x30
 80a850e:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80a8512:	4628      	mov	r0, r5
 80a8514:	f001 fc20 	bl	80a9d58 <__aeabi_f2iz>
 80a8518:	9b04      	ldr	r3, [sp, #16]
 80a851a:	f10a 0401 	add.w	r4, sl, #1
 80a851e:	3308      	adds	r3, #8
 80a8520:	9304      	str	r3, [sp, #16]
 80a8522:	ab0c      	add	r3, sp, #48	; 0x30
 80a8524:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80a8528:	e03a      	b.n	80a85a0 <__kernel_rem_pio2f+0x460>
 80a852a:	2301      	movs	r3, #1
 80a852c:	2100      	movs	r1, #0
 80a852e:	e780      	b.n	80a8432 <__kernel_rem_pio2f+0x2f2>
 80a8530:	3101      	adds	r1, #1
 80a8532:	4551      	cmp	r1, sl
 80a8534:	f47f af77 	bne.w	80a8426 <__kernel_rem_pio2f+0x2e6>
 80a8538:	e792      	b.n	80a8460 <__kernel_rem_pio2f+0x320>
 80a853a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a853e:	f001 fbe1 	bl	80a9d04 <__aeabi_fcmpge>
 80a8542:	4606      	mov	r6, r0
 80a8544:	2800      	cmp	r0, #0
 80a8546:	f43f aee1 	beq.w	80a830c <__kernel_rem_pio2f+0x1cc>
 80a854a:	f1ba 0f00 	cmp.w	sl, #0
 80a854e:	bfc8      	it	gt
 80a8550:	2602      	movgt	r6, #2
 80a8552:	f107 0701 	add.w	r7, r7, #1
 80a8556:	f73f af5d 	bgt.w	80a8414 <__kernel_rem_pio2f+0x2d4>
 80a855a:	4621      	mov	r1, r4
 80a855c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a8560:	f001 f914 	bl	80a978c <__aeabi_fsub>
 80a8564:	2602      	movs	r6, #2
 80a8566:	4604      	mov	r4, r0
 80a8568:	e6d0      	b.n	80a830c <__kernel_rem_pio2f+0x1cc>
 80a856a:	f10a 0301 	add.w	r3, sl, #1
 80a856e:	4698      	mov	r8, r3
 80a8570:	9300      	str	r3, [sp, #0]
 80a8572:	e6fd      	b.n	80a8370 <__kernel_rem_pio2f+0x230>
 80a8574:	9a04      	ldr	r2, [sp, #16]
 80a8576:	ab0c      	add	r3, sp, #48	; 0x30
 80a8578:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80a857c:	3a08      	subs	r2, #8
 80a857e:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80a8582:	9204      	str	r2, [sp, #16]
 80a8584:	b963      	cbnz	r3, 80a85a0 <__kernel_rem_pio2f+0x460>
 80a8586:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 80a858a:	3b02      	subs	r3, #2
 80a858c:	a90c      	add	r1, sp, #48	; 0x30
 80a858e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a8592:	f853 1904 	ldr.w	r1, [r3], #-4
 80a8596:	3c01      	subs	r4, #1
 80a8598:	3a08      	subs	r2, #8
 80a859a:	2900      	cmp	r1, #0
 80a859c:	d0f9      	beq.n	80a8592 <__kernel_rem_pio2f+0x452>
 80a859e:	9204      	str	r2, [sp, #16]
 80a85a0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a85a4:	9904      	ldr	r1, [sp, #16]
 80a85a6:	f000 fb91 	bl	80a8ccc <scalbnf>
 80a85aa:	2c00      	cmp	r4, #0
 80a85ac:	4607      	mov	r7, r0
 80a85ae:	f2c0 8124 	blt.w	80a87fa <__kernel_rem_pio2f+0x6ba>
 80a85b2:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 80a85b6:	00a3      	lsls	r3, r4, #2
 80a85b8:	a948      	add	r1, sp, #288	; 0x120
 80a85ba:	1d1a      	adds	r2, r3, #4
 80a85bc:	eb01 0803 	add.w	r8, r1, r3
 80a85c0:	9304      	str	r3, [sp, #16]
 80a85c2:	ab0c      	add	r3, sp, #48	; 0x30
 80a85c4:	9205      	str	r2, [sp, #20]
 80a85c6:	eb03 0902 	add.w	r9, r3, r2
 80a85ca:	f108 0504 	add.w	r5, r8, #4
 80a85ce:	f859 0d04 	ldr.w	r0, [r9, #-4]!
 80a85d2:	f001 f991 	bl	80a98f8 <__aeabi_i2f>
 80a85d6:	4639      	mov	r1, r7
 80a85d8:	f001 f9e2 	bl	80a99a0 <__aeabi_fmul>
 80a85dc:	4603      	mov	r3, r0
 80a85de:	4631      	mov	r1, r6
 80a85e0:	4638      	mov	r0, r7
 80a85e2:	f845 3d04 	str.w	r3, [r5, #-4]!
 80a85e6:	f001 f9db 	bl	80a99a0 <__aeabi_fmul>
 80a85ea:	ab0c      	add	r3, sp, #48	; 0x30
 80a85ec:	4599      	cmp	r9, r3
 80a85ee:	4607      	mov	r7, r0
 80a85f0:	d1ed      	bne.n	80a85ce <__kernel_rem_pio2f+0x48e>
 80a85f2:	2700      	movs	r7, #0
 80a85f4:	f04f 0900 	mov.w	r9, #0
 80a85f8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80a85fc:	f1a8 0804 	sub.w	r8, r8, #4
 80a8600:	9400      	str	r4, [sp, #0]
 80a8602:	f1ba 0f00 	cmp.w	sl, #0
 80a8606:	bfb8      	it	lt
 80a8608:	464d      	movlt	r5, r9
 80a860a:	db15      	blt.n	80a8638 <__kernel_rem_pio2f+0x4f8>
 80a860c:	46c3      	mov	fp, r8
 80a860e:	464d      	mov	r5, r9
 80a8610:	2600      	movs	r6, #0
 80a8612:	4c82      	ldr	r4, [pc, #520]	; (80a881c <__kernel_rem_pio2f+0x6dc>)
 80a8614:	4882      	ldr	r0, [pc, #520]	; (80a8820 <__kernel_rem_pio2f+0x6e0>)
 80a8616:	e003      	b.n	80a8620 <__kernel_rem_pio2f+0x4e0>
 80a8618:	42b7      	cmp	r7, r6
 80a861a:	db0d      	blt.n	80a8638 <__kernel_rem_pio2f+0x4f8>
 80a861c:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80a8620:	f85b 1f04 	ldr.w	r1, [fp, #4]!
 80a8624:	f001 f9bc 	bl	80a99a0 <__aeabi_fmul>
 80a8628:	4601      	mov	r1, r0
 80a862a:	4628      	mov	r0, r5
 80a862c:	f001 f8b0 	bl	80a9790 <__addsf3>
 80a8630:	3601      	adds	r6, #1
 80a8632:	45b2      	cmp	sl, r6
 80a8634:	4605      	mov	r5, r0
 80a8636:	daef      	bge.n	80a8618 <__kernel_rem_pio2f+0x4d8>
 80a8638:	9a00      	ldr	r2, [sp, #0]
 80a863a:	ab5c      	add	r3, sp, #368	; 0x170
 80a863c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80a8640:	42ba      	cmp	r2, r7
 80a8642:	f843 5ca0 	str.w	r5, [r3, #-160]
 80a8646:	f1a8 0804 	sub.w	r8, r8, #4
 80a864a:	f107 0301 	add.w	r3, r7, #1
 80a864e:	d001      	beq.n	80a8654 <__kernel_rem_pio2f+0x514>
 80a8650:	461f      	mov	r7, r3
 80a8652:	e7d6      	b.n	80a8602 <__kernel_rem_pio2f+0x4c2>
 80a8654:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80a8656:	9c00      	ldr	r4, [sp, #0]
 80a8658:	2a02      	cmp	r2, #2
 80a865a:	dc1a      	bgt.n	80a8692 <__kernel_rem_pio2f+0x552>
 80a865c:	2a00      	cmp	r2, #0
 80a865e:	f300 8089 	bgt.w	80a8774 <__kernel_rem_pio2f+0x634>
 80a8662:	d110      	bne.n	80a8686 <__kernel_rem_pio2f+0x546>
 80a8664:	9b05      	ldr	r3, [sp, #20]
 80a8666:	ad34      	add	r5, sp, #208	; 0xd0
 80a8668:	442b      	add	r3, r5
 80a866a:	2000      	movs	r0, #0
 80a866c:	461c      	mov	r4, r3
 80a866e:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80a8672:	f001 f88d 	bl	80a9790 <__addsf3>
 80a8676:	42a5      	cmp	r5, r4
 80a8678:	d1f9      	bne.n	80a866e <__kernel_rem_pio2f+0x52e>
 80a867a:	9b01      	ldr	r3, [sp, #4]
 80a867c:	b10b      	cbz	r3, 80a8682 <__kernel_rem_pio2f+0x542>
 80a867e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a8682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a8684:	6018      	str	r0, [r3, #0]
 80a8686:	9b02      	ldr	r3, [sp, #8]
 80a8688:	f003 0007 	and.w	r0, r3, #7
 80a868c:	b05d      	add	sp, #372	; 0x174
 80a868e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8692:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80a8694:	2b03      	cmp	r3, #3
 80a8696:	d1f6      	bne.n	80a8686 <__kernel_rem_pio2f+0x546>
 80a8698:	2c00      	cmp	r4, #0
 80a869a:	f000 80bb 	beq.w	80a8814 <__kernel_rem_pio2f+0x6d4>
 80a869e:	9a04      	ldr	r2, [sp, #16]
 80a86a0:	ab5c      	add	r3, sp, #368	; 0x170
 80a86a2:	4413      	add	r3, r2
 80a86a4:	ad34      	add	r5, sp, #208	; 0xd0
 80a86a6:	f853 7ca0 	ldr.w	r7, [r3, #-160]
 80a86aa:	18ae      	adds	r6, r5, r2
 80a86ac:	f856 8c04 	ldr.w	r8, [r6, #-4]
 80a86b0:	4638      	mov	r0, r7
 80a86b2:	4641      	mov	r1, r8
 80a86b4:	f001 f86c 	bl	80a9790 <__addsf3>
 80a86b8:	46b9      	mov	r9, r7
 80a86ba:	4607      	mov	r7, r0
 80a86bc:	4640      	mov	r0, r8
 80a86be:	4639      	mov	r1, r7
 80a86c0:	f001 f864 	bl	80a978c <__aeabi_fsub>
 80a86c4:	4649      	mov	r1, r9
 80a86c6:	f001 f863 	bl	80a9790 <__addsf3>
 80a86ca:	6030      	str	r0, [r6, #0]
 80a86cc:	f846 7d04 	str.w	r7, [r6, #-4]!
 80a86d0:	42b5      	cmp	r5, r6
 80a86d2:	d1eb      	bne.n	80a86ac <__kernel_rem_pio2f+0x56c>
 80a86d4:	2c01      	cmp	r4, #1
 80a86d6:	f340 809d 	ble.w	80a8814 <__kernel_rem_pio2f+0x6d4>
 80a86da:	9b04      	ldr	r3, [sp, #16]
 80a86dc:	aa5c      	add	r2, sp, #368	; 0x170
 80a86de:	18ee      	adds	r6, r5, r3
 80a86e0:	4637      	mov	r7, r6
 80a86e2:	18d3      	adds	r3, r2, r3
 80a86e4:	f853 4ca0 	ldr.w	r4, [r3, #-160]
 80a86e8:	f10d 08d4 	add.w	r8, sp, #212	; 0xd4
 80a86ec:	f857 9c04 	ldr.w	r9, [r7, #-4]
 80a86f0:	4620      	mov	r0, r4
 80a86f2:	4649      	mov	r1, r9
 80a86f4:	f001 f84c 	bl	80a9790 <__addsf3>
 80a86f8:	46a2      	mov	sl, r4
 80a86fa:	4604      	mov	r4, r0
 80a86fc:	4648      	mov	r0, r9
 80a86fe:	4621      	mov	r1, r4
 80a8700:	f001 f844 	bl	80a978c <__aeabi_fsub>
 80a8704:	4651      	mov	r1, sl
 80a8706:	f001 f843 	bl	80a9790 <__addsf3>
 80a870a:	6038      	str	r0, [r7, #0]
 80a870c:	f847 4d04 	str.w	r4, [r7, #-4]!
 80a8710:	45b8      	cmp	r8, r7
 80a8712:	d1eb      	bne.n	80a86ec <__kernel_rem_pio2f+0x5ac>
 80a8714:	2000      	movs	r0, #0
 80a8716:	3604      	adds	r6, #4
 80a8718:	3508      	adds	r5, #8
 80a871a:	f856 1d04 	ldr.w	r1, [r6, #-4]!
 80a871e:	f001 f837 	bl	80a9790 <__addsf3>
 80a8722:	42b5      	cmp	r5, r6
 80a8724:	d1f9      	bne.n	80a871a <__kernel_rem_pio2f+0x5da>
 80a8726:	9b01      	ldr	r3, [sp, #4]
 80a8728:	2b00      	cmp	r3, #0
 80a872a:	d054      	beq.n	80a87d6 <__kernel_rem_pio2f+0x696>
 80a872c:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 80a8730:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a8734:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a8738:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a873c:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a873e:	604b      	str	r3, [r1, #4]
 80a8740:	9b02      	ldr	r3, [sp, #8]
 80a8742:	6088      	str	r0, [r1, #8]
 80a8744:	f003 0007 	and.w	r0, r3, #7
 80a8748:	600a      	str	r2, [r1, #0]
 80a874a:	b05d      	add	sp, #372	; 0x174
 80a874c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8750:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 80a8754:	ab0c      	add	r3, sp, #48	; 0x30
 80a8756:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80a875a:	a80c      	add	r0, sp, #48	; 0x30
 80a875c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80a8760:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 80a8764:	e68e      	b.n	80a8484 <__kernel_rem_pio2f+0x344>
 80a8766:	2308      	movs	r3, #8
 80a8768:	930a      	str	r3, [sp, #40]	; 0x28
 80a876a:	2300      	movs	r3, #0
 80a876c:	9305      	str	r3, [sp, #20]
 80a876e:	e502      	b.n	80a8176 <__kernel_rem_pio2f+0x36>
 80a8770:	2200      	movs	r2, #0
 80a8772:	e675      	b.n	80a8460 <__kernel_rem_pio2f+0x320>
 80a8774:	2000      	movs	r0, #0
 80a8776:	ae34      	add	r6, sp, #208	; 0xd0
 80a8778:	eb06 0583 	add.w	r5, r6, r3, lsl #2
 80a877c:	f855 1d04 	ldr.w	r1, [r5, #-4]!
 80a8780:	f001 f806 	bl	80a9790 <__addsf3>
 80a8784:	42ae      	cmp	r6, r5
 80a8786:	d1f9      	bne.n	80a877c <__kernel_rem_pio2f+0x63c>
 80a8788:	9b01      	ldr	r3, [sp, #4]
 80a878a:	bb3b      	cbnz	r3, 80a87dc <__kernel_rem_pio2f+0x69c>
 80a878c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a878e:	4601      	mov	r1, r0
 80a8790:	6018      	str	r0, [r3, #0]
 80a8792:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80a8794:	f000 fffa 	bl	80a978c <__aeabi_fsub>
 80a8798:	2c00      	cmp	r4, #0
 80a879a:	dd0c      	ble.n	80a87b6 <__kernel_rem_pio2f+0x676>
 80a879c:	2501      	movs	r5, #1
 80a879e:	ae34      	add	r6, sp, #208	; 0xd0
 80a87a0:	f856 1f04 	ldr.w	r1, [r6, #4]!
 80a87a4:	3501      	adds	r5, #1
 80a87a6:	f000 fff3 	bl	80a9790 <__addsf3>
 80a87aa:	42ac      	cmp	r4, r5
 80a87ac:	daf8      	bge.n	80a87a0 <__kernel_rem_pio2f+0x660>
 80a87ae:	9b01      	ldr	r3, [sp, #4]
 80a87b0:	b10b      	cbz	r3, 80a87b6 <__kernel_rem_pio2f+0x676>
 80a87b2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a87b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a87b8:	6058      	str	r0, [r3, #4]
 80a87ba:	9b02      	ldr	r3, [sp, #8]
 80a87bc:	f003 0007 	and.w	r0, r3, #7
 80a87c0:	b05d      	add	sp, #372	; 0x174
 80a87c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a87c6:	4620      	mov	r0, r4
 80a87c8:	f001 fac6 	bl	80a9d58 <__aeabi_f2iz>
 80a87cc:	ab0c      	add	r3, sp, #48	; 0x30
 80a87ce:	4654      	mov	r4, sl
 80a87d0:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 80a87d4:	e6e4      	b.n	80a85a0 <__kernel_rem_pio2f+0x460>
 80a87d6:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80a87d8:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80a87da:	e7af      	b.n	80a873c <__kernel_rem_pio2f+0x5fc>
 80a87dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a87de:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80a87e2:	4601      	mov	r1, r0
 80a87e4:	6013      	str	r3, [r2, #0]
 80a87e6:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80a87e8:	f000 ffd0 	bl	80a978c <__aeabi_fsub>
 80a87ec:	2c00      	cmp	r4, #0
 80a87ee:	dcd5      	bgt.n	80a879c <__kernel_rem_pio2f+0x65c>
 80a87f0:	e7df      	b.n	80a87b2 <__kernel_rem_pio2f+0x672>
 80a87f2:	9b06      	ldr	r3, [sp, #24]
 80a87f4:	009b      	lsls	r3, r3, #2
 80a87f6:	9300      	str	r3, [sp, #0]
 80a87f8:	e514      	b.n	80a8224 <__kernel_rem_pio2f+0xe4>
 80a87fa:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80a87fc:	2b02      	cmp	r3, #2
 80a87fe:	dc05      	bgt.n	80a880c <__kernel_rem_pio2f+0x6cc>
 80a8800:	2b00      	cmp	r3, #0
 80a8802:	dc09      	bgt.n	80a8818 <__kernel_rem_pio2f+0x6d8>
 80a8804:	f47f af3f 	bne.w	80a8686 <__kernel_rem_pio2f+0x546>
 80a8808:	2000      	movs	r0, #0
 80a880a:	e736      	b.n	80a867a <__kernel_rem_pio2f+0x53a>
 80a880c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80a880e:	2b03      	cmp	r3, #3
 80a8810:	f47f af39 	bne.w	80a8686 <__kernel_rem_pio2f+0x546>
 80a8814:	2000      	movs	r0, #0
 80a8816:	e786      	b.n	80a8726 <__kernel_rem_pio2f+0x5e6>
 80a8818:	2000      	movs	r0, #0
 80a881a:	e7b5      	b.n	80a8788 <__kernel_rem_pio2f+0x648>
 80a881c:	080aa950 	.word	0x080aa950
 80a8820:	3fc90000 	.word	0x3fc90000

080a8824 <__kernel_sinf>:
 80a8824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a8828:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80a882c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80a8830:	4604      	mov	r4, r0
 80a8832:	460e      	mov	r6, r1
 80a8834:	4690      	mov	r8, r2
 80a8836:	da03      	bge.n	80a8840 <__kernel_sinf+0x1c>
 80a8838:	f001 fa8e 	bl	80a9d58 <__aeabi_f2iz>
 80a883c:	2800      	cmp	r0, #0
 80a883e:	d058      	beq.n	80a88f2 <__kernel_sinf+0xce>
 80a8840:	4621      	mov	r1, r4
 80a8842:	4620      	mov	r0, r4
 80a8844:	f001 f8ac 	bl	80a99a0 <__aeabi_fmul>
 80a8848:	4605      	mov	r5, r0
 80a884a:	4620      	mov	r0, r4
 80a884c:	4629      	mov	r1, r5
 80a884e:	f001 f8a7 	bl	80a99a0 <__aeabi_fmul>
 80a8852:	4929      	ldr	r1, [pc, #164]	; (80a88f8 <__kernel_sinf+0xd4>)
 80a8854:	4681      	mov	r9, r0
 80a8856:	4628      	mov	r0, r5
 80a8858:	f001 f8a2 	bl	80a99a0 <__aeabi_fmul>
 80a885c:	4927      	ldr	r1, [pc, #156]	; (80a88fc <__kernel_sinf+0xd8>)
 80a885e:	f000 ff95 	bl	80a978c <__aeabi_fsub>
 80a8862:	4629      	mov	r1, r5
 80a8864:	f001 f89c 	bl	80a99a0 <__aeabi_fmul>
 80a8868:	4925      	ldr	r1, [pc, #148]	; (80a8900 <__kernel_sinf+0xdc>)
 80a886a:	f000 ff91 	bl	80a9790 <__addsf3>
 80a886e:	4629      	mov	r1, r5
 80a8870:	f001 f896 	bl	80a99a0 <__aeabi_fmul>
 80a8874:	4923      	ldr	r1, [pc, #140]	; (80a8904 <__kernel_sinf+0xe0>)
 80a8876:	f000 ff89 	bl	80a978c <__aeabi_fsub>
 80a887a:	4629      	mov	r1, r5
 80a887c:	f001 f890 	bl	80a99a0 <__aeabi_fmul>
 80a8880:	4921      	ldr	r1, [pc, #132]	; (80a8908 <__kernel_sinf+0xe4>)
 80a8882:	f000 ff85 	bl	80a9790 <__addsf3>
 80a8886:	4607      	mov	r7, r0
 80a8888:	f1b8 0f00 	cmp.w	r8, #0
 80a888c:	d022      	beq.n	80a88d4 <__kernel_sinf+0xb0>
 80a888e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a8892:	4630      	mov	r0, r6
 80a8894:	f001 f884 	bl	80a99a0 <__aeabi_fmul>
 80a8898:	4639      	mov	r1, r7
 80a889a:	4607      	mov	r7, r0
 80a889c:	4648      	mov	r0, r9
 80a889e:	f001 f87f 	bl	80a99a0 <__aeabi_fmul>
 80a88a2:	4601      	mov	r1, r0
 80a88a4:	4638      	mov	r0, r7
 80a88a6:	f000 ff71 	bl	80a978c <__aeabi_fsub>
 80a88aa:	4629      	mov	r1, r5
 80a88ac:	f001 f878 	bl	80a99a0 <__aeabi_fmul>
 80a88b0:	4631      	mov	r1, r6
 80a88b2:	f000 ff6b 	bl	80a978c <__aeabi_fsub>
 80a88b6:	4915      	ldr	r1, [pc, #84]	; (80a890c <__kernel_sinf+0xe8>)
 80a88b8:	4605      	mov	r5, r0
 80a88ba:	4648      	mov	r0, r9
 80a88bc:	f001 f870 	bl	80a99a0 <__aeabi_fmul>
 80a88c0:	4601      	mov	r1, r0
 80a88c2:	4628      	mov	r0, r5
 80a88c4:	f000 ff64 	bl	80a9790 <__addsf3>
 80a88c8:	4601      	mov	r1, r0
 80a88ca:	4620      	mov	r0, r4
 80a88cc:	f000 ff5e 	bl	80a978c <__aeabi_fsub>
 80a88d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a88d4:	4601      	mov	r1, r0
 80a88d6:	4628      	mov	r0, r5
 80a88d8:	f001 f862 	bl	80a99a0 <__aeabi_fmul>
 80a88dc:	490b      	ldr	r1, [pc, #44]	; (80a890c <__kernel_sinf+0xe8>)
 80a88de:	f000 ff55 	bl	80a978c <__aeabi_fsub>
 80a88e2:	4649      	mov	r1, r9
 80a88e4:	f001 f85c 	bl	80a99a0 <__aeabi_fmul>
 80a88e8:	4621      	mov	r1, r4
 80a88ea:	f000 ff51 	bl	80a9790 <__addsf3>
 80a88ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a88f2:	4620      	mov	r0, r4
 80a88f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a88f8:	2f2ec9d3 	.word	0x2f2ec9d3
 80a88fc:	32d72f34 	.word	0x32d72f34
 80a8900:	3638ef1b 	.word	0x3638ef1b
 80a8904:	39500d01 	.word	0x39500d01
 80a8908:	3c088889 	.word	0x3c088889
 80a890c:	3e2aaaab 	.word	0x3e2aaaab

080a8910 <fabs>:
 80a8910:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a8914:	4770      	bx	lr
 80a8916:	bf00      	nop

080a8918 <finite>:
 80a8918:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80a891c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80a8920:	0fc0      	lsrs	r0, r0, #31
 80a8922:	4770      	bx	lr
 80a8924:	0000      	movs	r0, r0
	...

080a8928 <floor>:
 80a8928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a892a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80a892e:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
 80a8932:	2d13      	cmp	r5, #19
 80a8934:	460b      	mov	r3, r1
 80a8936:	460c      	mov	r4, r1
 80a8938:	4602      	mov	r2, r0
 80a893a:	4606      	mov	r6, r0
 80a893c:	dc20      	bgt.n	80a8980 <floor+0x58>
 80a893e:	2d00      	cmp	r5, #0
 80a8940:	db40      	blt.n	80a89c4 <floor+0x9c>
 80a8942:	4f35      	ldr	r7, [pc, #212]	; (80a8a18 <floor+0xf0>)
 80a8944:	412f      	asrs	r7, r5
 80a8946:	ea01 0c07 	and.w	ip, r1, r7
 80a894a:	ea5c 0c00 	orrs.w	ip, ip, r0
 80a894e:	d014      	beq.n	80a897a <floor+0x52>
 80a8950:	a32f      	add	r3, pc, #188	; (adr r3, 80a8a10 <floor+0xe8>)
 80a8952:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8956:	f000 fa17 	bl	80a8d88 <__adddf3>
 80a895a:	2200      	movs	r2, #0
 80a895c:	2300      	movs	r3, #0
 80a895e:	f000 fe59 	bl	80a9614 <__aeabi_dcmpgt>
 80a8962:	b140      	cbz	r0, 80a8976 <floor+0x4e>
 80a8964:	2c00      	cmp	r4, #0
 80a8966:	da03      	bge.n	80a8970 <floor+0x48>
 80a8968:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80a896c:	412b      	asrs	r3, r5
 80a896e:	441c      	add	r4, r3
 80a8970:	2600      	movs	r6, #0
 80a8972:	ea24 0407 	bic.w	r4, r4, r7
 80a8976:	4632      	mov	r2, r6
 80a8978:	4623      	mov	r3, r4
 80a897a:	4610      	mov	r0, r2
 80a897c:	4619      	mov	r1, r3
 80a897e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a8980:	2d33      	cmp	r5, #51	; 0x33
 80a8982:	dd07      	ble.n	80a8994 <floor+0x6c>
 80a8984:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80a8988:	d1f7      	bne.n	80a897a <floor+0x52>
 80a898a:	f000 f9fd 	bl	80a8d88 <__adddf3>
 80a898e:	4602      	mov	r2, r0
 80a8990:	460b      	mov	r3, r1
 80a8992:	e7f2      	b.n	80a897a <floor+0x52>
 80a8994:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a8998:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80a899c:	fa2c f707 	lsr.w	r7, ip, r7
 80a89a0:	4207      	tst	r7, r0
 80a89a2:	d0ea      	beq.n	80a897a <floor+0x52>
 80a89a4:	a31a      	add	r3, pc, #104	; (adr r3, 80a8a10 <floor+0xe8>)
 80a89a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a89aa:	f000 f9ed 	bl	80a8d88 <__adddf3>
 80a89ae:	2200      	movs	r2, #0
 80a89b0:	2300      	movs	r3, #0
 80a89b2:	f000 fe2f 	bl	80a9614 <__aeabi_dcmpgt>
 80a89b6:	2800      	cmp	r0, #0
 80a89b8:	d0dd      	beq.n	80a8976 <floor+0x4e>
 80a89ba:	2c00      	cmp	r4, #0
 80a89bc:	db1b      	blt.n	80a89f6 <floor+0xce>
 80a89be:	ea26 0607 	bic.w	r6, r6, r7
 80a89c2:	e7d8      	b.n	80a8976 <floor+0x4e>
 80a89c4:	a312      	add	r3, pc, #72	; (adr r3, 80a8a10 <floor+0xe8>)
 80a89c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a89ca:	f000 f9dd 	bl	80a8d88 <__adddf3>
 80a89ce:	2200      	movs	r2, #0
 80a89d0:	2300      	movs	r3, #0
 80a89d2:	f000 fe1f 	bl	80a9614 <__aeabi_dcmpgt>
 80a89d6:	2800      	cmp	r0, #0
 80a89d8:	d0cd      	beq.n	80a8976 <floor+0x4e>
 80a89da:	2c00      	cmp	r4, #0
 80a89dc:	db02      	blt.n	80a89e4 <floor+0xbc>
 80a89de:	2600      	movs	r6, #0
 80a89e0:	4634      	mov	r4, r6
 80a89e2:	e7c8      	b.n	80a8976 <floor+0x4e>
 80a89e4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80a89e8:	4a0c      	ldr	r2, [pc, #48]	; (80a8a1c <floor+0xf4>)
 80a89ea:	431e      	orrs	r6, r3
 80a89ec:	2e00      	cmp	r6, #0
 80a89ee:	bf18      	it	ne
 80a89f0:	4614      	movne	r4, r2
 80a89f2:	2600      	movs	r6, #0
 80a89f4:	e7bf      	b.n	80a8976 <floor+0x4e>
 80a89f6:	2d14      	cmp	r5, #20
 80a89f8:	d008      	beq.n	80a8a0c <floor+0xe4>
 80a89fa:	2201      	movs	r2, #1
 80a89fc:	f1c5 0334 	rsb	r3, r5, #52	; 0x34
 80a8a00:	fa02 f303 	lsl.w	r3, r2, r3
 80a8a04:	199e      	adds	r6, r3, r6
 80a8a06:	bf28      	it	cs
 80a8a08:	18a4      	addcs	r4, r4, r2
 80a8a0a:	e7d8      	b.n	80a89be <floor+0x96>
 80a8a0c:	3401      	adds	r4, #1
 80a8a0e:	e7d6      	b.n	80a89be <floor+0x96>
 80a8a10:	8800759c 	.word	0x8800759c
 80a8a14:	7e37e43c 	.word	0x7e37e43c
 80a8a18:	000fffff 	.word	0x000fffff
 80a8a1c:	bff00000 	.word	0xbff00000

080a8a20 <matherr>:
 80a8a20:	2000      	movs	r0, #0
 80a8a22:	4770      	bx	lr

080a8a24 <nan>:
 80a8a24:	2000      	movs	r0, #0
 80a8a26:	4901      	ldr	r1, [pc, #4]	; (80a8a2c <nan+0x8>)
 80a8a28:	4770      	bx	lr
 80a8a2a:	bf00      	nop
 80a8a2c:	7ff80000 	.word	0x7ff80000

080a8a30 <rint>:
 80a8a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a8a32:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80a8a36:	f2ac 36ff 	subw	r6, ip, #1023	; 0x3ff
 80a8a3a:	2e13      	cmp	r6, #19
 80a8a3c:	4602      	mov	r2, r0
 80a8a3e:	460b      	mov	r3, r1
 80a8a40:	460d      	mov	r5, r1
 80a8a42:	4607      	mov	r7, r0
 80a8a44:	b083      	sub	sp, #12
 80a8a46:	ea4f 74d1 	mov.w	r4, r1, lsr #31
 80a8a4a:	dc2f      	bgt.n	80a8aac <rint+0x7c>
 80a8a4c:	2e00      	cmp	r6, #0
 80a8a4e:	db4c      	blt.n	80a8aea <rint+0xba>
 80a8a50:	493d      	ldr	r1, [pc, #244]	; (80a8b48 <rint+0x118>)
 80a8a52:	4131      	asrs	r1, r6
 80a8a54:	ea03 0001 	and.w	r0, r3, r1
 80a8a58:	4310      	orrs	r0, r2
 80a8a5a:	d02c      	beq.n	80a8ab6 <rint+0x86>
 80a8a5c:	ea03 0351 	and.w	r3, r3, r1, lsr #1
 80a8a60:	ea52 0703 	orrs.w	r7, r2, r3
 80a8a64:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a8a68:	d00b      	beq.n	80a8a82 <rint+0x52>
 80a8a6a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80a8a6e:	2e13      	cmp	r6, #19
 80a8a70:	bf0c      	ite	eq
 80a8a72:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80a8a76:	2700      	movne	r7, #0
 80a8a78:	ea25 0101 	bic.w	r1, r5, r1
 80a8a7c:	fa43 f506 	asr.w	r5, r3, r6
 80a8a80:	430d      	orrs	r5, r1
 80a8a82:	4932      	ldr	r1, [pc, #200]	; (80a8b4c <rint+0x11c>)
 80a8a84:	462b      	mov	r3, r5
 80a8a86:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80a8a8a:	e9d4 4500 	ldrd	r4, r5, [r4]
 80a8a8e:	463a      	mov	r2, r7
 80a8a90:	4620      	mov	r0, r4
 80a8a92:	4629      	mov	r1, r5
 80a8a94:	f000 f978 	bl	80a8d88 <__adddf3>
 80a8a98:	e9cd 0100 	strd	r0, r1, [sp]
 80a8a9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a8aa0:	4622      	mov	r2, r4
 80a8aa2:	462b      	mov	r3, r5
 80a8aa4:	f000 f96e 	bl	80a8d84 <__aeabi_dsub>
 80a8aa8:	b003      	add	sp, #12
 80a8aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a8aac:	2e33      	cmp	r6, #51	; 0x33
 80a8aae:	dd06      	ble.n	80a8abe <rint+0x8e>
 80a8ab0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a8ab4:	d045      	beq.n	80a8b42 <rint+0x112>
 80a8ab6:	4610      	mov	r0, r2
 80a8ab8:	4619      	mov	r1, r3
 80a8aba:	b003      	add	sp, #12
 80a8abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a8abe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80a8ac2:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80a8ac6:	fa21 f10c 	lsr.w	r1, r1, ip
 80a8aca:	4208      	tst	r0, r1
 80a8acc:	d0f3      	beq.n	80a8ab6 <rint+0x86>
 80a8ace:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80a8ad2:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80a8ad6:	d0d4      	beq.n	80a8a82 <rint+0x52>
 80a8ad8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80a8adc:	ea20 0703 	bic.w	r7, r0, r3
 80a8ae0:	fa42 fc0c 	asr.w	ip, r2, ip
 80a8ae4:	ea47 070c 	orr.w	r7, r7, ip
 80a8ae8:	e7cb      	b.n	80a8a82 <rint+0x52>
 80a8aea:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a8aee:	4301      	orrs	r1, r0
 80a8af0:	4619      	mov	r1, r3
 80a8af2:	d0e2      	beq.n	80a8aba <rint+0x8a>
 80a8af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a8af8:	431f      	orrs	r7, r3
 80a8afa:	427b      	negs	r3, r7
 80a8afc:	433b      	orrs	r3, r7
 80a8afe:	0c6d      	lsrs	r5, r5, #17
 80a8b00:	0b1b      	lsrs	r3, r3, #12
 80a8b02:	046d      	lsls	r5, r5, #17
 80a8b04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80a8b08:	ea43 0105 	orr.w	r1, r3, r5
 80a8b0c:	460b      	mov	r3, r1
 80a8b0e:	490f      	ldr	r1, [pc, #60]	; (80a8b4c <rint+0x11c>)
 80a8b10:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80a8b14:	e9d1 6700 	ldrd	r6, r7, [r1]
 80a8b18:	4630      	mov	r0, r6
 80a8b1a:	4639      	mov	r1, r7
 80a8b1c:	f000 f934 	bl	80a8d88 <__adddf3>
 80a8b20:	e9cd 0100 	strd	r0, r1, [sp]
 80a8b24:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a8b28:	4632      	mov	r2, r6
 80a8b2a:	463b      	mov	r3, r7
 80a8b2c:	f000 f92a 	bl	80a8d84 <__aeabi_dsub>
 80a8b30:	4602      	mov	r2, r0
 80a8b32:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a8b36:	ea41 73c4 	orr.w	r3, r1, r4, lsl #31
 80a8b3a:	4610      	mov	r0, r2
 80a8b3c:	4619      	mov	r1, r3
 80a8b3e:	b003      	add	sp, #12
 80a8b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a8b42:	f000 f921 	bl	80a8d88 <__adddf3>
 80a8b46:	e7b8      	b.n	80a8aba <rint+0x8a>
 80a8b48:	000fffff 	.word	0x000fffff
 80a8b4c:	080aa988 	.word	0x080aa988

080a8b50 <scalbn>:
 80a8b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a8b52:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a8b56:	4604      	mov	r4, r0
 80a8b58:	460d      	mov	r5, r1
 80a8b5a:	460e      	mov	r6, r1
 80a8b5c:	4617      	mov	r7, r2
 80a8b5e:	bb73      	cbnz	r3, 80a8bbe <scalbn+0x6e>
 80a8b60:	4603      	mov	r3, r0
 80a8b62:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a8b66:	4333      	orrs	r3, r6
 80a8b68:	d028      	beq.n	80a8bbc <scalbn+0x6c>
 80a8b6a:	4b31      	ldr	r3, [pc, #196]	; (80a8c30 <scalbn+0xe0>)
 80a8b6c:	2200      	movs	r2, #0
 80a8b6e:	f000 fac1 	bl	80a90f4 <__aeabi_dmul>
 80a8b72:	4b30      	ldr	r3, [pc, #192]	; (80a8c34 <scalbn+0xe4>)
 80a8b74:	4604      	mov	r4, r0
 80a8b76:	429f      	cmp	r7, r3
 80a8b78:	460d      	mov	r5, r1
 80a8b7a:	db1a      	blt.n	80a8bb2 <scalbn+0x62>
 80a8b7c:	460e      	mov	r6, r1
 80a8b7e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a8b82:	3b36      	subs	r3, #54	; 0x36
 80a8b84:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a8b88:	443b      	add	r3, r7
 80a8b8a:	4293      	cmp	r3, r2
 80a8b8c:	dc20      	bgt.n	80a8bd0 <scalbn+0x80>
 80a8b8e:	2b00      	cmp	r3, #0
 80a8b90:	dc3c      	bgt.n	80a8c0c <scalbn+0xbc>
 80a8b92:	f113 0f35 	cmn.w	r3, #53	; 0x35
 80a8b96:	da2c      	bge.n	80a8bf2 <scalbn+0xa2>
 80a8b98:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a8b9c:	429f      	cmp	r7, r3
 80a8b9e:	dc17      	bgt.n	80a8bd0 <scalbn+0x80>
 80a8ba0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80a8ba4:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
 80a8ba8:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80a8bac:	4822      	ldr	r0, [pc, #136]	; (80a8c38 <scalbn+0xe8>)
 80a8bae:	f041 011f 	orr.w	r1, r1, #31
 80a8bb2:	a31b      	add	r3, pc, #108	; (adr r3, 80a8c20 <scalbn+0xd0>)
 80a8bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8bb8:	f000 fa9c 	bl	80a90f4 <__aeabi_dmul>
 80a8bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a8bbe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80a8bc2:	4293      	cmp	r3, r2
 80a8bc4:	d1de      	bne.n	80a8b84 <scalbn+0x34>
 80a8bc6:	4602      	mov	r2, r0
 80a8bc8:	460b      	mov	r3, r1
 80a8bca:	f000 f8dd 	bl	80a8d88 <__adddf3>
 80a8bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a8bd0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80a8bd4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80a8bd8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80a8bdc:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80a8be0:	a311      	add	r3, pc, #68	; (adr r3, 80a8c28 <scalbn+0xd8>)
 80a8be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8be6:	4815      	ldr	r0, [pc, #84]	; (80a8c3c <scalbn+0xec>)
 80a8be8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80a8bec:	f000 fa82 	bl	80a90f4 <__aeabi_dmul>
 80a8bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a8bf2:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 80a8bf6:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 80a8bfa:	3336      	adds	r3, #54	; 0x36
 80a8bfc:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
 80a8c00:	4620      	mov	r0, r4
 80a8c02:	2200      	movs	r2, #0
 80a8c04:	4b0e      	ldr	r3, [pc, #56]	; (80a8c40 <scalbn+0xf0>)
 80a8c06:	f000 fa75 	bl	80a90f4 <__aeabi_dmul>
 80a8c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a8c0c:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 80a8c10:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 80a8c14:	4620      	mov	r0, r4
 80a8c16:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
 80a8c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a8c1c:	f3af 8000 	nop.w
 80a8c20:	c2f8f359 	.word	0xc2f8f359
 80a8c24:	01a56e1f 	.word	0x01a56e1f
 80a8c28:	8800759c 	.word	0x8800759c
 80a8c2c:	7e37e43c 	.word	0x7e37e43c
 80a8c30:	43500000 	.word	0x43500000
 80a8c34:	ffff3cb0 	.word	0xffff3cb0
 80a8c38:	c2f8f359 	.word	0xc2f8f359
 80a8c3c:	8800759c 	.word	0x8800759c
 80a8c40:	3c900000 	.word	0x3c900000

080a8c44 <fabsf>:
 80a8c44:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80a8c48:	4770      	bx	lr
 80a8c4a:	bf00      	nop

080a8c4c <floorf>:
 80a8c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a8c4e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80a8c52:	3d7f      	subs	r5, #127	; 0x7f
 80a8c54:	2d16      	cmp	r5, #22
 80a8c56:	4604      	mov	r4, r0
 80a8c58:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 80a8c5c:	dc17      	bgt.n	80a8c8e <floorf+0x42>
 80a8c5e:	2d00      	cmp	r5, #0
 80a8c60:	4606      	mov	r6, r0
 80a8c62:	db1b      	blt.n	80a8c9c <floorf+0x50>
 80a8c64:	4f16      	ldr	r7, [pc, #88]	; (80a8cc0 <floorf+0x74>)
 80a8c66:	412f      	asrs	r7, r5
 80a8c68:	4238      	tst	r0, r7
 80a8c6a:	d01e      	beq.n	80a8caa <floorf+0x5e>
 80a8c6c:	4915      	ldr	r1, [pc, #84]	; (80a8cc4 <floorf+0x78>)
 80a8c6e:	f000 fd8f 	bl	80a9790 <__addsf3>
 80a8c72:	2100      	movs	r1, #0
 80a8c74:	f001 f850 	bl	80a9d18 <__aeabi_fcmpgt>
 80a8c78:	b1b8      	cbz	r0, 80a8caa <floorf+0x5e>
 80a8c7a:	2c00      	cmp	r4, #0
 80a8c7c:	da04      	bge.n	80a8c88 <floorf+0x3c>
 80a8c7e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80a8c82:	fa43 f505 	asr.w	r5, r3, r5
 80a8c86:	442e      	add	r6, r5
 80a8c88:	ea26 0007 	bic.w	r0, r6, r7
 80a8c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a8c8e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80a8c92:	d30a      	bcc.n	80a8caa <floorf+0x5e>
 80a8c94:	4601      	mov	r1, r0
 80a8c96:	f000 fd7b 	bl	80a9790 <__addsf3>
 80a8c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a8c9c:	4909      	ldr	r1, [pc, #36]	; (80a8cc4 <floorf+0x78>)
 80a8c9e:	f000 fd77 	bl	80a9790 <__addsf3>
 80a8ca2:	2100      	movs	r1, #0
 80a8ca4:	f001 f838 	bl	80a9d18 <__aeabi_fcmpgt>
 80a8ca8:	b908      	cbnz	r0, 80a8cae <floorf+0x62>
 80a8caa:	4620      	mov	r0, r4
 80a8cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a8cae:	2c00      	cmp	r4, #0
 80a8cb0:	db01      	blt.n	80a8cb6 <floorf+0x6a>
 80a8cb2:	2000      	movs	r0, #0
 80a8cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a8cb6:	2f00      	cmp	r7, #0
 80a8cb8:	d0f7      	beq.n	80a8caa <floorf+0x5e>
 80a8cba:	4803      	ldr	r0, [pc, #12]	; (80a8cc8 <floorf+0x7c>)
 80a8cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a8cbe:	bf00      	nop
 80a8cc0:	007fffff 	.word	0x007fffff
 80a8cc4:	7149f2ca 	.word	0x7149f2ca
 80a8cc8:	bf800000 	.word	0xbf800000

080a8ccc <scalbnf>:
 80a8ccc:	b538      	push	{r3, r4, r5, lr}
 80a8cce:	f030 4400 	bics.w	r4, r0, #2147483648	; 0x80000000
 80a8cd2:	4603      	mov	r3, r0
 80a8cd4:	d01d      	beq.n	80a8d12 <scalbnf+0x46>
 80a8cd6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80a8cda:	d21b      	bcs.n	80a8d14 <scalbnf+0x48>
 80a8cdc:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80a8ce0:	4602      	mov	r2, r0
 80a8ce2:	460d      	mov	r5, r1
 80a8ce4:	d11a      	bne.n	80a8d1c <scalbnf+0x50>
 80a8ce6:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80a8cea:	f000 fe59 	bl	80a99a0 <__aeabi_fmul>
 80a8cee:	4a20      	ldr	r2, [pc, #128]	; (80a8d70 <scalbnf+0xa4>)
 80a8cf0:	4603      	mov	r3, r0
 80a8cf2:	4295      	cmp	r5, r2
 80a8cf4:	db2c      	blt.n	80a8d50 <scalbnf+0x84>
 80a8cf6:	f3c0 54c7 	ubfx	r4, r0, #23, #8
 80a8cfa:	4602      	mov	r2, r0
 80a8cfc:	f1a4 0019 	sub.w	r0, r4, #25
 80a8d00:	1944      	adds	r4, r0, r5
 80a8d02:	2cfe      	cmp	r4, #254	; 0xfe
 80a8d04:	dd0e      	ble.n	80a8d24 <scalbnf+0x58>
 80a8d06:	4618      	mov	r0, r3
 80a8d08:	491a      	ldr	r1, [pc, #104]	; (80a8d74 <scalbnf+0xa8>)
 80a8d0a:	f361 001e 	bfi	r0, r1, #0, #31
 80a8d0e:	f000 fe47 	bl	80a99a0 <__aeabi_fmul>
 80a8d12:	bd38      	pop	{r3, r4, r5, pc}
 80a8d14:	4601      	mov	r1, r0
 80a8d16:	f000 fd3b 	bl	80a9790 <__addsf3>
 80a8d1a:	bd38      	pop	{r3, r4, r5, pc}
 80a8d1c:	0de0      	lsrs	r0, r4, #23
 80a8d1e:	1944      	adds	r4, r0, r5
 80a8d20:	2cfe      	cmp	r4, #254	; 0xfe
 80a8d22:	dcf0      	bgt.n	80a8d06 <scalbnf+0x3a>
 80a8d24:	2c00      	cmp	r4, #0
 80a8d26:	dc0e      	bgt.n	80a8d46 <scalbnf+0x7a>
 80a8d28:	f114 0f16 	cmn.w	r4, #22
 80a8d2c:	da14      	bge.n	80a8d58 <scalbnf+0x8c>
 80a8d2e:	f24c 3250 	movw	r2, #50000	; 0xc350
 80a8d32:	4618      	mov	r0, r3
 80a8d34:	4295      	cmp	r5, r2
 80a8d36:	bfcc      	ite	gt
 80a8d38:	490e      	ldrgt	r1, [pc, #56]	; (80a8d74 <scalbnf+0xa8>)
 80a8d3a:	490f      	ldrle	r1, [pc, #60]	; (80a8d78 <scalbnf+0xac>)
 80a8d3c:	f361 001e 	bfi	r0, r1, #0, #31
 80a8d40:	f000 fe2e 	bl	80a99a0 <__aeabi_fmul>
 80a8d44:	bd38      	pop	{r3, r4, r5, pc}
 80a8d46:	f022 40ff 	bic.w	r0, r2, #2139095040	; 0x7f800000
 80a8d4a:	ea40 50c4 	orr.w	r0, r0, r4, lsl #23
 80a8d4e:	bd38      	pop	{r3, r4, r5, pc}
 80a8d50:	4909      	ldr	r1, [pc, #36]	; (80a8d78 <scalbnf+0xac>)
 80a8d52:	f000 fe25 	bl	80a99a0 <__aeabi_fmul>
 80a8d56:	bd38      	pop	{r3, r4, r5, pc}
 80a8d58:	f104 0019 	add.w	r0, r4, #25
 80a8d5c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80a8d60:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80a8d64:	ea42 50c0 	orr.w	r0, r2, r0, lsl #23
 80a8d68:	f000 fe1a 	bl	80a99a0 <__aeabi_fmul>
 80a8d6c:	bd38      	pop	{r3, r4, r5, pc}
 80a8d6e:	bf00      	nop
 80a8d70:	ffff3cb0 	.word	0xffff3cb0
 80a8d74:	7149f2ca 	.word	0x7149f2ca
 80a8d78:	0da24260 	.word	0x0da24260

080a8d7c <__aeabi_drsub>:
 80a8d7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a8d80:	e002      	b.n	80a8d88 <__adddf3>
 80a8d82:	bf00      	nop

080a8d84 <__aeabi_dsub>:
 80a8d84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a8d88 <__adddf3>:
 80a8d88:	b530      	push	{r4, r5, lr}
 80a8d8a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a8d8e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a8d92:	ea94 0f05 	teq	r4, r5
 80a8d96:	bf08      	it	eq
 80a8d98:	ea90 0f02 	teqeq	r0, r2
 80a8d9c:	bf1f      	itttt	ne
 80a8d9e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a8da2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a8da6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a8daa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a8dae:	f000 80e2 	beq.w	80a8f76 <__adddf3+0x1ee>
 80a8db2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a8db6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a8dba:	bfb8      	it	lt
 80a8dbc:	426d      	neglt	r5, r5
 80a8dbe:	dd0c      	ble.n	80a8dda <__adddf3+0x52>
 80a8dc0:	442c      	add	r4, r5
 80a8dc2:	ea80 0202 	eor.w	r2, r0, r2
 80a8dc6:	ea81 0303 	eor.w	r3, r1, r3
 80a8dca:	ea82 0000 	eor.w	r0, r2, r0
 80a8dce:	ea83 0101 	eor.w	r1, r3, r1
 80a8dd2:	ea80 0202 	eor.w	r2, r0, r2
 80a8dd6:	ea81 0303 	eor.w	r3, r1, r3
 80a8dda:	2d36      	cmp	r5, #54	; 0x36
 80a8ddc:	bf88      	it	hi
 80a8dde:	bd30      	pophi	{r4, r5, pc}
 80a8de0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a8de4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a8de8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a8dec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a8df0:	d002      	beq.n	80a8df8 <__adddf3+0x70>
 80a8df2:	4240      	negs	r0, r0
 80a8df4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a8df8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a8dfc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a8e00:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a8e04:	d002      	beq.n	80a8e0c <__adddf3+0x84>
 80a8e06:	4252      	negs	r2, r2
 80a8e08:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a8e0c:	ea94 0f05 	teq	r4, r5
 80a8e10:	f000 80a7 	beq.w	80a8f62 <__adddf3+0x1da>
 80a8e14:	f1a4 0401 	sub.w	r4, r4, #1
 80a8e18:	f1d5 0e20 	rsbs	lr, r5, #32
 80a8e1c:	db0d      	blt.n	80a8e3a <__adddf3+0xb2>
 80a8e1e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a8e22:	fa22 f205 	lsr.w	r2, r2, r5
 80a8e26:	1880      	adds	r0, r0, r2
 80a8e28:	f141 0100 	adc.w	r1, r1, #0
 80a8e2c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a8e30:	1880      	adds	r0, r0, r2
 80a8e32:	fa43 f305 	asr.w	r3, r3, r5
 80a8e36:	4159      	adcs	r1, r3
 80a8e38:	e00e      	b.n	80a8e58 <__adddf3+0xd0>
 80a8e3a:	f1a5 0520 	sub.w	r5, r5, #32
 80a8e3e:	f10e 0e20 	add.w	lr, lr, #32
 80a8e42:	2a01      	cmp	r2, #1
 80a8e44:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a8e48:	bf28      	it	cs
 80a8e4a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a8e4e:	fa43 f305 	asr.w	r3, r3, r5
 80a8e52:	18c0      	adds	r0, r0, r3
 80a8e54:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a8e58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a8e5c:	d507      	bpl.n	80a8e6e <__adddf3+0xe6>
 80a8e5e:	f04f 0e00 	mov.w	lr, #0
 80a8e62:	f1dc 0c00 	rsbs	ip, ip, #0
 80a8e66:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a8e6a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a8e6e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a8e72:	d31b      	bcc.n	80a8eac <__adddf3+0x124>
 80a8e74:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a8e78:	d30c      	bcc.n	80a8e94 <__adddf3+0x10c>
 80a8e7a:	0849      	lsrs	r1, r1, #1
 80a8e7c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a8e80:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a8e84:	f104 0401 	add.w	r4, r4, #1
 80a8e88:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a8e8c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a8e90:	f080 809a 	bcs.w	80a8fc8 <__adddf3+0x240>
 80a8e94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a8e98:	bf08      	it	eq
 80a8e9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a8e9e:	f150 0000 	adcs.w	r0, r0, #0
 80a8ea2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a8ea6:	ea41 0105 	orr.w	r1, r1, r5
 80a8eaa:	bd30      	pop	{r4, r5, pc}
 80a8eac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a8eb0:	4140      	adcs	r0, r0
 80a8eb2:	eb41 0101 	adc.w	r1, r1, r1
 80a8eb6:	3c01      	subs	r4, #1
 80a8eb8:	bf28      	it	cs
 80a8eba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a8ebe:	d2e9      	bcs.n	80a8e94 <__adddf3+0x10c>
 80a8ec0:	f091 0f00 	teq	r1, #0
 80a8ec4:	bf04      	itt	eq
 80a8ec6:	4601      	moveq	r1, r0
 80a8ec8:	2000      	moveq	r0, #0
 80a8eca:	fab1 f381 	clz	r3, r1
 80a8ece:	bf08      	it	eq
 80a8ed0:	3320      	addeq	r3, #32
 80a8ed2:	f1a3 030b 	sub.w	r3, r3, #11
 80a8ed6:	f1b3 0220 	subs.w	r2, r3, #32
 80a8eda:	da0c      	bge.n	80a8ef6 <__adddf3+0x16e>
 80a8edc:	320c      	adds	r2, #12
 80a8ede:	dd08      	ble.n	80a8ef2 <__adddf3+0x16a>
 80a8ee0:	f102 0c14 	add.w	ip, r2, #20
 80a8ee4:	f1c2 020c 	rsb	r2, r2, #12
 80a8ee8:	fa01 f00c 	lsl.w	r0, r1, ip
 80a8eec:	fa21 f102 	lsr.w	r1, r1, r2
 80a8ef0:	e00c      	b.n	80a8f0c <__adddf3+0x184>
 80a8ef2:	f102 0214 	add.w	r2, r2, #20
 80a8ef6:	bfd8      	it	le
 80a8ef8:	f1c2 0c20 	rsble	ip, r2, #32
 80a8efc:	fa01 f102 	lsl.w	r1, r1, r2
 80a8f00:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a8f04:	bfdc      	itt	le
 80a8f06:	ea41 010c 	orrle.w	r1, r1, ip
 80a8f0a:	4090      	lslle	r0, r2
 80a8f0c:	1ae4      	subs	r4, r4, r3
 80a8f0e:	bfa2      	ittt	ge
 80a8f10:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a8f14:	4329      	orrge	r1, r5
 80a8f16:	bd30      	popge	{r4, r5, pc}
 80a8f18:	ea6f 0404 	mvn.w	r4, r4
 80a8f1c:	3c1f      	subs	r4, #31
 80a8f1e:	da1c      	bge.n	80a8f5a <__adddf3+0x1d2>
 80a8f20:	340c      	adds	r4, #12
 80a8f22:	dc0e      	bgt.n	80a8f42 <__adddf3+0x1ba>
 80a8f24:	f104 0414 	add.w	r4, r4, #20
 80a8f28:	f1c4 0220 	rsb	r2, r4, #32
 80a8f2c:	fa20 f004 	lsr.w	r0, r0, r4
 80a8f30:	fa01 f302 	lsl.w	r3, r1, r2
 80a8f34:	ea40 0003 	orr.w	r0, r0, r3
 80a8f38:	fa21 f304 	lsr.w	r3, r1, r4
 80a8f3c:	ea45 0103 	orr.w	r1, r5, r3
 80a8f40:	bd30      	pop	{r4, r5, pc}
 80a8f42:	f1c4 040c 	rsb	r4, r4, #12
 80a8f46:	f1c4 0220 	rsb	r2, r4, #32
 80a8f4a:	fa20 f002 	lsr.w	r0, r0, r2
 80a8f4e:	fa01 f304 	lsl.w	r3, r1, r4
 80a8f52:	ea40 0003 	orr.w	r0, r0, r3
 80a8f56:	4629      	mov	r1, r5
 80a8f58:	bd30      	pop	{r4, r5, pc}
 80a8f5a:	fa21 f004 	lsr.w	r0, r1, r4
 80a8f5e:	4629      	mov	r1, r5
 80a8f60:	bd30      	pop	{r4, r5, pc}
 80a8f62:	f094 0f00 	teq	r4, #0
 80a8f66:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a8f6a:	bf06      	itte	eq
 80a8f6c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a8f70:	3401      	addeq	r4, #1
 80a8f72:	3d01      	subne	r5, #1
 80a8f74:	e74e      	b.n	80a8e14 <__adddf3+0x8c>
 80a8f76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a8f7a:	bf18      	it	ne
 80a8f7c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a8f80:	d029      	beq.n	80a8fd6 <__adddf3+0x24e>
 80a8f82:	ea94 0f05 	teq	r4, r5
 80a8f86:	bf08      	it	eq
 80a8f88:	ea90 0f02 	teqeq	r0, r2
 80a8f8c:	d005      	beq.n	80a8f9a <__adddf3+0x212>
 80a8f8e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a8f92:	bf04      	itt	eq
 80a8f94:	4619      	moveq	r1, r3
 80a8f96:	4610      	moveq	r0, r2
 80a8f98:	bd30      	pop	{r4, r5, pc}
 80a8f9a:	ea91 0f03 	teq	r1, r3
 80a8f9e:	bf1e      	ittt	ne
 80a8fa0:	2100      	movne	r1, #0
 80a8fa2:	2000      	movne	r0, #0
 80a8fa4:	bd30      	popne	{r4, r5, pc}
 80a8fa6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a8faa:	d105      	bne.n	80a8fb8 <__adddf3+0x230>
 80a8fac:	0040      	lsls	r0, r0, #1
 80a8fae:	4149      	adcs	r1, r1
 80a8fb0:	bf28      	it	cs
 80a8fb2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a8fb6:	bd30      	pop	{r4, r5, pc}
 80a8fb8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a8fbc:	bf3c      	itt	cc
 80a8fbe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a8fc2:	bd30      	popcc	{r4, r5, pc}
 80a8fc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a8fc8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a8fcc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a8fd0:	f04f 0000 	mov.w	r0, #0
 80a8fd4:	bd30      	pop	{r4, r5, pc}
 80a8fd6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a8fda:	bf1a      	itte	ne
 80a8fdc:	4619      	movne	r1, r3
 80a8fde:	4610      	movne	r0, r2
 80a8fe0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a8fe4:	bf1c      	itt	ne
 80a8fe6:	460b      	movne	r3, r1
 80a8fe8:	4602      	movne	r2, r0
 80a8fea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a8fee:	bf06      	itte	eq
 80a8ff0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a8ff4:	ea91 0f03 	teqeq	r1, r3
 80a8ff8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a8ffc:	bd30      	pop	{r4, r5, pc}
 80a8ffe:	bf00      	nop

080a9000 <__aeabi_ui2d>:
 80a9000:	f090 0f00 	teq	r0, #0
 80a9004:	bf04      	itt	eq
 80a9006:	2100      	moveq	r1, #0
 80a9008:	4770      	bxeq	lr
 80a900a:	b530      	push	{r4, r5, lr}
 80a900c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a9010:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a9014:	f04f 0500 	mov.w	r5, #0
 80a9018:	f04f 0100 	mov.w	r1, #0
 80a901c:	e750      	b.n	80a8ec0 <__adddf3+0x138>
 80a901e:	bf00      	nop

080a9020 <__aeabi_i2d>:
 80a9020:	f090 0f00 	teq	r0, #0
 80a9024:	bf04      	itt	eq
 80a9026:	2100      	moveq	r1, #0
 80a9028:	4770      	bxeq	lr
 80a902a:	b530      	push	{r4, r5, lr}
 80a902c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a9030:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a9034:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a9038:	bf48      	it	mi
 80a903a:	4240      	negmi	r0, r0
 80a903c:	f04f 0100 	mov.w	r1, #0
 80a9040:	e73e      	b.n	80a8ec0 <__adddf3+0x138>
 80a9042:	bf00      	nop

080a9044 <__aeabi_f2d>:
 80a9044:	0042      	lsls	r2, r0, #1
 80a9046:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a904a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a904e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a9052:	bf1f      	itttt	ne
 80a9054:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a9058:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a905c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a9060:	4770      	bxne	lr
 80a9062:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a9066:	bf08      	it	eq
 80a9068:	4770      	bxeq	lr
 80a906a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a906e:	bf04      	itt	eq
 80a9070:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a9074:	4770      	bxeq	lr
 80a9076:	b530      	push	{r4, r5, lr}
 80a9078:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a907c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a9080:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a9084:	e71c      	b.n	80a8ec0 <__adddf3+0x138>
 80a9086:	bf00      	nop

080a9088 <__aeabi_ul2d>:
 80a9088:	ea50 0201 	orrs.w	r2, r0, r1
 80a908c:	bf08      	it	eq
 80a908e:	4770      	bxeq	lr
 80a9090:	b530      	push	{r4, r5, lr}
 80a9092:	f04f 0500 	mov.w	r5, #0
 80a9096:	e00a      	b.n	80a90ae <__aeabi_l2d+0x16>

080a9098 <__aeabi_l2d>:
 80a9098:	ea50 0201 	orrs.w	r2, r0, r1
 80a909c:	bf08      	it	eq
 80a909e:	4770      	bxeq	lr
 80a90a0:	b530      	push	{r4, r5, lr}
 80a90a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a90a6:	d502      	bpl.n	80a90ae <__aeabi_l2d+0x16>
 80a90a8:	4240      	negs	r0, r0
 80a90aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a90ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a90b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a90b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a90ba:	f43f aed8 	beq.w	80a8e6e <__adddf3+0xe6>
 80a90be:	f04f 0203 	mov.w	r2, #3
 80a90c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a90c6:	bf18      	it	ne
 80a90c8:	3203      	addne	r2, #3
 80a90ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a90ce:	bf18      	it	ne
 80a90d0:	3203      	addne	r2, #3
 80a90d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a90d6:	f1c2 0320 	rsb	r3, r2, #32
 80a90da:	fa00 fc03 	lsl.w	ip, r0, r3
 80a90de:	fa20 f002 	lsr.w	r0, r0, r2
 80a90e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80a90e6:	ea40 000e 	orr.w	r0, r0, lr
 80a90ea:	fa21 f102 	lsr.w	r1, r1, r2
 80a90ee:	4414      	add	r4, r2
 80a90f0:	e6bd      	b.n	80a8e6e <__adddf3+0xe6>
 80a90f2:	bf00      	nop

080a90f4 <__aeabi_dmul>:
 80a90f4:	b570      	push	{r4, r5, r6, lr}
 80a90f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a90fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a90fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a9102:	bf1d      	ittte	ne
 80a9104:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a9108:	ea94 0f0c 	teqne	r4, ip
 80a910c:	ea95 0f0c 	teqne	r5, ip
 80a9110:	f000 f8de 	bleq	80a92d0 <__aeabi_dmul+0x1dc>
 80a9114:	442c      	add	r4, r5
 80a9116:	ea81 0603 	eor.w	r6, r1, r3
 80a911a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a911e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a9122:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a9126:	bf18      	it	ne
 80a9128:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a912c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a9130:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a9134:	d038      	beq.n	80a91a8 <__aeabi_dmul+0xb4>
 80a9136:	fba0 ce02 	umull	ip, lr, r0, r2
 80a913a:	f04f 0500 	mov.w	r5, #0
 80a913e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a9142:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a9146:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a914a:	f04f 0600 	mov.w	r6, #0
 80a914e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a9152:	f09c 0f00 	teq	ip, #0
 80a9156:	bf18      	it	ne
 80a9158:	f04e 0e01 	orrne.w	lr, lr, #1
 80a915c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a9160:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a9164:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a9168:	d204      	bcs.n	80a9174 <__aeabi_dmul+0x80>
 80a916a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a916e:	416d      	adcs	r5, r5
 80a9170:	eb46 0606 	adc.w	r6, r6, r6
 80a9174:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a9178:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a917c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a9180:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a9184:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a9188:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a918c:	bf88      	it	hi
 80a918e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a9192:	d81e      	bhi.n	80a91d2 <__aeabi_dmul+0xde>
 80a9194:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a9198:	bf08      	it	eq
 80a919a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a919e:	f150 0000 	adcs.w	r0, r0, #0
 80a91a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a91a6:	bd70      	pop	{r4, r5, r6, pc}
 80a91a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a91ac:	ea46 0101 	orr.w	r1, r6, r1
 80a91b0:	ea40 0002 	orr.w	r0, r0, r2
 80a91b4:	ea81 0103 	eor.w	r1, r1, r3
 80a91b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a91bc:	bfc2      	ittt	gt
 80a91be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a91c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a91c6:	bd70      	popgt	{r4, r5, r6, pc}
 80a91c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a91cc:	f04f 0e00 	mov.w	lr, #0
 80a91d0:	3c01      	subs	r4, #1
 80a91d2:	f300 80ab 	bgt.w	80a932c <__aeabi_dmul+0x238>
 80a91d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a91da:	bfde      	ittt	le
 80a91dc:	2000      	movle	r0, #0
 80a91de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a91e2:	bd70      	pople	{r4, r5, r6, pc}
 80a91e4:	f1c4 0400 	rsb	r4, r4, #0
 80a91e8:	3c20      	subs	r4, #32
 80a91ea:	da35      	bge.n	80a9258 <__aeabi_dmul+0x164>
 80a91ec:	340c      	adds	r4, #12
 80a91ee:	dc1b      	bgt.n	80a9228 <__aeabi_dmul+0x134>
 80a91f0:	f104 0414 	add.w	r4, r4, #20
 80a91f4:	f1c4 0520 	rsb	r5, r4, #32
 80a91f8:	fa00 f305 	lsl.w	r3, r0, r5
 80a91fc:	fa20 f004 	lsr.w	r0, r0, r4
 80a9200:	fa01 f205 	lsl.w	r2, r1, r5
 80a9204:	ea40 0002 	orr.w	r0, r0, r2
 80a9208:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a920c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a9210:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a9214:	fa21 f604 	lsr.w	r6, r1, r4
 80a9218:	eb42 0106 	adc.w	r1, r2, r6
 80a921c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a9220:	bf08      	it	eq
 80a9222:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a9226:	bd70      	pop	{r4, r5, r6, pc}
 80a9228:	f1c4 040c 	rsb	r4, r4, #12
 80a922c:	f1c4 0520 	rsb	r5, r4, #32
 80a9230:	fa00 f304 	lsl.w	r3, r0, r4
 80a9234:	fa20 f005 	lsr.w	r0, r0, r5
 80a9238:	fa01 f204 	lsl.w	r2, r1, r4
 80a923c:	ea40 0002 	orr.w	r0, r0, r2
 80a9240:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a9244:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a9248:	f141 0100 	adc.w	r1, r1, #0
 80a924c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a9250:	bf08      	it	eq
 80a9252:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a9256:	bd70      	pop	{r4, r5, r6, pc}
 80a9258:	f1c4 0520 	rsb	r5, r4, #32
 80a925c:	fa00 f205 	lsl.w	r2, r0, r5
 80a9260:	ea4e 0e02 	orr.w	lr, lr, r2
 80a9264:	fa20 f304 	lsr.w	r3, r0, r4
 80a9268:	fa01 f205 	lsl.w	r2, r1, r5
 80a926c:	ea43 0302 	orr.w	r3, r3, r2
 80a9270:	fa21 f004 	lsr.w	r0, r1, r4
 80a9274:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a9278:	fa21 f204 	lsr.w	r2, r1, r4
 80a927c:	ea20 0002 	bic.w	r0, r0, r2
 80a9280:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a9284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a9288:	bf08      	it	eq
 80a928a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a928e:	bd70      	pop	{r4, r5, r6, pc}
 80a9290:	f094 0f00 	teq	r4, #0
 80a9294:	d10f      	bne.n	80a92b6 <__aeabi_dmul+0x1c2>
 80a9296:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a929a:	0040      	lsls	r0, r0, #1
 80a929c:	eb41 0101 	adc.w	r1, r1, r1
 80a92a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a92a4:	bf08      	it	eq
 80a92a6:	3c01      	subeq	r4, #1
 80a92a8:	d0f7      	beq.n	80a929a <__aeabi_dmul+0x1a6>
 80a92aa:	ea41 0106 	orr.w	r1, r1, r6
 80a92ae:	f095 0f00 	teq	r5, #0
 80a92b2:	bf18      	it	ne
 80a92b4:	4770      	bxne	lr
 80a92b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a92ba:	0052      	lsls	r2, r2, #1
 80a92bc:	eb43 0303 	adc.w	r3, r3, r3
 80a92c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a92c4:	bf08      	it	eq
 80a92c6:	3d01      	subeq	r5, #1
 80a92c8:	d0f7      	beq.n	80a92ba <__aeabi_dmul+0x1c6>
 80a92ca:	ea43 0306 	orr.w	r3, r3, r6
 80a92ce:	4770      	bx	lr
 80a92d0:	ea94 0f0c 	teq	r4, ip
 80a92d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a92d8:	bf18      	it	ne
 80a92da:	ea95 0f0c 	teqne	r5, ip
 80a92de:	d00c      	beq.n	80a92fa <__aeabi_dmul+0x206>
 80a92e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a92e4:	bf18      	it	ne
 80a92e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a92ea:	d1d1      	bne.n	80a9290 <__aeabi_dmul+0x19c>
 80a92ec:	ea81 0103 	eor.w	r1, r1, r3
 80a92f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a92f4:	f04f 0000 	mov.w	r0, #0
 80a92f8:	bd70      	pop	{r4, r5, r6, pc}
 80a92fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a92fe:	bf06      	itte	eq
 80a9300:	4610      	moveq	r0, r2
 80a9302:	4619      	moveq	r1, r3
 80a9304:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a9308:	d019      	beq.n	80a933e <__aeabi_dmul+0x24a>
 80a930a:	ea94 0f0c 	teq	r4, ip
 80a930e:	d102      	bne.n	80a9316 <__aeabi_dmul+0x222>
 80a9310:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a9314:	d113      	bne.n	80a933e <__aeabi_dmul+0x24a>
 80a9316:	ea95 0f0c 	teq	r5, ip
 80a931a:	d105      	bne.n	80a9328 <__aeabi_dmul+0x234>
 80a931c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a9320:	bf1c      	itt	ne
 80a9322:	4610      	movne	r0, r2
 80a9324:	4619      	movne	r1, r3
 80a9326:	d10a      	bne.n	80a933e <__aeabi_dmul+0x24a>
 80a9328:	ea81 0103 	eor.w	r1, r1, r3
 80a932c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a9330:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a9334:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a9338:	f04f 0000 	mov.w	r0, #0
 80a933c:	bd70      	pop	{r4, r5, r6, pc}
 80a933e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a9342:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a9346:	bd70      	pop	{r4, r5, r6, pc}

080a9348 <__aeabi_ddiv>:
 80a9348:	b570      	push	{r4, r5, r6, lr}
 80a934a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a934e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a9352:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a9356:	bf1d      	ittte	ne
 80a9358:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a935c:	ea94 0f0c 	teqne	r4, ip
 80a9360:	ea95 0f0c 	teqne	r5, ip
 80a9364:	f000 f8a7 	bleq	80a94b6 <__aeabi_ddiv+0x16e>
 80a9368:	eba4 0405 	sub.w	r4, r4, r5
 80a936c:	ea81 0e03 	eor.w	lr, r1, r3
 80a9370:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a9374:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a9378:	f000 8088 	beq.w	80a948c <__aeabi_ddiv+0x144>
 80a937c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a9380:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a9384:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a9388:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a938c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a9390:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a9394:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a9398:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a939c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a93a0:	429d      	cmp	r5, r3
 80a93a2:	bf08      	it	eq
 80a93a4:	4296      	cmpeq	r6, r2
 80a93a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a93aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a93ae:	d202      	bcs.n	80a93b6 <__aeabi_ddiv+0x6e>
 80a93b0:	085b      	lsrs	r3, r3, #1
 80a93b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a93b6:	1ab6      	subs	r6, r6, r2
 80a93b8:	eb65 0503 	sbc.w	r5, r5, r3
 80a93bc:	085b      	lsrs	r3, r3, #1
 80a93be:	ea4f 0232 	mov.w	r2, r2, rrx
 80a93c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a93c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a93ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80a93ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a93d2:	bf22      	ittt	cs
 80a93d4:	1ab6      	subcs	r6, r6, r2
 80a93d6:	4675      	movcs	r5, lr
 80a93d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a93dc:	085b      	lsrs	r3, r3, #1
 80a93de:	ea4f 0232 	mov.w	r2, r2, rrx
 80a93e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a93e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a93ea:	bf22      	ittt	cs
 80a93ec:	1ab6      	subcs	r6, r6, r2
 80a93ee:	4675      	movcs	r5, lr
 80a93f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a93f4:	085b      	lsrs	r3, r3, #1
 80a93f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a93fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80a93fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a9402:	bf22      	ittt	cs
 80a9404:	1ab6      	subcs	r6, r6, r2
 80a9406:	4675      	movcs	r5, lr
 80a9408:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a940c:	085b      	lsrs	r3, r3, #1
 80a940e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a9412:	ebb6 0e02 	subs.w	lr, r6, r2
 80a9416:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a941a:	bf22      	ittt	cs
 80a941c:	1ab6      	subcs	r6, r6, r2
 80a941e:	4675      	movcs	r5, lr
 80a9420:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a9424:	ea55 0e06 	orrs.w	lr, r5, r6
 80a9428:	d018      	beq.n	80a945c <__aeabi_ddiv+0x114>
 80a942a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a942e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a9432:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a9436:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a943a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a943e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a9442:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a9446:	d1c0      	bne.n	80a93ca <__aeabi_ddiv+0x82>
 80a9448:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a944c:	d10b      	bne.n	80a9466 <__aeabi_ddiv+0x11e>
 80a944e:	ea41 0100 	orr.w	r1, r1, r0
 80a9452:	f04f 0000 	mov.w	r0, #0
 80a9456:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a945a:	e7b6      	b.n	80a93ca <__aeabi_ddiv+0x82>
 80a945c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a9460:	bf04      	itt	eq
 80a9462:	4301      	orreq	r1, r0
 80a9464:	2000      	moveq	r0, #0
 80a9466:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a946a:	bf88      	it	hi
 80a946c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a9470:	f63f aeaf 	bhi.w	80a91d2 <__aeabi_dmul+0xde>
 80a9474:	ebb5 0c03 	subs.w	ip, r5, r3
 80a9478:	bf04      	itt	eq
 80a947a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a947e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a9482:	f150 0000 	adcs.w	r0, r0, #0
 80a9486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a948a:	bd70      	pop	{r4, r5, r6, pc}
 80a948c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a9490:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a9494:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a9498:	bfc2      	ittt	gt
 80a949a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a949e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a94a2:	bd70      	popgt	{r4, r5, r6, pc}
 80a94a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a94a8:	f04f 0e00 	mov.w	lr, #0
 80a94ac:	3c01      	subs	r4, #1
 80a94ae:	e690      	b.n	80a91d2 <__aeabi_dmul+0xde>
 80a94b0:	ea45 0e06 	orr.w	lr, r5, r6
 80a94b4:	e68d      	b.n	80a91d2 <__aeabi_dmul+0xde>
 80a94b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a94ba:	ea94 0f0c 	teq	r4, ip
 80a94be:	bf08      	it	eq
 80a94c0:	ea95 0f0c 	teqeq	r5, ip
 80a94c4:	f43f af3b 	beq.w	80a933e <__aeabi_dmul+0x24a>
 80a94c8:	ea94 0f0c 	teq	r4, ip
 80a94cc:	d10a      	bne.n	80a94e4 <__aeabi_ddiv+0x19c>
 80a94ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a94d2:	f47f af34 	bne.w	80a933e <__aeabi_dmul+0x24a>
 80a94d6:	ea95 0f0c 	teq	r5, ip
 80a94da:	f47f af25 	bne.w	80a9328 <__aeabi_dmul+0x234>
 80a94de:	4610      	mov	r0, r2
 80a94e0:	4619      	mov	r1, r3
 80a94e2:	e72c      	b.n	80a933e <__aeabi_dmul+0x24a>
 80a94e4:	ea95 0f0c 	teq	r5, ip
 80a94e8:	d106      	bne.n	80a94f8 <__aeabi_ddiv+0x1b0>
 80a94ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a94ee:	f43f aefd 	beq.w	80a92ec <__aeabi_dmul+0x1f8>
 80a94f2:	4610      	mov	r0, r2
 80a94f4:	4619      	mov	r1, r3
 80a94f6:	e722      	b.n	80a933e <__aeabi_dmul+0x24a>
 80a94f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a94fc:	bf18      	it	ne
 80a94fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a9502:	f47f aec5 	bne.w	80a9290 <__aeabi_dmul+0x19c>
 80a9506:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a950a:	f47f af0d 	bne.w	80a9328 <__aeabi_dmul+0x234>
 80a950e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a9512:	f47f aeeb 	bne.w	80a92ec <__aeabi_dmul+0x1f8>
 80a9516:	e712      	b.n	80a933e <__aeabi_dmul+0x24a>

080a9518 <__gedf2>:
 80a9518:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a951c:	e006      	b.n	80a952c <__cmpdf2+0x4>
 80a951e:	bf00      	nop

080a9520 <__ledf2>:
 80a9520:	f04f 0c01 	mov.w	ip, #1
 80a9524:	e002      	b.n	80a952c <__cmpdf2+0x4>
 80a9526:	bf00      	nop

080a9528 <__cmpdf2>:
 80a9528:	f04f 0c01 	mov.w	ip, #1
 80a952c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a9530:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a9534:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a9538:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a953c:	bf18      	it	ne
 80a953e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a9542:	d01b      	beq.n	80a957c <__cmpdf2+0x54>
 80a9544:	b001      	add	sp, #4
 80a9546:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a954a:	bf0c      	ite	eq
 80a954c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a9550:	ea91 0f03 	teqne	r1, r3
 80a9554:	bf02      	ittt	eq
 80a9556:	ea90 0f02 	teqeq	r0, r2
 80a955a:	2000      	moveq	r0, #0
 80a955c:	4770      	bxeq	lr
 80a955e:	f110 0f00 	cmn.w	r0, #0
 80a9562:	ea91 0f03 	teq	r1, r3
 80a9566:	bf58      	it	pl
 80a9568:	4299      	cmppl	r1, r3
 80a956a:	bf08      	it	eq
 80a956c:	4290      	cmpeq	r0, r2
 80a956e:	bf2c      	ite	cs
 80a9570:	17d8      	asrcs	r0, r3, #31
 80a9572:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a9576:	f040 0001 	orr.w	r0, r0, #1
 80a957a:	4770      	bx	lr
 80a957c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a9580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a9584:	d102      	bne.n	80a958c <__cmpdf2+0x64>
 80a9586:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a958a:	d107      	bne.n	80a959c <__cmpdf2+0x74>
 80a958c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a9590:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a9594:	d1d6      	bne.n	80a9544 <__cmpdf2+0x1c>
 80a9596:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a959a:	d0d3      	beq.n	80a9544 <__cmpdf2+0x1c>
 80a959c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a95a0:	4770      	bx	lr
 80a95a2:	bf00      	nop

080a95a4 <__aeabi_cdrcmple>:
 80a95a4:	4684      	mov	ip, r0
 80a95a6:	4610      	mov	r0, r2
 80a95a8:	4662      	mov	r2, ip
 80a95aa:	468c      	mov	ip, r1
 80a95ac:	4619      	mov	r1, r3
 80a95ae:	4663      	mov	r3, ip
 80a95b0:	e000      	b.n	80a95b4 <__aeabi_cdcmpeq>
 80a95b2:	bf00      	nop

080a95b4 <__aeabi_cdcmpeq>:
 80a95b4:	b501      	push	{r0, lr}
 80a95b6:	f7ff ffb7 	bl	80a9528 <__cmpdf2>
 80a95ba:	2800      	cmp	r0, #0
 80a95bc:	bf48      	it	mi
 80a95be:	f110 0f00 	cmnmi.w	r0, #0
 80a95c2:	bd01      	pop	{r0, pc}

080a95c4 <__aeabi_dcmpeq>:
 80a95c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a95c8:	f7ff fff4 	bl	80a95b4 <__aeabi_cdcmpeq>
 80a95cc:	bf0c      	ite	eq
 80a95ce:	2001      	moveq	r0, #1
 80a95d0:	2000      	movne	r0, #0
 80a95d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a95d6:	bf00      	nop

080a95d8 <__aeabi_dcmplt>:
 80a95d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a95dc:	f7ff ffea 	bl	80a95b4 <__aeabi_cdcmpeq>
 80a95e0:	bf34      	ite	cc
 80a95e2:	2001      	movcc	r0, #1
 80a95e4:	2000      	movcs	r0, #0
 80a95e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a95ea:	bf00      	nop

080a95ec <__aeabi_dcmple>:
 80a95ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a95f0:	f7ff ffe0 	bl	80a95b4 <__aeabi_cdcmpeq>
 80a95f4:	bf94      	ite	ls
 80a95f6:	2001      	movls	r0, #1
 80a95f8:	2000      	movhi	r0, #0
 80a95fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a95fe:	bf00      	nop

080a9600 <__aeabi_dcmpge>:
 80a9600:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a9604:	f7ff ffce 	bl	80a95a4 <__aeabi_cdrcmple>
 80a9608:	bf94      	ite	ls
 80a960a:	2001      	movls	r0, #1
 80a960c:	2000      	movhi	r0, #0
 80a960e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a9612:	bf00      	nop

080a9614 <__aeabi_dcmpgt>:
 80a9614:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a9618:	f7ff ffc4 	bl	80a95a4 <__aeabi_cdrcmple>
 80a961c:	bf34      	ite	cc
 80a961e:	2001      	movcc	r0, #1
 80a9620:	2000      	movcs	r0, #0
 80a9622:	f85d fb08 	ldr.w	pc, [sp], #8
 80a9626:	bf00      	nop

080a9628 <__aeabi_dcmpun>:
 80a9628:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a962c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a9630:	d102      	bne.n	80a9638 <__aeabi_dcmpun+0x10>
 80a9632:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a9636:	d10a      	bne.n	80a964e <__aeabi_dcmpun+0x26>
 80a9638:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a963c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a9640:	d102      	bne.n	80a9648 <__aeabi_dcmpun+0x20>
 80a9642:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a9646:	d102      	bne.n	80a964e <__aeabi_dcmpun+0x26>
 80a9648:	f04f 0000 	mov.w	r0, #0
 80a964c:	4770      	bx	lr
 80a964e:	f04f 0001 	mov.w	r0, #1
 80a9652:	4770      	bx	lr

080a9654 <__aeabi_d2iz>:
 80a9654:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a9658:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a965c:	d215      	bcs.n	80a968a <__aeabi_d2iz+0x36>
 80a965e:	d511      	bpl.n	80a9684 <__aeabi_d2iz+0x30>
 80a9660:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a9664:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a9668:	d912      	bls.n	80a9690 <__aeabi_d2iz+0x3c>
 80a966a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a966e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a9672:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a9676:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a967a:	fa23 f002 	lsr.w	r0, r3, r2
 80a967e:	bf18      	it	ne
 80a9680:	4240      	negne	r0, r0
 80a9682:	4770      	bx	lr
 80a9684:	f04f 0000 	mov.w	r0, #0
 80a9688:	4770      	bx	lr
 80a968a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a968e:	d105      	bne.n	80a969c <__aeabi_d2iz+0x48>
 80a9690:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a9694:	bf08      	it	eq
 80a9696:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a969a:	4770      	bx	lr
 80a969c:	f04f 0000 	mov.w	r0, #0
 80a96a0:	4770      	bx	lr
 80a96a2:	bf00      	nop

080a96a4 <__aeabi_d2uiz>:
 80a96a4:	004a      	lsls	r2, r1, #1
 80a96a6:	d211      	bcs.n	80a96cc <__aeabi_d2uiz+0x28>
 80a96a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a96ac:	d211      	bcs.n	80a96d2 <__aeabi_d2uiz+0x2e>
 80a96ae:	d50d      	bpl.n	80a96cc <__aeabi_d2uiz+0x28>
 80a96b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a96b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a96b8:	d40e      	bmi.n	80a96d8 <__aeabi_d2uiz+0x34>
 80a96ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a96be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a96c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a96c6:	fa23 f002 	lsr.w	r0, r3, r2
 80a96ca:	4770      	bx	lr
 80a96cc:	f04f 0000 	mov.w	r0, #0
 80a96d0:	4770      	bx	lr
 80a96d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a96d6:	d102      	bne.n	80a96de <__aeabi_d2uiz+0x3a>
 80a96d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a96dc:	4770      	bx	lr
 80a96de:	f04f 0000 	mov.w	r0, #0
 80a96e2:	4770      	bx	lr

080a96e4 <__aeabi_d2f>:
 80a96e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a96e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a96ec:	bf24      	itt	cs
 80a96ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a96f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a96f6:	d90d      	bls.n	80a9714 <__aeabi_d2f+0x30>
 80a96f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a96fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a9700:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a9704:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a9708:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a970c:	bf08      	it	eq
 80a970e:	f020 0001 	biceq.w	r0, r0, #1
 80a9712:	4770      	bx	lr
 80a9714:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a9718:	d121      	bne.n	80a975e <__aeabi_d2f+0x7a>
 80a971a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a971e:	bfbc      	itt	lt
 80a9720:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a9724:	4770      	bxlt	lr
 80a9726:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a972a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a972e:	f1c2 0218 	rsb	r2, r2, #24
 80a9732:	f1c2 0c20 	rsb	ip, r2, #32
 80a9736:	fa10 f30c 	lsls.w	r3, r0, ip
 80a973a:	fa20 f002 	lsr.w	r0, r0, r2
 80a973e:	bf18      	it	ne
 80a9740:	f040 0001 	orrne.w	r0, r0, #1
 80a9744:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a9748:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a974c:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a9750:	ea40 000c 	orr.w	r0, r0, ip
 80a9754:	fa23 f302 	lsr.w	r3, r3, r2
 80a9758:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a975c:	e7cc      	b.n	80a96f8 <__aeabi_d2f+0x14>
 80a975e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a9762:	d107      	bne.n	80a9774 <__aeabi_d2f+0x90>
 80a9764:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a9768:	bf1e      	ittt	ne
 80a976a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a976e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a9772:	4770      	bxne	lr
 80a9774:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a9778:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a977c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a9780:	4770      	bx	lr
 80a9782:	bf00      	nop

080a9784 <__aeabi_frsub>:
 80a9784:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a9788:	e002      	b.n	80a9790 <__addsf3>
 80a978a:	bf00      	nop

080a978c <__aeabi_fsub>:
 80a978c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a9790 <__addsf3>:
 80a9790:	0042      	lsls	r2, r0, #1
 80a9792:	bf1f      	itttt	ne
 80a9794:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a9798:	ea92 0f03 	teqne	r2, r3
 80a979c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a97a0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a97a4:	d06a      	beq.n	80a987c <__addsf3+0xec>
 80a97a6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a97aa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a97ae:	bfc1      	itttt	gt
 80a97b0:	18d2      	addgt	r2, r2, r3
 80a97b2:	4041      	eorgt	r1, r0
 80a97b4:	4048      	eorgt	r0, r1
 80a97b6:	4041      	eorgt	r1, r0
 80a97b8:	bfb8      	it	lt
 80a97ba:	425b      	neglt	r3, r3
 80a97bc:	2b19      	cmp	r3, #25
 80a97be:	bf88      	it	hi
 80a97c0:	4770      	bxhi	lr
 80a97c2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a97c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a97ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a97ce:	bf18      	it	ne
 80a97d0:	4240      	negne	r0, r0
 80a97d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a97d6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a97da:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a97de:	bf18      	it	ne
 80a97e0:	4249      	negne	r1, r1
 80a97e2:	ea92 0f03 	teq	r2, r3
 80a97e6:	d03f      	beq.n	80a9868 <__addsf3+0xd8>
 80a97e8:	f1a2 0201 	sub.w	r2, r2, #1
 80a97ec:	fa41 fc03 	asr.w	ip, r1, r3
 80a97f0:	eb10 000c 	adds.w	r0, r0, ip
 80a97f4:	f1c3 0320 	rsb	r3, r3, #32
 80a97f8:	fa01 f103 	lsl.w	r1, r1, r3
 80a97fc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a9800:	d502      	bpl.n	80a9808 <__addsf3+0x78>
 80a9802:	4249      	negs	r1, r1
 80a9804:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a9808:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a980c:	d313      	bcc.n	80a9836 <__addsf3+0xa6>
 80a980e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a9812:	d306      	bcc.n	80a9822 <__addsf3+0x92>
 80a9814:	0840      	lsrs	r0, r0, #1
 80a9816:	ea4f 0131 	mov.w	r1, r1, rrx
 80a981a:	f102 0201 	add.w	r2, r2, #1
 80a981e:	2afe      	cmp	r2, #254	; 0xfe
 80a9820:	d251      	bcs.n	80a98c6 <__addsf3+0x136>
 80a9822:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a9826:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a982a:	bf08      	it	eq
 80a982c:	f020 0001 	biceq.w	r0, r0, #1
 80a9830:	ea40 0003 	orr.w	r0, r0, r3
 80a9834:	4770      	bx	lr
 80a9836:	0049      	lsls	r1, r1, #1
 80a9838:	eb40 0000 	adc.w	r0, r0, r0
 80a983c:	3a01      	subs	r2, #1
 80a983e:	bf28      	it	cs
 80a9840:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a9844:	d2ed      	bcs.n	80a9822 <__addsf3+0x92>
 80a9846:	fab0 fc80 	clz	ip, r0
 80a984a:	f1ac 0c08 	sub.w	ip, ip, #8
 80a984e:	ebb2 020c 	subs.w	r2, r2, ip
 80a9852:	fa00 f00c 	lsl.w	r0, r0, ip
 80a9856:	bfaa      	itet	ge
 80a9858:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a985c:	4252      	neglt	r2, r2
 80a985e:	4318      	orrge	r0, r3
 80a9860:	bfbc      	itt	lt
 80a9862:	40d0      	lsrlt	r0, r2
 80a9864:	4318      	orrlt	r0, r3
 80a9866:	4770      	bx	lr
 80a9868:	f092 0f00 	teq	r2, #0
 80a986c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a9870:	bf06      	itte	eq
 80a9872:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a9876:	3201      	addeq	r2, #1
 80a9878:	3b01      	subne	r3, #1
 80a987a:	e7b5      	b.n	80a97e8 <__addsf3+0x58>
 80a987c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a9880:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a9884:	bf18      	it	ne
 80a9886:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a988a:	d021      	beq.n	80a98d0 <__addsf3+0x140>
 80a988c:	ea92 0f03 	teq	r2, r3
 80a9890:	d004      	beq.n	80a989c <__addsf3+0x10c>
 80a9892:	f092 0f00 	teq	r2, #0
 80a9896:	bf08      	it	eq
 80a9898:	4608      	moveq	r0, r1
 80a989a:	4770      	bx	lr
 80a989c:	ea90 0f01 	teq	r0, r1
 80a98a0:	bf1c      	itt	ne
 80a98a2:	2000      	movne	r0, #0
 80a98a4:	4770      	bxne	lr
 80a98a6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a98aa:	d104      	bne.n	80a98b6 <__addsf3+0x126>
 80a98ac:	0040      	lsls	r0, r0, #1
 80a98ae:	bf28      	it	cs
 80a98b0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a98b4:	4770      	bx	lr
 80a98b6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a98ba:	bf3c      	itt	cc
 80a98bc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a98c0:	4770      	bxcc	lr
 80a98c2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a98c6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a98ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a98ce:	4770      	bx	lr
 80a98d0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a98d4:	bf16      	itet	ne
 80a98d6:	4608      	movne	r0, r1
 80a98d8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a98dc:	4601      	movne	r1, r0
 80a98de:	0242      	lsls	r2, r0, #9
 80a98e0:	bf06      	itte	eq
 80a98e2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a98e6:	ea90 0f01 	teqeq	r0, r1
 80a98ea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a98ee:	4770      	bx	lr

080a98f0 <__aeabi_ui2f>:
 80a98f0:	f04f 0300 	mov.w	r3, #0
 80a98f4:	e004      	b.n	80a9900 <__aeabi_i2f+0x8>
 80a98f6:	bf00      	nop

080a98f8 <__aeabi_i2f>:
 80a98f8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a98fc:	bf48      	it	mi
 80a98fe:	4240      	negmi	r0, r0
 80a9900:	ea5f 0c00 	movs.w	ip, r0
 80a9904:	bf08      	it	eq
 80a9906:	4770      	bxeq	lr
 80a9908:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a990c:	4601      	mov	r1, r0
 80a990e:	f04f 0000 	mov.w	r0, #0
 80a9912:	e01c      	b.n	80a994e <__aeabi_l2f+0x2a>

080a9914 <__aeabi_ul2f>:
 80a9914:	ea50 0201 	orrs.w	r2, r0, r1
 80a9918:	bf08      	it	eq
 80a991a:	4770      	bxeq	lr
 80a991c:	f04f 0300 	mov.w	r3, #0
 80a9920:	e00a      	b.n	80a9938 <__aeabi_l2f+0x14>
 80a9922:	bf00      	nop

080a9924 <__aeabi_l2f>:
 80a9924:	ea50 0201 	orrs.w	r2, r0, r1
 80a9928:	bf08      	it	eq
 80a992a:	4770      	bxeq	lr
 80a992c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a9930:	d502      	bpl.n	80a9938 <__aeabi_l2f+0x14>
 80a9932:	4240      	negs	r0, r0
 80a9934:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a9938:	ea5f 0c01 	movs.w	ip, r1
 80a993c:	bf02      	ittt	eq
 80a993e:	4684      	moveq	ip, r0
 80a9940:	4601      	moveq	r1, r0
 80a9942:	2000      	moveq	r0, #0
 80a9944:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a9948:	bf08      	it	eq
 80a994a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a994e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a9952:	fabc f28c 	clz	r2, ip
 80a9956:	3a08      	subs	r2, #8
 80a9958:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a995c:	db10      	blt.n	80a9980 <__aeabi_l2f+0x5c>
 80a995e:	fa01 fc02 	lsl.w	ip, r1, r2
 80a9962:	4463      	add	r3, ip
 80a9964:	fa00 fc02 	lsl.w	ip, r0, r2
 80a9968:	f1c2 0220 	rsb	r2, r2, #32
 80a996c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a9970:	fa20 f202 	lsr.w	r2, r0, r2
 80a9974:	eb43 0002 	adc.w	r0, r3, r2
 80a9978:	bf08      	it	eq
 80a997a:	f020 0001 	biceq.w	r0, r0, #1
 80a997e:	4770      	bx	lr
 80a9980:	f102 0220 	add.w	r2, r2, #32
 80a9984:	fa01 fc02 	lsl.w	ip, r1, r2
 80a9988:	f1c2 0220 	rsb	r2, r2, #32
 80a998c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a9990:	fa21 f202 	lsr.w	r2, r1, r2
 80a9994:	eb43 0002 	adc.w	r0, r3, r2
 80a9998:	bf08      	it	eq
 80a999a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a999e:	4770      	bx	lr

080a99a0 <__aeabi_fmul>:
 80a99a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a99a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a99a8:	bf1e      	ittt	ne
 80a99aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a99ae:	ea92 0f0c 	teqne	r2, ip
 80a99b2:	ea93 0f0c 	teqne	r3, ip
 80a99b6:	d06f      	beq.n	80a9a98 <__aeabi_fmul+0xf8>
 80a99b8:	441a      	add	r2, r3
 80a99ba:	ea80 0c01 	eor.w	ip, r0, r1
 80a99be:	0240      	lsls	r0, r0, #9
 80a99c0:	bf18      	it	ne
 80a99c2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a99c6:	d01e      	beq.n	80a9a06 <__aeabi_fmul+0x66>
 80a99c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a99cc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a99d0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a99d4:	fba0 3101 	umull	r3, r1, r0, r1
 80a99d8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a99dc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a99e0:	bf3e      	ittt	cc
 80a99e2:	0049      	lslcc	r1, r1, #1
 80a99e4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a99e8:	005b      	lslcc	r3, r3, #1
 80a99ea:	ea40 0001 	orr.w	r0, r0, r1
 80a99ee:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a99f2:	2afd      	cmp	r2, #253	; 0xfd
 80a99f4:	d81d      	bhi.n	80a9a32 <__aeabi_fmul+0x92>
 80a99f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a99fa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a99fe:	bf08      	it	eq
 80a9a00:	f020 0001 	biceq.w	r0, r0, #1
 80a9a04:	4770      	bx	lr
 80a9a06:	f090 0f00 	teq	r0, #0
 80a9a0a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a9a0e:	bf08      	it	eq
 80a9a10:	0249      	lsleq	r1, r1, #9
 80a9a12:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a9a16:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a9a1a:	3a7f      	subs	r2, #127	; 0x7f
 80a9a1c:	bfc2      	ittt	gt
 80a9a1e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a9a22:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a9a26:	4770      	bxgt	lr
 80a9a28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a9a2c:	f04f 0300 	mov.w	r3, #0
 80a9a30:	3a01      	subs	r2, #1
 80a9a32:	dc5d      	bgt.n	80a9af0 <__aeabi_fmul+0x150>
 80a9a34:	f112 0f19 	cmn.w	r2, #25
 80a9a38:	bfdc      	itt	le
 80a9a3a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a9a3e:	4770      	bxle	lr
 80a9a40:	f1c2 0200 	rsb	r2, r2, #0
 80a9a44:	0041      	lsls	r1, r0, #1
 80a9a46:	fa21 f102 	lsr.w	r1, r1, r2
 80a9a4a:	f1c2 0220 	rsb	r2, r2, #32
 80a9a4e:	fa00 fc02 	lsl.w	ip, r0, r2
 80a9a52:	ea5f 0031 	movs.w	r0, r1, rrx
 80a9a56:	f140 0000 	adc.w	r0, r0, #0
 80a9a5a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a9a5e:	bf08      	it	eq
 80a9a60:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a9a64:	4770      	bx	lr
 80a9a66:	f092 0f00 	teq	r2, #0
 80a9a6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a9a6e:	bf02      	ittt	eq
 80a9a70:	0040      	lsleq	r0, r0, #1
 80a9a72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a9a76:	3a01      	subeq	r2, #1
 80a9a78:	d0f9      	beq.n	80a9a6e <__aeabi_fmul+0xce>
 80a9a7a:	ea40 000c 	orr.w	r0, r0, ip
 80a9a7e:	f093 0f00 	teq	r3, #0
 80a9a82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a9a86:	bf02      	ittt	eq
 80a9a88:	0049      	lsleq	r1, r1, #1
 80a9a8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a9a8e:	3b01      	subeq	r3, #1
 80a9a90:	d0f9      	beq.n	80a9a86 <__aeabi_fmul+0xe6>
 80a9a92:	ea41 010c 	orr.w	r1, r1, ip
 80a9a96:	e78f      	b.n	80a99b8 <__aeabi_fmul+0x18>
 80a9a98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a9a9c:	ea92 0f0c 	teq	r2, ip
 80a9aa0:	bf18      	it	ne
 80a9aa2:	ea93 0f0c 	teqne	r3, ip
 80a9aa6:	d00a      	beq.n	80a9abe <__aeabi_fmul+0x11e>
 80a9aa8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a9aac:	bf18      	it	ne
 80a9aae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a9ab2:	d1d8      	bne.n	80a9a66 <__aeabi_fmul+0xc6>
 80a9ab4:	ea80 0001 	eor.w	r0, r0, r1
 80a9ab8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a9abc:	4770      	bx	lr
 80a9abe:	f090 0f00 	teq	r0, #0
 80a9ac2:	bf17      	itett	ne
 80a9ac4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a9ac8:	4608      	moveq	r0, r1
 80a9aca:	f091 0f00 	teqne	r1, #0
 80a9ace:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a9ad2:	d014      	beq.n	80a9afe <__aeabi_fmul+0x15e>
 80a9ad4:	ea92 0f0c 	teq	r2, ip
 80a9ad8:	d101      	bne.n	80a9ade <__aeabi_fmul+0x13e>
 80a9ada:	0242      	lsls	r2, r0, #9
 80a9adc:	d10f      	bne.n	80a9afe <__aeabi_fmul+0x15e>
 80a9ade:	ea93 0f0c 	teq	r3, ip
 80a9ae2:	d103      	bne.n	80a9aec <__aeabi_fmul+0x14c>
 80a9ae4:	024b      	lsls	r3, r1, #9
 80a9ae6:	bf18      	it	ne
 80a9ae8:	4608      	movne	r0, r1
 80a9aea:	d108      	bne.n	80a9afe <__aeabi_fmul+0x15e>
 80a9aec:	ea80 0001 	eor.w	r0, r0, r1
 80a9af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a9af4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a9af8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a9afc:	4770      	bx	lr
 80a9afe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a9b02:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a9b06:	4770      	bx	lr

080a9b08 <__aeabi_fdiv>:
 80a9b08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a9b0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a9b10:	bf1e      	ittt	ne
 80a9b12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a9b16:	ea92 0f0c 	teqne	r2, ip
 80a9b1a:	ea93 0f0c 	teqne	r3, ip
 80a9b1e:	d069      	beq.n	80a9bf4 <__aeabi_fdiv+0xec>
 80a9b20:	eba2 0203 	sub.w	r2, r2, r3
 80a9b24:	ea80 0c01 	eor.w	ip, r0, r1
 80a9b28:	0249      	lsls	r1, r1, #9
 80a9b2a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a9b2e:	d037      	beq.n	80a9ba0 <__aeabi_fdiv+0x98>
 80a9b30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a9b34:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a9b38:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a9b3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a9b40:	428b      	cmp	r3, r1
 80a9b42:	bf38      	it	cc
 80a9b44:	005b      	lslcc	r3, r3, #1
 80a9b46:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a9b4a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a9b4e:	428b      	cmp	r3, r1
 80a9b50:	bf24      	itt	cs
 80a9b52:	1a5b      	subcs	r3, r3, r1
 80a9b54:	ea40 000c 	orrcs.w	r0, r0, ip
 80a9b58:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a9b5c:	bf24      	itt	cs
 80a9b5e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a9b62:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a9b66:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a9b6a:	bf24      	itt	cs
 80a9b6c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a9b70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a9b74:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a9b78:	bf24      	itt	cs
 80a9b7a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a9b7e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a9b82:	011b      	lsls	r3, r3, #4
 80a9b84:	bf18      	it	ne
 80a9b86:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a9b8a:	d1e0      	bne.n	80a9b4e <__aeabi_fdiv+0x46>
 80a9b8c:	2afd      	cmp	r2, #253	; 0xfd
 80a9b8e:	f63f af50 	bhi.w	80a9a32 <__aeabi_fmul+0x92>
 80a9b92:	428b      	cmp	r3, r1
 80a9b94:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a9b98:	bf08      	it	eq
 80a9b9a:	f020 0001 	biceq.w	r0, r0, #1
 80a9b9e:	4770      	bx	lr
 80a9ba0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a9ba4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a9ba8:	327f      	adds	r2, #127	; 0x7f
 80a9baa:	bfc2      	ittt	gt
 80a9bac:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a9bb0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a9bb4:	4770      	bxgt	lr
 80a9bb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a9bba:	f04f 0300 	mov.w	r3, #0
 80a9bbe:	3a01      	subs	r2, #1
 80a9bc0:	e737      	b.n	80a9a32 <__aeabi_fmul+0x92>
 80a9bc2:	f092 0f00 	teq	r2, #0
 80a9bc6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a9bca:	bf02      	ittt	eq
 80a9bcc:	0040      	lsleq	r0, r0, #1
 80a9bce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a9bd2:	3a01      	subeq	r2, #1
 80a9bd4:	d0f9      	beq.n	80a9bca <__aeabi_fdiv+0xc2>
 80a9bd6:	ea40 000c 	orr.w	r0, r0, ip
 80a9bda:	f093 0f00 	teq	r3, #0
 80a9bde:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a9be2:	bf02      	ittt	eq
 80a9be4:	0049      	lsleq	r1, r1, #1
 80a9be6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a9bea:	3b01      	subeq	r3, #1
 80a9bec:	d0f9      	beq.n	80a9be2 <__aeabi_fdiv+0xda>
 80a9bee:	ea41 010c 	orr.w	r1, r1, ip
 80a9bf2:	e795      	b.n	80a9b20 <__aeabi_fdiv+0x18>
 80a9bf4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a9bf8:	ea92 0f0c 	teq	r2, ip
 80a9bfc:	d108      	bne.n	80a9c10 <__aeabi_fdiv+0x108>
 80a9bfe:	0242      	lsls	r2, r0, #9
 80a9c00:	f47f af7d 	bne.w	80a9afe <__aeabi_fmul+0x15e>
 80a9c04:	ea93 0f0c 	teq	r3, ip
 80a9c08:	f47f af70 	bne.w	80a9aec <__aeabi_fmul+0x14c>
 80a9c0c:	4608      	mov	r0, r1
 80a9c0e:	e776      	b.n	80a9afe <__aeabi_fmul+0x15e>
 80a9c10:	ea93 0f0c 	teq	r3, ip
 80a9c14:	d104      	bne.n	80a9c20 <__aeabi_fdiv+0x118>
 80a9c16:	024b      	lsls	r3, r1, #9
 80a9c18:	f43f af4c 	beq.w	80a9ab4 <__aeabi_fmul+0x114>
 80a9c1c:	4608      	mov	r0, r1
 80a9c1e:	e76e      	b.n	80a9afe <__aeabi_fmul+0x15e>
 80a9c20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a9c24:	bf18      	it	ne
 80a9c26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a9c2a:	d1ca      	bne.n	80a9bc2 <__aeabi_fdiv+0xba>
 80a9c2c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a9c30:	f47f af5c 	bne.w	80a9aec <__aeabi_fmul+0x14c>
 80a9c34:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a9c38:	f47f af3c 	bne.w	80a9ab4 <__aeabi_fmul+0x114>
 80a9c3c:	e75f      	b.n	80a9afe <__aeabi_fmul+0x15e>
 80a9c3e:	bf00      	nop

080a9c40 <__gesf2>:
 80a9c40:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a9c44:	e006      	b.n	80a9c54 <__cmpsf2+0x4>
 80a9c46:	bf00      	nop

080a9c48 <__lesf2>:
 80a9c48:	f04f 0c01 	mov.w	ip, #1
 80a9c4c:	e002      	b.n	80a9c54 <__cmpsf2+0x4>
 80a9c4e:	bf00      	nop

080a9c50 <__cmpsf2>:
 80a9c50:	f04f 0c01 	mov.w	ip, #1
 80a9c54:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a9c58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a9c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a9c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a9c64:	bf18      	it	ne
 80a9c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a9c6a:	d011      	beq.n	80a9c90 <__cmpsf2+0x40>
 80a9c6c:	b001      	add	sp, #4
 80a9c6e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a9c72:	bf18      	it	ne
 80a9c74:	ea90 0f01 	teqne	r0, r1
 80a9c78:	bf58      	it	pl
 80a9c7a:	ebb2 0003 	subspl.w	r0, r2, r3
 80a9c7e:	bf88      	it	hi
 80a9c80:	17c8      	asrhi	r0, r1, #31
 80a9c82:	bf38      	it	cc
 80a9c84:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a9c88:	bf18      	it	ne
 80a9c8a:	f040 0001 	orrne.w	r0, r0, #1
 80a9c8e:	4770      	bx	lr
 80a9c90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a9c94:	d102      	bne.n	80a9c9c <__cmpsf2+0x4c>
 80a9c96:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a9c9a:	d105      	bne.n	80a9ca8 <__cmpsf2+0x58>
 80a9c9c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a9ca0:	d1e4      	bne.n	80a9c6c <__cmpsf2+0x1c>
 80a9ca2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a9ca6:	d0e1      	beq.n	80a9c6c <__cmpsf2+0x1c>
 80a9ca8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a9cac:	4770      	bx	lr
 80a9cae:	bf00      	nop

080a9cb0 <__aeabi_cfrcmple>:
 80a9cb0:	4684      	mov	ip, r0
 80a9cb2:	4608      	mov	r0, r1
 80a9cb4:	4661      	mov	r1, ip
 80a9cb6:	e7ff      	b.n	80a9cb8 <__aeabi_cfcmpeq>

080a9cb8 <__aeabi_cfcmpeq>:
 80a9cb8:	b50f      	push	{r0, r1, r2, r3, lr}
 80a9cba:	f7ff ffc9 	bl	80a9c50 <__cmpsf2>
 80a9cbe:	2800      	cmp	r0, #0
 80a9cc0:	bf48      	it	mi
 80a9cc2:	f110 0f00 	cmnmi.w	r0, #0
 80a9cc6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a9cc8 <__aeabi_fcmpeq>:
 80a9cc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a9ccc:	f7ff fff4 	bl	80a9cb8 <__aeabi_cfcmpeq>
 80a9cd0:	bf0c      	ite	eq
 80a9cd2:	2001      	moveq	r0, #1
 80a9cd4:	2000      	movne	r0, #0
 80a9cd6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a9cda:	bf00      	nop

080a9cdc <__aeabi_fcmplt>:
 80a9cdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a9ce0:	f7ff ffea 	bl	80a9cb8 <__aeabi_cfcmpeq>
 80a9ce4:	bf34      	ite	cc
 80a9ce6:	2001      	movcc	r0, #1
 80a9ce8:	2000      	movcs	r0, #0
 80a9cea:	f85d fb08 	ldr.w	pc, [sp], #8
 80a9cee:	bf00      	nop

080a9cf0 <__aeabi_fcmple>:
 80a9cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a9cf4:	f7ff ffe0 	bl	80a9cb8 <__aeabi_cfcmpeq>
 80a9cf8:	bf94      	ite	ls
 80a9cfa:	2001      	movls	r0, #1
 80a9cfc:	2000      	movhi	r0, #0
 80a9cfe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a9d02:	bf00      	nop

080a9d04 <__aeabi_fcmpge>:
 80a9d04:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a9d08:	f7ff ffd2 	bl	80a9cb0 <__aeabi_cfrcmple>
 80a9d0c:	bf94      	ite	ls
 80a9d0e:	2001      	movls	r0, #1
 80a9d10:	2000      	movhi	r0, #0
 80a9d12:	f85d fb08 	ldr.w	pc, [sp], #8
 80a9d16:	bf00      	nop

080a9d18 <__aeabi_fcmpgt>:
 80a9d18:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a9d1c:	f7ff ffc8 	bl	80a9cb0 <__aeabi_cfrcmple>
 80a9d20:	bf34      	ite	cc
 80a9d22:	2001      	movcc	r0, #1
 80a9d24:	2000      	movcs	r0, #0
 80a9d26:	f85d fb08 	ldr.w	pc, [sp], #8
 80a9d2a:	bf00      	nop

080a9d2c <__aeabi_fcmpun>:
 80a9d2c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a9d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a9d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a9d38:	d102      	bne.n	80a9d40 <__aeabi_fcmpun+0x14>
 80a9d3a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a9d3e:	d108      	bne.n	80a9d52 <__aeabi_fcmpun+0x26>
 80a9d40:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a9d44:	d102      	bne.n	80a9d4c <__aeabi_fcmpun+0x20>
 80a9d46:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a9d4a:	d102      	bne.n	80a9d52 <__aeabi_fcmpun+0x26>
 80a9d4c:	f04f 0000 	mov.w	r0, #0
 80a9d50:	4770      	bx	lr
 80a9d52:	f04f 0001 	mov.w	r0, #1
 80a9d56:	4770      	bx	lr

080a9d58 <__aeabi_f2iz>:
 80a9d58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a9d5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a9d60:	d30f      	bcc.n	80a9d82 <__aeabi_f2iz+0x2a>
 80a9d62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a9d66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a9d6a:	d90d      	bls.n	80a9d88 <__aeabi_f2iz+0x30>
 80a9d6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a9d70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a9d74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a9d78:	fa23 f002 	lsr.w	r0, r3, r2
 80a9d7c:	bf18      	it	ne
 80a9d7e:	4240      	negne	r0, r0
 80a9d80:	4770      	bx	lr
 80a9d82:	f04f 0000 	mov.w	r0, #0
 80a9d86:	4770      	bx	lr
 80a9d88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a9d8c:	d101      	bne.n	80a9d92 <__aeabi_f2iz+0x3a>
 80a9d8e:	0242      	lsls	r2, r0, #9
 80a9d90:	d105      	bne.n	80a9d9e <__aeabi_f2iz+0x46>
 80a9d92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a9d96:	bf08      	it	eq
 80a9d98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a9d9c:	4770      	bx	lr
 80a9d9e:	f04f 0000 	mov.w	r0, #0
 80a9da2:	4770      	bx	lr

080a9da4 <__aeabi_f2uiz>:
 80a9da4:	0042      	lsls	r2, r0, #1
 80a9da6:	d20e      	bcs.n	80a9dc6 <__aeabi_f2uiz+0x22>
 80a9da8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a9dac:	d30b      	bcc.n	80a9dc6 <__aeabi_f2uiz+0x22>
 80a9dae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a9db2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a9db6:	d409      	bmi.n	80a9dcc <__aeabi_f2uiz+0x28>
 80a9db8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a9dbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a9dc0:	fa23 f002 	lsr.w	r0, r3, r2
 80a9dc4:	4770      	bx	lr
 80a9dc6:	f04f 0000 	mov.w	r0, #0
 80a9dca:	4770      	bx	lr
 80a9dcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a9dd0:	d101      	bne.n	80a9dd6 <__aeabi_f2uiz+0x32>
 80a9dd2:	0242      	lsls	r2, r0, #9
 80a9dd4:	d102      	bne.n	80a9ddc <__aeabi_f2uiz+0x38>
 80a9dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a9dda:	4770      	bx	lr
 80a9ddc:	f04f 0000 	mov.w	r0, #0
 80a9de0:	4770      	bx	lr
 80a9de2:	bf00      	nop

080a9de4 <__cxa_atexit>:
 80a9de4:	b510      	push	{r4, lr}
 80a9de6:	4604      	mov	r4, r0
 80a9de8:	4804      	ldr	r0, [pc, #16]	; (80a9dfc <__cxa_atexit+0x18>)
 80a9dea:	4613      	mov	r3, r2
 80a9dec:	b120      	cbz	r0, 80a9df8 <__cxa_atexit+0x14>
 80a9dee:	460a      	mov	r2, r1
 80a9df0:	2002      	movs	r0, #2
 80a9df2:	4621      	mov	r1, r4
 80a9df4:	f3af 8000 	nop.w
 80a9df8:	bd10      	pop	{r4, pc}
 80a9dfa:	bf00      	nop
 80a9dfc:	00000000 	.word	0x00000000

080a9e00 <memcpy>:
 80a9e00:	440a      	add	r2, r1
 80a9e02:	4291      	cmp	r1, r2
 80a9e04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a9e08:	d100      	bne.n	80a9e0c <memcpy+0xc>
 80a9e0a:	4770      	bx	lr
 80a9e0c:	b510      	push	{r4, lr}
 80a9e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a9e12:	4291      	cmp	r1, r2
 80a9e14:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a9e18:	d1f9      	bne.n	80a9e0e <memcpy+0xe>
 80a9e1a:	bd10      	pop	{r4, pc}

080a9e1c <memset>:
 80a9e1c:	4603      	mov	r3, r0
 80a9e1e:	4402      	add	r2, r0
 80a9e20:	4293      	cmp	r3, r2
 80a9e22:	d100      	bne.n	80a9e26 <memset+0xa>
 80a9e24:	4770      	bx	lr
 80a9e26:	f803 1b01 	strb.w	r1, [r3], #1
 80a9e2a:	e7f9      	b.n	80a9e20 <memset+0x4>

080a9e2c <srand>:
 80a9e2c:	b538      	push	{r3, r4, r5, lr}
 80a9e2e:	4b0d      	ldr	r3, [pc, #52]	; (80a9e64 <srand+0x38>)
 80a9e30:	4604      	mov	r4, r0
 80a9e32:	681d      	ldr	r5, [r3, #0]
 80a9e34:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a9e36:	b97b      	cbnz	r3, 80a9e58 <srand+0x2c>
 80a9e38:	2018      	movs	r0, #24
 80a9e3a:	f7f9 ffd7 	bl	80a3dec <malloc>
 80a9e3e:	4a0a      	ldr	r2, [pc, #40]	; (80a9e68 <srand+0x3c>)
 80a9e40:	4b0a      	ldr	r3, [pc, #40]	; (80a9e6c <srand+0x40>)
 80a9e42:	63a8      	str	r0, [r5, #56]	; 0x38
 80a9e44:	e9c0 2300 	strd	r2, r3, [r0]
 80a9e48:	4b09      	ldr	r3, [pc, #36]	; (80a9e70 <srand+0x44>)
 80a9e4a:	2201      	movs	r2, #1
 80a9e4c:	6083      	str	r3, [r0, #8]
 80a9e4e:	230b      	movs	r3, #11
 80a9e50:	8183      	strh	r3, [r0, #12]
 80a9e52:	2300      	movs	r3, #0
 80a9e54:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a9e58:	2200      	movs	r2, #0
 80a9e5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a9e5c:	611c      	str	r4, [r3, #16]
 80a9e5e:	615a      	str	r2, [r3, #20]
 80a9e60:	bd38      	pop	{r3, r4, r5, pc}
 80a9e62:	bf00      	nop
 80a9e64:	20000008 	.word	0x20000008
 80a9e68:	abcd330e 	.word	0xabcd330e
 80a9e6c:	e66d1234 	.word	0xe66d1234
 80a9e70:	0005deec 	.word	0x0005deec

080a9e74 <rand>:
 80a9e74:	4b13      	ldr	r3, [pc, #76]	; (80a9ec4 <rand+0x50>)
 80a9e76:	b510      	push	{r4, lr}
 80a9e78:	681c      	ldr	r4, [r3, #0]
 80a9e7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a9e7c:	b97b      	cbnz	r3, 80a9e9e <rand+0x2a>
 80a9e7e:	2018      	movs	r0, #24
 80a9e80:	f7f9 ffb4 	bl	80a3dec <malloc>
 80a9e84:	4a10      	ldr	r2, [pc, #64]	; (80a9ec8 <rand+0x54>)
 80a9e86:	4b11      	ldr	r3, [pc, #68]	; (80a9ecc <rand+0x58>)
 80a9e88:	63a0      	str	r0, [r4, #56]	; 0x38
 80a9e8a:	e9c0 2300 	strd	r2, r3, [r0]
 80a9e8e:	4b10      	ldr	r3, [pc, #64]	; (80a9ed0 <rand+0x5c>)
 80a9e90:	2201      	movs	r2, #1
 80a9e92:	6083      	str	r3, [r0, #8]
 80a9e94:	230b      	movs	r3, #11
 80a9e96:	8183      	strh	r3, [r0, #12]
 80a9e98:	2300      	movs	r3, #0
 80a9e9a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a9e9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a9ea0:	480c      	ldr	r0, [pc, #48]	; (80a9ed4 <rand+0x60>)
 80a9ea2:	690a      	ldr	r2, [r1, #16]
 80a9ea4:	694b      	ldr	r3, [r1, #20]
 80a9ea6:	4350      	muls	r0, r2
 80a9ea8:	4c0b      	ldr	r4, [pc, #44]	; (80a9ed8 <rand+0x64>)
 80a9eaa:	fb04 0003 	mla	r0, r4, r3, r0
 80a9eae:	fba2 3404 	umull	r3, r4, r2, r4
 80a9eb2:	1c5a      	adds	r2, r3, #1
 80a9eb4:	4404      	add	r4, r0
 80a9eb6:	f144 0000 	adc.w	r0, r4, #0
 80a9eba:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80a9ebe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80a9ec2:	bd10      	pop	{r4, pc}
 80a9ec4:	20000008 	.word	0x20000008
 80a9ec8:	abcd330e 	.word	0xabcd330e
 80a9ecc:	e66d1234 	.word	0xe66d1234
 80a9ed0:	0005deec 	.word	0x0005deec
 80a9ed4:	5851f42d 	.word	0x5851f42d
 80a9ed8:	4c957f2d 	.word	0x4c957f2d

080a9edc <strcpy>:
 80a9edc:	4603      	mov	r3, r0
 80a9ede:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a9ee2:	f803 2b01 	strb.w	r2, [r3], #1
 80a9ee6:	2a00      	cmp	r2, #0
 80a9ee8:	d1f9      	bne.n	80a9ede <strcpy+0x2>
 80a9eea:	4770      	bx	lr

080a9eec <strdup>:
 80a9eec:	4b02      	ldr	r3, [pc, #8]	; (80a9ef8 <strdup+0xc>)
 80a9eee:	4601      	mov	r1, r0
 80a9ef0:	6818      	ldr	r0, [r3, #0]
 80a9ef2:	f000 b803 	b.w	80a9efc <_strdup_r>
 80a9ef6:	bf00      	nop
 80a9ef8:	20000008 	.word	0x20000008

080a9efc <_strdup_r>:
 80a9efc:	b570      	push	{r4, r5, r6, lr}
 80a9efe:	4604      	mov	r4, r0
 80a9f00:	4608      	mov	r0, r1
 80a9f02:	460d      	mov	r5, r1
 80a9f04:	f000 f80d 	bl	80a9f22 <strlen>
 80a9f08:	1c46      	adds	r6, r0, #1
 80a9f0a:	4631      	mov	r1, r6
 80a9f0c:	4620      	mov	r0, r4
 80a9f0e:	f7f9 ff95 	bl	80a3e3c <_malloc_r>
 80a9f12:	4604      	mov	r4, r0
 80a9f14:	b118      	cbz	r0, 80a9f1e <_strdup_r+0x22>
 80a9f16:	4632      	mov	r2, r6
 80a9f18:	4629      	mov	r1, r5
 80a9f1a:	f7ff ff71 	bl	80a9e00 <memcpy>
 80a9f1e:	4620      	mov	r0, r4
 80a9f20:	bd70      	pop	{r4, r5, r6, pc}

080a9f22 <strlen>:
 80a9f22:	4603      	mov	r3, r0
 80a9f24:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a9f28:	2a00      	cmp	r2, #0
 80a9f2a:	d1fb      	bne.n	80a9f24 <strlen+0x2>
 80a9f2c:	1a18      	subs	r0, r3, r0
 80a9f2e:	3801      	subs	r0, #1
 80a9f30:	4770      	bx	lr

080a9f32 <strncpy>:
 80a9f32:	4603      	mov	r3, r0
 80a9f34:	b510      	push	{r4, lr}
 80a9f36:	3901      	subs	r1, #1
 80a9f38:	b132      	cbz	r2, 80a9f48 <strncpy+0x16>
 80a9f3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a9f3e:	3a01      	subs	r2, #1
 80a9f40:	f803 4b01 	strb.w	r4, [r3], #1
 80a9f44:	2c00      	cmp	r4, #0
 80a9f46:	d1f7      	bne.n	80a9f38 <strncpy+0x6>
 80a9f48:	2100      	movs	r1, #0
 80a9f4a:	441a      	add	r2, r3
 80a9f4c:	4293      	cmp	r3, r2
 80a9f4e:	d100      	bne.n	80a9f52 <strncpy+0x20>
 80a9f50:	bd10      	pop	{r4, pc}
 80a9f52:	f803 1b01 	strb.w	r1, [r3], #1
 80a9f56:	e7f9      	b.n	80a9f4c <strncpy+0x1a>

080a9f58 <dynalib_user>:
 80a9f58:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a9f68:	0000 0000                                   ....

080a9f6c <_ZL11COLOR_TABLE>:
 80a9f6c:	0019 0000 0032 0000 004b 0000 0032 0000     ....2...K...2...
 80a9f7c:	0064 0000 0096 0000 004b 0000 0096 0000     d.......K.......
 80a9f8c:	00e1 0000 0064 0000 00c8 0000 002e 0000     ....d...........
 80a9f9c:	007d 0000 00fa 0000 0079 0000 0096 0000     }.......y.......
 80a9fac:	002e 0000 00c4 0000 00af 0000 0060 0000     ............`...
 80a9fbc:	0011 0000 00c8 0000 0092 0000 005c 0000     ............\...
 80a9fcc:	00e1 0000 00c4 0000 00a7 0000 00fa 0000     ................
 80a9fdc:	00f6 0000 00f2 0000 0015 0000 002a 0000     ............*...
 80a9fec:	003f 0000 002e 0000 005c 0000 008a 0000     ?.......\.......
 80a9ffc:	0047 0000 008e 0000 00d5 0000 0060 0000     G...........`...
 80aa00c:	00c0 0000 0022 0000 0079 0000 00f2 0000     ...."...y.......
 80aa01c:	006d 0000 0092 0000 0026 0000 00b8 0000     m.......&.......
 80aa02c:	00ab 0000 0058 0000 0005 0000 00c4 0000     ....X...........
 80aa03c:	008a 0000 0050 0000 00dd 0000 00bc 0000     ....P...........
 80aa04c:	009b 0000 00f6 0000 00ee 0000 00e6 0000     ................
 80aa05c:	0011 0000 0022 0000 0033 0000 002a 0000     ...."...3...*...
 80aa06c:	0054 0000 007e 0000 0043 0000 0086 0000     T...~...C.......
 80aa07c:	00c9 0000 005c 0000 00b8 0000 0016 0000     ....\...........
 80aa08c:	0075 0000 00ea 0000 0061 0000 008e 0000     u.......a.......
 80aa09c:	001e 0000 00ac 0000 00a7 0000 0050 0000     ............P...
 80aa0ac:	00f7 0000 00c0 0000 0082 0000 0044 0000     ............D...
 80aa0bc:	00d9 0000 00b4 0000 008f 0000 00f2 0000     ................
 80aa0cc:	00e6 0000 00da 0000 000d 0000 001a 0000     ................
 80aa0dc:	0027 0000 0026 0000 004c 0000 0072 0000     '...&...L...r...
 80aa0ec:	003f 0000 007e 0000 00bd 0000 0058 0000     ?...~.......X...
 80aa0fc:	00b0 0000 000a 0000 0071 0000 00e2 0000     ........q.......
 80aa10c:	0055 0000 008a 0000 0016 0000 00a0 0000     U...............
 80aa11c:	00a3 0000 0048 0000 00eb 0000 00bc 0000     ....H...........
 80aa12c:	007a 0000 0038 0000 00d5 0000 00ac 0000     z...8...........
 80aa13c:	0083 0000 00ee 0000 00de 0000 00ce 0000     ................
 80aa14c:	0009 0000 0012 0000 001b 0000 0022 0000     ............"...
 80aa15c:	0044 0000 0066 0000 003b 0000 0076 0000     D...f...;...v...
 80aa16c:	00b1 0000 0054 0000 00a8 0000 00fc 0000     ....T...........
 80aa17c:	006d 0000 00da 0000 0049 0000 0086 0000     m.......I.......
 80aa18c:	000e 0000 0094 0000 009f 0000 0040 0000     ............@...
 80aa19c:	00df 0000 00b8 0000 0072 0000 002c 0000     ........r...,...
 80aa1ac:	00d1 0000 00a4 0000 0077 0000 00ea 0000     ........w.......
 80aa1bc:	00d6 0000 00c2 0000 6954 6b63 3173 7330     ........Ticks10s
 80aa1cc:	4600 6172 656d 3173 7330 2e00 4c00 636f     .Frames10s...Loc
 80aa1dc:	6c61 5049                                    alIP.

080aa1e1 <_ZL11matrix_pins>:
 80aa1e1:	0100 0302 0504 0706 4455 5350 6e65 7364     ........UDPSends
 80aa1f1:	5500 5044 6f43 6564 4100 2c42 3025 6433     .UDPCode.AB,%03d
 80aa201:	252c 3330 2c64 3025 6433 432c 0044           ,%03d,%03d,CD..

080aa210 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80aa218:	3e9b 080a 3ea1 080a 3ef1 080a 3eaf 080a     .>...>...>...>..
 80aa228:	3e9d 080a                                   .>..

080aa22c <_ZTV7TwoWire>:
	...
 80aa234:	4441 080a 448b 080a 4463 080a 4443 080a     AD...D..cD..CD..
 80aa244:	446b 080a 4473 080a 447b 080a 4483 080a     kD..sD..{D...D..

080aa254 <_ZTV9IPAddress>:
	...
 80aa25c:	44bd 080a 388d 080a 388f 080a 7061 0070     .D...8...8..app.

080aa26c <_ZTVN5spark12NetworkClassE>:
	...
 80aa274:	4599 080a 45a3 080a 45ad 080a 45b7 080a     .E...E...E...E..
 80aa284:	45c1 080a 45cd 080a 45d9 080a 45e5 080a     .E...E...E...E..
 80aa294:	45ed 080a 45f7 080a 4601 080a 5925 252d     .E...E...F..%Y-%
 80aa2a4:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80aa2b4:	7361 7463 6d69 0065                         asctime.

080aa2bc <_ZTV3UDP>:
	...
 80aa2c4:	4edd 080a 4f01 080a 4acb 080a 4bf7 080a     .N...O...J...K..
 80aa2d4:	4ac3 080a 4ae3 080a 4b01 080a 4b1b 080a     .J...J...K...K..
 80aa2e4:	4b3d 080a 4b95 080a 4bb7 080a 4d59 080a     =K...K...K..YM..
 80aa2f4:	4c5d 080a 4aad 080a 4e71 080a 4cd1 080a     ]L...J..qN...L..
 80aa304:	4d91 080a 4e9f 080a 4c21 080a 4ab9 080a     .M...N..!L...J..
 80aa314:	4d39 080a 4abf 080a 4b1d 080a fff0 ffff     9M...J...K......
 80aa324:	0000 0000 4b35 080a                         ....5K..

080aa32c <_ZTV11USARTSerial>:
	...
 80aa334:	4f15 080a 4f7d 080a 4f59 080a 467d 080a     .O..}O..YO..}F..
 80aa344:	4f29 080a 4f45 080a 4f37 080a 4f53 080a     )O..EO..7O..SO..
 80aa354:	4f17 080a 4f1b 080a                         .O...O..

080aa35c <_ZTV9USBSerial>:
	...
 80aa364:	5041 080a 50a7 080a 507f 080a 467d 080a     AP...P...P..}F..
 80aa374:	5071 080a 5043 080a 5053 080a 50a1 080a     qP..CP..SP...P..
 80aa384:	5063 080a 503d 080a                         cP..=P..

080aa38c <_ZTVN5spark9WiFiClassE>:
	...
 80aa394:	523f 080a 5235 080a 522b 080a 519d 080a     ?R..5R..+R...Q..
 80aa3a4:	521f 080a 5213 080a 5207 080a 51ff 080a     .R...R...R...Q..
 80aa3b4:	51f5 080a 51eb 080a 51a7 080a               .Q...Q...Q..

080aa3c0 <_ZSt7nothrow>:
 80aa3c0:	0000 0000 6f70 0077 6d66 646f 0066 0000     ....pow.fmodf...
 80aa3d0:	6f6c 6667 0000 0000                         logf....

080aa3d8 <npio2_hw>:
 80aa3d8:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
 80aa3e8:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
 80aa3f8:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
 80aa408:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
 80aa418:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
 80aa428:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
 80aa438:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
 80aa448:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

080aa458 <two_over_pi>:
 80aa458:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
 80aa468:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
 80aa478:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
 80aa488:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
 80aa498:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
 80aa4a8:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
 80aa4b8:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
 80aa4c8:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
 80aa4d8:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
 80aa4e8:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
 80aa4f8:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
 80aa508:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
 80aa518:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
 80aa528:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
 80aa538:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
 80aa548:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
 80aa558:	e27b 0060 8c6b 00c0                         {.`.k...

080aa560 <Zero>:
 80aa560:	0000 0000 0000 8000                         ........

080aa568 <npio2_hw>:
 80aa568:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
 80aa578:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
 80aa588:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
 80aa598:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
 80aa5a8:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
 80aa5b8:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
 80aa5c8:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
 80aa5d8:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

080aa5e8 <two_over_pi>:
 80aa5e8:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
 80aa5f8:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
 80aa608:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
 80aa618:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
 80aa628:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
 80aa638:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
 80aa648:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
 80aa658:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
 80aa668:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
 80aa678:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
 80aa688:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
 80aa698:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
 80aa6a8:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
 80aa6b8:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
 80aa6c8:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
 80aa6d8:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
 80aa6e8:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
 80aa6f8:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
 80aa708:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
 80aa718:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
 80aa728:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
 80aa738:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
 80aa748:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
 80aa758:	00de 0000 0005 0000 0098 0000 000f 0000     ................
 80aa768:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
 80aa778:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
 80aa788:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
 80aa798:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
 80aa7a8:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
 80aa7b8:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
 80aa7c8:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
 80aa7d8:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
 80aa7e8:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
 80aa7f8:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
 80aa808:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
 80aa818:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
 80aa828:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
 80aa838:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
 80aa848:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
 80aa858:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
 80aa868:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
 80aa878:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
 80aa888:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
 80aa898:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
 80aa8a8:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
 80aa8b8:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
 80aa8c8:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
 80aa8d8:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
 80aa8e8:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
 80aa8f8:	008c 0000 006b 0000                         ....k...

080aa900 <PIo2>:
 80aa900:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
 80aa910:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
 80aa920:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
 80aa930:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

080aa940 <init_jk>:
 80aa940:	0002 0000 0003 0000 0004 0000 0006 0000     ................

080aa950 <PIo2>:
 80aa950:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
 80aa960:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
 80aa970:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

080aa97c <init_jk>:
 80aa97c:	0004 0000 0007 0000 0009 0000               ............

080aa988 <TWO52>:
 80aa988:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

080aa998 <link_const_variable_data_end>:
 80aa998:	080a254d 	.word	0x080a254d
 80aa99c:	080a35dd 	.word	0x080a35dd
 80aa9a0:	080a38b9 	.word	0x080a38b9
 80aa9a4:	080a4589 	.word	0x080a4589
 80aa9a8:	080a4669 	.word	0x080a4669
 80aa9ac:	080a4741 	.word	0x080a4741
 80aa9b0:	080a49e9 	.word	0x080a49e9
 80aa9b4:	080a4a99 	.word	0x080a4a99
 80aa9b8:	080a5249 	.word	0x080a5249
 80aa9bc:	080a55c9 	.word	0x080a55c9
