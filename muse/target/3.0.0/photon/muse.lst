
/Users/jasonmerlo/Projects/muse/muse/target/3.0.0/photon/muse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000dfe0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080ae000  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080ae004  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000014b8  2000006c  2000006c  0004006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080ae070  080ae070  0003e070  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080ae098  080ae098  0003e098  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00245942  00000000  00000000  0003e09c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00023699  00000000  00000000  002839de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002dc2d  00000000  00000000  002a7077  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c90  00000000  00000000  002d4ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000079d0  00000000  00000000  002d7934  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035f77  00000000  00000000  002df304  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004f6a4  00000000  00000000  0031527b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ce72c  00000000  00000000  0036491f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000085c8  00000000  00000000  0043304c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f00c fa25 	bl	80ac480 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f00c fa47 	bl	80ac4d0 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080ae004 	.word	0x080ae004
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	2000006c 	.word	0x2000006c
 80a0058:	20001524 	.word	0x20001524
 80a005c:	20001524 	.word	0x20001524

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f007 fb11 	bl	80a7688 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080adfd4 	.word	0x080adfd4
 80a0084:	080adffc 	.word	0x080adffc

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f002 ba4a 	b.w	80a2520 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f002 fb57 	bl	80a2740 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f007 bab9 	b.w	80a760c <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f005 bc01 	b.w	80a58a0 <malloc>

080a009e <_Znaj>:
 80a009e:	f005 bbff 	b.w	80a58a0 <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f005 bc05 	b.w	80a58b0 <free>
	...

080a00a8 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a8:	2100      	movs	r1, #0
 80a00aa:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00ac:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00ae:	4a02      	ldr	r2, [pc, #8]	; (80a00b8 <__cxa_pure_virtual+0x10>)
 80a00b0:	f005 fb0a 	bl	80a56c8 <panic_>
  while (1);
 80a00b4:	e7fe      	b.n	80a00b4 <__cxa_pure_virtual+0xc>
 80a00b6:	bf00      	nop
 80a00b8:	080a53a5 	.word	0x080a53a5

080a00bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00bc:	7800      	ldrb	r0, [r0, #0]
 80a00be:	fab0 f080 	clz	r0, r0
 80a00c2:	0940      	lsrs	r0, r0, #5
 80a00c4:	4770      	bx	lr

080a00c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c6:	2301      	movs	r3, #1
 80a00c8:	7003      	strb	r3, [r0, #0]
 80a00ca:	4770      	bx	lr

080a00cc <_ZN10Bar_Matrix5decayEd>:
/* ================================================================== *
 * Function: decay
 * Description: slowly fades out matrix values
 * Parameters: [float] factor - decay factor to be multiplied by
 * ================================================================== */
void Bar_Matrix::decay(double factor) {
 80a00cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a00d0:	4692      	mov	sl, r2
 80a00d2:	469b      	mov	fp, r3
 80a00d4:	2600      	movs	r6, #0
    for (char i = 0; i < disp_width; i++) {
        for (char j = 0; j < disp_height; j++) {
            unsigned int color = bars[i]->getPixelColor(j);
 80a00d6:	4f28      	ldr	r7, [pc, #160]	; (80a0178 <_ZN10Bar_Matrix5decayEd+0xac>)
void Bar_Matrix::decay(double factor) {
 80a00d8:	b087      	sub	sp, #28
    for (char i = 0; i < disp_width; i++) {
 80a00da:	4a28      	ldr	r2, [pc, #160]	; (80a017c <_ZN10Bar_Matrix5decayEd+0xb0>)
 80a00dc:	b2f3      	uxtb	r3, r6
 80a00de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80a00e2:	4293      	cmp	r3, r2
 80a00e4:	da44      	bge.n	80a0170 <_ZN10Bar_Matrix5decayEd+0xa4>
            unsigned int color = bars[i]->getPixelColor(j);
 80a00e6:	f04f 0900 	mov.w	r9, #0
 80a00ea:	ea4f 0883 	mov.w	r8, r3, lsl #2
        for (char j = 0; j < disp_height; j++) {
 80a00ee:	4b24      	ldr	r3, [pc, #144]	; (80a0180 <_ZN10Bar_Matrix5decayEd+0xb4>)
 80a00f0:	fa5f f489 	uxtb.w	r4, r9
 80a00f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a00f8:	f109 0901 	add.w	r9, r9, #1
 80a00fc:	429c      	cmp	r4, r3
 80a00fe:	da35      	bge.n	80a016c <_ZN10Bar_Matrix5decayEd+0xa0>
            unsigned int color = bars[i]->getPixelColor(j);
 80a0100:	683b      	ldr	r3, [r7, #0]
 80a0102:	b2a4      	uxth	r4, r4
 80a0104:	f853 0008 	ldr.w	r0, [r3, r8]
 80a0108:	4621      	mov	r1, r4
 80a010a:	f003 fbf6 	bl	80a38fa <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
 80a010e:	4605      	mov	r5, r0
            bars[i]->setPixelColor(j, (char)(color >> 16) * factor,
            (char)(color >> 8) * factor,
 80a0110:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80a0114:	f00b fac4 	bl	80ab6a0 <__aeabi_i2d>
 80a0118:	4652      	mov	r2, sl
 80a011a:	465b      	mov	r3, fp
 80a011c:	f00b fb2a 	bl	80ab774 <__aeabi_dmul>
            bars[i]->setPixelColor(j, (char)(color >> 16) * factor,
 80a0120:	f00b fe00 	bl	80abd24 <__aeabi_d2uiz>
 80a0124:	b2c3      	uxtb	r3, r0
 80a0126:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80a012a:	9303      	str	r3, [sp, #12]
 80a012c:	f00b fab8 	bl	80ab6a0 <__aeabi_i2d>
 80a0130:	4652      	mov	r2, sl
 80a0132:	465b      	mov	r3, fp
 80a0134:	f00b fb1e 	bl	80ab774 <__aeabi_dmul>
 80a0138:	f00b fdf4 	bl	80abd24 <__aeabi_d2uiz>
 80a013c:	b2c3      	uxtb	r3, r0
 80a013e:	9304      	str	r3, [sp, #16]
 80a0140:	683b      	ldr	r3, [r7, #0]
            (char)(color) * factor);
 80a0142:	b2e8      	uxtb	r0, r5
            bars[i]->setPixelColor(j, (char)(color >> 16) * factor,
 80a0144:	9305      	str	r3, [sp, #20]
            (char)(color) * factor);
 80a0146:	f00b faab 	bl	80ab6a0 <__aeabi_i2d>
 80a014a:	4652      	mov	r2, sl
 80a014c:	465b      	mov	r3, fp
 80a014e:	f00b fb11 	bl	80ab774 <__aeabi_dmul>
            bars[i]->setPixelColor(j, (char)(color >> 16) * factor,
 80a0152:	f00b fde7 	bl	80abd24 <__aeabi_d2uiz>
 80a0156:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80a015a:	b2c0      	uxtb	r0, r0
 80a015c:	9000      	str	r0, [sp, #0]
 80a015e:	9805      	ldr	r0, [sp, #20]
 80a0160:	4621      	mov	r1, r4
 80a0162:	f850 0008 	ldr.w	r0, [r0, r8]
 80a0166:	f003 fb71 	bl	80a384c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        for (char j = 0; j < disp_height; j++) {
 80a016a:	e7c0      	b.n	80a00ee <_ZN10Bar_Matrix5decayEd+0x22>
    for (char i = 0; i < disp_width; i++) {
 80a016c:	3601      	adds	r6, #1
 80a016e:	e7b4      	b.n	80a00da <_ZN10Bar_Matrix5decayEd+0xe>
        }
    }
}
 80a0170:	b007      	add	sp, #28
 80a0172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0176:	bf00      	nop
 80a0178:	20000070 	.word	0x20000070
 80a017c:	2000007e 	.word	0x2000007e
 80a0180:	2000007c 	.word	0x2000007c

080a0184 <_ZN10Bar_Matrix12decay_to_rgbEdiii>:
 * Parameters: [float] factor - decay factor to be multiplied by
 *             [int] r - the red value to fade to
 *             [int] g - the green value to fade to
 *             [int] b - the blue value to fade to
 * ================================================================== */
void Bar_Matrix::decay_to_rgb(double factor, int r, int g, int b) {
 80a0184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0188:	f04f 0900 	mov.w	r9, #0
 80a018c:	b085      	sub	sp, #20
 80a018e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    for (char i = 0; i < disp_width; i++) {
        for (char j = 0; j < disp_height; j++) {
            unsigned int color = bars[i]->getPixelColor(j);
 80a0192:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 80a0250 <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xcc>
    for (char i = 0; i < disp_width; i++) {
 80a0196:	4b2c      	ldr	r3, [pc, #176]	; (80a0248 <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xc4>)
 80a0198:	fa5f f489 	uxtb.w	r4, r9
 80a019c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a01a0:	429c      	cmp	r4, r3
 80a01a2:	da4d      	bge.n	80a0240 <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xbc>
            unsigned int color = bars[i]->getPixelColor(j);
 80a01a4:	f04f 0a00 	mov.w	sl, #0
 80a01a8:	00a4      	lsls	r4, r4, #2
        for (char j = 0; j < disp_height; j++) {
 80a01aa:	4b28      	ldr	r3, [pc, #160]	; (80a024c <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xc8>)
 80a01ac:	fa5f f58a 	uxtb.w	r5, sl
 80a01b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a01b4:	f10a 0a01 	add.w	sl, sl, #1
 80a01b8:	429d      	cmp	r5, r3
 80a01ba:	da3e      	bge.n	80a023a <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xb6>
            unsigned int color = bars[i]->getPixelColor(j);
 80a01bc:	f8db 3000 	ldr.w	r3, [fp]
 80a01c0:	b2ad      	uxth	r5, r5
 80a01c2:	5918      	ldr	r0, [r3, r4]
 80a01c4:	4629      	mov	r1, r5
 80a01c6:	f003 fb98 	bl	80a38fa <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
 80a01ca:	4680      	mov	r8, r0

            // Decay and do bounds checking on rgb values
            int rx = (int) ((char)(color >> 16) * factor);
 80a01cc:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80a01d0:	f00b fa66 	bl	80ab6a0 <__aeabi_i2d>
 80a01d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a01d8:	f00b facc 	bl	80ab774 <__aeabi_dmul>
 80a01dc:	f00b fd7a 	bl	80abcd4 <__aeabi_d2iz>
 80a01e0:	4606      	mov	r6, r0
            int gx = (int) ((char)(color >>  8) * factor);
 80a01e2:	f3c8 2007 	ubfx	r0, r8, #8, #8
 80a01e6:	f00b fa5b 	bl	80ab6a0 <__aeabi_i2d>
 80a01ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a01ee:	f00b fac1 	bl	80ab774 <__aeabi_dmul>
 80a01f2:	f00b fd6f 	bl	80abcd4 <__aeabi_d2iz>
 80a01f6:	4607      	mov	r7, r0
            int bx = (int) ((char)(color      ) * factor);
 80a01f8:	fa5f f088 	uxtb.w	r0, r8
 80a01fc:	f00b fa50 	bl	80ab6a0 <__aeabi_i2d>
 80a0200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a0204:	f00b fab6 	bl	80ab774 <__aeabi_dmul>
 80a0208:	f00b fd64 	bl	80abcd4 <__aeabi_d2iz>
            if (rx < r) { rx = r; }
            if (gx < g) { gx = g; }
            if (bx < b) { bx = b; }

            bars[i]->setPixelColor(j, rx, gx, bx);
 80a020c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a020e:	429f      	cmp	r7, r3
 80a0210:	bfb8      	it	lt
 80a0212:	461f      	movlt	r7, r3
 80a0214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a0216:	429e      	cmp	r6, r3
 80a0218:	bfb8      	it	lt
 80a021a:	461e      	movlt	r6, r3
 80a021c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a021e:	b2f2      	uxtb	r2, r6
 80a0220:	4283      	cmp	r3, r0
 80a0222:	bfb8      	it	lt
 80a0224:	4603      	movlt	r3, r0
 80a0226:	f8db 0000 	ldr.w	r0, [fp]
 80a022a:	b2d9      	uxtb	r1, r3
 80a022c:	9100      	str	r1, [sp, #0]
 80a022e:	5900      	ldr	r0, [r0, r4]
 80a0230:	4629      	mov	r1, r5
 80a0232:	b2fb      	uxtb	r3, r7
 80a0234:	f003 fb0a 	bl	80a384c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        for (char j = 0; j < disp_height; j++) {
 80a0238:	e7b7      	b.n	80a01aa <_ZN10Bar_Matrix12decay_to_rgbEdiii+0x26>
    for (char i = 0; i < disp_width; i++) {
 80a023a:	f109 0901 	add.w	r9, r9, #1
 80a023e:	e7aa      	b.n	80a0196 <_ZN10Bar_Matrix12decay_to_rgbEdiii+0x12>
        }
    }
}
 80a0240:	b005      	add	sp, #20
 80a0242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0246:	bf00      	nop
 80a0248:	2000007e 	.word	0x2000007e
 80a024c:	2000007c 	.word	0x2000007c
 80a0250:	20000070 	.word	0x20000070

080a0254 <_ZN10Bar_Matrix8fill_barEiiii>:

void Bar_Matrix::fill_bar(int bar, int r, int g, int b) {
 80a0254:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a0258:	4616      	mov	r6, r2
    for (int j =0; j < disp_height; j++) {
 80a025a:	2400      	movs	r4, #0
 80a025c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 80a0290 <_ZN10Bar_Matrix8fill_barEiiii+0x3c>
        bars[bar]->setPixelColor(j, (uint8_t)r, (uint8_t)g, (uint8_t)b);
 80a0260:	f8df 9030 	ldr.w	r9, [pc, #48]	; 80a0294 <_ZN10Bar_Matrix8fill_barEiiii+0x40>
 80a0264:	008d      	lsls	r5, r1, #2
 80a0266:	b2df      	uxtb	r7, r3
    for (int j =0; j < disp_height; j++) {
 80a0268:	f9b8 3000 	ldrsh.w	r3, [r8]
 80a026c:	42a3      	cmp	r3, r4
 80a026e:	dd0c      	ble.n	80a028a <_ZN10Bar_Matrix8fill_barEiiii+0x36>
        bars[bar]->setPixelColor(j, (uint8_t)r, (uint8_t)g, (uint8_t)b);
 80a0270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a0272:	f8d9 0000 	ldr.w	r0, [r9]
 80a0276:	b2db      	uxtb	r3, r3
 80a0278:	9300      	str	r3, [sp, #0]
 80a027a:	b2a1      	uxth	r1, r4
 80a027c:	463b      	mov	r3, r7
 80a027e:	5940      	ldr	r0, [r0, r5]
 80a0280:	b2f2      	uxtb	r2, r6
 80a0282:	f003 fae3 	bl	80a384c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    for (int j =0; j < disp_height; j++) {
 80a0286:	3401      	adds	r4, #1
 80a0288:	e7ee      	b.n	80a0268 <_ZN10Bar_Matrix8fill_barEiiii+0x14>
    }
}
 80a028a:	b003      	add	sp, #12
 80a028c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0290:	2000007c 	.word	0x2000007c
 80a0294:	20000070 	.word	0x20000070

080a0298 <_ZN10Bar_Matrix11fill_matrixE11Color_Value>:
/* ================================================================== *
 * Function: fill_matrix
 * Description: Sets all pixel values in matrix to given color value
 * Parameters: [Color]* color - color to set matrix to
 * ================================================================== */
void Bar_Matrix::fill_matrix(Color_Value c) {
 80a0298:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    for (int i = 0; i < disp_width; i++) {
 80a029c:	2400      	movs	r4, #0
void Bar_Matrix::fill_matrix(Color_Value c) {
 80a029e:	ab02      	add	r3, sp, #8
 80a02a0:	e903 0006 	stmdb	r3, {r1, r2}
    for (int i = 0; i < disp_width; i++) {
 80a02a4:	4e0e      	ldr	r6, [pc, #56]	; (80a02e0 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x48>)
        for (int j =0; j< disp_height; j++) {
            bars[i]->setPixelColor(j, c.c);
 80a02a6:	4f0f      	ldr	r7, [pc, #60]	; (80a02e4 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x4c>)
    for (int i = 0; i < disp_width; i++) {
 80a02a8:	f9b6 3000 	ldrsh.w	r3, [r6]
 80a02ac:	42a3      	cmp	r3, r4
 80a02ae:	dd13      	ble.n	80a02d8 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x40>
        for (int j =0; j< disp_height; j++) {
 80a02b0:	2500      	movs	r5, #0
 80a02b2:	f8df 9034 	ldr.w	r9, [pc, #52]	; 80a02e8 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x50>
 80a02b6:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80a02ba:	f9b9 3000 	ldrsh.w	r3, [r9]
 80a02be:	42ab      	cmp	r3, r5
 80a02c0:	dd08      	ble.n	80a02d4 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x3c>
            bars[i]->setPixelColor(j, c.c);
 80a02c2:	683b      	ldr	r3, [r7, #0]
 80a02c4:	b2a9      	uxth	r1, r5
 80a02c6:	9a00      	ldr	r2, [sp, #0]
 80a02c8:	f853 0008 	ldr.w	r0, [r3, r8]
 80a02cc:	f003 fae7 	bl	80a389e <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        for (int j =0; j< disp_height; j++) {
 80a02d0:	3501      	adds	r5, #1
 80a02d2:	e7f2      	b.n	80a02ba <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x22>
    for (int i = 0; i < disp_width; i++) {
 80a02d4:	3401      	adds	r4, #1
 80a02d6:	e7e7      	b.n	80a02a8 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x10>
        }
    }
}
 80a02d8:	b003      	add	sp, #12
 80a02da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a02de:	bf00      	nop
 80a02e0:	2000007e 	.word	0x2000007e
 80a02e4:	20000070 	.word	0x20000070
 80a02e8:	2000007c 	.word	0x2000007c

080a02ec <_ZN10Bar_Matrix11init_matrixEv>:

/* ================================================================== *
 * Function: init_matrix
 * Description: Initializes the matrix to off
 * ================================================================== */
void Bar_Matrix::init_matrix() {
 80a02ec:	b570      	push	{r4, r5, r6, lr}
    for (int i = 0; i < disp_width; i++) {
 80a02ee:	2400      	movs	r4, #0
 80a02f0:	4e09      	ldr	r6, [pc, #36]	; (80a0318 <_ZN10Bar_Matrix11init_matrixEv+0x2c>)
        // switch height and width based on orientation
        bars[i]->begin();
 80a02f2:	4d0a      	ldr	r5, [pc, #40]	; (80a031c <_ZN10Bar_Matrix11init_matrixEv+0x30>)
    for (int i = 0; i < disp_width; i++) {
 80a02f4:	f9b6 3000 	ldrsh.w	r3, [r6]
 80a02f8:	42a3      	cmp	r3, r4
 80a02fa:	dd0b      	ble.n	80a0314 <_ZN10Bar_Matrix11init_matrixEv+0x28>
        bars[i]->begin();
 80a02fc:	682b      	ldr	r3, [r5, #0]
 80a02fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80a0302:	f002 fb2a 	bl	80a295a <_ZN17Adafruit_NeoPixel5beginEv>
        bars[i]->show();
 80a0306:	682b      	ldr	r3, [r5, #0]
 80a0308:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80a030c:	f002 fb32 	bl	80a2974 <_ZN17Adafruit_NeoPixel4showEv>
    for (int i = 0; i < disp_width; i++) {
 80a0310:	3401      	adds	r4, #1
 80a0312:	e7ef      	b.n	80a02f4 <_ZN10Bar_Matrix11init_matrixEv+0x8>
    }
}
 80a0314:	bd70      	pop	{r4, r5, r6, pc}
 80a0316:	bf00      	nop
 80a0318:	2000007e 	.word	0x2000007e
 80a031c:	20000070 	.word	0x20000070

080a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>:

void Bar_Matrix::mix_pixel(unsigned char bar, unsigned short pixel, float factor, unsigned char r, unsigned char g, unsigned char b) {
 80a0320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0324:	460f      	mov	r7, r1
 80a0326:	4690      	mov	r8, r2
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a0328:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80a03f8 <_ZN10Bar_Matrix9mix_pixelEhtfhhh+0xd8>
void Bar_Matrix::mix_pixel(unsigned char bar, unsigned short pixel, float factor, unsigned char r, unsigned char g, unsigned char b) {
 80a032c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a0330:	f8db 0000 	ldr.w	r0, [fp]
void Bar_Matrix::mix_pixel(unsigned char bar, unsigned short pixel, float factor, unsigned char r, unsigned char g, unsigned char b) {
 80a0334:	461c      	mov	r4, r3
 80a0336:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a033a:	4641      	mov	r1, r8
 80a033c:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
void Bar_Matrix::mix_pixel(unsigned char bar, unsigned short pixel, float factor, unsigned char r, unsigned char g, unsigned char b) {
 80a0340:	9300      	str	r3, [sp, #0]
 80a0342:	9201      	str	r2, [sp, #4]
 80a0344:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a0348:	f003 fad7 	bl	80a38fa <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a034c:	4621      	mov	r1, r4
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a034e:	4606      	mov	r6, r0
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a0350:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a0354:	f00b fd5a 	bl	80abe0c <__aeabi_fsub>
 80a0358:	4605      	mov	r5, r0
    (char)(color >> 8) * (1-factor) + g * factor,
 80a035a:	f3c6 2007 	ubfx	r0, r6, #8, #8
 80a035e:	f00b fe0b 	bl	80abf78 <__aeabi_i2f>
 80a0362:	4629      	mov	r1, r5
 80a0364:	f00b fe5c 	bl	80ac020 <__aeabi_fmul>
 80a0368:	4681      	mov	r9, r0
 80a036a:	4650      	mov	r0, sl
 80a036c:	f00b fe04 	bl	80abf78 <__aeabi_i2f>
 80a0370:	4621      	mov	r1, r4
 80a0372:	f00b fe55 	bl	80ac020 <__aeabi_fmul>
 80a0376:	4601      	mov	r1, r0
 80a0378:	4648      	mov	r0, r9
 80a037a:	f00b fd49 	bl	80abe10 <__addsf3>
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a037e:	f00c f851 	bl	80ac424 <__aeabi_f2uiz>
 80a0382:	fa5f fa80 	uxtb.w	sl, r0
 80a0386:	f3c6 4007 	ubfx	r0, r6, #16, #8
 80a038a:	f00b fdf5 	bl	80abf78 <__aeabi_i2f>
 80a038e:	4629      	mov	r1, r5
 80a0390:	f00b fe46 	bl	80ac020 <__aeabi_fmul>
 80a0394:	9a01      	ldr	r2, [sp, #4]
 80a0396:	4681      	mov	r9, r0
 80a0398:	4610      	mov	r0, r2
 80a039a:	f00b fded 	bl	80abf78 <__aeabi_i2f>
 80a039e:	4621      	mov	r1, r4
 80a03a0:	f00b fe3e 	bl	80ac020 <__aeabi_fmul>
 80a03a4:	4601      	mov	r1, r0
 80a03a6:	4648      	mov	r0, r9
 80a03a8:	f00b fd32 	bl	80abe10 <__addsf3>
 80a03ac:	f00c f83a 	bl	80ac424 <__aeabi_f2uiz>
 80a03b0:	fa5f f980 	uxtb.w	r9, r0
    (char)(color) * (1-factor) + b * factor);
 80a03b4:	b2f0      	uxtb	r0, r6
 80a03b6:	f00b fddf 	bl	80abf78 <__aeabi_i2f>
 80a03ba:	4629      	mov	r1, r5
 80a03bc:	f00b fe30 	bl	80ac020 <__aeabi_fmul>
 80a03c0:	9b00      	ldr	r3, [sp, #0]
 80a03c2:	4605      	mov	r5, r0
 80a03c4:	4618      	mov	r0, r3
 80a03c6:	f00b fdd7 	bl	80abf78 <__aeabi_i2f>
 80a03ca:	4621      	mov	r1, r4
 80a03cc:	f00b fe28 	bl	80ac020 <__aeabi_fmul>
 80a03d0:	4601      	mov	r1, r0
 80a03d2:	4628      	mov	r0, r5
 80a03d4:	f00b fd1c 	bl	80abe10 <__addsf3>
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a03d8:	f00c f824 	bl	80ac424 <__aeabi_f2uiz>
 80a03dc:	4653      	mov	r3, sl
 80a03de:	464a      	mov	r2, r9
 80a03e0:	4641      	mov	r1, r8
 80a03e2:	f8db b000 	ldr.w	fp, [fp]
 80a03e6:	b2c0      	uxtb	r0, r0
 80a03e8:	900c      	str	r0, [sp, #48]	; 0x30
 80a03ea:	f85b 0027 	ldr.w	r0, [fp, r7, lsl #2]
}
 80a03ee:	b003      	add	sp, #12
 80a03f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a03f4:	f003 ba2a 	b.w	80a384c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
 80a03f8:	20000070 	.word	0x20000070

080a03fc <_ZN10Bar_Matrix12clear_matrixEv>:

/* ================================================================== *
 * Function: clear_matrix
 * Description: Sets all pixel values to (0, 0, 0)
 * ================================================================== */
void Bar_Matrix::clear_matrix() {
 80a03fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for (int i = 0; i < disp_width; i++) {
 80a0400:	2400      	movs	r4, #0
 80a0402:	4e0e      	ldr	r6, [pc, #56]	; (80a043c <_ZN10Bar_Matrix12clear_matrixEv+0x40>)
        for (int j =0; j< disp_height; j++) {
            bars[i]->setPixelColor(j, 0);
 80a0404:	4f0e      	ldr	r7, [pc, #56]	; (80a0440 <_ZN10Bar_Matrix12clear_matrixEv+0x44>)
    for (int i = 0; i < disp_width; i++) {
 80a0406:	f9b6 3000 	ldrsh.w	r3, [r6]
 80a040a:	42a3      	cmp	r3, r4
 80a040c:	dd13      	ble.n	80a0436 <_ZN10Bar_Matrix12clear_matrixEv+0x3a>
        for (int j =0; j< disp_height; j++) {
 80a040e:	2500      	movs	r5, #0
 80a0410:	f8df 9030 	ldr.w	r9, [pc, #48]	; 80a0444 <_ZN10Bar_Matrix12clear_matrixEv+0x48>
 80a0414:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80a0418:	f9b9 3000 	ldrsh.w	r3, [r9]
 80a041c:	42ab      	cmp	r3, r5
 80a041e:	dd08      	ble.n	80a0432 <_ZN10Bar_Matrix12clear_matrixEv+0x36>
            bars[i]->setPixelColor(j, 0);
 80a0420:	683b      	ldr	r3, [r7, #0]
 80a0422:	b2a9      	uxth	r1, r5
 80a0424:	2200      	movs	r2, #0
 80a0426:	f853 0008 	ldr.w	r0, [r3, r8]
 80a042a:	f003 fa38 	bl	80a389e <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        for (int j =0; j< disp_height; j++) {
 80a042e:	3501      	adds	r5, #1
 80a0430:	e7f2      	b.n	80a0418 <_ZN10Bar_Matrix12clear_matrixEv+0x1c>
    for (int i = 0; i < disp_width; i++) {
 80a0432:	3401      	adds	r4, #1
 80a0434:	e7e7      	b.n	80a0406 <_ZN10Bar_Matrix12clear_matrixEv+0xa>
        }
    }
}
 80a0436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a043a:	bf00      	nop
 80a043c:	2000007e 	.word	0x2000007e
 80a0440:	20000070 	.word	0x20000070
 80a0444:	2000007c 	.word	0x2000007c

080a0448 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection>:
Bar_Matrix::Bar_Matrix(short num_bars, short bar_len, const char led_type, const char* pins, Beat_Detection* beat_detection) {
 80a0448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a044c:	4604      	mov	r4, r0
 80a044e:	b097      	sub	sp, #92	; 0x5c
 80a0450:	f500 70cc 	add.w	r0, r0, #408	; 0x198
 80a0454:	460d      	mov	r5, r1
 80a0456:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a045a:	f003 fb19 	bl	80a3a90 <_ZN10PongPaddleC1Ev>
 80a045e:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
 80a0462:	f003 fb15 	bl	80a3a90 <_ZN10PongPaddleC1Ev>
 80a0466:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
 80a046a:	f003 fa8d 	bl	80a3988 <_ZN8PongBallC1Ev>
    disp_height = bar_len; //(orientation) ? bar_len : num_bars;
 80a046e:	4b96      	ldr	r3, [pc, #600]	; (80a06c8 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x280>)
 80a0470:	9908      	ldr	r1, [sp, #32]
    disp_width = num_bars; //(orientation) ? num_bars : bar_len;
 80a0472:	4a96      	ldr	r2, [pc, #600]	; (80a06cc <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x284>)
    disp_height = bar_len; //(orientation) ? bar_len : num_bars;
 80a0474:	8019      	strh	r1, [r3, #0]
    display = new unsigned long*[disp_width];
 80a0476:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
 80a047a:	428d      	cmp	r5, r1
 80a047c:	bf2c      	ite	cs
 80a047e:	f04f 3aff 	movcs.w	sl, #4294967295	; 0xffffffff
 80a0482:	ea4f 0a85 	movcc.w	sl, r5, lsl #2
 80a0486:	4650      	mov	r0, sl
 80a0488:	4690      	mov	r8, r2
 80a048a:	4699      	mov	r9, r3
    disp_width = num_bars; //(orientation) ? num_bars : bar_len;
 80a048c:	8015      	strh	r5, [r2, #0]
    display = new unsigned long*[disp_width];
 80a048e:	f7ff fe06 	bl	80a009e <_Znaj>
    for (int i = 0; i < disp_width; i++)
 80a0492:	2600      	movs	r6, #0
    display[i] = new unsigned long[disp_height];
 80a0494:	f06f 4b60 	mvn.w	fp, #3758096384	; 0xe0000000
    display = new unsigned long*[disp_width];
 80a0498:	4f8d      	ldr	r7, [pc, #564]	; (80a06d0 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x288>)
 80a049a:	6038      	str	r0, [r7, #0]
    for (int i = 0; i < disp_width; i++)
 80a049c:	f9b8 2000 	ldrsh.w	r2, [r8]
 80a04a0:	42b2      	cmp	r2, r6
 80a04a2:	dd0f      	ble.n	80a04c4 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x7c>
    display[i] = new unsigned long[disp_height];
 80a04a4:	f9b9 0000 	ldrsh.w	r0, [r9]
 80a04a8:	683b      	ldr	r3, [r7, #0]
 80a04aa:	4558      	cmp	r0, fp
 80a04ac:	bf2c      	ite	cs
 80a04ae:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a04b2:	0080      	lslcc	r0, r0, #2
 80a04b4:	9307      	str	r3, [sp, #28]
 80a04b6:	f7ff fdf2 	bl	80a009e <_Znaj>
 80a04ba:	9b07      	ldr	r3, [sp, #28]
 80a04bc:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    for (int i = 0; i < disp_width; i++)
 80a04c0:	3601      	adds	r6, #1
 80a04c2:	e7eb      	b.n	80a049c <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x54>
    bars = new Adafruit_NeoPixel*[num_bars];
 80a04c4:	4650      	mov	r0, sl
 80a04c6:	f7ff fdea 	bl	80a009e <_Znaj>
 80a04ca:	4b82      	ldr	r3, [pc, #520]	; (80a06d4 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x28c>)
 80a04cc:	4626      	mov	r6, r4
 80a04ce:	2700      	movs	r7, #0
 80a04d0:	469a      	mov	sl, r3
        bouncing_line_speeds[i] = (float)random(5, 10) / 15.0;
 80a04d2:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80a06ec <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x2a4>
        bouncing_line_colors[i][0] = bd->r();
 80a04d6:	f8df b210 	ldr.w	fp, [pc, #528]	; 80a06e8 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x2a0>
    bars = new Adafruit_NeoPixel*[num_bars];
 80a04da:	6018      	str	r0, [r3, #0]
    for(short i = 0; i < num_bars; i++) {
 80a04dc:	f1a4 0804 	sub.w	r8, r4, #4
 80a04e0:	b23b      	sxth	r3, r7
 80a04e2:	429d      	cmp	r5, r3
 80a04e4:	dd49      	ble.n	80a057a <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x132>
        bars[i] = new Adafruit_NeoPixel(bar_len, pins[i], led_type);
 80a04e6:	2010      	movs	r0, #16
 80a04e8:	f7ff fdd7 	bl	80a009a <_Znwj>
 80a04ec:	9007      	str	r0, [sp, #28]
 80a04ee:	b130      	cbz	r0, 80a04fe <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0xb6>
 80a04f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80a04f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a04f4:	5dd2      	ldrb	r2, [r2, r7]
 80a04f6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80a04fa:	f002 fa17 	bl	80a292c <_ZN17Adafruit_NeoPixelC1Ethh>
 80a04fe:	f8da 3000 	ldr.w	r3, [sl]
 80a0502:	9a07      	ldr	r2, [sp, #28]
        bouncing_line_lengths[i] = random(10, STRIP_LENGTH / 2);
 80a0504:	211d      	movs	r1, #29
        bars[i] = new Adafruit_NeoPixel(bar_len, pins[i], led_type);
 80a0506:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
        bouncing_line_lengths[i] = random(10, STRIP_LENGTH / 2);
 80a050a:	200a      	movs	r0, #10
 80a050c:	f005 fe63 	bl	80a61d6 <_Z6randomii>
        bouncing_line_positions[i] = random(0, STRIP_LENGTH);
 80a0510:	213a      	movs	r1, #58	; 0x3a
        bouncing_line_lengths[i] = random(10, STRIP_LENGTH / 2);
 80a0512:	f848 0f04 	str.w	r0, [r8, #4]!
        bouncing_line_positions[i] = random(0, STRIP_LENGTH);
 80a0516:	2000      	movs	r0, #0
 80a0518:	f005 fe5d 	bl	80a61d6 <_Z6randomii>
 80a051c:	f00b fd2c 	bl	80abf78 <__aeabi_i2f>
        if (random(0, 10) > 5) bouncing_line_directions[i] = 1;
 80a0520:	210a      	movs	r1, #10
        bouncing_line_positions[i] = random(0, STRIP_LENGTH);
 80a0522:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
        if (random(0, 10) > 5) bouncing_line_directions[i] = 1;
 80a0526:	2000      	movs	r0, #0
 80a0528:	f005 fe55 	bl	80a61d6 <_Z6randomii>
        else                bouncing_line_directions[i] = -1;
 80a052c:	2805      	cmp	r0, #5
 80a052e:	bfcc      	ite	gt
 80a0530:	2301      	movgt	r3, #1
 80a0532:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
        bouncing_line_speeds[i] = (float)random(5, 10) / 15.0;
 80a0536:	210a      	movs	r1, #10
 80a0538:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
 80a053c:	2005      	movs	r0, #5
 80a053e:	f005 fe4a 	bl	80a61d6 <_Z6randomii>
 80a0542:	f00b fd19 	bl	80abf78 <__aeabi_i2f>
 80a0546:	4649      	mov	r1, r9
 80a0548:	f00b fe1e 	bl	80ac188 <__aeabi_fdiv>
 80a054c:	f8c8 0050 	str.w	r0, [r8, #80]	; 0x50
        bouncing_line_colors[i][0] = bd->r();
 80a0550:	f8db 0000 	ldr.w	r0, [fp]
 80a0554:	f001 fea5 	bl	80a22a2 <_ZN14Beat_Detection1rEv>
 80a0558:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
        bouncing_line_colors[i][1] = bd->g();
 80a055c:	f8db 0000 	ldr.w	r0, [fp]
 80a0560:	f001 fea1 	bl	80a22a6 <_ZN14Beat_Detection1gEv>
 80a0564:	f8c6 00a4 	str.w	r0, [r6, #164]	; 0xa4
        bouncing_line_colors[i][2] = bd->b();
 80a0568:	f8db 0000 	ldr.w	r0, [fp]
 80a056c:	f001 fe9d 	bl	80a22aa <_ZN14Beat_Detection1bEv>
 80a0570:	3701      	adds	r7, #1
 80a0572:	f8c6 00a8 	str.w	r0, [r6, #168]	; 0xa8
    for(short i = 0; i < num_bars; i++) {
 80a0576:	360c      	adds	r6, #12
 80a0578:	e7b2      	b.n	80a04e0 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x98>
    snakes[0] = Snake(1, 30, -30, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a057a:	2301      	movs	r3, #1
 80a057c:	2519      	movs	r5, #25
 80a057e:	2132      	movs	r1, #50	; 0x32
 80a0580:	221e      	movs	r2, #30
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0582:	2764      	movs	r7, #100	; 0x64
    snakes[0] = Snake(1, 30, -30, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0584:	e9c4 3246 	strd	r3, r2, [r4, #280]	; 0x118
 80a0588:	e9c4 514b 	strd	r5, r1, [r4, #300]	; 0x12c
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a058c:	204b      	movs	r0, #75	; 0x4b
 80a058e:	f8c4 114c 	str.w	r1, [r4, #332]	; 0x14c
    snakes[0] = Snake(1, 30, -30, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0592:	f06f 021d 	mvn.w	r2, #29
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0596:	2196      	movs	r1, #150	; 0x96
    snakes[0] = Snake(1, 30, -30, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0598:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a059c:	e9c4 7154 	strd	r7, r1, [r4, #336]	; 0x150
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05a0:	e9c4 015b 	strd	r0, r1, [r4, #364]	; 0x16c
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05a8:	21e1      	movs	r1, #225	; 0xe1
    snakes[3] = Snake(-1, 15, NUM_BARS*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05aa:	f04f 0a0f 	mov.w	sl, #15
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05ae:	e9c4 024d 	strd	r0, r2, [r4, #308]	; 0x134
    snakes[3] = Snake(-1, 15, NUM_BARS*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05b2:	e9c4 125d 	strd	r1, r2, [r4, #372]	; 0x174
 80a05b6:	f44f 7211 	mov.w	r2, #580	; 0x244
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05ba:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
 80a05be:	f44f 7591 	mov.w	r5, #290	; 0x122
    snakes[3] = Snake(-1, 15, NUM_BARS*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05c2:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
 80a05c6:	e9c4 a25f 	strd	sl, r2, [r4, #380]	; 0x17c
 80a05ca:	222e      	movs	r2, #46	; 0x2e
    snakes[0].posTicks = 0;
 80a05cc:	f04f 0800 	mov.w	r8, #0
    pongPaddles[0] = PongPaddle(15, 0, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a05d0:	f04f 0900 	mov.w	r9, #0
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05d4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05d8:	2614      	movs	r6, #20
 80a05da:	25b9      	movs	r5, #185	; 0xb9
    color_table_idx++;
 80a05dc:	2104      	movs	r1, #4
    snakes[3] = Snake(-1, 15, NUM_BARS*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05de:	e9c4 c264 	strd	ip, r2, [r4, #400]	; 0x190
    pongPaddles[0] = PongPaddle(15, 0, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a05e2:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80a06f0 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x2a8>
    color_table_idx++;
 80a05e6:	4a3c      	ldr	r2, [pc, #240]	; (80a06d8 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x290>)
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05e8:	e9c4 6557 	strd	r6, r5, [r4, #348]	; 0x15c
    snakes[0].ticksNeeded = 1;
 80a05ec:	e9c4 8349 	strd	r8, r3, [r4, #292]	; 0x124
    snakes[1].ticksNeeded = 1;
 80a05f0:	e9c4 8351 	strd	r8, r3, [r4, #324]	; 0x144
    snakes[2].ticksNeeded = 1;
 80a05f4:	e9c4 8359 	strd	r8, r3, [r4, #356]	; 0x164
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05f8:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
    snakes[3] = Snake(-1, 15, NUM_BARS*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05fc:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    color_table_idx++;
 80a0600:	6011      	str	r1, [r2, #0]
    pongPaddles[0] = PongPaddle(15, 0, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a0602:	a80a      	add	r0, sp, #40	; 0x28
    snakes[3].ticksNeeded = 1;
 80a0604:	e9c4 8361 	strd	r8, r3, [r4, #388]	; 0x184
    pongPaddles[0] = PongPaddle(15, 0, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a0608:	464a      	mov	r2, r9
 80a060a:	4651      	mov	r1, sl
 80a060c:	e9cd 7704 	strd	r7, r7, [sp, #16]
 80a0610:	e9cd a702 	strd	sl, r7, [sp, #8]
 80a0614:	4b31      	ldr	r3, [pc, #196]	; (80a06dc <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x294>)
 80a0616:	f8cd b004 	str.w	fp, [sp, #4]
 80a061a:	f8cd 9000 	str.w	r9, [sp]
 80a061e:	f504 76cc 	add.w	r6, r4, #408	; 0x198
 80a0622:	ad0a      	add	r5, sp, #40	; 0x28
 80a0624:	f003 fa35 	bl	80a3a92 <_ZN10PongPaddleC1Eiffffjiii>
 80a0628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a062a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a062c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a062e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a0630:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80a0634:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    pongPaddles[1] = PongPaddle(15, NUM_BARS-1, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a0638:	4651      	mov	r1, sl
 80a063a:	4b28      	ldr	r3, [pc, #160]	; (80a06dc <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x294>)
 80a063c:	4a28      	ldr	r2, [pc, #160]	; (80a06e0 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x298>)
 80a063e:	f8cd b004 	str.w	fp, [sp, #4]
 80a0642:	f8cd 9000 	str.w	r9, [sp]
 80a0646:	a80a      	add	r0, sp, #40	; 0x28
 80a0648:	e9cd 7704 	strd	r7, r7, [sp, #16]
 80a064c:	e9cd a702 	strd	sl, r7, [sp, #8]
 80a0650:	f504 76e4 	add.w	r6, r4, #456	; 0x1c8
 80a0654:	f003 fa1d 	bl	80a3a92 <_ZN10PongPaddleC1Eiffffjiii>
 80a0658:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80a065c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80a0660:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a0662:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80a0666:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a0668:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80a066c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    pongBall = PongBall(3, 0.0625, 0.80, 15, 100, 100, 100);
 80a0670:	e9cd 7702 	strd	r7, r7, [sp, #8]
 80a0674:	e9cd a700 	strd	sl, r7, [sp]
 80a0678:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 80a067c:	2103      	movs	r1, #3
 80a067e:	4b19      	ldr	r3, [pc, #100]	; (80a06e4 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x29c>)
 80a0680:	a80a      	add	r0, sp, #40	; 0x28
 80a0682:	f504 77fc 	add.w	r7, r4, #504	; 0x1f8
 80a0686:	ae0a      	add	r6, sp, #40	; 0x28
 80a0688:	f003 f980 	bl	80a398c <_ZN8PongBallC1Eiffjiii>
 80a068c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a068e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80a0690:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a0692:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80a0694:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80a0698:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    last_beat_count = 0;
 80a069c:	f8c4 8228 	str.w	r8, [r4, #552]	; 0x228

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a06a0:	f004 fe90 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
    bass_slide_ema = 0.0;
 80a06a4:	f8c4 9254 	str.w	r9, [r4, #596]	; 0x254
    bass_slide_millis = millis();
 80a06a8:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    init_matrix();
 80a06ac:	4620      	mov	r0, r4
 80a06ae:	f7ff fe1d 	bl	80a02ec <_ZN10Bar_Matrix11init_matrixEv>
    clear_matrix();
 80a06b2:	4620      	mov	r0, r4
 80a06b4:	f7ff fea2 	bl	80a03fc <_ZN10Bar_Matrix12clear_matrixEv>
}
 80a06b8:	4620      	mov	r0, r4
    bd = beat_detection;
 80a06ba:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80a06bc:	4b0a      	ldr	r3, [pc, #40]	; (80a06e8 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x2a0>)
 80a06be:	601a      	str	r2, [r3, #0]
}
 80a06c0:	b017      	add	sp, #92	; 0x5c
 80a06c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a06c6:	bf00      	nop
 80a06c8:	2000007c 	.word	0x2000007c
 80a06cc:	2000007e 	.word	0x2000007e
 80a06d0:	20000080 	.word	0x20000080
 80a06d4:	20000070 	.word	0x20000070
 80a06d8:	20000078 	.word	0x20000078
 80a06dc:	41e80000 	.word	0x41e80000
 80a06e0:	41100000 	.word	0x41100000
 80a06e4:	3f4ccccd 	.word	0x3f4ccccd
 80a06e8:	20000074 	.word	0x20000074
 80a06ec:	41700000 	.word	0x41700000
 80a06f0:	3f666666 	.word	0x3f666666

080a06f4 <_ZN10Bar_Matrix8show_allEv>:

/* ================================================================== *
 * Function: show_all
 * Description: drives pixels in physical matrix to current values
 * ================================================================== */
void Bar_Matrix::show_all() {
 80a06f4:	2300      	movs	r3, #0
 80a06f6:	b570      	push	{r4, r5, r6, lr}
    for (char i = 0; i < disp_width; i++) {
 80a06f8:	4e07      	ldr	r6, [pc, #28]	; (80a0718 <_ZN10Bar_Matrix8show_allEv+0x24>)
        bars[i]->show();
 80a06fa:	4d08      	ldr	r5, [pc, #32]	; (80a071c <_ZN10Bar_Matrix8show_allEv+0x28>)
    for (char i = 0; i < disp_width; i++) {
 80a06fc:	f9b6 2000 	ldrsh.w	r2, [r6]
 80a0700:	1c5c      	adds	r4, r3, #1
 80a0702:	b2db      	uxtb	r3, r3
 80a0704:	4293      	cmp	r3, r2
 80a0706:	da06      	bge.n	80a0716 <_ZN10Bar_Matrix8show_allEv+0x22>
        bars[i]->show();
 80a0708:	682a      	ldr	r2, [r5, #0]
 80a070a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80a070e:	f002 f931 	bl	80a2974 <_ZN17Adafruit_NeoPixel4showEv>
    for (char i = 0; i < disp_width; i++) {
 80a0712:	4623      	mov	r3, r4
 80a0714:	e7f2      	b.n	80a06fc <_ZN10Bar_Matrix8show_allEv+0x8>
    }
}
 80a0716:	bd70      	pop	{r4, r5, r6, pc}
 80a0718:	2000007e 	.word	0x2000007e
 80a071c:	20000070 	.word	0x20000070

080a0720 <_ZN10Bar_Matrix8bar_testEv>:
/* ================================================================== *
 * Function: bar_test
 * Description: Turns on bars in order to test wiring
 * Parameters: None
 * ================================================================== */
void Bar_Matrix::bar_test() {
 80a0720:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    for (int i = 0; i < STRIP_LENGTH; i++)
 80a0724:	2400      	movs	r4, #0
    bars[int(millis()/1000) % NUM_BARS]->setPixelColor(i, 64, 64, 64);
 80a0726:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80a072a:	250a      	movs	r5, #10
 80a072c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 80a0760 <_ZN10Bar_Matrix8bar_testEv+0x40>
 80a0730:	f8d8 6000 	ldr.w	r6, [r8]
 80a0734:	f004 fe46 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
 80a0738:	fbb0 f0f7 	udiv	r0, r0, r7
 80a073c:	fbb0 f3f5 	udiv	r3, r0, r5
 80a0740:	fb05 0013 	mls	r0, r5, r3, r0
 80a0744:	2340      	movs	r3, #64	; 0x40
 80a0746:	9300      	str	r3, [sp, #0]
 80a0748:	b2a1      	uxth	r1, r4
 80a074a:	461a      	mov	r2, r3
 80a074c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
    for (int i = 0; i < STRIP_LENGTH; i++)
 80a0750:	3401      	adds	r4, #1
    bars[int(millis()/1000) % NUM_BARS]->setPixelColor(i, 64, 64, 64);
 80a0752:	f003 f87b 	bl	80a384c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    for (int i = 0; i < STRIP_LENGTH; i++)
 80a0756:	2c3a      	cmp	r4, #58	; 0x3a
 80a0758:	d1ea      	bne.n	80a0730 <_ZN10Bar_Matrix8bar_testEv+0x10>
}
 80a075a:	b002      	add	sp, #8
 80a075c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0760:	20000070 	.word	0x20000070

080a0764 <_ZN10Bar_Matrix14bouncing_linesEv>:
/* ================================================================== *
 * Function: bouncing_lines
 * Description: Bounces a solid line of LEDs up and down in each matrix bar
 * Parameters: none
 * ================================================================== */
void Bar_Matrix::bouncing_lines() {
 80a0764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0768:	4606      	mov	r6, r0
 80a076a:	4605      	mov	r5, r0
    for (int i = 0; i < disp_width; i++) {
 80a076c:	2700      	movs	r7, #0
        if (bouncing_line_directions[i] == 1) {
            if (bottom > 0) mix_pixel(i, bottom-1, 1, 0, 0, 0);
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, bouncing_line_colors[i][0], bouncing_line_colors[i][1], bouncing_line_colors[i][2]);//bd->r(), bd->g(), bd->b());
        } else {
            if (bottom > 0) mix_pixel(i, bottom-1, 1, bouncing_line_colors[i][0], bouncing_line_colors[i][1], bouncing_line_colors[i][2]);//bd->r(), bd->g(), bd->b());
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, 0, 0, 0);
 80a076e:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
void Bar_Matrix::bouncing_lines() {
 80a0772:	b087      	sub	sp, #28
 80a0774:	1f04      	subs	r4, r0, #4
    for (int i = 0; i < disp_width; i++) {
 80a0776:	4b6d      	ldr	r3, [pc, #436]	; (80a092c <_ZN10Bar_Matrix14bouncing_linesEv+0x1c8>)
 80a0778:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a077c:	42bb      	cmp	r3, r7
 80a077e:	f340 80d1 	ble.w	80a0924 <_ZN10Bar_Matrix14bouncing_linesEv+0x1c0>
        int bottom = bouncing_line_positions[i];
 80a0782:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a0784:	f00b fe28 	bl	80ac3d8 <__aeabi_f2iz>
        if (bouncing_line_directions[i] == 1) {
 80a0788:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80a078a:	fa5f f987 	uxtb.w	r9, r7
 80a078e:	2b01      	cmp	r3, #1
 80a0790:	fa1f f880 	uxth.w	r8, r0
 80a0794:	f040 8091 	bne.w	80a08ba <_ZN10Bar_Matrix14bouncing_linesEv+0x156>
            if (bottom > 0) mix_pixel(i, bottom-1, 1, 0, 0, 0);
 80a0798:	2800      	cmp	r0, #0
 80a079a:	dd0b      	ble.n	80a07b4 <_ZN10Bar_Matrix14bouncing_linesEv+0x50>
 80a079c:	2300      	movs	r3, #0
 80a079e:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80a07a2:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a07a6:	9300      	str	r3, [sp, #0]
 80a07a8:	4649      	mov	r1, r9
 80a07aa:	4653      	mov	r3, sl
 80a07ac:	4630      	mov	r0, r6
 80a07ae:	b292      	uxth	r2, r2
 80a07b0:	f7ff fdb6 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, bouncing_line_colors[i][0], bouncing_line_colors[i][1], bouncing_line_colors[i][2]);//bd->r(), bd->g(), bd->b());
 80a07b4:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
 80a07b8:	6862      	ldr	r2, [r4, #4]
 80a07ba:	9302      	str	r3, [sp, #8]
 80a07bc:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
 80a07c0:	3201      	adds	r2, #1
 80a07c2:	9301      	str	r3, [sp, #4]
 80a07c4:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
 80a07c8:	4442      	add	r2, r8
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, 0, 0, 0);
 80a07ca:	b292      	uxth	r2, r2
 80a07cc:	4649      	mov	r1, r9
 80a07ce:	4630      	mov	r0, r6
 80a07d0:	9300      	str	r3, [sp, #0]
 80a07d2:	4653      	mov	r3, sl
 80a07d4:	f7ff fda4 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        }

        // Move the line
        bouncing_line_positions[i] += bouncing_line_directions[i] * bouncing_line_speeds[i];
 80a07d8:	f8d4 b07c 	ldr.w	fp, [r4, #124]	; 0x7c
 80a07dc:	4658      	mov	r0, fp
 80a07de:	f00b fbcb 	bl	80abf78 <__aeabi_i2f>
 80a07e2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80a07e4:	f00b fc1c 	bl	80ac020 <__aeabi_fmul>
 80a07e8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80a07ea:	f00b fb11 	bl	80abe10 <__addsf3>
 80a07ee:	62e0      	str	r0, [r4, #44]	; 0x2c

        // Ensure we are moving in the proper direction
        if (bouncing_line_positions[i] < -.5*bouncing_line_lengths[i] && bouncing_line_directions[i] < 0) {
 80a07f0:	f00a ff68 	bl	80ab6c4 <__aeabi_f2d>
 80a07f4:	4680      	mov	r8, r0
 80a07f6:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80a07fa:	4689      	mov	r9, r1
 80a07fc:	f00a ff50 	bl	80ab6a0 <__aeabi_i2d>
 80a0800:	4602      	mov	r2, r0
 80a0802:	460b      	mov	r3, r1
 80a0804:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a0808:	2200      	movs	r2, #0
 80a080a:	4b49      	ldr	r3, [pc, #292]	; (80a0930 <_ZN10Bar_Matrix14bouncing_linesEv+0x1cc>)
 80a080c:	f00a ffb2 	bl	80ab774 <__aeabi_dmul>
 80a0810:	4602      	mov	r2, r0
 80a0812:	460b      	mov	r3, r1
 80a0814:	4640      	mov	r0, r8
 80a0816:	4649      	mov	r1, r9
 80a0818:	f00b fa1e 	bl	80abc58 <__aeabi_dcmplt>
 80a081c:	2800      	cmp	r0, #0
 80a081e:	d066      	beq.n	80a08ee <_ZN10Bar_Matrix14bouncing_linesEv+0x18a>
 80a0820:	f1bb 0f00 	cmp.w	fp, #0
 80a0824:	da63      	bge.n	80a08ee <_ZN10Bar_Matrix14bouncing_linesEv+0x18a>
            bouncing_line_directions[i] = 1;
 80a0826:	2301      	movs	r3, #1
            if (random(0, 10) > 5) {
 80a0828:	210a      	movs	r1, #10
 80a082a:	2000      	movs	r0, #0
            bouncing_line_directions[i] = 1;
 80a082c:	67a3      	str	r3, [r4, #120]	; 0x78
            if (random(0, 10) > 5) {
 80a082e:	f005 fcd2 	bl	80a61d6 <_Z6randomii>
 80a0832:	2805      	cmp	r0, #5
 80a0834:	dd1a      	ble.n	80a086c <_ZN10Bar_Matrix14bouncing_linesEv+0x108>
                int newlength = random(10, STRIP_LENGTH / 2);
 80a0836:	211d      	movs	r1, #29
 80a0838:	200a      	movs	r0, #10
 80a083a:	f005 fccc 	bl	80a61d6 <_Z6randomii>
                if (newlength > bouncing_line_lengths[i]) {
 80a083e:	6822      	ldr	r2, [r4, #0]
 80a0840:	0fc3      	lsrs	r3, r0, #31
 80a0842:	4282      	cmp	r2, r0
                    bouncing_line_positions[i] = (-1*newlength/2) - (newlength/2 - bouncing_line_lengths[i]/2);
 80a0844:	4403      	add	r3, r0
 80a0846:	bfb8      	it	lt
 80a0848:	eb02 72d2 	addlt.w	r2, r2, r2, lsr #31
                int newlength = random(10, STRIP_LENGTH / 2);
 80a084c:	4680      	mov	r8, r0
                    bouncing_line_positions[i] = (-1*newlength/2) - (newlength/2 - bouncing_line_lengths[i]/2);
 80a084e:	bfb8      	it	lt
 80a0850:	1052      	asrlt	r2, r2, #1
 80a0852:	ea4f 0063 	mov.w	r0, r3, asr #1
 80a0856:	f1c0 0000 	rsb	r0, r0, #0
 80a085a:	bfbc      	itt	lt
 80a085c:	ebc2 0363 	rsblt	r3, r2, r3, asr #1
 80a0860:	1ac0      	sublt	r0, r0, r3
                } else {
                    bouncing_line_positions[i] = -1 * newlength / 2;
 80a0862:	f00b fb89 	bl	80abf78 <__aeabi_i2f>
                }

                bouncing_line_lengths[i] = newlength;
 80a0866:	f8c4 8000 	str.w	r8, [r4]
 80a086a:	62a0      	str	r0, [r4, #40]	; 0x28
            }

            if (random(0, 10) > 7) {
 80a086c:	210a      	movs	r1, #10
 80a086e:	2000      	movs	r0, #0
 80a0870:	f005 fcb1 	bl	80a61d6 <_Z6randomii>
 80a0874:	2807      	cmp	r0, #7
 80a0876:	dd09      	ble.n	80a088c <_ZN10Bar_Matrix14bouncing_linesEv+0x128>
                bouncing_line_speeds[i] = (float)random(5, 10) / 15.0;
 80a0878:	210a      	movs	r1, #10
 80a087a:	2005      	movs	r0, #5
 80a087c:	f005 fcab 	bl	80a61d6 <_Z6randomii>
 80a0880:	f00b fb7a 	bl	80abf78 <__aeabi_i2f>
 80a0884:	492b      	ldr	r1, [pc, #172]	; (80a0934 <_ZN10Bar_Matrix14bouncing_linesEv+0x1d0>)
 80a0886:	f00b fc7f 	bl	80ac188 <__aeabi_fdiv>
 80a088a:	6520      	str	r0, [r4, #80]	; 0x50
            bouncing_line_colors[i][1] = bd->g();
            bouncing_line_colors[i][2] = bd->b();
        } else if (bouncing_line_positions[i] > STRIP_LENGTH-.5*bouncing_line_lengths[i] && bouncing_line_directions[i] > 0) {
            bouncing_line_directions[i] = -1;

            bouncing_line_colors[i][0] = bd->r();
 80a088c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80a0940 <_ZN10Bar_Matrix14bouncing_linesEv+0x1dc>
 80a0890:	f8d8 0000 	ldr.w	r0, [r8]
 80a0894:	f001 fd05 	bl	80a22a2 <_ZN14Beat_Detection1rEv>
 80a0898:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
            bouncing_line_colors[i][1] = bd->g();
 80a089c:	f8d8 0000 	ldr.w	r0, [r8]
 80a08a0:	f001 fd01 	bl	80a22a6 <_ZN14Beat_Detection1gEv>
 80a08a4:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
            bouncing_line_colors[i][2] = bd->b();
 80a08a8:	f8d8 0000 	ldr.w	r0, [r8]
 80a08ac:	f001 fcfd 	bl	80a22aa <_ZN14Beat_Detection1bEv>
 80a08b0:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
    for (int i = 0; i < disp_width; i++) {
 80a08b4:	3701      	adds	r7, #1
 80a08b6:	350c      	adds	r5, #12
 80a08b8:	e75d      	b.n	80a0776 <_ZN10Bar_Matrix14bouncing_linesEv+0x12>
            if (bottom > 0) mix_pixel(i, bottom-1, 1, bouncing_line_colors[i][0], bouncing_line_colors[i][1], bouncing_line_colors[i][2]);//bd->r(), bd->g(), bd->b());
 80a08ba:	2800      	cmp	r0, #0
 80a08bc:	dd10      	ble.n	80a08e0 <_ZN10Bar_Matrix14bouncing_linesEv+0x17c>
 80a08be:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
 80a08c2:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80a08c6:	9302      	str	r3, [sp, #8]
 80a08c8:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
 80a08cc:	4649      	mov	r1, r9
 80a08ce:	9301      	str	r3, [sp, #4]
 80a08d0:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
 80a08d4:	4630      	mov	r0, r6
 80a08d6:	9300      	str	r3, [sp, #0]
 80a08d8:	b292      	uxth	r2, r2
 80a08da:	4653      	mov	r3, sl
 80a08dc:	f7ff fd20 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, 0, 0, 0);
 80a08e0:	2300      	movs	r3, #0
 80a08e2:	6862      	ldr	r2, [r4, #4]
 80a08e4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a08e8:	3201      	adds	r2, #1
 80a08ea:	4442      	add	r2, r8
 80a08ec:	e76d      	b.n	80a07ca <_ZN10Bar_Matrix14bouncing_linesEv+0x66>
        } else if (bouncing_line_positions[i] > STRIP_LENGTH-.5*bouncing_line_lengths[i] && bouncing_line_directions[i] > 0) {
 80a08ee:	2200      	movs	r2, #0
 80a08f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a08f4:	4b10      	ldr	r3, [pc, #64]	; (80a0938 <_ZN10Bar_Matrix14bouncing_linesEv+0x1d4>)
 80a08f6:	f00a ff3d 	bl	80ab774 <__aeabi_dmul>
 80a08fa:	4602      	mov	r2, r0
 80a08fc:	460b      	mov	r3, r1
 80a08fe:	2000      	movs	r0, #0
 80a0900:	490e      	ldr	r1, [pc, #56]	; (80a093c <_ZN10Bar_Matrix14bouncing_linesEv+0x1d8>)
 80a0902:	f00a fd7f 	bl	80ab404 <__aeabi_dsub>
 80a0906:	4602      	mov	r2, r0
 80a0908:	460b      	mov	r3, r1
 80a090a:	4640      	mov	r0, r8
 80a090c:	4649      	mov	r1, r9
 80a090e:	f00b f9c1 	bl	80abc94 <__aeabi_dcmpgt>
 80a0912:	2800      	cmp	r0, #0
 80a0914:	d0ce      	beq.n	80a08b4 <_ZN10Bar_Matrix14bouncing_linesEv+0x150>
 80a0916:	f1bb 0f00 	cmp.w	fp, #0
 80a091a:	ddcb      	ble.n	80a08b4 <_ZN10Bar_Matrix14bouncing_linesEv+0x150>
            bouncing_line_directions[i] = -1;
 80a091c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a0920:	67a3      	str	r3, [r4, #120]	; 0x78
 80a0922:	e7b3      	b.n	80a088c <_ZN10Bar_Matrix14bouncing_linesEv+0x128>
        }
    }
}
 80a0924:	b007      	add	sp, #28
 80a0926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a092a:	bf00      	nop
 80a092c:	2000007e 	.word	0x2000007e
 80a0930:	bfe00000 	.word	0xbfe00000
 80a0934:	41700000 	.word	0x41700000
 80a0938:	3fe00000 	.word	0x3fe00000
 80a093c:	404d0000 	.word	0x404d0000
 80a0940:	20000074 	.word	0x20000074

080a0944 <_ZN10Bar_Matrix10pixel_testEv>:
/* ================================================================== *
 * Function: bar_test
 * Description: Turns on lights from top to check length of srip
 * Parameters: None
 * ================================================================== */
void Bar_Matrix::pixel_test() {
 80a0944:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    clear_matrix();
 80a0948:	f7ff fd58 	bl	80a03fc <_ZN10Bar_Matrix12clear_matrixEv>
 80a094c:	2400      	movs	r4, #0
    for (int i = 0; i < NUM_BARS; i++)
    bars[i]->setPixelColor(STRIP_LENGTH-int(millis()/1000)%10, 64, 64, 64);
 80a094e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80a0952:	250a      	movs	r5, #10
 80a0954:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80a098c <_ZN10Bar_Matrix10pixel_testEv+0x48>
 80a0958:	f8d8 3000 	ldr.w	r3, [r8]
 80a095c:	591e      	ldr	r6, [r3, r4]
 80a095e:	f004 fd31 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
 80a0962:	fbb0 f0f7 	udiv	r0, r0, r7
 80a0966:	fbb0 f1f5 	udiv	r1, r0, r5
 80a096a:	2340      	movs	r3, #64	; 0x40
 80a096c:	fb05 0111 	mls	r1, r5, r1, r0
 80a0970:	f1c1 013a 	rsb	r1, r1, #58	; 0x3a
 80a0974:	461a      	mov	r2, r3
 80a0976:	4630      	mov	r0, r6
 80a0978:	9300      	str	r3, [sp, #0]
 80a097a:	b289      	uxth	r1, r1
 80a097c:	3404      	adds	r4, #4
 80a097e:	f002 ff65 	bl	80a384c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    for (int i = 0; i < NUM_BARS; i++)
 80a0982:	2c28      	cmp	r4, #40	; 0x28
 80a0984:	d1e8      	bne.n	80a0958 <_ZN10Bar_Matrix10pixel_testEv+0x14>
}
 80a0986:	b002      	add	sp, #8
 80a0988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a098c:	20000070 	.word	0x20000070

080a0990 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80a0990:	b570      	push	{r4, r5, r6, lr}
 80a0992:	4606      	mov	r6, r0
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80a0994:	4608      	mov	r0, r1
 80a0996:	f00a fe83 	bl	80ab6a0 <__aeabi_i2d>
 80a099a:	4604      	mov	r4, r0
 80a099c:	460d      	mov	r5, r1
 80a099e:	4630      	mov	r0, r6
 80a09a0:	f00a fe90 	bl	80ab6c4 <__aeabi_f2d>
 80a09a4:	4622      	mov	r2, r4
 80a09a6:	462b      	mov	r3, r5
    }
 80a09a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return pow(__type(__x), __type(__y));
 80a09ac:	f007 ba02 	b.w	80a7db4 <pow>

080a09b0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb>:
/* ================================================================== *
 * Function: visualizer_bars
 * Description: Sets all pixel values to given color value
 * Parameters: [audio_bins]* bins - frequency bins read from chip
 * ================================================================== */
 void Bar_Matrix::visualizer_bars(audio_bins* bins, float in_factor, float out_factor, bool strobe) {
 80a09b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a09b4:	b08f      	sub	sp, #60	; 0x3c
 80a09b6:	920c      	str	r2, [sp, #48]	; 0x30
 80a09b8:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 80a09bc:	4681      	mov	r9, r0
   decay(out_factor);
 80a09be:	4618      	mov	r0, r3
 void Bar_Matrix::visualizer_bars(audio_bins* bins, float in_factor, float out_factor, bool strobe) {
 80a09c0:	9209      	str	r2, [sp, #36]	; 0x24
 80a09c2:	460c      	mov	r4, r1
   decay(out_factor);
 80a09c4:	f00a fe7e 	bl	80ab6c4 <__aeabi_f2d>
 80a09c8:	4602      	mov	r2, r0
 80a09ca:	460b      	mov	r3, r1
 80a09cc:	4648      	mov	r0, r9
 80a09ce:	f7ff fb7d 	bl	80a00cc <_ZN10Bar_Matrix5decayEd>
   float bass_level = 0;
   int red, green, blue;

   if (strobe)
 80a09d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a09d4:	2b00      	cmp	r3, #0
 80a09d6:	d04a      	beq.n	80a0a6e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xbe>
     bass_level = (log(((bins->left[LEFT_63]+bins->right[LEFT_63])/2.0f)/BINS_MAX)+0.7f) * 5 * 255.0f;
 80a09d8:	69e3      	ldr	r3, [r4, #28]
 80a09da:	6820      	ldr	r0, [r4, #0]
 80a09dc:	4418      	add	r0, r3
 80a09de:	f00b facb 	bl	80abf78 <__aeabi_i2f>
 80a09e2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a09e6:	f00b fb1b 	bl	80ac020 <__aeabi_fmul>
 80a09ea:	49b3      	ldr	r1, [pc, #716]	; (80a0cb8 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x308>)
 80a09ec:	f00b fbcc 	bl	80ac188 <__aeabi_fdiv>
  { return __builtin_logf(__x); }
 80a09f0:	f007 fbde 	bl	80a81b0 <logf>
 80a09f4:	49b1      	ldr	r1, [pc, #708]	; (80a0cbc <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x30c>)
 80a09f6:	f00b fa0b 	bl	80abe10 <__addsf3>
 80a09fa:	49b1      	ldr	r1, [pc, #708]	; (80a0cc0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x310>)
 80a09fc:	f00b fb10 	bl	80ac020 <__aeabi_fmul>
 80a0a00:	49b0      	ldr	r1, [pc, #704]	; (80a0cc4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x314>)
 80a0a02:	f00b fb0d 	bl	80ac020 <__aeabi_fmul>
 80a0a06:	9008      	str	r0, [sp, #32]
   float bass_level = 0;
 80a0a08:	f04f 0b00 	mov.w	fp, #0

   for (char i = 0; i < disp_width; i++) {
 80a0a0c:	4bae      	ldr	r3, [pc, #696]	; (80a0cc8 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x318>)
 80a0a0e:	fa5f f58b 	uxtb.w	r5, fp
 80a0a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a0a16:	429d      	cmp	r5, r3
 80a0a18:	f280 8137 	bge.w	80a0c8a <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2da>
 80a0a1c:	2300      	movs	r3, #0
 80a0a1e:	9307      	str	r3, [sp, #28]
     for (char j = 0; j < disp_height; j++) {
 80a0a20:	4baa      	ldr	r3, [pc, #680]	; (80a0ccc <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x31c>)
 80a0a22:	f89d a01c 	ldrb.w	sl, [sp, #28]
 80a0a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a0a2a:	459a      	cmp	sl, r3
 80a0a2c:	f280 812a 	bge.w	80a0c84 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2d4>
       // get bin
       //int level = (i < disp_width/2) ? bar_levels[i] : bar_levels[7-i];

       if (strobe)
 80a0a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a0a32:	b16b      	cbz	r3, 80a0a50 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xa0>
         mix_pixel(i, j, 0.5f, bass_level, bass_level, bass_level);
 80a0a34:	9808      	ldr	r0, [sp, #32]
 80a0a36:	f00b fcf5 	bl	80ac424 <__aeabi_f2uiz>
 80a0a3a:	b2c0      	uxtb	r0, r0
 80a0a3c:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80a0a40:	9000      	str	r0, [sp, #0]
 80a0a42:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80a0a46:	4652      	mov	r2, sl
 80a0a48:	4629      	mov	r1, r5
 80a0a4a:	4648      	mov	r0, r9
 80a0a4c:	f7ff fc68 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>

       // Set bar levels
       int level = 0;
       if (disp_width == 8) {
 80a0a50:	4b9d      	ldr	r3, [pc, #628]	; (80a0cc8 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x318>)
 80a0a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a0a56:	2b08      	cmp	r3, #8
 80a0a58:	f040 809c 	bne.w	80a0b94 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x1e4>
        switch(i) {
 80a0a5c:	2d07      	cmp	r5, #7
 80a0a5e:	f200 80bf 	bhi.w	80a0be0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x230>
 80a0a62:	e8df f005 	tbb	[pc, r5]
 80a0a66:	07b5      	.short	0x07b5
 80a0a68:	918f8d8b 	.word	0x918f8d8b
 80a0a6c:	9593      	.short	0x9593
   float bass_level = 0;
 80a0a6e:	2300      	movs	r3, #0
 80a0a70:	9308      	str	r3, [sp, #32]
 80a0a72:	e7c9      	b.n	80a0a08 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x58>
            case 0:
            level = bins->left[LEFT_160];
            break;
            case 1:
            level = bins->left[LEFT_1000];
 80a0a74:	68e0      	ldr	r0, [r4, #12]
            level = bins->right[RIGHT_63];
            break;
        }  
       }

       level *= FREQ_GAIN;
 80a0a76:	f00b fa7f 	bl	80abf78 <__aeabi_i2f>
 80a0a7a:	f00b fcad 	bl	80ac3d8 <__aeabi_f2iz>
 80a0a7e:	900d      	str	r0, [sp, #52]	; 0x34
       // set bar
       if (j < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH)) {
 80a0a80:	f00b fa7a 	bl	80abf78 <__aeabi_i2f>
 80a0a84:	498c      	ldr	r1, [pc, #560]	; (80a0cb8 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x308>)
 80a0a86:	f00b fb7f 	bl	80ac188 <__aeabi_fdiv>
 80a0a8a:	2102      	movs	r1, #2
 80a0a8c:	f7ff ff80 	bl	80a0990 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a0a90:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a0a94:	4650      	mov	r0, sl
 80a0a96:	f00a fe03 	bl	80ab6a0 <__aeabi_i2d>
 80a0a9a:	2200      	movs	r2, #0
 80a0a9c:	4607      	mov	r7, r0
 80a0a9e:	4688      	mov	r8, r1
 80a0aa0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a0aa4:	4b8a      	ldr	r3, [pc, #552]	; (80a0cd0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x320>)
 80a0aa6:	f00a fe65 	bl	80ab774 <__aeabi_dmul>
 80a0aaa:	4602      	mov	r2, r0
 80a0aac:	460b      	mov	r3, r1
 80a0aae:	4638      	mov	r0, r7
 80a0ab0:	4641      	mov	r1, r8
 80a0ab2:	f00b f8d1 	bl	80abc58 <__aeabi_dcmplt>
 80a0ab6:	2800      	cmp	r0, #0
 80a0ab8:	d05c      	beq.n	80a0b74 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x1c4>
       //if (j < (float)(level)/(float)(BINS_MAX) * (STRIP_LENGTH))

         float val = level*2*PI/BINS_MAX;
 80a0aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a0abc:	0058      	lsls	r0, r3, #1
 80a0abe:	f00a fdef 	bl	80ab6a0 <__aeabi_i2d>
 80a0ac2:	a373      	add	r3, pc, #460	; (adr r3, 80a0c90 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2e0>)
 80a0ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ac8:	f00a fe54 	bl	80ab774 <__aeabi_dmul>
 80a0acc:	a372      	add	r3, pc, #456	; (adr r3, 80a0c98 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2e8>)
 80a0ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ad2:	f00a ff79 	bl	80ab9c8 <__aeabi_ddiv>
 80a0ad6:	f00b f945 	bl	80abd64 <__aeabi_d2f>

         // Select colors
         switch(bd->num_beats() % 3) {
 80a0ada:	4b7e      	ldr	r3, [pc, #504]	; (80a0cd4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x324>)
         float val = level*2*PI/BINS_MAX;
 80a0adc:	4680      	mov	r8, r0
         switch(bd->num_beats() % 3) {
 80a0ade:	6818      	ldr	r0, [r3, #0]
 80a0ae0:	f001 fbdd 	bl	80a229e <_ZN14Beat_Detection9num_beatsEv>
 80a0ae4:	2303      	movs	r3, #3
 80a0ae6:	fb90 f3f3 	sdiv	r3, r0, r3
 80a0aea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a0aee:	1ac0      	subs	r0, r0, r3
 80a0af0:	2801      	cmp	r0, #1
 80a0af2:	d077      	beq.n	80a0be4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x234>
 80a0af4:	2802      	cmp	r0, #2
 80a0af6:	f000 8096 	beq.w	80a0c26 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x276>
 80a0afa:	bb68      	cbnz	r0, 80a0b58 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x1a8>
  { return __builtin_cosf(__x); }
 80a0afc:	4640      	mov	r0, r8
 80a0afe:	f007 f91d 	bl	80a7d3c <cosf>
           case 0:
             red = cos(val)*255;
 80a0b02:	4970      	ldr	r1, [pc, #448]	; (80a0cc4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x314>)
 80a0b04:	f00b fa8c 	bl	80ac020 <__aeabi_fmul>
 80a0b08:	f00b fc66 	bl	80ac3d8 <__aeabi_f2iz>
 80a0b0c:	9005      	str	r0, [sp, #20]
             green = cos(val - 2*PI/3)*255;
 80a0b0e:	4640      	mov	r0, r8
 80a0b10:	f00a fdd8 	bl	80ab6c4 <__aeabi_f2d>
 80a0b14:	a362      	add	r3, pc, #392	; (adr r3, 80a0ca0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f0>)
 80a0b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0b1a:	4606      	mov	r6, r0
 80a0b1c:	460f      	mov	r7, r1
 80a0b1e:	f00a fc71 	bl	80ab404 <__aeabi_dsub>
 80a0b22:	f007 f8b5 	bl	80a7c90 <cos>
 80a0b26:	a360      	add	r3, pc, #384	; (adr r3, 80a0ca8 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f8>)
 80a0b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0b2c:	f00a fe22 	bl	80ab774 <__aeabi_dmul>
 80a0b30:	f00b f8d0 	bl	80abcd4 <__aeabi_d2iz>
             blue = cos(val - 4*PI/3)*255;
 80a0b34:	a35e      	add	r3, pc, #376	; (adr r3, 80a0cb0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x300>)
 80a0b36:	e9d3 2300 	ldrd	r2, r3, [r3]
             green = cos(val - 2*PI/3)*255;
 80a0b3a:	9006      	str	r0, [sp, #24]
             break;
           case 1:
             red = cos(val - 4*PI/3)*255;
             green = cos(val)*255;
             blue = cos(val - 2*PI/3)*255;
 80a0b3c:	4630      	mov	r0, r6
 80a0b3e:	4639      	mov	r1, r7
 80a0b40:	f00a fc60 	bl	80ab404 <__aeabi_dsub>
 80a0b44:	f007 f8a4 	bl	80a7c90 <cos>
 80a0b48:	a357      	add	r3, pc, #348	; (adr r3, 80a0ca8 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f8>)
 80a0b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0b4e:	f00a fe11 	bl	80ab774 <__aeabi_dmul>
 80a0b52:	f00b f8bf 	bl	80abcd4 <__aeabi_d2iz>
 80a0b56:	4606      	mov	r6, r0
             green = cos(val - 4*PI/3)*255;
             blue = cos(val)*255;
             break;
         }

         mix_pixel(i, j, in_factor, red, green, blue);
 80a0b58:	b2f3      	uxtb	r3, r6
 80a0b5a:	9302      	str	r3, [sp, #8]
 80a0b5c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80a0b60:	4652      	mov	r2, sl
 80a0b62:	9301      	str	r3, [sp, #4]
 80a0b64:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80a0b68:	4629      	mov	r1, r5
 80a0b6a:	9300      	str	r3, [sp, #0]
 80a0b6c:	4648      	mov	r0, r9
 80a0b6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a0b70:	f7ff fbd6 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
     for (char j = 0; j < disp_height; j++) {
 80a0b74:	9b07      	ldr	r3, [sp, #28]
 80a0b76:	3301      	adds	r3, #1
 80a0b78:	9307      	str	r3, [sp, #28]
 80a0b7a:	e751      	b.n	80a0a20 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x70>
            level = bins->left[LEFT_6250];
 80a0b7c:	6960      	ldr	r0, [r4, #20]
            break;
 80a0b7e:	e77a      	b.n	80a0a76 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->left[LEFT_16000];
 80a0b80:	69a0      	ldr	r0, [r4, #24]
            break;
 80a0b82:	e778      	b.n	80a0a76 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->right[RIGHT_16000];
 80a0b84:	6b60      	ldr	r0, [r4, #52]	; 0x34
            break;
 80a0b86:	e776      	b.n	80a0a76 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->right[RIGHT_6250];
 80a0b88:	6b20      	ldr	r0, [r4, #48]	; 0x30
            break;
 80a0b8a:	e774      	b.n	80a0a76 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->right[RIGHT_1000];
 80a0b8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
            break;
 80a0b8e:	e772      	b.n	80a0a76 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->right[RIGHT_160];
 80a0b90:	6a20      	ldr	r0, [r4, #32]
            break;
 80a0b92:	e770      	b.n	80a0a76 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
        } else if (disp_width == 10) {
 80a0b94:	2b0a      	cmp	r3, #10
 80a0b96:	d123      	bne.n	80a0be0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x230>
            switch(i) {
 80a0b98:	2d09      	cmp	r5, #9
 80a0b9a:	d821      	bhi.n	80a0be0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x230>
 80a0b9c:	a301      	add	r3, pc, #4	; (adr r3, 80a0ba4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x1f4>)
 80a0b9e:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 80a0ba2:	bf00      	nop
 80a0ba4:	080a0bcd 	.word	0x080a0bcd
 80a0ba8:	080a0bd1 	.word	0x080a0bd1
 80a0bac:	080a0bd5 	.word	0x080a0bd5
 80a0bb0:	080a0a75 	.word	0x080a0a75
 80a0bb4:	080a0b7d 	.word	0x080a0b7d
 80a0bb8:	080a0b89 	.word	0x080a0b89
 80a0bbc:	080a0b8d 	.word	0x080a0b8d
 80a0bc0:	080a0bd9 	.word	0x080a0bd9
 80a0bc4:	080a0b91 	.word	0x080a0b91
 80a0bc8:	080a0bdd 	.word	0x080a0bdd
            level = bins->left[LEFT_63];
 80a0bcc:	6820      	ldr	r0, [r4, #0]
            break;
 80a0bce:	e752      	b.n	80a0a76 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->left[LEFT_160];
 80a0bd0:	6860      	ldr	r0, [r4, #4]
            break;
 80a0bd2:	e750      	b.n	80a0a76 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->left[LEFT_400];
 80a0bd4:	68a0      	ldr	r0, [r4, #8]
            break;
 80a0bd6:	e74e      	b.n	80a0a76 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->right[RIGHT_400];
 80a0bd8:	6a60      	ldr	r0, [r4, #36]	; 0x24
            break;
 80a0bda:	e74c      	b.n	80a0a76 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->right[RIGHT_63];
 80a0bdc:	69e0      	ldr	r0, [r4, #28]
            break;
 80a0bde:	e74a      	b.n	80a0a76 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
        } else if (disp_width == 10) {
 80a0be0:	2000      	movs	r0, #0
 80a0be2:	e748      	b.n	80a0a76 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
             red = cos(val - 4*PI/3)*255;
 80a0be4:	4640      	mov	r0, r8
 80a0be6:	f00a fd6d 	bl	80ab6c4 <__aeabi_f2d>
 80a0bea:	a331      	add	r3, pc, #196	; (adr r3, 80a0cb0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x300>)
 80a0bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0bf0:	4606      	mov	r6, r0
 80a0bf2:	460f      	mov	r7, r1
 80a0bf4:	f00a fc06 	bl	80ab404 <__aeabi_dsub>
 80a0bf8:	f007 f84a 	bl	80a7c90 <cos>
 80a0bfc:	a32a      	add	r3, pc, #168	; (adr r3, 80a0ca8 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f8>)
 80a0bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0c02:	f00a fdb7 	bl	80ab774 <__aeabi_dmul>
 80a0c06:	f00b f865 	bl	80abcd4 <__aeabi_d2iz>
 80a0c0a:	9005      	str	r0, [sp, #20]
 80a0c0c:	4640      	mov	r0, r8
 80a0c0e:	f007 f895 	bl	80a7d3c <cosf>
             green = cos(val)*255;
 80a0c12:	492c      	ldr	r1, [pc, #176]	; (80a0cc4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x314>)
 80a0c14:	f00b fa04 	bl	80ac020 <__aeabi_fmul>
 80a0c18:	f00b fbde 	bl	80ac3d8 <__aeabi_f2iz>
             blue = cos(val - 2*PI/3)*255;
 80a0c1c:	a320      	add	r3, pc, #128	; (adr r3, 80a0ca0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f0>)
 80a0c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
             green = cos(val)*255;
 80a0c22:	9006      	str	r0, [sp, #24]
             blue = cos(val - 2*PI/3)*255;
 80a0c24:	e78a      	b.n	80a0b3c <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x18c>
             red = cos(val - 2*PI/3)*255;
 80a0c26:	4640      	mov	r0, r8
 80a0c28:	f00a fd4c 	bl	80ab6c4 <__aeabi_f2d>
 80a0c2c:	a31c      	add	r3, pc, #112	; (adr r3, 80a0ca0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f0>)
 80a0c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0c32:	4606      	mov	r6, r0
 80a0c34:	460f      	mov	r7, r1
 80a0c36:	f00a fbe5 	bl	80ab404 <__aeabi_dsub>
 80a0c3a:	f007 f829 	bl	80a7c90 <cos>
 80a0c3e:	a31a      	add	r3, pc, #104	; (adr r3, 80a0ca8 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f8>)
 80a0c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0c44:	f00a fd96 	bl	80ab774 <__aeabi_dmul>
 80a0c48:	f00b f844 	bl	80abcd4 <__aeabi_d2iz>
             green = cos(val - 4*PI/3)*255;
 80a0c4c:	a318      	add	r3, pc, #96	; (adr r3, 80a0cb0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x300>)
 80a0c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
             red = cos(val - 2*PI/3)*255;
 80a0c52:	9005      	str	r0, [sp, #20]
             green = cos(val - 4*PI/3)*255;
 80a0c54:	4639      	mov	r1, r7
 80a0c56:	4630      	mov	r0, r6
 80a0c58:	f00a fbd4 	bl	80ab404 <__aeabi_dsub>
 80a0c5c:	f007 f818 	bl	80a7c90 <cos>
 80a0c60:	a311      	add	r3, pc, #68	; (adr r3, 80a0ca8 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f8>)
 80a0c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0c66:	f00a fd85 	bl	80ab774 <__aeabi_dmul>
 80a0c6a:	f00b f833 	bl	80abcd4 <__aeabi_d2iz>
 80a0c6e:	9006      	str	r0, [sp, #24]
 80a0c70:	4640      	mov	r0, r8
 80a0c72:	f007 f863 	bl	80a7d3c <cosf>
             blue = cos(val)*255;
 80a0c76:	4913      	ldr	r1, [pc, #76]	; (80a0cc4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x314>)
 80a0c78:	f00b f9d2 	bl	80ac020 <__aeabi_fmul>
 80a0c7c:	f00b fbac 	bl	80ac3d8 <__aeabi_f2iz>
 80a0c80:	4606      	mov	r6, r0
             break;
 80a0c82:	e769      	b.n	80a0b58 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x1a8>
   for (char i = 0; i < disp_width; i++) {
 80a0c84:	f10b 0b01 	add.w	fp, fp, #1
 80a0c88:	e6c0      	b.n	80a0a0c <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x5c>
                                    bins->left[1]/(64-(bins->left[2]/128)),
                                    bins->left[2]/(64-(bins->left[0]/128)));*/
       }
     }
   }
 }
 80a0c8a:	b00f      	add	sp, #60	; 0x3c
 80a0c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0c90:	fc8b007a 	.word	0xfc8b007a
 80a0c94:	400921fa 	.word	0x400921fa
 80a0c98:	00000000 	.word	0x00000000
 80a0c9c:	40affe00 	.word	0x40affe00
 80a0ca0:	fdb20051 	.word	0xfdb20051
 80a0ca4:	4000c151 	.word	0x4000c151
 80a0ca8:	00000000 	.word	0x00000000
 80a0cac:	406fe000 	.word	0x406fe000
 80a0cb0:	fdb20051 	.word	0xfdb20051
 80a0cb4:	4010c151 	.word	0x4010c151
 80a0cb8:	457ff000 	.word	0x457ff000
 80a0cbc:	3f333333 	.word	0x3f333333
 80a0cc0:	40a00000 	.word	0x40a00000
 80a0cc4:	437f0000 	.word	0x437f0000
 80a0cc8:	2000007e 	.word	0x2000007e
 80a0ccc:	2000007c 	.word	0x2000007c
 80a0cd0:	404d0000 	.word	0x404d0000
 80a0cd4:	20000074 	.word	0x20000074

080a0cd8 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff>:
 * Function: visualizer_bars_middle
 * Description: Bars start at the middle and go to the edges.
 *              One channel fills up, the other fills down.
 * Parameters: none.
 * ================================================================== */
void Bar_Matrix::visualizer_bars_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0cdc:	4606      	mov	r6, r0
 80a0cde:	b089      	sub	sp, #36	; 0x24
    decay(out_factor);
 80a0ce0:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_bars_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0ce2:	4690      	mov	r8, r2
 80a0ce4:	460c      	mov	r4, r1
    decay(out_factor);
 80a0ce6:	f00a fced 	bl	80ab6c4 <__aeabi_f2d>

    if (bd->beat_on_bin(0) || bd->beat_on_bin(1)) {
 80a0cea:	4d92      	ldr	r5, [pc, #584]	; (80a0f34 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x25c>)
    decay(out_factor);
 80a0cec:	4602      	mov	r2, r0
 80a0cee:	460b      	mov	r3, r1
 80a0cf0:	4630      	mov	r0, r6
 80a0cf2:	f7ff f9eb 	bl	80a00cc <_ZN10Bar_Matrix5decayEd>
    if (bd->beat_on_bin(0) || bd->beat_on_bin(1)) {
 80a0cf6:	2100      	movs	r1, #0
 80a0cf8:	6828      	ldr	r0, [r5, #0]
 80a0cfa:	f001 facc 	bl	80a2296 <_ZN14Beat_Detection11beat_on_binEi>
 80a0cfe:	b338      	cbz	r0, 80a0d50 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x78>
        //fill_bar(i, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
        color_table_idx = (color_table_idx+1) % 51;
 80a0d00:	2033      	movs	r0, #51	; 0x33
 80a0d02:	498d      	ldr	r1, [pc, #564]	; (80a0f38 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x260>)
 80a0d04:	680b      	ldr	r3, [r1, #0]
 80a0d06:	3301      	adds	r3, #1
 80a0d08:	fb93 f2f0 	sdiv	r2, r3, r0
 80a0d0c:	fb00 3312 	mls	r3, r0, r2, r3
 80a0d10:	600b      	str	r3, [r1, #0]
void Bar_Matrix::visualizer_bars_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0d12:	2300      	movs	r3, #0
                    break;
                }  
            }
            level *= FREQ_GAIN;
            // set bar
            float p = (float)(level)/(float)(BINS_MAX);
 80a0d14:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80a0f44 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x26c>
            if (j < p*p * (STRIP_LENGTH/2)) {
 80a0d18:	f8df a22c 	ldr.w	sl, [pc, #556]	; 80a0f48 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x270>
void Bar_Matrix::visualizer_bars_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0d1c:	9305      	str	r3, [sp, #20]
    for (char i = 0; i < disp_width; i++) {
 80a0d1e:	4b87      	ldr	r3, [pc, #540]	; (80a0f3c <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x264>)
 80a0d20:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80a0d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a0d28:	429d      	cmp	r5, r3
 80a0d2a:	f280 80ff 	bge.w	80a0f2c <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x254>
 80a0d2e:	2700      	movs	r7, #0
                //j < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
                float val = level*2*PI/BINS_MAX;
                //mix_pixel(i, STRIP_LENGTH/2 - j, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                //mix_pixel(i, STRIP_LENGTH/2 - j, in_factor, bd->r(), bd->g(), bd->b());
                mix_pixel(i, STRIP_LENGTH/2 - j, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0d30:	f8df b204 	ldr.w	fp, [pc, #516]	; 80a0f38 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x260>
            if (disp_width == 8) {
 80a0d34:	4b81      	ldr	r3, [pc, #516]	; (80a0f3c <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x264>)
 80a0d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a0d3a:	2b08      	cmp	r3, #8
 80a0d3c:	d162      	bne.n	80a0e04 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x12c>
                switch(i) {
 80a0d3e:	2d07      	cmp	r5, #7
 80a0d40:	f200 8086 	bhi.w	80a0e50 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x178>
 80a0d44:	e8df f005 	tbb	[pc, r5]
 80a0d48:	54520b7c 	.word	0x54520b7c
 80a0d4c:	5c5a5856 	.word	0x5c5a5856
    if (bd->beat_on_bin(0) || bd->beat_on_bin(1)) {
 80a0d50:	2101      	movs	r1, #1
 80a0d52:	6828      	ldr	r0, [r5, #0]
 80a0d54:	f001 fa9f 	bl	80a2296 <_ZN14Beat_Detection11beat_on_binEi>
 80a0d58:	2800      	cmp	r0, #0
 80a0d5a:	d1d1      	bne.n	80a0d00 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x28>
 80a0d5c:	e7d9      	b.n	80a0d12 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x3a>
                    level = bins->left[LEFT_1000];
 80a0d5e:	68e0      	ldr	r0, [r4, #12]
            level *= FREQ_GAIN;
 80a0d60:	f00b f90a 	bl	80abf78 <__aeabi_i2f>
 80a0d64:	f00b fb38 	bl	80ac3d8 <__aeabi_f2iz>
            float p = (float)(level)/(float)(BINS_MAX);
 80a0d68:	f00b f906 	bl	80abf78 <__aeabi_i2f>
 80a0d6c:	4649      	mov	r1, r9
 80a0d6e:	f00b fa0b 	bl	80ac188 <__aeabi_fdiv>
 80a0d72:	9007      	str	r0, [sp, #28]
            if (j < p*p * (STRIP_LENGTH/2)) {
 80a0d74:	4638      	mov	r0, r7
 80a0d76:	f00b f8ff 	bl	80abf78 <__aeabi_i2f>
 80a0d7a:	9907      	ldr	r1, [sp, #28]
 80a0d7c:	9006      	str	r0, [sp, #24]
 80a0d7e:	4608      	mov	r0, r1
 80a0d80:	f00b f94e 	bl	80ac020 <__aeabi_fmul>
 80a0d84:	4651      	mov	r1, sl
 80a0d86:	f00b f94b 	bl	80ac020 <__aeabi_fmul>
 80a0d8a:	9b06      	ldr	r3, [sp, #24]
 80a0d8c:	4601      	mov	r1, r0
 80a0d8e:	4618      	mov	r0, r3
 80a0d90:	f00b fae4 	bl	80ac35c <__aeabi_fcmplt>
 80a0d94:	b1a8      	cbz	r0, 80a0dc2 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0xea>
                mix_pixel(i, STRIP_LENGTH/2 - j, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0d96:	230c      	movs	r3, #12
 80a0d98:	f8db 0000 	ldr.w	r0, [fp]
 80a0d9c:	4968      	ldr	r1, [pc, #416]	; (80a0f40 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x268>)
 80a0d9e:	4343      	muls	r3, r0
 80a0da0:	18c8      	adds	r0, r1, r3
 80a0da2:	f890 c008 	ldrb.w	ip, [r0, #8]
 80a0da6:	5ccb      	ldrb	r3, [r1, r3]
 80a0da8:	7900      	ldrb	r0, [r0, #4]
 80a0daa:	f1c7 021d 	rsb	r2, r7, #29
 80a0dae:	9001      	str	r0, [sp, #4]
 80a0db0:	9300      	str	r3, [sp, #0]
 80a0db2:	4629      	mov	r1, r5
 80a0db4:	4643      	mov	r3, r8
 80a0db6:	4630      	mov	r0, r6
 80a0db8:	f8cd c008 	str.w	ip, [sp, #8]
 80a0dbc:	b292      	uxth	r2, r2
 80a0dbe:	f7ff faaf 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = 0; j < STRIP_LENGTH/2; j++) {
 80a0dc2:	3701      	adds	r7, #1
 80a0dc4:	2f1d      	cmp	r7, #29
 80a0dc6:	d1b5      	bne.n	80a0d34 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x5c>
 80a0dc8:	2700      	movs	r7, #0
            if (j-STRIP_LENGTH/2 < p*p * (STRIP_LENGTH/2)) {
                //j-STRIP_LENGTH/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
                float val = level*2*PI/BINS_MAX;
                //mix_pixel(i, j, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                //mix_pixel(i, j, in_factor, bd->r(), bd->g(), bd->b());//reds[i], greens[i], blues[i]);
                mix_pixel(i, j, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0dca:	f8df b16c 	ldr.w	fp, [pc, #364]	; 80a0f38 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x260>
            if (disp_width == 8) {
 80a0dce:	4b5b      	ldr	r3, [pc, #364]	; (80a0f3c <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x264>)
 80a0dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a0dd4:	2b08      	cmp	r3, #8
 80a0dd6:	f040 8082 	bne.w	80a0ede <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x206>
                switch(i) {
 80a0dda:	2d07      	cmp	r5, #7
 80a0ddc:	f200 80a4 	bhi.w	80a0f28 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x250>
 80a0de0:	e8df f005 	tbb	[pc, r5]
 80a0de4:	7371389a 	.word	0x7371389a
 80a0de8:	7b797775 	.word	0x7b797775
                    level = bins->left[LEFT_6250];
 80a0dec:	6960      	ldr	r0, [r4, #20]
                    break;
 80a0dee:	e7b7      	b.n	80a0d60 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x88>
                    level = bins->left[LEFT_16000];
 80a0df0:	69a0      	ldr	r0, [r4, #24]
                    break;
 80a0df2:	e7b5      	b.n	80a0d60 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x88>
                    level = bins->right[RIGHT_16000];
 80a0df4:	6b60      	ldr	r0, [r4, #52]	; 0x34
                    break;
 80a0df6:	e7b3      	b.n	80a0d60 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x88>
                    level = bins->right[RIGHT_6250];
 80a0df8:	6b20      	ldr	r0, [r4, #48]	; 0x30
                    break;
 80a0dfa:	e7b1      	b.n	80a0d60 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x88>
                    level = bins->right[RIGHT_1000];
 80a0dfc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                    break;
 80a0dfe:	e7af      	b.n	80a0d60 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x88>
                    level = bins->right[RIGHT_160];
 80a0e00:	6a20      	ldr	r0, [r4, #32]
                    break;
 80a0e02:	e7ad      	b.n	80a0d60 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x88>
            } else if (disp_width == 10) {
 80a0e04:	2b0a      	cmp	r3, #10
 80a0e06:	d123      	bne.n	80a0e50 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x178>
                switch(i) {
 80a0e08:	2d09      	cmp	r5, #9
 80a0e0a:	d821      	bhi.n	80a0e50 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x178>
 80a0e0c:	a301      	add	r3, pc, #4	; (adr r3, 80a0e14 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x13c>)
 80a0e0e:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 80a0e12:	bf00      	nop
 80a0e14:	080a0e3d 	.word	0x080a0e3d
 80a0e18:	080a0e41 	.word	0x080a0e41
 80a0e1c:	080a0e45 	.word	0x080a0e45
 80a0e20:	080a0d5f 	.word	0x080a0d5f
 80a0e24:	080a0ded 	.word	0x080a0ded
 80a0e28:	080a0df9 	.word	0x080a0df9
 80a0e2c:	080a0dfd 	.word	0x080a0dfd
 80a0e30:	080a0e49 	.word	0x080a0e49
 80a0e34:	080a0e01 	.word	0x080a0e01
 80a0e38:	080a0e4d 	.word	0x080a0e4d
                    level = bins->left[LEFT_63];
 80a0e3c:	6820      	ldr	r0, [r4, #0]
                    break;
 80a0e3e:	e78f      	b.n	80a0d60 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x88>
                    level = bins->left[LEFT_160];
 80a0e40:	6860      	ldr	r0, [r4, #4]
                    break;
 80a0e42:	e78d      	b.n	80a0d60 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x88>
                    level = bins->left[LEFT_400];
 80a0e44:	68a0      	ldr	r0, [r4, #8]
                    break;
 80a0e46:	e78b      	b.n	80a0d60 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x88>
                    level = bins->right[RIGHT_400];
 80a0e48:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    break;
 80a0e4a:	e789      	b.n	80a0d60 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x88>
                    level = bins->right[RIGHT_63];
 80a0e4c:	69e0      	ldr	r0, [r4, #28]
                    break;
 80a0e4e:	e787      	b.n	80a0d60 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x88>
            } else if (disp_width == 10) {
 80a0e50:	2000      	movs	r0, #0
 80a0e52:	e785      	b.n	80a0d60 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x88>
                    level = bins->left[LEFT_1000];
 80a0e54:	68e0      	ldr	r0, [r4, #12]
            level *= FREQ_GAIN;
 80a0e56:	f00b f88f 	bl	80abf78 <__aeabi_i2f>
 80a0e5a:	f00b fabd 	bl	80ac3d8 <__aeabi_f2iz>
            float p = (float)(level)/(float)(BINS_MAX);
 80a0e5e:	f00b f88b 	bl	80abf78 <__aeabi_i2f>
 80a0e62:	4649      	mov	r1, r9
 80a0e64:	f00b f990 	bl	80ac188 <__aeabi_fdiv>
 80a0e68:	9007      	str	r0, [sp, #28]
            if (j-STRIP_LENGTH/2 < p*p * (STRIP_LENGTH/2)) {
 80a0e6a:	4638      	mov	r0, r7
 80a0e6c:	f00b f884 	bl	80abf78 <__aeabi_i2f>
 80a0e70:	9907      	ldr	r1, [sp, #28]
 80a0e72:	9006      	str	r0, [sp, #24]
 80a0e74:	4608      	mov	r0, r1
 80a0e76:	f00b f8d3 	bl	80ac020 <__aeabi_fmul>
 80a0e7a:	4651      	mov	r1, sl
 80a0e7c:	f00b f8d0 	bl	80ac020 <__aeabi_fmul>
 80a0e80:	9b06      	ldr	r3, [sp, #24]
 80a0e82:	4601      	mov	r1, r0
 80a0e84:	4618      	mov	r0, r3
 80a0e86:	f00b fa69 	bl	80ac35c <__aeabi_fcmplt>
 80a0e8a:	b1a8      	cbz	r0, 80a0eb8 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1e0>
                mix_pixel(i, j, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0e8c:	230c      	movs	r3, #12
 80a0e8e:	f8db 0000 	ldr.w	r0, [fp]
 80a0e92:	492b      	ldr	r1, [pc, #172]	; (80a0f40 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x268>)
 80a0e94:	4343      	muls	r3, r0
 80a0e96:	18c8      	adds	r0, r1, r3
 80a0e98:	f890 c008 	ldrb.w	ip, [r0, #8]
 80a0e9c:	5ccb      	ldrb	r3, [r1, r3]
 80a0e9e:	7900      	ldrb	r0, [r0, #4]
 80a0ea0:	f107 021d 	add.w	r2, r7, #29
 80a0ea4:	9001      	str	r0, [sp, #4]
 80a0ea6:	9300      	str	r3, [sp, #0]
 80a0ea8:	4629      	mov	r1, r5
 80a0eaa:	4643      	mov	r3, r8
 80a0eac:	4630      	mov	r0, r6
 80a0eae:	f8cd c008 	str.w	ip, [sp, #8]
 80a0eb2:	b292      	uxth	r2, r2
 80a0eb4:	f7ff fa34 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = STRIP_LENGTH/2; j < STRIP_LENGTH; j++) {
 80a0eb8:	3701      	adds	r7, #1
 80a0eba:	2f1d      	cmp	r7, #29
 80a0ebc:	d187      	bne.n	80a0dce <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0xf6>
    for (char i = 0; i < disp_width; i++) {
 80a0ebe:	9b05      	ldr	r3, [sp, #20]
 80a0ec0:	3301      	adds	r3, #1
 80a0ec2:	9305      	str	r3, [sp, #20]
 80a0ec4:	e72b      	b.n	80a0d1e <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x46>
                    level = bins->left[LEFT_6250];
 80a0ec6:	6960      	ldr	r0, [r4, #20]
                    break;
 80a0ec8:	e7c5      	b.n	80a0e56 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x17e>
                    level = bins->left[LEFT_16000];
 80a0eca:	69a0      	ldr	r0, [r4, #24]
                    break;
 80a0ecc:	e7c3      	b.n	80a0e56 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x17e>
                    level = bins->right[RIGHT_16000];
 80a0ece:	6b60      	ldr	r0, [r4, #52]	; 0x34
                    break;
 80a0ed0:	e7c1      	b.n	80a0e56 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x17e>
                    level = bins->right[RIGHT_6250];
 80a0ed2:	6b20      	ldr	r0, [r4, #48]	; 0x30
                    break;
 80a0ed4:	e7bf      	b.n	80a0e56 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x17e>
                    level = bins->right[RIGHT_1000];
 80a0ed6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                    break;
 80a0ed8:	e7bd      	b.n	80a0e56 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x17e>
                    level = bins->right[RIGHT_160];
 80a0eda:	6a20      	ldr	r0, [r4, #32]
                    break;
 80a0edc:	e7bb      	b.n	80a0e56 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x17e>
            } else if (disp_width == 10) {
 80a0ede:	2b0a      	cmp	r3, #10
 80a0ee0:	d122      	bne.n	80a0f28 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x250>
                switch(i) {
 80a0ee2:	2d09      	cmp	r5, #9
 80a0ee4:	d820      	bhi.n	80a0f28 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x250>
 80a0ee6:	a301      	add	r3, pc, #4	; (adr r3, 80a0eec <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x214>)
 80a0ee8:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 80a0eec:	080a0f15 	.word	0x080a0f15
 80a0ef0:	080a0f19 	.word	0x080a0f19
 80a0ef4:	080a0f1d 	.word	0x080a0f1d
 80a0ef8:	080a0e55 	.word	0x080a0e55
 80a0efc:	080a0ec7 	.word	0x080a0ec7
 80a0f00:	080a0ed3 	.word	0x080a0ed3
 80a0f04:	080a0ed7 	.word	0x080a0ed7
 80a0f08:	080a0f21 	.word	0x080a0f21
 80a0f0c:	080a0edb 	.word	0x080a0edb
 80a0f10:	080a0f25 	.word	0x080a0f25
                    level = bins->left[LEFT_63];
 80a0f14:	6820      	ldr	r0, [r4, #0]
                    break;
 80a0f16:	e79e      	b.n	80a0e56 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x17e>
                    level = bins->left[LEFT_160];
 80a0f18:	6860      	ldr	r0, [r4, #4]
                    break;
 80a0f1a:	e79c      	b.n	80a0e56 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x17e>
                    level = bins->left[LEFT_400];
 80a0f1c:	68a0      	ldr	r0, [r4, #8]
                    break;
 80a0f1e:	e79a      	b.n	80a0e56 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x17e>
                    level = bins->right[RIGHT_400];
 80a0f20:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    break;
 80a0f22:	e798      	b.n	80a0e56 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x17e>
                    level = bins->right[RIGHT_63];
 80a0f24:	69e0      	ldr	r0, [r4, #28]
                    break;
 80a0f26:	e796      	b.n	80a0e56 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x17e>
            } else if (disp_width == 10) {
 80a0f28:	2000      	movs	r0, #0
 80a0f2a:	e794      	b.n	80a0e56 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x17e>
            }
        }
    }
}
 80a0f2c:	b009      	add	sp, #36	; 0x24
 80a0f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0f32:	bf00      	nop
 80a0f34:	20000074 	.word	0x20000074
 80a0f38:	20000078 	.word	0x20000078
 80a0f3c:	2000007e 	.word	0x2000007e
 80a0f40:	080ac864 	.word	0x080ac864
 80a0f44:	457ff000 	.word	0x457ff000
 80a0f48:	41e80000 	.word	0x41e80000

080a0f4c <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff>:
/* ================================================================== *
 * Function: visualizer_bass_middle
 * Description: All bars react to bass beats. Bulge in middle of display
 * Parameters: none.
 * ================================================================== */
void Bar_Matrix::visualizer_bass_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0f50:	4604      	mov	r4, r0
 80a0f52:	b089      	sub	sp, #36	; 0x24
    decay(out_factor);
 80a0f54:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_bass_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0f56:	4690      	mov	r8, r2
 80a0f58:	460d      	mov	r5, r1
    decay(out_factor);
 80a0f5a:	f00a fbb3 	bl	80ab6c4 <__aeabi_f2d>

    if (bd->num_beats() != last_beat_count) {
 80a0f5e:	4e43      	ldr	r6, [pc, #268]	; (80a106c <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x120>)
    decay(out_factor);
 80a0f60:	4602      	mov	r2, r0
 80a0f62:	460b      	mov	r3, r1
 80a0f64:	4620      	mov	r0, r4
 80a0f66:	f7ff f8b1 	bl	80a00cc <_ZN10Bar_Matrix5decayEd>
    if (bd->num_beats() != last_beat_count) {
 80a0f6a:	6830      	ldr	r0, [r6, #0]
 80a0f6c:	f001 f997 	bl	80a229e <_ZN14Beat_Detection9num_beatsEv>
 80a0f70:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
 80a0f74:	4298      	cmp	r0, r3
 80a0f76:	d00d      	beq.n	80a0f94 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x48>
        last_beat_count = bd->num_beats();
 80a0f78:	6830      	ldr	r0, [r6, #0]
 80a0f7a:	f001 f990 	bl	80a229e <_ZN14Beat_Detection9num_beatsEv>
 80a0f7e:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
        color_table_idx++;
        color_table_idx %= 51;
 80a0f82:	2033      	movs	r0, #51	; 0x33
 80a0f84:	493a      	ldr	r1, [pc, #232]	; (80a1070 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x124>)
        color_table_idx++;
 80a0f86:	680b      	ldr	r3, [r1, #0]
 80a0f88:	3301      	adds	r3, #1
        color_table_idx %= 51;
 80a0f8a:	fb93 f2f0 	sdiv	r2, r3, r0
 80a0f8e:	fb00 3312 	mls	r3, r0, r2, r3
 80a0f92:	600b      	str	r3, [r1, #0]
    }

    // Average all 4 low frequency bins
    float energy = bins->right[RIGHT_63] + bins->left[LEFT_63] + bins->right[RIGHT_160] + bins->left[LEFT_160];
 80a0f94:	682b      	ldr	r3, [r5, #0]
 80a0f96:	69e8      	ldr	r0, [r5, #28]
    energy /= 4.0;
    energy /= (float) BINS_MAX;
    energy *= energy;
    // Use the "energy" of the low frequency bins to determine number of LEDs to light
    // Add 0.5 forces round to nearest integer
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
 80a0f98:	2609      	movs	r6, #9
    float energy = bins->right[RIGHT_63] + bins->left[LEFT_63] + bins->right[RIGHT_160] + bins->left[LEFT_160];
 80a0f9a:	4418      	add	r0, r3
 80a0f9c:	6a2b      	ldr	r3, [r5, #32]
    for (int x = 0; x < NUM_BARS / 2; x++) {
        int num_lit = max_lit / (NUM_BARS/2 - x);
        int y = (STRIP_LENGTH / 2) - (num_lit / 2);

        for (int i = 0; i < num_lit; i++) {
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0f9e:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 80a1070 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x124>
    float energy = bins->right[RIGHT_63] + bins->left[LEFT_63] + bins->right[RIGHT_160] + bins->left[LEFT_160];
 80a0fa2:	4418      	add	r0, r3
 80a0fa4:	686b      	ldr	r3, [r5, #4]
    for (int x = 0; x < NUM_BARS / 2; x++) {
 80a0fa6:	2500      	movs	r5, #0
    float energy = bins->right[RIGHT_63] + bins->left[LEFT_63] + bins->right[RIGHT_160] + bins->left[LEFT_160];
 80a0fa8:	4418      	add	r0, r3
 80a0faa:	f00a ffe5 	bl	80abf78 <__aeabi_i2f>
    energy /= 4.0;
 80a0fae:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a0fb2:	f00b f835 	bl	80ac020 <__aeabi_fmul>
    energy /= (float) BINS_MAX;
 80a0fb6:	492f      	ldr	r1, [pc, #188]	; (80a1074 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x128>)
 80a0fb8:	f00b f8e6 	bl	80ac188 <__aeabi_fdiv>
 80a0fbc:	4601      	mov	r1, r0
    energy *= energy;
 80a0fbe:	f00b f82f 	bl	80ac020 <__aeabi_fmul>
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
 80a0fc2:	492d      	ldr	r1, [pc, #180]	; (80a1078 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x12c>)
 80a0fc4:	f00b f82c 	bl	80ac020 <__aeabi_fmul>
 80a0fc8:	f00a fb7c 	bl	80ab6c4 <__aeabi_f2d>
 80a0fcc:	2200      	movs	r2, #0
 80a0fce:	4b2b      	ldr	r3, [pc, #172]	; (80a107c <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x130>)
 80a0fd0:	f00a fa1a 	bl	80ab408 <__adddf3>
 80a0fd4:	f00a fe7e 	bl	80abcd4 <__aeabi_d2iz>
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0fd8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80a1080 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x134>
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
 80a0fdc:	9004      	str	r0, [sp, #16]
        int num_lit = max_lit / (NUM_BARS/2 - x);
 80a0fde:	9b04      	ldr	r3, [sp, #16]
 80a0fe0:	f1c5 0705 	rsb	r7, r5, #5
 80a0fe4:	fb93 f7f7 	sdiv	r7, r3, r7
        for (int i = 0; i < num_lit; i++) {
 80a0fe8:	f04f 0a00 	mov.w	sl, #0
        int y = (STRIP_LENGTH / 2) - (num_lit / 2);
 80a0fec:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
 80a0ff0:	105b      	asrs	r3, r3, #1
 80a0ff2:	f1c3 031d 	rsb	r3, r3, #29
 80a0ff6:	9305      	str	r3, [sp, #20]
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0ff8:	b2eb      	uxtb	r3, r5
 80a0ffa:	9306      	str	r3, [sp, #24]
        for (int i = 0; i < num_lit; i++) {
 80a0ffc:	45ba      	cmp	sl, r7
 80a0ffe:	da2c      	bge.n	80a105a <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x10e>
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a1000:	210c      	movs	r1, #12
 80a1002:	9b05      	ldr	r3, [sp, #20]
 80a1004:	eb03 020a 	add.w	r2, r3, sl
 80a1008:	f8db 3000 	ldr.w	r3, [fp]
 80a100c:	b292      	uxth	r2, r2
 80a100e:	434b      	muls	r3, r1
 80a1010:	eb09 0103 	add.w	r1, r9, r3
 80a1014:	7a08      	ldrb	r0, [r1, #8]
 80a1016:	f819 3003 	ldrb.w	r3, [r9, r3]
 80a101a:	7909      	ldrb	r1, [r1, #4]
 80a101c:	9002      	str	r0, [sp, #8]
 80a101e:	9101      	str	r1, [sp, #4]
 80a1020:	4620      	mov	r0, r4
 80a1022:	9906      	ldr	r1, [sp, #24]
 80a1024:	9300      	str	r3, [sp, #0]
 80a1026:	4643      	mov	r3, r8
 80a1028:	9207      	str	r2, [sp, #28]
 80a102a:	f7ff f979 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(NUM_BARS-x-1, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a102e:	210c      	movs	r1, #12
 80a1030:	f8db 3000 	ldr.w	r3, [fp]
 80a1034:	9a07      	ldr	r2, [sp, #28]
 80a1036:	434b      	muls	r3, r1
 80a1038:	eb09 0103 	add.w	r1, r9, r3
 80a103c:	7a08      	ldrb	r0, [r1, #8]
 80a103e:	f819 3003 	ldrb.w	r3, [r9, r3]
 80a1042:	7909      	ldrb	r1, [r1, #4]
 80a1044:	9002      	str	r0, [sp, #8]
 80a1046:	9101      	str	r1, [sp, #4]
 80a1048:	9300      	str	r3, [sp, #0]
 80a104a:	4631      	mov	r1, r6
 80a104c:	4643      	mov	r3, r8
 80a104e:	4620      	mov	r0, r4
 80a1050:	f7ff f966 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (int i = 0; i < num_lit; i++) {
 80a1054:	f10a 0a01 	add.w	sl, sl, #1
 80a1058:	e7d0      	b.n	80a0ffc <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0xb0>
    for (int x = 0; x < NUM_BARS / 2; x++) {
 80a105a:	3501      	adds	r5, #1
 80a105c:	3e01      	subs	r6, #1
 80a105e:	2d05      	cmp	r5, #5
 80a1060:	b2f6      	uxtb	r6, r6
 80a1062:	d1bc      	bne.n	80a0fde <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x92>
        }
    }
}
 80a1064:	b009      	add	sp, #36	; 0x24
 80a1066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a106a:	bf00      	nop
 80a106c:	20000074 	.word	0x20000074
 80a1070:	20000078 	.word	0x20000078
 80a1074:	457ff000 	.word	0x457ff000
 80a1078:	42680000 	.word	0x42680000
 80a107c:	3fe00000 	.word	0x3fe00000
 80a1080:	080ac864 	.word	0x080ac864

080a1084 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff>:
/* ================================================================== *
 * Function: visualizer_bass_slide
 * Description: All bars react to bass beats. Bulge in middle of display
 * Parameters: none.
 * ================================================================== */
void Bar_Matrix::visualizer_bass_slide(audio_bins* bins, float in_factor, float out_factor) {
 80a1084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1088:	4604      	mov	r4, r0
 80a108a:	b089      	sub	sp, #36	; 0x24
    decay(out_factor);
 80a108c:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_bass_slide(audio_bins* bins, float in_factor, float out_factor) {
 80a108e:	4617      	mov	r7, r2
 80a1090:	460d      	mov	r5, r1
    decay(out_factor);
 80a1092:	f00a fb17 	bl	80ab6c4 <__aeabi_f2d>

    if (bd->num_beats() != last_beat_count) {
 80a1096:	4e6c      	ldr	r6, [pc, #432]	; (80a1248 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1c4>)
    decay(out_factor);
 80a1098:	4602      	mov	r2, r0
 80a109a:	460b      	mov	r3, r1
 80a109c:	4620      	mov	r0, r4
 80a109e:	f7ff f815 	bl	80a00cc <_ZN10Bar_Matrix5decayEd>
    if (bd->num_beats() != last_beat_count) {
 80a10a2:	6830      	ldr	r0, [r6, #0]
 80a10a4:	f001 f8fb 	bl	80a229e <_ZN14Beat_Detection9num_beatsEv>
 80a10a8:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
 80a10ac:	4298      	cmp	r0, r3
 80a10ae:	d00d      	beq.n	80a10cc <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x48>
        last_beat_count = bd->num_beats();
 80a10b0:	6830      	ldr	r0, [r6, #0]
 80a10b2:	f001 f8f4 	bl	80a229e <_ZN14Beat_Detection9num_beatsEv>
 80a10b6:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
        color_table_idx++;
        color_table_idx %= 51;
 80a10ba:	2033      	movs	r0, #51	; 0x33
 80a10bc:	4963      	ldr	r1, [pc, #396]	; (80a124c <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1c8>)
        color_table_idx++;
 80a10be:	680b      	ldr	r3, [r1, #0]
 80a10c0:	3301      	adds	r3, #1
        color_table_idx %= 51;
 80a10c2:	fb93 f2f0 	sdiv	r2, r3, r0
 80a10c6:	fb00 3312 	mls	r3, r0, r2, r3
 80a10ca:	600b      	str	r3, [r1, #0]
    }

    // Average all 4 low frequency bins
    float energy = (bins->right[RIGHT_63] + bins->left[LEFT_63]) + (bins->right[RIGHT_160] + bins->left[LEFT_160])+ (bins->right[RIGHT_400] + bins->left[LEFT_400])+ (bins->right[RIGHT_1000] + bins->left[LEFT_1000])+ (bins->right[RIGHT_2500] + bins->left[LEFT_2500])+ (bins->right[RIGHT_6250] + bins->left[LEFT_6250])+ (bins->right[RIGHT_16000] + bins->left[LEFT_16000]);
 80a10cc:	682a      	ldr	r2, [r5, #0]
 80a10ce:	69eb      	ldr	r3, [r5, #28]
 80a10d0:	6869      	ldr	r1, [r5, #4]
 80a10d2:	4413      	add	r3, r2
 80a10d4:	6a2a      	ldr	r2, [r5, #32]
 80a10d6:	68e8      	ldr	r0, [r5, #12]
 80a10d8:	440a      	add	r2, r1
 80a10da:	4413      	add	r3, r2
 80a10dc:	68a9      	ldr	r1, [r5, #8]
 80a10de:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80a10e0:	440a      	add	r2, r1
 80a10e2:	4413      	add	r3, r2
 80a10e4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a10e6:	4402      	add	r2, r0
 80a10e8:	4413      	add	r3, r2
 80a10ea:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80a10ec:	692a      	ldr	r2, [r5, #16]
 80a10ee:	4410      	add	r0, r2
 80a10f0:	4403      	add	r3, r0
 80a10f2:	696a      	ldr	r2, [r5, #20]
 80a10f4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80a10f6:	4410      	add	r0, r2
 80a10f8:	4403      	add	r3, r0
 80a10fa:	69aa      	ldr	r2, [r5, #24]
 80a10fc:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80a10fe:	4410      	add	r0, r2
 80a1100:	4418      	add	r0, r3
 80a1102:	f00a ff39 	bl	80abf78 <__aeabi_i2f>
    energy = energy / 2;
 80a1106:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a110a:	f00a ff89 	bl	80ac020 <__aeabi_fmul>
    bass_slide_ema = 0.5 * energy + 0.5 * bass_slide_ema;
 80a110e:	f00a fad9 	bl	80ab6c4 <__aeabi_f2d>
 80a1112:	2200      	movs	r2, #0
 80a1114:	4b4e      	ldr	r3, [pc, #312]	; (80a1250 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1cc>)
 80a1116:	f00a fb2d 	bl	80ab774 <__aeabi_dmul>
 80a111a:	4680      	mov	r8, r0
 80a111c:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
 80a1120:	4689      	mov	r9, r1
 80a1122:	f00a facf 	bl	80ab6c4 <__aeabi_f2d>
 80a1126:	2200      	movs	r2, #0
 80a1128:	4b49      	ldr	r3, [pc, #292]	; (80a1250 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1cc>)
 80a112a:	f00a fb23 	bl	80ab774 <__aeabi_dmul>
 80a112e:	460b      	mov	r3, r1
 80a1130:	4602      	mov	r2, r0
 80a1132:	4649      	mov	r1, r9
 80a1134:	4640      	mov	r0, r8
 80a1136:	f00a f967 	bl	80ab408 <__adddf3>
 80a113a:	f00a fe13 	bl	80abd64 <__aeabi_d2f>
 80a113e:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
 80a1142:	4605      	mov	r5, r0
 80a1144:	f004 f93e 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
    // Add 0.5 forces round to nearest integer
    //bass_slide_ema = 0.9 * energy + 0.1 * bass_slide_ema;
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
    int middle_led = STRIP_LENGTH / 2;

    if (millis() - bass_slide_millis > 35) {
 80a1148:	f8d4 3258 	ldr.w	r3, [r4, #600]	; 0x258
 80a114c:	1ac0      	subs	r0, r0, r3
 80a114e:	2823      	cmp	r0, #35	; 0x23
 80a1150:	d92b      	bls.n	80a11aa <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x126>
 80a1152:	f004 f937 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
        bass_slide_millis = millis();

        bass_slide_heights[0] = bass_slide_heights[1];
 80a1156:	f8d4 3230 	ldr.w	r3, [r4, #560]	; 0x230
    energy /= 4.0;
 80a115a:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
        bass_slide_heights[0] = bass_slide_heights[1];
 80a115e:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
        bass_slide_heights[1] = bass_slide_heights[2];
 80a1162:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
        bass_slide_millis = millis();
 80a1166:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
        bass_slide_heights[1] = bass_slide_heights[2];
 80a116a:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
        bass_slide_heights[2] = bass_slide_heights[3];
 80a116e:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
    energy /= 4.0;
 80a1172:	4628      	mov	r0, r5
        bass_slide_heights[2] = bass_slide_heights[3];
 80a1174:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
        bass_slide_heights[3] = bass_slide_heights[4];
 80a1178:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 80a117c:	f8c4 3238 	str.w	r3, [r4, #568]	; 0x238
    energy /= 4.0;
 80a1180:	f00a ff4e 	bl	80ac020 <__aeabi_fmul>
    energy /= (float) BINS_MAX;
 80a1184:	4933      	ldr	r1, [pc, #204]	; (80a1254 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1d0>)
 80a1186:	f00a ffff 	bl	80ac188 <__aeabi_fdiv>
 80a118a:	4601      	mov	r1, r0
    energy *= energy;
 80a118c:	f00a ff48 	bl	80ac020 <__aeabi_fmul>
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
 80a1190:	4931      	ldr	r1, [pc, #196]	; (80a1258 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1d4>)
 80a1192:	f00a ff45 	bl	80ac020 <__aeabi_fmul>
 80a1196:	f00a fa95 	bl	80ab6c4 <__aeabi_f2d>
 80a119a:	2200      	movs	r2, #0
 80a119c:	4b2c      	ldr	r3, [pc, #176]	; (80a1250 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1cc>)
 80a119e:	f00a f933 	bl	80ab408 <__adddf3>
 80a11a2:	f00a fd97 	bl	80abcd4 <__aeabi_d2iz>
 80a11a6:	f8c4 023c 	str.w	r0, [r4, #572]	; 0x23c
void Bar_Matrix::visualizer_bass_slide(audio_bins* bins, float in_factor, float out_factor) {
 80a11aa:	2509      	movs	r5, #9
 80a11ac:	2600      	movs	r6, #0
 80a11ae:	f504 730b 	add.w	r3, r4, #556	; 0x22c
    for (int x = 0; x < NUM_BARS / 2; x++) {
        int num_lit = bass_slide_heights[x];// / (float)(NUM_BARS/2 - x);
        int y = (STRIP_LENGTH / 2) - (num_lit / 2);

        for (int i = 0; i < num_lit; i++) {
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a11b2:	f8df b098 	ldr.w	fp, [pc, #152]	; 80a124c <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1c8>
 80a11b6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80a125c <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1d8>
 80a11ba:	9304      	str	r3, [sp, #16]
        for (int i = 0; i < num_lit; i++) {
 80a11bc:	f04f 0900 	mov.w	r9, #0
        int num_lit = bass_slide_heights[x];// / (float)(NUM_BARS/2 - x);
 80a11c0:	9b04      	ldr	r3, [sp, #16]
 80a11c2:	f853 ab04 	ldr.w	sl, [r3], #4
 80a11c6:	9304      	str	r3, [sp, #16]
        int y = (STRIP_LENGTH / 2) - (num_lit / 2);
 80a11c8:	eb0a 73da 	add.w	r3, sl, sl, lsr #31
 80a11cc:	105b      	asrs	r3, r3, #1
 80a11ce:	f1c3 031d 	rsb	r3, r3, #29
 80a11d2:	9305      	str	r3, [sp, #20]
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a11d4:	b2f3      	uxtb	r3, r6
 80a11d6:	9306      	str	r3, [sp, #24]
        for (int i = 0; i < num_lit; i++) {
 80a11d8:	45d1      	cmp	r9, sl
 80a11da:	da2c      	bge.n	80a1236 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1b2>
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a11dc:	210c      	movs	r1, #12
 80a11de:	9b05      	ldr	r3, [sp, #20]
 80a11e0:	eb03 0209 	add.w	r2, r3, r9
 80a11e4:	f8db 3000 	ldr.w	r3, [fp]
 80a11e8:	b292      	uxth	r2, r2
 80a11ea:	434b      	muls	r3, r1
 80a11ec:	eb08 0103 	add.w	r1, r8, r3
 80a11f0:	7a08      	ldrb	r0, [r1, #8]
 80a11f2:	f818 3003 	ldrb.w	r3, [r8, r3]
 80a11f6:	7909      	ldrb	r1, [r1, #4]
 80a11f8:	9002      	str	r0, [sp, #8]
 80a11fa:	9101      	str	r1, [sp, #4]
 80a11fc:	4620      	mov	r0, r4
 80a11fe:	9906      	ldr	r1, [sp, #24]
 80a1200:	9300      	str	r3, [sp, #0]
 80a1202:	463b      	mov	r3, r7
 80a1204:	9207      	str	r2, [sp, #28]
 80a1206:	f7ff f88b 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(NUM_BARS-x-1, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a120a:	210c      	movs	r1, #12
 80a120c:	f8db 3000 	ldr.w	r3, [fp]
 80a1210:	9a07      	ldr	r2, [sp, #28]
 80a1212:	434b      	muls	r3, r1
 80a1214:	eb08 0103 	add.w	r1, r8, r3
 80a1218:	7a08      	ldrb	r0, [r1, #8]
 80a121a:	f818 3003 	ldrb.w	r3, [r8, r3]
 80a121e:	7909      	ldrb	r1, [r1, #4]
 80a1220:	9002      	str	r0, [sp, #8]
 80a1222:	9101      	str	r1, [sp, #4]
 80a1224:	9300      	str	r3, [sp, #0]
 80a1226:	4629      	mov	r1, r5
 80a1228:	463b      	mov	r3, r7
 80a122a:	4620      	mov	r0, r4
 80a122c:	f7ff f878 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (int i = 0; i < num_lit; i++) {
 80a1230:	f109 0901 	add.w	r9, r9, #1
 80a1234:	e7d0      	b.n	80a11d8 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x154>
    for (int x = 0; x < NUM_BARS / 2; x++) {
 80a1236:	3601      	adds	r6, #1
 80a1238:	3d01      	subs	r5, #1
 80a123a:	2e05      	cmp	r6, #5
 80a123c:	b2ed      	uxtb	r5, r5
 80a123e:	d1bd      	bne.n	80a11bc <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x138>
            mix_pixel(NUM_BARS-x-1, i, in_factor, 255-COLOR_TABLE[color_table_idx][0], 255-COLOR_TABLE[color_table_idx][1], 255-COLOR_TABLE[color_table_idx][2]);
            mix_pixel(x, y+i+num_lit, in_factor, 255-COLOR_TABLE[color_table_idx][0], 255-COLOR_TABLE[color_table_idx][1], 255-COLOR_TABLE[color_table_idx][2]);
            mix_pixel(NUM_BARS-x-1, y+i+num_lit, in_factor, 255-COLOR_TABLE[color_table_idx][0], 255-COLOR_TABLE[color_table_idx][1], 255-COLOR_TABLE[color_table_idx][2]);
        }*/
    }
}
 80a1240:	b009      	add	sp, #36	; 0x24
 80a1242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1246:	bf00      	nop
 80a1248:	20000074 	.word	0x20000074
 80a124c:	20000078 	.word	0x20000078
 80a1250:	3fe00000 	.word	0x3fe00000
 80a1254:	457ff000 	.word	0x457ff000
 80a1258:	42680000 	.word	0x42680000
 80a125c:	080ac864 	.word	0x080ac864

080a1260 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff>:
/* ================================================================== *
 * Function: visualizer_classic
 * Description: Emulate Steven's original, pre-muse, visualizer.
 * Parameters: none.
 * ================================================================== */
void Bar_Matrix::visualizer_classic(audio_bins* bins, float in_factor, float out_factor) {
 80a1260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1264:	4605      	mov	r5, r0
 80a1266:	b085      	sub	sp, #20
    decay_to_rgb(out_factor, 0, 0, 10);
 80a1268:	4618      	mov	r0, r3
 80a126a:	f00a fa2b 	bl	80ab6c4 <__aeabi_f2d>
 80a126e:	2400      	movs	r4, #0
 80a1270:	460b      	mov	r3, r1
 80a1272:	210a      	movs	r1, #10
 80a1274:	4602      	mov	r2, r0
 80a1276:	e9cd 4101 	strd	r4, r1, [sp, #4]
 80a127a:	4628      	mov	r0, r5
 80a127c:	9400      	str	r4, [sp, #0]
 80a127e:	f7fe ff81 	bl	80a0184 <_ZN10Bar_Matrix12decay_to_rgbEdiii>

    for (int i = 0; i < NUM_BINS; i++) {
        if (bd->beat_on_bin(i)) {
 80a1282:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80a12f4 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x94>
            fill_bar(i, 200, 200, 200);
            //fill_bar(i, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
            color_table_idx = (color_table_idx+1) % 51;
 80a1286:	4e1a      	ldr	r6, [pc, #104]	; (80a12f0 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x90>)

            if (i == 6) {
                fill_bar(7, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a1288:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80a12f8 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x98>
        if (bd->beat_on_bin(i)) {
 80a128c:	4621      	mov	r1, r4
 80a128e:	f8d9 0000 	ldr.w	r0, [r9]
 80a1292:	f001 f800 	bl	80a2296 <_ZN14Beat_Detection11beat_on_binEi>
 80a1296:	b328      	cbz	r0, 80a12e4 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x84>
            fill_bar(i, 200, 200, 200);
 80a1298:	23c8      	movs	r3, #200	; 0xc8
            color_table_idx = (color_table_idx+1) % 51;
 80a129a:	2733      	movs	r7, #51	; 0x33
            fill_bar(i, 200, 200, 200);
 80a129c:	461a      	mov	r2, r3
 80a129e:	9300      	str	r3, [sp, #0]
 80a12a0:	4621      	mov	r1, r4
 80a12a2:	4628      	mov	r0, r5
 80a12a4:	f7fe ffd6 	bl	80a0254 <_ZN10Bar_Matrix8fill_barEiiii>
            color_table_idx = (color_table_idx+1) % 51;
 80a12a8:	6833      	ldr	r3, [r6, #0]
            if (i == 6) {
 80a12aa:	2c06      	cmp	r4, #6
            color_table_idx = (color_table_idx+1) % 51;
 80a12ac:	f103 0301 	add.w	r3, r3, #1
 80a12b0:	fb93 f2f7 	sdiv	r2, r3, r7
 80a12b4:	fb07 3312 	mls	r3, r7, r2, r3
 80a12b8:	6033      	str	r3, [r6, #0]
            if (i == 6) {
 80a12ba:	d113      	bne.n	80a12e4 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x84>
                fill_bar(7, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a12bc:	220c      	movs	r2, #12
 80a12be:	435a      	muls	r2, r3
 80a12c0:	eb08 0302 	add.w	r3, r8, r2
 80a12c4:	6899      	ldr	r1, [r3, #8]
 80a12c6:	f858 2002 	ldr.w	r2, [r8, r2]
 80a12ca:	685b      	ldr	r3, [r3, #4]
 80a12cc:	9100      	str	r1, [sp, #0]
 80a12ce:	4628      	mov	r0, r5
 80a12d0:	2107      	movs	r1, #7
 80a12d2:	f7fe ffbf 	bl	80a0254 <_ZN10Bar_Matrix8fill_barEiiii>
                color_table_idx = (color_table_idx+1) % 51;
 80a12d6:	6833      	ldr	r3, [r6, #0]
 80a12d8:	3301      	adds	r3, #1
 80a12da:	fb93 f2f7 	sdiv	r2, r3, r7
 80a12de:	fb07 3712 	mls	r7, r7, r2, r3
 80a12e2:	6037      	str	r7, [r6, #0]
    for (int i = 0; i < NUM_BINS; i++) {
 80a12e4:	3401      	adds	r4, #1
 80a12e6:	2c07      	cmp	r4, #7
 80a12e8:	d1d0      	bne.n	80a128c <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x2c>
            }
        }
    }
}
 80a12ea:	b005      	add	sp, #20
 80a12ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a12f0:	20000078 	.word	0x20000078
 80a12f4:	20000074 	.word	0x20000074
 80a12f8:	080ac864 	.word	0x080ac864
 80a12fc:	00000000 	.word	0x00000000

080a1300 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff>:
/* ================================================================== *
 * Function: decay
 * Description: slowly fades out matrix values
 * Parameters: [float] factor - decay factor to be multiplied by
 * ================================================================== */
void Bar_Matrix::visualizer_plasma(audio_bins* bins, float in_factor, float out_factor) {
 80a1300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1304:	4680      	mov	r8, r0
 80a1306:	b08b      	sub	sp, #44	; 0x2c
    decay(out_factor);
 80a1308:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_plasma(audio_bins* bins, float in_factor, float out_factor) {
 80a130a:	4691      	mov	r9, r2
 80a130c:	460c      	mov	r4, r1
    decay(out_factor);
 80a130e:	f00a f9d9 	bl	80ab6c4 <__aeabi_f2d>
 80a1312:	4602      	mov	r2, r0
 80a1314:	460b      	mov	r3, r1
 80a1316:	4640      	mov	r0, r8
 80a1318:	f7fe fed8 	bl	80a00cc <_ZN10Bar_Matrix5decayEd>
 80a131c:	2300      	movs	r3, #0
 80a131e:	9305      	str	r3, [sp, #20]

    for (char i = 0; i < disp_width; i++) {
 80a1320:	4b7f      	ldr	r3, [pc, #508]	; (80a1520 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x220>)
 80a1322:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80a1326:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a132a:	429e      	cmp	r6, r3
 80a132c:	f280 80e2 	bge.w	80a14f4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1f4>
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a1330:	4b7c      	ldr	r3, [pc, #496]	; (80a1524 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x224>)
            // Move wave up
            unsigned int color = bars[i]->getPixelColor(j-1);
 80a1332:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80a1530 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x230>
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a1336:	881d      	ldrh	r5, [r3, #0]
            unsigned int color = bars[i]->getPixelColor(j-1);
 80a1338:	00b3      	lsls	r3, r6, #2
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a133a:	3d01      	subs	r5, #1
 80a133c:	b22d      	sxth	r5, r5
            unsigned int color = bars[i]->getPixelColor(j-1);
 80a133e:	9308      	str	r3, [sp, #32]
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a1340:	2d00      	cmp	r5, #0
 80a1342:	dd25      	ble.n	80a1390 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x90>
            unsigned int color = bars[i]->getPixelColor(j-1);
 80a1344:	b2ad      	uxth	r5, r5
 80a1346:	f8db 3000 	ldr.w	r3, [fp]
 80a134a:	9a08      	ldr	r2, [sp, #32]
 80a134c:	1e69      	subs	r1, r5, #1
 80a134e:	5898      	ldr	r0, [r3, r2]
 80a1350:	b289      	uxth	r1, r1
 80a1352:	f002 fad2 	bl	80a38fa <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
            mix_pixel(i, j, in_factor, (char)(color >> 16), (char)(color >> 8), (char)(color));
 80a1356:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80a135a:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80a135e:	b2c7      	uxtb	r7, r0
 80a1360:	462a      	mov	r2, r5
 80a1362:	4631      	mov	r1, r6
 80a1364:	4640      	mov	r0, r8
 80a1366:	9306      	str	r3, [sp, #24]
 80a1368:	9300      	str	r3, [sp, #0]
 80a136a:	e9cd a701 	strd	sl, r7, [sp, #4]
 80a136e:	464b      	mov	r3, r9
 80a1370:	f7fe ffd6 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(i, j+1, in_factor, (char)(color >> 16), (char)(color >> 8), (char)(color));
 80a1374:	9b06      	ldr	r3, [sp, #24]
 80a1376:	1c6a      	adds	r2, r5, #1
 80a1378:	9300      	str	r3, [sp, #0]
 80a137a:	4631      	mov	r1, r6
 80a137c:	464b      	mov	r3, r9
 80a137e:	4640      	mov	r0, r8
 80a1380:	e9cd a701 	strd	sl, r7, [sp, #4]
 80a1384:	b292      	uxth	r2, r2
 80a1386:	3d02      	subs	r5, #2
 80a1388:	f7fe ffca 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a138c:	b22d      	sxth	r5, r5
 80a138e:	e7d7      	b.n	80a1340 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x40>
        }

        // Set bar levels
        int level = 0;
        if (disp_width == 8) {
 80a1390:	4b63      	ldr	r3, [pc, #396]	; (80a1520 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x220>)
 80a1392:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a1396:	2b08      	cmp	r3, #8
 80a1398:	f040 8084 	bne.w	80a14a4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1a4>
                switch(i) {
 80a139c:	2e07      	cmp	r6, #7
 80a139e:	f200 80a7 	bhi.w	80a14f0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1f0>
 80a13a2:	e8df f006 	tbb	[pc, r6]
 80a13a6:	049d      	.short	0x049d
 80a13a8:	79777573 	.word	0x79777573
 80a13ac:	7d7b      	.short	0x7d7b
                    case 0:
                    level = bins->left[LEFT_160];
                    break;
                    case 1:
                    level = bins->left[LEFT_1000];
 80a13ae:	68e0      	ldr	r0, [r4, #12]
                    level = bins->right[RIGHT_63];
                    break;
                }  
            }

        level *= FREQ_GAIN;
 80a13b0:	f00a fde2 	bl	80abf78 <__aeabi_i2f>
 80a13b4:	f00b f810 	bl	80ac3d8 <__aeabi_f2iz>
 80a13b8:	4605      	mov	r5, r0
        // set bar
        float val = level*2*PI/BINS_MAX;
 80a13ba:	0040      	lsls	r0, r0, #1
 80a13bc:	f00a f970 	bl	80ab6a0 <__aeabi_i2d>
 80a13c0:	a34f      	add	r3, pc, #316	; (adr r3, 80a1500 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x200>)
 80a13c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a13c6:	f00a f9d5 	bl	80ab774 <__aeabi_dmul>
 80a13ca:	a34f      	add	r3, pc, #316	; (adr r3, 80a1508 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x208>)
 80a13cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a13d0:	f00a fafa 	bl	80ab9c8 <__aeabi_ddiv>
 80a13d4:	f00a fcc6 	bl	80abd64 <__aeabi_d2f>
 80a13d8:	4607      	mov	r7, r0
        //float intensity = (pow((float)(level)/(float)(BINS_MAX), 2))*255;
        float intensity = (level)/(BINS_MAX)*255.0f;
 80a13da:	4628      	mov	r0, r5
 80a13dc:	f00a fdcc 	bl	80abf78 <__aeabi_i2f>
 80a13e0:	4951      	ldr	r1, [pc, #324]	; (80a1528 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x228>)
 80a13e2:	f00a fed1 	bl	80ac188 <__aeabi_fdiv>
 80a13e6:	4951      	ldr	r1, [pc, #324]	; (80a152c <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x22c>)
 80a13e8:	f00a fe1a 	bl	80ac020 <__aeabi_fmul>
 80a13ec:	4601      	mov	r1, r0
        intensity *= intensity;
 80a13ee:	f00a fe17 	bl	80ac020 <__aeabi_fmul>
        if (intensity > 255) intensity = 255.0;
 80a13f2:	494e      	ldr	r1, [pc, #312]	; (80a152c <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x22c>)
        intensity *= intensity;
 80a13f4:	4605      	mov	r5, r0
        if (intensity > 255) intensity = 255.0;
 80a13f6:	f00a ffcf 	bl	80ac398 <__aeabi_fcmpgt>
 80a13fa:	b100      	cbz	r0, 80a13fe <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xfe>
 80a13fc:	4d4b      	ldr	r5, [pc, #300]	; (80a152c <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x22c>)
        mix_pixel(i, 0, in_factor, cos(val - 4*PI/3)*intensity, cos(val - 2*PI/3)*intensity, cos(val)*intensity);
 80a13fe:	4638      	mov	r0, r7
 80a1400:	f00a f960 	bl	80ab6c4 <__aeabi_f2d>
 80a1404:	a342      	add	r3, pc, #264	; (adr r3, 80a1510 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x210>)
 80a1406:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a140a:	4682      	mov	sl, r0
 80a140c:	468b      	mov	fp, r1
 80a140e:	f009 fff9 	bl	80ab404 <__aeabi_dsub>
 80a1412:	f006 fc3d 	bl	80a7c90 <cos>
 80a1416:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a141a:	4628      	mov	r0, r5
 80a141c:	f00a f952 	bl	80ab6c4 <__aeabi_f2d>
 80a1420:	a33d      	add	r3, pc, #244	; (adr r3, 80a1518 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x218>)
 80a1422:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1426:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a142a:	4650      	mov	r0, sl
 80a142c:	4659      	mov	r1, fp
 80a142e:	f009 ffe9 	bl	80ab404 <__aeabi_dsub>
 80a1432:	f006 fc2d 	bl	80a7c90 <cos>
 80a1436:	4682      	mov	sl, r0
 80a1438:	4638      	mov	r0, r7
 80a143a:	468b      	mov	fp, r1
 80a143c:	f006 fc7e 	bl	80a7d3c <cosf>
 80a1440:	4601      	mov	r1, r0
 80a1442:	4628      	mov	r0, r5
 80a1444:	f00a fdec 	bl	80ac020 <__aeabi_fmul>
 80a1448:	f00a ffec 	bl	80ac424 <__aeabi_f2uiz>
 80a144c:	b2c0      	uxtb	r0, r0
 80a144e:	4652      	mov	r2, sl
 80a1450:	465b      	mov	r3, fp
 80a1452:	9002      	str	r0, [sp, #8]
 80a1454:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a1458:	f00a f98c 	bl	80ab774 <__aeabi_dmul>
 80a145c:	f00a fc62 	bl	80abd24 <__aeabi_d2uiz>
 80a1460:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a1464:	b2c0      	uxtb	r0, r0
 80a1466:	9001      	str	r0, [sp, #4]
 80a1468:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a146c:	f00a f982 	bl	80ab774 <__aeabi_dmul>
 80a1470:	f00a fc58 	bl	80abd24 <__aeabi_d2uiz>
 80a1474:	b2c0      	uxtb	r0, r0
 80a1476:	464b      	mov	r3, r9
 80a1478:	9000      	str	r0, [sp, #0]
 80a147a:	2200      	movs	r2, #0
 80a147c:	4631      	mov	r1, r6
 80a147e:	4640      	mov	r0, r8
 80a1480:	f7fe ff4e 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
    for (char i = 0; i < disp_width; i++) {
 80a1484:	9b05      	ldr	r3, [sp, #20]
 80a1486:	3301      	adds	r3, #1
 80a1488:	9305      	str	r3, [sp, #20]
 80a148a:	e749      	b.n	80a1320 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x20>
                    level = bins->left[LEFT_6250];
 80a148c:	6960      	ldr	r0, [r4, #20]
                    break;
 80a148e:	e78f      	b.n	80a13b0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xb0>
                    level = bins->left[LEFT_16000];
 80a1490:	69a0      	ldr	r0, [r4, #24]
                    break;
 80a1492:	e78d      	b.n	80a13b0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xb0>
                    level = bins->right[RIGHT_16000];
 80a1494:	6b60      	ldr	r0, [r4, #52]	; 0x34
                    break;
 80a1496:	e78b      	b.n	80a13b0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xb0>
                    level = bins->right[RIGHT_6250];
 80a1498:	6b20      	ldr	r0, [r4, #48]	; 0x30
                    break;
 80a149a:	e789      	b.n	80a13b0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xb0>
                    level = bins->right[RIGHT_1000];
 80a149c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                    break;
 80a149e:	e787      	b.n	80a13b0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xb0>
                    level = bins->right[RIGHT_160];
 80a14a0:	6a20      	ldr	r0, [r4, #32]
                    break;
 80a14a2:	e785      	b.n	80a13b0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xb0>
            } else if (disp_width == 10) {
 80a14a4:	2b0a      	cmp	r3, #10
 80a14a6:	d123      	bne.n	80a14f0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1f0>
                switch(i) {
 80a14a8:	2e09      	cmp	r6, #9
 80a14aa:	d821      	bhi.n	80a14f0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1f0>
 80a14ac:	a301      	add	r3, pc, #4	; (adr r3, 80a14b4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1b4>)
 80a14ae:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 80a14b2:	bf00      	nop
 80a14b4:	080a14dd 	.word	0x080a14dd
 80a14b8:	080a14e1 	.word	0x080a14e1
 80a14bc:	080a14e5 	.word	0x080a14e5
 80a14c0:	080a13af 	.word	0x080a13af
 80a14c4:	080a148d 	.word	0x080a148d
 80a14c8:	080a1499 	.word	0x080a1499
 80a14cc:	080a149d 	.word	0x080a149d
 80a14d0:	080a14e9 	.word	0x080a14e9
 80a14d4:	080a14a1 	.word	0x080a14a1
 80a14d8:	080a14ed 	.word	0x080a14ed
                    level = bins->left[LEFT_63];
 80a14dc:	6820      	ldr	r0, [r4, #0]
                    break;
 80a14de:	e767      	b.n	80a13b0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xb0>
                    level = bins->left[LEFT_160];
 80a14e0:	6860      	ldr	r0, [r4, #4]
                    break;
 80a14e2:	e765      	b.n	80a13b0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xb0>
                    level = bins->left[LEFT_400];
 80a14e4:	68a0      	ldr	r0, [r4, #8]
                    break;
 80a14e6:	e763      	b.n	80a13b0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xb0>
                    level = bins->right[RIGHT_400];
 80a14e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    break;
 80a14ea:	e761      	b.n	80a13b0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xb0>
                    level = bins->right[RIGHT_63];
 80a14ec:	69e0      	ldr	r0, [r4, #28]
                    break;
 80a14ee:	e75f      	b.n	80a13b0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xb0>
            } else if (disp_width == 10) {
 80a14f0:	2000      	movs	r0, #0
 80a14f2:	e75d      	b.n	80a13b0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xb0>

        //bars[i]->setPixelColor(0, cos(val - 2*PI/3)*intensity, cos(val)*intensity, cos(val - 4*PI/3)*intensity);

    }
}
 80a14f4:	b00b      	add	sp, #44	; 0x2c
 80a14f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a14fa:	bf00      	nop
 80a14fc:	f3af 8000 	nop.w
 80a1500:	fc8b007a 	.word	0xfc8b007a
 80a1504:	400921fa 	.word	0x400921fa
 80a1508:	00000000 	.word	0x00000000
 80a150c:	40affe00 	.word	0x40affe00
 80a1510:	fdb20051 	.word	0xfdb20051
 80a1514:	4010c151 	.word	0x4010c151
 80a1518:	fdb20051 	.word	0xfdb20051
 80a151c:	4000c151 	.word	0x4000c151
 80a1520:	2000007e 	.word	0x2000007e
 80a1524:	2000007c 	.word	0x2000007c
 80a1528:	457ff000 	.word	0x457ff000
 80a152c:	437f0000 	.word	0x437f0000
 80a1530:	20000070 	.word	0x20000070

080a1534 <_ZN10Bar_Matrix15visualizer_pongEf>:

void Bar_Matrix::visualizer_pong(float in_factor) {
 80a1534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1538:	4604      	mov	r4, r0
    pongPaddles[0].tick(&pongBall);
 80a153a:	f500 76fc 	add.w	r6, r0, #504	; 0x1f8
 80a153e:	f500 7acc 	add.w	sl, r0, #408	; 0x198
void Bar_Matrix::visualizer_pong(float in_factor) {
 80a1542:	b085      	sub	sp, #20
    pongPaddles[0].tick(&pongBall);
 80a1544:	4650      	mov	r0, sl
void Bar_Matrix::visualizer_pong(float in_factor) {
 80a1546:	460f      	mov	r7, r1
    pongPaddles[1].tick(&pongBall);
 80a1548:	f504 79e4 	add.w	r9, r4, #456	; 0x1c8
    pongPaddles[0].tick(&pongBall);
 80a154c:	4631      	mov	r1, r6
 80a154e:	f002 fab9 	bl	80a3ac4 <_ZN10PongPaddle4tickEP8PongBall>
    pongBall.tick();

    if (bd->num_beats() != last_beat_count) {
 80a1552:	4d51      	ldr	r5, [pc, #324]	; (80a1698 <_ZN10Bar_Matrix15visualizer_pongEf+0x164>)
    pongPaddles[1].tick(&pongBall);
 80a1554:	4631      	mov	r1, r6
 80a1556:	4648      	mov	r0, r9
 80a1558:	f002 fab4 	bl	80a3ac4 <_ZN10PongPaddle4tickEP8PongBall>
    pongBall.tick();
 80a155c:	4630      	mov	r0, r6
 80a155e:	f002 fa2f 	bl	80a39c0 <_ZN8PongBall4tickEv>
    if (bd->num_beats() != last_beat_count) {
 80a1562:	6828      	ldr	r0, [r5, #0]
 80a1564:	f000 fe9b 	bl	80a229e <_ZN14Beat_Detection9num_beatsEv>
 80a1568:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
 80a156c:	4298      	cmp	r0, r3
 80a156e:	d01b      	beq.n	80a15a8 <_ZN10Bar_Matrix15visualizer_pongEf+0x74>
        last_beat_count = bd->num_beats();
 80a1570:	6828      	ldr	r0, [r5, #0]
 80a1572:	f000 fe94 	bl	80a229e <_ZN14Beat_Detection9num_beatsEv>
        if (random(0, 3) == 0 ) {
 80a1576:	2103      	movs	r1, #3
        last_beat_count = bd->num_beats();
 80a1578:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
        if (random(0, 3) == 0 ) {
 80a157c:	2000      	movs	r0, #0
 80a157e:	f004 fe2a 	bl	80a61d6 <_Z6randomii>
 80a1582:	2800      	cmp	r0, #0
 80a1584:	d13a      	bne.n	80a15fc <_ZN10Bar_Matrix15visualizer_pongEf+0xc8>
            pongPaddles[1].setColor(bd->r(), bd->g(), bd->b());
 80a1586:	6828      	ldr	r0, [r5, #0]
 80a1588:	f000 fe8b 	bl	80a22a2 <_ZN14Beat_Detection1rEv>
 80a158c:	4680      	mov	r8, r0
 80a158e:	6828      	ldr	r0, [r5, #0]
 80a1590:	f000 fe89 	bl	80a22a6 <_ZN14Beat_Detection1gEv>
 80a1594:	4682      	mov	sl, r0
 80a1596:	6828      	ldr	r0, [r5, #0]
 80a1598:	f000 fe87 	bl	80a22aa <_ZN14Beat_Detection1bEv>
 80a159c:	4652      	mov	r2, sl
 80a159e:	4603      	mov	r3, r0
 80a15a0:	4641      	mov	r1, r8
 80a15a2:	4648      	mov	r0, r9
 80a15a4:	f002 fb3a 	bl	80a3c1c <_ZN10PongPaddle8setColorEiii>
        } else {
            pongBall.setColor(bd->r(), bd->g(), bd->b());
        }
    }

    clear_matrix();
 80a15a8:	4620      	mov	r0, r4
 80a15aa:	f7fe ff27 	bl	80a03fc <_ZN10Bar_Matrix12clear_matrixEv>

    // Draw paddles
    for (int i = 0; i < 2; i++) {
 80a15ae:	4625      	mov	r5, r4
 80a15b0:	f104 0b60 	add.w	fp, r4, #96	; 0x60
        for (int y = 0; y < pongPaddles[i].len; y++) {
 80a15b4:	f04f 0800 	mov.w	r8, #0
 80a15b8:	f505 7acc 	add.w	sl, r5, #408	; 0x198
 80a15bc:	f8d5 3198 	ldr.w	r3, [r5, #408]	; 0x198
 80a15c0:	4543      	cmp	r3, r8
 80a15c2:	dd44      	ble.n	80a164e <_ZN10Bar_Matrix15visualizer_pongEf+0x11a>
            mix_pixel(pongPaddles[i].xPos(), pongPaddles[i].yPos()+y, in_factor, pongPaddles[i].r, pongPaddles[i].g, pongPaddles[i].b);
 80a15c4:	4650      	mov	r0, sl
 80a15c6:	f002 fb1f 	bl	80a3c08 <_ZN10PongPaddle4xPosEv>
 80a15ca:	4681      	mov	r9, r0
 80a15cc:	4650      	mov	r0, sl
 80a15ce:	f002 fb20 	bl	80a3c12 <_ZN10PongPaddle4yPosEv>
 80a15d2:	f895 31c4 	ldrb.w	r3, [r5, #452]	; 0x1c4
 80a15d6:	eb00 0208 	add.w	r2, r0, r8
 80a15da:	9302      	str	r3, [sp, #8]
 80a15dc:	f895 31c0 	ldrb.w	r3, [r5, #448]	; 0x1c0
 80a15e0:	4620      	mov	r0, r4
 80a15e2:	9301      	str	r3, [sp, #4]
 80a15e4:	f895 31bc 	ldrb.w	r3, [r5, #444]	; 0x1bc
 80a15e8:	b292      	uxth	r2, r2
 80a15ea:	9300      	str	r3, [sp, #0]
 80a15ec:	fa5f f189 	uxtb.w	r1, r9
 80a15f0:	463b      	mov	r3, r7
 80a15f2:	f7fe fe95 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (int y = 0; y < pongPaddles[i].len; y++) {
 80a15f6:	f108 0801 	add.w	r8, r8, #1
 80a15fa:	e7df      	b.n	80a15bc <_ZN10Bar_Matrix15visualizer_pongEf+0x88>
        } else if (random(0, 2) == 0) {
 80a15fc:	2102      	movs	r1, #2
 80a15fe:	2000      	movs	r0, #0
 80a1600:	f004 fde9 	bl	80a61d6 <_Z6randomii>
 80a1604:	b988      	cbnz	r0, 80a162a <_ZN10Bar_Matrix15visualizer_pongEf+0xf6>
            pongPaddles[0].setColor(bd->r(), bd->g(), bd->b());
 80a1606:	6828      	ldr	r0, [r5, #0]
 80a1608:	f000 fe4b 	bl	80a22a2 <_ZN14Beat_Detection1rEv>
 80a160c:	4680      	mov	r8, r0
 80a160e:	6828      	ldr	r0, [r5, #0]
 80a1610:	f000 fe49 	bl	80a22a6 <_ZN14Beat_Detection1gEv>
 80a1614:	4681      	mov	r9, r0
 80a1616:	6828      	ldr	r0, [r5, #0]
 80a1618:	f000 fe47 	bl	80a22aa <_ZN14Beat_Detection1bEv>
 80a161c:	464a      	mov	r2, r9
 80a161e:	4603      	mov	r3, r0
 80a1620:	4641      	mov	r1, r8
 80a1622:	4650      	mov	r0, sl
 80a1624:	f002 fafa 	bl	80a3c1c <_ZN10PongPaddle8setColorEiii>
 80a1628:	e7be      	b.n	80a15a8 <_ZN10Bar_Matrix15visualizer_pongEf+0x74>
            pongBall.setColor(bd->r(), bd->g(), bd->b());
 80a162a:	6828      	ldr	r0, [r5, #0]
 80a162c:	f000 fe39 	bl	80a22a2 <_ZN14Beat_Detection1rEv>
 80a1630:	4680      	mov	r8, r0
 80a1632:	6828      	ldr	r0, [r5, #0]
 80a1634:	f000 fe37 	bl	80a22a6 <_ZN14Beat_Detection1gEv>
 80a1638:	4681      	mov	r9, r0
 80a163a:	6828      	ldr	r0, [r5, #0]
 80a163c:	f000 fe35 	bl	80a22aa <_ZN14Beat_Detection1bEv>
 80a1640:	464a      	mov	r2, r9
 80a1642:	4603      	mov	r3, r0
 80a1644:	4641      	mov	r1, r8
 80a1646:	4630      	mov	r0, r6
 80a1648:	f002 fa1e 	bl	80a3a88 <_ZN8PongBall8setColorEiii>
 80a164c:	e7ac      	b.n	80a15a8 <_ZN10Bar_Matrix15visualizer_pongEf+0x74>
    for (int i = 0; i < 2; i++) {
 80a164e:	3530      	adds	r5, #48	; 0x30
 80a1650:	455d      	cmp	r5, fp
 80a1652:	d1af      	bne.n	80a15b4 <_ZN10Bar_Matrix15visualizer_pongEf+0x80>
        }
    }

    // Draw Ball
    for (int i = 0; i < pongBall.len; i++) {
 80a1654:	2500      	movs	r5, #0
 80a1656:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 80a165a:	42ab      	cmp	r3, r5
 80a165c:	dd19      	ble.n	80a1692 <_ZN10Bar_Matrix15visualizer_pongEf+0x15e>
        mix_pixel(pongBall.xPos(), pongBall.yPos()+i, in_factor, pongBall.r, pongBall.g, pongBall.b);
 80a165e:	4630      	mov	r0, r6
 80a1660:	f002 fa08 	bl	80a3a74 <_ZN8PongBall4xPosEv>
 80a1664:	4680      	mov	r8, r0
 80a1666:	4630      	mov	r0, r6
 80a1668:	f002 fa09 	bl	80a3a7e <_ZN8PongBall4yPosEv>
 80a166c:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
 80a1670:	1942      	adds	r2, r0, r5
 80a1672:	9302      	str	r3, [sp, #8]
 80a1674:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
 80a1678:	4620      	mov	r0, r4
 80a167a:	9301      	str	r3, [sp, #4]
 80a167c:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80a1680:	b292      	uxth	r2, r2
 80a1682:	9300      	str	r3, [sp, #0]
 80a1684:	fa5f f188 	uxtb.w	r1, r8
 80a1688:	463b      	mov	r3, r7
 80a168a:	f7fe fe49 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
    for (int i = 0; i < pongBall.len; i++) {
 80a168e:	3501      	adds	r5, #1
 80a1690:	e7e1      	b.n	80a1656 <_ZN10Bar_Matrix15visualizer_pongEf+0x122>
    }
}
 80a1692:	b005      	add	sp, #20
 80a1694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1698:	20000074 	.word	0x20000074

080a169c <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff>:
/* ================================================================== *
 * Function: visualizer_pulse
 * Description: Creates pulses where sound appears to be originating from
 * Parameters:  None
 * ================================================================== */
void Bar_Matrix::visualizer_pulse(audio_bins* bins, float in_factor, float out_factor, float distance_x, float distance_y) {
 80a169c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a16a0:	4605      	mov	r5, r0
 80a16a2:	b099      	sub	sp, #100	; 0x64
    decay (out_factor);
 80a16a4:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_pulse(audio_bins* bins, float in_factor, float out_factor, float distance_x, float distance_y) {
 80a16a6:	460c      	mov	r4, r1
 80a16a8:	9207      	str	r2, [sp, #28]
    decay (out_factor);
 80a16aa:	f00a f80b 	bl	80ab6c4 <__aeabi_f2d>
 80a16ae:	1f26      	subs	r6, r4, #4
 80a16b0:	4602      	mov	r2, r0
 80a16b2:	460b      	mov	r3, r1
 80a16b4:	4628      	mov	r0, r5
 80a16b6:	f7fe fd09 	bl	80a00cc <_ZN10Bar_Matrix5decayEd>
 80a16ba:	4637      	mov	r7, r6
 80a16bc:	3418      	adds	r4, #24
 80a16be:	f10d 0928 	add.w	r9, sp, #40	; 0x28

    // Calculate frequency pan and "fade"
    float pans[NUM_BINS]; // ratio left to right, 0-1
    float intensities[NUM_BINS]; // ratio low to high, 0-1
    for (char i = 0; i < NUM_BINS; i++)
    pans[i] = float(bins->left[i])/float(bins->right[i]);
 80a16c2:	f857 0f04 	ldr.w	r0, [r7, #4]!
 80a16c6:	f00a fc57 	bl	80abf78 <__aeabi_i2f>
 80a16ca:	4680      	mov	r8, r0
 80a16cc:	69f8      	ldr	r0, [r7, #28]
 80a16ce:	f00a fc53 	bl	80abf78 <__aeabi_i2f>
 80a16d2:	4601      	mov	r1, r0
 80a16d4:	4640      	mov	r0, r8
 80a16d6:	f00a fd57 	bl	80ac188 <__aeabi_fdiv>
    for (char i = 0; i < NUM_BINS; i++)
 80a16da:	42bc      	cmp	r4, r7
    pans[i] = float(bins->left[i])/float(bins->right[i]);
 80a16dc:	f849 0b04 	str.w	r0, [r9], #4
    for (char i = 0; i < NUM_BINS; i++)
 80a16e0:	d1ef      	bne.n	80a16c2 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x26>
    for (char i = 0; i < NUM_BINS; i++)
    intensities[i] = ((float(bins->left[i])+float(bins->right[i]))/2.0f)/BINS_MAX;
 80a16e2:	f04f 597c 	mov.w	r9, #1056964608	; 0x3f000000
 80a16e6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80a17e4 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x148>
    for (char i = 0; i < NUM_BINS; i++)
 80a16ea:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
    intensities[i] = ((float(bins->left[i])+float(bins->right[i]))/2.0f)/BINS_MAX;
 80a16ee:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80a16f2:	f00a fc41 	bl	80abf78 <__aeabi_i2f>
 80a16f6:	4607      	mov	r7, r0
 80a16f8:	69f0      	ldr	r0, [r6, #28]
 80a16fa:	f00a fc3d 	bl	80abf78 <__aeabi_i2f>
 80a16fe:	4601      	mov	r1, r0
 80a1700:	4638      	mov	r0, r7
 80a1702:	f00a fb85 	bl	80abe10 <__addsf3>
 80a1706:	4649      	mov	r1, r9
 80a1708:	f00a fc8a 	bl	80ac020 <__aeabi_fmul>
 80a170c:	4641      	mov	r1, r8
 80a170e:	f00a fd3b 	bl	80ac188 <__aeabi_fdiv>
    for (char i = 0; i < NUM_BINS; i++)
 80a1712:	42b4      	cmp	r4, r6
    intensities[i] = ((float(bins->left[i])+float(bins->right[i]))/2.0f)/BINS_MAX;
 80a1714:	f84a 0b04 	str.w	r0, [sl], #4
    for (char i = 0; i < NUM_BINS; i++)
 80a1718:	d1e9      	bne.n	80a16ee <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x52>
 80a171a:	2700      	movs	r7, #0

    for (char i = 0; i < disp_width; i++) {
 80a171c:	4b2e      	ldr	r3, [pc, #184]	; (80a17d8 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x13c>)
 80a171e:	fa5f f987 	uxtb.w	r9, r7
 80a1722:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a1726:	4599      	cmp	r9, r3
 80a1728:	da53      	bge.n	80a17d2 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x136>
 80a172a:	f04f 0800 	mov.w	r8, #0
        for (char j = 0; j < disp_height; j++) {
 80a172e:	4b2b      	ldr	r3, [pc, #172]	; (80a17dc <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x140>)
 80a1730:	fa5f fa88 	uxtb.w	sl, r8
 80a1734:	f9b3 4000 	ldrsh.w	r4, [r3]
 80a1738:	4b27      	ldr	r3, [pc, #156]	; (80a17d8 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x13c>)
 80a173a:	45a2      	cmp	sl, r4
 80a173c:	f9b3 0000 	ldrsh.w	r0, [r3]
 80a1740:	da45      	bge.n	80a17ce <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x132>
            float level = 0;

            // Calculate level intensity
            for (char x = 0; x < NUM_BINS; x++) {
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a1742:	fb99 f0f0 	sdiv	r0, r9, r0
 80a1746:	f00a fc17 	bl	80abf78 <__aeabi_i2f>
 80a174a:	4683      	mov	fp, r0
 80a174c:	fb9a f0f4 	sdiv	r0, sl, r4
 80a1750:	f00a fc12 	bl	80abf78 <__aeabi_i2f>
 80a1754:	4601      	mov	r1, r0
 80a1756:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80a1758:	f00a fd16 	bl	80ac188 <__aeabi_fdiv>
            for (char x = 0; x < NUM_BINS; x++) {
 80a175c:	2400      	movs	r4, #0
            float level = 0;
 80a175e:	2600      	movs	r6, #0
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a1760:	aa0a      	add	r2, sp, #40	; 0x28
 80a1762:	9006      	str	r0, [sp, #24]
 80a1764:	ab11      	add	r3, sp, #68	; 0x44
 80a1766:	9205      	str	r2, [sp, #20]
                level += intensities[x] * distance;
 80a1768:	f853 2b04 	ldr.w	r2, [r3], #4
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a176c:	4659      	mov	r1, fp
                level += intensities[x] * distance;
 80a176e:	e9cd 2308 	strd	r2, r3, [sp, #32]
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a1772:	9b05      	ldr	r3, [sp, #20]
            for (char x = 0; x < NUM_BINS; x++) {
 80a1774:	3401      	adds	r4, #1
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a1776:	f853 0b04 	ldr.w	r0, [r3], #4
            for (char x = 0; x < NUM_BINS; x++) {
 80a177a:	b2e4      	uxtb	r4, r4
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a177c:	9305      	str	r3, [sp, #20]
 80a177e:	f00a fb45 	bl	80abe0c <__aeabi_fsub>
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80a1782:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 80a1786:	9822      	ldr	r0, [sp, #136]	; 0x88
 80a1788:	f00a fcfe 	bl	80ac188 <__aeabi_fdiv>
 80a178c:	9906      	ldr	r1, [sp, #24]
 80a178e:	f00a fb3f 	bl	80abe10 <__addsf3>
                level += intensities[x] * distance;
 80a1792:	9a08      	ldr	r2, [sp, #32]
 80a1794:	4611      	mov	r1, r2
 80a1796:	f00a fc43 	bl	80ac020 <__aeabi_fmul>
 80a179a:	4601      	mov	r1, r0
 80a179c:	4630      	mov	r0, r6
 80a179e:	f00a fb37 	bl	80abe10 <__addsf3>
            for (char x = 0; x < NUM_BINS; x++) {
 80a17a2:	2c07      	cmp	r4, #7
                level += intensities[x] * distance;
 80a17a4:	4606      	mov	r6, r0
            for (char x = 0; x < NUM_BINS; x++) {
 80a17a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a17a8:	d1de      	bne.n	80a1768 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0xcc>
            }

            //level *= 2*PI;
            //mix_pixel(i, j, in_factor, cos(level)*255*level, cos(level - 2*PI/3)*255*level, cos(level - 4*PI/3)*255*level);
            mix_pixel(i, j, in_factor, level*255, level*255, level*255);
 80a17aa:	490d      	ldr	r1, [pc, #52]	; (80a17e0 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x144>)
 80a17ac:	f00a fc38 	bl	80ac020 <__aeabi_fmul>
 80a17b0:	f00a fe38 	bl	80ac424 <__aeabi_f2uiz>
 80a17b4:	b2c0      	uxtb	r0, r0
 80a17b6:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80a17ba:	9000      	str	r0, [sp, #0]
 80a17bc:	4652      	mov	r2, sl
 80a17be:	4649      	mov	r1, r9
 80a17c0:	4628      	mov	r0, r5
 80a17c2:	9b07      	ldr	r3, [sp, #28]
 80a17c4:	f7fe fdac 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = 0; j < disp_height; j++) {
 80a17c8:	f108 0801 	add.w	r8, r8, #1
 80a17cc:	e7af      	b.n	80a172e <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x92>
    for (char i = 0; i < disp_width; i++) {
 80a17ce:	3701      	adds	r7, #1
 80a17d0:	e7a4      	b.n	80a171c <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x80>
        }
    }
}
 80a17d2:	b019      	add	sp, #100	; 0x64
 80a17d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a17d8:	2000007e 	.word	0x2000007e
 80a17dc:	2000007c 	.word	0x2000007c
 80a17e0:	437f0000 	.word	0x437f0000
 80a17e4:	457ff000 	.word	0x457ff000

080a17e8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff>:

void Bar_Matrix::visualizer_rainbow(audio_bins* bins, float in_factor, float out_factor) {
 80a17e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a17ec:	b08d      	sub	sp, #52	; 0x34
 80a17ee:	9005      	str	r0, [sp, #20]
    decay(out_factor);
 80a17f0:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_rainbow(audio_bins* bins, float in_factor, float out_factor) {
 80a17f2:	920a      	str	r2, [sp, #40]	; 0x28
 80a17f4:	460c      	mov	r4, r1
    decay(out_factor);
 80a17f6:	f009 ff65 	bl	80ab6c4 <__aeabi_f2d>
 80a17fa:	4602      	mov	r2, r0
 80a17fc:	460b      	mov	r3, r1
 80a17fe:	9805      	ldr	r0, [sp, #20]
 80a1800:	f7fe fc64 	bl	80a00cc <_ZN10Bar_Matrix5decayEd>
 80a1804:	f04f 0900 	mov.w	r9, #0

    for (char i = 0; i < disp_width/2; i++) {
 80a1808:	4bb6      	ldr	r3, [pc, #728]	; (80a1ae4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
 80a180a:	fa5f f789 	uxtb.w	r7, r9
 80a180e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a1812:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80a1816:	ebb7 0f63 	cmp.w	r7, r3, asr #1
 80a181a:	ea4f 0563 	mov.w	r5, r3, asr #1
 80a181e:	da6f      	bge.n	80a1900 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x118>
        int led_index = 0;
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a1820:	2500      	movs	r5, #0
            // get bin
            int level = bins->left[j/10];
 80a1822:	f04f 080a 	mov.w	r8, #10
        int led_index = 0;
 80a1826:	9506      	str	r5, [sp, #24]
            int level = bins->left[j/10];
 80a1828:	fbb5 f3f8 	udiv	r3, r5, r8
            level *= FREQ_GAIN;
 80a182c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80a1830:	f00a fba2 	bl	80abf78 <__aeabi_i2f>
 80a1834:	f00a fdd0 	bl	80ac3d8 <__aeabi_f2iz>
            // set bar
            if (i < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
 80a1838:	f00a fb9e 	bl	80abf78 <__aeabi_i2f>
 80a183c:	49aa      	ldr	r1, [pc, #680]	; (80a1ae8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x300>)
 80a183e:	f00a fca3 	bl	80ac188 <__aeabi_fdiv>
 80a1842:	2102      	movs	r1, #2
 80a1844:	f7ff f8a4 	bl	80a0990 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a1848:	4602      	mov	r2, r0
 80a184a:	460b      	mov	r3, r1
 80a184c:	4638      	mov	r0, r7
 80a184e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a1852:	f009 ff25 	bl	80ab6a0 <__aeabi_i2d>
 80a1856:	4ba3      	ldr	r3, [pc, #652]	; (80a1ae4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
 80a1858:	4682      	mov	sl, r0
 80a185a:	f9b3 0000 	ldrsh.w	r0, [r3]
 80a185e:	468b      	mov	fp, r1
 80a1860:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80a1864:	1040      	asrs	r0, r0, #1
 80a1866:	f009 ff1b 	bl	80ab6a0 <__aeabi_i2d>
 80a186a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a186e:	f009 ff81 	bl	80ab774 <__aeabi_dmul>
 80a1872:	4602      	mov	r2, r0
 80a1874:	460b      	mov	r3, r1
 80a1876:	4650      	mov	r0, sl
 80a1878:	4659      	mov	r1, fp
 80a187a:	f00a f9ed 	bl	80abc58 <__aeabi_dcmplt>
 80a187e:	b968      	cbnz	r0, 80a189c <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0xb4>
                    //mix_pixel((disp_width/2)-i-1, x*NUM_BARS+led_index, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                    mix_pixel((disp_width/2)-i-1, x*NUM_BARS+led_index, in_factor, bd->r(), bd->g(), bd->b());
                }
            }

            led_index++;
 80a1880:	9b06      	ldr	r3, [sp, #24]
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a1882:	350a      	adds	r5, #10
            led_index++;
 80a1884:	3301      	adds	r3, #1
            led_index = led_index%10;
 80a1886:	fbb3 f2f8 	udiv	r2, r3, r8
 80a188a:	fb08 3312 	mls	r3, r8, r2, r3
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a188e:	b2ed      	uxtb	r5, r5
 80a1890:	2d3c      	cmp	r5, #60	; 0x3c
            led_index = led_index%10;
 80a1892:	9306      	str	r3, [sp, #24]
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a1894:	d1c8      	bne.n	80a1828 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x40>
    for (char i = 0; i < disp_width/2; i++) {
 80a1896:	f109 0901 	add.w	r9, r9, #1
 80a189a:	e7b5      	b.n	80a1808 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x20>
 80a189c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 80a18a0:	f106 0364 	add.w	r3, r6, #100	; 0x64
 80a18a4:	b29b      	uxth	r3, r3
 80a18a6:	9308      	str	r3, [sp, #32]
                    mix_pixel((disp_width/2)-i-1, x*NUM_BARS+led_index, in_factor, bd->r(), bd->g(), bd->b());
 80a18a8:	43f9      	mvns	r1, r7
 80a18aa:	4b8e      	ldr	r3, [pc, #568]	; (80a1ae4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
 80a18ac:	f9b3 a000 	ldrsh.w	sl, [r3]
 80a18b0:	4b8e      	ldr	r3, [pc, #568]	; (80a1aec <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x304>)
 80a18b2:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 80a18b6:	6818      	ldr	r0, [r3, #0]
 80a18b8:	eb01 0a6a 	add.w	sl, r1, sl, asr #1
 80a18bc:	f000 fcf1 	bl	80a22a2 <_ZN14Beat_Detection1rEv>
 80a18c0:	4b8a      	ldr	r3, [pc, #552]	; (80a1aec <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x304>)
 80a18c2:	4683      	mov	fp, r0
 80a18c4:	6818      	ldr	r0, [r3, #0]
 80a18c6:	f000 fcee 	bl	80a22a6 <_ZN14Beat_Detection1gEv>
 80a18ca:	4b88      	ldr	r3, [pc, #544]	; (80a1aec <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x304>)
 80a18cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80a18ce:	6818      	ldr	r0, [r3, #0]
 80a18d0:	f000 fceb 	bl	80a22aa <_ZN14Beat_Detection1bEv>
 80a18d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a18d6:	b2c0      	uxtb	r0, r0
 80a18d8:	9002      	str	r0, [sp, #8]
 80a18da:	b2db      	uxtb	r3, r3
 80a18dc:	fa5f f08b 	uxtb.w	r0, fp
 80a18e0:	fa5f fa8a 	uxtb.w	sl, sl
 80a18e4:	4632      	mov	r2, r6
 80a18e6:	9301      	str	r3, [sp, #4]
 80a18e8:	9000      	str	r0, [sp, #0]
 80a18ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a18ec:	4651      	mov	r1, sl
 80a18ee:	9805      	ldr	r0, [sp, #20]
 80a18f0:	f7fe fd16 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
                for (int x = 0; x < 10; x++) {
 80a18f4:	360a      	adds	r6, #10
 80a18f6:	9b08      	ldr	r3, [sp, #32]
 80a18f8:	b2b6      	uxth	r6, r6
 80a18fa:	42b3      	cmp	r3, r6
 80a18fc:	d1d4      	bne.n	80a18a8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0xc0>
 80a18fe:	e7bf      	b.n	80a1880 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x98>
            // set bar
            if (i-disp_width/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
                float val = level*PI/BINS_MAX;
                for (int x = 0; x < 10; x++) {
                    //mix_pixel(i, x*NUM_BARS+led_index, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                    mix_pixel(i, x*NUM_BARS+led_index, in_factor, bd->r(), bd->g(), bd->b());
 80a1900:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80a1aec <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x304>
    for (char i = disp_width/2; i < disp_width; i++) {
 80a1904:	b2ed      	uxtb	r5, r5
 80a1906:	4b77      	ldr	r3, [pc, #476]	; (80a1ae4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
 80a1908:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a190c:	429d      	cmp	r5, r3
 80a190e:	da6b      	bge.n	80a19e8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x200>
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a1910:	2600      	movs	r6, #0
            int level = bins->right[j/10];
 80a1912:	f04f 090a 	mov.w	r9, #10
        int led_index = 0;
 80a1916:	4637      	mov	r7, r6
            int level = bins->right[j/10];
 80a1918:	fbb6 f3f9 	udiv	r3, r6, r9
 80a191c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
            level *= FREQ_GAIN;
 80a1920:	69d8      	ldr	r0, [r3, #28]
 80a1922:	f00a fb29 	bl	80abf78 <__aeabi_i2f>
            if (i-disp_width/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
 80a1926:	4b6f      	ldr	r3, [pc, #444]	; (80a1ae4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
            level *= FREQ_GAIN;
 80a1928:	4682      	mov	sl, r0
            if (i-disp_width/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
 80a192a:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a192e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80a1932:	eba5 0063 	sub.w	r0, r5, r3, asr #1
 80a1936:	f009 feb3 	bl	80ab6a0 <__aeabi_i2d>
 80a193a:	e9cd 0106 	strd	r0, r1, [sp, #24]
            level *= FREQ_GAIN;
 80a193e:	4650      	mov	r0, sl
 80a1940:	f00a fd4a 	bl	80ac3d8 <__aeabi_f2iz>
            if (i-disp_width/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
 80a1944:	f00a fb18 	bl	80abf78 <__aeabi_i2f>
 80a1948:	4967      	ldr	r1, [pc, #412]	; (80a1ae8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x300>)
 80a194a:	f00a fc1d 	bl	80ac188 <__aeabi_fdiv>
 80a194e:	2102      	movs	r1, #2
 80a1950:	f7ff f81e 	bl	80a0990 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a1954:	4682      	mov	sl, r0
 80a1956:	468b      	mov	fp, r1
 80a1958:	4b62      	ldr	r3, [pc, #392]	; (80a1ae4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
 80a195a:	f9b3 0000 	ldrsh.w	r0, [r3]
 80a195e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80a1962:	1040      	asrs	r0, r0, #1
 80a1964:	f009 fe9c 	bl	80ab6a0 <__aeabi_i2d>
 80a1968:	4652      	mov	r2, sl
 80a196a:	465b      	mov	r3, fp
 80a196c:	f009 ff02 	bl	80ab774 <__aeabi_dmul>
 80a1970:	4602      	mov	r2, r0
 80a1972:	460b      	mov	r3, r1
 80a1974:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a1978:	f00a f96e 	bl	80abc58 <__aeabi_dcmplt>
 80a197c:	b958      	cbnz	r0, 80a1996 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x1ae>
                }
            }

            led_index++;
 80a197e:	3701      	adds	r7, #1
            led_index = led_index%10;
 80a1980:	fbb7 f3f9 	udiv	r3, r7, r9
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a1984:	360a      	adds	r6, #10
 80a1986:	b2f6      	uxtb	r6, r6
 80a1988:	2e3c      	cmp	r6, #60	; 0x3c
            led_index = led_index%10;
 80a198a:	fb09 7713 	mls	r7, r9, r3, r7
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a198e:	d1c3      	bne.n	80a1918 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x130>
    for (char i = disp_width/2; i < disp_width; i++) {
 80a1990:	3501      	adds	r5, #1
 80a1992:	b2ed      	uxtb	r5, r5
 80a1994:	e7b7      	b.n	80a1906 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x11e>
 80a1996:	fa1f fb87 	uxth.w	fp, r7
 80a199a:	f10b 0a64 	add.w	sl, fp, #100	; 0x64
 80a199e:	fa1f fa8a 	uxth.w	sl, sl
                    mix_pixel(i, x*NUM_BARS+led_index, in_factor, bd->r(), bd->g(), bd->b());
 80a19a2:	f8d8 0000 	ldr.w	r0, [r8]
 80a19a6:	f000 fc7c 	bl	80a22a2 <_ZN14Beat_Detection1rEv>
 80a19aa:	9008      	str	r0, [sp, #32]
 80a19ac:	f8d8 0000 	ldr.w	r0, [r8]
 80a19b0:	f000 fc79 	bl	80a22a6 <_ZN14Beat_Detection1gEv>
 80a19b4:	9006      	str	r0, [sp, #24]
 80a19b6:	f8d8 0000 	ldr.w	r0, [r8]
 80a19ba:	f000 fc76 	bl	80a22aa <_ZN14Beat_Detection1bEv>
 80a19be:	9906      	ldr	r1, [sp, #24]
 80a19c0:	9b08      	ldr	r3, [sp, #32]
 80a19c2:	b2c0      	uxtb	r0, r0
 80a19c4:	b2c9      	uxtb	r1, r1
 80a19c6:	b2db      	uxtb	r3, r3
 80a19c8:	465a      	mov	r2, fp
 80a19ca:	9002      	str	r0, [sp, #8]
 80a19cc:	9101      	str	r1, [sp, #4]
 80a19ce:	9300      	str	r3, [sp, #0]
 80a19d0:	4629      	mov	r1, r5
 80a19d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a19d4:	9805      	ldr	r0, [sp, #20]
 80a19d6:	f7fe fca3 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
                for (int x = 0; x < 10; x++) {
 80a19da:	f10b 020a 	add.w	r2, fp, #10
 80a19de:	fa1f fb82 	uxth.w	fp, r2
 80a19e2:	45da      	cmp	sl, fp
 80a19e4:	d1dd      	bne.n	80a19a2 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x1ba>
 80a19e6:	e7ca      	b.n	80a197e <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x196>
 80a19e8:	f04f 0b00 	mov.w	fp, #0
                }  
            }
            level *= FREQ_GAIN;

            // set bar
            if (j < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
 80a19ec:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80a1ae8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x300>
                float val = level*2*PI/BINS_MAX;
                mix_pixel(i, STRIP_LENGTH/2 - j, .95, 255-bd->r(), 255-bd->g(), 255-bd->b());
 80a19f0:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80a1af4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
    for (char i = 0; i < disp_width; i++) {
 80a19f4:	4b3b      	ldr	r3, [pc, #236]	; (80a1ae4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
 80a19f6:	fa5f f58b 	uxtb.w	r5, fp
 80a19fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a19fe:	429d      	cmp	r5, r3
 80a1a00:	f280 8121 	bge.w	80a1c46 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x45e>
 80a1a04:	f04f 0a00 	mov.w	sl, #0
            if (disp_width == 8) {
 80a1a08:	4b36      	ldr	r3, [pc, #216]	; (80a1ae4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
 80a1a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a1a0e:	2b08      	cmp	r3, #8
 80a1a10:	d178      	bne.n	80a1b04 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x31c>
                switch(i) {
 80a1a12:	2d07      	cmp	r5, #7
 80a1a14:	f200 809c 	bhi.w	80a1b50 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x368>
 80a1a18:	e8df f005 	tbb	[pc, r5]
 80a1a1c:	5f5d0492 	.word	0x5f5d0492
 80a1a20:	72706e61 	.word	0x72706e61
                    level = bins->left[LEFT_1000];
 80a1a24:	68e0      	ldr	r0, [r4, #12]
            level *= FREQ_GAIN;
 80a1a26:	f00a faa7 	bl	80abf78 <__aeabi_i2f>
 80a1a2a:	f00a fcd5 	bl	80ac3d8 <__aeabi_f2iz>
            if (j < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
 80a1a2e:	f00a faa3 	bl	80abf78 <__aeabi_i2f>
 80a1a32:	4641      	mov	r1, r8
 80a1a34:	f00a fba8 	bl	80ac188 <__aeabi_fdiv>
 80a1a38:	2102      	movs	r1, #2
 80a1a3a:	f7fe ffa9 	bl	80a0990 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a1a3e:	4606      	mov	r6, r0
 80a1a40:	4650      	mov	r0, sl
 80a1a42:	460f      	mov	r7, r1
 80a1a44:	f009 fe2c 	bl	80ab6a0 <__aeabi_i2d>
 80a1a48:	2200      	movs	r2, #0
 80a1a4a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a1a4e:	4b28      	ldr	r3, [pc, #160]	; (80a1af0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x308>)
 80a1a50:	4630      	mov	r0, r6
 80a1a52:	4639      	mov	r1, r7
 80a1a54:	f009 fe8e 	bl	80ab774 <__aeabi_dmul>
 80a1a58:	4602      	mov	r2, r0
 80a1a5a:	460b      	mov	r3, r1
 80a1a5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a1a60:	f00a f8fa 	bl	80abc58 <__aeabi_dcmplt>
 80a1a64:	b1e8      	cbz	r0, 80a1aa2 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2ba>
                mix_pixel(i, STRIP_LENGTH/2 - j, .95, 255-bd->r(), 255-bd->g(), 255-bd->b());
 80a1a66:	4e21      	ldr	r6, [pc, #132]	; (80a1aec <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x304>)
 80a1a68:	6830      	ldr	r0, [r6, #0]
 80a1a6a:	f000 fc1a 	bl	80a22a2 <_ZN14Beat_Detection1rEv>
 80a1a6e:	9006      	str	r0, [sp, #24]
 80a1a70:	6830      	ldr	r0, [r6, #0]
 80a1a72:	f000 fc18 	bl	80a22a6 <_ZN14Beat_Detection1gEv>
 80a1a76:	4607      	mov	r7, r0
 80a1a78:	6830      	ldr	r0, [r6, #0]
 80a1a7a:	f000 fc16 	bl	80a22aa <_ZN14Beat_Detection1bEv>
 80a1a7e:	9b06      	ldr	r3, [sp, #24]
 80a1a80:	43c0      	mvns	r0, r0
 80a1a82:	43de      	mvns	r6, r3
 80a1a84:	43ff      	mvns	r7, r7
 80a1a86:	b2c0      	uxtb	r0, r0
 80a1a88:	f1ca 021d 	rsb	r2, sl, #29
 80a1a8c:	b2ff      	uxtb	r7, r7
 80a1a8e:	b2f6      	uxtb	r6, r6
 80a1a90:	9002      	str	r0, [sp, #8]
 80a1a92:	464b      	mov	r3, r9
 80a1a94:	4629      	mov	r1, r5
 80a1a96:	9805      	ldr	r0, [sp, #20]
 80a1a98:	9701      	str	r7, [sp, #4]
 80a1a9a:	9600      	str	r6, [sp, #0]
 80a1a9c:	b292      	uxth	r2, r2
 80a1a9e:	f7fe fc3f 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = 0; j < STRIP_LENGTH/4; j++) {
 80a1aa2:	f10a 0a01 	add.w	sl, sl, #1
 80a1aa6:	f1ba 0f0e 	cmp.w	sl, #14
 80a1aaa:	d1ad      	bne.n	80a1a08 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x220>
 80a1aac:	f04f 0a1d 	mov.w	sl, #29
            }
        }

        // Left bins, grow upwards
        for (char j = STRIP_LENGTH/2; j < STRIP_LENGTH*0.75f; j++) {
 80a1ab0:	4b0c      	ldr	r3, [pc, #48]	; (80a1ae4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
 80a1ab2:	f1ba 0f2c 	cmp.w	sl, #44	; 0x2c
 80a1ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a1aba:	f000 80c1 	beq.w	80a1c40 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x458>
            // get bin
            int level = 0;
            if (disp_width == 8) {
 80a1abe:	2b08      	cmp	r3, #8
 80a1ac0:	f040 8096 	bne.w	80a1bf0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x408>
                switch(i) {
 80a1ac4:	2d07      	cmp	r5, #7
 80a1ac6:	f200 80b9 	bhi.w	80a1c3c <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x454>
 80a1aca:	e8df f005 	tbb	[pc, r5]
 80a1ace:	43af      	.short	0x43af
 80a1ad0:	8b898785 	.word	0x8b898785
 80a1ad4:	8f8d      	.short	0x8f8d
                    level = bins->left[LEFT_6250];
 80a1ad6:	6960      	ldr	r0, [r4, #20]
                    break;
 80a1ad8:	e7a5      	b.n	80a1a26 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x23e>
                    level = bins->left[LEFT_16000];
 80a1ada:	69a0      	ldr	r0, [r4, #24]
                    break;
 80a1adc:	e7a3      	b.n	80a1a26 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x23e>
                    level = bins->right[RIGHT_16000];
 80a1ade:	6b60      	ldr	r0, [r4, #52]	; 0x34
                    break;
 80a1ae0:	e7a1      	b.n	80a1a26 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x23e>
 80a1ae2:	bf00      	nop
 80a1ae4:	2000007e 	.word	0x2000007e
 80a1ae8:	457ff000 	.word	0x457ff000
 80a1aec:	20000074 	.word	0x20000074
 80a1af0:	403d0000 	.word	0x403d0000
 80a1af4:	3f733333 	.word	0x3f733333
                    level = bins->right[RIGHT_6250];
 80a1af8:	6b20      	ldr	r0, [r4, #48]	; 0x30
                    break;
 80a1afa:	e794      	b.n	80a1a26 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x23e>
                    level = bins->right[RIGHT_1000];
 80a1afc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                    break;
 80a1afe:	e792      	b.n	80a1a26 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x23e>
                    level = bins->right[RIGHT_160];
 80a1b00:	6a20      	ldr	r0, [r4, #32]
                    break;
 80a1b02:	e790      	b.n	80a1a26 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x23e>
            } else if (disp_width == 10) {
 80a1b04:	2b0a      	cmp	r3, #10
 80a1b06:	d123      	bne.n	80a1b50 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x368>
                switch(i) {
 80a1b08:	2d09      	cmp	r5, #9
 80a1b0a:	d821      	bhi.n	80a1b50 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x368>
 80a1b0c:	a301      	add	r3, pc, #4	; (adr r3, 80a1b14 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x32c>)
 80a1b0e:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 80a1b12:	bf00      	nop
 80a1b14:	080a1b3d 	.word	0x080a1b3d
 80a1b18:	080a1b41 	.word	0x080a1b41
 80a1b1c:	080a1b45 	.word	0x080a1b45
 80a1b20:	080a1a25 	.word	0x080a1a25
 80a1b24:	080a1ad7 	.word	0x080a1ad7
 80a1b28:	080a1af9 	.word	0x080a1af9
 80a1b2c:	080a1afd 	.word	0x080a1afd
 80a1b30:	080a1b49 	.word	0x080a1b49
 80a1b34:	080a1b01 	.word	0x080a1b01
 80a1b38:	080a1b4d 	.word	0x080a1b4d
                    level = bins->left[LEFT_63];
 80a1b3c:	6820      	ldr	r0, [r4, #0]
                    break;
 80a1b3e:	e772      	b.n	80a1a26 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x23e>
                    level = bins->left[LEFT_160];
 80a1b40:	6860      	ldr	r0, [r4, #4]
                    break;
 80a1b42:	e770      	b.n	80a1a26 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x23e>
                    level = bins->left[LEFT_400];
 80a1b44:	68a0      	ldr	r0, [r4, #8]
                    break;
 80a1b46:	e76e      	b.n	80a1a26 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x23e>
                    level = bins->right[RIGHT_400];
 80a1b48:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    break;
 80a1b4a:	e76c      	b.n	80a1a26 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x23e>
                    level = bins->right[RIGHT_63];
 80a1b4c:	69e0      	ldr	r0, [r4, #28]
                    break;
 80a1b4e:	e76a      	b.n	80a1a26 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x23e>
            } else if (disp_width == 10) {
 80a1b50:	2000      	movs	r0, #0
 80a1b52:	e768      	b.n	80a1a26 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x23e>
                    case 0:
                    level = bins->left[LEFT_160];
                    break;
                    case 1:
                    level = bins->left[LEFT_1000];
 80a1b54:	68e0      	ldr	r0, [r4, #12]
                    case 9:
                    level = bins->right[RIGHT_63];
                    break;
                }  
            }
            level *= FREQ_GAIN;
 80a1b56:	f00a fa0f 	bl	80abf78 <__aeabi_i2f>
 80a1b5a:	f00a fc3d 	bl	80ac3d8 <__aeabi_f2iz>
            // set bar
            float p = (float)(level)/(float)(BINS_MAX);
 80a1b5e:	f00a fa0b 	bl	80abf78 <__aeabi_i2f>
 80a1b62:	4641      	mov	r1, r8
 80a1b64:	f00a fb10 	bl	80ac188 <__aeabi_fdiv>
            if (j-STRIP_LENGTH/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
 80a1b68:	2102      	movs	r1, #2
 80a1b6a:	f7fe ff11 	bl	80a0990 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a1b6e:	4606      	mov	r6, r0
 80a1b70:	f1aa 001d 	sub.w	r0, sl, #29
 80a1b74:	460f      	mov	r7, r1
 80a1b76:	f009 fd93 	bl	80ab6a0 <__aeabi_i2d>
 80a1b7a:	2200      	movs	r2, #0
 80a1b7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a1b80:	4b32      	ldr	r3, [pc, #200]	; (80a1c4c <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x464>)
 80a1b82:	4630      	mov	r0, r6
 80a1b84:	4639      	mov	r1, r7
 80a1b86:	f009 fdf5 	bl	80ab774 <__aeabi_dmul>
 80a1b8a:	4602      	mov	r2, r0
 80a1b8c:	460b      	mov	r3, r1
 80a1b8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a1b92:	f00a f861 	bl	80abc58 <__aeabi_dcmplt>
 80a1b96:	b1e0      	cbz	r0, 80a1bd2 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3ea>
                //j-STRIP_LENGTH/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
                float val = level*2*PI/BINS_MAX;
                //mix_pixel(i, j, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                mix_pixel(i, j, .95, 255-bd->r(), 255-bd->g(), 255-bd->b());//reds[i], greens[i], blues[i]);
 80a1b98:	4e2d      	ldr	r6, [pc, #180]	; (80a1c50 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x468>)
 80a1b9a:	6830      	ldr	r0, [r6, #0]
 80a1b9c:	f000 fb81 	bl	80a22a2 <_ZN14Beat_Detection1rEv>
 80a1ba0:	9006      	str	r0, [sp, #24]
 80a1ba2:	6830      	ldr	r0, [r6, #0]
 80a1ba4:	f000 fb7f 	bl	80a22a6 <_ZN14Beat_Detection1gEv>
 80a1ba8:	4607      	mov	r7, r0
 80a1baa:	6830      	ldr	r0, [r6, #0]
 80a1bac:	f000 fb7d 	bl	80a22aa <_ZN14Beat_Detection1bEv>
 80a1bb0:	9b06      	ldr	r3, [sp, #24]
 80a1bb2:	43c0      	mvns	r0, r0
 80a1bb4:	43de      	mvns	r6, r3
 80a1bb6:	43ff      	mvns	r7, r7
 80a1bb8:	b2c0      	uxtb	r0, r0
 80a1bba:	b2ff      	uxtb	r7, r7
 80a1bbc:	b2f6      	uxtb	r6, r6
 80a1bbe:	9002      	str	r0, [sp, #8]
 80a1bc0:	464b      	mov	r3, r9
 80a1bc2:	4629      	mov	r1, r5
 80a1bc4:	9805      	ldr	r0, [sp, #20]
 80a1bc6:	9701      	str	r7, [sp, #4]
 80a1bc8:	9600      	str	r6, [sp, #0]
 80a1bca:	fa1f f28a 	uxth.w	r2, sl
 80a1bce:	f7fe fba7 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = STRIP_LENGTH/2; j < STRIP_LENGTH*0.75f; j++) {
 80a1bd2:	f10a 0a01 	add.w	sl, sl, #1
 80a1bd6:	e76b      	b.n	80a1ab0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2c8>
                    level = bins->left[LEFT_6250];
 80a1bd8:	6960      	ldr	r0, [r4, #20]
                    break;
 80a1bda:	e7bc      	b.n	80a1b56 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x36e>
                    level = bins->left[LEFT_16000];
 80a1bdc:	69a0      	ldr	r0, [r4, #24]
                    break;
 80a1bde:	e7ba      	b.n	80a1b56 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x36e>
                    level = bins->right[RIGHT_16000];
 80a1be0:	6b60      	ldr	r0, [r4, #52]	; 0x34
                    break;
 80a1be2:	e7b8      	b.n	80a1b56 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x36e>
                    level = bins->right[RIGHT_6250];
 80a1be4:	6b20      	ldr	r0, [r4, #48]	; 0x30
                    break;
 80a1be6:	e7b6      	b.n	80a1b56 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x36e>
                    level = bins->right[RIGHT_1000];
 80a1be8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                    break;
 80a1bea:	e7b4      	b.n	80a1b56 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x36e>
                    level = bins->right[RIGHT_160];
 80a1bec:	6a20      	ldr	r0, [r4, #32]
                    break;
 80a1bee:	e7b2      	b.n	80a1b56 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x36e>
            } else if (disp_width == 10) {
 80a1bf0:	2b0a      	cmp	r3, #10
 80a1bf2:	d123      	bne.n	80a1c3c <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x454>
                switch(i) {
 80a1bf4:	2d09      	cmp	r5, #9
 80a1bf6:	d821      	bhi.n	80a1c3c <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x454>
 80a1bf8:	a301      	add	r3, pc, #4	; (adr r3, 80a1c00 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x418>)
 80a1bfa:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 80a1bfe:	bf00      	nop
 80a1c00:	080a1c29 	.word	0x080a1c29
 80a1c04:	080a1c2d 	.word	0x080a1c2d
 80a1c08:	080a1c31 	.word	0x080a1c31
 80a1c0c:	080a1b55 	.word	0x080a1b55
 80a1c10:	080a1bd9 	.word	0x080a1bd9
 80a1c14:	080a1be5 	.word	0x080a1be5
 80a1c18:	080a1be9 	.word	0x080a1be9
 80a1c1c:	080a1c35 	.word	0x080a1c35
 80a1c20:	080a1bed 	.word	0x080a1bed
 80a1c24:	080a1c39 	.word	0x080a1c39
                    level = bins->left[LEFT_63];
 80a1c28:	6820      	ldr	r0, [r4, #0]
                    break;
 80a1c2a:	e794      	b.n	80a1b56 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x36e>
                    level = bins->left[LEFT_160];
 80a1c2c:	6860      	ldr	r0, [r4, #4]
                    break;
 80a1c2e:	e792      	b.n	80a1b56 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x36e>
                    level = bins->left[LEFT_400];
 80a1c30:	68a0      	ldr	r0, [r4, #8]
                    break;
 80a1c32:	e790      	b.n	80a1b56 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x36e>
                    level = bins->right[RIGHT_400];
 80a1c34:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    break;
 80a1c36:	e78e      	b.n	80a1b56 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x36e>
                    level = bins->right[RIGHT_63];
 80a1c38:	69e0      	ldr	r0, [r4, #28]
                    break;
 80a1c3a:	e78c      	b.n	80a1b56 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x36e>
            } else if (disp_width == 10) {
 80a1c3c:	2000      	movs	r0, #0
 80a1c3e:	e78a      	b.n	80a1b56 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x36e>
    for (char i = 0; i < disp_width; i++) {
 80a1c40:	f10b 0b01 	add.w	fp, fp, #1
 80a1c44:	e6d6      	b.n	80a19f4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x20c>
            }
        }
    }
}
 80a1c46:	b00d      	add	sp, #52	; 0x34
 80a1c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1c4c:	403d0000 	.word	0x403d0000
 80a1c50:	20000074 	.word	0x20000074

080a1c54 <_ZN10Bar_Matrix11snake_linesEf>:
    unsigned char r, g, b;

    // TODO: add code to convert from HSV to RGB and vice versa in
    //       constructor.
    Color_Value(unsigned char red, unsigned char green, unsigned char blue) :
    c((red << 16) | (green << 8) | blue), r(red), g(green), b(blue) {}
 80a1c54:	2300      	movs	r3, #0
/* ================================================================== *
 * Function: snake_lines
 * Description: Snake runs up and down each bar
 * Parameters: [float] speed - speed snake moves at
 * ================================================================== */
void Bar_Matrix::snake_lines(float speed) {
 80a1c56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1c5a:	4605      	mov	r5, r0
 80a1c5c:	b086      	sub	sp, #24
 80a1c5e:	9304      	str	r3, [sp, #16]
 80a1c60:	f8ad 3014 	strh.w	r3, [sp, #20]
 80a1c64:	f88d 3016 	strb.w	r3, [sp, #22]
    bool noChange = true;

    fill_matrix(Color_Value(0, 0, 0));
 80a1c68:	ab06      	add	r3, sp, #24
 80a1c6a:	e913 0006 	ldmdb	r3, {r1, r2}
 80a1c6e:	f7fe fb13 	bl	80a0298 <_ZN10Bar_Matrix11fill_matrixE11Color_Value>

    for (int x = 0; x < NUM_SNAKES; x++) {
 80a1c72:	462c      	mov	r4, r5
    bool noChange = true;
 80a1c74:	2601      	movs	r6, #1
        Snake *s = &snakes[x];

        for (int i = 0; i < s->len; i++) {
            int b = (s->pos + i) / STRIP_LENGTH; // bar
 80a1c76:	273a      	movs	r7, #58	; 0x3a

            if (b % 2 == 1) {
                p = 69-p;
            }

            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1c78:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80a1d90 <_ZN10Bar_Matrix11snake_linesEf+0x13c>
 80a1c7c:	f105 0880 	add.w	r8, r5, #128	; 0x80
        for (int i = 0; i < s->len; i++) {
 80a1c80:	f04f 0a00 	mov.w	sl, #0
 80a1c84:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80a1c88:	4553      	cmp	r3, sl
 80a1c8a:	dd21      	ble.n	80a1cd0 <_ZN10Bar_Matrix11snake_linesEf+0x7c>
            int b = (s->pos + i) / STRIP_LENGTH; // bar
 80a1c8c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1c90:	4628      	mov	r0, r5
            int b = (s->pos + i) / STRIP_LENGTH; // bar
 80a1c92:	4452      	add	r2, sl
 80a1c94:	fb92 f1f7 	sdiv	r1, r2, r7
            if (b % 2 == 1) {
 80a1c98:	f001 0301 	and.w	r3, r1, #1
 80a1c9c:	2900      	cmp	r1, #0
 80a1c9e:	bfb8      	it	lt
 80a1ca0:	425b      	neglt	r3, r3
 80a1ca2:	2b01      	cmp	r3, #1
            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1ca4:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
            int p = (s->pos + i) % STRIP_LENGTH; // pixel
 80a1ca8:	fb07 2211 	mls	r2, r7, r1, r2
            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1cac:	9302      	str	r3, [sp, #8]
 80a1cae:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
                p = 69-p;
 80a1cb2:	bf08      	it	eq
 80a1cb4:	f1c2 0245 	rsbeq	r2, r2, #69	; 0x45
            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1cb8:	9301      	str	r3, [sp, #4]
 80a1cba:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 80a1cbe:	b292      	uxth	r2, r2
 80a1cc0:	9300      	str	r3, [sp, #0]
 80a1cc2:	b2c9      	uxtb	r1, r1
 80a1cc4:	464b      	mov	r3, r9
 80a1cc6:	f7fe fb2b 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (int i = 0; i < s->len; i++) {
 80a1cca:	f10a 0a01 	add.w	sl, sl, #1
 80a1cce:	e7d9      	b.n	80a1c84 <_ZN10Bar_Matrix11snake_linesEf+0x30>
        }

        if (noChange && random(0, 10) > 7) {
 80a1cd0:	b1b6      	cbz	r6, 80a1d00 <_ZN10Bar_Matrix11snake_linesEf+0xac>
 80a1cd2:	210a      	movs	r1, #10
 80a1cd4:	2000      	movs	r0, #0
 80a1cd6:	f004 fa7e 	bl	80a61d6 <_Z6randomii>
 80a1cda:	2807      	cmp	r0, #7
 80a1cdc:	dd10      	ble.n	80a1d00 <_ZN10Bar_Matrix11snake_linesEf+0xac>
            s->r = bd->r();
 80a1cde:	4e2a      	ldr	r6, [pc, #168]	; (80a1d88 <_ZN10Bar_Matrix11snake_linesEf+0x134>)
 80a1ce0:	6830      	ldr	r0, [r6, #0]
 80a1ce2:	f000 fade 	bl	80a22a2 <_ZN14Beat_Detection1rEv>
 80a1ce6:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
            s->g = bd->g();
 80a1cea:	6830      	ldr	r0, [r6, #0]
 80a1cec:	f000 fadb 	bl	80a22a6 <_ZN14Beat_Detection1gEv>
 80a1cf0:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
            s->b = bd->b();
 80a1cf4:	6830      	ldr	r0, [r6, #0]
 80a1cf6:	f000 fad8 	bl	80a22aa <_ZN14Beat_Detection1bEv>
            noChange = false;
 80a1cfa:	2600      	movs	r6, #0
            s->b = bd->b();
 80a1cfc:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
        }

        s->posTicks++;
 80a1d00:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
        if (s->posTicks >= s->ticksNeeded) {
 80a1d04:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
        s->posTicks++;
 80a1d08:	3301      	adds	r3, #1
        if (s->posTicks >= s->ticksNeeded) {
 80a1d0a:	4293      	cmp	r3, r2
        s->posTicks++;
 80a1d0c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
        if (s->posTicks >= s->ticksNeeded) {
 80a1d10:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
 80a1d14:	db07      	blt.n	80a1d26 <_ZN10Bar_Matrix11snake_linesEf+0xd2>
            s->posTicks = 0;
 80a1d16:	2300      	movs	r3, #0
 80a1d18:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
            s->pos += s->dir;
 80a1d1c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80a1d20:	4413      	add	r3, r2
 80a1d22:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
        }
        if ((s->dir > 0 && s->pos > NUM_BARS * STRIP_LENGTH +s->len) ||
 80a1d26:	2a00      	cmp	r2, #0
 80a1d28:	dd0d      	ble.n	80a1d46 <_ZN10Bar_Matrix11snake_linesEf+0xf2>
 80a1d2a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80a1d2e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80a1d32:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80a1d36:	429a      	cmp	r2, r3
 80a1d38:	dc0d      	bgt.n	80a1d56 <_ZN10Bar_Matrix11snake_linesEf+0x102>
    for (int x = 0; x < NUM_SNAKES; x++) {
 80a1d3a:	3420      	adds	r4, #32
 80a1d3c:	45a0      	cmp	r8, r4
 80a1d3e:	d19f      	bne.n	80a1c80 <_ZN10Bar_Matrix11snake_linesEf+0x2c>
            color_table_idx = color_table_idx % 50;

            s->pos = s->dir > 0 ? -s->len : NUM_BARS * STRIP_LENGTH;
        }
    }
}
 80a1d40:	b006      	add	sp, #24
 80a1d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((s->dir > 0 && s->pos > NUM_BARS * STRIP_LENGTH +s->len) ||
 80a1d46:	d0f8      	beq.n	80a1d3a <_ZN10Bar_Matrix11snake_linesEf+0xe6>
            (s->dir < 0 && s->pos < -s->len))
 80a1d48:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80a1d4c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80a1d50:	425b      	negs	r3, r3
 80a1d52:	429a      	cmp	r2, r3
 80a1d54:	daf1      	bge.n	80a1d3a <_ZN10Bar_Matrix11snake_linesEf+0xe6>
            color_table_idx += random(0, 10);
 80a1d56:	210a      	movs	r1, #10
 80a1d58:	2000      	movs	r0, #0
 80a1d5a:	f004 fa3c 	bl	80a61d6 <_Z6randomii>
            color_table_idx = color_table_idx % 50;
 80a1d5e:	2132      	movs	r1, #50	; 0x32
 80a1d60:	4a0a      	ldr	r2, [pc, #40]	; (80a1d8c <_ZN10Bar_Matrix11snake_linesEf+0x138>)
            color_table_idx += random(0, 10);
 80a1d62:	6813      	ldr	r3, [r2, #0]
 80a1d64:	4418      	add	r0, r3
            color_table_idx = color_table_idx % 50;
 80a1d66:	fb90 f3f1 	sdiv	r3, r0, r1
 80a1d6a:	fb01 0013 	mls	r0, r1, r3, r0
 80a1d6e:	6010      	str	r0, [r2, #0]
            s->pos = s->dir > 0 ? -s->len : NUM_BARS * STRIP_LENGTH;
 80a1d70:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80a1d74:	2b00      	cmp	r3, #0
 80a1d76:	bfd2      	itee	le
 80a1d78:	f44f 7311 	movle.w	r3, #580	; 0x244
 80a1d7c:	f8d4 311c 	ldrgt.w	r3, [r4, #284]	; 0x11c
 80a1d80:	425b      	neggt	r3, r3
 80a1d82:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80a1d86:	e7d8      	b.n	80a1d3a <_ZN10Bar_Matrix11snake_linesEf+0xe6>
 80a1d88:	20000074 	.word	0x20000074
 80a1d8c:	20000078 	.word	0x20000078
 80a1d90:	3f733333 	.word	0x3f733333
 80a1d94:	00000000 	.word	0x00000000

080a1d98 <_ZN10Bar_Matrix16visualizer_wheelEff>:
 * Description: Sets all bars to a color while rotating through all
 *              hues in order of the rainbow
 * Parameters: [float] intensity - intensity of lights
 *             [float] speed - speed wheel rotates at
 * ================================================================== */
void Bar_Matrix::visualizer_wheel(float intensity, float speed) {
 80a1d98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1d9c:	460c      	mov	r4, r1
 80a1d9e:	4683      	mov	fp, r0
 80a1da0:	f003 fb10 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
    float val = fmod(millis()/10000.0f,1.0f)*2.0f*PI;
 80a1da4:	f00a f8e4 	bl	80abf70 <__aeabi_ui2f>
 80a1da8:	493d      	ldr	r1, [pc, #244]	; (80a1ea0 <_ZN10Bar_Matrix16visualizer_wheelEff+0x108>)
 80a1daa:	f00a f9ed 	bl	80ac188 <__aeabi_fdiv>
  { return __builtin_fmodf(__x, __y); }
 80a1dae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a1db2:	f006 f99d 	bl	80a80f0 <fmodf>
 80a1db6:	4601      	mov	r1, r0
 80a1db8:	f00a f82a 	bl	80abe10 <__addsf3>
 80a1dbc:	f009 fc82 	bl	80ab6c4 <__aeabi_f2d>
 80a1dc0:	a32f      	add	r3, pc, #188	; (adr r3, 80a1e80 <_ZN10Bar_Matrix16visualizer_wheelEff+0xe8>)
 80a1dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1dc6:	f009 fcd5 	bl	80ab774 <__aeabi_dmul>
 80a1dca:	f009 ffcb 	bl	80abd64 <__aeabi_d2f>
 80a1dce:	4605      	mov	r5, r0
  { return __builtin_cosf(__x); }
 80a1dd0:	f005 ffb4 	bl	80a7d3c <cosf>
    fill_matrix(Color_Value(cos(val)*255*intensity, cos(val - 2*PI/3)*255*intensity, cos(val - 4*PI/3)*255*intensity));
 80a1dd4:	4933      	ldr	r1, [pc, #204]	; (80a1ea4 <_ZN10Bar_Matrix16visualizer_wheelEff+0x10c>)
 80a1dd6:	f00a f923 	bl	80ac020 <__aeabi_fmul>
 80a1dda:	4621      	mov	r1, r4
 80a1ddc:	f00a f920 	bl	80ac020 <__aeabi_fmul>
 80a1de0:	f00a fb20 	bl	80ac424 <__aeabi_f2uiz>
 80a1de4:	fa5f fa80 	uxtb.w	sl, r0
 80a1de8:	4628      	mov	r0, r5
 80a1dea:	f009 fc6b 	bl	80ab6c4 <__aeabi_f2d>
 80a1dee:	a326      	add	r3, pc, #152	; (adr r3, 80a1e88 <_ZN10Bar_Matrix16visualizer_wheelEff+0xf0>)
 80a1df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1df4:	4606      	mov	r6, r0
 80a1df6:	460f      	mov	r7, r1
 80a1df8:	f009 fb04 	bl	80ab404 <__aeabi_dsub>
 80a1dfc:	f005 ff48 	bl	80a7c90 <cos>
 80a1e00:	4680      	mov	r8, r0
 80a1e02:	4620      	mov	r0, r4
 80a1e04:	4689      	mov	r9, r1
 80a1e06:	f009 fc5d 	bl	80ab6c4 <__aeabi_f2d>
 80a1e0a:	a321      	add	r3, pc, #132	; (adr r3, 80a1e90 <_ZN10Bar_Matrix16visualizer_wheelEff+0xf8>)
 80a1e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1e10:	4604      	mov	r4, r0
 80a1e12:	460d      	mov	r5, r1
 80a1e14:	4640      	mov	r0, r8
 80a1e16:	4649      	mov	r1, r9
 80a1e18:	f009 fcac 	bl	80ab774 <__aeabi_dmul>
 80a1e1c:	4622      	mov	r2, r4
 80a1e1e:	462b      	mov	r3, r5
 80a1e20:	f009 fca8 	bl	80ab774 <__aeabi_dmul>
 80a1e24:	f009 ff7e 	bl	80abd24 <__aeabi_d2uiz>
 80a1e28:	a31b      	add	r3, pc, #108	; (adr r3, 80a1e98 <_ZN10Bar_Matrix16visualizer_wheelEff+0x100>)
 80a1e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1e2e:	fa5f f880 	uxtb.w	r8, r0
 80a1e32:	4639      	mov	r1, r7
 80a1e34:	4630      	mov	r0, r6
 80a1e36:	f009 fae5 	bl	80ab404 <__aeabi_dsub>
 80a1e3a:	f005 ff29 	bl	80a7c90 <cos>
 80a1e3e:	a314      	add	r3, pc, #80	; (adr r3, 80a1e90 <_ZN10Bar_Matrix16visualizer_wheelEff+0xf8>)
 80a1e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1e44:	f009 fc96 	bl	80ab774 <__aeabi_dmul>
 80a1e48:	4622      	mov	r2, r4
 80a1e4a:	462b      	mov	r3, r5
 80a1e4c:	f009 fc92 	bl	80ab774 <__aeabi_dmul>
 80a1e50:	f009 ff68 	bl	80abd24 <__aeabi_d2uiz>
 80a1e54:	ea4f 2308 	mov.w	r3, r8, lsl #8
 80a1e58:	b2c0      	uxtb	r0, r0
 80a1e5a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80a1e5e:	4303      	orrs	r3, r0
 80a1e60:	f88d 0006 	strb.w	r0, [sp, #6]
 80a1e64:	4658      	mov	r0, fp
 80a1e66:	9300      	str	r3, [sp, #0]
 80a1e68:	f88d a004 	strb.w	sl, [sp, #4]
 80a1e6c:	f88d 8005 	strb.w	r8, [sp, #5]
 80a1e70:	ab02      	add	r3, sp, #8
 80a1e72:	e913 0006 	ldmdb	r3, {r1, r2}
}
 80a1e76:	b003      	add	sp, #12
 80a1e78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fill_matrix(Color_Value(cos(val)*255*intensity, cos(val - 2*PI/3)*255*intensity, cos(val - 4*PI/3)*255*intensity));
 80a1e7c:	f7fe ba0c 	b.w	80a0298 <_ZN10Bar_Matrix11fill_matrixE11Color_Value>
 80a1e80:	fc8b007a 	.word	0xfc8b007a
 80a1e84:	400921fa 	.word	0x400921fa
 80a1e88:	fdb20051 	.word	0xfdb20051
 80a1e8c:	4000c151 	.word	0x4000c151
 80a1e90:	00000000 	.word	0x00000000
 80a1e94:	406fe000 	.word	0x406fe000
 80a1e98:	fdb20051 	.word	0xfdb20051
 80a1e9c:	4010c151 	.word	0x4010c151
 80a1ea0:	461c4000 	.word	0x461c4000
 80a1ea4:	437f0000 	.word	0x437f0000

080a1ea8 <_ZN10Bar_Matrix4tickEP10audio_binsi>:
    switch (visualizer_type) {
 80a1ea8:	2a09      	cmp	r2, #9
void Bar_Matrix::tick(audio_bins * bins, int visualizer_type) {
 80a1eaa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a1eac:	4604      	mov	r4, r0
    switch (visualizer_type) {
 80a1eae:	dc0b      	bgt.n	80a1ec8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x20>
 80a1eb0:	2a00      	cmp	r2, #0
 80a1eb2:	db10      	blt.n	80a1ed6 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
 80a1eb4:	3a01      	subs	r2, #1
 80a1eb6:	2a08      	cmp	r2, #8
 80a1eb8:	d81e      	bhi.n	80a1ef8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x50>
 80a1eba:	e8df f002 	tbb	[pc, r2]
 80a1ebe:	3924      	.short	0x3924
 80a1ec0:	34524d43 	.word	0x34524d43
 80a1ec4:	293f      	.short	0x293f
 80a1ec6:	2e          	.byte	0x2e
 80a1ec7:	00          	.byte	0x00
 80a1ec8:	2a4e      	cmp	r2, #78	; 0x4e
 80a1eca:	d053      	beq.n	80a1f74 <_ZN10Bar_Matrix4tickEP10audio_binsi+0xcc>
 80a1ecc:	dc0d      	bgt.n	80a1eea <_ZN10Bar_Matrix4tickEP10audio_binsi+0x42>
 80a1ece:	2a42      	cmp	r2, #66	; 0x42
 80a1ed0:	d058      	beq.n	80a1f84 <_ZN10Bar_Matrix4tickEP10audio_binsi+0xdc>
 80a1ed2:	2a4d      	cmp	r2, #77	; 0x4d
 80a1ed4:	d04b      	beq.n	80a1f6e <_ZN10Bar_Matrix4tickEP10audio_binsi+0xc6>
    bd->frame_ticked();
 80a1ed6:	4b33      	ldr	r3, [pc, #204]	; (80a1fa4 <_ZN10Bar_Matrix4tickEP10audio_binsi+0xfc>)
 80a1ed8:	6818      	ldr	r0, [r3, #0]
 80a1eda:	f000 f9d3 	bl	80a2284 <_ZN14Beat_Detection12frame_tickedEv>
    show_all();
 80a1ede:	4620      	mov	r0, r4
}
 80a1ee0:	b004      	add	sp, #16
 80a1ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    show_all();
 80a1ee6:	f7fe bc05 	b.w	80a06f4 <_ZN10Bar_Matrix8show_allEv>
    switch (visualizer_type) {
 80a1eea:	2a58      	cmp	r2, #88	; 0x58
 80a1eec:	d047      	beq.n	80a1f7e <_ZN10Bar_Matrix4tickEP10audio_binsi+0xd6>
 80a1eee:	2a63      	cmp	r2, #99	; 0x63
 80a1ef0:	d1f1      	bne.n	80a1ed6 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
            pixel_test();
 80a1ef2:	f7fe fd27 	bl	80a0944 <_ZN10Bar_Matrix10pixel_testEv>
            break;
 80a1ef6:	e7ee      	b.n	80a1ed6 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_bars(bins, 0.15, 0.85, false);
 80a1ef8:	2300      	movs	r3, #0
 80a1efa:	4a2b      	ldr	r2, [pc, #172]	; (80a1fa8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1efc:	9300      	str	r3, [sp, #0]
 80a1efe:	4b2b      	ldr	r3, [pc, #172]	; (80a1fac <_ZN10Bar_Matrix4tickEP10audio_binsi+0x104>)
 80a1f00:	f7fe fd56 	bl	80a09b0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb>
          break;
 80a1f04:	e7e7      	b.n	80a1ed6 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_bars_middle(bins, 0.15, 0.85);
 80a1f06:	4b29      	ldr	r3, [pc, #164]	; (80a1fac <_ZN10Bar_Matrix4tickEP10audio_binsi+0x104>)
 80a1f08:	4a27      	ldr	r2, [pc, #156]	; (80a1fa8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1f0a:	f7fe fee5 	bl	80a0cd8 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff>
          break;
 80a1f0e:	e7e2      	b.n	80a1ed6 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_bass_middle(bins, 0.15, 0.80);
 80a1f10:	4b27      	ldr	r3, [pc, #156]	; (80a1fb0 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x108>)
 80a1f12:	4a25      	ldr	r2, [pc, #148]	; (80a1fa8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1f14:	f7ff f81a 	bl	80a0f4c <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff>
          break;
 80a1f18:	e7dd      	b.n	80a1ed6 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_bass_slide(bins, 0.15, 0.75);
 80a1f1a:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80a1f1e:	4a22      	ldr	r2, [pc, #136]	; (80a1fa8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1f20:	f7ff f8b0 	bl	80a1084 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff>
          break;
 80a1f24:	e7d7      	b.n	80a1ed6 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
            visualizer_classic(bins, 0.15, 0.9);
 80a1f26:	4b23      	ldr	r3, [pc, #140]	; (80a1fb4 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x10c>)
 80a1f28:	4a1f      	ldr	r2, [pc, #124]	; (80a1fa8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1f2a:	f7ff f999 	bl	80a1260 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff>
            break;
 80a1f2e:	e7d2      	b.n	80a1ed6 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_plasma(bins, 0.5, 0.965);
 80a1f30:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80a1f34:	4b20      	ldr	r3, [pc, #128]	; (80a1fb8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x110>)
 80a1f36:	f7ff f9e3 	bl	80a1300 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff>
          break;
 80a1f3a:	e7cc      	b.n	80a1ed6 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_pong(0.965);
 80a1f3c:	491e      	ldr	r1, [pc, #120]	; (80a1fb8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x110>)
 80a1f3e:	f7ff faf9 	bl	80a1534 <_ZN10Bar_Matrix15visualizer_pongEf>
          break;
 80a1f42:	e7c8      	b.n	80a1ed6 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_pulse(bins, 0.15, 0.8, 1.0f, 20.0f);
 80a1f44:	4b1d      	ldr	r3, [pc, #116]	; (80a1fbc <_ZN10Bar_Matrix4tickEP10audio_binsi+0x114>)
 80a1f46:	4a18      	ldr	r2, [pc, #96]	; (80a1fa8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1f48:	9301      	str	r3, [sp, #4]
 80a1f4a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80a1f4e:	9300      	str	r3, [sp, #0]
 80a1f50:	4b17      	ldr	r3, [pc, #92]	; (80a1fb0 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x108>)
 80a1f52:	f7ff fba3 	bl	80a169c <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff>
          break;
 80a1f56:	e7be      	b.n	80a1ed6 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_rainbow(bins, 0.15, 0.8);
 80a1f58:	4b15      	ldr	r3, [pc, #84]	; (80a1fb0 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x108>)
 80a1f5a:	4a13      	ldr	r2, [pc, #76]	; (80a1fa8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1f5c:	f7ff fc44 	bl	80a17e8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff>
          break;
 80a1f60:	e7b9      	b.n	80a1ed6 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_wheel(0.25, 10);
 80a1f62:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a1f66:	4a16      	ldr	r2, [pc, #88]	; (80a1fc0 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x118>)
 80a1f68:	f7ff ff16 	bl	80a1d98 <_ZN10Bar_Matrix16visualizer_wheelEff>
          break;
 80a1f6c:	e7b3      	b.n	80a1ed6 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
            bouncing_lines();
 80a1f6e:	f7fe fbf9 	bl	80a0764 <_ZN10Bar_Matrix14bouncing_linesEv>
            break;
 80a1f72:	e7b0      	b.n	80a1ed6 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
            snake_lines(0.75);
 80a1f74:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 80a1f78:	f7ff fe6c 	bl	80a1c54 <_ZN10Bar_Matrix11snake_linesEf>
            break;
 80a1f7c:	e7ab      	b.n	80a1ed6 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
            bar_test();
 80a1f7e:	f7fe fbcf 	bl	80a0720 <_ZN10Bar_Matrix8bar_testEv>
            break;
 80a1f82:	e7a8      	b.n	80a1ed6 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
    Color_Value(unsigned char red, unsigned char green, unsigned char blue) :
 80a1f84:	4b0f      	ldr	r3, [pc, #60]	; (80a1fc4 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x11c>)
 80a1f86:	9302      	str	r3, [sp, #8]
 80a1f88:	f249 63c8 	movw	r3, #38600	; 0x96c8
 80a1f8c:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a1f90:	2364      	movs	r3, #100	; 0x64
 80a1f92:	f88d 300e 	strb.w	r3, [sp, #14]
    fill_matrix(c);
 80a1f96:	ab04      	add	r3, sp, #16
 80a1f98:	e913 0006 	ldmdb	r3, {r1, r2}
 80a1f9c:	f7fe f97c 	bl	80a0298 <_ZN10Bar_Matrix11fill_matrixE11Color_Value>
            break;
 80a1fa0:	e799      	b.n	80a1ed6 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
 80a1fa2:	bf00      	nop
 80a1fa4:	20000074 	.word	0x20000074
 80a1fa8:	3e19999a 	.word	0x3e19999a
 80a1fac:	3f59999a 	.word	0x3f59999a
 80a1fb0:	3f4ccccd 	.word	0x3f4ccccd
 80a1fb4:	3f666666 	.word	0x3f666666
 80a1fb8:	3f770a3d 	.word	0x3f770a3d
 80a1fbc:	41a00000 	.word	0x41a00000
 80a1fc0:	41200000 	.word	0x41200000
 80a1fc4:	00c89664 	.word	0x00c89664

080a1fc8 <_ZN14Beat_DetectionC1Ev>:

    red = 0;
    green = 0;
    blue = 0;
    beat_count = 0;
    beats_per_flip = 3;
 80a1fc8:	2203      	movs	r2, #3
    beat_on = false;
 80a1fca:	2300      	movs	r3, #0
    beats_per_flip = 3;
 80a1fcc:	6142      	str	r2, [r0, #20]
    sma_long_index = 0;
    sma_short_index = 0;

    bpm_long_total = 0.0;
 80a1fce:	2200      	movs	r2, #0
    green = 0;
 80a1fd0:	e9c0 3301 	strd	r3, r3, [r0, #4]
    beat_count = 0;
 80a1fd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
    sma_short_index = 0;
 80a1fd8:	e9c0 3307 	strd	r3, r3, [r0, #28]
Beat_Detection::Beat_Detection() {
 80a1fdc:	b530      	push	{r4, r5, lr}
    beat_on = false;
 80a1fde:	8003      	strh	r3, [r0, #0]
    flip_on = false;
 80a1fe0:	7083      	strb	r3, [r0, #2]
    bpm_long_total = 0.0;
 80a1fe2:	f8c0 2d8c 	str.w	r2, [r0, #3468]	; 0xd8c
    bpm_short_total = 0.0;
 80a1fe6:	f8c0 2d90 	str.w	r2, [r0, #3472]	; 0xd90

    for (int i = 0; i < NUM_BINS; i++) {
 80a1fea:	f500 613a 	add.w	r1, r0, #2976	; 0xba0
 80a1fee:	f600 34d8 	addw	r4, r0, #3032	; 0xbd8
 80a1ff2:	f600 35bc 	addw	r5, r0, #3004	; 0xbbc
        sma_long_totals[i] = 0.0;
 80a1ff6:	f841 2b04 	str.w	r2, [r1], #4
        sma_short_totals[i] = 0.0;
 80a1ffa:	618a      	str	r2, [r1, #24]
    for (int i = 0; i < NUM_BINS; i++) {
 80a1ffc:	42a9      	cmp	r1, r5
        beat_on_bins[i] = false;
 80a1ffe:	f804 3b01 	strb.w	r3, [r4], #1
        beat_reporter_bins[i] = false;
 80a2002:	71a3      	strb	r3, [r4, #6]
    for (int i = 0; i < NUM_BINS; i++) {
 80a2004:	d1f7      	bne.n	80a1ff6 <_ZN14Beat_DetectionC1Ev+0x2e>
    }
}
 80a2006:	bd30      	pop	{r4, r5, pc}

080a2008 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi>:
    sma_long_index = sma_long_index % SMA_LONG_LENGTH;
    sma_short_index++;
    sma_short_index = sma_short_index % SMA_SHORT_LENGTH;
}

void Beat_Detection::tick_beat_detection(audio_bins * bins, int cur_bin) {
 80a2008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a200c:	6a03      	ldr	r3, [r0, #32]
 80a200e:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 80a2012:	441d      	add	r5, r3
 80a2014:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 80a2018:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80a201c:	4607      	mov	r7, r0
 80a201e:	460e      	mov	r6, r1
    sma_short_totals[cur_bin] -= sma_short_bins[cur_bin][sma_short_index];
 80a2020:	f8d8 0bbc 	ldr.w	r0, [r8, #3004]	; 0xbbc
 80a2024:	f8d5 1b14 	ldr.w	r1, [r5, #2836]	; 0xb14
void Beat_Detection::tick_beat_detection(audio_bins * bins, int cur_bin) {
 80a2028:	4614      	mov	r4, r2
 80a202a:	ea4f 0a82 	mov.w	sl, r2, lsl #2
    sma_short_totals[cur_bin] -= sma_short_bins[cur_bin][sma_short_index];
 80a202e:	f009 feed 	bl	80abe0c <__aeabi_fsub>
 80a2032:	f8c8 0bbc 	str.w	r0, [r8, #3004]	; 0xbbc
 80a2036:	4681      	mov	r9, r0
    sma_short_bins[cur_bin][sma_short_index]  = (bins->left[cur_bin]*bins->left[cur_bin])/2;
 80a2038:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80a203c:	44b2      	add	sl, r6
 80a203e:	4340      	muls	r0, r0
 80a2040:	1040      	asrs	r0, r0, #1
 80a2042:	f009 ff99 	bl	80abf78 <__aeabi_i2f>
 80a2046:	4606      	mov	r6, r0
 80a2048:	f8c5 0b14 	str.w	r0, [r5, #2836]	; 0xb14
    sma_short_bins[cur_bin][sma_short_index] += (bins->right[cur_bin]*bins->right[cur_bin])/2;
 80a204c:	f8da 001c 	ldr.w	r0, [sl, #28]
 80a2050:	4340      	muls	r0, r0
 80a2052:	1040      	asrs	r0, r0, #1
 80a2054:	f009 ff90 	bl	80abf78 <__aeabi_i2f>
 80a2058:	4631      	mov	r1, r6
 80a205a:	f009 fed9 	bl	80abe10 <__addsf3>
 80a205e:	4606      	mov	r6, r0
    sma_short_totals[cur_bin] += sma_short_bins[cur_bin][sma_short_index];
 80a2060:	4601      	mov	r1, r0
    sma_short_bins[cur_bin][sma_short_index] += (bins->right[cur_bin]*bins->right[cur_bin])/2;
 80a2062:	f8c5 0b14 	str.w	r0, [r5, #2836]	; 0xb14
    sma_short_totals[cur_bin] += sma_short_bins[cur_bin][sma_short_index];
 80a2066:	4648      	mov	r0, r9
 80a2068:	f009 fed2 	bl	80abe10 <__addsf3>
 80a206c:	2564      	movs	r5, #100	; 0x64
    float sma_short = sma_short_totals[cur_bin] / SMA_SHORT_LENGTH;
 80a206e:	4924      	ldr	r1, [pc, #144]	; (80a2100 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xf8>)
    sma_short_totals[cur_bin] += sma_short_bins[cur_bin][sma_short_index];
 80a2070:	f8c8 0bbc 	str.w	r0, [r8, #3004]	; 0xbbc
    float sma_short = sma_short_totals[cur_bin] / SMA_SHORT_LENGTH;
 80a2074:	f00a f888 	bl	80ac188 <__aeabi_fdiv>
 80a2078:	69fb      	ldr	r3, [r7, #28]
 80a207a:	4681      	mov	r9, r0

    sma_long_totals[cur_bin] -= sma_long_bins[cur_bin][sma_long_index];
 80a207c:	fb05 3504 	mla	r5, r5, r4, r3
 80a2080:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80a2084:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80a2086:	f8d8 0ba0 	ldr.w	r0, [r8, #2976]	; 0xba0
 80a208a:	f009 febf 	bl	80abe0c <__aeabi_fsub>
    sma_long_bins[cur_bin][sma_long_index] = sma_short_bins[cur_bin][sma_short_index];
 80a208e:	626e      	str	r6, [r5, #36]	; 0x24
    sma_long_totals[cur_bin] -= sma_long_bins[cur_bin][sma_long_index];
 80a2090:	4601      	mov	r1, r0
    sma_long_totals[cur_bin] += sma_long_bins[cur_bin][sma_long_index];
 80a2092:	4630      	mov	r0, r6
 80a2094:	f009 febc 	bl	80abe10 <__addsf3>
    float sma_long = sma_long_totals[cur_bin] / SMA_LONG_LENGTH;
 80a2098:	491a      	ldr	r1, [pc, #104]	; (80a2104 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xfc>)
    sma_long_totals[cur_bin] += sma_long_bins[cur_bin][sma_long_index];
 80a209a:	f8c8 0ba0 	str.w	r0, [r8, #2976]	; 0xba0
    float sma_long = sma_long_totals[cur_bin] / SMA_LONG_LENGTH;
 80a209e:	f00a f873 	bl	80ac188 <__aeabi_fdiv>

    if (!beat_on_bins[cur_bin] && sma_short > 1.6*sma_long) {
 80a20a2:	443c      	add	r4, r7
 80a20a4:	f894 3bd8 	ldrb.w	r3, [r4, #3032]	; 0xbd8
    float sma_long = sma_long_totals[cur_bin] / SMA_LONG_LENGTH;
 80a20a8:	4605      	mov	r5, r0
    if (!beat_on_bins[cur_bin] && sma_short > 1.6*sma_long) {
 80a20aa:	b9d3      	cbnz	r3, 80a20e2 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xda>
 80a20ac:	4648      	mov	r0, r9
 80a20ae:	f009 fb09 	bl	80ab6c4 <__aeabi_f2d>
 80a20b2:	4606      	mov	r6, r0
 80a20b4:	4628      	mov	r0, r5
 80a20b6:	460f      	mov	r7, r1
 80a20b8:	f009 fb04 	bl	80ab6c4 <__aeabi_f2d>
 80a20bc:	a30e      	add	r3, pc, #56	; (adr r3, 80a20f8 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xf0>)
 80a20be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a20c2:	f009 fb57 	bl	80ab774 <__aeabi_dmul>
 80a20c6:	4602      	mov	r2, r0
 80a20c8:	460b      	mov	r3, r1
 80a20ca:	4630      	mov	r0, r6
 80a20cc:	4639      	mov	r1, r7
 80a20ce:	f009 fde1 	bl	80abc94 <__aeabi_dcmpgt>
 80a20d2:	b120      	cbz	r0, 80a20de <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xd6>
        //beat detected
        // beat_reporter is used by visualizers, it is cleared after every frame
        // beat_on is used by beat detection, it is cleared whenever a beat ends
        beat_on_bins[cur_bin] = true;
 80a20d4:	2301      	movs	r3, #1
 80a20d6:	f884 3bd8 	strb.w	r3, [r4, #3032]	; 0xbd8
        beat_reporter_bins[cur_bin] = true;
 80a20da:	f884 3bdf 	strb.w	r3, [r4, #3039]	; 0xbdf
    } else if (beat_on_bins[cur_bin] && sma_short < 1.0*sma_long) {
        //beat reset
        beat_on_bins[cur_bin] = false;
    }
}
 80a20de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (beat_on_bins[cur_bin] && sma_short < 1.0*sma_long) {
 80a20e2:	4601      	mov	r1, r0
 80a20e4:	4648      	mov	r0, r9
 80a20e6:	f00a f939 	bl	80ac35c <__aeabi_fcmplt>
 80a20ea:	2800      	cmp	r0, #0
 80a20ec:	d0f7      	beq.n	80a20de <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xd6>
        beat_on_bins[cur_bin] = false;
 80a20ee:	2300      	movs	r3, #0
 80a20f0:	f884 3bd8 	strb.w	r3, [r4, #3032]	; 0xbd8
}
 80a20f4:	e7f3      	b.n	80a20de <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xd6>
 80a20f6:	bf00      	nop
 80a20f8:	9999999a 	.word	0x9999999a
 80a20fc:	3ff99999 	.word	0x3ff99999
 80a2100:	40a00000 	.word	0x40a00000
 80a2104:	42c80000 	.word	0x42c80000

080a2108 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins>:

void Beat_Detection::tick_bpm_detection(audio_bins * bins) {
 80a2108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a210c:	6a06      	ldr	r6, [r0, #32]
 80a210e:	4604      	mov	r4, r0
 80a2110:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80a2114:	460d      	mov	r5, r1
    bpm_short_total -= bpm_short_values[sma_short_index];
 80a2116:	f8d0 0d90 	ldr.w	r0, [r0, #3472]	; 0xd90
 80a211a:	f8d6 1d78 	ldr.w	r1, [r6, #3448]	; 0xd78
 80a211e:	f009 fe75 	bl	80abe0c <__aeabi_fsub>
 80a2122:	f8c4 0d90 	str.w	r0, [r4, #3472]	; 0xd90
    bpm_short_values[sma_short_index] = (bins->left[0]*bins->left[0] + bins->right[0]*bins->right[0])/4;
 80a2126:	69eb      	ldr	r3, [r5, #28]
    bpm_short_total -= bpm_short_values[sma_short_index];
 80a2128:	4607      	mov	r7, r0
    bpm_short_values[sma_short_index] = (bins->left[0]*bins->left[0] + bins->right[0]*bins->right[0])/4;
 80a212a:	435b      	muls	r3, r3
 80a212c:	6828      	ldr	r0, [r5, #0]
 80a212e:	fb00 3000 	mla	r0, r0, r0, r3
 80a2132:	1080      	asrs	r0, r0, #2
 80a2134:	f009 ff20 	bl	80abf78 <__aeabi_i2f>
 80a2138:	4680      	mov	r8, r0
 80a213a:	f8c6 0d78 	str.w	r0, [r6, #3448]	; 0xd78
    bpm_short_values[sma_short_index] += (bins->left[1]*bins->left[1] + bins->right[1]*bins->right[1])/4;
 80a213e:	6a2b      	ldr	r3, [r5, #32]
 80a2140:	6868      	ldr	r0, [r5, #4]
 80a2142:	435b      	muls	r3, r3
 80a2144:	fb00 3000 	mla	r0, r0, r0, r3
 80a2148:	1080      	asrs	r0, r0, #2
 80a214a:	f009 ff15 	bl	80abf78 <__aeabi_i2f>
 80a214e:	4641      	mov	r1, r8
 80a2150:	f009 fe5e 	bl	80abe10 <__addsf3>
 80a2154:	4605      	mov	r5, r0
    //bpm_short_values[sma_short_index] = (bins->left[0]*bins->left[0] + bins->left[1]*bins->left[1])/2;
    bpm_short_total += bpm_short_values[sma_short_index];
 80a2156:	4601      	mov	r1, r0
    bpm_short_values[sma_short_index] += (bins->left[1]*bins->left[1] + bins->right[1]*bins->right[1])/4;
 80a2158:	f8c6 0d78 	str.w	r0, [r6, #3448]	; 0xd78
    bpm_short_total += bpm_short_values[sma_short_index];
 80a215c:	4638      	mov	r0, r7
 80a215e:	f009 fe57 	bl	80abe10 <__addsf3>
 80a2162:	69e7      	ldr	r7, [r4, #28]
 80a2164:	f8c4 0d90 	str.w	r0, [r4, #3472]	; 0xd90
    float sma_short = bpm_short_total / SMA_SHORT_LENGTH;
 80a2168:	eb04 0787 	add.w	r7, r4, r7, lsl #2

    bpm_long_total -= bpm_long_values[sma_long_index];
 80a216c:	f8d7 1be8 	ldr.w	r1, [r7, #3048]	; 0xbe8
    bpm_short_total += bpm_short_values[sma_short_index];
 80a2170:	4606      	mov	r6, r0
    bpm_long_total -= bpm_long_values[sma_long_index];
 80a2172:	f8d4 0d8c 	ldr.w	r0, [r4, #3468]	; 0xd8c
 80a2176:	f009 fe49 	bl	80abe0c <__aeabi_fsub>
    bpm_long_values[sma_long_index] = bpm_short_values[sma_short_index];
 80a217a:	f8c7 5be8 	str.w	r5, [r7, #3048]	; 0xbe8
    bpm_long_total -= bpm_long_values[sma_long_index];
 80a217e:	4601      	mov	r1, r0
    bpm_long_total += bpm_long_values[sma_long_index];
 80a2180:	4628      	mov	r0, r5
 80a2182:	f009 fe45 	bl	80abe10 <__addsf3>
    float sma_short = bpm_short_total / SMA_SHORT_LENGTH;
 80a2186:	492c      	ldr	r1, [pc, #176]	; (80a2238 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x130>)
    bpm_long_total += bpm_long_values[sma_long_index];
 80a2188:	4605      	mov	r5, r0
 80a218a:	f8c4 0d8c 	str.w	r0, [r4, #3468]	; 0xd8c
    float sma_short = bpm_short_total / SMA_SHORT_LENGTH;
 80a218e:	4630      	mov	r0, r6
 80a2190:	f009 fffa 	bl	80ac188 <__aeabi_fdiv>
 80a2194:	f009 fa96 	bl	80ab6c4 <__aeabi_f2d>
 80a2198:	4606      	mov	r6, r0
 80a219a:	460f      	mov	r7, r1
    float sma_long = bpm_long_total / SMA_LONG_LENGTH;
 80a219c:	4628      	mov	r0, r5
 80a219e:	4927      	ldr	r1, [pc, #156]	; (80a223c <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x134>)
 80a21a0:	f009 fff2 	bl	80ac188 <__aeabi_fdiv>
 80a21a4:	f009 fa8e 	bl	80ab6c4 <__aeabi_f2d>

    if (!beat_on && sma_short > 1.40*sma_long) {
 80a21a8:	7823      	ldrb	r3, [r4, #0]
 80a21aa:	bb83      	cbnz	r3, 80a220e <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x106>
 80a21ac:	a320      	add	r3, pc, #128	; (adr r3, 80a2230 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x128>)
 80a21ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a21b2:	f009 fadf 	bl	80ab774 <__aeabi_dmul>
 80a21b6:	4632      	mov	r2, r6
 80a21b8:	463b      	mov	r3, r7
 80a21ba:	f009 fd4d 	bl	80abc58 <__aeabi_dcmplt>
 80a21be:	b320      	cbz	r0, 80a220a <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x102>
        //beat detected
        beat_count++;
 80a21c0:	6923      	ldr	r3, [r4, #16]

        if (beat_count % beats_per_flip == 0) {
 80a21c2:	6961      	ldr	r1, [r4, #20]
        beat_count++;
 80a21c4:	3301      	adds	r3, #1
        if (beat_count % beats_per_flip == 0) {
 80a21c6:	fb93 f2f1 	sdiv	r2, r3, r1
        beat_count++;
 80a21ca:	6123      	str	r3, [r4, #16]
        if (beat_count % beats_per_flip == 0) {
 80a21cc:	fb01 3312 	mls	r3, r1, r2, r3
 80a21d0:	b91b      	cbnz	r3, 80a21da <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0xd2>
            flip_on = !flip_on;
 80a21d2:	78a3      	ldrb	r3, [r4, #2]
 80a21d4:	f083 0301 	eor.w	r3, r3, #1
 80a21d8:	70a3      	strb	r3, [r4, #2]
        }

        blue = (green+red) % 255;
 80a21da:	26ff      	movs	r6, #255	; 0xff
 80a21dc:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
 80a21e0:	442b      	add	r3, r5
 80a21e2:	fb93 f2f6 	sdiv	r2, r3, r6
 80a21e6:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80a21ea:	1a9b      	subs	r3, r3, r2
        green = red;
 80a21ec:	e9c4 5302 	strd	r5, r3, [r4, #8]
        red = (red+random(255)) % 255;
 80a21f0:	4630      	mov	r0, r6
 80a21f2:	f003 ffe5 	bl	80a61c0 <_Z6randomi>
 80a21f6:	4405      	add	r5, r0
 80a21f8:	fb95 f6f6 	sdiv	r6, r5, r6

        // beat_reporter is used by visualizers, it is cleared after every frame
        // beat_on is used by beat detection, it is cleared whenever a beat ends
        beat_on = true;
 80a21fc:	f240 1301 	movw	r3, #257	; 0x101
        red = (red+random(255)) % 255;
 80a2200:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 80a2204:	1bad      	subs	r5, r5, r6
 80a2206:	6065      	str	r5, [r4, #4]
        beat_on = true;
 80a2208:	8023      	strh	r3, [r4, #0]
        beat_reporter = true;
    } else if (beat_on && sma_short < 1.20*sma_long) {
        //beat reset
        beat_on = false;
    }
}
 80a220a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (beat_on && sma_short < 1.20*sma_long) {
 80a220e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80a2212:	4b0b      	ldr	r3, [pc, #44]	; (80a2240 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x138>)
 80a2214:	f009 faae 	bl	80ab774 <__aeabi_dmul>
 80a2218:	4632      	mov	r2, r6
 80a221a:	463b      	mov	r3, r7
 80a221c:	f009 fd3a 	bl	80abc94 <__aeabi_dcmpgt>
 80a2220:	2800      	cmp	r0, #0
 80a2222:	d0f2      	beq.n	80a220a <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x102>
        beat_on = false;
 80a2224:	2300      	movs	r3, #0
 80a2226:	7023      	strb	r3, [r4, #0]
}
 80a2228:	e7ef      	b.n	80a220a <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x102>
 80a222a:	bf00      	nop
 80a222c:	f3af 8000 	nop.w
 80a2230:	66666666 	.word	0x66666666
 80a2234:	3ff66666 	.word	0x3ff66666
 80a2238:	40a00000 	.word	0x40a00000
 80a223c:	42c80000 	.word	0x42c80000
 80a2240:	3ff33333 	.word	0x3ff33333

080a2244 <_ZN14Beat_Detection4tickEP10audio_bins>:
void Beat_Detection::tick(audio_bins* bins) {
 80a2244:	b570      	push	{r4, r5, r6, lr}
 80a2246:	4604      	mov	r4, r0
 80a2248:	460e      	mov	r6, r1
    for (int i = 0; i < NUM_BINS; i++) {
 80a224a:	2500      	movs	r5, #0
    tick_bpm_detection(bins);
 80a224c:	f7ff ff5c 	bl	80a2108 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins>
        tick_beat_detection(bins, i);
 80a2250:	462a      	mov	r2, r5
 80a2252:	4631      	mov	r1, r6
 80a2254:	4620      	mov	r0, r4
    for (int i = 0; i < NUM_BINS; i++) {
 80a2256:	3501      	adds	r5, #1
        tick_beat_detection(bins, i);
 80a2258:	f7ff fed6 	bl	80a2008 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi>
    for (int i = 0; i < NUM_BINS; i++) {
 80a225c:	2d07      	cmp	r5, #7
 80a225e:	d1f7      	bne.n	80a2250 <_ZN14Beat_Detection4tickEP10audio_bins+0xc>
    sma_long_index = sma_long_index % SMA_LONG_LENGTH;
 80a2260:	2164      	movs	r1, #100	; 0x64
    sma_long_index++;
 80a2262:	69e3      	ldr	r3, [r4, #28]
 80a2264:	3301      	adds	r3, #1
    sma_long_index = sma_long_index % SMA_LONG_LENGTH;
 80a2266:	fb93 f2f1 	sdiv	r2, r3, r1
 80a226a:	fb01 3312 	mls	r3, r1, r2, r3
    sma_short_index = sma_short_index % SMA_SHORT_LENGTH;
 80a226e:	2205      	movs	r2, #5
    sma_long_index = sma_long_index % SMA_LONG_LENGTH;
 80a2270:	61e3      	str	r3, [r4, #28]
    sma_short_index++;
 80a2272:	6a23      	ldr	r3, [r4, #32]
 80a2274:	3301      	adds	r3, #1
    sma_short_index = sma_short_index % SMA_SHORT_LENGTH;
 80a2276:	fb93 f2f2 	sdiv	r2, r3, r2
 80a227a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80a227e:	1a9b      	subs	r3, r3, r2
 80a2280:	6223      	str	r3, [r4, #32]
}
 80a2282:	bd70      	pop	{r4, r5, r6, pc}

080a2284 <_ZN14Beat_Detection12frame_tickedEv>:
 * Function: frame_ticked
 * Description: Clear all beat detection reporters
 * Parameters: none
 * ================================================================== */
void Beat_Detection::frame_ticked() {
    beat_reporter = false;
 80a2284:	2300      	movs	r3, #0
 80a2286:	7043      	strb	r3, [r0, #1]
    for (int i = 0; i < NUM_BINS; i++) {
        beat_reporter_bins[i] = false;
 80a2288:	f880 3bdf 	strb.w	r3, [r0, #3039]	; 0xbdf
 80a228c:	f8c0 3be0 	str.w	r3, [r0, #3040]	; 0xbe0
 80a2290:	f8a0 3be4 	strh.w	r3, [r0, #3044]	; 0xbe4
    }
}
 80a2294:	4770      	bx	lr

080a2296 <_ZN14Beat_Detection11beat_on_binEi>:
 * Description: Returns the beat reporter for the given bin
 * Parameters: [int] bin - The bin to check
 * Returns: True if a beat was detected within the last frame, false otherwise.
 * ================================================================== */
bool Beat_Detection::beat_on_bin(int bin) {
    return beat_reporter_bins[bin];
 80a2296:	4408      	add	r0, r1
}
 80a2298:	f890 0bdf 	ldrb.w	r0, [r0, #3039]	; 0xbdf
 80a229c:	4770      	bx	lr

080a229e <_ZN14Beat_Detection9num_beatsEv>:
 * Description: Returns the current number of beats detected
 * Parameters: none
 * ================================================================== */
int Beat_Detection::num_beats() {
    return beat_count;
}
 80a229e:	6900      	ldr	r0, [r0, #16]
 80a22a0:	4770      	bx	lr

080a22a2 <_ZN14Beat_Detection1rEv>:
 * Description: Returns the current red value
 * Parameters: none
 * ================================================================== */
int Beat_Detection::r() {
    return red;
}
 80a22a2:	6840      	ldr	r0, [r0, #4]
 80a22a4:	4770      	bx	lr

080a22a6 <_ZN14Beat_Detection1gEv>:
 * Description: Returns the current green value
 * Parameters: none
 * ================================================================== */
int Beat_Detection::g() {
    return green;
}
 80a22a6:	6880      	ldr	r0, [r0, #8]
 80a22a8:	4770      	bx	lr

080a22aa <_ZN14Beat_Detection1bEv>:
 * Description: Returns the current blue value
 * Parameters: none
 * ================================================================== */
int Beat_Detection::b() {
    return blue;
}
 80a22aa:	68c0      	ldr	r0, [r0, #12]
 80a22ac:	4770      	bx	lr

080a22ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a22ae:	b510      	push	{r4, lr}
 80a22b0:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a22b2:	6800      	ldr	r0, [r0, #0]
 80a22b4:	b108      	cbz	r0, 80a22ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80a22b6:	f003 fafb 	bl	80a58b0 <free>
class SystemClass {
 80a22ba:	4620      	mov	r0, r4
 80a22bc:	bd10      	pop	{r4, pc}
	...

080a22c0 <_ZN4MDNSC1Ev>:
#define MDNS_PORT 5353

#define BUFFER_SIZE 512
#define HOSTNAME ""

class MDNS {
 80a22c0:	b530      	push	{r4, r5, lr}
 80a22c2:	4604      	mov	r4, r0
 80a22c4:	b085      	sub	sp, #20
 80a22c6:	204c      	movs	r0, #76	; 0x4c
 80a22c8:	f7fd fee7 	bl	80a009a <_Znwj>
 80a22cc:	4605      	mov	r5, r0
 80a22ce:	b108      	cbz	r0, 80a22d4 <_ZN4MDNSC1Ev+0x14>
 80a22d0:	f004 feb8 	bl	80a7044 <_ZN3UDPC1Ev>
 80a22d4:	6025      	str	r5, [r4, #0]
 80a22d6:	200c      	movs	r0, #12
 80a22d8:	f7fd fedf 	bl	80a009a <_Znwj>
 80a22dc:	4605      	mov	r5, r0
 80a22de:	b118      	cbz	r0, 80a22e8 <_ZN4MDNSC1Ev+0x28>
 80a22e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a22e4:	f001 fdd4 	bl	80a3e90 <_ZN6BufferC1Et>
 80a22e8:	491e      	ldr	r1, [pc, #120]	; (80a2364 <_ZN4MDNSC1Ev+0xa4>)
 80a22ea:	6065      	str	r5, [r4, #4]
 80a22ec:	4668      	mov	r0, sp
 80a22ee:	f003 ffea 	bl	80a62c6 <_ZN6StringC1EPKc>
 80a22f2:	2018      	movs	r0, #24
 80a22f4:	f7fd fed1 	bl	80a009a <_Znwj>
 80a22f8:	4605      	mov	r5, r0
 80a22fa:	b120      	cbz	r0, 80a2306 <_ZN4MDNSC1Ev+0x46>
 80a22fc:	2300      	movs	r3, #0
 80a22fe:	4669      	mov	r1, sp
 80a2300:	461a      	mov	r2, r3
 80a2302:	f001 fe5b 	bl	80a3fbc <_ZN5LabelC1E6StringPS_b>
 80a2306:	60a5      	str	r5, [r4, #8]
 80a2308:	4668      	mov	r0, sp
 80a230a:	f003 ff92 	bl	80a6232 <_ZN6StringD1Ev>
 80a230e:	4916      	ldr	r1, [pc, #88]	; (80a2368 <_ZN4MDNSC1Ev+0xa8>)
 80a2310:	4668      	mov	r0, sp
 80a2312:	f003 ffd8 	bl	80a62c6 <_ZN6StringC1EPKc>
 80a2316:	2018      	movs	r0, #24
 80a2318:	f7fd febf 	bl	80a009a <_Znwj>
 80a231c:	4605      	mov	r5, r0
 80a231e:	b120      	cbz	r0, 80a232a <_ZN4MDNSC1Ev+0x6a>
 80a2320:	2300      	movs	r3, #0
 80a2322:	4669      	mov	r1, sp
 80a2324:	68a2      	ldr	r2, [r4, #8]
 80a2326:	f001 fe49 	bl	80a3fbc <_ZN5LabelC1E6StringPS_b>
 80a232a:	4668      	mov	r0, sp
 80a232c:	60e5      	str	r5, [r4, #12]
 80a232e:	f003 ff80 	bl	80a6232 <_ZN6StringD1Ev>
 80a2332:	2001      	movs	r0, #1
 80a2334:	f7fd feb1 	bl	80a009a <_Znwj>
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
    {
      _M_header._M_color = _S_red;
 80a2338:	2300      	movs	r3, #0

	  _Rb_tree_impl()
	    _GLIBCXX_NOEXCEPT_IF(
		is_nothrow_default_constructible<_Node_allocator>::value
		&& is_nothrow_default_constructible<_Base_key_compare>::value )
	  : _Node_allocator()
 80a233a:	f104 0220 	add.w	r2, r4, #32
 80a233e:	6120      	str	r0, [r4, #16]
      _M_header._M_left = &_M_header;
 80a2340:	e9c4 3209 	strd	r3, r2, [r4, #36]	; 0x24
      _M_node_count = 0;
 80a2344:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
 80a2348:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80a234c:	4907      	ldr	r1, [pc, #28]	; (80a236c <_ZN4MDNSC1Ev+0xac>)
      _M_header._M_color = _S_red;
 80a234e:	f884 3020 	strb.w	r3, [r4, #32]
 80a2352:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a2354:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80a2358:	f003 ffb5 	bl	80a62c6 <_ZN6StringC1EPKc>
 80a235c:	4620      	mov	r0, r4
 80a235e:	b005      	add	sp, #20
 80a2360:	bd30      	pop	{r4, r5, pc}
 80a2362:	bf00      	nop
 80a2364:	080ad33e 	.word	0x080ad33e
 80a2368:	080acabc 	.word	0x080acabc
 80a236c:	080acac2 	.word	0x080acac2

080a2370 <_Z7init_eqv>:
/* ================================================================== *
 *  Function: init_eq
 *  Description: Sends reset sequence to MSGEQ7's allowing for data
 *  reading to begin
 * ================================================================== */
void init_eq() {
 80a2370:	b508      	push	{r3, lr}
     *
     *  rst     _|‾‾‾‾‾|__
     *
     *  strobe  _|‾‾|__|‾‾
     */
    digitalWrite(rst, HIGH);
 80a2372:	2101      	movs	r1, #1
 80a2374:	200f      	movs	r0, #15
 80a2376:	f005 fa18 	bl	80a77aa <digitalWrite>
    digitalWrite(strobe, HIGH);
 80a237a:	2101      	movs	r1, #1
 80a237c:	200c      	movs	r0, #12
 80a237e:	f005 fa14 	bl	80a77aa <digitalWrite>
    delay(1);
 80a2382:	2001      	movs	r0, #1
 80a2384:	f003 facc 	bl	80a5920 <delay>
    digitalWrite(strobe, LOW);
 80a2388:	2100      	movs	r1, #0
 80a238a:	200c      	movs	r0, #12
 80a238c:	f005 fa0d 	bl	80a77aa <digitalWrite>
    delay(1);
 80a2390:	2001      	movs	r0, #1
 80a2392:	f003 fac5 	bl	80a5920 <delay>
    digitalWrite(rst, LOW);
 80a2396:	2100      	movs	r1, #0
 80a2398:	200f      	movs	r0, #15
 80a239a:	f005 fa06 	bl	80a77aa <digitalWrite>
    digitalWrite(strobe, HIGH);
 80a239e:	200c      	movs	r0, #12
 80a23a0:	2101      	movs	r1, #1
 80a23a2:	f005 fa02 	bl	80a77aa <digitalWrite>
    delay(1);
}
 80a23a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(1);
 80a23aa:	2001      	movs	r0, #1
 80a23ac:	f003 bab8 	b.w	80a5920 <delay>

080a23b0 <_Z11sample_freqP10audio_bins>:
/* ================================================================== *
 *  Function: sample_freq
 *  Description: Reads bins from MSGEQ7's and stores them to struct
 *  Parameters:  [audio_bins]* bins - frequency bins read from chip
 * ================================================================== */
void sample_freq(audio_bins* bins) {
 80a23b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (int i = 0; i < NUM_BINS; i++) {
        digitalWrite(strobe, LOW);
        delayMicroseconds(40); // allow for EQ mux to fully switch

        // Moving average bins with new sample
        bins->left[i]  = analogRead(audio_l) * 0.8 + bins->left[i]  * 0.2;
 80a23b4:	f20f 09b8 	addw	r9, pc, #184	; 0xb8
 80a23b8:	e9d9 8900 	ldrd	r8, r9, [r9]
 80a23bc:	a72e      	add	r7, pc, #184	; (adr r7, 80a2478 <_Z11sample_freqP10audio_bins+0xc8>)
 80a23be:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a23c2:	f100 0318 	add.w	r3, r0, #24
 80a23c6:	f1a0 0a04 	sub.w	sl, r0, #4
 80a23ca:	9301      	str	r3, [sp, #4]
        digitalWrite(strobe, LOW);
 80a23cc:	2100      	movs	r1, #0
 80a23ce:	200c      	movs	r0, #12
 80a23d0:	f005 f9eb 	bl	80a77aa <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a23d4:	2028      	movs	r0, #40	; 0x28
 80a23d6:	f002 ffe5 	bl	80a53a4 <HAL_Delay_Microseconds>
        bins->left[i]  = analogRead(audio_l) * 0.8 + bins->left[i]  * 0.2;
 80a23da:	200a      	movs	r0, #10
 80a23dc:	f005 f9fe 	bl	80a77dc <analogRead>
 80a23e0:	4683      	mov	fp, r0
 80a23e2:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80a23e6:	f009 f95b 	bl	80ab6a0 <__aeabi_i2d>
 80a23ea:	4642      	mov	r2, r8
 80a23ec:	464b      	mov	r3, r9
 80a23ee:	f009 f9c1 	bl	80ab774 <__aeabi_dmul>
 80a23f2:	4604      	mov	r4, r0
 80a23f4:	4658      	mov	r0, fp
 80a23f6:	460d      	mov	r5, r1
 80a23f8:	f009 f952 	bl	80ab6a0 <__aeabi_i2d>
 80a23fc:	4632      	mov	r2, r6
 80a23fe:	463b      	mov	r3, r7
 80a2400:	f009 f9b8 	bl	80ab774 <__aeabi_dmul>
 80a2404:	4602      	mov	r2, r0
 80a2406:	460b      	mov	r3, r1
 80a2408:	4620      	mov	r0, r4
 80a240a:	4629      	mov	r1, r5
 80a240c:	f008 fffc 	bl	80ab408 <__adddf3>
 80a2410:	f009 fc60 	bl	80abcd4 <__aeabi_d2iz>
 80a2414:	f8ca 0000 	str.w	r0, [sl]
        bins->right[i] = analogRead(audio_r) * 0.8 + bins->right[i] * 0.2;
 80a2418:	200b      	movs	r0, #11
 80a241a:	f005 f9df 	bl	80a77dc <analogRead>
 80a241e:	4683      	mov	fp, r0
 80a2420:	f8da 001c 	ldr.w	r0, [sl, #28]
 80a2424:	f009 f93c 	bl	80ab6a0 <__aeabi_i2d>
 80a2428:	4642      	mov	r2, r8
 80a242a:	464b      	mov	r3, r9
 80a242c:	f009 f9a2 	bl	80ab774 <__aeabi_dmul>
 80a2430:	4604      	mov	r4, r0
 80a2432:	4658      	mov	r0, fp
 80a2434:	460d      	mov	r5, r1
 80a2436:	f009 f933 	bl	80ab6a0 <__aeabi_i2d>
 80a243a:	4632      	mov	r2, r6
 80a243c:	463b      	mov	r3, r7
 80a243e:	f009 f999 	bl	80ab774 <__aeabi_dmul>
 80a2442:	460b      	mov	r3, r1
 80a2444:	4602      	mov	r2, r0
 80a2446:	4629      	mov	r1, r5
 80a2448:	4620      	mov	r0, r4
 80a244a:	f008 ffdd 	bl	80ab408 <__adddf3>
 80a244e:	f009 fc41 	bl	80abcd4 <__aeabi_d2iz>

        digitalWrite(strobe, HIGH);
 80a2452:	2101      	movs	r1, #1
        bins->right[i] = analogRead(audio_r) * 0.8 + bins->right[i] * 0.2;
 80a2454:	f8ca 001c 	str.w	r0, [sl, #28]
        digitalWrite(strobe, HIGH);
 80a2458:	200c      	movs	r0, #12
 80a245a:	f005 f9a6 	bl	80a77aa <digitalWrite>
 80a245e:	2028      	movs	r0, #40	; 0x28
 80a2460:	f002 ffa0 	bl	80a53a4 <HAL_Delay_Microseconds>
    for (int i = 0; i < NUM_BINS; i++) {
 80a2464:	9b01      	ldr	r3, [sp, #4]
 80a2466:	459a      	cmp	sl, r3
 80a2468:	d1b0      	bne.n	80a23cc <_Z11sample_freqP10audio_bins+0x1c>
        delayMicroseconds(40); // allow for EQ mux to fully switch
    }
}
 80a246a:	b003      	add	sp, #12
 80a246c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2470:	9999999a 	.word	0x9999999a
 80a2474:	3fc99999 	.word	0x3fc99999
 80a2478:	9999999a 	.word	0x9999999a
 80a247c:	3fe99999 	.word	0x3fe99999

080a2480 <_Z15powered_on_tickv>:
/* ================================================================== *
 *  Function: powered_on_tick
 *  Description: Samples/beat detects/updates frame as needed
 *  Parameters:  none
 * ================================================================== */
void powered_on_tick() {
 80a2480:	b510      	push	{r4, lr}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a2482:	f002 ff9f 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
    // #if ENABLE_PSU_CONTROL
    // if (!psu_is_on) { psu_startup(); }
    // #endif

    #if ENABLE_MSGEQ7
    if (millis() - last_sample_millis >= SAMPLE_UPDATE_INTERVAL) {
 80a2486:	4c14      	ldr	r4, [pc, #80]	; (80a24d8 <_Z15powered_on_tickv+0x58>)
 80a2488:	6823      	ldr	r3, [r4, #0]
 80a248a:	1ac0      	subs	r0, r0, r3
 80a248c:	2809      	cmp	r0, #9
 80a248e:	d909      	bls.n	80a24a4 <_Z15powered_on_tickv+0x24>
 80a2490:	f002 ff98 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
        last_sample_millis = millis();
 80a2494:	6020      	str	r0, [r4, #0]
        sample_freq(&bins);
 80a2496:	4811      	ldr	r0, [pc, #68]	; (80a24dc <_Z15powered_on_tickv+0x5c>)
 80a2498:	f7ff ff8a 	bl	80a23b0 <_Z11sample_freqP10audio_bins>
        beat_detect.tick(&bins);
 80a249c:	490f      	ldr	r1, [pc, #60]	; (80a24dc <_Z15powered_on_tickv+0x5c>)
 80a249e:	4810      	ldr	r0, [pc, #64]	; (80a24e0 <_Z15powered_on_tickv+0x60>)
 80a24a0:	f7ff fed0 	bl	80a2244 <_ZN14Beat_Detection4tickEP10audio_bins>
 80a24a4:	f002 ff8e 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
    }
    #endif

    #if ENABLE_BARS
    if (millis() - last_display_update >= DISPLAY_UPDATE_INTERVAL) {
 80a24a8:	4c0e      	ldr	r4, [pc, #56]	; (80a24e4 <_Z15powered_on_tickv+0x64>)
 80a24aa:	6823      	ldr	r3, [r4, #0]
 80a24ac:	1ac0      	subs	r0, r0, r3
 80a24ae:	280e      	cmp	r0, #14
 80a24b0:	d910      	bls.n	80a24d4 <_Z15powered_on_tickv+0x54>
 80a24b2:	f002 ff87 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
        last_display_update = millis();
        #ifdef ENABLE_WEB_SERVER
        matrix->tick(&bins, server.visualizer());
 80a24b6:	4b0c      	ldr	r3, [pc, #48]	; (80a24e8 <_Z15powered_on_tickv+0x68>)
        last_display_update = millis();
 80a24b8:	6020      	str	r0, [r4, #0]
        matrix->tick(&bins, server.visualizer());
 80a24ba:	480c      	ldr	r0, [pc, #48]	; (80a24ec <_Z15powered_on_tickv+0x6c>)
 80a24bc:	681c      	ldr	r4, [r3, #0]
 80a24be:	f001 fc91 	bl	80a3de4 <_ZN6Server10visualizerEv>
 80a24c2:	4906      	ldr	r1, [pc, #24]	; (80a24dc <_Z15powered_on_tickv+0x5c>)
 80a24c4:	4602      	mov	r2, r0
 80a24c6:	4620      	mov	r0, r4
 80a24c8:	f7ff fcee 	bl	80a1ea8 <_ZN10Bar_Matrix4tickEP10audio_binsi>
        #else
        matrix->tick(&bins, STATIC_VISUALIZER);
        #endif
        frame_count++;
 80a24cc:	4a08      	ldr	r2, [pc, #32]	; (80a24f0 <_Z15powered_on_tickv+0x70>)
 80a24ce:	6813      	ldr	r3, [r2, #0]
 80a24d0:	3301      	adds	r3, #1
 80a24d2:	6013      	str	r3, [r2, #0]
    }
    #endif
}
 80a24d4:	bd10      	pop	{r4, pc}
 80a24d6:	bf00      	nop
 80a24d8:	20000e78 	.word	0x20000e78
 80a24dc:	20000094 	.word	0x20000094
 80a24e0:	200000d4 	.word	0x200000d4
 80a24e4:	20000e70 	.word	0x20000e70
 80a24e8:	200000cc 	.word	0x200000cc
 80a24ec:	20000ed4 	.word	0x20000ed4
 80a24f0:	20000e68 	.word	0x20000e68

080a24f4 <_Z11psu_startupv>:
/* ================================================================== *
 *  Function: psu_startup
 *  Description: Turns the psu on
 *  Parameters:  none
 * ================================================================== */
void psu_startup() {
 80a24f4:	b570      	push	{r4, r5, r6, lr}
    #if ENABLE_PSU_CONTROL
    if (!psu_is_on) {
 80a24f6:	4c08      	ldr	r4, [pc, #32]	; (80a2518 <_Z11psu_startupv+0x24>)
 80a24f8:	7825      	ldrb	r5, [r4, #0]
 80a24fa:	b955      	cbnz	r5, 80a2512 <_Z11psu_startupv+0x1e>
        matrix->clear_matrix();
 80a24fc:	4e07      	ldr	r6, [pc, #28]	; (80a251c <_Z11psu_startupv+0x28>)
 80a24fe:	6830      	ldr	r0, [r6, #0]
 80a2500:	f7fd ff7c 	bl	80a03fc <_ZN10Bar_Matrix12clear_matrixEv>
        matrix->show_all();
 80a2504:	6830      	ldr	r0, [r6, #0]
 80a2506:	f7fe f8f5 	bl	80a06f4 <_ZN10Bar_Matrix8show_allEv>
        digitalWrite(ps_on, LOW);
 80a250a:	4629      	mov	r1, r5
 80a250c:	200e      	movs	r0, #14
 80a250e:	f005 f94c 	bl	80a77aa <digitalWrite>
    }
    psu_is_on = true;
 80a2512:	2301      	movs	r3, #1
 80a2514:	7023      	strb	r3, [r4, #0]
    #endif
}
 80a2516:	bd70      	pop	{r4, r5, r6, pc}
 80a2518:	200000d1 	.word	0x200000d1
 80a251c:	200000cc 	.word	0x200000cc

080a2520 <setup>:
void setup() {
 80a2520:	b530      	push	{r4, r5, lr}
    last_sample_millis = 0;
 80a2522:	2400      	movs	r4, #0
void setup() {
 80a2524:	b0a1      	sub	sp, #132	; 0x84
    pinMode(rst, OUTPUT);
 80a2526:	2101      	movs	r1, #1
 80a2528:	200f      	movs	r0, #15
 80a252a:	f005 f92d 	bl	80a7788 <pinMode>
    pinMode(strobe, OUTPUT);
 80a252e:	2101      	movs	r1, #1
 80a2530:	200c      	movs	r0, #12
 80a2532:	f005 f929 	bl	80a7788 <pinMode>
    init_eq();
 80a2536:	f7ff ff1b 	bl	80a2370 <_Z7init_eqv>
    last_sample_millis = 0;
 80a253a:	4b5f      	ldr	r3, [pc, #380]	; (80a26b8 <setup+0x198>)
    pinMode(ps_on, OUTPUT);
 80a253c:	2101      	movs	r1, #1
 80a253e:	200e      	movs	r0, #14
    last_sample_millis = 0;
 80a2540:	601c      	str	r4, [r3, #0]
    pinMode(ps_on, OUTPUT);
 80a2542:	f005 f921 	bl	80a7788 <pinMode>
    psu_is_on = false;
 80a2546:	4b5d      	ldr	r3, [pc, #372]	; (80a26bc <setup+0x19c>)
 80a2548:	701c      	strb	r4, [r3, #0]
    psu_startup();
 80a254a:	f7ff ffd3 	bl	80a24f4 <_Z11psu_startupv>
    matrix = new Bar_Matrix(NUM_BARS, STRIP_LENGTH, LED_TYPE, matrix_pins, &beat_detect);
 80a254e:	f44f 7017 	mov.w	r0, #604	; 0x25c
 80a2552:	f7fd fda2 	bl	80a009a <_Znwj>
 80a2556:	4604      	mov	r4, r0
 80a2558:	b140      	cbz	r0, 80a256c <setup+0x4c>
 80a255a:	4b59      	ldr	r3, [pc, #356]	; (80a26c0 <setup+0x1a0>)
 80a255c:	223a      	movs	r2, #58	; 0x3a
 80a255e:	9301      	str	r3, [sp, #4]
 80a2560:	4b58      	ldr	r3, [pc, #352]	; (80a26c4 <setup+0x1a4>)
 80a2562:	210a      	movs	r1, #10
 80a2564:	9300      	str	r3, [sp, #0]
 80a2566:	2302      	movs	r3, #2
 80a2568:	f7fd ff6e 	bl	80a0448 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection>
 80a256c:	4b56      	ldr	r3, [pc, #344]	; (80a26c8 <setup+0x1a8>)
    frame_count_publish = 0;
 80a256e:	4d57      	ldr	r5, [pc, #348]	; (80a26cc <setup+0x1ac>)
    matrix = new Bar_Matrix(NUM_BARS, STRIP_LENGTH, LED_TYPE, matrix_pins, &beat_detect);
 80a2570:	601c      	str	r4, [r3, #0]
    last_display_update = 0;
 80a2572:	2400      	movs	r4, #0
 80a2574:	4b56      	ldr	r3, [pc, #344]	; (80a26d0 <setup+0x1b0>)
 80a2576:	601c      	str	r4, [r3, #0]
    last_sound_seconds = Time.now();
 80a2578:	f004 fbb4 	bl	80a6ce4 <_ZN9TimeClass3nowEv>
 80a257c:	4b55      	ldr	r3, [pc, #340]	; (80a26d4 <setup+0x1b4>)
 80a257e:	6018      	str	r0, [r3, #0]
    server.init();
 80a2580:	4855      	ldr	r0, [pc, #340]	; (80a26d8 <setup+0x1b8>)
 80a2582:	f001 fbdb 	bl	80a3d3c <_ZN6Server4initEv>
    last_server_update = 0;
 80a2586:	4b55      	ldr	r3, [pc, #340]	; (80a26dc <setup+0x1bc>)
    mdns.setHostname("muse");
 80a2588:	4955      	ldr	r1, [pc, #340]	; (80a26e0 <setup+0x1c0>)
 80a258a:	a81a      	add	r0, sp, #104	; 0x68
    last_server_update = 0;
 80a258c:	601c      	str	r4, [r3, #0]
    mdns.setHostname("muse");
 80a258e:	f003 fe9a 	bl	80a62c6 <_ZN6StringC1EPKc>
 80a2592:	a91a      	add	r1, sp, #104	; 0x68
 80a2594:	4853      	ldr	r0, [pc, #332]	; (80a26e4 <setup+0x1c4>)
 80a2596:	f002 f8bb 	bl	80a4710 <_ZN4MDNS11setHostnameE6String>
 80a259a:	a81a      	add	r0, sp, #104	; 0x68
 80a259c:	f003 fe49 	bl	80a6232 <_ZN6StringD1Ev>
    mdns.begin();
 80a25a0:	4850      	ldr	r0, [pc, #320]	; (80a26e4 <setup+0x1c4>)
 80a25a2:	f001 fe99 	bl	80a42d8 <_ZN4MDNS5beginEv>
    last_mdns_update = 0;
 80a25a6:	4b50      	ldr	r3, [pc, #320]	; (80a26e8 <setup+0x1c8>)
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a25a8:	2202      	movs	r2, #2
 80a25aa:	601c      	str	r4, [r3, #0]
    tick_count = 0;
 80a25ac:	4b4f      	ldr	r3, [pc, #316]	; (80a26ec <setup+0x1cc>)
 80a25ae:	4950      	ldr	r1, [pc, #320]	; (80a26f0 <setup+0x1d0>)
 80a25b0:	601c      	str	r4, [r3, #0]
    last_tick_update = 0;
 80a25b2:	4b50      	ldr	r3, [pc, #320]	; (80a26f4 <setup+0x1d4>)
 80a25b4:	4850      	ldr	r0, [pc, #320]	; (80a26f8 <setup+0x1d8>)
 80a25b6:	601c      	str	r4, [r3, #0]
    frame_count = 0;
 80a25b8:	4b50      	ldr	r3, [pc, #320]	; (80a26fc <setup+0x1dc>)
    frame_count_publish = 0;
 80a25ba:	602c      	str	r4, [r5, #0]
    frame_count = 0;
 80a25bc:	601c      	str	r4, [r3, #0]
 80a25be:	4623      	mov	r3, r4
 80a25c0:	f003 f8d6 	bl	80a5770 <spark_variable>
 80a25c4:	4623      	mov	r3, r4
 80a25c6:	2202      	movs	r2, #2
 80a25c8:	4629      	mov	r1, r5
 80a25ca:	484d      	ldr	r0, [pc, #308]	; (80a2700 <setup+0x1e0>)
 80a25cc:	f003 f8d0 	bl	80a5770 <spark_variable>
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a25d0:	4b4c      	ldr	r3, [pc, #304]	; (80a2704 <setup+0x1e4>)
 80a25d2:	4622      	mov	r2, r4
 80a25d4:	6858      	ldr	r0, [r3, #4]
 80a25d6:	4621      	mov	r1, r4
 80a25d8:	f003 f8fa 	bl	80a57d0 <network_config>
    }

#if !HAL_PLATFORM_WIFI_SCAN_ONLY

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a25dc:	1c81      	adds	r1, r0, #2
 80a25de:	a81a      	add	r0, sp, #104	; 0x68
 80a25e0:	f003 fce0 	bl	80a5fa4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    String ipStr = String(myIP[0])+"."+String(myIP[1])+"."+String(myIP[2])+"."+String(myIP[3]);
 80a25e4:	220a      	movs	r2, #10
 80a25e6:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80a25ea:	a806      	add	r0, sp, #24
 80a25ec:	f003 fed9 	bl	80a63a2 <_ZN6StringC1Ehh>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a25f0:	a906      	add	r1, sp, #24
 80a25f2:	a80a      	add	r0, sp, #40	; 0x28
 80a25f4:	f003 feb1 	bl	80a635a <_ZN6StringC1ERKS_>
 80a25f8:	4943      	ldr	r1, [pc, #268]	; (80a2708 <setup+0x1e8>)
 80a25fa:	a80a      	add	r0, sp, #40	; 0x28
 80a25fc:	f003 ff06 	bl	80a640c <_ZplRK15StringSumHelperPKc>
 80a2600:	4604      	mov	r4, r0
 80a2602:	220a      	movs	r2, #10
 80a2604:	f89d 106e 	ldrb.w	r1, [sp, #110]	; 0x6e
 80a2608:	a80e      	add	r0, sp, #56	; 0x38
 80a260a:	f003 feca 	bl	80a63a2 <_ZN6StringC1Ehh>
 80a260e:	4620      	mov	r0, r4
 80a2610:	a90e      	add	r1, sp, #56	; 0x38
 80a2612:	f003 feef 	bl	80a63f4 <_ZplRK15StringSumHelperRK6String>
 80a2616:	493c      	ldr	r1, [pc, #240]	; (80a2708 <setup+0x1e8>)
 80a2618:	f003 fef8 	bl	80a640c <_ZplRK15StringSumHelperPKc>
 80a261c:	4604      	mov	r4, r0
 80a261e:	220a      	movs	r2, #10
 80a2620:	f89d 106d 	ldrb.w	r1, [sp, #109]	; 0x6d
 80a2624:	a812      	add	r0, sp, #72	; 0x48
 80a2626:	f003 febc 	bl	80a63a2 <_ZN6StringC1Ehh>
 80a262a:	4620      	mov	r0, r4
 80a262c:	a912      	add	r1, sp, #72	; 0x48
 80a262e:	f003 fee1 	bl	80a63f4 <_ZplRK15StringSumHelperRK6String>
 80a2632:	4935      	ldr	r1, [pc, #212]	; (80a2708 <setup+0x1e8>)
 80a2634:	f003 feea 	bl	80a640c <_ZplRK15StringSumHelperPKc>
 80a2638:	4604      	mov	r4, r0
 80a263a:	220a      	movs	r2, #10
 80a263c:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80a2640:	a816      	add	r0, sp, #88	; 0x58
 80a2642:	f003 feae 	bl	80a63a2 <_ZN6StringC1Ehh>
 80a2646:	4620      	mov	r0, r4
 80a2648:	a916      	add	r1, sp, #88	; 0x58
 80a264a:	f003 fed3 	bl	80a63f4 <_ZplRK15StringSumHelperRK6String>
 80a264e:	4601      	mov	r1, r0
 80a2650:	a802      	add	r0, sp, #8
 80a2652:	f003 fe82 	bl	80a635a <_ZN6StringC1ERKS_>
 80a2656:	a816      	add	r0, sp, #88	; 0x58
 80a2658:	f003 fdeb 	bl	80a6232 <_ZN6StringD1Ev>
 80a265c:	a812      	add	r0, sp, #72	; 0x48
 80a265e:	f003 fde8 	bl	80a6232 <_ZN6StringD1Ev>
 80a2662:	a80e      	add	r0, sp, #56	; 0x38
 80a2664:	f003 fde5 	bl	80a6232 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a2668:	a80a      	add	r0, sp, #40	; 0x28
 80a266a:	f003 fde2 	bl	80a6232 <_ZN6StringD1Ev>
 80a266e:	a806      	add	r0, sp, #24
 80a2670:	f003 fddf 	bl	80a6232 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a2674:	4b25      	ldr	r3, [pc, #148]	; (80a270c <setup+0x1ec>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a2676:	9a02      	ldr	r2, [sp, #8]
 80a2678:	781b      	ldrb	r3, [r3, #0]
 80a267a:	4925      	ldr	r1, [pc, #148]	; (80a2710 <setup+0x1f0>)
 80a267c:	f88d 3000 	strb.w	r3, [sp]
 80a2680:	a816      	add	r0, sp, #88	; 0x58
 80a2682:	233c      	movs	r3, #60	; 0x3c
 80a2684:	f003 faaa 	bl	80a5bdc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a2688:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80a268a:	b17c      	cbz	r4, 80a26ac <setup+0x18c>
      if (--_M_use_count == 0)
 80a268c:	6863      	ldr	r3, [r4, #4]
 80a268e:	3b01      	subs	r3, #1
 80a2690:	6063      	str	r3, [r4, #4]
 80a2692:	b95b      	cbnz	r3, 80a26ac <setup+0x18c>
          _M_dispose();
 80a2694:	6823      	ldr	r3, [r4, #0]
 80a2696:	4620      	mov	r0, r4
 80a2698:	689b      	ldr	r3, [r3, #8]
 80a269a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a269c:	68a3      	ldr	r3, [r4, #8]
 80a269e:	3b01      	subs	r3, #1
 80a26a0:	60a3      	str	r3, [r4, #8]
 80a26a2:	b91b      	cbnz	r3, 80a26ac <setup+0x18c>
            _M_destroy();
 80a26a4:	6823      	ldr	r3, [r4, #0]
 80a26a6:	4620      	mov	r0, r4
 80a26a8:	68db      	ldr	r3, [r3, #12]
 80a26aa:	4798      	blx	r3
 80a26ac:	a802      	add	r0, sp, #8
 80a26ae:	f003 fdc0 	bl	80a6232 <_ZN6StringD1Ev>
}
 80a26b2:	b021      	add	sp, #132	; 0x84
 80a26b4:	bd30      	pop	{r4, r5, pc}
 80a26b6:	bf00      	nop
 80a26b8:	20000e78 	.word	0x20000e78
 80a26bc:	200000d1 	.word	0x200000d1
 80a26c0:	200000d4 	.word	0x200000d4
 80a26c4:	080acae7 	.word	0x080acae7
 80a26c8:	200000cc 	.word	0x200000cc
 80a26cc:	20000e6c 	.word	0x20000e6c
 80a26d0:	20000e70 	.word	0x20000e70
 80a26d4:	20000090 	.word	0x20000090
 80a26d8:	20000ed4 	.word	0x20000ed4
 80a26dc:	20000e7c 	.word	0x20000e7c
 80a26e0:	080acac5 	.word	0x080acac5
 80a26e4:	20000e84 	.word	0x20000e84
 80a26e8:	20000e74 	.word	0x20000e74
 80a26ec:	20000ef4 	.word	0x20000ef4
 80a26f0:	20000ef8 	.word	0x20000ef8
 80a26f4:	20000e80 	.word	0x20000e80
 80a26f8:	080acaca 	.word	0x080acaca
 80a26fc:	20000e68 	.word	0x20000e68
 80a2700:	080acad3 	.word	0x080acad3
 80a2704:	200014d0 	.word	0x200014d0
 80a2708:	080acadd 	.word	0x080acadd
 80a270c:	200000d0 	.word	0x200000d0
 80a2710:	080acadf 	.word	0x080acadf

080a2714 <_Z12psu_shutdownv>:
/* ================================================================== *
 *  Function: psu_shutdown
 *  Description: turns the psu off, sets psu_is_on to false
 *  Parameters:  none
 * ================================================================== */
void psu_shutdown() {
 80a2714:	b538      	push	{r3, r4, r5, lr}
    #if ENABLE_PSU_CONTROL
    if (psu_is_on) {
 80a2716:	4c08      	ldr	r4, [pc, #32]	; (80a2738 <_Z12psu_shutdownv+0x24>)
 80a2718:	7822      	ldrb	r2, [r4, #0]
 80a271a:	b152      	cbz	r2, 80a2732 <_Z12psu_shutdownv+0x1e>
        digitalWrite(ps_on, HIGH);
        matrix->clear_matrix();
 80a271c:	4d07      	ldr	r5, [pc, #28]	; (80a273c <_Z12psu_shutdownv+0x28>)
        digitalWrite(ps_on, HIGH);
 80a271e:	2101      	movs	r1, #1
 80a2720:	200e      	movs	r0, #14
 80a2722:	f005 f842 	bl	80a77aa <digitalWrite>
        matrix->clear_matrix();
 80a2726:	6828      	ldr	r0, [r5, #0]
 80a2728:	f7fd fe68 	bl	80a03fc <_ZN10Bar_Matrix12clear_matrixEv>
        matrix->show_all();
 80a272c:	6828      	ldr	r0, [r5, #0]
 80a272e:	f7fd ffe1 	bl	80a06f4 <_ZN10Bar_Matrix8show_allEv>
    }
    psu_is_on = false;
 80a2732:	2300      	movs	r3, #0
 80a2734:	7023      	strb	r3, [r4, #0]
    #endif
}
 80a2736:	bd38      	pop	{r3, r4, r5, pc}
 80a2738:	200000d1 	.word	0x200000d1
 80a273c:	200000cc 	.word	0x200000cc

080a2740 <loop>:
void loop() {
 80a2740:	b538      	push	{r3, r4, r5, lr}
    powered_on_tick();
 80a2742:	f7ff fe9d 	bl	80a2480 <_Z15powered_on_tickv>
        for (int i = 0; i < NUM_BINS; i++) {
 80a2746:	2200      	movs	r2, #0
            if (bins.right[i] > SCREENSAVER_MINIMUM || bins.left[i] > SCREENSAVER_MINIMUM) {
 80a2748:	f240 5114 	movw	r1, #1300	; 0x514
 80a274c:	4b3d      	ldr	r3, [pc, #244]	; (80a2844 <loop+0x104>)
 80a274e:	69dc      	ldr	r4, [r3, #28]
 80a2750:	4618      	mov	r0, r3
 80a2752:	428c      	cmp	r4, r1
 80a2754:	dc03      	bgt.n	80a275e <loop+0x1e>
 80a2756:	6800      	ldr	r0, [r0, #0]
 80a2758:	3304      	adds	r3, #4
 80a275a:	4288      	cmp	r0, r1
 80a275c:	dd60      	ble.n	80a2820 <loop+0xe0>
                if (!psu_is_on) { psu_startup(); }
 80a275e:	4b3a      	ldr	r3, [pc, #232]	; (80a2848 <loop+0x108>)
 80a2760:	781b      	ldrb	r3, [r3, #0]
 80a2762:	b90b      	cbnz	r3, 80a2768 <loop+0x28>
 80a2764:	f7ff fec6 	bl	80a24f4 <_Z11psu_startupv>
                last_sound_seconds = Time.now();
 80a2768:	f004 fabc 	bl	80a6ce4 <_ZN9TimeClass3nowEv>
 80a276c:	4b37      	ldr	r3, [pc, #220]	; (80a284c <loop+0x10c>)
 80a276e:	6018      	str	r0, [r3, #0]
        if (Time.now()-last_sound_seconds > SCREENSAVER_SECS_TO_PSU_OFF) {
 80a2770:	f004 fab8 	bl	80a6ce4 <_ZN9TimeClass3nowEv>
 80a2774:	4b35      	ldr	r3, [pc, #212]	; (80a284c <loop+0x10c>)
 80a2776:	681b      	ldr	r3, [r3, #0]
 80a2778:	1ac0      	subs	r0, r0, r3
 80a277a:	281e      	cmp	r0, #30
 80a277c:	d904      	bls.n	80a2788 <loop+0x48>
            if (psu_is_on) { psu_shutdown(); }
 80a277e:	4b32      	ldr	r3, [pc, #200]	; (80a2848 <loop+0x108>)
 80a2780:	781b      	ldrb	r3, [r3, #0]
 80a2782:	b10b      	cbz	r3, 80a2788 <loop+0x48>
 80a2784:	f7ff ffc6 	bl	80a2714 <_Z12psu_shutdownv>
        if (server.powered_on() == SERVER_POWER_ON) {
 80a2788:	4831      	ldr	r0, [pc, #196]	; (80a2850 <loop+0x110>)
 80a278a:	f001 fb29 	bl	80a3de0 <_ZN6Server10powered_onEv>
 80a278e:	2801      	cmp	r0, #1
 80a2790:	d14a      	bne.n	80a2828 <loop+0xe8>
            if (!psu_is_on) { psu_startup(); }
 80a2792:	4b2d      	ldr	r3, [pc, #180]	; (80a2848 <loop+0x108>)
 80a2794:	781b      	ldrb	r3, [r3, #0]
 80a2796:	b90b      	cbnz	r3, 80a279c <loop+0x5c>
 80a2798:	f7ff feac 	bl	80a24f4 <_Z11psu_startupv>
 80a279c:	f002 fe12 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
            if (millis() - last_display_update >= DISPLAY_UPDATE_INTERVAL) {
 80a27a0:	4c2c      	ldr	r4, [pc, #176]	; (80a2854 <loop+0x114>)
 80a27a2:	6823      	ldr	r3, [r4, #0]
 80a27a4:	1ac0      	subs	r0, r0, r3
 80a27a6:	280e      	cmp	r0, #14
 80a27a8:	d905      	bls.n	80a27b6 <loop+0x76>
 80a27aa:	f002 fe0b 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
                last_display_update = millis();
 80a27ae:	6020      	str	r0, [r4, #0]
                sample_freq(&bins);
 80a27b0:	4824      	ldr	r0, [pc, #144]	; (80a2844 <loop+0x104>)
 80a27b2:	f7ff fdfd 	bl	80a23b0 <_Z11sample_freqP10audio_bins>
 80a27b6:	f002 fe05 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - last_mdns_update > MDNS_UPDATE_INTERVAL ||
 80a27ba:	4c27      	ldr	r4, [pc, #156]	; (80a2858 <loop+0x118>)
 80a27bc:	6823      	ldr	r3, [r4, #0]
 80a27be:	1ac0      	subs	r0, r0, r3
 80a27c0:	2830      	cmp	r0, #48	; 0x30
 80a27c2:	d934      	bls.n	80a282e <loop+0xee>
 80a27c4:	f002 fdfe 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
            last_mdns_update = millis();
 80a27c8:	6020      	str	r0, [r4, #0]
            mdns.processQueries();
 80a27ca:	4824      	ldr	r0, [pc, #144]	; (80a285c <loop+0x11c>)
 80a27cc:	f002 f8e6 	bl	80a499c <_ZN4MDNS14processQueriesEv>
 80a27d0:	f002 fdf8 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - last_server_update > SERVER_UPDATE_INTERVAL ||
 80a27d4:	4c22      	ldr	r4, [pc, #136]	; (80a2860 <loop+0x120>)
 80a27d6:	6823      	ldr	r3, [r4, #0]
 80a27d8:	1ac0      	subs	r0, r0, r3
 80a27da:	2830      	cmp	r0, #48	; 0x30
 80a27dc:	d82a      	bhi.n	80a2834 <loop+0xf4>
 80a27de:	f002 fdf1 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
    tick_count++;
 80a27e2:	4c20      	ldr	r4, [pc, #128]	; (80a2864 <loop+0x124>)
    if (millis() - last_tick_update >= 10000) {
 80a27e4:	4d20      	ldr	r5, [pc, #128]	; (80a2868 <loop+0x128>)
    tick_count++;
 80a27e6:	6823      	ldr	r3, [r4, #0]
 80a27e8:	3301      	adds	r3, #1
 80a27ea:	6023      	str	r3, [r4, #0]
 80a27ec:	f002 fdea 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - last_tick_update >= 10000) {
 80a27f0:	682b      	ldr	r3, [r5, #0]
 80a27f2:	1ac0      	subs	r0, r0, r3
 80a27f4:	f242 730f 	movw	r3, #9999	; 0x270f
 80a27f8:	4298      	cmp	r0, r3
 80a27fa:	d90c      	bls.n	80a2816 <loop+0xd6>
 80a27fc:	f002 fde2 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
        tick_count_publish = tick_count;
 80a2800:	6822      	ldr	r2, [r4, #0]
 80a2802:	4b1a      	ldr	r3, [pc, #104]	; (80a286c <loop+0x12c>)
        last_tick_update = millis();
 80a2804:	6028      	str	r0, [r5, #0]
        tick_count_publish = tick_count;
 80a2806:	601a      	str	r2, [r3, #0]
        frame_count_publish = frame_count;
 80a2808:	4b19      	ldr	r3, [pc, #100]	; (80a2870 <loop+0x130>)
 80a280a:	4a1a      	ldr	r2, [pc, #104]	; (80a2874 <loop+0x134>)
 80a280c:	6819      	ldr	r1, [r3, #0]
 80a280e:	6011      	str	r1, [r2, #0]
        tick_count = 0;
 80a2810:	2200      	movs	r2, #0
 80a2812:	6022      	str	r2, [r4, #0]
        frame_count = 0;
 80a2814:	601a      	str	r2, [r3, #0]
    delay(1);
 80a2816:	2001      	movs	r0, #1
}
 80a2818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(1);
 80a281c:	f003 b880 	b.w	80a5920 <delay>
        for (int i = 0; i < NUM_BINS; i++) {
 80a2820:	3201      	adds	r2, #1
 80a2822:	2a07      	cmp	r2, #7
 80a2824:	d193      	bne.n	80a274e <loop+0xe>
 80a2826:	e7a3      	b.n	80a2770 <loop+0x30>
            psu_shutdown();
 80a2828:	f7ff ff74 	bl	80a2714 <_Z12psu_shutdownv>
 80a282c:	e7c3      	b.n	80a27b6 <loop+0x76>
 80a282e:	f002 fdc9 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
 80a2832:	e7cd      	b.n	80a27d0 <loop+0x90>
 80a2834:	f002 fdc6 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
            last_server_update = millis();
 80a2838:	6020      	str	r0, [r4, #0]
            server.tick();
 80a283a:	4805      	ldr	r0, [pc, #20]	; (80a2850 <loop+0x110>)
 80a283c:	f001 fac0 	bl	80a3dc0 <_ZN6Server4tickEv>
 80a2840:	e7cf      	b.n	80a27e2 <loop+0xa2>
 80a2842:	bf00      	nop
 80a2844:	20000094 	.word	0x20000094
 80a2848:	200000d1 	.word	0x200000d1
 80a284c:	20000090 	.word	0x20000090
 80a2850:	20000ed4 	.word	0x20000ed4
 80a2854:	20000e70 	.word	0x20000e70
 80a2858:	20000e74 	.word	0x20000e74
 80a285c:	20000e84 	.word	0x20000e84
 80a2860:	20000e7c 	.word	0x20000e7c
 80a2864:	20000ef4 	.word	0x20000ef4
 80a2868:	20000e80 	.word	0x20000e80
 80a286c:	20000ef8 	.word	0x20000ef8
 80a2870:	20000e68 	.word	0x20000e68
 80a2874:	20000e6c 	.word	0x20000e6c

080a2878 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80a2878:	b570      	push	{r4, r5, r6, lr}
 80a287a:	4605      	mov	r5, r0
 80a287c:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 80a287e:	b16c      	cbz	r4, 80a289c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x24>
	{
	  _M_erase(_S_right(__x));
 80a2880:	68e1      	ldr	r1, [r4, #12]
 80a2882:	4628      	mov	r0, r5
 80a2884:	f7ff fff8 	bl	80a2878 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 80a2888:	68a6      	ldr	r6, [r4, #8]
   *
   *  @tparam _T1  Type of first object.
   *  @tparam _T2  Type of second object.
   */
  template<typename _T1, typename _T2>
    struct pair
 80a288a:	f104 0010 	add.w	r0, r4, #16
 80a288e:	f003 fcd0 	bl	80a6232 <_ZN6StringD1Ev>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a2892:	4620      	mov	r0, r4
 80a2894:	f7fd fc05 	bl	80a00a2 <_ZdlPv>
	  _M_drop_node(__x);
	  __x = __y;
 80a2898:	4634      	mov	r4, r6
      }
 80a289a:	e7f0      	b.n	80a287e <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x6>
	}
    }
 80a289c:	bd70      	pop	{r4, r5, r6, pc}

080a289e <_ZN4MDNSD1Ev>:
 80a289e:	b510      	push	{r4, lr}
 80a28a0:	4604      	mov	r4, r0
 80a28a2:	3040      	adds	r0, #64	; 0x40
 80a28a4:	f003 fcc5 	bl	80a6232 <_ZN6StringD1Ev>
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
 80a28a8:	6b60      	ldr	r0, [r4, #52]	; 0x34

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 80a28aa:	b108      	cbz	r0, 80a28b0 <_ZN4MDNSD1Ev+0x12>
 80a28ac:	f7fd fbf9 	bl	80a00a2 <_ZdlPv>
      { _M_erase(_M_begin()); }
 80a28b0:	f104 001c 	add.w	r0, r4, #28
 80a28b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80a28b6:	f7ff ffdf 	bl	80a2878 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 80a28ba:	4620      	mov	r0, r4
 80a28bc:	bd10      	pop	{r4, pc}
	...

080a28c0 <_GLOBAL__sub_I_SystemMode>:
        val_(val) {
 80a28c0:	2001      	movs	r0, #1
}
 80a28c2:	b538      	push	{r3, r4, r5, lr}
 80a28c4:	4b11      	ldr	r3, [pc, #68]	; (80a290c <_GLOBAL__sub_I_SystemMode+0x4c>)
              error_(SYSTEM_ERROR_NONE) {
 80a28c6:	4c12      	ldr	r4, [pc, #72]	; (80a2910 <_GLOBAL__sub_I_SystemMode+0x50>)
 80a28c8:	7018      	strb	r0, [r3, #0]
 80a28ca:	2300      	movs	r3, #0
SYSTEM_MODE(AUTOMATIC);
 80a28cc:	4d11      	ldr	r5, [pc, #68]	; (80a2914 <_GLOBAL__sub_I_SystemMode+0x54>)
 80a28ce:	6023      	str	r3, [r4, #0]
 80a28d0:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
 80a28d2:	71a3      	strb	r3, [r4, #6]
 80a28d4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80a28d8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a28da:	f002 ff0d 	bl	80a56f8 <set_system_mode>
 80a28de:	462a      	mov	r2, r5
 80a28e0:	490d      	ldr	r1, [pc, #52]	; (80a2918 <_GLOBAL__sub_I_SystemMode+0x58>)
 80a28e2:	4620      	mov	r0, r4
 80a28e4:	f004 ffea 	bl	80a78bc <__aeabi_atexit>
MDNS mdns;
 80a28e8:	4c0c      	ldr	r4, [pc, #48]	; (80a291c <_GLOBAL__sub_I_SystemMode+0x5c>)
Beat_Detection beat_detect;
 80a28ea:	480d      	ldr	r0, [pc, #52]	; (80a2920 <_GLOBAL__sub_I_SystemMode+0x60>)
 80a28ec:	f7ff fb6c 	bl	80a1fc8 <_ZN14Beat_DetectionC1Ev>
Server server;
 80a28f0:	480c      	ldr	r0, [pc, #48]	; (80a2924 <_GLOBAL__sub_I_SystemMode+0x64>)
 80a28f2:	f001 fa21 	bl	80a3d38 <_ZN6ServerC1Ev>
MDNS mdns;
 80a28f6:	4620      	mov	r0, r4
 80a28f8:	f7ff fce2 	bl	80a22c0 <_ZN4MDNSC1Ev>
 80a28fc:	462a      	mov	r2, r5
 80a28fe:	4620      	mov	r0, r4
}
 80a2900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
MDNS mdns;
 80a2904:	4908      	ldr	r1, [pc, #32]	; (80a2928 <_GLOBAL__sub_I_SystemMode+0x68>)
 80a2906:	f004 bfd9 	b.w	80a78bc <__aeabi_atexit>
 80a290a:	bf00      	nop
 80a290c:	200000d0 	.word	0x200000d0
 80a2910:	20000084 	.word	0x20000084
 80a2914:	2000006c 	.word	0x2000006c
 80a2918:	080a22af 	.word	0x080a22af
 80a291c:	20000e84 	.word	0x20000e84
 80a2920:	200000d4 	.word	0x200000d4
 80a2924:	20000ed4 	.word	0x20000ed4
 80a2928:	080a289f 	.word	0x080a289f

080a292c <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Core or Photon ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) : 
 80a292c:	b538      	push	{r3, r4, r5, lr}
 80a292e:	4604      	mov	r4, r0
  numLEDs(n), numBytes(n*3), pin(p), brightness(0), pixels(NULL), type(t), endTime(0)
 80a2930:	2500      	movs	r5, #0
 80a2932:	8001      	strh	r1, [r0, #0]
 80a2934:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a2938:	b288      	uxth	r0, r1
 80a293a:	e9c4 5502 	strd	r5, r5, [r4, #8]
 80a293e:	8060      	strh	r0, [r4, #2]
 80a2940:	7123      	strb	r3, [r4, #4]
 80a2942:	7162      	strb	r2, [r4, #5]
 80a2944:	71a5      	strb	r5, [r4, #6]
{
  if((pixels = (uint8_t *)malloc(numBytes))) {
 80a2946:	f002 ffab 	bl	80a58a0 <malloc>
 80a294a:	60a0      	str	r0, [r4, #8]
 80a294c:	b118      	cbz	r0, 80a2956 <_ZN17Adafruit_NeoPixelC1Ethh+0x2a>
    memset(pixels, 0, numBytes);
 80a294e:	4629      	mov	r1, r5
 80a2950:	8862      	ldrh	r2, [r4, #2]
 80a2952:	f009 fdbd 	bl	80ac4d0 <memset>
  }
}
 80a2956:	4620      	mov	r0, r4
 80a2958:	bd38      	pop	{r3, r4, r5, pc}

080a295a <_ZN17Adafruit_NeoPixel5beginEv>:
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if(pixels) free(pixels);
  pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::begin(void) {
 80a295a:	b510      	push	{r4, lr}
 80a295c:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a295e:	2101      	movs	r1, #1
 80a2960:	7940      	ldrb	r0, [r0, #5]
 80a2962:	f004 ff11 	bl	80a7788 <pinMode>
  digitalWrite(pin, LOW);
 80a2966:	7960      	ldrb	r0, [r4, #5]
 80a2968:	2100      	movs	r1, #0
}
 80a296a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(pin, LOW);
 80a296e:	f004 bf1c 	b.w	80a77aa <digitalWrite>
	...

080a2974 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a2974:	6883      	ldr	r3, [r0, #8]
 80a2976:	2b00      	cmp	r3, #0
 80a2978:	f000 856f 	beq.w	80a345a <_ZN17Adafruit_NeoPixel4showEv+0xae6>
void Adafruit_NeoPixel::show(void) {
 80a297c:	b5f0      	push	{r4, r5, r6, r7, lr}
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a297e:	7903      	ldrb	r3, [r0, #4]
 80a2980:	4604      	mov	r4, r0
 80a2982:	2b03      	cmp	r3, #3
void Adafruit_NeoPixel::show(void) {
 80a2984:	b087      	sub	sp, #28
  switch(type) {
 80a2986:	f000 8287 	beq.w	80a2e98 <_ZN17Adafruit_NeoPixel4showEv+0x524>
 80a298a:	2b04      	cmp	r3, #4
 80a298c:	bf14      	ite	ne
 80a298e:	2532      	movne	r5, #50	; 0x32
 80a2990:	f44f 75fa 	moveq.w	r5, #500	; 0x1f4
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a2994:	f002 fd0e 	bl	80a53b4 <HAL_Timer_Get_Micro_Seconds>
    case WS2811: // WS2811 = 50us reset pulse
    default:     // default = 50us reset pulse
      wait_time = 50L;
      break;
  }
  while((micros() - endTime) < wait_time);
 80a2998:	68e3      	ldr	r3, [r4, #12]
 80a299a:	1ac0      	subs	r0, r0, r3
 80a299c:	42a8      	cmp	r0, r5
 80a299e:	d3f9      	bcc.n	80a2994 <_ZN17Adafruit_NeoPixel4showEv+0x20>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a29a0:	b672      	cpsid	i
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit pixel color
    mask; // 8-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a29a2:	8863      	ldrh	r3, [r4, #2]
   *ptr = pixels,   // Pointer to next byte
    g,              // Current green byte value
    r,              // Current red byte value
    b;              // Current blue byte value

  if(type == WS2812B) { // same as WS2812, 800 KHz bitstream
 80a29a4:	7921      	ldrb	r1, [r4, #4]
  volatile uint16_t i = numBytes; // Output loop counter
 80a29a6:	f8ad 300a 	strh.w	r3, [sp, #10]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a29aa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  if(type == WS2812B) { // same as WS2812, 800 KHz bitstream
 80a29ae:	2902      	cmp	r1, #2
   *ptr = pixels,   // Pointer to next byte
 80a29b0:	68a5      	ldr	r5, [r4, #8]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a29b2:	b29b      	uxth	r3, r3
  if(type == WS2812B) { // same as WS2812, 800 KHz bitstream
 80a29b4:	f000 813a 	beq.w	80a2c2c <_ZN17Adafruit_NeoPixel4showEv+0x2b8>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2) { // WS2812B with DWT timer
 80a29b8:	2905      	cmp	r1, #5
 80a29ba:	f000 826f 	beq.w	80a2e9c <_ZN17Adafruit_NeoPixel4showEv+0x528>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a29be:	2900      	cmp	r1, #0
 80a29c0:	f000 82e5 	beq.w	80a2f8e <_ZN17Adafruit_NeoPixel4showEv+0x61a>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a29c4:	2903      	cmp	r1, #3
 80a29c6:	f000 8549 	beq.w	80a345c <_ZN17Adafruit_NeoPixel4showEv+0xae8>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a29ca:	2b00      	cmp	r3, #0
 80a29cc:	f000 8128 	beq.w	80a2c20 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a29d0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a29d4:	2600      	movs	r6, #0
 80a29d6:	4a18      	ldr	r2, [pc, #96]	; (80a2a38 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
      mask = 0x800000; // reset the mask
 80a29d8:	9104      	str	r1, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a29da:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      pinSet(pin, LOW); // LOW
 80a29de:	7960      	ldrb	r0, [r4, #5]
      i = i-3;      // decrement bytes remaining
 80a29e0:	3b03      	subs	r3, #3
 80a29e2:	b29b      	uxth	r3, r3
 80a29e4:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a29e8:	782b      	ldrb	r3, [r5, #0]
      pinSet(pin, LOW); // LOW
 80a29ea:	6817      	ldr	r7, [r2, #0]
      r = *ptr++;   // Next red byte value
 80a29ec:	b2db      	uxtb	r3, r3
 80a29ee:	f88d 3008 	strb.w	r3, [sp, #8]
      b = *ptr++;   // Next blue byte value
 80a29f2:	786b      	ldrb	r3, [r5, #1]
      pinSet(pin, LOW); // LOW
 80a29f4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
      b = *ptr++;   // Next blue byte value
 80a29f8:	b2db      	uxtb	r3, r3
 80a29fa:	f88d 3009 	strb.w	r3, [sp, #9]
      g = *ptr++;   // Next green byte value
 80a29fe:	78ab      	ldrb	r3, [r5, #2]
      pinSet(pin, LOW); // LOW
 80a2a00:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
      g = *ptr++;   // Next green byte value
 80a2a04:	b2db      	uxtb	r3, r3
 80a2a06:	f88d 3007 	strb.w	r3, [sp, #7]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a2a0a:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a2a0e:	f89d 3009 	ldrb.w	r3, [sp, #9]
      pinSet(pin, LOW); // LOW
 80a2a12:	f8bc c004 	ldrh.w	ip, [ip, #4]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a2a16:	021b      	lsls	r3, r3, #8
 80a2a18:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80a2a1c:	f89d e007 	ldrb.w	lr, [sp, #7]
      pinSet(pin, LOW); // LOW
 80a2a20:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a2a24:	ea43 030e 	orr.w	r3, r3, lr
 80a2a28:	9303      	str	r3, [sp, #12]
      g = *ptr++;   // Next green byte value
 80a2a2a:	3503      	adds	r5, #3
      j = 0;        // reset the 24-bit counter
 80a2a2c:	f88d 6006 	strb.w	r6, [sp, #6]
      pinSet(pin, LOW); // LOW
 80a2a30:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a2a34:	e07d      	b.n	80a2b32 <_ZN17Adafruit_NeoPixel4showEv+0x1be>
 80a2a36:	bf00      	nop
 80a2a38:	20000efc 	.word	0x20000efc
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a2a3c:	9b04      	ldr	r3, [sp, #16]
 80a2a3e:	085b      	lsrs	r3, r3, #1
 80a2a40:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2a42:	4600      	mov	r0, r0
 80a2a44:	bf00      	nop
 80a2a46:	bf00      	nop
 80a2a48:	bf00      	nop
 80a2a4a:	bf00      	nop
 80a2a4c:	bf00      	nop
 80a2a4e:	bf00      	nop
 80a2a50:	bf00      	nop
 80a2a52:	bf00      	nop
 80a2a54:	bf00      	nop
 80a2a56:	bf00      	nop
 80a2a58:	bf00      	nop
 80a2a5a:	bf00      	nop
 80a2a5c:	bf00      	nop
 80a2a5e:	bf00      	nop
 80a2a60:	bf00      	nop
 80a2a62:	bf00      	nop
 80a2a64:	bf00      	nop
 80a2a66:	bf00      	nop
 80a2a68:	bf00      	nop
 80a2a6a:	bf00      	nop
 80a2a6c:	bf00      	nop
 80a2a6e:	bf00      	nop
 80a2a70:	bf00      	nop
 80a2a72:	bf00      	nop
 80a2a74:	bf00      	nop
 80a2a76:	bf00      	nop
 80a2a78:	bf00      	nop
 80a2a7a:	bf00      	nop
 80a2a7c:	bf00      	nop
 80a2a7e:	bf00      	nop
 80a2a80:	bf00      	nop
 80a2a82:	bf00      	nop
 80a2a84:	bf00      	nop
 80a2a86:	bf00      	nop
 80a2a88:	bf00      	nop
 80a2a8a:	bf00      	nop
 80a2a8c:	bf00      	nop
 80a2a8e:	bf00      	nop
 80a2a90:	bf00      	nop
 80a2a92:	bf00      	nop
 80a2a94:	bf00      	nop
 80a2a96:	bf00      	nop
 80a2a98:	bf00      	nop
 80a2a9a:	bf00      	nop
 80a2a9c:	bf00      	nop
 80a2a9e:	bf00      	nop
 80a2aa0:	bf00      	nop
 80a2aa2:	bf00      	nop
 80a2aa4:	bf00      	nop
 80a2aa6:	bf00      	nop
 80a2aa8:	bf00      	nop
 80a2aaa:	bf00      	nop
 80a2aac:	bf00      	nop
 80a2aae:	bf00      	nop
 80a2ab0:	bf00      	nop
 80a2ab2:	bf00      	nop
 80a2ab4:	bf00      	nop
 80a2ab6:	bf00      	nop
 80a2ab8:	bf00      	nop
 80a2aba:	bf00      	nop
 80a2abc:	bf00      	nop
 80a2abe:	bf00      	nop
 80a2ac0:	bf00      	nop
 80a2ac2:	bf00      	nop
 80a2ac4:	bf00      	nop
 80a2ac6:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a2ac8:	7960      	ldrb	r0, [r4, #5]
 80a2aca:	6817      	ldr	r7, [r2, #0]
          j++;
 80a2acc:	f89d 3006 	ldrb.w	r3, [sp, #6]
          pinSet(pin, HIGH); // HIGH
 80a2ad0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a2ad4:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
 80a2ad8:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a2adc:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
          j++;
 80a2ae0:	3301      	adds	r3, #1
 80a2ae2:	b2db      	uxtb	r3, r3
 80a2ae4:	f88d 3006 	strb.w	r3, [sp, #6]
          pinSet(pin, HIGH); // HIGH
 80a2ae8:	f8a0 c018 	strh.w	ip, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2aec:	4600      	mov	r0, r0
 80a2aee:	bf00      	nop
 80a2af0:	bf00      	nop
 80a2af2:	bf00      	nop
 80a2af4:	bf00      	nop
 80a2af6:	bf00      	nop
 80a2af8:	bf00      	nop
 80a2afa:	bf00      	nop
 80a2afc:	bf00      	nop
 80a2afe:	bf00      	nop
 80a2b00:	bf00      	nop
 80a2b02:	bf00      	nop
 80a2b04:	bf00      	nop
 80a2b06:	bf00      	nop
 80a2b08:	bf00      	nop
 80a2b0a:	bf00      	nop
 80a2b0c:	bf00      	nop
 80a2b0e:	bf00      	nop
 80a2b10:	bf00      	nop
 80a2b12:	bf00      	nop
 80a2b14:	bf00      	nop
          if(j==24) break;
 80a2b16:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a2b1a:	2b18      	cmp	r3, #24
 80a2b1c:	d07a      	beq.n	80a2c14 <_ZN17Adafruit_NeoPixel4showEv+0x2a0>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a2b1e:	7963      	ldrb	r3, [r4, #5]
 80a2b20:	6810      	ldr	r0, [r2, #0]
 80a2b22:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2b26:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2b2a:	88bf      	ldrh	r7, [r7, #4]
 80a2b2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2b30:	835f      	strh	r7, [r3, #26]
        if (c & mask) { // if masked bit is high
 80a2b32:	9803      	ldr	r0, [sp, #12]
 80a2b34:	9b04      	ldr	r3, [sp, #16]
 80a2b36:	4218      	tst	r0, r3
 80a2b38:	d180      	bne.n	80a2a3c <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            ::: "r0", "cc", "memory");
 80a2b3a:	4600      	mov	r0, r0
 80a2b3c:	bf00      	nop
 80a2b3e:	bf00      	nop
 80a2b40:	bf00      	nop
 80a2b42:	bf00      	nop
 80a2b44:	bf00      	nop
 80a2b46:	bf00      	nop
 80a2b48:	bf00      	nop
 80a2b4a:	bf00      	nop
 80a2b4c:	bf00      	nop
 80a2b4e:	bf00      	nop
 80a2b50:	bf00      	nop
 80a2b52:	bf00      	nop
 80a2b54:	bf00      	nop
 80a2b56:	bf00      	nop
 80a2b58:	bf00      	nop
 80a2b5a:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a2b5c:	7963      	ldrb	r3, [r4, #5]
 80a2b5e:	6810      	ldr	r0, [r2, #0]
 80a2b60:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2b64:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2b68:	88bf      	ldrh	r7, [r7, #4]
 80a2b6a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2b6e:	831f      	strh	r7, [r3, #24]
          j++;
 80a2b70:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a2b74:	3301      	adds	r3, #1
 80a2b76:	b2db      	uxtb	r3, r3
 80a2b78:	f88d 3006 	strb.w	r3, [sp, #6]
          mask >>= 1; // Do this task during the long delay of this bit
 80a2b7c:	9b04      	ldr	r3, [sp, #16]
 80a2b7e:	085b      	lsrs	r3, r3, #1
 80a2b80:	9304      	str	r3, [sp, #16]
            ::: "r0", "cc", "memory");
 80a2b82:	4600      	mov	r0, r0
 80a2b84:	bf00      	nop
 80a2b86:	bf00      	nop
 80a2b88:	bf00      	nop
 80a2b8a:	bf00      	nop
 80a2b8c:	bf00      	nop
 80a2b8e:	bf00      	nop
 80a2b90:	bf00      	nop
 80a2b92:	bf00      	nop
 80a2b94:	bf00      	nop
 80a2b96:	bf00      	nop
 80a2b98:	bf00      	nop
 80a2b9a:	bf00      	nop
 80a2b9c:	bf00      	nop
 80a2b9e:	bf00      	nop
 80a2ba0:	bf00      	nop
 80a2ba2:	bf00      	nop
 80a2ba4:	bf00      	nop
 80a2ba6:	bf00      	nop
 80a2ba8:	bf00      	nop
 80a2baa:	bf00      	nop
 80a2bac:	bf00      	nop
 80a2bae:	bf00      	nop
 80a2bb0:	bf00      	nop
 80a2bb2:	bf00      	nop
 80a2bb4:	bf00      	nop
 80a2bb6:	bf00      	nop
 80a2bb8:	bf00      	nop
 80a2bba:	bf00      	nop
 80a2bbc:	bf00      	nop
 80a2bbe:	bf00      	nop
 80a2bc0:	bf00      	nop
 80a2bc2:	bf00      	nop
 80a2bc4:	bf00      	nop
 80a2bc6:	bf00      	nop
 80a2bc8:	bf00      	nop
 80a2bca:	bf00      	nop
 80a2bcc:	bf00      	nop
 80a2bce:	bf00      	nop
 80a2bd0:	bf00      	nop
 80a2bd2:	bf00      	nop
 80a2bd4:	bf00      	nop
 80a2bd6:	bf00      	nop
 80a2bd8:	bf00      	nop
 80a2bda:	bf00      	nop
 80a2bdc:	bf00      	nop
 80a2bde:	bf00      	nop
 80a2be0:	bf00      	nop
 80a2be2:	bf00      	nop
 80a2be4:	bf00      	nop
 80a2be6:	bf00      	nop
 80a2be8:	bf00      	nop
 80a2bea:	bf00      	nop
 80a2bec:	bf00      	nop
 80a2bee:	bf00      	nop
 80a2bf0:	bf00      	nop
 80a2bf2:	bf00      	nop
 80a2bf4:	bf00      	nop
 80a2bf6:	bf00      	nop
 80a2bf8:	bf00      	nop
 80a2bfa:	bf00      	nop
 80a2bfc:	bf00      	nop
 80a2bfe:	bf00      	nop
 80a2c00:	bf00      	nop
 80a2c02:	bf00      	nop
 80a2c04:	bf00      	nop
 80a2c06:	bf00      	nop
 80a2c08:	bf00      	nop
 80a2c0a:	bf00      	nop
          if(j==24) break;
 80a2c0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a2c10:	2b18      	cmp	r3, #24
 80a2c12:	d184      	bne.n	80a2b1e <_ZN17Adafruit_NeoPixel4showEv+0x1aa>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2c14:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a2c18:	b29b      	uxth	r3, r3
 80a2c1a:	2b00      	cmp	r3, #0
 80a2c1c:	f47f aedc 	bne.w	80a29d8 <_ZN17Adafruit_NeoPixel4showEv+0x64>
  __ASM volatile ("cpsie i");
 80a2c20:	b662      	cpsie	i
 80a2c22:	f002 fbc7 	bl	80a53b4 <HAL_Timer_Get_Micro_Seconds>
      }
    } // end while(i) ... no more pixels
  }

  __enable_irq();
  endTime = micros(); // Save EOD time for latch on next call
 80a2c26:	60e0      	str	r0, [r4, #12]
}
 80a2c28:	b007      	add	sp, #28
 80a2c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2c2c:	2b00      	cmp	r3, #0
 80a2c2e:	d0f7      	beq.n	80a2c20 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a2c30:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a2c34:	2600      	movs	r6, #0
 80a2c36:	4a13      	ldr	r2, [pc, #76]	; (80a2c84 <_ZN17Adafruit_NeoPixel4showEv+0x310>)
      mask = 0x800000; // reset the mask
 80a2c38:	9104      	str	r1, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a2c3a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a2c3e:	3503      	adds	r5, #3
      i = i-3;      // decrement bytes remaining
 80a2c40:	3b03      	subs	r3, #3
 80a2c42:	b29b      	uxth	r3, r3
 80a2c44:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a2c48:	f815 3c03 	ldrb.w	r3, [r5, #-3]
 80a2c4c:	b2db      	uxtb	r3, r3
 80a2c4e:	f88d 3007 	strb.w	r3, [sp, #7]
      r = *ptr++;   // Next red byte value
 80a2c52:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 80a2c56:	b2db      	uxtb	r3, r3
 80a2c58:	f88d 3008 	strb.w	r3, [sp, #8]
      b = *ptr++;   // Next blue byte value
 80a2c5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80a2c60:	b2db      	uxtb	r3, r3
 80a2c62:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a2c66:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a2c6a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80a2c6e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a2c72:	021b      	lsls	r3, r3, #8
 80a2c74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a2c78:	4303      	orrs	r3, r0
 80a2c7a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a2c7c:	f88d 6006 	strb.w	r6, [sp, #6]
 80a2c80:	e080      	b.n	80a2d84 <_ZN17Adafruit_NeoPixel4showEv+0x410>
 80a2c82:	bf00      	nop
 80a2c84:	20000efc 	.word	0x20000efc
            ::: "r0", "cc", "memory");
 80a2c88:	4600      	mov	r0, r0
 80a2c8a:	bf00      	nop
 80a2c8c:	bf00      	nop
 80a2c8e:	bf00      	nop
 80a2c90:	bf00      	nop
 80a2c92:	bf00      	nop
 80a2c94:	bf00      	nop
 80a2c96:	bf00      	nop
 80a2c98:	bf00      	nop
 80a2c9a:	bf00      	nop
 80a2c9c:	bf00      	nop
 80a2c9e:	bf00      	nop
 80a2ca0:	bf00      	nop
 80a2ca2:	bf00      	nop
 80a2ca4:	bf00      	nop
 80a2ca6:	bf00      	nop
 80a2ca8:	bf00      	nop
 80a2caa:	bf00      	nop
 80a2cac:	bf00      	nop
 80a2cae:	bf00      	nop
 80a2cb0:	bf00      	nop
 80a2cb2:	bf00      	nop
 80a2cb4:	bf00      	nop
 80a2cb6:	bf00      	nop
 80a2cb8:	bf00      	nop
 80a2cba:	bf00      	nop
 80a2cbc:	bf00      	nop
 80a2cbe:	bf00      	nop
 80a2cc0:	bf00      	nop
 80a2cc2:	bf00      	nop
 80a2cc4:	bf00      	nop
 80a2cc6:	bf00      	nop
 80a2cc8:	bf00      	nop
 80a2cca:	bf00      	nop
 80a2ccc:	bf00      	nop
 80a2cce:	bf00      	nop
 80a2cd0:	bf00      	nop
 80a2cd2:	bf00      	nop
 80a2cd4:	bf00      	nop
 80a2cd6:	bf00      	nop
 80a2cd8:	bf00      	nop
 80a2cda:	bf00      	nop
 80a2cdc:	bf00      	nop
 80a2cde:	bf00      	nop
 80a2ce0:	bf00      	nop
 80a2ce2:	bf00      	nop
 80a2ce4:	bf00      	nop
 80a2ce6:	bf00      	nop
 80a2ce8:	bf00      	nop
 80a2cea:	bf00      	nop
 80a2cec:	bf00      	nop
 80a2cee:	bf00      	nop
 80a2cf0:	bf00      	nop
 80a2cf2:	bf00      	nop
 80a2cf4:	bf00      	nop
 80a2cf6:	bf00      	nop
 80a2cf8:	bf00      	nop
 80a2cfa:	bf00      	nop
 80a2cfc:	bf00      	nop
 80a2cfe:	bf00      	nop
 80a2d00:	bf00      	nop
 80a2d02:	bf00      	nop
 80a2d04:	bf00      	nop
 80a2d06:	bf00      	nop
 80a2d08:	bf00      	nop
 80a2d0a:	bf00      	nop
 80a2d0c:	bf00      	nop
 80a2d0e:	bf00      	nop
 80a2d10:	bf00      	nop
 80a2d12:	bf00      	nop
 80a2d14:	bf00      	nop
 80a2d16:	bf00      	nop
 80a2d18:	bf00      	nop
 80a2d1a:	bf00      	nop
 80a2d1c:	bf00      	nop
 80a2d1e:	bf00      	nop
 80a2d20:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a2d22:	7963      	ldrb	r3, [r4, #5]
 80a2d24:	6810      	ldr	r0, [r2, #0]
 80a2d26:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2d2a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2d2e:	88bf      	ldrh	r7, [r7, #4]
 80a2d30:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2d34:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a2d36:	4600      	mov	r0, r0
 80a2d38:	bf00      	nop
 80a2d3a:	bf00      	nop
 80a2d3c:	bf00      	nop
 80a2d3e:	bf00      	nop
 80a2d40:	bf00      	nop
 80a2d42:	bf00      	nop
 80a2d44:	bf00      	nop
 80a2d46:	bf00      	nop
 80a2d48:	bf00      	nop
 80a2d4a:	bf00      	nop
 80a2d4c:	bf00      	nop
 80a2d4e:	bf00      	nop
 80a2d50:	bf00      	nop
 80a2d52:	bf00      	nop
 80a2d54:	bf00      	nop
 80a2d56:	bf00      	nop
 80a2d58:	bf00      	nop
 80a2d5a:	bf00      	nop
 80a2d5c:	bf00      	nop
 80a2d5e:	bf00      	nop
 80a2d60:	bf00      	nop
 80a2d62:	bf00      	nop
 80a2d64:	bf00      	nop
 80a2d66:	bf00      	nop
 80a2d68:	bf00      	nop
 80a2d6a:	bf00      	nop
        mask >>= 1;
 80a2d6c:	9b04      	ldr	r3, [sp, #16]
 80a2d6e:	085b      	lsrs	r3, r3, #1
 80a2d70:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a2d72:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a2d76:	3301      	adds	r3, #1
 80a2d78:	b2db      	uxtb	r3, r3
 80a2d7a:	2b17      	cmp	r3, #23
 80a2d7c:	f88d 3006 	strb.w	r3, [sp, #6]
 80a2d80:	f200 8083 	bhi.w	80a2e8a <_ZN17Adafruit_NeoPixel4showEv+0x516>
        pinSet(pin, HIGH); // HIGH
 80a2d84:	7963      	ldrb	r3, [r4, #5]
 80a2d86:	6810      	ldr	r0, [r2, #0]
 80a2d88:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2d8c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2d90:	88bf      	ldrh	r7, [r7, #4]
 80a2d92:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2d96:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a2d98:	9803      	ldr	r0, [sp, #12]
 80a2d9a:	9b04      	ldr	r3, [sp, #16]
 80a2d9c:	4218      	tst	r0, r3
 80a2d9e:	f47f af73 	bne.w	80a2c88 <_ZN17Adafruit_NeoPixel4showEv+0x314>
            ::: "r0", "cc", "memory");
 80a2da2:	4600      	mov	r0, r0
 80a2da4:	bf00      	nop
 80a2da6:	bf00      	nop
 80a2da8:	bf00      	nop
 80a2daa:	bf00      	nop
 80a2dac:	bf00      	nop
 80a2dae:	bf00      	nop
 80a2db0:	bf00      	nop
 80a2db2:	bf00      	nop
 80a2db4:	bf00      	nop
 80a2db6:	bf00      	nop
 80a2db8:	bf00      	nop
 80a2dba:	bf00      	nop
 80a2dbc:	bf00      	nop
 80a2dbe:	bf00      	nop
 80a2dc0:	bf00      	nop
 80a2dc2:	bf00      	nop
 80a2dc4:	bf00      	nop
 80a2dc6:	bf00      	nop
 80a2dc8:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a2dca:	7963      	ldrb	r3, [r4, #5]
 80a2dcc:	6810      	ldr	r0, [r2, #0]
 80a2dce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2dd2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2dd6:	88bf      	ldrh	r7, [r7, #4]
 80a2dd8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2ddc:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a2dde:	4600      	mov	r0, r0
 80a2de0:	bf00      	nop
 80a2de2:	bf00      	nop
 80a2de4:	bf00      	nop
 80a2de6:	bf00      	nop
 80a2de8:	bf00      	nop
 80a2dea:	bf00      	nop
 80a2dec:	bf00      	nop
 80a2dee:	bf00      	nop
 80a2df0:	bf00      	nop
 80a2df2:	bf00      	nop
 80a2df4:	bf00      	nop
 80a2df6:	bf00      	nop
 80a2df8:	bf00      	nop
 80a2dfa:	bf00      	nop
 80a2dfc:	bf00      	nop
 80a2dfe:	bf00      	nop
 80a2e00:	bf00      	nop
 80a2e02:	bf00      	nop
 80a2e04:	bf00      	nop
 80a2e06:	bf00      	nop
 80a2e08:	bf00      	nop
 80a2e0a:	bf00      	nop
 80a2e0c:	bf00      	nop
 80a2e0e:	bf00      	nop
 80a2e10:	bf00      	nop
 80a2e12:	bf00      	nop
 80a2e14:	bf00      	nop
 80a2e16:	bf00      	nop
 80a2e18:	bf00      	nop
 80a2e1a:	bf00      	nop
 80a2e1c:	bf00      	nop
 80a2e1e:	bf00      	nop
 80a2e20:	bf00      	nop
 80a2e22:	bf00      	nop
 80a2e24:	bf00      	nop
 80a2e26:	bf00      	nop
 80a2e28:	bf00      	nop
 80a2e2a:	bf00      	nop
 80a2e2c:	bf00      	nop
 80a2e2e:	bf00      	nop
 80a2e30:	bf00      	nop
 80a2e32:	bf00      	nop
 80a2e34:	bf00      	nop
 80a2e36:	bf00      	nop
 80a2e38:	bf00      	nop
 80a2e3a:	bf00      	nop
 80a2e3c:	bf00      	nop
 80a2e3e:	bf00      	nop
 80a2e40:	bf00      	nop
 80a2e42:	bf00      	nop
 80a2e44:	bf00      	nop
 80a2e46:	bf00      	nop
 80a2e48:	bf00      	nop
 80a2e4a:	bf00      	nop
 80a2e4c:	bf00      	nop
 80a2e4e:	bf00      	nop
 80a2e50:	bf00      	nop
 80a2e52:	bf00      	nop
 80a2e54:	bf00      	nop
 80a2e56:	bf00      	nop
 80a2e58:	bf00      	nop
 80a2e5a:	bf00      	nop
 80a2e5c:	bf00      	nop
 80a2e5e:	bf00      	nop
 80a2e60:	bf00      	nop
 80a2e62:	bf00      	nop
 80a2e64:	bf00      	nop
 80a2e66:	bf00      	nop
 80a2e68:	bf00      	nop
 80a2e6a:	bf00      	nop
 80a2e6c:	bf00      	nop
 80a2e6e:	bf00      	nop
 80a2e70:	bf00      	nop
 80a2e72:	bf00      	nop
 80a2e74:	bf00      	nop
 80a2e76:	bf00      	nop
 80a2e78:	bf00      	nop
 80a2e7a:	bf00      	nop
 80a2e7c:	bf00      	nop
 80a2e7e:	bf00      	nop
 80a2e80:	bf00      	nop
 80a2e82:	bf00      	nop
 80a2e84:	bf00      	nop
 80a2e86:	bf00      	nop
 80a2e88:	e770      	b.n	80a2d6c <_ZN17Adafruit_NeoPixel4showEv+0x3f8>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2e8a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a2e8e:	b29b      	uxth	r3, r3
 80a2e90:	2b00      	cmp	r3, #0
 80a2e92:	f47f aed1 	bne.w	80a2c38 <_ZN17Adafruit_NeoPixel4showEv+0x2c4>
 80a2e96:	e6c3      	b.n	80a2c20 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      wait_time = 24L;
 80a2e98:	2518      	movs	r5, #24
 80a2e9a:	e57b      	b.n	80a2994 <_ZN17Adafruit_NeoPixel4showEv+0x20>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2e9c:	2b00      	cmp	r3, #0
 80a2e9e:	f43f aebf 	beq.w	80a2c20 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a2ea2:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a2ea6:	2600      	movs	r6, #0
        pinSet(pin, HIGH); // HIGH
 80a2ea8:	4b4e      	ldr	r3, [pc, #312]	; (80a2fe4 <_ZN17Adafruit_NeoPixel4showEv+0x670>)
 80a2eaa:	6819      	ldr	r1, [r3, #0]
        cyc = DWT->CYCCNT;
 80a2eac:	4b4e      	ldr	r3, [pc, #312]	; (80a2fe8 <_ZN17Adafruit_NeoPixel4showEv+0x674>)
      mask = 0x800000; // reset the mask
 80a2eae:	f8cd e010 	str.w	lr, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a2eb2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a2eb6:	3503      	adds	r5, #3
      i = i-3;      // decrement bytes remaining
 80a2eb8:	3a03      	subs	r2, #3
 80a2eba:	b292      	uxth	r2, r2
 80a2ebc:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a2ec0:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 80a2ec4:	b2d2      	uxtb	r2, r2
 80a2ec6:	f88d 2007 	strb.w	r2, [sp, #7]
      r = *ptr++;   // Next red byte value
 80a2eca:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80a2ece:	b2d2      	uxtb	r2, r2
 80a2ed0:	f88d 2008 	strb.w	r2, [sp, #8]
      b = *ptr++;   // Next blue byte value
 80a2ed4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80a2ed8:	b2d2      	uxtb	r2, r2
 80a2eda:	f88d 2009 	strb.w	r2, [sp, #9]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a2ede:	f89d c007 	ldrb.w	ip, [sp, #7]
 80a2ee2:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80a2ee6:	f89d 7009 	ldrb.w	r7, [sp, #9]
 80a2eea:	0212      	lsls	r2, r2, #8
 80a2eec:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80a2ef0:	433a      	orrs	r2, r7
 80a2ef2:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a2ef4:	f88d 6006 	strb.w	r6, [sp, #6]
        pinSet(pin, HIGH); // HIGH
 80a2ef8:	7962      	ldrb	r2, [r4, #5]
        cyc = DWT->CYCCNT;
 80a2efa:	6858      	ldr	r0, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a2efc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a2f00:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 80a2f04:	88bf      	ldrh	r7, [r7, #4]
 80a2f06:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
        cyc = DWT->CYCCNT;
 80a2f0a:	9005      	str	r0, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a2f0c:	8317      	strh	r7, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a2f0e:	9f03      	ldr	r7, [sp, #12]
 80a2f10:	9a04      	ldr	r2, [sp, #16]
 80a2f12:	4217      	tst	r7, r2
 80a2f14:	d025      	beq.n	80a2f62 <_ZN17Adafruit_NeoPixel4showEv+0x5ee>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a2f16:	685a      	ldr	r2, [r3, #4]
 80a2f18:	9f05      	ldr	r7, [sp, #20]
 80a2f1a:	1bd2      	subs	r2, r2, r7
 80a2f1c:	2a4f      	cmp	r2, #79	; 0x4f
 80a2f1e:	d9fa      	bls.n	80a2f16 <_ZN17Adafruit_NeoPixel4showEv+0x5a2>
          pinSet(pin, LOW);
 80a2f20:	7962      	ldrb	r2, [r4, #5]
 80a2f22:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a2f26:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 80a2f2a:	88bf      	ldrh	r7, [r7, #4]
 80a2f2c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a2f30:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a2f32:	685a      	ldr	r2, [r3, #4]
 80a2f34:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a2f36:	685a      	ldr	r2, [r3, #4]
 80a2f38:	9f05      	ldr	r7, [sp, #20]
 80a2f3a:	1bd2      	subs	r2, r2, r7
 80a2f3c:	2a07      	cmp	r2, #7
 80a2f3e:	d9fa      	bls.n	80a2f36 <_ZN17Adafruit_NeoPixel4showEv+0x5c2>
        mask >>= 1;
 80a2f40:	9a04      	ldr	r2, [sp, #16]
 80a2f42:	0852      	lsrs	r2, r2, #1
 80a2f44:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a2f46:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a2f4a:	3201      	adds	r2, #1
 80a2f4c:	b2d2      	uxtb	r2, r2
 80a2f4e:	2a17      	cmp	r2, #23
 80a2f50:	f88d 2006 	strb.w	r2, [sp, #6]
 80a2f54:	d9d0      	bls.n	80a2ef8 <_ZN17Adafruit_NeoPixel4showEv+0x584>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2f56:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a2f5a:	b292      	uxth	r2, r2
 80a2f5c:	2a00      	cmp	r2, #0
 80a2f5e:	d1a6      	bne.n	80a2eae <_ZN17Adafruit_NeoPixel4showEv+0x53a>
 80a2f60:	e65e      	b.n	80a2c20 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a2f62:	685a      	ldr	r2, [r3, #4]
 80a2f64:	9f05      	ldr	r7, [sp, #20]
 80a2f66:	1bd2      	subs	r2, r2, r7
 80a2f68:	2a18      	cmp	r2, #24
 80a2f6a:	d9fa      	bls.n	80a2f62 <_ZN17Adafruit_NeoPixel4showEv+0x5ee>
          pinSet(pin, LOW);
 80a2f6c:	7962      	ldrb	r2, [r4, #5]
 80a2f6e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a2f72:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 80a2f76:	88bf      	ldrh	r7, [r7, #4]
 80a2f78:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a2f7c:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a2f7e:	685a      	ldr	r2, [r3, #4]
 80a2f80:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a2f82:	685a      	ldr	r2, [r3, #4]
 80a2f84:	9f05      	ldr	r7, [sp, #20]
 80a2f86:	1bd2      	subs	r2, r2, r7
 80a2f88:	2a45      	cmp	r2, #69	; 0x45
 80a2f8a:	d9fa      	bls.n	80a2f82 <_ZN17Adafruit_NeoPixel4showEv+0x60e>
 80a2f8c:	e7d8      	b.n	80a2f40 <_ZN17Adafruit_NeoPixel4showEv+0x5cc>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2f8e:	2b00      	cmp	r3, #0
 80a2f90:	f43f ae46 	beq.w	80a2c20 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a2f94:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 80a2f98:	4a12      	ldr	r2, [pc, #72]	; (80a2fe4 <_ZN17Adafruit_NeoPixel4showEv+0x670>)
 80a2f9a:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a2f9c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a2fa0:	3503      	adds	r5, #3
      i = i-3;      // decrement bytes remaining
 80a2fa2:	3b03      	subs	r3, #3
 80a2fa4:	b29b      	uxth	r3, r3
 80a2fa6:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a2faa:	f815 3c03 	ldrb.w	r3, [r5, #-3]
 80a2fae:	b2db      	uxtb	r3, r3
 80a2fb0:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a2fb4:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 80a2fb8:	b2db      	uxtb	r3, r3
 80a2fba:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a2fbe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80a2fc2:	b2db      	uxtb	r3, r3
 80a2fc4:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a2fc8:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a2fcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a2fd0:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a2fd4:	021b      	lsls	r3, r3, #8
 80a2fd6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a2fda:	4303      	orrs	r3, r0
 80a2fdc:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a2fde:	f88d 1006 	strb.w	r1, [sp, #6]
 80a2fe2:	e11a      	b.n	80a321a <_ZN17Adafruit_NeoPixel4showEv+0x8a6>
 80a2fe4:	20000efc 	.word	0x20000efc
 80a2fe8:	e0001000 	.word	0xe0001000
            ::: "r0", "cc", "memory");
 80a2fec:	4600      	mov	r0, r0
 80a2fee:	bf00      	nop
 80a2ff0:	bf00      	nop
 80a2ff2:	bf00      	nop
 80a2ff4:	bf00      	nop
 80a2ff6:	bf00      	nop
 80a2ff8:	bf00      	nop
 80a2ffa:	bf00      	nop
 80a2ffc:	bf00      	nop
 80a2ffe:	bf00      	nop
 80a3000:	bf00      	nop
 80a3002:	bf00      	nop
 80a3004:	bf00      	nop
 80a3006:	bf00      	nop
 80a3008:	bf00      	nop
 80a300a:	bf00      	nop
 80a300c:	bf00      	nop
 80a300e:	bf00      	nop
 80a3010:	bf00      	nop
 80a3012:	bf00      	nop
 80a3014:	bf00      	nop
 80a3016:	bf00      	nop
 80a3018:	bf00      	nop
 80a301a:	bf00      	nop
 80a301c:	bf00      	nop
 80a301e:	bf00      	nop
 80a3020:	bf00      	nop
 80a3022:	bf00      	nop
 80a3024:	bf00      	nop
 80a3026:	bf00      	nop
 80a3028:	bf00      	nop
 80a302a:	bf00      	nop
 80a302c:	bf00      	nop
 80a302e:	bf00      	nop
 80a3030:	bf00      	nop
 80a3032:	bf00      	nop
 80a3034:	bf00      	nop
 80a3036:	bf00      	nop
 80a3038:	bf00      	nop
 80a303a:	bf00      	nop
 80a303c:	bf00      	nop
 80a303e:	bf00      	nop
 80a3040:	bf00      	nop
 80a3042:	bf00      	nop
 80a3044:	bf00      	nop
 80a3046:	bf00      	nop
 80a3048:	bf00      	nop
 80a304a:	bf00      	nop
 80a304c:	bf00      	nop
 80a304e:	bf00      	nop
 80a3050:	bf00      	nop
 80a3052:	bf00      	nop
 80a3054:	bf00      	nop
 80a3056:	bf00      	nop
 80a3058:	bf00      	nop
 80a305a:	bf00      	nop
 80a305c:	bf00      	nop
 80a305e:	bf00      	nop
 80a3060:	bf00      	nop
 80a3062:	bf00      	nop
 80a3064:	bf00      	nop
 80a3066:	bf00      	nop
 80a3068:	bf00      	nop
 80a306a:	bf00      	nop
 80a306c:	bf00      	nop
 80a306e:	bf00      	nop
 80a3070:	bf00      	nop
 80a3072:	bf00      	nop
 80a3074:	bf00      	nop
 80a3076:	bf00      	nop
 80a3078:	bf00      	nop
 80a307a:	bf00      	nop
 80a307c:	bf00      	nop
 80a307e:	bf00      	nop
 80a3080:	bf00      	nop
 80a3082:	bf00      	nop
 80a3084:	bf00      	nop
 80a3086:	bf00      	nop
 80a3088:	bf00      	nop
 80a308a:	bf00      	nop
 80a308c:	bf00      	nop
 80a308e:	bf00      	nop
 80a3090:	bf00      	nop
 80a3092:	bf00      	nop
 80a3094:	bf00      	nop
 80a3096:	bf00      	nop
 80a3098:	bf00      	nop
 80a309a:	bf00      	nop
 80a309c:	bf00      	nop
 80a309e:	bf00      	nop
 80a30a0:	bf00      	nop
 80a30a2:	bf00      	nop
 80a30a4:	bf00      	nop
 80a30a6:	bf00      	nop
 80a30a8:	bf00      	nop
 80a30aa:	bf00      	nop
 80a30ac:	bf00      	nop
 80a30ae:	bf00      	nop
 80a30b0:	bf00      	nop
 80a30b2:	bf00      	nop
 80a30b4:	bf00      	nop
 80a30b6:	bf00      	nop
 80a30b8:	bf00      	nop
 80a30ba:	bf00      	nop
 80a30bc:	bf00      	nop
 80a30be:	bf00      	nop
 80a30c0:	bf00      	nop
 80a30c2:	bf00      	nop
 80a30c4:	bf00      	nop
 80a30c6:	bf00      	nop
 80a30c8:	bf00      	nop
 80a30ca:	bf00      	nop
 80a30cc:	bf00      	nop
 80a30ce:	bf00      	nop
 80a30d0:	bf00      	nop
 80a30d2:	bf00      	nop
 80a30d4:	bf00      	nop
 80a30d6:	bf00      	nop
 80a30d8:	bf00      	nop
 80a30da:	bf00      	nop
 80a30dc:	bf00      	nop
 80a30de:	bf00      	nop
 80a30e0:	bf00      	nop
 80a30e2:	bf00      	nop
 80a30e4:	bf00      	nop
 80a30e6:	bf00      	nop
 80a30e8:	bf00      	nop
 80a30ea:	bf00      	nop
 80a30ec:	bf00      	nop
 80a30ee:	bf00      	nop
 80a30f0:	bf00      	nop
 80a30f2:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a30f4:	7963      	ldrb	r3, [r4, #5]
 80a30f6:	6810      	ldr	r0, [r2, #0]
 80a30f8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a30fc:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a3100:	88bf      	ldrh	r7, [r7, #4]
 80a3102:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3106:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a3108:	4600      	mov	r0, r0
 80a310a:	bf00      	nop
 80a310c:	bf00      	nop
 80a310e:	bf00      	nop
 80a3110:	bf00      	nop
 80a3112:	bf00      	nop
 80a3114:	bf00      	nop
 80a3116:	bf00      	nop
 80a3118:	bf00      	nop
 80a311a:	bf00      	nop
 80a311c:	bf00      	nop
 80a311e:	bf00      	nop
 80a3120:	bf00      	nop
 80a3122:	bf00      	nop
 80a3124:	bf00      	nop
 80a3126:	bf00      	nop
 80a3128:	bf00      	nop
 80a312a:	bf00      	nop
 80a312c:	bf00      	nop
 80a312e:	bf00      	nop
 80a3130:	bf00      	nop
 80a3132:	bf00      	nop
 80a3134:	bf00      	nop
 80a3136:	bf00      	nop
 80a3138:	bf00      	nop
 80a313a:	bf00      	nop
 80a313c:	bf00      	nop
 80a313e:	bf00      	nop
 80a3140:	bf00      	nop
 80a3142:	bf00      	nop
 80a3144:	bf00      	nop
 80a3146:	bf00      	nop
 80a3148:	bf00      	nop
 80a314a:	bf00      	nop
 80a314c:	bf00      	nop
 80a314e:	bf00      	nop
 80a3150:	bf00      	nop
 80a3152:	bf00      	nop
 80a3154:	bf00      	nop
 80a3156:	bf00      	nop
 80a3158:	bf00      	nop
 80a315a:	bf00      	nop
 80a315c:	bf00      	nop
 80a315e:	bf00      	nop
 80a3160:	bf00      	nop
 80a3162:	bf00      	nop
 80a3164:	bf00      	nop
 80a3166:	bf00      	nop
 80a3168:	bf00      	nop
 80a316a:	bf00      	nop
 80a316c:	bf00      	nop
 80a316e:	bf00      	nop
 80a3170:	bf00      	nop
 80a3172:	bf00      	nop
 80a3174:	bf00      	nop
 80a3176:	bf00      	nop
 80a3178:	bf00      	nop
 80a317a:	bf00      	nop
 80a317c:	bf00      	nop
 80a317e:	bf00      	nop
 80a3180:	bf00      	nop
 80a3182:	bf00      	nop
 80a3184:	bf00      	nop
 80a3186:	bf00      	nop
 80a3188:	bf00      	nop
 80a318a:	bf00      	nop
 80a318c:	bf00      	nop
 80a318e:	bf00      	nop
 80a3190:	bf00      	nop
 80a3192:	bf00      	nop
 80a3194:	bf00      	nop
 80a3196:	bf00      	nop
 80a3198:	bf00      	nop
 80a319a:	bf00      	nop
 80a319c:	bf00      	nop
 80a319e:	bf00      	nop
 80a31a0:	bf00      	nop
 80a31a2:	bf00      	nop
 80a31a4:	bf00      	nop
 80a31a6:	bf00      	nop
 80a31a8:	bf00      	nop
 80a31aa:	bf00      	nop
 80a31ac:	bf00      	nop
 80a31ae:	bf00      	nop
 80a31b0:	bf00      	nop
 80a31b2:	bf00      	nop
 80a31b4:	bf00      	nop
 80a31b6:	bf00      	nop
 80a31b8:	bf00      	nop
 80a31ba:	bf00      	nop
 80a31bc:	bf00      	nop
 80a31be:	bf00      	nop
 80a31c0:	bf00      	nop
 80a31c2:	bf00      	nop
 80a31c4:	bf00      	nop
 80a31c6:	bf00      	nop
 80a31c8:	bf00      	nop
 80a31ca:	bf00      	nop
 80a31cc:	bf00      	nop
 80a31ce:	bf00      	nop
 80a31d0:	bf00      	nop
 80a31d2:	bf00      	nop
 80a31d4:	bf00      	nop
 80a31d6:	bf00      	nop
 80a31d8:	bf00      	nop
 80a31da:	bf00      	nop
 80a31dc:	bf00      	nop
 80a31de:	bf00      	nop
 80a31e0:	bf00      	nop
 80a31e2:	bf00      	nop
 80a31e4:	bf00      	nop
 80a31e6:	bf00      	nop
 80a31e8:	bf00      	nop
 80a31ea:	bf00      	nop
 80a31ec:	bf00      	nop
 80a31ee:	bf00      	nop
 80a31f0:	bf00      	nop
 80a31f2:	bf00      	nop
 80a31f4:	bf00      	nop
 80a31f6:	bf00      	nop
 80a31f8:	bf00      	nop
 80a31fa:	bf00      	nop
 80a31fc:	bf00      	nop
 80a31fe:	bf00      	nop
 80a3200:	bf00      	nop
        mask >>= 1;
 80a3202:	9b04      	ldr	r3, [sp, #16]
 80a3204:	085b      	lsrs	r3, r3, #1
 80a3206:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a3208:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a320c:	3301      	adds	r3, #1
 80a320e:	b2db      	uxtb	r3, r3
 80a3210:	2b17      	cmp	r3, #23
 80a3212:	f88d 3006 	strb.w	r3, [sp, #6]
 80a3216:	f200 8118 	bhi.w	80a344a <_ZN17Adafruit_NeoPixel4showEv+0xad6>
        pinSet(pin, HIGH); // HIGH
 80a321a:	7963      	ldrb	r3, [r4, #5]
 80a321c:	6810      	ldr	r0, [r2, #0]
 80a321e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3222:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a3226:	88bf      	ldrh	r7, [r7, #4]
 80a3228:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a322c:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a322e:	9803      	ldr	r0, [sp, #12]
 80a3230:	9b04      	ldr	r3, [sp, #16]
 80a3232:	4218      	tst	r0, r3
 80a3234:	f47f aeda 	bne.w	80a2fec <_ZN17Adafruit_NeoPixel4showEv+0x678>
            ::: "r0", "cc", "memory");
 80a3238:	4600      	mov	r0, r0
 80a323a:	bf00      	nop
 80a323c:	bf00      	nop
 80a323e:	bf00      	nop
 80a3240:	bf00      	nop
 80a3242:	bf00      	nop
 80a3244:	bf00      	nop
 80a3246:	bf00      	nop
 80a3248:	bf00      	nop
 80a324a:	bf00      	nop
 80a324c:	bf00      	nop
 80a324e:	bf00      	nop
 80a3250:	bf00      	nop
 80a3252:	bf00      	nop
 80a3254:	bf00      	nop
 80a3256:	bf00      	nop
 80a3258:	bf00      	nop
 80a325a:	bf00      	nop
 80a325c:	bf00      	nop
 80a325e:	bf00      	nop
 80a3260:	bf00      	nop
 80a3262:	bf00      	nop
 80a3264:	bf00      	nop
 80a3266:	bf00      	nop
 80a3268:	bf00      	nop
 80a326a:	bf00      	nop
 80a326c:	bf00      	nop
 80a326e:	bf00      	nop
 80a3270:	bf00      	nop
 80a3272:	bf00      	nop
 80a3274:	bf00      	nop
 80a3276:	bf00      	nop
 80a3278:	bf00      	nop
 80a327a:	bf00      	nop
 80a327c:	bf00      	nop
 80a327e:	bf00      	nop
 80a3280:	bf00      	nop
 80a3282:	bf00      	nop
 80a3284:	bf00      	nop
 80a3286:	bf00      	nop
 80a3288:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a328a:	7963      	ldrb	r3, [r4, #5]
 80a328c:	6810      	ldr	r0, [r2, #0]
 80a328e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3292:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a3296:	88bf      	ldrh	r7, [r7, #4]
 80a3298:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a329c:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a329e:	4600      	mov	r0, r0
 80a32a0:	bf00      	nop
 80a32a2:	bf00      	nop
 80a32a4:	bf00      	nop
 80a32a6:	bf00      	nop
 80a32a8:	bf00      	nop
 80a32aa:	bf00      	nop
 80a32ac:	bf00      	nop
 80a32ae:	bf00      	nop
 80a32b0:	bf00      	nop
 80a32b2:	bf00      	nop
 80a32b4:	bf00      	nop
 80a32b6:	bf00      	nop
 80a32b8:	bf00      	nop
 80a32ba:	bf00      	nop
 80a32bc:	bf00      	nop
 80a32be:	bf00      	nop
 80a32c0:	bf00      	nop
 80a32c2:	bf00      	nop
 80a32c4:	bf00      	nop
 80a32c6:	bf00      	nop
 80a32c8:	bf00      	nop
 80a32ca:	bf00      	nop
 80a32cc:	bf00      	nop
 80a32ce:	bf00      	nop
 80a32d0:	bf00      	nop
 80a32d2:	bf00      	nop
 80a32d4:	bf00      	nop
 80a32d6:	bf00      	nop
 80a32d8:	bf00      	nop
 80a32da:	bf00      	nop
 80a32dc:	bf00      	nop
 80a32de:	bf00      	nop
 80a32e0:	bf00      	nop
 80a32e2:	bf00      	nop
 80a32e4:	bf00      	nop
 80a32e6:	bf00      	nop
 80a32e8:	bf00      	nop
 80a32ea:	bf00      	nop
 80a32ec:	bf00      	nop
 80a32ee:	bf00      	nop
 80a32f0:	bf00      	nop
 80a32f2:	bf00      	nop
 80a32f4:	bf00      	nop
 80a32f6:	bf00      	nop
 80a32f8:	bf00      	nop
 80a32fa:	bf00      	nop
 80a32fc:	bf00      	nop
 80a32fe:	bf00      	nop
 80a3300:	bf00      	nop
 80a3302:	bf00      	nop
 80a3304:	bf00      	nop
 80a3306:	bf00      	nop
 80a3308:	bf00      	nop
 80a330a:	bf00      	nop
 80a330c:	bf00      	nop
 80a330e:	bf00      	nop
 80a3310:	bf00      	nop
 80a3312:	bf00      	nop
 80a3314:	bf00      	nop
 80a3316:	bf00      	nop
 80a3318:	bf00      	nop
 80a331a:	bf00      	nop
 80a331c:	bf00      	nop
 80a331e:	bf00      	nop
 80a3320:	bf00      	nop
 80a3322:	bf00      	nop
 80a3324:	bf00      	nop
 80a3326:	bf00      	nop
 80a3328:	bf00      	nop
 80a332a:	bf00      	nop
 80a332c:	bf00      	nop
 80a332e:	bf00      	nop
 80a3330:	bf00      	nop
 80a3332:	bf00      	nop
 80a3334:	bf00      	nop
 80a3336:	bf00      	nop
 80a3338:	bf00      	nop
 80a333a:	bf00      	nop
 80a333c:	bf00      	nop
 80a333e:	bf00      	nop
 80a3340:	bf00      	nop
 80a3342:	bf00      	nop
 80a3344:	bf00      	nop
 80a3346:	bf00      	nop
 80a3348:	bf00      	nop
 80a334a:	bf00      	nop
 80a334c:	bf00      	nop
 80a334e:	bf00      	nop
 80a3350:	bf00      	nop
 80a3352:	bf00      	nop
 80a3354:	bf00      	nop
 80a3356:	bf00      	nop
 80a3358:	bf00      	nop
 80a335a:	bf00      	nop
 80a335c:	bf00      	nop
 80a335e:	bf00      	nop
 80a3360:	bf00      	nop
 80a3362:	bf00      	nop
 80a3364:	bf00      	nop
 80a3366:	bf00      	nop
 80a3368:	bf00      	nop
 80a336a:	bf00      	nop
 80a336c:	bf00      	nop
 80a336e:	bf00      	nop
 80a3370:	bf00      	nop
 80a3372:	bf00      	nop
 80a3374:	bf00      	nop
 80a3376:	bf00      	nop
 80a3378:	bf00      	nop
 80a337a:	bf00      	nop
 80a337c:	bf00      	nop
 80a337e:	bf00      	nop
 80a3380:	bf00      	nop
 80a3382:	bf00      	nop
 80a3384:	bf00      	nop
 80a3386:	bf00      	nop
 80a3388:	bf00      	nop
 80a338a:	bf00      	nop
 80a338c:	bf00      	nop
 80a338e:	bf00      	nop
 80a3390:	bf00      	nop
 80a3392:	bf00      	nop
 80a3394:	bf00      	nop
 80a3396:	bf00      	nop
 80a3398:	bf00      	nop
 80a339a:	bf00      	nop
 80a339c:	bf00      	nop
 80a339e:	bf00      	nop
 80a33a0:	bf00      	nop
 80a33a2:	bf00      	nop
 80a33a4:	bf00      	nop
 80a33a6:	bf00      	nop
 80a33a8:	bf00      	nop
 80a33aa:	bf00      	nop
 80a33ac:	bf00      	nop
 80a33ae:	bf00      	nop
 80a33b0:	bf00      	nop
 80a33b2:	bf00      	nop
 80a33b4:	bf00      	nop
 80a33b6:	bf00      	nop
 80a33b8:	bf00      	nop
 80a33ba:	bf00      	nop
 80a33bc:	bf00      	nop
 80a33be:	bf00      	nop
 80a33c0:	bf00      	nop
 80a33c2:	bf00      	nop
 80a33c4:	bf00      	nop
 80a33c6:	bf00      	nop
 80a33c8:	bf00      	nop
 80a33ca:	bf00      	nop
 80a33cc:	bf00      	nop
 80a33ce:	bf00      	nop
 80a33d0:	bf00      	nop
 80a33d2:	bf00      	nop
 80a33d4:	bf00      	nop
 80a33d6:	bf00      	nop
 80a33d8:	bf00      	nop
 80a33da:	bf00      	nop
 80a33dc:	bf00      	nop
 80a33de:	bf00      	nop
 80a33e0:	bf00      	nop
 80a33e2:	bf00      	nop
 80a33e4:	bf00      	nop
 80a33e6:	bf00      	nop
 80a33e8:	bf00      	nop
 80a33ea:	bf00      	nop
 80a33ec:	bf00      	nop
 80a33ee:	bf00      	nop
 80a33f0:	bf00      	nop
 80a33f2:	bf00      	nop
 80a33f4:	bf00      	nop
 80a33f6:	bf00      	nop
 80a33f8:	bf00      	nop
 80a33fa:	bf00      	nop
 80a33fc:	bf00      	nop
 80a33fe:	bf00      	nop
 80a3400:	bf00      	nop
 80a3402:	bf00      	nop
 80a3404:	bf00      	nop
 80a3406:	bf00      	nop
 80a3408:	bf00      	nop
 80a340a:	bf00      	nop
 80a340c:	bf00      	nop
 80a340e:	bf00      	nop
 80a3410:	bf00      	nop
 80a3412:	bf00      	nop
 80a3414:	bf00      	nop
 80a3416:	bf00      	nop
 80a3418:	bf00      	nop
 80a341a:	bf00      	nop
 80a341c:	bf00      	nop
 80a341e:	bf00      	nop
 80a3420:	bf00      	nop
 80a3422:	bf00      	nop
 80a3424:	bf00      	nop
 80a3426:	bf00      	nop
 80a3428:	bf00      	nop
 80a342a:	bf00      	nop
 80a342c:	bf00      	nop
 80a342e:	bf00      	nop
 80a3430:	bf00      	nop
 80a3432:	bf00      	nop
 80a3434:	bf00      	nop
 80a3436:	bf00      	nop
 80a3438:	bf00      	nop
 80a343a:	bf00      	nop
 80a343c:	bf00      	nop
 80a343e:	bf00      	nop
 80a3440:	bf00      	nop
 80a3442:	bf00      	nop
 80a3444:	bf00      	nop
 80a3446:	bf00      	nop
 80a3448:	e6db      	b.n	80a3202 <_ZN17Adafruit_NeoPixel4showEv+0x88e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a344a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a344e:	b29b      	uxth	r3, r3
 80a3450:	2b00      	cmp	r3, #0
 80a3452:	f47f ada2 	bne.w	80a2f9a <_ZN17Adafruit_NeoPixel4showEv+0x626>
 80a3456:	f7ff bbe3 	b.w	80a2c20 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
 80a345a:	4770      	bx	lr
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a345c:	2b00      	cmp	r3, #0
 80a345e:	f43f abdf 	beq.w	80a2c20 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a3462:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a3466:	2600      	movs	r6, #0
 80a3468:	4a12      	ldr	r2, [pc, #72]	; (80a34b4 <_ZN17Adafruit_NeoPixel4showEv+0xb40>)
      mask = 0x800000; // reset the mask
 80a346a:	9104      	str	r1, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a346c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next green byte value
 80a3470:	3503      	adds	r5, #3
      i = i-3;      // decrement bytes remaining
 80a3472:	3b03      	subs	r3, #3
 80a3474:	b29b      	uxth	r3, r3
 80a3476:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a347a:	f815 3c03 	ldrb.w	r3, [r5, #-3]
 80a347e:	b2db      	uxtb	r3, r3
 80a3480:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next blue byte value
 80a3484:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 80a3488:	b2db      	uxtb	r3, r3
 80a348a:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next green byte value
 80a348e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80a3492:	b2db      	uxtb	r3, r3
 80a3494:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a3498:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a349c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a34a0:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a34a4:	021b      	lsls	r3, r3, #8
 80a34a6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a34aa:	4303      	orrs	r3, r0
 80a34ac:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a34ae:	f88d 6006 	strb.w	r6, [sp, #6]
 80a34b2:	e0e0      	b.n	80a3676 <_ZN17Adafruit_NeoPixel4showEv+0xd02>
 80a34b4:	20000efc 	.word	0x20000efc
            ::: "r0", "cc", "memory");
 80a34b8:	4600      	mov	r0, r0
 80a34ba:	bf00      	nop
 80a34bc:	bf00      	nop
 80a34be:	bf00      	nop
 80a34c0:	bf00      	nop
 80a34c2:	bf00      	nop
 80a34c4:	bf00      	nop
 80a34c6:	bf00      	nop
 80a34c8:	bf00      	nop
 80a34ca:	bf00      	nop
 80a34cc:	bf00      	nop
 80a34ce:	bf00      	nop
 80a34d0:	bf00      	nop
 80a34d2:	bf00      	nop
 80a34d4:	bf00      	nop
 80a34d6:	bf00      	nop
 80a34d8:	bf00      	nop
 80a34da:	bf00      	nop
 80a34dc:	bf00      	nop
 80a34de:	bf00      	nop
 80a34e0:	bf00      	nop
 80a34e2:	bf00      	nop
 80a34e4:	bf00      	nop
 80a34e6:	bf00      	nop
 80a34e8:	bf00      	nop
 80a34ea:	bf00      	nop
 80a34ec:	bf00      	nop
 80a34ee:	bf00      	nop
 80a34f0:	bf00      	nop
 80a34f2:	bf00      	nop
 80a34f4:	bf00      	nop
 80a34f6:	bf00      	nop
 80a34f8:	bf00      	nop
 80a34fa:	bf00      	nop
 80a34fc:	bf00      	nop
 80a34fe:	bf00      	nop
 80a3500:	bf00      	nop
 80a3502:	bf00      	nop
 80a3504:	bf00      	nop
 80a3506:	bf00      	nop
 80a3508:	bf00      	nop
 80a350a:	bf00      	nop
 80a350c:	bf00      	nop
 80a350e:	bf00      	nop
 80a3510:	bf00      	nop
 80a3512:	bf00      	nop
 80a3514:	bf00      	nop
 80a3516:	bf00      	nop
 80a3518:	bf00      	nop
 80a351a:	bf00      	nop
 80a351c:	bf00      	nop
 80a351e:	bf00      	nop
 80a3520:	bf00      	nop
 80a3522:	bf00      	nop
 80a3524:	bf00      	nop
 80a3526:	bf00      	nop
 80a3528:	bf00      	nop
 80a352a:	bf00      	nop
 80a352c:	bf00      	nop
 80a352e:	bf00      	nop
 80a3530:	bf00      	nop
 80a3532:	bf00      	nop
 80a3534:	bf00      	nop
 80a3536:	bf00      	nop
 80a3538:	bf00      	nop
 80a353a:	bf00      	nop
 80a353c:	bf00      	nop
 80a353e:	bf00      	nop
 80a3540:	bf00      	nop
 80a3542:	bf00      	nop
 80a3544:	bf00      	nop
 80a3546:	bf00      	nop
 80a3548:	bf00      	nop
 80a354a:	bf00      	nop
 80a354c:	bf00      	nop
 80a354e:	bf00      	nop
 80a3550:	bf00      	nop
 80a3552:	bf00      	nop
 80a3554:	bf00      	nop
 80a3556:	bf00      	nop
 80a3558:	bf00      	nop
 80a355a:	bf00      	nop
 80a355c:	bf00      	nop
 80a355e:	bf00      	nop
 80a3560:	bf00      	nop
 80a3562:	bf00      	nop
 80a3564:	bf00      	nop
 80a3566:	bf00      	nop
 80a3568:	bf00      	nop
 80a356a:	bf00      	nop
 80a356c:	bf00      	nop
 80a356e:	bf00      	nop
 80a3570:	bf00      	nop
 80a3572:	bf00      	nop
 80a3574:	bf00      	nop
 80a3576:	bf00      	nop
 80a3578:	bf00      	nop
 80a357a:	bf00      	nop
 80a357c:	bf00      	nop
 80a357e:	bf00      	nop
 80a3580:	bf00      	nop
 80a3582:	bf00      	nop
 80a3584:	bf00      	nop
 80a3586:	bf00      	nop
 80a3588:	bf00      	nop
 80a358a:	bf00      	nop
 80a358c:	bf00      	nop
 80a358e:	bf00      	nop
 80a3590:	bf00      	nop
 80a3592:	bf00      	nop
 80a3594:	bf00      	nop
 80a3596:	bf00      	nop
 80a3598:	bf00      	nop
 80a359a:	bf00      	nop
 80a359c:	bf00      	nop
 80a359e:	bf00      	nop
 80a35a0:	bf00      	nop
 80a35a2:	bf00      	nop
 80a35a4:	bf00      	nop
 80a35a6:	bf00      	nop
 80a35a8:	bf00      	nop
 80a35aa:	bf00      	nop
 80a35ac:	bf00      	nop
 80a35ae:	bf00      	nop
 80a35b0:	bf00      	nop
 80a35b2:	bf00      	nop
 80a35b4:	bf00      	nop
 80a35b6:	bf00      	nop
 80a35b8:	bf00      	nop
 80a35ba:	bf00      	nop
 80a35bc:	bf00      	nop
 80a35be:	bf00      	nop
 80a35c0:	bf00      	nop
 80a35c2:	bf00      	nop
 80a35c4:	bf00      	nop
 80a35c6:	bf00      	nop
 80a35c8:	bf00      	nop
 80a35ca:	bf00      	nop
 80a35cc:	bf00      	nop
 80a35ce:	bf00      	nop
 80a35d0:	bf00      	nop
 80a35d2:	bf00      	nop
 80a35d4:	bf00      	nop
 80a35d6:	bf00      	nop
 80a35d8:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a35da:	7963      	ldrb	r3, [r4, #5]
 80a35dc:	6810      	ldr	r0, [r2, #0]
 80a35de:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a35e2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a35e6:	88bf      	ldrh	r7, [r7, #4]
 80a35e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a35ec:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a35ee:	4600      	mov	r0, r0
 80a35f0:	bf00      	nop
 80a35f2:	bf00      	nop
 80a35f4:	bf00      	nop
 80a35f6:	bf00      	nop
 80a35f8:	bf00      	nop
 80a35fa:	bf00      	nop
 80a35fc:	bf00      	nop
 80a35fe:	bf00      	nop
 80a3600:	bf00      	nop
 80a3602:	bf00      	nop
 80a3604:	bf00      	nop
 80a3606:	bf00      	nop
 80a3608:	bf00      	nop
 80a360a:	bf00      	nop
 80a360c:	bf00      	nop
 80a360e:	bf00      	nop
 80a3610:	bf00      	nop
 80a3612:	bf00      	nop
 80a3614:	bf00      	nop
 80a3616:	bf00      	nop
 80a3618:	bf00      	nop
 80a361a:	bf00      	nop
 80a361c:	bf00      	nop
 80a361e:	bf00      	nop
 80a3620:	bf00      	nop
 80a3622:	bf00      	nop
 80a3624:	bf00      	nop
 80a3626:	bf00      	nop
 80a3628:	bf00      	nop
 80a362a:	bf00      	nop
 80a362c:	bf00      	nop
 80a362e:	bf00      	nop
 80a3630:	bf00      	nop
 80a3632:	bf00      	nop
 80a3634:	bf00      	nop
 80a3636:	bf00      	nop
 80a3638:	bf00      	nop
 80a363a:	bf00      	nop
 80a363c:	bf00      	nop
 80a363e:	bf00      	nop
 80a3640:	bf00      	nop
 80a3642:	bf00      	nop
 80a3644:	bf00      	nop
 80a3646:	bf00      	nop
 80a3648:	bf00      	nop
 80a364a:	bf00      	nop
 80a364c:	bf00      	nop
 80a364e:	bf00      	nop
 80a3650:	bf00      	nop
 80a3652:	bf00      	nop
 80a3654:	bf00      	nop
 80a3656:	bf00      	nop
 80a3658:	bf00      	nop
 80a365a:	bf00      	nop
 80a365c:	bf00      	nop
        mask >>= 1;
 80a365e:	9b04      	ldr	r3, [sp, #16]
 80a3660:	085b      	lsrs	r3, r3, #1
 80a3662:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a3664:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a3668:	3301      	adds	r3, #1
 80a366a:	b2db      	uxtb	r3, r3
 80a366c:	2b17      	cmp	r3, #23
 80a366e:	f88d 3006 	strb.w	r3, [sp, #6]
 80a3672:	f200 80e3 	bhi.w	80a383c <_ZN17Adafruit_NeoPixel4showEv+0xec8>
        pinSet(pin, HIGH); // HIGH
 80a3676:	7963      	ldrb	r3, [r4, #5]
 80a3678:	6810      	ldr	r0, [r2, #0]
 80a367a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a367e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a3682:	88bf      	ldrh	r7, [r7, #4]
 80a3684:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3688:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a368a:	9803      	ldr	r0, [sp, #12]
 80a368c:	9b04      	ldr	r3, [sp, #16]
 80a368e:	4218      	tst	r0, r3
 80a3690:	f47f af12 	bne.w	80a34b8 <_ZN17Adafruit_NeoPixel4showEv+0xb44>
            ::: "r0", "cc", "memory");
 80a3694:	4600      	mov	r0, r0
 80a3696:	bf00      	nop
 80a3698:	bf00      	nop
 80a369a:	bf00      	nop
 80a369c:	bf00      	nop
 80a369e:	bf00      	nop
 80a36a0:	bf00      	nop
 80a36a2:	bf00      	nop
 80a36a4:	bf00      	nop
 80a36a6:	bf00      	nop
 80a36a8:	bf00      	nop
 80a36aa:	bf00      	nop
 80a36ac:	bf00      	nop
 80a36ae:	bf00      	nop
 80a36b0:	bf00      	nop
 80a36b2:	bf00      	nop
 80a36b4:	bf00      	nop
 80a36b6:	bf00      	nop
 80a36b8:	bf00      	nop
 80a36ba:	bf00      	nop
 80a36bc:	bf00      	nop
 80a36be:	bf00      	nop
 80a36c0:	bf00      	nop
 80a36c2:	bf00      	nop
 80a36c4:	bf00      	nop
 80a36c6:	bf00      	nop
 80a36c8:	bf00      	nop
 80a36ca:	bf00      	nop
 80a36cc:	bf00      	nop
 80a36ce:	bf00      	nop
 80a36d0:	bf00      	nop
 80a36d2:	bf00      	nop
 80a36d4:	bf00      	nop
 80a36d6:	bf00      	nop
 80a36d8:	bf00      	nop
 80a36da:	bf00      	nop
 80a36dc:	bf00      	nop
 80a36de:	bf00      	nop
 80a36e0:	bf00      	nop
 80a36e2:	bf00      	nop
 80a36e4:	bf00      	nop
 80a36e6:	bf00      	nop
 80a36e8:	bf00      	nop
 80a36ea:	bf00      	nop
 80a36ec:	bf00      	nop
 80a36ee:	bf00      	nop
 80a36f0:	bf00      	nop
 80a36f2:	bf00      	nop
 80a36f4:	bf00      	nop
 80a36f6:	bf00      	nop
 80a36f8:	bf00      	nop
 80a36fa:	bf00      	nop
 80a36fc:	bf00      	nop
 80a36fe:	bf00      	nop
 80a3700:	bf00      	nop
 80a3702:	bf00      	nop
 80a3704:	bf00      	nop
 80a3706:	bf00      	nop
 80a3708:	bf00      	nop
 80a370a:	bf00      	nop
 80a370c:	bf00      	nop
 80a370e:	bf00      	nop
 80a3710:	bf00      	nop
 80a3712:	bf00      	nop
 80a3714:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a3716:	7963      	ldrb	r3, [r4, #5]
 80a3718:	6810      	ldr	r0, [r2, #0]
 80a371a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a371e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a3722:	88bf      	ldrh	r7, [r7, #4]
 80a3724:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3728:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a372a:	4600      	mov	r0, r0
 80a372c:	bf00      	nop
 80a372e:	bf00      	nop
 80a3730:	bf00      	nop
 80a3732:	bf00      	nop
 80a3734:	bf00      	nop
 80a3736:	bf00      	nop
 80a3738:	bf00      	nop
 80a373a:	bf00      	nop
 80a373c:	bf00      	nop
 80a373e:	bf00      	nop
 80a3740:	bf00      	nop
 80a3742:	bf00      	nop
 80a3744:	bf00      	nop
 80a3746:	bf00      	nop
 80a3748:	bf00      	nop
 80a374a:	bf00      	nop
 80a374c:	bf00      	nop
 80a374e:	bf00      	nop
 80a3750:	bf00      	nop
 80a3752:	bf00      	nop
 80a3754:	bf00      	nop
 80a3756:	bf00      	nop
 80a3758:	bf00      	nop
 80a375a:	bf00      	nop
 80a375c:	bf00      	nop
 80a375e:	bf00      	nop
 80a3760:	bf00      	nop
 80a3762:	bf00      	nop
 80a3764:	bf00      	nop
 80a3766:	bf00      	nop
 80a3768:	bf00      	nop
 80a376a:	bf00      	nop
 80a376c:	bf00      	nop
 80a376e:	bf00      	nop
 80a3770:	bf00      	nop
 80a3772:	bf00      	nop
 80a3774:	bf00      	nop
 80a3776:	bf00      	nop
 80a3778:	bf00      	nop
 80a377a:	bf00      	nop
 80a377c:	bf00      	nop
 80a377e:	bf00      	nop
 80a3780:	bf00      	nop
 80a3782:	bf00      	nop
 80a3784:	bf00      	nop
 80a3786:	bf00      	nop
 80a3788:	bf00      	nop
 80a378a:	bf00      	nop
 80a378c:	bf00      	nop
 80a378e:	bf00      	nop
 80a3790:	bf00      	nop
 80a3792:	bf00      	nop
 80a3794:	bf00      	nop
 80a3796:	bf00      	nop
 80a3798:	bf00      	nop
 80a379a:	bf00      	nop
 80a379c:	bf00      	nop
 80a379e:	bf00      	nop
 80a37a0:	bf00      	nop
 80a37a2:	bf00      	nop
 80a37a4:	bf00      	nop
 80a37a6:	bf00      	nop
 80a37a8:	bf00      	nop
 80a37aa:	bf00      	nop
 80a37ac:	bf00      	nop
 80a37ae:	bf00      	nop
 80a37b0:	bf00      	nop
 80a37b2:	bf00      	nop
 80a37b4:	bf00      	nop
 80a37b6:	bf00      	nop
 80a37b8:	bf00      	nop
 80a37ba:	bf00      	nop
 80a37bc:	bf00      	nop
 80a37be:	bf00      	nop
 80a37c0:	bf00      	nop
 80a37c2:	bf00      	nop
 80a37c4:	bf00      	nop
 80a37c6:	bf00      	nop
 80a37c8:	bf00      	nop
 80a37ca:	bf00      	nop
 80a37cc:	bf00      	nop
 80a37ce:	bf00      	nop
 80a37d0:	bf00      	nop
 80a37d2:	bf00      	nop
 80a37d4:	bf00      	nop
 80a37d6:	bf00      	nop
 80a37d8:	bf00      	nop
 80a37da:	bf00      	nop
 80a37dc:	bf00      	nop
 80a37de:	bf00      	nop
 80a37e0:	bf00      	nop
 80a37e2:	bf00      	nop
 80a37e4:	bf00      	nop
 80a37e6:	bf00      	nop
 80a37e8:	bf00      	nop
 80a37ea:	bf00      	nop
 80a37ec:	bf00      	nop
 80a37ee:	bf00      	nop
 80a37f0:	bf00      	nop
 80a37f2:	bf00      	nop
 80a37f4:	bf00      	nop
 80a37f6:	bf00      	nop
 80a37f8:	bf00      	nop
 80a37fa:	bf00      	nop
 80a37fc:	bf00      	nop
 80a37fe:	bf00      	nop
 80a3800:	bf00      	nop
 80a3802:	bf00      	nop
 80a3804:	bf00      	nop
 80a3806:	bf00      	nop
 80a3808:	bf00      	nop
 80a380a:	bf00      	nop
 80a380c:	bf00      	nop
 80a380e:	bf00      	nop
 80a3810:	bf00      	nop
 80a3812:	bf00      	nop
 80a3814:	bf00      	nop
 80a3816:	bf00      	nop
 80a3818:	bf00      	nop
 80a381a:	bf00      	nop
 80a381c:	bf00      	nop
 80a381e:	bf00      	nop
 80a3820:	bf00      	nop
 80a3822:	bf00      	nop
 80a3824:	bf00      	nop
 80a3826:	bf00      	nop
 80a3828:	bf00      	nop
 80a382a:	bf00      	nop
 80a382c:	bf00      	nop
 80a382e:	bf00      	nop
 80a3830:	bf00      	nop
 80a3832:	bf00      	nop
 80a3834:	bf00      	nop
 80a3836:	bf00      	nop
 80a3838:	bf00      	nop
 80a383a:	e710      	b.n	80a365e <_ZN17Adafruit_NeoPixel4showEv+0xcea>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a383c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a3840:	b29b      	uxth	r3, r3
 80a3842:	2b00      	cmp	r3, #0
 80a3844:	f47f ae11 	bne.w	80a346a <_ZN17Adafruit_NeoPixel4showEv+0xaf6>
 80a3848:	f7ff b9ea 	b.w	80a2c20 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>

080a384c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  digitalWrite(p, LOW);
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a384c:	b570      	push	{r4, r5, r6, lr}
  if(n < numLEDs) {
 80a384e:	8805      	ldrh	r5, [r0, #0]
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a3850:	f89d 4010 	ldrb.w	r4, [sp, #16]
  if(n < numLEDs) {
 80a3854:	428d      	cmp	r5, r1
 80a3856:	d916      	bls.n	80a3886 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3a>
    if(brightness) { // See notes in setBrightness()
 80a3858:	7985      	ldrb	r5, [r0, #6]
 80a385a:	b12d      	cbz	r5, 80a3868 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x1c>
      r = (r * brightness) >> 8;
 80a385c:	436a      	muls	r2, r5
      g = (g * brightness) >> 8;
 80a385e:	436b      	muls	r3, r5
      b = (b * brightness) >> 8;
 80a3860:	436c      	muls	r4, r5
      r = (r * brightness) >> 8;
 80a3862:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
 80a3864:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
 80a3866:	0a24      	lsrs	r4, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
 80a3868:	6886      	ldr	r6, [r0, #8]
    switch(type) {
 80a386a:	7900      	ldrb	r0, [r0, #4]
    uint8_t *p = &pixels[n * 3];
 80a386c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    switch(type) {
 80a3870:	2804      	cmp	r0, #4
    uint8_t *p = &pixels[n * 3];
 80a3872:	eb06 0501 	add.w	r5, r6, r1
    switch(type) {
 80a3876:	d007      	beq.n	80a3888 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3c>
 80a3878:	2805      	cmp	r0, #5
 80a387a:	d001      	beq.n	80a3880 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x34>
 80a387c:	2802      	cmp	r0, #2
 80a387e:	d10a      	bne.n	80a3896 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4a>
      case WS2812B: // WS2812 & WS2812B is GRB order.
      case WS2812B2:
        *p++ = g;
 80a3880:	5473      	strb	r3, [r6, r1]
        *p++ = r;
 80a3882:	706a      	strb	r2, [r5, #1]
        *p = b;
 80a3884:	70ac      	strb	r4, [r5, #2]
        *p++ = g;
        *p = b;
        break;
    }
  }
}
 80a3886:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = r;
 80a3888:	2afe      	cmp	r2, #254	; 0xfe
 80a388a:	bf28      	it	cs
 80a388c:	22fe      	movcs	r2, #254	; 0xfe
 80a388e:	5472      	strb	r2, [r6, r1]
        *p++ = b;
 80a3890:	706c      	strb	r4, [r5, #1]
        *p = g;
 80a3892:	70ab      	strb	r3, [r5, #2]
        break;
 80a3894:	e7f7      	b.n	80a3886 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3a>
        *p++ = r;
 80a3896:	5472      	strb	r2, [r6, r1]
        *p++ = g;
 80a3898:	706b      	strb	r3, [r5, #1]
        *p = b;
 80a389a:	70ac      	strb	r4, [r5, #2]
}
 80a389c:	e7f3      	b.n	80a3886 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3a>

080a389e <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a389e:	b570      	push	{r4, r5, r6, lr}
  if(n < numLEDs) {
 80a38a0:	8803      	ldrh	r3, [r0, #0]
 80a38a2:	428b      	cmp	r3, r1
 80a38a4:	d91d      	bls.n	80a38e2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x44>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a38a6:	7985      	ldrb	r5, [r0, #6]
 80a38a8:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a38ac:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a38b0:	b2d2      	uxtb	r2, r2
 80a38b2:	b13d      	cbz	r5, 80a38c4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
 80a38b4:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a38b6:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a38b8:	436a      	muls	r2, r5
      r = (r * brightness) >> 8;
 80a38ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a38be:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a38c2:	0a12      	lsrs	r2, r2, #8
    }
    uint8_t *p = &pixels[n * 3];
 80a38c4:	6886      	ldr	r6, [r0, #8]
    switch(type) {
 80a38c6:	7900      	ldrb	r0, [r0, #4]
    uint8_t *p = &pixels[n * 3];
 80a38c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    switch(type) {
 80a38cc:	2804      	cmp	r0, #4
    uint8_t *p = &pixels[n * 3];
 80a38ce:	eb06 0501 	add.w	r5, r6, r1
    switch(type) {
 80a38d2:	d007      	beq.n	80a38e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x46>
 80a38d4:	2805      	cmp	r0, #5
 80a38d6:	d001      	beq.n	80a38dc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x3e>
 80a38d8:	2802      	cmp	r0, #2
 80a38da:	d10a      	bne.n	80a38f2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>
      case WS2812B: // WS2812 & WS2812B is GRB order.
      case WS2812B2:
        *p++ = g;
 80a38dc:	5474      	strb	r4, [r6, r1]
        *p++ = r;
 80a38de:	706b      	strb	r3, [r5, #1]
        *p = b;
 80a38e0:	70aa      	strb	r2, [r5, #2]
        *p++ = g;
        *p = b;
        break;
    }
  }
}
 80a38e2:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = r;
 80a38e4:	2bfe      	cmp	r3, #254	; 0xfe
 80a38e6:	bf28      	it	cs
 80a38e8:	23fe      	movcs	r3, #254	; 0xfe
 80a38ea:	5473      	strb	r3, [r6, r1]
        *p++ = b;
 80a38ec:	706a      	strb	r2, [r5, #1]
        *p = g;
 80a38ee:	70ac      	strb	r4, [r5, #2]
        break;
 80a38f0:	e7f7      	b.n	80a38e2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x44>
        *p++ = r;
 80a38f2:	5473      	strb	r3, [r6, r1]
        *p++ = g;
 80a38f4:	706c      	strb	r4, [r5, #1]
        *p = b;
 80a38f6:	70aa      	strb	r2, [r5, #2]
}
 80a38f8:	e7f3      	b.n	80a38e2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x44>

080a38fa <_ZNK17Adafruit_NeoPixel13getPixelColorEt>:
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
 80a38fa:	b513      	push	{r0, r1, r4, lr}
  if(n >= numLEDs) {
 80a38fc:	8803      	ldrh	r3, [r0, #0]
 80a38fe:	428b      	cmp	r3, r1
 80a3900:	d938      	bls.n	80a3974 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x7a>
    // Out of bounds, return no color.
    return 0;
  }
  uint8_t *p = &pixels[n * 3];
 80a3902:	6882      	ldr	r2, [r0, #8]
  uint32_t c;

  switch(type) {
 80a3904:	7904      	ldrb	r4, [r0, #4]
  uint8_t *p = &pixels[n * 3];
 80a3906:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a390a:	1853      	adds	r3, r2, r1
  switch(type) {
 80a390c:	2c04      	cmp	r4, #4
 80a390e:	5c51      	ldrb	r1, [r2, r1]
 80a3910:	789a      	ldrb	r2, [r3, #2]
 80a3912:	785b      	ldrb	r3, [r3, #1]
 80a3914:	d022      	beq.n	80a395c <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x62>
 80a3916:	2c05      	cmp	r4, #5
 80a3918:	d001      	beq.n	80a391e <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x24>
 80a391a:	2c02      	cmp	r4, #2
 80a391c:	d124      	bne.n	80a3968 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x6e>
    case WS2812B: // WS2812 & WS2812B is GRB order.
    case WS2812B2:
      c = ((uint32_t)p[1] << 16) | ((uint32_t)p[0] <<  8) | (uint32_t)p[2];
 80a391e:	0209      	lsls	r1, r1, #8
 80a3920:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80a3924:	4313      	orrs	r3, r2
 80a3926:	9301      	str	r3, [sp, #4]
      break;
  }

  // Adjust this back up to the true color, as setting a pixel color will
  // scale it back down again.
  if(brightness) { // See notes in setBrightness()
 80a3928:	7981      	ldrb	r1, [r0, #6]
 80a392a:	b1a1      	cbz	r1, 80a3956 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x5c>
    //Cast the color to a byte array
    uint8_t * c_ptr =reinterpret_cast<uint8_t*>(&c);
    c_ptr[0] = (c_ptr[0] << 8)/brightness;
 80a392c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
 80a3930:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c_ptr[0] = (c_ptr[0] << 8)/brightness;
 80a3934:	0212      	lsls	r2, r2, #8
 80a3936:	fbb2 f2f1 	udiv	r2, r2, r1
 80a393a:	f88d 2004 	strb.w	r2, [sp, #4]
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
 80a393e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
 80a3942:	021b      	lsls	r3, r3, #8
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
 80a3944:	0212      	lsls	r2, r2, #8
 80a3946:	fbb2 f2f1 	udiv	r2, r2, r1
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
 80a394a:	fbb3 f3f1 	udiv	r3, r3, r1
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
 80a394e:	f88d 2005 	strb.w	r2, [sp, #5]
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
 80a3952:	f88d 3006 	strb.w	r3, [sp, #6]
  }
  return c; // Pixel # is out of bounds
 80a3956:	9801      	ldr	r0, [sp, #4]
}
 80a3958:	b002      	add	sp, #8
 80a395a:	bd10      	pop	{r4, pc}
      c = ((uint32_t)p[0] << 16) | ((uint32_t)p[2] <<  8) | (uint32_t)p[1];
 80a395c:	0212      	lsls	r2, r2, #8
 80a395e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80a3962:	4313      	orrs	r3, r2
 80a3964:	9301      	str	r3, [sp, #4]
      break;
 80a3966:	e7df      	b.n	80a3928 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x2e>
      c = ((uint32_t)p[0] << 16) | ((uint32_t)p[1] <<  8) | (uint32_t)p[2];
 80a3968:	021b      	lsls	r3, r3, #8
 80a396a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80a396e:	4313      	orrs	r3, r2
 80a3970:	9301      	str	r3, [sp, #4]
      break;
 80a3972:	e7d9      	b.n	80a3928 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x2e>
    return 0;
 80a3974:	2000      	movs	r0, #0
 80a3976:	e7ef      	b.n	80a3958 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x5e>

080a3978 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a3978:	b508      	push	{r3, lr}
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a397a:	f001 fd3b 	bl	80a53f4 <HAL_Pin_Map>
 80a397e:	4b01      	ldr	r3, [pc, #4]	; (80a3984 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
 80a3980:	6018      	str	r0, [r3, #0]
}
 80a3982:	bd08      	pop	{r3, pc}
 80a3984:	20000efc 	.word	0x20000efc

080a3988 <_ZN8PongBallC1Ev>:
#include "pong_ball.h"
#include "muse.h"

PongBall::PongBall() {}
 80a3988:	4770      	bx	lr
	...

080a398c <_ZN8PongBallC1Eiffjiii>:

PongBall::PongBall(int len, float velX, float velY, unsigned int tickTime, int r, int g, int b) {
 80a398c:	b510      	push	{r4, lr}
    this->len = len;
    xVel = velX;
    yVel = velY;
 80a398e:	60c3      	str	r3, [r0, #12]
    x = NUM_BARS / 2;
 80a3990:	4b09      	ldr	r3, [pc, #36]	; (80a39b8 <_ZN8PongBallC1Eiffjiii+0x2c>)
PongBall::PongBall(int len, float velX, float velY, unsigned int tickTime, int r, int g, int b) {
 80a3992:	4604      	mov	r4, r0
    x = NUM_BARS / 2;
 80a3994:	6103      	str	r3, [r0, #16]
    y = STRIP_LENGTH / 2;
 80a3996:	4b09      	ldr	r3, [pc, #36]	; (80a39bc <_ZN8PongBallC1Eiffjiii+0x30>)
    this->len = len;
 80a3998:	6181      	str	r1, [r0, #24]
    y = STRIP_LENGTH / 2;
 80a399a:	6143      	str	r3, [r0, #20]

    tick_time = tickTime;
 80a399c:	9b02      	ldr	r3, [sp, #8]
    xVel = velX;
 80a399e:	6082      	str	r2, [r0, #8]
    tick_time = tickTime;
 80a39a0:	6203      	str	r3, [r0, #32]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a39a2:	f001 fd0f 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>

int PongBall::xPos() { return (int) x; }
int PongBall::yPos() { return (int) y; }

void PongBall::setColor(int r, int g, int b) {
    this->r = r;
 80a39a6:	9b03      	ldr	r3, [sp, #12]
    last_tick = millis();
 80a39a8:	61e0      	str	r0, [r4, #28]
    this->r = r;
 80a39aa:	6263      	str	r3, [r4, #36]	; 0x24
    this->g = g;
 80a39ac:	9b04      	ldr	r3, [sp, #16]
}
 80a39ae:	4620      	mov	r0, r4
    this->g = g;
 80a39b0:	62a3      	str	r3, [r4, #40]	; 0x28
    this->b = b;
 80a39b2:	9b05      	ldr	r3, [sp, #20]
 80a39b4:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80a39b6:	bd10      	pop	{r4, pc}
 80a39b8:	40a00000 	.word	0x40a00000
 80a39bc:	41e80000 	.word	0x41e80000

080a39c0 <_ZN8PongBall4tickEv>:
void PongBall::tick() {
 80a39c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a39c4:	4604      	mov	r4, r0
 80a39c6:	f001 fcfd 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - last_tick > tick_time) {
 80a39ca:	69e3      	ldr	r3, [r4, #28]
 80a39cc:	1ac0      	subs	r0, r0, r3
 80a39ce:	6a23      	ldr	r3, [r4, #32]
 80a39d0:	4298      	cmp	r0, r3
 80a39d2:	d926      	bls.n	80a3a22 <_ZN8PongBall4tickEv+0x62>
 80a39d4:	f001 fcf6 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
        x += xVel;
 80a39d8:	68a6      	ldr	r6, [r4, #8]
 80a39da:	6921      	ldr	r1, [r4, #16]
        last_tick = millis();
 80a39dc:	61e0      	str	r0, [r4, #28]
        x += xVel;
 80a39de:	4630      	mov	r0, r6
 80a39e0:	f008 fa16 	bl	80abe10 <__addsf3>
        y += yVel;
 80a39e4:	68e5      	ldr	r5, [r4, #12]
 80a39e6:	6961      	ldr	r1, [r4, #20]
        x += xVel;
 80a39e8:	4681      	mov	r9, r0
 80a39ea:	6120      	str	r0, [r4, #16]
        y += yVel;
 80a39ec:	4628      	mov	r0, r5
 80a39ee:	f008 fa0f 	bl	80abe10 <__addsf3>
        if (x <= 0) {
 80a39f2:	f04f 0800 	mov.w	r8, #0
        y += yVel;
 80a39f6:	4607      	mov	r7, r0
 80a39f8:	6160      	str	r0, [r4, #20]
        if (x <= 0) {
 80a39fa:	4641      	mov	r1, r8
 80a39fc:	4648      	mov	r0, r9
 80a39fe:	f008 fcb7 	bl	80ac370 <__aeabi_fcmple>
 80a3a02:	b180      	cbz	r0, 80a3a26 <_ZN8PongBall4tickEv+0x66>
            xVel = -xVel;
 80a3a04:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
            x = 0;
 80a3a08:	f8c4 8010 	str.w	r8, [r4, #16]
            xVel = -xVel;
 80a3a0c:	60a6      	str	r6, [r4, #8]
        if (y <= 0) {
 80a3a0e:	2100      	movs	r1, #0
 80a3a10:	4638      	mov	r0, r7
 80a3a12:	f008 fcad 	bl	80ac370 <__aeabi_fcmple>
 80a3a16:	b190      	cbz	r0, 80a3a3e <_ZN8PongBall4tickEv+0x7e>
            yVel = -yVel;
 80a3a18:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
            y = 0;
 80a3a1c:	f8c4 8014 	str.w	r8, [r4, #20]
            yVel = -yVel;
 80a3a20:	60e5      	str	r5, [r4, #12]
}
 80a3a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        } else if (x >= NUM_BARS) {
 80a3a26:	4648      	mov	r0, r9
 80a3a28:	490f      	ldr	r1, [pc, #60]	; (80a3a68 <_ZN8PongBall4tickEv+0xa8>)
 80a3a2a:	f008 fcab 	bl	80ac384 <__aeabi_fcmpge>
 80a3a2e:	2800      	cmp	r0, #0
 80a3a30:	d0ed      	beq.n	80a3a0e <_ZN8PongBall4tickEv+0x4e>
            x = NUM_BARS-1;
 80a3a32:	4b0e      	ldr	r3, [pc, #56]	; (80a3a6c <_ZN8PongBall4tickEv+0xac>)
            xVel = -xVel;
 80a3a34:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
            x = NUM_BARS-1;
 80a3a38:	6123      	str	r3, [r4, #16]
            xVel = -xVel;
 80a3a3a:	60a6      	str	r6, [r4, #8]
 80a3a3c:	e7e7      	b.n	80a3a0e <_ZN8PongBall4tickEv+0x4e>
        } else if (y+len >= STRIP_LENGTH) {
 80a3a3e:	69a6      	ldr	r6, [r4, #24]
 80a3a40:	4630      	mov	r0, r6
 80a3a42:	f008 fa99 	bl	80abf78 <__aeabi_i2f>
 80a3a46:	4639      	mov	r1, r7
 80a3a48:	f008 f9e2 	bl	80abe10 <__addsf3>
 80a3a4c:	4908      	ldr	r1, [pc, #32]	; (80a3a70 <_ZN8PongBall4tickEv+0xb0>)
 80a3a4e:	f008 fc99 	bl	80ac384 <__aeabi_fcmpge>
 80a3a52:	2800      	cmp	r0, #0
 80a3a54:	d0e5      	beq.n	80a3a22 <_ZN8PongBall4tickEv+0x62>
            y = STRIP_LENGTH-len;
 80a3a56:	f1c6 003a 	rsb	r0, r6, #58	; 0x3a
 80a3a5a:	f008 fa8d 	bl	80abf78 <__aeabi_i2f>
            yVel = -yVel;
 80a3a5e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
            y = STRIP_LENGTH-len;
 80a3a62:	6160      	str	r0, [r4, #20]
            yVel = -yVel;
 80a3a64:	60e5      	str	r5, [r4, #12]
}
 80a3a66:	e7dc      	b.n	80a3a22 <_ZN8PongBall4tickEv+0x62>
 80a3a68:	41200000 	.word	0x41200000
 80a3a6c:	41100000 	.word	0x41100000
 80a3a70:	42680000 	.word	0x42680000

080a3a74 <_ZN8PongBall4xPosEv>:
int PongBall::xPos() { return (int) x; }
 80a3a74:	b508      	push	{r3, lr}
 80a3a76:	6900      	ldr	r0, [r0, #16]
 80a3a78:	f008 fcae 	bl	80ac3d8 <__aeabi_f2iz>
 80a3a7c:	bd08      	pop	{r3, pc}

080a3a7e <_ZN8PongBall4yPosEv>:
int PongBall::yPos() { return (int) y; }
 80a3a7e:	b508      	push	{r3, lr}
 80a3a80:	6940      	ldr	r0, [r0, #20]
 80a3a82:	f008 fca9 	bl	80ac3d8 <__aeabi_f2iz>
 80a3a86:	bd08      	pop	{r3, pc}

080a3a88 <_ZN8PongBall8setColorEiii>:
    this->g = g;
 80a3a88:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
    this->b = b;
 80a3a8c:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80a3a8e:	4770      	bx	lr

080a3a90 <_ZN10PongPaddleC1Ev>:
#include "pong_paddle.h"

#include "muse.h"

PongPaddle::PongPaddle() {}
 80a3a90:	4770      	bx	lr

080a3a92 <_ZN10PongPaddleC1Eiffffjiii>:

PongPaddle::PongPaddle(int len, float x, float y, float maxXVel, float maxYVel, unsigned int tickTime, int r, int g, int b) {
 80a3a92:	b538      	push	{r3, r4, r5, lr}
 80a3a94:	4604      	mov	r4, r0
    this->len = len;
    this->x = x;
    this->y = y;
 80a3a96:	60a3      	str	r3, [r4, #8]

int PongPaddle::xPos() { return (int) x; }
int PongPaddle::yPos() { return (int) y; }

void PongPaddle::setColor(int r, int g, int b) {
    this->r = r;
 80a3a98:	9b07      	ldr	r3, [sp, #28]
PongPaddle::PongPaddle(int len, float x, float y, float maxXVel, float maxYVel, unsigned int tickTime, int r, int g, int b) {
 80a3a9a:	9d04      	ldr	r5, [sp, #16]
    this->r = r;
 80a3a9c:	6263      	str	r3, [r4, #36]	; 0x24
    this->g = g;
 80a3a9e:	9b08      	ldr	r3, [sp, #32]
PongPaddle::PongPaddle(int len, float x, float y, float maxXVel, float maxYVel, unsigned int tickTime, int r, int g, int b) {
 80a3aa0:	9805      	ldr	r0, [sp, #20]
    this->g = g;
 80a3aa2:	62a3      	str	r3, [r4, #40]	; 0x28
    this->b = b;
 80a3aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    this->len = len;
 80a3aa6:	6021      	str	r1, [r4, #0]
    this->b = b;
 80a3aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
    this->x = x;
 80a3aaa:	6062      	str	r2, [r4, #4]
    this->maxXVel = maxXVel;
 80a3aac:	6165      	str	r5, [r4, #20]
    this->maxYVel = maxYVel;
 80a3aae:	61a0      	str	r0, [r4, #24]
    this->xVel = maxXVel;
 80a3ab0:	60e5      	str	r5, [r4, #12]
    this->yVel = maxYVel;
 80a3ab2:	6120      	str	r0, [r4, #16]
 80a3ab4:	f001 fc86 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
    tick_time = tickTime;
 80a3ab8:	9b06      	ldr	r3, [sp, #24]
    last_tick = millis();
 80a3aba:	61e0      	str	r0, [r4, #28]
    tick_time = tickTime;
 80a3abc:	6223      	str	r3, [r4, #32]
}
 80a3abe:	4620      	mov	r0, r4
 80a3ac0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3ac4 <_ZN10PongPaddle4tickEP8PongBall>:
void PongPaddle::tick(PongBall * pb) {
 80a3ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3ac8:	4604      	mov	r4, r0
 80a3aca:	460d      	mov	r5, r1
 80a3acc:	f001 fc7a 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - last_tick > tick_time) {
 80a3ad0:	69e3      	ldr	r3, [r4, #28]
 80a3ad2:	1ac0      	subs	r0, r0, r3
 80a3ad4:	6a23      	ldr	r3, [r4, #32]
 80a3ad6:	4298      	cmp	r0, r3
 80a3ad8:	d944      	bls.n	80a3b64 <_ZN10PongPaddle4tickEP8PongBall+0xa0>
 80a3ada:	f001 fc73 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
        last_tick = millis();
 80a3ade:	61e0      	str	r0, [r4, #28]
        if ((x < pb->x && pb->xVel < 0) || (x > pb->x && pb->xVel > 0)) {
 80a3ae0:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80a3ae4:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80a3ae8:	4640      	mov	r0, r8
 80a3aea:	4649      	mov	r1, r9
 80a3aec:	f008 fc36 	bl	80ac35c <__aeabi_fcmplt>
 80a3af0:	2700      	movs	r7, #0
 80a3af2:	6826      	ldr	r6, [r4, #0]
 80a3af4:	b120      	cbz	r0, 80a3b00 <_ZN10PongPaddle4tickEP8PongBall+0x3c>
 80a3af6:	4639      	mov	r1, r7
 80a3af8:	68a8      	ldr	r0, [r5, #8]
 80a3afa:	f008 fc2f 	bl	80ac35c <__aeabi_fcmplt>
 80a3afe:	b958      	cbnz	r0, 80a3b18 <_ZN10PongPaddle4tickEP8PongBall+0x54>
 80a3b00:	4649      	mov	r1, r9
 80a3b02:	4640      	mov	r0, r8
 80a3b04:	f008 fc48 	bl	80ac398 <__aeabi_fcmpgt>
 80a3b08:	2800      	cmp	r0, #0
 80a3b0a:	d038      	beq.n	80a3b7e <_ZN10PongPaddle4tickEP8PongBall+0xba>
 80a3b0c:	2100      	movs	r1, #0
 80a3b0e:	68a8      	ldr	r0, [r5, #8]
 80a3b10:	f008 fc42 	bl	80ac398 <__aeabi_fcmpgt>
 80a3b14:	2800      	cmp	r0, #0
 80a3b16:	d032      	beq.n	80a3b7e <_ZN10PongPaddle4tickEP8PongBall+0xba>
            if (y+len < pb->y) { yVel = maxYVel; }
 80a3b18:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80a3b1c:	696d      	ldr	r5, [r5, #20]
 80a3b1e:	6820      	ldr	r0, [r4, #0]
 80a3b20:	f008 fa2a 	bl	80abf78 <__aeabi_i2f>
 80a3b24:	4641      	mov	r1, r8
 80a3b26:	f008 f973 	bl	80abe10 <__addsf3>
 80a3b2a:	4629      	mov	r1, r5
 80a3b2c:	f008 fc16 	bl	80ac35c <__aeabi_fcmplt>
 80a3b30:	b1d0      	cbz	r0, 80a3b68 <_ZN10PongPaddle4tickEP8PongBall+0xa4>
 80a3b32:	69a3      	ldr	r3, [r4, #24]
 80a3b34:	6123      	str	r3, [r4, #16]
        y += yVel;
 80a3b36:	6921      	ldr	r1, [r4, #16]
 80a3b38:	68a0      	ldr	r0, [r4, #8]
 80a3b3a:	f008 f969 	bl	80abe10 <__addsf3>
 80a3b3e:	4605      	mov	r5, r0
 80a3b40:	60a0      	str	r0, [r4, #8]
        if ((y+len) >= STRIP_LENGTH) {
 80a3b42:	4630      	mov	r0, r6
 80a3b44:	f008 fa18 	bl	80abf78 <__aeabi_i2f>
 80a3b48:	4629      	mov	r1, r5
 80a3b4a:	f008 f961 	bl	80abe10 <__addsf3>
 80a3b4e:	492b      	ldr	r1, [pc, #172]	; (80a3bfc <_ZN10PongPaddle4tickEP8PongBall+0x138>)
 80a3b50:	f008 fc18 	bl	80ac384 <__aeabi_fcmpge>
 80a3b54:	2800      	cmp	r0, #0
 80a3b56:	d048      	beq.n	80a3bea <_ZN10PongPaddle4tickEP8PongBall+0x126>
            y = STRIP_LENGTH-len;
 80a3b58:	f1c6 003a 	rsb	r0, r6, #58	; 0x3a
 80a3b5c:	f008 fa0c 	bl	80abf78 <__aeabi_i2f>
            yVel = 0;
 80a3b60:	6127      	str	r7, [r4, #16]
            y = STRIP_LENGTH-len;
 80a3b62:	60a0      	str	r0, [r4, #8]
}
 80a3b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            else if (y > pb->y) { yVel = -maxYVel; }
 80a3b68:	4629      	mov	r1, r5
 80a3b6a:	4640      	mov	r0, r8
 80a3b6c:	f008 fc14 	bl	80ac398 <__aeabi_fcmpgt>
 80a3b70:	2800      	cmp	r0, #0
 80a3b72:	d0e0      	beq.n	80a3b36 <_ZN10PongPaddle4tickEP8PongBall+0x72>
 80a3b74:	69a3      	ldr	r3, [r4, #24]
 80a3b76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a3b7a:	6123      	str	r3, [r4, #16]
 80a3b7c:	e7db      	b.n	80a3b36 <_ZN10PongPaddle4tickEP8PongBall+0x72>
            if (abs(y+len/2 - STRIP_LENGTH/2) > len/4) {
 80a3b7e:	eb06 70d6 	add.w	r0, r6, r6, lsr #31
 80a3b82:	1040      	asrs	r0, r0, #1
 80a3b84:	f008 f9f8 	bl	80abf78 <__aeabi_i2f>
 80a3b88:	68a1      	ldr	r1, [r4, #8]
 80a3b8a:	f008 f941 	bl	80abe10 <__addsf3>
 80a3b8e:	491c      	ldr	r1, [pc, #112]	; (80a3c00 <_ZN10PongPaddle4tickEP8PongBall+0x13c>)
 80a3b90:	4680      	mov	r8, r0
 80a3b92:	f008 f93b 	bl	80abe0c <__aeabi_fsub>
 80a3b96:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80a3b9a:	4630      	mov	r0, r6
 80a3b9c:	2e00      	cmp	r6, #0
 80a3b9e:	bfb8      	it	lt
 80a3ba0:	1cf0      	addlt	r0, r6, #3
 80a3ba2:	1080      	asrs	r0, r0, #2
 80a3ba4:	f008 f9e8 	bl	80abf78 <__aeabi_i2f>
 80a3ba8:	4601      	mov	r1, r0
 80a3baa:	4628      	mov	r0, r5
 80a3bac:	f008 fbf4 	bl	80ac398 <__aeabi_fcmpgt>
 80a3bb0:	b1c8      	cbz	r0, 80a3be6 <_ZN10PongPaddle4tickEP8PongBall+0x122>
                if (y+len/2 > STRIP_LENGTH/2) { yVel = 1.0 < maxYVel ? -1.0 : -maxYVel; }
 80a3bb2:	4913      	ldr	r1, [pc, #76]	; (80a3c00 <_ZN10PongPaddle4tickEP8PongBall+0x13c>)
 80a3bb4:	4640      	mov	r0, r8
 80a3bb6:	f008 fbef 	bl	80ac398 <__aeabi_fcmpgt>
 80a3bba:	69a5      	ldr	r5, [r4, #24]
 80a3bbc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a3bc0:	b148      	cbz	r0, 80a3bd6 <_ZN10PongPaddle4tickEP8PongBall+0x112>
 80a3bc2:	4628      	mov	r0, r5
 80a3bc4:	f008 fbe8 	bl	80ac398 <__aeabi_fcmpgt>
 80a3bc8:	b918      	cbnz	r0, 80a3bd2 <_ZN10PongPaddle4tickEP8PongBall+0x10e>
 80a3bca:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
                else { yVel = 1.0 < maxYVel ? 1.0 : maxYVel; }
 80a3bce:	6125      	str	r5, [r4, #16]
 80a3bd0:	e7b1      	b.n	80a3b36 <_ZN10PongPaddle4tickEP8PongBall+0x72>
                if (y+len/2 > STRIP_LENGTH/2) { yVel = 1.0 < maxYVel ? -1.0 : -maxYVel; }
 80a3bd2:	4d0c      	ldr	r5, [pc, #48]	; (80a3c04 <_ZN10PongPaddle4tickEP8PongBall+0x140>)
 80a3bd4:	e7fb      	b.n	80a3bce <_ZN10PongPaddle4tickEP8PongBall+0x10a>
                else { yVel = 1.0 < maxYVel ? 1.0 : maxYVel; }
 80a3bd6:	4628      	mov	r0, r5
 80a3bd8:	f008 fbde 	bl	80ac398 <__aeabi_fcmpgt>
 80a3bdc:	2800      	cmp	r0, #0
 80a3bde:	d0f6      	beq.n	80a3bce <_ZN10PongPaddle4tickEP8PongBall+0x10a>
 80a3be0:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 80a3be4:	e7f3      	b.n	80a3bce <_ZN10PongPaddle4tickEP8PongBall+0x10a>
                yVel = 0;
 80a3be6:	6127      	str	r7, [r4, #16]
 80a3be8:	e7a5      	b.n	80a3b36 <_ZN10PongPaddle4tickEP8PongBall+0x72>
        } else if (y <= 0) {
 80a3bea:	2100      	movs	r1, #0
 80a3bec:	4628      	mov	r0, r5
 80a3bee:	f008 fbbf 	bl	80ac370 <__aeabi_fcmple>
 80a3bf2:	2800      	cmp	r0, #0
 80a3bf4:	d0b6      	beq.n	80a3b64 <_ZN10PongPaddle4tickEP8PongBall+0xa0>
            y = 0;
 80a3bf6:	60a7      	str	r7, [r4, #8]
            yVel = 0;
 80a3bf8:	6127      	str	r7, [r4, #16]
}
 80a3bfa:	e7b3      	b.n	80a3b64 <_ZN10PongPaddle4tickEP8PongBall+0xa0>
 80a3bfc:	42680000 	.word	0x42680000
 80a3c00:	41e80000 	.word	0x41e80000
 80a3c04:	bf800000 	.word	0xbf800000

080a3c08 <_ZN10PongPaddle4xPosEv>:
int PongPaddle::xPos() { return (int) x; }
 80a3c08:	b508      	push	{r3, lr}
 80a3c0a:	6840      	ldr	r0, [r0, #4]
 80a3c0c:	f008 fbe4 	bl	80ac3d8 <__aeabi_f2iz>
 80a3c10:	bd08      	pop	{r3, pc}

080a3c12 <_ZN10PongPaddle4yPosEv>:
int PongPaddle::yPos() { return (int) y; }
 80a3c12:	b508      	push	{r3, lr}
 80a3c14:	6880      	ldr	r0, [r0, #8]
 80a3c16:	f008 fbdf 	bl	80ac3d8 <__aeabi_f2iz>
 80a3c1a:	bd08      	pop	{r3, pc}

080a3c1c <_ZN10PongPaddle8setColorEiii>:
    this->g = g;
 80a3c1c:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
    this->b = b;
 80a3c20:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80a3c22:	4770      	bx	lr

080a3c24 <_Z9web_indexR9WebServerNS_14ConnectionTypeEPcbPv>:
 * Function: web_index
 * Description: Static callback function to display the homepage of the web server
 * Parameters: See Webduino documentation
 *             obj is a pointer to the instance of Server that added the callback
 * ================================================================== */
void web_index(WebServer &server, WebServer::ConnectionType type, char * c, bool b, void * obj) {
 80a3c24:	b538      	push	{r3, r4, r5, lr}
 80a3c26:	460d      	mov	r5, r1
    server.httpSuccess();
 80a3c28:	2200      	movs	r2, #0
 80a3c2a:	4906      	ldr	r1, [pc, #24]	; (80a3c44 <_Z9web_indexR9WebServerNS_14ConnectionTypeEPcbPv+0x20>)
void web_index(WebServer &server, WebServer::ConnectionType type, char * c, bool b, void * obj) {
 80a3c2c:	4604      	mov	r4, r0
    server.httpSuccess();
 80a3c2e:	f001 f8dd 	bl	80a4dec <_ZN9WebServer11httpSuccessEPKcS1_>

    if (type != WebServer::HEAD) {
 80a3c32:	2d02      	cmp	r5, #2
 80a3c34:	d005      	beq.n	80a3c42 <_Z9web_indexR9WebServerNS_14ConnectionTypeEPcbPv+0x1e>
      server.printP(control_panel);
 80a3c36:	4620      	mov	r0, r4
    }
}
 80a3c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      server.printP(control_panel);
 80a3c3c:	4902      	ldr	r1, [pc, #8]	; (80a3c48 <_Z9web_indexR9WebServerNS_14ConnectionTypeEPcbPv+0x24>)
 80a3c3e:	f001 b813 	b.w	80a4c68 <_ZN9WebServer6printPEPKh>
}
 80a3c42:	bd38      	pop	{r3, r4, r5, pc}
 80a3c44:	080acaf1 	.word	0x080acaf1
 80a3c48:	080acb42 	.word	0x080acb42

080a3c4c <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv>:
 * Function: web_input
 * Description: Static callback function to handle input to the server
 * Parameters: See Webduino documentation
 *             obj is a pointer to the instance of Server that added the callback
 * ================================================================== */
void web_input(WebServer &server, WebServer::ConnectionType type, char * c, bool b, void * obj) {
 80a3c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (type == WebServer::POST) {
 80a3c50:	2903      	cmp	r1, #3
void web_input(WebServer &server, WebServer::ConnectionType type, char * c, bool b, void * obj) {
 80a3c52:	b08a      	sub	sp, #40	; 0x28
 80a3c54:	4604      	mov	r4, r0
 80a3c56:	460e      	mov	r6, r1
 80a3c58:	9d12      	ldr	r5, [sp, #72]	; 0x48
    if (type == WebServer::POST) {
 80a3c5a:	d153      	bne.n	80a3d04 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0xb8>
        char name[16], value[16];
        do {
            // Read all POST params, returns false when no more params
            repeat = server.readPOSTparam(name, 16, value, 16);

            if (strcmp(name, "visualizer") == 0) {
 80a3c5c:	4f2f      	ldr	r7, [pc, #188]	; (80a3d1c <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0xd0>)
                    case VISUALIZER_BASS_SLIDE:
                        s->set_visualizer(type); break;
                    default:
                        s->set_visualizer(VISUALIZER_BARS); break;
                }
            } else if (strcmp(name, "other") == 0) {
 80a3c5e:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80a3d30 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0xe4>
                    case AMBIENT_LIGHTING:
                        s->set_visualizer(type); break;
                    default:
                        s->set_visualizer(BOUNCING_LINES); break;
                }
            } else if (strcmp(name, "power") == 0) {
 80a3c62:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80a3d34 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0xe8>
            repeat = server.readPOSTparam(name, 16, value, 16);
 80a3c66:	2210      	movs	r2, #16
 80a3c68:	ab06      	add	r3, sp, #24
 80a3c6a:	9200      	str	r2, [sp, #0]
 80a3c6c:	a902      	add	r1, sp, #8
 80a3c6e:	4620      	mov	r0, r4
 80a3c70:	f001 f9fd 	bl	80a506e <_ZN9WebServer13readPOSTparamEPciS0_i>
            if (strcmp(name, "visualizer") == 0) {
 80a3c74:	4639      	mov	r1, r7
            repeat = server.readPOSTparam(name, 16, value, 16);
 80a3c76:	4606      	mov	r6, r0
            if (strcmp(name, "visualizer") == 0) {
 80a3c78:	a802      	add	r0, sp, #8
 80a3c7a:	f008 fc96 	bl	80ac5aa <strcmp>
 80a3c7e:	4601      	mov	r1, r0
 80a3c80:	b9b8      	cbnz	r0, 80a3cb2 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x66>
                int type = strtol(value, NULL, 10);
 80a3c82:	220a      	movs	r2, #10
 80a3c84:	a806      	add	r0, sp, #24
 80a3c86:	f008 fd53 	bl	80ac730 <strtol>
                switch (type) {
 80a3c8a:	2802      	cmp	r0, #2
 80a3c8c:	dc03      	bgt.n	80a3c96 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x4a>
 80a3c8e:	2800      	cmp	r0, #0
 80a3c90:	db04      	blt.n	80a3c9c <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x50>
    visualizer_type = type;
 80a3c92:	61e8      	str	r0, [r5, #28]
}
 80a3c94:	e004      	b.n	80a3ca0 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x54>
                switch (type) {
 80a3c96:	1f03      	subs	r3, r0, #4
 80a3c98:	2b05      	cmp	r3, #5
 80a3c9a:	d9fa      	bls.n	80a3c92 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x46>
    visualizer_type = type;
 80a3c9c:	2300      	movs	r3, #0
 80a3c9e:	61eb      	str	r3, [r5, #28]
        do {
 80a3ca0:	2e00      	cmp	r6, #0
 80a3ca2:	d1e0      	bne.n	80a3c66 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x1a>
                s->set_power(strtol(value, NULL, 10));
            }
        } while (repeat);
            // after procesing the POST data, tell the web browser to reload
            // the page using a GET method.
            server.httpSeeOther("/web_input");
 80a3ca4:	4620      	mov	r0, r4
 80a3ca6:	491e      	ldr	r1, [pc, #120]	; (80a3d20 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0xd4>)
 80a3ca8:	f001 f8f2 	bl	80a4e90 <_ZN9WebServer12httpSeeOtherEPKc>

        /* we don't output the body for a HEAD request */
        if (type == WebServer::GET) {
            server.printP(control_panel);
        }
}
 80a3cac:	b00a      	add	sp, #40	; 0x28
 80a3cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            } else if (strcmp(name, "other") == 0) {
 80a3cb2:	4641      	mov	r1, r8
 80a3cb4:	a802      	add	r0, sp, #8
 80a3cb6:	f008 fc78 	bl	80ac5aa <strcmp>
 80a3cba:	4601      	mov	r1, r0
 80a3cbc:	b988      	cbnz	r0, 80a3ce2 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x96>
                int type = strtol(value, NULL, 10);
 80a3cbe:	220a      	movs	r2, #10
 80a3cc0:	a806      	add	r0, sp, #24
 80a3cc2:	f008 fd35 	bl	80ac730 <strtol>
                switch (type) {
 80a3cc6:	2842      	cmp	r0, #66	; 0x42
 80a3cc8:	d0e3      	beq.n	80a3c92 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x46>
 80a3cca:	f1a0 024d 	sub.w	r2, r0, #77	; 0x4d
 80a3cce:	2a16      	cmp	r2, #22
 80a3cd0:	d804      	bhi.n	80a3cdc <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x90>
 80a3cd2:	2301      	movs	r3, #1
 80a3cd4:	4093      	lsls	r3, r2
 80a3cd6:	4a13      	ldr	r2, [pc, #76]	; (80a3d24 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0xd8>)
 80a3cd8:	4213      	tst	r3, r2
 80a3cda:	d1da      	bne.n	80a3c92 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x46>
    visualizer_type = type;
 80a3cdc:	234d      	movs	r3, #77	; 0x4d
 80a3cde:	61eb      	str	r3, [r5, #28]
}
 80a3ce0:	e7de      	b.n	80a3ca0 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x54>
            } else if (strcmp(name, "power") == 0) {
 80a3ce2:	4649      	mov	r1, r9
 80a3ce4:	a802      	add	r0, sp, #8
 80a3ce6:	f008 fc60 	bl	80ac5aa <strcmp>
 80a3cea:	4682      	mov	sl, r0
 80a3cec:	2800      	cmp	r0, #0
 80a3cee:	d1d7      	bne.n	80a3ca0 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x54>
                s->set_power(strtol(value, NULL, 10));
 80a3cf0:	4601      	mov	r1, r0
 80a3cf2:	220a      	movs	r2, #10
 80a3cf4:	a806      	add	r0, sp, #24
 80a3cf6:	f008 fd1b 	bl	80ac730 <strtol>
        power_status = onOff;
 80a3cfa:	2801      	cmp	r0, #1
 80a3cfc:	bf88      	it	hi
 80a3cfe:	4650      	movhi	r0, sl
 80a3d00:	61a8      	str	r0, [r5, #24]
 80a3d02:	e7cd      	b.n	80a3ca0 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x54>
        server.httpSuccess();
 80a3d04:	2200      	movs	r2, #0
 80a3d06:	4908      	ldr	r1, [pc, #32]	; (80a3d28 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0xdc>)
 80a3d08:	f001 f870 	bl	80a4dec <_ZN9WebServer11httpSuccessEPKcS1_>
        if (type == WebServer::GET) {
 80a3d0c:	2e01      	cmp	r6, #1
 80a3d0e:	d1cd      	bne.n	80a3cac <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x60>
            server.printP(control_panel);
 80a3d10:	4620      	mov	r0, r4
 80a3d12:	4906      	ldr	r1, [pc, #24]	; (80a3d2c <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0xe0>)
 80a3d14:	f000 ffa8 	bl	80a4c68 <_ZN9WebServer6printPEPKh>
 80a3d18:	e7c8      	b.n	80a3cac <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x60>
 80a3d1a:	bf00      	nop
 80a3d1c:	080acb0a 	.word	0x080acb0a
 80a3d20:	080acb21 	.word	0x080acb21
 80a3d24:	00400803 	.word	0x00400803
 80a3d28:	080acaf1 	.word	0x080acaf1
 80a3d2c:	080acb42 	.word	0x080acb42
 80a3d30:	080acb15 	.word	0x080acb15
 80a3d34:	080acb1b 	.word	0x080acb1b

080a3d38 <_ZN6ServerC1Ev>:
Server::Server() {}
 80a3d38:	4770      	bx	lr
	...

080a3d3c <_ZN6Server4initEv>:
void Server::init() {
 80a3d3c:	b530      	push	{r4, r5, lr}
 80a3d3e:	4604      	mov	r4, r0
    webserver.setDefaultCommand(&web_index);
 80a3d40:	4d18      	ldr	r5, [pc, #96]	; (80a3da4 <_ZN6Server4initEv+0x68>)
void Server::init() {
 80a3d42:	b089      	sub	sp, #36	; 0x24
    webserver.setDefaultCommand(&web_index);
 80a3d44:	4628      	mov	r0, r5
 80a3d46:	4918      	ldr	r1, [pc, #96]	; (80a3da8 <_ZN6Server4initEv+0x6c>)
 80a3d48:	f000 ff51 	bl	80a4bee <_ZN9WebServer17setDefaultCommandEPFvRS_NS_14ConnectionTypeEPcbPvE>
    webserver.addCommand("web_input", &web_input, this);
 80a3d4c:	4623      	mov	r3, r4
 80a3d4e:	4628      	mov	r0, r5
 80a3d50:	4a16      	ldr	r2, [pc, #88]	; (80a3dac <_ZN6Server4initEv+0x70>)
 80a3d52:	4917      	ldr	r1, [pc, #92]	; (80a3db0 <_ZN6Server4initEv+0x74>)
 80a3d54:	f000 ff4e 	bl	80a4bf4 <_ZN9WebServer10addCommandEPKcPFvRS_NS_14ConnectionTypeEPcbPvES5_>
    webserver.begin();
 80a3d58:	4628      	mov	r0, r5
 80a3d5a:	f000 ff45 	bl	80a4be8 <_ZN9WebServer5beginEv>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a3d5e:	4621      	mov	r1, r4
 80a3d60:	2300      	movs	r3, #0
 80a3d62:	2204      	movs	r2, #4
 80a3d64:	4813      	ldr	r0, [pc, #76]	; (80a3db4 <_ZN6Server4initEv+0x78>)
 80a3d66:	f001 fd03 	bl	80a5770 <spark_variable>
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a3d6a:	2200      	movs	r2, #0
 80a3d6c:	4b12      	ldr	r3, [pc, #72]	; (80a3db8 <_ZN6Server4initEv+0x7c>)
 80a3d6e:	4611      	mov	r1, r2
 80a3d70:	6858      	ldr	r0, [r3, #4]
 80a3d72:	f001 fd2d 	bl	80a57d0 <network_config>
        return IPAddress(wifi_config()->nw.aucIP);
 80a3d76:	1c81      	adds	r1, r0, #2
 80a3d78:	a802      	add	r0, sp, #8
 80a3d7a:	f002 f913 	bl	80a5fa4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    sprintf(myIpAddress, "%d.%d.%d.%d", myIp[0], myIp[1], myIp[2], myIp[3]);
 80a3d7e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80a3d82:	4620      	mov	r0, r4
 80a3d84:	9301      	str	r3, [sp, #4]
 80a3d86:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80a3d8a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a3d8e:	9300      	str	r3, [sp, #0]
 80a3d90:	490a      	ldr	r1, [pc, #40]	; (80a3dbc <_ZN6Server4initEv+0x80>)
 80a3d92:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80a3d96:	f001 fd9b 	bl	80a58d0 <sprintf>
    power_status = SERVER_POWER_ON;
 80a3d9a:	2301      	movs	r3, #1
 80a3d9c:	61a3      	str	r3, [r4, #24]
}
 80a3d9e:	b009      	add	sp, #36	; 0x24
 80a3da0:	bd30      	pop	{r4, r5, pc}
 80a3da2:	bf00      	nop
 80a3da4:	20000f00 	.word	0x20000f00
 80a3da8:	080a3c25 	.word	0x080a3c25
 80a3dac:	080a3c4d 	.word	0x080a3c4d
 80a3db0:	080acb22 	.word	0x080acb22
 80a3db4:	080acb2c 	.word	0x080acb2c
 80a3db8:	200014d0 	.word	0x200014d0
 80a3dbc:	080acb36 	.word	0x080acb36

080a3dc0 <_ZN6Server4tickEv>:
    int len = 256;
 80a3dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
void Server::tick() {
 80a3dc4:	b500      	push	{lr}
 80a3dc6:	b0c3      	sub	sp, #268	; 0x10c
    webserver.processConnection(buff, &len);
 80a3dc8:	4804      	ldr	r0, [pc, #16]	; (80a3ddc <_ZN6Server4tickEv+0x1c>)
 80a3dca:	aa01      	add	r2, sp, #4
 80a3dcc:	a902      	add	r1, sp, #8
    int len = 256;
 80a3dce:	9301      	str	r3, [sp, #4]
    webserver.processConnection(buff, &len);
 80a3dd0:	f001 fa30 	bl	80a5234 <_ZN9WebServer17processConnectionEPcPi>
}
 80a3dd4:	b043      	add	sp, #268	; 0x10c
 80a3dd6:	f85d fb04 	ldr.w	pc, [sp], #4
 80a3dda:	bf00      	nop
 80a3ddc:	20000f00 	.word	0x20000f00

080a3de0 <_ZN6Server10powered_onEv>:
}
 80a3de0:	6980      	ldr	r0, [r0, #24]
 80a3de2:	4770      	bx	lr

080a3de4 <_ZN6Server10visualizerEv>:
}
 80a3de4:	69c0      	ldr	r0, [r0, #28]
 80a3de6:	4770      	bx	lr

080a3de8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a3de8:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a3dea:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a3dec:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a3dee:	b17c      	cbz	r4, 80a3e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a3df0:	6863      	ldr	r3, [r4, #4]
 80a3df2:	3b01      	subs	r3, #1
 80a3df4:	6063      	str	r3, [r4, #4]
 80a3df6:	b95b      	cbnz	r3, 80a3e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a3df8:	6823      	ldr	r3, [r4, #0]
 80a3dfa:	4620      	mov	r0, r4
 80a3dfc:	689b      	ldr	r3, [r3, #8]
 80a3dfe:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a3e00:	68a3      	ldr	r3, [r4, #8]
 80a3e02:	3b01      	subs	r3, #1
 80a3e04:	60a3      	str	r3, [r4, #8]
 80a3e06:	b91b      	cbnz	r3, 80a3e10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a3e08:	6823      	ldr	r3, [r4, #0]
 80a3e0a:	4620      	mov	r0, r4
 80a3e0c:	68db      	ldr	r3, [r3, #12]
 80a3e0e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a3e10:	4628      	mov	r0, r5
 80a3e12:	bd38      	pop	{r3, r4, r5, pc}

080a3e14 <_ZN9WebServerD1Ev>:
                       URLPARAM_VALUE_OFLO,
                       URLPARAM_BOTH_OFLO,
                       URLPARAM_EOS         // No params left
};

class WebServer: public Print
 80a3e14:	b538      	push	{r3, r4, r5, lr}
 80a3e16:	4604      	mov	r4, r0
 80a3e18:	4b09      	ldr	r3, [pc, #36]	; (80a3e40 <_ZN9WebServerD1Ev+0x2c>)
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a3e1a:	4d0a      	ldr	r5, [pc, #40]	; (80a3e44 <_ZN9WebServerD1Ev+0x30>)
 80a3e1c:	6003      	str	r3, [r0, #0]
 80a3e1e:	6385      	str	r5, [r0, #56]	; 0x38
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a3e20:	3050      	adds	r0, #80	; 0x50
 80a3e22:	f7ff ffe1 	bl	80a3de8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    sock_handle_t _sock;
    TCPClient _client;

public:
    TCPServer(uint16_t, network_interface_t nif=0);
    ~TCPServer() { stop(); }
 80a3e26:	4620      	mov	r0, r4
 80a3e28:	4b07      	ldr	r3, [pc, #28]	; (80a3e48 <_ZN9WebServerD1Ev+0x34>)
 80a3e2a:	f840 3f08 	str.w	r3, [r0, #8]!
 80a3e2e:	f002 fe4b 	bl	80a6ac8 <_ZN9TCPServer4stopEv>
 80a3e32:	61e5      	str	r5, [r4, #28]
 80a3e34:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80a3e38:	f7ff ffd6 	bl	80a3de8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3e3c:	4620      	mov	r0, r4
 80a3e3e:	bd38      	pop	{r3, r4, r5, pc}
 80a3e40:	080ad378 	.word	0x080ad378
 80a3e44:	080ad5fc 	.word	0x080ad5fc
 80a3e48:	080ad6bc 	.word	0x080ad6bc

080a3e4c <_ZN9WebServerD0Ev>:
 80a3e4c:	b510      	push	{r4, lr}
 80a3e4e:	4604      	mov	r4, r0
 80a3e50:	f7ff ffe0 	bl	80a3e14 <_ZN9WebServerD1Ev>
 80a3e54:	4620      	mov	r0, r4
 80a3e56:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80a3e5a:	f003 fd34 	bl	80a78c6 <_ZdlPvj>
 80a3e5e:	4620      	mov	r0, r4
 80a3e60:	bd10      	pop	{r4, pc}
	...

080a3e64 <_GLOBAL__sub_I_webserver>:
}
 80a3e64:	b510      	push	{r4, lr}
WebServer webserver(PREFIX, 80);
 80a3e66:	4c06      	ldr	r4, [pc, #24]	; (80a3e80 <_GLOBAL__sub_I_webserver+0x1c>)
 80a3e68:	2250      	movs	r2, #80	; 0x50
 80a3e6a:	4620      	mov	r0, r4
 80a3e6c:	4905      	ldr	r1, [pc, #20]	; (80a3e84 <_GLOBAL__sub_I_webserver+0x20>)
 80a3e6e:	f000 fe97 	bl	80a4ba0 <_ZN9WebServerC1EPKct>
 80a3e72:	4620      	mov	r0, r4
}
 80a3e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
WebServer webserver(PREFIX, 80);
 80a3e78:	4a03      	ldr	r2, [pc, #12]	; (80a3e88 <_GLOBAL__sub_I_webserver+0x24>)
 80a3e7a:	4904      	ldr	r1, [pc, #16]	; (80a3e8c <_GLOBAL__sub_I_webserver+0x28>)
 80a3e7c:	f003 bd1e 	b.w	80a78bc <__aeabi_atexit>
 80a3e80:	20000f00 	.word	0x20000f00
 80a3e84:	080ad33e 	.word	0x080ad33e
 80a3e88:	2000006c 	.word	0x2000006c
 80a3e8c:	080a3e15 	.word	0x080a3e15

080a3e90 <_ZN6BufferC1Et>:
#include "Buffer.h"

Buffer::Buffer(uint16_t size) {
 80a3e90:	b538      	push	{r3, r4, r5, lr}
 80a3e92:	2300      	movs	r3, #0
 80a3e94:	80c3      	strh	r3, [r0, #6]
 80a3e96:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80a3e9a:	4604      	mov	r4, r0
 80a3e9c:	6083      	str	r3, [r0, #8]
  this->data = (uint8_t *) malloc(size);
 80a3e9e:	4608      	mov	r0, r1
Buffer::Buffer(uint16_t size) {
 80a3ea0:	460d      	mov	r5, r1
  this->data = (uint8_t *) malloc(size);
 80a3ea2:	f001 fcfd 	bl	80a58a0 <malloc>
  this->size = data != NULL? size : 0;
 80a3ea6:	2800      	cmp	r0, #0
 80a3ea8:	bf08      	it	eq
 80a3eaa:	2500      	moveq	r5, #0
  this->data = (uint8_t *) malloc(size);
 80a3eac:	6020      	str	r0, [r4, #0]
  this->size = data != NULL? size : 0;
 80a3eae:	80a5      	strh	r5, [r4, #4]
}
 80a3eb0:	4620      	mov	r0, r4
 80a3eb2:	bd38      	pop	{r3, r4, r5, pc}

080a3eb4 <_ZN6Buffer9availableEv>:

uint16_t Buffer::available() {
  return offset < limit? limit - offset : offset - limit;
 80a3eb4:	8903      	ldrh	r3, [r0, #8]
 80a3eb6:	88c0      	ldrh	r0, [r0, #6]
 80a3eb8:	4283      	cmp	r3, r0
 80a3eba:	bf34      	ite	cc
 80a3ebc:	1ac3      	subcc	r3, r0, r3
 80a3ebe:	1a1b      	subcs	r3, r3, r0
 80a3ec0:	b298      	uxth	r0, r3
}
 80a3ec2:	4770      	bx	lr

080a3ec4 <_ZN6Buffer4markEv>:

void Buffer::mark() {
  if (markOffset == INVALID_MARK_OFFSET) {
 80a3ec4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a3ec8:	8942      	ldrh	r2, [r0, #10]
 80a3eca:	429a      	cmp	r2, r3
    markOffset = offset;
 80a3ecc:	bf04      	itt	eq
 80a3ece:	8903      	ldrheq	r3, [r0, #8]
 80a3ed0:	8143      	strheq	r3, [r0, #10]
  }
}
 80a3ed2:	4770      	bx	lr

080a3ed4 <_ZN6Buffer5resetEv>:

void Buffer::reset() {
  if (markOffset != INVALID_MARK_OFFSET) {
 80a3ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a3ed8:	8942      	ldrh	r2, [r0, #10]
 80a3eda:	429a      	cmp	r2, r3
    offset = markOffset;
 80a3edc:	bf1c      	itt	ne
 80a3ede:	8102      	strhne	r2, [r0, #8]
    markOffset = INVALID_MARK_OFFSET;
 80a3ee0:	8143      	strhne	r3, [r0, #10]
  }
}
 80a3ee2:	4770      	bx	lr

080a3ee4 <_ZN6Buffer9setOffsetEt>:

void Buffer::setOffset(uint16_t offset) {
  this->offset = offset;
 80a3ee4:	8101      	strh	r1, [r0, #8]
}
 80a3ee6:	4770      	bx	lr

080a3ee8 <_ZN6Buffer9getOffsetEv>:

uint16_t Buffer::getOffset() {
  return offset;
}
 80a3ee8:	8900      	ldrh	r0, [r0, #8]
 80a3eea:	4770      	bx	lr

080a3eec <_ZN6Buffer4readEP3UDP>:

void Buffer::read(UDP * udp) {
 80a3eec:	b510      	push	{r4, lr}
  offset = 0;
 80a3eee:	2300      	movs	r3, #0
void Buffer::read(UDP * udp) {
 80a3ef0:	4604      	mov	r4, r0
  offset = 0;
 80a3ef2:	8123      	strh	r3, [r4, #8]
  limit = udp->read(data, size);
 80a3ef4:	680b      	ldr	r3, [r1, #0]
void Buffer::read(UDP * udp) {
 80a3ef6:	4608      	mov	r0, r1
  limit = udp->read(data, size);
 80a3ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3efa:	88a2      	ldrh	r2, [r4, #4]
 80a3efc:	6821      	ldr	r1, [r4, #0]
 80a3efe:	4798      	blx	r3
 80a3f00:	80e0      	strh	r0, [r4, #6]
}
 80a3f02:	bd10      	pop	{r4, pc}

080a3f04 <_ZN6Buffer9readUInt8Ev>:

uint8_t Buffer::readUInt8() {
  return data[offset++];
 80a3f04:	8903      	ldrh	r3, [r0, #8]
 80a3f06:	6802      	ldr	r2, [r0, #0]
 80a3f08:	1c59      	adds	r1, r3, #1
 80a3f0a:	8101      	strh	r1, [r0, #8]
}
 80a3f0c:	5cd0      	ldrb	r0, [r2, r3]
 80a3f0e:	4770      	bx	lr

080a3f10 <_ZN6Buffer10readUInt16Ev>:

uint16_t Buffer::readUInt16() {
 80a3f10:	b538      	push	{r3, r4, r5, lr}
 80a3f12:	4605      	mov	r5, r0
  return readUInt8() << 8 | readUInt8();
 80a3f14:	f7ff fff6 	bl	80a3f04 <_ZN6Buffer9readUInt8Ev>
 80a3f18:	4604      	mov	r4, r0
 80a3f1a:	4628      	mov	r0, r5
 80a3f1c:	f7ff fff2 	bl	80a3f04 <_ZN6Buffer9readUInt8Ev>
 80a3f20:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 80a3f24:	b280      	uxth	r0, r0
 80a3f26:	bd38      	pop	{r3, r4, r5, pc}

080a3f28 <_ZN6Buffer10writeUInt8Eh>:

void Buffer::writeUInt8(uint8_t value) {
  if (offset < size) {
 80a3f28:	8903      	ldrh	r3, [r0, #8]
 80a3f2a:	8882      	ldrh	r2, [r0, #4]
void Buffer::writeUInt8(uint8_t value) {
 80a3f2c:	b510      	push	{r4, lr}
  if (offset < size) {
 80a3f2e:	429a      	cmp	r2, r3
    data[offset++] = value;
 80a3f30:	bf81      	itttt	hi
 80a3f32:	6802      	ldrhi	r2, [r0, #0]
 80a3f34:	1c5c      	addhi	r4, r3, #1
 80a3f36:	8104      	strhhi	r4, [r0, #8]
 80a3f38:	54d1      	strbhi	r1, [r2, r3]
  }
}
 80a3f3a:	bd10      	pop	{r4, pc}

080a3f3c <_ZN6Buffer11writeUInt16Et>:

void Buffer::writeUInt16(uint16_t value) {
 80a3f3c:	b538      	push	{r3, r4, r5, lr}
 80a3f3e:	460c      	mov	r4, r1
  writeUInt8(value >> 8);
 80a3f40:	0a09      	lsrs	r1, r1, #8
 80a3f42:	f7ff fff1 	bl	80a3f28 <_ZN6Buffer10writeUInt8Eh>
  writeUInt8(value);
 80a3f46:	b2e1      	uxtb	r1, r4
}
 80a3f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeUInt8(value);
 80a3f4c:	f7ff bfec 	b.w	80a3f28 <_ZN6Buffer10writeUInt8Eh>

080a3f50 <_ZN6Buffer11writeUInt32Em>:

void Buffer::writeUInt32(uint32_t value) {
 80a3f50:	b538      	push	{r3, r4, r5, lr}
 80a3f52:	460c      	mov	r4, r1
  writeUInt8(value >> 24);
 80a3f54:	0e09      	lsrs	r1, r1, #24
 80a3f56:	f7ff ffe7 	bl	80a3f28 <_ZN6Buffer10writeUInt8Eh>
  writeUInt8(value >> 16);
 80a3f5a:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80a3f5e:	f7ff ffe3 	bl	80a3f28 <_ZN6Buffer10writeUInt8Eh>
  writeUInt8(value >> 8);
 80a3f62:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80a3f66:	f7ff ffdf 	bl	80a3f28 <_ZN6Buffer10writeUInt8Eh>
  writeUInt8(value);
 80a3f6a:	b2e1      	uxtb	r1, r4
}
 80a3f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeUInt8(value);
 80a3f70:	f7ff bfda 	b.w	80a3f28 <_ZN6Buffer10writeUInt8Eh>

080a3f74 <_ZN6Buffer5writeEP3UDP>:

void Buffer::write(UDP * udp) {
 80a3f74:	b510      	push	{r4, lr}
 80a3f76:	4604      	mov	r4, r0
  udp->write(data, offset);
 80a3f78:	680b      	ldr	r3, [r1, #0]
void Buffer::write(UDP * udp) {
 80a3f7a:	4608      	mov	r0, r1
  udp->write(data, offset);
 80a3f7c:	68db      	ldr	r3, [r3, #12]
 80a3f7e:	8922      	ldrh	r2, [r4, #8]
 80a3f80:	6821      	ldr	r1, [r4, #0]
 80a3f82:	4798      	blx	r3

  offset = 0;
 80a3f84:	2300      	movs	r3, #0
 80a3f86:	8123      	strh	r3, [r4, #8]
}
 80a3f88:	bd10      	pop	{r4, pc}

080a3f8a <_ZN6Buffer5clearEv>:

void Buffer::clear() {
  offset = 0;
 80a3f8a:	2300      	movs	r3, #0
 80a3f8c:	8103      	strh	r3, [r0, #8]
  limit = 0;
 80a3f8e:	80c3      	strh	r3, [r0, #6]
}
 80a3f90:	4770      	bx	lr

080a3f92 <_ZN5Label7matchedEtt>:

  return label;
}

void Label::matched(uint16_t type, uint16_t cls) {
}
 80a3f92:	4770      	bx	lr

080a3f94 <_ZN9HostLabel7matchedEtt>:
  this->aRecord = aRecord;
  this->nsecRecord = nsecRecord;
}

void HostLabel::matched(uint16_t type, uint16_t cls) {
  switch(type) {
 80a3f94:	2901      	cmp	r1, #1
void HostLabel::matched(uint16_t type, uint16_t cls) {
 80a3f96:	b510      	push	{r4, lr}
 80a3f98:	4604      	mov	r4, r0
  switch(type) {
 80a3f9a:	d001      	beq.n	80a3fa0 <_ZN9HostLabel7matchedEtt+0xc>
 80a3f9c:	29ff      	cmp	r1, #255	; 0xff
 80a3f9e:	d107      	bne.n	80a3fb0 <_ZN9HostLabel7matchedEtt+0x1c>
    case A_TYPE:
    case ANY_TYPE:
    aRecord->setAnswerRecord();
 80a3fa0:	69a0      	ldr	r0, [r4, #24]
 80a3fa2:	f000 fd7d 	bl	80a4aa0 <_ZN6Record15setAnswerRecordEv>
    nsecRecord->setAdditionalRecord();
 80a3fa6:	69e0      	ldr	r0, [r4, #28]
    break;

    default:
    nsecRecord->setAnswerRecord();
  }
}
 80a3fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nsecRecord->setAdditionalRecord();
 80a3fac:	f000 bd82 	b.w	80a4ab4 <_ZN6Record19setAdditionalRecordEv>
    nsecRecord->setAnswerRecord();
 80a3fb0:	69c0      	ldr	r0, [r0, #28]
}
 80a3fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nsecRecord->setAnswerRecord();
 80a3fb6:	f000 bd73 	b.w	80a4aa0 <_ZN6Record15setAnswerRecordEv>
	...

080a3fbc <_ZN5LabelC1E6StringPS_b>:
Label::Label(String name, Label * nextLabel, bool caseSensitive) {
 80a3fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3fc0:	461f      	mov	r7, r3
 80a3fc2:	4b15      	ldr	r3, [pc, #84]	; (80a4018 <_ZN5LabelC1E6StringPS_b+0x5c>)
 80a3fc4:	2600      	movs	r6, #0
 80a3fc6:	6003      	str	r3, [r0, #0]
 80a3fc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a3fcc:	4604      	mov	r4, r0
 80a3fce:	6046      	str	r6, [r0, #4]
 80a3fd0:	8283      	strh	r3, [r0, #20]
  data = (uint8_t *) malloc(name.length() + 1);
 80a3fd2:	6888      	ldr	r0, [r1, #8]
Label::Label(String name, Label * nextLabel, bool caseSensitive) {
 80a3fd4:	460d      	mov	r5, r1
  data = (uint8_t *) malloc(name.length() + 1);
 80a3fd6:	3001      	adds	r0, #1
Label::Label(String name, Label * nextLabel, bool caseSensitive) {
 80a3fd8:	4690      	mov	r8, r2
  data = (uint8_t *) malloc(name.length() + 1);
 80a3fda:	f001 fc61 	bl	80a58a0 <malloc>
 80a3fde:	60a0      	str	r0, [r4, #8]
  if (data) {
 80a3fe0:	b188      	cbz	r0, 80a4006 <_ZN5LabelC1E6StringPS_b+0x4a>
    data[0] = name.length();
 80a3fe2:	68ab      	ldr	r3, [r5, #8]
 80a3fe4:	7003      	strb	r3, [r0, #0]
    for (uint8_t i = 0; i < name.length(); i++) {
 80a3fe6:	68ab      	ldr	r3, [r5, #8]
 80a3fe8:	b2f1      	uxtb	r1, r6
 80a3fea:	428b      	cmp	r3, r1
 80a3fec:	f106 0601 	add.w	r6, r6, #1
 80a3ff0:	d90b      	bls.n	80a400a <_ZN5LabelC1E6StringPS_b+0x4e>
      data[i + 1] = name.charAt(i);
 80a3ff2:	4628      	mov	r0, r5
 80a3ff4:	f8d4 a008 	ldr.w	sl, [r4, #8]
 80a3ff8:	f101 0901 	add.w	r9, r1, #1
 80a3ffc:	f002 fa3d 	bl	80a647a <_ZNK6String6charAtEj>
 80a4000:	f80a 0009 	strb.w	r0, [sl, r9]
    for (uint8_t i = 0; i < name.length(); i++) {
 80a4004:	e7ef      	b.n	80a3fe6 <_ZN5LabelC1E6StringPS_b+0x2a>
    data = EMPTY_DATA;
 80a4006:	6863      	ldr	r3, [r4, #4]
 80a4008:	60a3      	str	r3, [r4, #8]
}
 80a400a:	4620      	mov	r0, r4
  this->nextLabel = nextLabel;
 80a400c:	f8c4 8010 	str.w	r8, [r4, #16]
  this->caseSensitive = caseSensitive;
 80a4010:	7327      	strb	r7, [r4, #12]
}
 80a4012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4016:	bf00      	nop
 80a4018:	080ad22c 	.word	0x080ad22c

080a401c <_ZN5Label5writeEP6Buffer>:
void Label::write(Buffer * buffer) {
 80a401c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a401e:	4604      	mov	r4, r0
 80a4020:	460d      	mov	r5, r1
    if (label->writeOffset == INVALID_OFFSET) {
 80a4022:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80a4026:	1c5a      	adds	r2, r3, #1
 80a4028:	d116      	bne.n	80a4058 <_ZN5Label5writeEP6Buffer+0x3c>
      label->writeOffset = buffer->getOffset();
 80a402a:	4628      	mov	r0, r5
 80a402c:	f7ff ff5c 	bl	80a3ee8 <_ZN6Buffer9getOffsetEv>
      uint8_t size = label->data[0] + 1;
 80a4030:	2700      	movs	r7, #0
 80a4032:	68a3      	ldr	r3, [r4, #8]
      label->writeOffset = buffer->getOffset();
 80a4034:	82a0      	strh	r0, [r4, #20]
      uint8_t size = label->data[0] + 1;
 80a4036:	781e      	ldrb	r6, [r3, #0]
 80a4038:	3601      	adds	r6, #1
 80a403a:	b2f6      	uxtb	r6, r6
      for (uint8_t i = 0; i < size; i++) {
 80a403c:	b2fb      	uxtb	r3, r7
 80a403e:	42b3      	cmp	r3, r6
 80a4040:	d206      	bcs.n	80a4050 <_ZN5Label5writeEP6Buffer+0x34>
        buffer->writeUInt8(label->data[i]);
 80a4042:	68a3      	ldr	r3, [r4, #8]
 80a4044:	4628      	mov	r0, r5
 80a4046:	5dd9      	ldrb	r1, [r3, r7]
 80a4048:	f7ff ff6e 	bl	80a3f28 <_ZN6Buffer10writeUInt8Eh>
      for (uint8_t i = 0; i < size; i++) {
 80a404c:	3701      	adds	r7, #1
 80a404e:	e7f5      	b.n	80a403c <_ZN5Label5writeEP6Buffer+0x20>
      label = label->nextLabel;
 80a4050:	6924      	ldr	r4, [r4, #16]
  while (label) {
 80a4052:	2c00      	cmp	r4, #0
 80a4054:	d1e5      	bne.n	80a4022 <_ZN5Label5writeEP6Buffer+0x6>
}
 80a4056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      buffer->writeUInt16((LABEL_POINTER << 8) | label->writeOffset);
 80a4058:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80a405c:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80a4060:	4628      	mov	r0, r5
 80a4062:	b299      	uxth	r1, r3
}
 80a4064:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      buffer->writeUInt16((LABEL_POINTER << 8) | label->writeOffset);
 80a4068:	f7ff bf68 	b.w	80a3f3c <_ZN6Buffer11writeUInt16Et>

080a406c <_ZN5Label5resetEv>:
    label->writeOffset = INVALID_OFFSET;
 80a406c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a4070:	8283      	strh	r3, [r0, #20]
    label = label->nextLabel;
 80a4072:	6900      	ldr	r0, [r0, #16]
  while (label != NULL) {
 80a4074:	2800      	cmp	r0, #0
 80a4076:	d1fb      	bne.n	80a4070 <_ZN5Label5resetEv+0x4>
}
 80a4078:	4770      	bx	lr

080a407a <_ZN5Label6Reader7hasNextEv>:
bool Label::Reader::hasNext() {
 80a407a:	b508      	push	{r3, lr}
 80a407c:	4603      	mov	r3, r0
  return c != END_OF_NAME && buffer->available() > 0;
 80a407e:	7900      	ldrb	r0, [r0, #4]
 80a4080:	b128      	cbz	r0, 80a408e <_ZN5Label6Reader7hasNextEv+0x14>
 80a4082:	6818      	ldr	r0, [r3, #0]
 80a4084:	f7ff ff16 	bl	80a3eb4 <_ZN6Buffer9availableEv>
 80a4088:	3800      	subs	r0, #0
 80a408a:	bf18      	it	ne
 80a408c:	2001      	movne	r0, #1
}
 80a408e:	bd08      	pop	{r3, pc}

080a4090 <_ZN5Label6Reader4nextEv>:
uint8_t Label::Reader::next() {
 80a4090:	b538      	push	{r3, r4, r5, lr}
 80a4092:	4604      	mov	r4, r0
  c = buffer->readUInt8();
 80a4094:	6820      	ldr	r0, [r4, #0]
 80a4096:	f7ff ff35 	bl	80a3f04 <_ZN6Buffer9readUInt8Ev>
 80a409a:	7120      	strb	r0, [r4, #4]
  while ((c & LABEL_POINTER) == LABEL_POINTER) {
 80a409c:	7920      	ldrb	r0, [r4, #4]
 80a409e:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
 80a40a2:	2bc0      	cmp	r3, #192	; 0xc0
 80a40a4:	d115      	bne.n	80a40d2 <_ZN5Label6Reader4nextEv+0x42>
    if (buffer->available() > 0) {
 80a40a6:	6820      	ldr	r0, [r4, #0]
 80a40a8:	f7ff ff04 	bl	80a3eb4 <_ZN6Buffer9availableEv>
 80a40ac:	2800      	cmp	r0, #0
 80a40ae:	d0f5      	beq.n	80a409c <_ZN5Label6Reader4nextEv+0xc>
      uint8_t c2 = buffer->readUInt8();
 80a40b0:	6820      	ldr	r0, [r4, #0]
 80a40b2:	f7ff ff27 	bl	80a3f04 <_ZN6Buffer9readUInt8Ev>
      uint16_t pointerOffset = ((c & ~LABEL_POINTER) << 8) | c2;
 80a40b6:	7925      	ldrb	r5, [r4, #4]
 80a40b8:	022d      	lsls	r5, r5, #8
 80a40ba:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
 80a40be:	4305      	orrs	r5, r0
 80a40c0:	b2ad      	uxth	r5, r5
      buffer->mark();
 80a40c2:	6820      	ldr	r0, [r4, #0]
 80a40c4:	f7ff fefe 	bl	80a3ec4 <_ZN6Buffer4markEv>
      buffer->setOffset(pointerOffset);
 80a40c8:	4629      	mov	r1, r5
 80a40ca:	6820      	ldr	r0, [r4, #0]
 80a40cc:	f7ff ff0a 	bl	80a3ee4 <_ZN6Buffer9setOffsetEt>
      c = buffer->readUInt8();
 80a40d0:	e7e0      	b.n	80a4094 <_ZN5Label6Reader4nextEv+0x4>
}
 80a40d2:	bd38      	pop	{r3, r4, r5, pc}

080a40d4 <_ZN5Label8IteratorC1EPS_>:
Label::Iterator::Iterator(Label * label) {
 80a40d4:	2200      	movs	r2, #0
 80a40d6:	7242      	strb	r2, [r0, #9]
 80a40d8:	2201      	movs	r2, #1
  this->startLabel = label;
 80a40da:	e9c0 1100 	strd	r1, r1, [r0]
Label::Iterator::Iterator(Label * label) {
 80a40de:	7282      	strb	r2, [r0, #10]
  this->size = label->data[0];
 80a40e0:	688a      	ldr	r2, [r1, #8]
 80a40e2:	7812      	ldrb	r2, [r2, #0]
 80a40e4:	7202      	strb	r2, [r0, #8]
}
 80a40e6:	4770      	bx	lr

080a40e8 <_ZN5Label8Iterator16equalsIgnoreCaseEh>:
  return (c >= 'a' && c <= 'z' && label->data[offset] == c - 32) || (c >= 'A' && c <= 'Z' && label->data[offset] == c + 32);
 80a40e8:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 80a40ec:	2b19      	cmp	r3, #25
 80a40ee:	d808      	bhi.n	80a4102 <_ZN5Label8Iterator16equalsIgnoreCaseEh+0x1a>
 80a40f0:	6842      	ldr	r2, [r0, #4]
 80a40f2:	7a43      	ldrb	r3, [r0, #9]
 80a40f4:	6892      	ldr	r2, [r2, #8]
 80a40f6:	3920      	subs	r1, #32
 80a40f8:	5cd0      	ldrb	r0, [r2, r3]
 80a40fa:	1a43      	subs	r3, r0, r1
 80a40fc:	4258      	negs	r0, r3
 80a40fe:	4158      	adcs	r0, r3
 80a4100:	4770      	bx	lr
 80a4102:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 80a4106:	2b19      	cmp	r3, #25
 80a4108:	d805      	bhi.n	80a4116 <_ZN5Label8Iterator16equalsIgnoreCaseEh+0x2e>
 80a410a:	6842      	ldr	r2, [r0, #4]
 80a410c:	7a43      	ldrb	r3, [r0, #9]
 80a410e:	6892      	ldr	r2, [r2, #8]
 80a4110:	3120      	adds	r1, #32
 80a4112:	5cd0      	ldrb	r0, [r2, r3]
 80a4114:	e7f1      	b.n	80a40fa <_ZN5Label8Iterator16equalsIgnoreCaseEh+0x12>
 80a4116:	2000      	movs	r0, #0
}
 80a4118:	4770      	bx	lr

080a411a <_ZN5Label8Iterator5matchEh>:
bool Label::Iterator::match(uint8_t c) {
 80a411a:	b570      	push	{r4, r5, r6, lr}
 80a411c:	4604      	mov	r4, r0
  if (matches) {
 80a411e:	7a80      	ldrb	r0, [r0, #10]
 80a4120:	b1c8      	cbz	r0, 80a4156 <_ZN5Label8Iterator5matchEh+0x3c>
      offset = 0;
 80a4122:	2200      	movs	r2, #0
    while (offset > size && label) {
 80a4124:	7a65      	ldrb	r5, [r4, #9]
 80a4126:	7a26      	ldrb	r6, [r4, #8]
 80a4128:	6863      	ldr	r3, [r4, #4]
 80a412a:	42ae      	cmp	r6, r5
 80a412c:	d215      	bcs.n	80a415a <_ZN5Label8Iterator5matchEh+0x40>
 80a412e:	b1b3      	cbz	r3, 80a415e <_ZN5Label8Iterator5matchEh+0x44>
      label = label->nextLabel;
 80a4130:	691b      	ldr	r3, [r3, #16]
 80a4132:	6063      	str	r3, [r4, #4]
      size = label->data[0];
 80a4134:	689b      	ldr	r3, [r3, #8]
 80a4136:	781b      	ldrb	r3, [r3, #0]
      offset = 0;
 80a4138:	7262      	strb	r2, [r4, #9]
      size = label->data[0];
 80a413a:	7223      	strb	r3, [r4, #8]
    while (offset > size && label) {
 80a413c:	e7f2      	b.n	80a4124 <_ZN5Label8Iterator5matchEh+0xa>
    matches = offset <= size && label && (label->data[offset] == c || (!label->caseSensitive && equalsIgnoreCase(c)));
 80a413e:	689a      	ldr	r2, [r3, #8]
 80a4140:	5d52      	ldrb	r2, [r2, r5]
 80a4142:	428a      	cmp	r2, r1
 80a4144:	d004      	beq.n	80a4150 <_ZN5Label8Iterator5matchEh+0x36>
 80a4146:	7b1b      	ldrb	r3, [r3, #12]
 80a4148:	b94b      	cbnz	r3, 80a415e <_ZN5Label8Iterator5matchEh+0x44>
 80a414a:	4620      	mov	r0, r4
 80a414c:	f7ff ffcc 	bl	80a40e8 <_ZN5Label8Iterator16equalsIgnoreCaseEh>
    offset++;
 80a4150:	3501      	adds	r5, #1
    matches = offset <= size && label && (label->data[offset] == c || (!label->caseSensitive && equalsIgnoreCase(c)));
 80a4152:	72a0      	strb	r0, [r4, #10]
    offset++;
 80a4154:	7265      	strb	r5, [r4, #9]
  return matches;
 80a4156:	7aa0      	ldrb	r0, [r4, #10]
}
 80a4158:	bd70      	pop	{r4, r5, r6, pc}
    matches = offset <= size && label && (label->data[offset] == c || (!label->caseSensitive && equalsIgnoreCase(c)));
 80a415a:	2b00      	cmp	r3, #0
 80a415c:	d1ef      	bne.n	80a413e <_ZN5Label8Iterator5matchEh+0x24>
 80a415e:	2000      	movs	r0, #0
 80a4160:	e7f6      	b.n	80a4150 <_ZN5Label8Iterator5matchEh+0x36>

080a4162 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer>:
Label * Label::Matcher::match(std::map<String, Label *> labels, Buffer * buffer) {
 80a4162:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4166:	b083      	sub	sp, #12
  Iterator * iterators[labels.size()];
 80a4168:	694b      	ldr	r3, [r1, #20]
Label * Label::Matcher::match(std::map<String, Label *> labels, Buffer * buffer) {
 80a416a:	af00      	add	r7, sp, #0
  Iterator * iterators[labels.size()];
 80a416c:	009b      	lsls	r3, r3, #2
 80a416e:	3307      	adds	r3, #7
 80a4170:	f023 0307 	bic.w	r3, r3, #7
 80a4174:	ebad 0d03 	sub.w	sp, sp, r3
Label * Label::Matcher::match(std::map<String, Label *> labels, Buffer * buffer) {
 80a4178:	460e      	mov	r6, r1
 80a417a:	4615      	mov	r5, r2
  Iterator * iterators[labels.size()];
 80a417c:	46e8      	mov	r8, sp
       *  %map.
       *  Iteration is done in ascending order according to the keys.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
      { return _M_t.begin(); }
 80a417e:	f04f 0900 	mov.w	r9, #0
 80a4182:	68cc      	ldr	r4, [r1, #12]
      { return iterator(&this->_M_impl._M_header); }
 80a4184:	f101 0a04 	add.w	sl, r1, #4
  for (i = labels.begin(); i != labels.end(); ++i) {
 80a4188:	4554      	cmp	r4, sl
 80a418a:	d014      	beq.n	80a41b6 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x54>
    iterators[idx++] = new Iterator(i->second);
 80a418c:	200c      	movs	r0, #12
 80a418e:	f8d4 b020 	ldr.w	fp, [r4, #32]
 80a4192:	f7fb ff82 	bl	80a009a <_Znwj>
 80a4196:	4603      	mov	r3, r0
 80a4198:	b110      	cbz	r0, 80a41a0 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x3e>
 80a419a:	4659      	mov	r1, fp
 80a419c:	f7ff ff9a 	bl	80a40d4 <_ZN5Label8IteratorC1EPS_>
 80a41a0:	fa5f f289 	uxtb.w	r2, r9
	_M_node = _Rb_tree_increment(_M_node);
 80a41a4:	4620      	mov	r0, r4
 80a41a6:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
 80a41aa:	f003 fbe5 	bl	80a7978 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
 80a41ae:	f109 0901 	add.w	r9, r9, #1
 80a41b2:	4604      	mov	r4, r0
	return *this;
 80a41b4:	e7e8      	b.n	80a4188 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x26>
  Reader * reader = new Reader(buffer);
 80a41b6:	2008      	movs	r0, #8
 80a41b8:	f7fb ff6f 	bl	80a009a <_Znwj>
 80a41bc:	4604      	mov	r4, r0
 80a41be:	b110      	cbz	r0, 80a41c6 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x64>
Label::Reader::Reader(Buffer * buffer) {
 80a41c0:	2301      	movs	r3, #1
  this->buffer = buffer;
 80a41c2:	6005      	str	r5, [r0, #0]
Label::Reader::Reader(Buffer * buffer) {
 80a41c4:	7103      	strb	r3, [r0, #4]
  while (reader->hasNext()) {
 80a41c6:	4620      	mov	r0, r4
 80a41c8:	f7ff ff57 	bl	80a407a <_ZN5Label6Reader7hasNextEv>
 80a41cc:	b390      	cbz	r0, 80a4234 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0xd2>
    uint8_t size = reader->next();
 80a41ce:	4620      	mov	r0, r4
 80a41d0:	f7ff ff5e 	bl	80a4090 <_ZN5Label6Reader4nextEv>
 80a41d4:	2300      	movs	r3, #0
 80a41d6:	4681      	mov	r9, r0
    for (uint8_t i = 0; i < labels.size(); i++) {
 80a41d8:	6972      	ldr	r2, [r6, #20]
 80a41da:	f103 0a01 	add.w	sl, r3, #1
 80a41de:	b2db      	uxtb	r3, r3
 80a41e0:	429a      	cmp	r2, r3
 80a41e2:	d906      	bls.n	80a41f2 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x90>
      iterators[i]->match(size);
 80a41e4:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80a41e8:	4649      	mov	r1, r9
 80a41ea:	f7ff ff96 	bl	80a411a <_ZN5Label8Iterator5matchEh>
    for (uint8_t i = 0; i < labels.size(); i++) {
 80a41ee:	4653      	mov	r3, sl
 80a41f0:	e7f2      	b.n	80a41d8 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x76>
 80a41f2:	f04f 0a00 	mov.w	sl, #0
    while(idx < size && reader->hasNext()) {
 80a41f6:	fa5f f38a 	uxtb.w	r3, sl
 80a41fa:	4599      	cmp	r9, r3
 80a41fc:	d9e3      	bls.n	80a41c6 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x64>
 80a41fe:	4620      	mov	r0, r4
 80a4200:	f7ff ff3b 	bl	80a407a <_ZN5Label6Reader7hasNextEv>
 80a4204:	2800      	cmp	r0, #0
 80a4206:	d0de      	beq.n	80a41c6 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x64>
      uint8_t c = reader->next();
 80a4208:	4620      	mov	r0, r4
 80a420a:	f7ff ff41 	bl	80a4090 <_ZN5Label6Reader4nextEv>
 80a420e:	2300      	movs	r3, #0
 80a4210:	4601      	mov	r1, r0
      for (uint8_t i = 0; i < labels.size(); i++) {
 80a4212:	6972      	ldr	r2, [r6, #20]
 80a4214:	f103 0b01 	add.w	fp, r3, #1
 80a4218:	b2db      	uxtb	r3, r3
 80a421a:	429a      	cmp	r2, r3
 80a421c:	d907      	bls.n	80a422e <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0xcc>
        iterators[i]->match(c);
 80a421e:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80a4222:	6079      	str	r1, [r7, #4]
 80a4224:	f7ff ff79 	bl	80a411a <_ZN5Label8Iterator5matchEh>
      for (uint8_t i = 0; i < labels.size(); i++) {
 80a4228:	465b      	mov	r3, fp
 80a422a:	6879      	ldr	r1, [r7, #4]
 80a422c:	e7f1      	b.n	80a4212 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0xb0>
      idx++;
 80a422e:	f10a 0a01 	add.w	sl, sl, #1
    while(idx < size && reader->hasNext()) {
 80a4232:	e7e0      	b.n	80a41f6 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x94>
  buffer->reset();
 80a4234:	4628      	mov	r0, r5
 80a4236:	f7ff fe4d 	bl	80a3ed4 <_ZN6Buffer5resetEv>
  return c == END_OF_NAME;
 80a423a:	7923      	ldrb	r3, [r4, #4]
  if (reader->endOfName()) {
 80a423c:	b9e3      	cbnz	r3, 80a4278 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x116>
      { return _M_t.empty(); }

      /** Returns the size of the %map.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return _M_t.size(); }
 80a423e:	6971      	ldr	r1, [r6, #20]
    while (label == NULL && idx < labels.size()) {
 80a4240:	428b      	cmp	r3, r1
 80a4242:	d219      	bcs.n	80a4278 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x116>
      if (iterators[idx]->matched()) {
 80a4244:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
  return matches;
 80a4248:	3301      	adds	r3, #1
      if (iterators[idx]->matched()) {
 80a424a:	7a90      	ldrb	r0, [r2, #10]
 80a424c:	b2db      	uxtb	r3, r3
 80a424e:	2800      	cmp	r0, #0
 80a4250:	d0f6      	beq.n	80a4240 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0xde>
  return startLabel;
 80a4252:	6815      	ldr	r5, [r2, #0]
    while (label == NULL && idx < labels.size()) {
 80a4254:	2d00      	cmp	r5, #0
 80a4256:	d0f3      	beq.n	80a4240 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0xde>
  Label * label = NULL;
 80a4258:	f04f 0900 	mov.w	r9, #0
  for (uint8_t i = 0; i < labels.size(); i++) {
 80a425c:	6972      	ldr	r2, [r6, #20]
 80a425e:	fa5f f389 	uxtb.w	r3, r9
 80a4262:	4293      	cmp	r3, r2
 80a4264:	d20a      	bcs.n	80a427c <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x11a>
    delete iterators[i];
 80a4266:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80a426a:	b110      	cbz	r0, 80a4272 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x110>
 80a426c:	210c      	movs	r1, #12
 80a426e:	f003 fb2a 	bl	80a78c6 <_ZdlPvj>
  for (uint8_t i = 0; i < labels.size(); i++) {
 80a4272:	f109 0901 	add.w	r9, r9, #1
 80a4276:	e7f1      	b.n	80a425c <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0xfa>
  Label * label = NULL;
 80a4278:	2500      	movs	r5, #0
 80a427a:	e7ed      	b.n	80a4258 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0xf6>
  delete reader;
 80a427c:	4620      	mov	r0, r4
 80a427e:	2108      	movs	r1, #8
 80a4280:	f003 fb21 	bl	80a78c6 <_ZdlPvj>
}
 80a4284:	4628      	mov	r0, r5
 80a4286:	370c      	adds	r7, #12
 80a4288:	46bd      	mov	sp, r7
 80a428a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a4290 <_ZN9HostLabelC1EP6RecordS1_6StringP5Labelb>:
HostLabel::HostLabel(Record * aRecord, Record * nsecRecord, String name, Label * nextLabel, bool caseSensitive):Label(name, nextLabel, caseSensitive) {
 80a4290:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a4292:	4604      	mov	r4, r0
 80a4294:	460e      	mov	r6, r1
 80a4296:	4668      	mov	r0, sp
 80a4298:	4619      	mov	r1, r3
 80a429a:	4615      	mov	r5, r2
 80a429c:	f002 f85d 	bl	80a635a <_ZN6StringC1ERKS_>
 80a42a0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80a42a4:	4669      	mov	r1, sp
 80a42a6:	9a08      	ldr	r2, [sp, #32]
 80a42a8:	4620      	mov	r0, r4
 80a42aa:	f7ff fe87 	bl	80a3fbc <_ZN5LabelC1E6StringPS_b>
 80a42ae:	4668      	mov	r0, sp
 80a42b0:	f001 ffbf 	bl	80a6232 <_ZN6StringD1Ev>
}
 80a42b4:	4620      	mov	r0, r4
HostLabel::HostLabel(Record * aRecord, Record * nsecRecord, String name, Label * nextLabel, bool caseSensitive):Label(name, nextLabel, caseSensitive) {
 80a42b6:	4b03      	ldr	r3, [pc, #12]	; (80a42c4 <_ZN9HostLabelC1EP6RecordS1_6StringP5Labelb+0x34>)
  this->nsecRecord = nsecRecord;
 80a42b8:	e9c4 6506 	strd	r6, r5, [r4, #24]
HostLabel::HostLabel(Record * aRecord, Record * nsecRecord, String name, Label * nextLabel, bool caseSensitive):Label(name, nextLabel, caseSensitive) {
 80a42bc:	6023      	str	r3, [r4, #0]
}
 80a42be:	b004      	add	sp, #16
 80a42c0:	bd70      	pop	{r4, r5, r6, pc}
 80a42c2:	bf00      	nop
 80a42c4:	080ad238 	.word	0x080ad238

080a42c8 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 80a42c8:	b508      	push	{r3, lr}
      { return __x < __y; }
 80a42ca:	f002 f8c8 	bl	80a645e <_ZNK6StringltERKS_>
 80a42ce:	3800      	subs	r0, #0
 80a42d0:	bf18      	it	ne
 80a42d2:	2001      	movne	r0, #1
 80a42d4:	bd08      	pop	{r3, pc}
	...

080a42d8 <_ZN4MDNS5beginEv>:

void MDNS::addTXTEntry(String key, String value) {
  txtRecord->addEntry(key, value);
}

bool MDNS::begin() {
 80a42d8:	b530      	push	{r4, r5, lr}
 80a42da:	4604      	mov	r4, r0
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a42dc:	4d0f      	ldr	r5, [pc, #60]	; (80a431c <_ZN4MDNS5beginEv+0x44>)
 80a42de:	b089      	sub	sp, #36	; 0x24
 80a42e0:	2200      	movs	r2, #0
 80a42e2:	6868      	ldr	r0, [r5, #4]
 80a42e4:	4611      	mov	r1, r2
 80a42e6:	f001 fa93 	bl	80a5810 <network_ready>
  // Wait for WiFi to connect
  while (!WiFi.ready()) {
 80a42ea:	2800      	cmp	r0, #0
 80a42ec:	d0f8      	beq.n	80a42e0 <_ZN4MDNS5beginEv+0x8>
  }

  udp->begin(MDNS_PORT);
 80a42ee:	6820      	ldr	r0, [r4, #0]
 80a42f0:	2200      	movs	r2, #0
 80a42f2:	6803      	ldr	r3, [r0, #0]
 80a42f4:	f241 41e9 	movw	r1, #5353	; 0x14e9
 80a42f8:	6a1b      	ldr	r3, [r3, #32]
 80a42fa:	4798      	blx	r3
  udp->joinMulticast(IPAddress(224, 0, 0, 251));
 80a42fc:	23fb      	movs	r3, #251	; 0xfb
 80a42fe:	6824      	ldr	r4, [r4, #0]
 80a4300:	9300      	str	r3, [sp, #0]
 80a4302:	2300      	movs	r3, #0
 80a4304:	21e0      	movs	r1, #224	; 0xe0
 80a4306:	461a      	mov	r2, r3
 80a4308:	a802      	add	r0, sp, #8
 80a430a:	f001 fe73 	bl	80a5ff4 <_ZN9IPAddressC1Ehhhh>
 80a430e:	4620      	mov	r0, r4
 80a4310:	a902      	add	r1, sp, #8
 80a4312:	f002 ff39 	bl	80a7188 <_ZN3UDP13joinMulticastERK9IPAddress>

  // TODO: Probing + announcing

  return true;
}
 80a4316:	2001      	movs	r0, #1
 80a4318:	b009      	add	sp, #36	; 0x24
 80a431a:	bd30      	pop	{r4, r5, pc}
 80a431c:	200014d0 	.word	0x200014d0

080a4320 <_ZN4MDNS10readHeaderEP6Buffer>:
      }
    }
  }
}

MDNS::QueryHeader MDNS::readHeader(Buffer * buffer) {
 80a4320:	b538      	push	{r3, r4, r5, lr}
 80a4322:	4604      	mov	r4, r0
  QueryHeader header;

  if (buffer->available() >= 12) {
 80a4324:	4610      	mov	r0, r2
MDNS::QueryHeader MDNS::readHeader(Buffer * buffer) {
 80a4326:	4615      	mov	r5, r2
  if (buffer->available() >= 12) {
 80a4328:	f7ff fdc4 	bl	80a3eb4 <_ZN6Buffer9availableEv>
 80a432c:	280b      	cmp	r0, #11
 80a432e:	d917      	bls.n	80a4360 <_ZN4MDNS10readHeaderEP6Buffer+0x40>
    header.id = buffer->readUInt16();
 80a4330:	4628      	mov	r0, r5
 80a4332:	f7ff fded 	bl	80a3f10 <_ZN6Buffer10readUInt16Ev>
 80a4336:	8020      	strh	r0, [r4, #0]
    header.flags = buffer->readUInt16();
 80a4338:	4628      	mov	r0, r5
 80a433a:	f7ff fde9 	bl	80a3f10 <_ZN6Buffer10readUInt16Ev>
 80a433e:	8060      	strh	r0, [r4, #2]
    header.qdcount = buffer->readUInt16();
 80a4340:	4628      	mov	r0, r5
 80a4342:	f7ff fde5 	bl	80a3f10 <_ZN6Buffer10readUInt16Ev>
 80a4346:	80a0      	strh	r0, [r4, #4]
    header.ancount = buffer->readUInt16();
 80a4348:	4628      	mov	r0, r5
 80a434a:	f7ff fde1 	bl	80a3f10 <_ZN6Buffer10readUInt16Ev>
 80a434e:	80e0      	strh	r0, [r4, #6]
    header.nscount = buffer->readUInt16();
 80a4350:	4628      	mov	r0, r5
 80a4352:	f7ff fddd 	bl	80a3f10 <_ZN6Buffer10readUInt16Ev>
 80a4356:	8120      	strh	r0, [r4, #8]
    header.arcount = buffer->readUInt16();
 80a4358:	4628      	mov	r0, r5
 80a435a:	f7ff fdd9 	bl	80a3f10 <_ZN6Buffer10readUInt16Ev>
 80a435e:	8160      	strh	r0, [r4, #10]
  }

  return header;
}
 80a4360:	4620      	mov	r0, r4
 80a4362:	bd38      	pop	{r3, r4, r5, pc}

080a4364 <_ZN4MDNS14writeResponsesEv>:

void MDNS::writeResponses() {
 80a4364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  uint8_t answerCount = 0;
  uint8_t additionalCount = 0;
 80a4368:	2500      	movs	r5, #0
void MDNS::writeResponses() {
 80a436a:	4604      	mov	r4, r0
  uint8_t answerCount = 0;
 80a436c:	462f      	mov	r7, r5
 80a436e:	6b46      	ldr	r6, [r0, #52]	; 0x34

  for (std::vector<Record *>::const_iterator i = records.begin(); i != records.end(); ++i) {
 80a4370:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4372:	46b0      	mov	r8, r6
 80a4374:	42b3      	cmp	r3, r6
 80a4376:	d00f      	beq.n	80a4398 <_ZN4MDNS14writeResponsesEv+0x34>
    if ((*i)->isAnswerRecord()) {
 80a4378:	6830      	ldr	r0, [r6, #0]
 80a437a:	f000 fb94 	bl	80a4aa6 <_ZN6Record14isAnswerRecordEv>
 80a437e:	b108      	cbz	r0, 80a4384 <_ZN4MDNS14writeResponsesEv+0x20>
      answerCount++;
 80a4380:	3701      	adds	r7, #1
 80a4382:	b2ff      	uxtb	r7, r7
    }
    if ((*i)->isAdditionalRecord()) {
 80a4384:	f8d8 0000 	ldr.w	r0, [r8]
 80a4388:	3604      	adds	r6, #4
 80a438a:	f000 fb96 	bl	80a4aba <_ZN6Record18isAdditionalRecordEv>
 80a438e:	2800      	cmp	r0, #0
 80a4390:	d0ee      	beq.n	80a4370 <_ZN4MDNS14writeResponsesEv+0xc>
      additionalCount++;
 80a4392:	3501      	adds	r5, #1
 80a4394:	b2ed      	uxtb	r5, r5

      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
      {
	++_M_current;
	return *this;
 80a4396:	e7eb      	b.n	80a4370 <_ZN4MDNS14writeResponsesEv+0xc>
    }
  }

  if (answerCount > 0) {
 80a4398:	2f00      	cmp	r7, #0
 80a439a:	d034      	beq.n	80a4406 <_ZN4MDNS14writeResponsesEv+0xa2>
    buffer->writeUInt16(0x0);
 80a439c:	2100      	movs	r1, #0
 80a439e:	6860      	ldr	r0, [r4, #4]
 80a43a0:	f7ff fdcc 	bl	80a3f3c <_ZN6Buffer11writeUInt16Et>
    buffer->writeUInt16(0x8400);
 80a43a4:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 80a43a8:	6860      	ldr	r0, [r4, #4]
 80a43aa:	f7ff fdc7 	bl	80a3f3c <_ZN6Buffer11writeUInt16Et>
    buffer->writeUInt16(0x0);
 80a43ae:	2100      	movs	r1, #0
 80a43b0:	6860      	ldr	r0, [r4, #4]
 80a43b2:	f7ff fdc3 	bl	80a3f3c <_ZN6Buffer11writeUInt16Et>
    buffer->writeUInt16(answerCount);
 80a43b6:	4639      	mov	r1, r7
 80a43b8:	6860      	ldr	r0, [r4, #4]
 80a43ba:	f7ff fdbf 	bl	80a3f3c <_ZN6Buffer11writeUInt16Et>
    buffer->writeUInt16(0x0);
 80a43be:	2100      	movs	r1, #0
 80a43c0:	6860      	ldr	r0, [r4, #4]
 80a43c2:	f7ff fdbb 	bl	80a3f3c <_ZN6Buffer11writeUInt16Et>
    buffer->writeUInt16(additionalCount);
 80a43c6:	4629      	mov	r1, r5
 80a43c8:	6860      	ldr	r0, [r4, #4]
 80a43ca:	f7ff fdb7 	bl	80a3f3c <_ZN6Buffer11writeUInt16Et>
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 80a43ce:	6b65      	ldr	r5, [r4, #52]	; 0x34

    for (std::vector<Record *>::const_iterator i = records.begin(); i != records.end(); ++i) {
 80a43d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a43d2:	42ab      	cmp	r3, r5
 80a43d4:	d009      	beq.n	80a43ea <_ZN4MDNS14writeResponsesEv+0x86>
      if ((*i)->isAnswerRecord()) {
 80a43d6:	6828      	ldr	r0, [r5, #0]
 80a43d8:	f000 fb65 	bl	80a4aa6 <_ZN6Record14isAnswerRecordEv>
 80a43dc:	b118      	cbz	r0, 80a43e6 <_ZN4MDNS14writeResponsesEv+0x82>
        (*i)->write(buffer);
 80a43de:	6861      	ldr	r1, [r4, #4]
 80a43e0:	6828      	ldr	r0, [r5, #0]
 80a43e2:	f000 fb75 	bl	80a4ad0 <_ZN6Record5writeEP6Buffer>
      operator++() _GLIBCXX_NOEXCEPT
 80a43e6:	3504      	adds	r5, #4
	return *this;
 80a43e8:	e7f2      	b.n	80a43d0 <_ZN4MDNS14writeResponsesEv+0x6c>
      base() const _GLIBCXX_NOEXCEPT
 80a43ea:	6b65      	ldr	r5, [r4, #52]	; 0x34
      }
    }

    for (std::vector<Record *>::const_iterator i = records.begin(); i != records.end(); ++i) {
 80a43ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a43ee:	42ab      	cmp	r3, r5
 80a43f0:	d009      	beq.n	80a4406 <_ZN4MDNS14writeResponsesEv+0xa2>
      if ((*i)->isAdditionalRecord()) {
 80a43f2:	6828      	ldr	r0, [r5, #0]
 80a43f4:	f000 fb61 	bl	80a4aba <_ZN6Record18isAdditionalRecordEv>
 80a43f8:	b118      	cbz	r0, 80a4402 <_ZN4MDNS14writeResponsesEv+0x9e>
        (*i)->write(buffer);
 80a43fa:	6861      	ldr	r1, [r4, #4]
 80a43fc:	6828      	ldr	r0, [r5, #0]
 80a43fe:	f000 fb67 	bl	80a4ad0 <_ZN6Record5writeEP6Buffer>
      operator++() _GLIBCXX_NOEXCEPT
 80a4402:	3504      	adds	r5, #4
	return *this;
 80a4404:	e7f2      	b.n	80a43ec <_ZN4MDNS14writeResponsesEv+0x88>
      { return _M_t.begin(); }
 80a4406:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      { return iterator(&this->_M_impl._M_header); }
 80a4408:	f104 0620 	add.w	r6, r4, #32
      }
    }
  }

  for (std::map<String, Label *>::const_iterator i = labels.begin(); i != labels.end(); ++i) {
 80a440c:	42b5      	cmp	r5, r6
 80a440e:	d007      	beq.n	80a4420 <_ZN4MDNS14writeResponsesEv+0xbc>
    i->second->reset();
 80a4410:	6a28      	ldr	r0, [r5, #32]
 80a4412:	f7ff fe2b 	bl	80a406c <_ZN5Label5resetEv>
	_M_node = _Rb_tree_increment(_M_node);
 80a4416:	4628      	mov	r0, r5
 80a4418:	f003 faae 	bl	80a7978 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
 80a441c:	4605      	mov	r5, r0
	return *this;
 80a441e:	e7f5      	b.n	80a440c <_ZN4MDNS14writeResponsesEv+0xa8>
      : _M_current(__i) { }
 80a4420:	6b65      	ldr	r5, [r4, #52]	; 0x34
  }

  for (std::vector<Record *>::const_iterator i = records.begin(); i != records.end(); ++i) {
 80a4422:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4424:	429d      	cmp	r5, r3
 80a4426:	d004      	beq.n	80a4432 <_ZN4MDNS14writeResponsesEv+0xce>
    (*i)->reset();
 80a4428:	f855 0b04 	ldr.w	r0, [r5], #4
 80a442c:	f000 fb69 	bl	80a4b02 <_ZN6Record5resetEv>
	return *this;
 80a4430:	e7f7      	b.n	80a4422 <_ZN4MDNS14writeResponsesEv+0xbe>
  }
}
 80a4432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a4436 <_ZN4MDNS18isAlphaDigitHyphenE6String>:

bool MDNS::isAlphaDigitHyphen(String string) {
 80a4436:	b538      	push	{r3, r4, r5, lr}
 80a4438:	460c      	mov	r4, r1
 80a443a:	2500      	movs	r5, #0
  bool result = true;

  uint8_t idx = 0;

  while (result && idx < string.length()) {
 80a443c:	68a3      	ldr	r3, [r4, #8]
 80a443e:	b2e9      	uxtb	r1, r5
 80a4440:	428b      	cmp	r3, r1
 80a4442:	d913      	bls.n	80a446c <_ZN4MDNS18isAlphaDigitHyphenE6String+0x36>
    uint8_t c = string.charAt(idx++);
 80a4444:	4620      	mov	r0, r4
 80a4446:	f002 f818 	bl	80a647a <_ZNK6String6charAtEj>

    result = (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '-';
 80a444a:	f020 0320 	bic.w	r3, r0, #32
 80a444e:	3b41      	subs	r3, #65	; 0x41
 80a4450:	b2db      	uxtb	r3, r3
 80a4452:	2b19      	cmp	r3, #25
 80a4454:	d908      	bls.n	80a4468 <_ZN4MDNS18isAlphaDigitHyphenE6String+0x32>
 80a4456:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a445a:	b2db      	uxtb	r3, r3
 80a445c:	2b09      	cmp	r3, #9
 80a445e:	d903      	bls.n	80a4468 <_ZN4MDNS18isAlphaDigitHyphenE6String+0x32>
 80a4460:	282d      	cmp	r0, #45	; 0x2d
 80a4462:	d001      	beq.n	80a4468 <_ZN4MDNS18isAlphaDigitHyphenE6String+0x32>
 80a4464:	2000      	movs	r0, #0
  }

  return result;
 80a4466:	e002      	b.n	80a446e <_ZN4MDNS18isAlphaDigitHyphenE6String+0x38>
 80a4468:	3501      	adds	r5, #1
 80a446a:	e7e7      	b.n	80a443c <_ZN4MDNS18isAlphaDigitHyphenE6String+0x6>
 80a446c:	2001      	movs	r0, #1
}
 80a446e:	bd38      	pop	{r3, r4, r5, pc}

080a4470 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>:

#if __cplusplus >= 201103L
  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80a4470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4472:	4605      	mov	r5, r0
 80a4474:	4616      	mov	r6, r2
 80a4476:	461c      	mov	r4, r3
 80a4478:	1d07      	adds	r7, r0, #4
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
			    || _M_impl._M_key_compare(_S_key(__z),
 80a447a:	b989      	cbnz	r1, 80a44a0 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x30>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80a447c:	42ba      	cmp	r2, r7
 80a447e:	d00f      	beq.n	80a44a0 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x30>
			    || _M_impl._M_key_compare(_S_key(__z),
 80a4480:	f102 0110 	add.w	r1, r2, #16
 80a4484:	f103 0010 	add.w	r0, r3, #16
 80a4488:	f7ff ff1e 	bl	80a42c8 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
						      _S_key(__p)));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80a448c:	463b      	mov	r3, r7
 80a448e:	4632      	mov	r2, r6
 80a4490:	4621      	mov	r1, r4
 80a4492:	f003 fa86 	bl	80a79a2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
				    this->_M_impl._M_header);
      ++_M_impl._M_node_count;
 80a4496:	696b      	ldr	r3, [r5, #20]
      return iterator(__z);
    }
 80a4498:	4620      	mov	r0, r4
      ++_M_impl._M_node_count;
 80a449a:	3301      	adds	r3, #1
 80a449c:	616b      	str	r3, [r5, #20]
    }
 80a449e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			    || _M_impl._M_key_compare(_S_key(__z),
 80a44a0:	2001      	movs	r0, #1
 80a44a2:	e7f3      	b.n	80a448c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x1c>

080a44a4 <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80a44a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 80a44a8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a44ac:	e9d0 9800 	ldrd	r9, r8, [r0]
 80a44b0:	4693      	mov	fp, r2
 80a44b2:	eba8 0209 	sub.w	r2, r8, r9
	if (max_size() - size() < __n)
 80a44b6:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
 80a44ba:	4607      	mov	r7, r0
 80a44bc:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a44be:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 80a44c2:	d102      	bne.n	80a44ca <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80a44c4:	481e      	ldr	r0, [pc, #120]	; (80a4540 <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9c>)
 80a44c6:	f003 fac8 	bl	80a7a5a <_ZSt20__throw_length_errorPKc>
 80a44ca:	2c01      	cmp	r4, #1
 80a44cc:	4622      	mov	r2, r4
 80a44ce:	bf38      	it	cc
 80a44d0:	2201      	movcc	r2, #1
 80a44d2:	18a4      	adds	r4, r4, r2
 80a44d4:	eba1 0509 	sub.w	r5, r1, r9

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80a44d8:	d22f      	bcs.n	80a453a <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80a44da:	b13c      	cbz	r4, 80a44ec <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x48>
 80a44dc:	429c      	cmp	r4, r3
 80a44de:	bf28      	it	cs
 80a44e0:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a44e2:	00a0      	lsls	r0, r4, #2
 80a44e4:	f7fb fdd9 	bl	80a009a <_Znwj>
 80a44e8:	4606      	mov	r6, r0
 80a44ea:	e000      	b.n	80a44ee <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x4a>
 80a44ec:	4626      	mov	r6, r4
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a44ee:	42ee      	cmn	r6, r5
 80a44f0:	bf1c      	itt	ne
 80a44f2:	f8db 3000 	ldrne.w	r3, [fp]
 80a44f6:	5173      	strne	r3, [r6, r5]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 80a44f8:	2d00      	cmp	r5, #0
 80a44fa:	dd04      	ble.n	80a4506 <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x62>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80a44fc:	462a      	mov	r2, r5
 80a44fe:	4649      	mov	r1, r9
 80a4500:	4630      	mov	r0, r6
 80a4502:	f007 ffcb 	bl	80ac49c <memmove>
      ptrdiff_t __count = __last - __first;
 80a4506:	eba8 080a 	sub.w	r8, r8, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 80a450a:	3504      	adds	r5, #4
      if (__count > 0)
 80a450c:	f1b8 0f00 	cmp.w	r8, #0
 80a4510:	4435      	add	r5, r6
 80a4512:	dd04      	ble.n	80a451e <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80a4514:	4642      	mov	r2, r8
 80a4516:	4651      	mov	r1, sl
 80a4518:	4628      	mov	r0, r5
 80a451a:	f007 ffb1 	bl	80ac480 <memcpy>
      return __result + __count;
 80a451e:	4445      	add	r5, r8
	if (__p)
 80a4520:	f1b9 0f00 	cmp.w	r9, #0
 80a4524:	d002      	beq.n	80a452c <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x88>
	::operator delete(__p);
 80a4526:	4648      	mov	r0, r9
 80a4528:	f7fb fdbb 	bl	80a00a2 <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80a452c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
      this->_M_impl._M_finish = __new_finish;
 80a4530:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80a4534:	60bc      	str	r4, [r7, #8]
    }
 80a4536:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80a453a:	461c      	mov	r4, r3
 80a453c:	e7d1      	b.n	80a44e2 <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
 80a453e:	bf00      	nop
 80a4540:	080ad23c 	.word	0x080ad23c

080a4544 <_ZNSt6vectorIP6RecordSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 80a4544:	460a      	mov	r2, r1
 80a4546:	b510      	push	{r4, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80a4548:	e9d0 1401 	ldrd	r1, r4, [r0, #4]
 80a454c:	42a1      	cmp	r1, r4
      vector<_Tp, _Alloc>::
 80a454e:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80a4550:	d006      	beq.n	80a4560 <_ZNSt6vectorIP6RecordSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a4552:	b109      	cbz	r1, 80a4558 <_ZNSt6vectorIP6RecordSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x14>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80a4554:	6812      	ldr	r2, [r2, #0]
 80a4556:	600a      	str	r2, [r1, #0]
	    ++this->_M_impl._M_finish;
 80a4558:	685a      	ldr	r2, [r3, #4]
 80a455a:	3204      	adds	r2, #4
 80a455c:	605a      	str	r2, [r3, #4]
      }
 80a455e:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80a4560:	f7ff ffa0 	bl	80a44a4 <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80a4564:	e7fb      	b.n	80a455e <_ZNSt6vectorIP6RecordSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x1a>

080a4566 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80a4566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a456a:	4604      	mov	r4, r0
 80a456c:	460f      	mov	r7, r1
 80a456e:	4690      	mov	r8, r2
      bool __comp = true;
 80a4570:	2001      	movs	r0, #1
      _Link_type __x = _M_begin();
 80a4572:	688d      	ldr	r5, [r1, #8]
      { return &this->_M_impl._M_header; }
 80a4574:	1d0e      	adds	r6, r1, #4
      while (__x != 0)
 80a4576:	b15d      	cbz	r5, 80a4590 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x2a>
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80a4578:	4640      	mov	r0, r8
 80a457a:	f105 0110 	add.w	r1, r5, #16
 80a457e:	f7ff fea3 	bl	80a42c8 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80a4582:	b118      	cbz	r0, 80a458c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x26>
 80a4584:	68ab      	ldr	r3, [r5, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80a4586:	462e      	mov	r6, r5
 80a4588:	461d      	mov	r5, r3
 80a458a:	e7f4      	b.n	80a4576 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x10>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80a458c:	68eb      	ldr	r3, [r5, #12]
 80a458e:	e7fa      	b.n	80a4586 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x20>
      if (__comp)
 80a4590:	b1a0      	cbz	r0, 80a45bc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x56>
	  if (__j == begin())
 80a4592:	68fb      	ldr	r3, [r7, #12]
 80a4594:	42b3      	cmp	r3, r6
 80a4596:	d104      	bne.n	80a45a2 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x3c>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80a4598:	6025      	str	r5, [r4, #0]
 80a459a:	6066      	str	r6, [r4, #4]
    }
 80a459c:	4620      	mov	r0, r4
 80a459e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_M_node = _Rb_tree_decrement(_M_node);
 80a45a2:	4630      	mov	r0, r6
 80a45a4:	f003 f9fb 	bl	80a799e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80a45a8:	4605      	mov	r5, r0
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80a45aa:	4641      	mov	r1, r8
 80a45ac:	f105 0010 	add.w	r0, r5, #16
 80a45b0:	f7ff fe8a 	bl	80a42c8 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
 80a45b4:	b120      	cbz	r0, 80a45c0 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x5a>
 80a45b6:	2300      	movs	r3, #0
 80a45b8:	6023      	str	r3, [r4, #0]
 80a45ba:	e7ee      	b.n	80a459a <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x34>
 80a45bc:	4635      	mov	r5, r6
 80a45be:	e7f4      	b.n	80a45aa <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x44>
       : first(std::forward<_U1>(__x)), second(__y) { }
 80a45c0:	e9c4 5000 	strd	r5, r0, [r4]
 80a45c4:	e7ea      	b.n	80a459c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x36>

080a45c6 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80a45c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a45ca:	461f      	mov	r7, r3
      { return &this->_M_impl._M_header; }
 80a45cc:	1d0b      	adds	r3, r1, #4
      if (__pos._M_node == _M_end())
 80a45ce:	429a      	cmp	r2, r3
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80a45d0:	4604      	mov	r4, r0
 80a45d2:	460e      	mov	r6, r1
 80a45d4:	4615      	mov	r5, r2
      if (__pos._M_node == _M_end())
 80a45d6:	d110      	bne.n	80a45fa <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x34>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80a45d8:	694b      	ldr	r3, [r1, #20]
 80a45da:	2b00      	cmp	r3, #0
 80a45dc:	d049      	beq.n	80a4672 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xac>
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
 80a45de:	6908      	ldr	r0, [r1, #16]
 80a45e0:	4639      	mov	r1, r7
 80a45e2:	3010      	adds	r0, #16
 80a45e4:	f7ff fe70 	bl	80a42c8 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
 80a45e8:	2800      	cmp	r0, #0
 80a45ea:	d042      	beq.n	80a4672 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xac>
       : first(__x), second(std::forward<_U2>(__y)) { }
 80a45ec:	2300      	movs	r3, #0
 80a45ee:	6023      	str	r3, [r4, #0]
 80a45f0:	6933      	ldr	r3, [r6, #16]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80a45f2:	6063      	str	r3, [r4, #4]
    }
 80a45f4:	4620      	mov	r0, r4
 80a45f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a45fa:	f102 0910 	add.w	r9, r2, #16
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80a45fe:	4649      	mov	r1, r9
 80a4600:	4638      	mov	r0, r7
 80a4602:	f7ff fe61 	bl	80a42c8 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
 80a4606:	4680      	mov	r8, r0
 80a4608:	b1b8      	cbz	r0, 80a463a <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x74>
	  if (__pos._M_node == _M_leftmost()) // begin()
 80a460a:	68f3      	ldr	r3, [r6, #12]
 80a460c:	42ab      	cmp	r3, r5
 80a460e:	d101      	bne.n	80a4614 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x4e>
 80a4610:	6023      	str	r3, [r4, #0]
 80a4612:	e7ee      	b.n	80a45f2 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x2c>
	_M_node = _Rb_tree_decrement(_M_node);
 80a4614:	4628      	mov	r0, r5
 80a4616:	f003 f9c2 	bl	80a799e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80a461a:	4639      	mov	r1, r7
	_M_node = _Rb_tree_decrement(_M_node);
 80a461c:	4680      	mov	r8, r0
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80a461e:	3010      	adds	r0, #16
 80a4620:	f7ff fe52 	bl	80a42c8 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
 80a4624:	b328      	cbz	r0, 80a4672 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xac>
	      if (_S_right(__before._M_node) == 0)
 80a4626:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a462a:	b91b      	cbnz	r3, 80a4634 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x6e>
       : first(__x), second(std::forward<_U2>(__y)) { }
 80a462c:	6023      	str	r3, [r4, #0]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80a462e:	f8c4 8004 	str.w	r8, [r4, #4]
 80a4632:	e7df      	b.n	80a45f4 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x2e>
 80a4634:	6025      	str	r5, [r4, #0]
       : first(__x), second(std::forward<_U2>(__y)) { }
 80a4636:	6065      	str	r5, [r4, #4]
 80a4638:	e7dc      	b.n	80a45f4 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x2e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80a463a:	4639      	mov	r1, r7
 80a463c:	4648      	mov	r0, r9
 80a463e:	f7ff fe43 	bl	80a42c8 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
 80a4642:	b1e0      	cbz	r0, 80a467e <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xb8>
	  if (__pos._M_node == _M_rightmost())
 80a4644:	6933      	ldr	r3, [r6, #16]
 80a4646:	42ab      	cmp	r3, r5
 80a4648:	d102      	bne.n	80a4650 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x8a>
 80a464a:	f8c4 8000 	str.w	r8, [r4]
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80a464e:	e7d0      	b.n	80a45f2 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x2c>
	_M_node = _Rb_tree_increment(_M_node);
 80a4650:	4628      	mov	r0, r5
 80a4652:	f003 f97e 	bl	80a7952 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80a4656:	4680      	mov	r8, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80a4658:	f100 0110 	add.w	r1, r0, #16
 80a465c:	4638      	mov	r0, r7
 80a465e:	f7ff fe33 	bl	80a42c8 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
 80a4662:	b130      	cbz	r0, 80a4672 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xac>
	      if (_S_right(__pos._M_node) == 0)
 80a4664:	68eb      	ldr	r3, [r5, #12]
 80a4666:	b90b      	cbnz	r3, 80a466c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xa6>
 80a4668:	6023      	str	r3, [r4, #0]
 80a466a:	e7e4      	b.n	80a4636 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x70>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80a466c:	f8c4 8000 	str.w	r8, [r4]
 80a4670:	e7dd      	b.n	80a462e <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x68>
	    return _M_get_insert_unique_pos(__k);
 80a4672:	463a      	mov	r2, r7
 80a4674:	4631      	mov	r1, r6
 80a4676:	4620      	mov	r0, r4
 80a4678:	f7ff ff75 	bl	80a4566 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 80a467c:	e7ba      	b.n	80a45f4 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x2e>
       : first(std::forward<_U1>(__x)), second(__y) { }
 80a467e:	e9c4 5000 	strd	r5, r0, [r4]
 80a4682:	e7b7      	b.n	80a45f4 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x2e>

080a4684 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
 80a4684:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
      { return &this->_M_impl._M_header; }
 80a4688:	f100 0804 	add.w	r8, r0, #4
 80a468c:	4606      	mov	r6, r0
 80a468e:	460f      	mov	r7, r1
 80a4690:	4644      	mov	r4, r8
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80a4692:	6885      	ldr	r5, [r0, #8]
      while (__x != 0)
 80a4694:	b155      	cbz	r5, 80a46ac <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_+0x28>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80a4696:	4639      	mov	r1, r7
 80a4698:	f105 0010 	add.w	r0, r5, #16
 80a469c:	f7ff fe14 	bl	80a42c8 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
 80a46a0:	b910      	cbnz	r0, 80a46a8 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_+0x24>
 80a46a2:	462c      	mov	r4, r5
	  __y = __x, __x = _S_left(__x);
 80a46a4:	68ad      	ldr	r5, [r5, #8]
 80a46a6:	e7f5      	b.n	80a4694 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_+0x10>
	  __x = _S_right(__x);
 80a46a8:	68ed      	ldr	r5, [r5, #12]
 80a46aa:	e7f3      	b.n	80a4694 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_+0x10>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 80a46ac:	45a0      	cmp	r8, r4
 80a46ae:	d11b      	bne.n	80a46e8 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_+0x64>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a46b0:	2024      	movs	r0, #36	; 0x24
 80a46b2:	f7fb fcf2 	bl	80a009a <_Znwj>
      // Can be used to avoid value-initialization zeroing _M_storage.
      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }
 80a46b6:	f100 0810 	add.w	r8, r0, #16
 80a46ba:	4605      	mov	r5, r0
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80a46bc:	4639      	mov	r1, r7
 80a46be:	4640      	mov	r0, r8
 80a46c0:	f001 fe31 	bl	80a6326 <_ZN6StringC1EOS_>
 80a46c4:	2300      	movs	r3, #0
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80a46c6:	4622      	mov	r2, r4
 80a46c8:	622b      	str	r3, [r5, #32]
 80a46ca:	4631      	mov	r1, r6
 80a46cc:	4643      	mov	r3, r8
 80a46ce:	4668      	mov	r0, sp
 80a46d0:	f7ff ff79 	bl	80a45c6 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
 80a46d4:	e9dd 4200 	ldrd	r4, r2, [sp]

	    if (__res.second)
 80a46d8:	b992      	cbnz	r2, 80a4700 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_+0x7c>
    struct pair
 80a46da:	4640      	mov	r0, r8
 80a46dc:	f001 fda9 	bl	80a6232 <_ZN6StringD1Ev>
	::operator delete(__p);
 80a46e0:	4628      	mov	r0, r5
 80a46e2:	f7fb fcde 	bl	80a00a2 <_ZdlPv>
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80a46e6:	e006      	b.n	80a46f6 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_+0x72>
 80a46e8:	4638      	mov	r0, r7
 80a46ea:	f104 0110 	add.w	r1, r4, #16
 80a46ee:	f7ff fdeb 	bl	80a42c8 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
 80a46f2:	2800      	cmp	r0, #0
 80a46f4:	d1dc      	bne.n	80a46b0 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_+0x2c>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
      }
 80a46f6:	f104 0020 	add.w	r0, r4, #32
 80a46fa:	b002      	add	sp, #8
 80a46fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	      return _M_insert_node(__res.first, __res.second, __z);
 80a4700:	4621      	mov	r1, r4
 80a4702:	462b      	mov	r3, r5
 80a4704:	4630      	mov	r0, r6
 80a4706:	f7ff feb3 	bl	80a4470 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
 80a470a:	4604      	mov	r4, r0
 80a470c:	e7f3      	b.n	80a46f6 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_+0x72>
	...

080a4710 <_ZN4MDNS11setHostnameE6String>:
bool MDNS::setHostname(String hostname) {
 80a4710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a4714:	4604      	mov	r4, r0
 80a4716:	b08b      	sub	sp, #44	; 0x2c
 80a4718:	460e      	mov	r6, r1
  String status = "Ok";
 80a471a:	a802      	add	r0, sp, #8
 80a471c:	4942      	ldr	r1, [pc, #264]	; (80a4828 <_ZN4MDNS11setHostnameE6String+0x118>)
 80a471e:	f001 fdd2 	bl	80a62c6 <_ZN6StringC1EPKc>
  if (labels[HOSTNAME]) {
 80a4722:	f104 091c 	add.w	r9, r4, #28
 80a4726:	4941      	ldr	r1, [pc, #260]	; (80a482c <_ZN4MDNS11setHostnameE6String+0x11c>)
 80a4728:	a806      	add	r0, sp, #24
 80a472a:	f001 fdcc 	bl	80a62c6 <_ZN6StringC1EPKc>
 80a472e:	4648      	mov	r0, r9
 80a4730:	a906      	add	r1, sp, #24
 80a4732:	f7ff ffa7 	bl	80a4684 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_>
 80a4736:	6805      	ldr	r5, [r0, #0]
 80a4738:	a806      	add	r0, sp, #24
 80a473a:	f001 fd7a 	bl	80a6232 <_ZN6StringD1Ev>
 80a473e:	2d00      	cmp	r5, #0
 80a4740:	d15c      	bne.n	80a47fc <_ZN4MDNS11setHostnameE6String+0xec>
  if (success && hostname.length() < MAX_LABEL_SIZE && isAlphaDigitHyphen(hostname)) {
 80a4742:	68b3      	ldr	r3, [r6, #8]
 80a4744:	2b3e      	cmp	r3, #62	; 0x3e
 80a4746:	d86a      	bhi.n	80a481e <_ZN4MDNS11setHostnameE6String+0x10e>
 80a4748:	4631      	mov	r1, r6
 80a474a:	a806      	add	r0, sp, #24
 80a474c:	f001 fe05 	bl	80a635a <_ZN6StringC1ERKS_>
 80a4750:	4620      	mov	r0, r4
 80a4752:	a906      	add	r1, sp, #24
 80a4754:	f7ff fe6f 	bl	80a4436 <_ZN4MDNS18isAlphaDigitHyphenE6String>
 80a4758:	4607      	mov	r7, r0
 80a475a:	a806      	add	r0, sp, #24
 80a475c:	f001 fd69 	bl	80a6232 <_ZN6StringD1Ev>
 80a4760:	2f00      	cmp	r7, #0
 80a4762:	d05c      	beq.n	80a481e <_ZN4MDNS11setHostnameE6String+0x10e>
    aRecord = new ARecord();
 80a4764:	2014      	movs	r0, #20
 80a4766:	f7fb fc98 	bl	80a009a <_Znwj>
 80a476a:	4605      	mov	r5, r0
 80a476c:	b108      	cbz	r0, 80a4772 <_ZN4MDNS11setHostnameE6String+0x62>
 80a476e:	f000 f9cd 	bl	80a4b0c <_ZN7ARecordC1Ev>
 80a4772:	6165      	str	r5, [r4, #20]
    HostNSECRecord * hostNSECRecord = new HostNSECRecord();
 80a4774:	2014      	movs	r0, #20
 80a4776:	f7fb fc90 	bl	80a009a <_Znwj>
 80a477a:	4605      	mov	r5, r0
 80a477c:	b108      	cbz	r0, 80a4782 <_ZN4MDNS11setHostnameE6String+0x72>
 80a477e:	f000 f9dd 	bl	80a4b3c <_ZN14HostNSECRecordC1Ev>
    records.push_back(aRecord);
 80a4782:	6963      	ldr	r3, [r4, #20]
 80a4784:	f104 0834 	add.w	r8, r4, #52	; 0x34
      { emplace_back(std::move(__x)); }
 80a4788:	4640      	mov	r0, r8
 80a478a:	a906      	add	r1, sp, #24
 80a478c:	9306      	str	r3, [sp, #24]
 80a478e:	f7ff fed9 	bl	80a4544 <_ZNSt6vectorIP6RecordSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 80a4792:	4640      	mov	r0, r8
 80a4794:	a906      	add	r1, sp, #24
    records.push_back(hostNSECRecord);
 80a4796:	9506      	str	r5, [sp, #24]
 80a4798:	f7ff fed4 	bl	80a4544 <_ZNSt6vectorIP6RecordSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
    Label * label = new HostLabel(aRecord, hostNSECRecord, hostname, LOCAL);
 80a479c:	4631      	mov	r1, r6
 80a479e:	a806      	add	r0, sp, #24
 80a47a0:	f001 fddb 	bl	80a635a <_ZN6StringC1ERKS_>
 80a47a4:	2020      	movs	r0, #32
 80a47a6:	f7fb fc78 	bl	80a009a <_Znwj>
 80a47aa:	4606      	mov	r6, r0
 80a47ac:	b140      	cbz	r0, 80a47c0 <_ZN4MDNS11setHostnameE6String+0xb0>
 80a47ae:	2300      	movs	r3, #0
 80a47b0:	9301      	str	r3, [sp, #4]
 80a47b2:	68e3      	ldr	r3, [r4, #12]
 80a47b4:	462a      	mov	r2, r5
 80a47b6:	9300      	str	r3, [sp, #0]
 80a47b8:	6961      	ldr	r1, [r4, #20]
 80a47ba:	ab06      	add	r3, sp, #24
 80a47bc:	f7ff fd68 	bl	80a4290 <_ZN9HostLabelC1EP6RecordS1_6StringP5Labelb>
 80a47c0:	a806      	add	r0, sp, #24
 80a47c2:	f001 fd36 	bl	80a6232 <_ZN6StringD1Ev>
    labels[HOSTNAME] = label;
 80a47c6:	4919      	ldr	r1, [pc, #100]	; (80a482c <_ZN4MDNS11setHostnameE6String+0x11c>)
 80a47c8:	a806      	add	r0, sp, #24
 80a47ca:	f001 fd7c 	bl	80a62c6 <_ZN6StringC1EPKc>
 80a47ce:	a906      	add	r1, sp, #24
 80a47d0:	4648      	mov	r0, r9
 80a47d2:	f7ff ff57 	bl	80a4684 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_>
 80a47d6:	6006      	str	r6, [r0, #0]
 80a47d8:	a806      	add	r0, sp, #24
 80a47da:	f001 fd2a 	bl	80a6232 <_ZN6StringD1Ev>
    aRecord->setLabel(label);
 80a47de:	4631      	mov	r1, r6
 80a47e0:	6960      	ldr	r0, [r4, #20]
 80a47e2:	f000 f95b 	bl	80a4a9c <_ZN6Record8setLabelEP5Label>
    hostNSECRecord->setLabel(label);
 80a47e6:	4631      	mov	r1, r6
 80a47e8:	4628      	mov	r0, r5
 80a47ea:	f000 f957 	bl	80a4a9c <_ZN6Record8setLabelEP5Label>
  String status = "Ok";
 80a47ee:	a802      	add	r0, sp, #8
 80a47f0:	f001 fd1f 	bl	80a6232 <_ZN6StringD1Ev>
}
 80a47f4:	4638      	mov	r0, r7
 80a47f6:	b00b      	add	sp, #44	; 0x2c
 80a47f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = "Hostname already set";
 80a47fc:	490c      	ldr	r1, [pc, #48]	; (80a4830 <_ZN4MDNS11setHostnameE6String+0x120>)
 80a47fe:	a802      	add	r0, sp, #8
 80a4800:	f001 fdbe 	bl	80a6380 <_ZN6StringaSEPKc>
    status = success? "Invalid hostname" : status;
 80a4804:	a902      	add	r1, sp, #8
 80a4806:	a806      	add	r0, sp, #24
 80a4808:	f001 fda7 	bl	80a635a <_ZN6StringC1ERKS_>
 80a480c:	a906      	add	r1, sp, #24
 80a480e:	a802      	add	r0, sp, #8
 80a4810:	f001 fdae 	bl	80a6370 <_ZN6StringaSEOS_>
 80a4814:	a806      	add	r0, sp, #24
 80a4816:	f001 fd0c 	bl	80a6232 <_ZN6StringD1Ev>
    success = false;
 80a481a:	2700      	movs	r7, #0
 80a481c:	e7e7      	b.n	80a47ee <_ZN4MDNS11setHostnameE6String+0xde>
    status = success? "Invalid hostname" : status;
 80a481e:	4905      	ldr	r1, [pc, #20]	; (80a4834 <_ZN4MDNS11setHostnameE6String+0x124>)
 80a4820:	a806      	add	r0, sp, #24
 80a4822:	f001 fd50 	bl	80a62c6 <_ZN6StringC1EPKc>
 80a4826:	e7f1      	b.n	80a480c <_ZN4MDNS11setHostnameE6String+0xfc>
 80a4828:	080acac2 	.word	0x080acac2
 80a482c:	080ad33e 	.word	0x080ad33e
 80a4830:	080ad256 	.word	0x080ad256
 80a4834:	080ad26b 	.word	0x080ad26b

080a4838 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_copyINSB_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS5_EPKSF_PSt18_Rb_tree_node_baseRT_>:
      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
 80a4838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a483c:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a483e:	2024      	movs	r0, #36	; 0x24
 80a4840:	460d      	mov	r5, r1
 80a4842:	4616      	mov	r6, r2
 80a4844:	4698      	mov	r8, r3
 80a4846:	f7fb fc28 	bl	80a009a <_Znwj>
 80a484a:	4604      	mov	r4, r0
      constexpr pair(const pair&) = default;
 80a484c:	f105 0110 	add.w	r1, r5, #16
 80a4850:	3010      	adds	r0, #16
 80a4852:	f001 fd82 	bl	80a635a <_ZN6StringC1ERKS_>
 80a4856:	6a2b      	ldr	r3, [r5, #32]
	    if (__x->_M_right)
 80a4858:	68e9      	ldr	r1, [r5, #12]
 80a485a:	6223      	str	r3, [r4, #32]
	  __tmp->_M_color = __x->_M_color;
 80a485c:	782b      	ldrb	r3, [r5, #0]
	__top->_M_parent = __p;
 80a485e:	6066      	str	r6, [r4, #4]
	  __tmp->_M_color = __x->_M_color;
 80a4860:	7023      	strb	r3, [r4, #0]
	  __tmp->_M_left = 0;
 80a4862:	2300      	movs	r3, #0
	  __tmp->_M_right = 0;
 80a4864:	e9c4 3302 	strd	r3, r3, [r4, #8]
	    if (__x->_M_right)
 80a4868:	b129      	cbz	r1, 80a4876 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_copyINSB_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS5_EPKSF_PSt18_Rb_tree_node_baseRT_+0x3e>
	      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
 80a486a:	4643      	mov	r3, r8
 80a486c:	4622      	mov	r2, r4
 80a486e:	4638      	mov	r0, r7
 80a4870:	f7ff ffe2 	bl	80a4838 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_copyINSB_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS5_EPKSF_PSt18_Rb_tree_node_baseRT_>
 80a4874:	60e0      	str	r0, [r4, #12]
	    __x = _S_left(__x);
 80a4876:	46a1      	mov	r9, r4
	  __tmp->_M_left = 0;
 80a4878:	f04f 0a00 	mov.w	sl, #0
	    __x = _S_left(__x);
 80a487c:	68ae      	ldr	r6, [r5, #8]
	    while (__x != 0)
 80a487e:	b1ee      	cbz	r6, 80a48bc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_copyINSB_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS5_EPKSF_PSt18_Rb_tree_node_baseRT_+0x84>
 80a4880:	2024      	movs	r0, #36	; 0x24
 80a4882:	f7fb fc0a 	bl	80a009a <_Znwj>
 80a4886:	4605      	mov	r5, r0
 80a4888:	f106 0110 	add.w	r1, r6, #16
 80a488c:	3010      	adds	r0, #16
 80a488e:	f001 fd64 	bl	80a635a <_ZN6StringC1ERKS_>
 80a4892:	6a33      	ldr	r3, [r6, #32]
 80a4894:	622b      	str	r3, [r5, #32]
	  __tmp->_M_color = __x->_M_color;
 80a4896:	7833      	ldrb	r3, [r6, #0]
	  __tmp->_M_right = 0;
 80a4898:	e9c5 aa02 	strd	sl, sl, [r5, #8]
	  __tmp->_M_color = __x->_M_color;
 80a489c:	702b      	strb	r3, [r5, #0]
		__p->_M_left = __y;
 80a489e:	f8c9 5008 	str.w	r5, [r9, #8]
		__y->_M_parent = __p;
 80a48a2:	f8c5 9004 	str.w	r9, [r5, #4]
		if (__x->_M_right)
 80a48a6:	68f1      	ldr	r1, [r6, #12]
 80a48a8:	b129      	cbz	r1, 80a48b6 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_copyINSB_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS5_EPKSF_PSt18_Rb_tree_node_baseRT_+0x7e>
		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
 80a48aa:	4643      	mov	r3, r8
 80a48ac:	462a      	mov	r2, r5
 80a48ae:	4638      	mov	r0, r7
 80a48b0:	f7ff ffc2 	bl	80a4838 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_copyINSB_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS5_EPKSF_PSt18_Rb_tree_node_baseRT_>
 80a48b4:	60e8      	str	r0, [r5, #12]
	    while (__x != 0)
 80a48b6:	46a9      	mov	r9, r5
		__x = _S_left(__x);
 80a48b8:	68b6      	ldr	r6, [r6, #8]
	    while (__x != 0)
 80a48ba:	e7e0      	b.n	80a487e <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_copyINSB_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS5_EPKSF_PSt18_Rb_tree_node_baseRT_+0x46>
      }
 80a48bc:	4620      	mov	r0, r4
 80a48be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080a48c4 <_ZN4MDNS12getResponsesEv>:
void MDNS::getResponses() {
 80a48c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a48c8:	b08a      	sub	sp, #40	; 0x28
  QueryHeader header = readHeader(buffer);
 80a48ca:	4601      	mov	r1, r0
 80a48cc:	6842      	ldr	r2, [r0, #4]
void MDNS::getResponses() {
 80a48ce:	4604      	mov	r4, r0
  QueryHeader header = readHeader(buffer);
 80a48d0:	a801      	add	r0, sp, #4
 80a48d2:	f7ff fd25 	bl	80a4320 <_ZN4MDNS10readHeaderEP6Buffer>
  if ((header.flags & 0x8000) == 0 && header.qdcount > 0) {
 80a48d6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80a48da:	2b00      	cmp	r3, #0
 80a48dc:	db04      	blt.n	80a48e8 <_ZN4MDNS12getResponsesEv+0x24>
  QueryHeader header = readHeader(buffer);
 80a48de:	f8bd 8008 	ldrh.w	r8, [sp, #8]
  if ((header.flags & 0x8000) == 0 && header.qdcount > 0) {
 80a48e2:	f1b8 0f00 	cmp.w	r8, #0
 80a48e6:	d102      	bne.n	80a48ee <_ZN4MDNS12getResponsesEv+0x2a>
}
 80a48e8:	b00a      	add	sp, #40	; 0x28
 80a48ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a48ee:	2700      	movs	r7, #0
        status = "Buffer underflow at index " + buffer->getOffset();
 80a48f0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80a4998 <_ZN4MDNS12getResponsesEv+0xd4>
      _M_header._M_left = &_M_header;
 80a48f4:	ae04      	add	r6, sp, #16
 80a48f6:	e008      	b.n	80a490a <_ZN4MDNS12getResponsesEv+0x46>
 80a48f8:	f7ff faf6 	bl	80a3ee8 <_ZN6Buffer9getOffsetEv>
 80a48fc:	eb09 0100 	add.w	r1, r9, r0
 80a4900:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80a4904:	f001 fd3c 	bl	80a6380 <_ZN6StringaSEPKc>
 80a4908:	3701      	adds	r7, #1
    while (count++ < header.qdcount && buffer->available() > 0) {
 80a490a:	b2fb      	uxtb	r3, r7
 80a490c:	4543      	cmp	r3, r8
 80a490e:	daeb      	bge.n	80a48e8 <_ZN4MDNS12getResponsesEv+0x24>
 80a4910:	6860      	ldr	r0, [r4, #4]
 80a4912:	f7ff facf 	bl	80a3eb4 <_ZN6Buffer9availableEv>
 80a4916:	2800      	cmp	r0, #0
 80a4918:	d0e6      	beq.n	80a48e8 <_ZN4MDNS12getResponsesEv+0x24>
      _M_header._M_color = _S_red;
 80a491a:	2300      	movs	r3, #0
	if (__x._M_root() != 0)
 80a491c:	6a61      	ldr	r1, [r4, #36]	; 0x24
      _M_header._M_left = &_M_header;
 80a491e:	aa05      	add	r2, sp, #20
      _M_header._M_right = &_M_header;
 80a4920:	e9cd 2207 	strd	r2, r2, [sp, #28]
      Label * label = matcher->match(labels, buffer);
 80a4924:	6925      	ldr	r5, [r4, #16]
      _M_header._M_color = _S_red;
 80a4926:	f88d 3014 	strb.w	r3, [sp, #20]
      _M_header._M_parent = 0;
 80a492a:	9306      	str	r3, [sp, #24]
      _M_node_count = 0;
 80a492c:	9309      	str	r3, [sp, #36]	; 0x24
	if (__x._M_root() != 0)
 80a492e:	b199      	cbz	r1, 80a4958 <_ZN4MDNS12getResponsesEv+0x94>
	  _Link_type __root = _M_copy(__x._M_begin(), _M_end(), __gen);
 80a4930:	466b      	mov	r3, sp
 80a4932:	4630      	mov	r0, r6
	: _M_t(__t) { }
 80a4934:	9600      	str	r6, [sp, #0]
	  _Link_type __root = _M_copy(__x._M_begin(), _M_end(), __gen);
 80a4936:	f7ff ff7f 	bl	80a4838 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_copyINSB_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS5_EPKSF_PSt18_Rb_tree_node_baseRT_>
 80a493a:	4603      	mov	r3, r0
      while (__x->_M_left != 0) __x = __x->_M_left;
 80a493c:	461a      	mov	r2, r3
 80a493e:	689b      	ldr	r3, [r3, #8]
 80a4940:	2b00      	cmp	r3, #0
 80a4942:	d1fb      	bne.n	80a493c <_ZN4MDNS12getResponsesEv+0x78>
	  _M_leftmost() = _S_minimum(__root);
 80a4944:	4603      	mov	r3, r0
 80a4946:	9207      	str	r2, [sp, #28]
      while (__x->_M_right != 0) __x = __x->_M_right;
 80a4948:	461a      	mov	r2, r3
 80a494a:	68db      	ldr	r3, [r3, #12]
 80a494c:	2b00      	cmp	r3, #0
 80a494e:	d1fb      	bne.n	80a4948 <_ZN4MDNS12getResponsesEv+0x84>
	  _M_impl._M_node_count = __x._M_impl._M_node_count;
 80a4950:	6b23      	ldr	r3, [r4, #48]	; 0x30
	  _M_rightmost() = _S_maximum(__root);
 80a4952:	9208      	str	r2, [sp, #32]
	  _M_impl._M_node_count = __x._M_impl._M_node_count;
 80a4954:	9309      	str	r3, [sp, #36]	; 0x24
	  _M_root() = _M_copy(__x);
 80a4956:	9006      	str	r0, [sp, #24]
 80a4958:	6862      	ldr	r2, [r4, #4]
 80a495a:	4631      	mov	r1, r6
 80a495c:	4628      	mov	r0, r5
 80a495e:	f7ff fc00 	bl	80a4162 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer>
      { _M_erase(_M_begin()); }
 80a4962:	9906      	ldr	r1, [sp, #24]
 80a4964:	4605      	mov	r5, r0
 80a4966:	4630      	mov	r0, r6
 80a4968:	f7fd ff86 	bl	80a2878 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
      if (buffer->available() >= 4) {
 80a496c:	6860      	ldr	r0, [r4, #4]
 80a496e:	f7ff faa1 	bl	80a3eb4 <_ZN6Buffer9availableEv>
 80a4972:	2803      	cmp	r0, #3
        uint16_t type = buffer->readUInt16();
 80a4974:	6860      	ldr	r0, [r4, #4]
      if (buffer->available() >= 4) {
 80a4976:	d9bf      	bls.n	80a48f8 <_ZN4MDNS12getResponsesEv+0x34>
        uint16_t type = buffer->readUInt16();
 80a4978:	f7ff faca 	bl	80a3f10 <_ZN6Buffer10readUInt16Ev>
 80a497c:	4682      	mov	sl, r0
        uint16_t cls = buffer->readUInt16();
 80a497e:	6860      	ldr	r0, [r4, #4]
 80a4980:	f7ff fac6 	bl	80a3f10 <_ZN6Buffer10readUInt16Ev>
 80a4984:	4602      	mov	r2, r0
        if (label != NULL) {
 80a4986:	2d00      	cmp	r5, #0
 80a4988:	d0be      	beq.n	80a4908 <_ZN4MDNS12getResponsesEv+0x44>
          label->matched(type, cls);
 80a498a:	682b      	ldr	r3, [r5, #0]
 80a498c:	4651      	mov	r1, sl
 80a498e:	4628      	mov	r0, r5
 80a4990:	681b      	ldr	r3, [r3, #0]
 80a4992:	4798      	blx	r3
 80a4994:	e7b8      	b.n	80a4908 <_ZN4MDNS12getResponsesEv+0x44>
 80a4996:	bf00      	nop
 80a4998:	080ad27c 	.word	0x080ad27c

080a499c <_ZN4MDNS14processQueriesEv>:
bool MDNS::processQueries() {
 80a499c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a499e:	4604      	mov	r4, r0
  uint16_t n = udp->parsePacket();
 80a49a0:	6800      	ldr	r0, [r0, #0]
 80a49a2:	2100      	movs	r1, #0
 80a49a4:	6803      	ldr	r3, [r0, #0]
bool MDNS::processQueries() {
 80a49a6:	b089      	sub	sp, #36	; 0x24
  uint16_t n = udp->parsePacket();
 80a49a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a49aa:	4798      	blx	r3
 80a49ac:	b285      	uxth	r5, r0
  if (n > 0) {
 80a49ae:	b365      	cbz	r5, 80a4a0a <_ZN4MDNS14processQueriesEv+0x6e>
    buffer->read(udp);
 80a49b0:	e9d4 1000 	ldrd	r1, r0, [r4]
 80a49b4:	f7ff fa9a 	bl	80a3eec <_ZN6Buffer4readEP3UDP>
    udp->flush();
 80a49b8:	6820      	ldr	r0, [r4, #0]
 80a49ba:	6803      	ldr	r3, [r0, #0]
 80a49bc:	69db      	ldr	r3, [r3, #28]
 80a49be:	4798      	blx	r3
    getResponses();
 80a49c0:	4620      	mov	r0, r4
 80a49c2:	f7ff ff7f 	bl	80a48c4 <_ZN4MDNS12getResponsesEv>
    buffer->clear();
 80a49c6:	6860      	ldr	r0, [r4, #4]
 80a49c8:	f7ff fadf 	bl	80a3f8a <_ZN6Buffer5clearEv>
    writeResponses();
 80a49cc:	4620      	mov	r0, r4
 80a49ce:	f7ff fcc9 	bl	80a4364 <_ZN4MDNS14writeResponsesEv>
    if (buffer->available() > 0) {
 80a49d2:	6860      	ldr	r0, [r4, #4]
 80a49d4:	f7ff fa6e 	bl	80a3eb4 <_ZN6Buffer9availableEv>
 80a49d8:	b1b8      	cbz	r0, 80a4a0a <_ZN4MDNS14processQueriesEv+0x6e>
      udp->beginPacket(IPAddress(224, 0, 0, 251), MDNS_PORT);
 80a49da:	6826      	ldr	r6, [r4, #0]
 80a49dc:	21e0      	movs	r1, #224	; 0xe0
 80a49de:	6833      	ldr	r3, [r6, #0]
 80a49e0:	a802      	add	r0, sp, #8
 80a49e2:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a49e4:	23fb      	movs	r3, #251	; 0xfb
 80a49e6:	9300      	str	r3, [sp, #0]
 80a49e8:	2300      	movs	r3, #0
 80a49ea:	461a      	mov	r2, r3
 80a49ec:	f001 fb02 	bl	80a5ff4 <_ZN9IPAddressC1Ehhhh>
 80a49f0:	f241 42e9 	movw	r2, #5353	; 0x14e9
 80a49f4:	a902      	add	r1, sp, #8
 80a49f6:	4630      	mov	r0, r6
 80a49f8:	47b8      	blx	r7
      buffer->write(udp);
 80a49fa:	e9d4 1000 	ldrd	r1, r0, [r4]
 80a49fe:	f7ff fab9 	bl	80a3f74 <_ZN6Buffer5writeEP3UDP>
      udp->endPacket();
 80a4a02:	6820      	ldr	r0, [r4, #0]
 80a4a04:	6803      	ldr	r3, [r0, #0]
 80a4a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a4a08:	4798      	blx	r3
}
 80a4a0a:	1e28      	subs	r0, r5, #0
 80a4a0c:	bf18      	it	ne
 80a4a0e:	2001      	movne	r0, #1
 80a4a10:	b009      	add	sp, #36	; 0x24
 80a4a12:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a4a14 <_ZN14HostNSECRecord13writeSpecificEP6Buffer>:
}

HostNSECRecord::HostNSECRecord():NSECRecord() {
}

void HostNSECRecord::writeSpecific(Buffer * buffer) {
 80a4a14:	b538      	push	{r3, r4, r5, lr}
 80a4a16:	460c      	mov	r4, r1
 80a4a18:	4605      	mov	r5, r0
  buffer->writeUInt16(5);
 80a4a1a:	2105      	movs	r1, #5
 80a4a1c:	4620      	mov	r0, r4
 80a4a1e:	f7ff fa8d 	bl	80a3f3c <_ZN6Buffer11writeUInt16Et>
  getLabel()->write(buffer);
 80a4a22:	4621      	mov	r1, r4
 80a4a24:	6868      	ldr	r0, [r5, #4]
 80a4a26:	f7ff faf9 	bl	80a401c <_ZN5Label5writeEP6Buffer>
  buffer->writeUInt8(0);
 80a4a2a:	4620      	mov	r0, r4
 80a4a2c:	2100      	movs	r1, #0
 80a4a2e:	f7ff fa7b 	bl	80a3f28 <_ZN6Buffer10writeUInt8Eh>
  buffer->writeUInt8(1);
 80a4a32:	4620      	mov	r0, r4
 80a4a34:	2101      	movs	r1, #1
 80a4a36:	f7ff fa77 	bl	80a3f28 <_ZN6Buffer10writeUInt8Eh>
  buffer->writeUInt8(0x40);
 80a4a3a:	4620      	mov	r0, r4
}
 80a4a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  buffer->writeUInt8(0x40);
 80a4a40:	2140      	movs	r1, #64	; 0x40
 80a4a42:	f7ff ba71 	b.w	80a3f28 <_ZN6Buffer10writeUInt8Eh>
	...

080a4a48 <_ZN7ARecord13writeSpecificEP6Buffer>:
void ARecord::writeSpecific(Buffer * buffer) {
 80a4a48:	b510      	push	{r4, lr}
 80a4a4a:	460c      	mov	r4, r1
 80a4a4c:	b086      	sub	sp, #24
  buffer->writeUInt16(4);
 80a4a4e:	4620      	mov	r0, r4
 80a4a50:	2104      	movs	r1, #4
 80a4a52:	f7ff fa73 	bl	80a3f3c <_ZN6Buffer11writeUInt16Et>
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a4a56:	2200      	movs	r2, #0
 80a4a58:	4b0f      	ldr	r3, [pc, #60]	; (80a4a98 <_ZN7ARecord13writeSpecificEP6Buffer+0x50>)
 80a4a5a:	4611      	mov	r1, r2
 80a4a5c:	6858      	ldr	r0, [r3, #4]
 80a4a5e:	f000 feb7 	bl	80a57d0 <network_config>
        return IPAddress(wifi_config()->nw.aucIP);
 80a4a62:	1c81      	adds	r1, r0, #2
 80a4a64:	4668      	mov	r0, sp
 80a4a66:	f001 fa9d 	bl	80a5fa4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    buffer->writeUInt8(ip[i]);
 80a4a6a:	4620      	mov	r0, r4
 80a4a6c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a4a70:	f7ff fa5a 	bl	80a3f28 <_ZN6Buffer10writeUInt8Eh>
 80a4a74:	4620      	mov	r0, r4
 80a4a76:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80a4a7a:	f7ff fa55 	bl	80a3f28 <_ZN6Buffer10writeUInt8Eh>
 80a4a7e:	4620      	mov	r0, r4
 80a4a80:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80a4a84:	f7ff fa50 	bl	80a3f28 <_ZN6Buffer10writeUInt8Eh>
 80a4a88:	4620      	mov	r0, r4
 80a4a8a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80a4a8e:	f7ff fa4b 	bl	80a3f28 <_ZN6Buffer10writeUInt8Eh>
}
 80a4a92:	b006      	add	sp, #24
 80a4a94:	bd10      	pop	{r4, pc}
 80a4a96:	bf00      	nop
 80a4a98:	200014d0 	.word	0x200014d0

080a4a9c <_ZN6Record8setLabelEP5Label>:
  this->label = label;
 80a4a9c:	6041      	str	r1, [r0, #4]
}
 80a4a9e:	4770      	bx	lr

080a4aa0 <_ZN6Record15setAnswerRecordEv>:
  this->answerRecord = true;
 80a4aa0:	2301      	movs	r3, #1
 80a4aa2:	7403      	strb	r3, [r0, #16]
}
 80a4aa4:	4770      	bx	lr

080a4aa6 <_ZN6Record14isAnswerRecordEv>:
bool Record::isAnswerRecord() {
 80a4aa6:	4603      	mov	r3, r0
  return answerRecord && !knownRecord;
 80a4aa8:	7c00      	ldrb	r0, [r0, #16]
 80a4aaa:	b110      	cbz	r0, 80a4ab2 <_ZN6Record14isAnswerRecordEv+0xc>
 80a4aac:	7c98      	ldrb	r0, [r3, #18]
 80a4aae:	f080 0001 	eor.w	r0, r0, #1
}
 80a4ab2:	4770      	bx	lr

080a4ab4 <_ZN6Record19setAdditionalRecordEv>:
  this->additionalRecord = true;
 80a4ab4:	2301      	movs	r3, #1
 80a4ab6:	7443      	strb	r3, [r0, #17]
}
 80a4ab8:	4770      	bx	lr

080a4aba <_ZN6Record18isAdditionalRecordEv>:
bool Record::isAdditionalRecord() {
 80a4aba:	4603      	mov	r3, r0
  return additionalRecord && !answerRecord && !knownRecord;
 80a4abc:	7c40      	ldrb	r0, [r0, #17]
 80a4abe:	b130      	cbz	r0, 80a4ace <_ZN6Record18isAdditionalRecordEv+0x14>
 80a4ac0:	7c1a      	ldrb	r2, [r3, #16]
 80a4ac2:	b91a      	cbnz	r2, 80a4acc <_ZN6Record18isAdditionalRecordEv+0x12>
 80a4ac4:	7c98      	ldrb	r0, [r3, #18]
 80a4ac6:	f080 0001 	eor.w	r0, r0, #1
 80a4aca:	4770      	bx	lr
 80a4acc:	2000      	movs	r0, #0
}
 80a4ace:	4770      	bx	lr

080a4ad0 <_ZN6Record5writeEP6Buffer>:
void Record::write(Buffer * buffer) {
 80a4ad0:	b570      	push	{r4, r5, r6, lr}
 80a4ad2:	460d      	mov	r5, r1
 80a4ad4:	4604      	mov	r4, r0
  label->write(buffer);
 80a4ad6:	6840      	ldr	r0, [r0, #4]
 80a4ad8:	f7ff faa0 	bl	80a401c <_ZN5Label5writeEP6Buffer>
  buffer->writeUInt16(type);
 80a4adc:	4628      	mov	r0, r5
 80a4ade:	8921      	ldrh	r1, [r4, #8]
 80a4ae0:	f7ff fa2c 	bl	80a3f3c <_ZN6Buffer11writeUInt16Et>
  buffer->writeUInt16(IN_CLASS);
 80a4ae4:	4628      	mov	r0, r5
 80a4ae6:	2101      	movs	r1, #1
 80a4ae8:	f7ff fa28 	bl	80a3f3c <_ZN6Buffer11writeUInt16Et>
  buffer->writeUInt32(ttl);
 80a4aec:	4628      	mov	r0, r5
 80a4aee:	68e1      	ldr	r1, [r4, #12]
 80a4af0:	f7ff fa2e 	bl	80a3f50 <_ZN6Buffer11writeUInt32Em>
  writeSpecific(buffer);
 80a4af4:	6823      	ldr	r3, [r4, #0]
 80a4af6:	4629      	mov	r1, r5
 80a4af8:	4620      	mov	r0, r4
}
 80a4afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  writeSpecific(buffer);
 80a4afe:	681b      	ldr	r3, [r3, #0]
 80a4b00:	4718      	bx	r3

080a4b02 <_ZN6Record5resetEv>:
  this->answerRecord = false;
 80a4b02:	2300      	movs	r3, #0
 80a4b04:	8203      	strh	r3, [r0, #16]
  this->knownRecord = false;
 80a4b06:	7483      	strb	r3, [r0, #18]
}
 80a4b08:	4770      	bx	lr
	...

080a4b0c <_ZN7ARecordC1Ev>:
  this->type = type;
 80a4b0c:	2201      	movs	r2, #1
 80a4b0e:	8102      	strh	r2, [r0, #8]
  this->ttl = ttl;
 80a4b10:	2278      	movs	r2, #120	; 0x78
 80a4b12:	60c2      	str	r2, [r0, #12]
Record::Record(uint16_t type, uint32_t ttl) {
 80a4b14:	2200      	movs	r2, #0
 80a4b16:	8202      	strh	r2, [r0, #16]
 80a4b18:	7482      	strb	r2, [r0, #18]
ARecord::ARecord():Record(A_TYPE, TTL_2MIN) {
 80a4b1a:	4a01      	ldr	r2, [pc, #4]	; (80a4b20 <_ZN7ARecordC1Ev+0x14>)
 80a4b1c:	6002      	str	r2, [r0, #0]
}
 80a4b1e:	4770      	bx	lr
 80a4b20:	080ad2b8 	.word	0x080ad2b8

080a4b24 <_ZN10NSECRecordC1Ev>:
  this->type = type;
 80a4b24:	222f      	movs	r2, #47	; 0x2f
 80a4b26:	8102      	strh	r2, [r0, #8]
  this->ttl = ttl;
 80a4b28:	2278      	movs	r2, #120	; 0x78
 80a4b2a:	60c2      	str	r2, [r0, #12]
Record::Record(uint16_t type, uint32_t ttl) {
 80a4b2c:	2200      	movs	r2, #0
 80a4b2e:	8202      	strh	r2, [r0, #16]
 80a4b30:	7482      	strb	r2, [r0, #18]
NSECRecord::NSECRecord():Record(NSEC_TYPE, TTL_2MIN) {
 80a4b32:	4a01      	ldr	r2, [pc, #4]	; (80a4b38 <_ZN10NSECRecordC1Ev+0x14>)
 80a4b34:	6002      	str	r2, [r0, #0]
}
 80a4b36:	4770      	bx	lr
 80a4b38:	080ad2a0 	.word	0x080ad2a0

080a4b3c <_ZN14HostNSECRecordC1Ev>:
HostNSECRecord::HostNSECRecord():NSECRecord() {
 80a4b3c:	b508      	push	{r3, lr}
 80a4b3e:	4603      	mov	r3, r0
 80a4b40:	f7ff fff0 	bl	80a4b24 <_ZN10NSECRecordC1Ev>
 80a4b44:	4a01      	ldr	r2, [pc, #4]	; (80a4b4c <_ZN14HostNSECRecordC1Ev+0x10>)
}
 80a4b46:	4618      	mov	r0, r3
HostNSECRecord::HostNSECRecord():NSECRecord() {
 80a4b48:	601a      	str	r2, [r3, #0]
}
 80a4b4a:	bd08      	pop	{r3, pc}
 80a4b4c:	080ad2ac 	.word	0x080ad2ac

080a4b50 <_ZN9WebServer5writeEh>:
{
  m_urlPathCmd = cmd;
}

size_t WebServer::write(uint8_t ch)
{
 80a4b50:	b510      	push	{r4, lr}
  m_buffer[m_bufFill++] = ch;
 80a4b52:	f890 3144 	ldrb.w	r3, [r0, #324]	; 0x144
{
 80a4b56:	4604      	mov	r4, r0
  m_buffer[m_bufFill++] = ch;
 80a4b58:	1c5a      	adds	r2, r3, #1
 80a4b5a:	b2d2      	uxtb	r2, r2
 80a4b5c:	4403      	add	r3, r0

  if(m_bufFill == sizeof(m_buffer))
 80a4b5e:	2a20      	cmp	r2, #32
  m_buffer[m_bufFill++] = ch;
 80a4b60:	f880 2144 	strb.w	r2, [r0, #324]	; 0x144
 80a4b64:	f883 1124 	strb.w	r1, [r3, #292]	; 0x124
  if(m_bufFill == sizeof(m_buffer))
 80a4b68:	d107      	bne.n	80a4b7a <_ZN9WebServer5writeEh+0x2a>
  {
    m_client.write(m_buffer, sizeof(m_buffer));
 80a4b6a:	f500 7192 	add.w	r1, r0, #292	; 0x124
 80a4b6e:	3038      	adds	r0, #56	; 0x38
 80a4b70:	f001 fcb1 	bl	80a64d6 <_ZN9TCPClient5writeEPKhj>
    m_bufFill = 0;
 80a4b74:	2300      	movs	r3, #0
 80a4b76:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
  }

  return sizeof(ch);
}
 80a4b7a:	2001      	movs	r0, #1
 80a4b7c:	bd10      	pop	{r4, pc}

080a4b7e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a4b7e:	b510      	push	{r4, lr}
 80a4b80:	4604      	mov	r4, r0
          _M_dispose();
 80a4b82:	6803      	ldr	r3, [r0, #0]
 80a4b84:	689b      	ldr	r3, [r3, #8]
 80a4b86:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a4b88:	68a3      	ldr	r3, [r4, #8]
 80a4b8a:	3b01      	subs	r3, #1
 80a4b8c:	60a3      	str	r3, [r4, #8]
 80a4b8e:	b92b      	cbnz	r3, 80a4b9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80a4b90:	6823      	ldr	r3, [r4, #0]
 80a4b92:	4620      	mov	r0, r4
    }
 80a4b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80a4b98:	68db      	ldr	r3, [r3, #12]
 80a4b9a:	4718      	bx	r3
    }
 80a4b9c:	bd10      	pop	{r4, pc}
	...

080a4ba0 <_ZN9WebServerC1EPKct>:
WebServer::WebServer(const char *urlPrefix, uint16_t port) :
 80a4ba0:	b570      	push	{r4, r5, r6, lr}
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
 80a4ba2:	2500      	movs	r5, #0
 80a4ba4:	4604      	mov	r4, r0
 80a4ba6:	460e      	mov	r6, r1
  m_bufFill(0)
 80a4ba8:	4b0d      	ldr	r3, [pc, #52]	; (80a4be0 <_ZN9WebServerC1EPKct+0x40>)
WebServer::WebServer(const char *urlPrefix, uint16_t port) :
 80a4baa:	4611      	mov	r1, r2
 80a4bac:	6045      	str	r5, [r0, #4]
  m_bufFill(0)
 80a4bae:	462a      	mov	r2, r5
 80a4bb0:	f840 3b08 	str.w	r3, [r0], #8
 80a4bb4:	f001 ff58 	bl	80a6a68 <_ZN9TCPServerC1Etm>
 80a4bb8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a4bbc:	f001 feb0 	bl	80a6920 <_ZN9TCPClientC1Ev>
 80a4bc0:	4b08      	ldr	r3, [pc, #32]	; (80a4be4 <_ZN9WebServerC1EPKct+0x44>)
}
 80a4bc2:	4620      	mov	r0, r4
  m_bufFill(0)
 80a4bc4:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
 80a4bc8:	6566      	str	r6, [r4, #84]	; 0x54
 80a4bca:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80a4bce:	67e5      	str	r5, [r4, #124]	; 0x7c
 80a4bd0:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
 80a4bd4:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
 80a4bd8:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
}
 80a4bdc:	bd70      	pop	{r4, r5, r6, pc}
 80a4bde:	bf00      	nop
 80a4be0:	080ad378 	.word	0x080ad378
 80a4be4:	080a4de9 	.word	0x080a4de9

080a4be8 <_ZN9WebServer5beginEv>:
  m_server.begin();
 80a4be8:	3008      	adds	r0, #8
 80a4bea:	f001 bf79 	b.w	80a6ae0 <_ZN9TCPServer5beginEv>

080a4bee <_ZN9WebServer17setDefaultCommandEPFvRS_NS_14ConnectionTypeEPcbPvE>:
  m_defaultCmd = cmd;
 80a4bee:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
}
 80a4bf2:	4770      	bx	lr

080a4bf4 <_ZN9WebServer10addCommandEPKcPFvRS_NS_14ConnectionTypeEPcbPvES5_>:
{
 80a4bf4:	b530      	push	{r4, r5, lr}
  if (m_cmdCount < SIZE(m_commands))
 80a4bf6:	f890 511c 	ldrb.w	r5, [r0, #284]	; 0x11c
 80a4bfa:	2d07      	cmp	r5, #7
 80a4bfc:	d809      	bhi.n	80a4c12 <_ZN9WebServer10addCommandEPKcPFvRS_NS_14ConnectionTypeEPcbPvES5_+0x1e>
    m_commands[m_cmdCount].verb = verb;
 80a4bfe:	240c      	movs	r4, #12
 80a4c00:	fb04 0405 	mla	r4, r4, r5, r0
    m_commands[m_cmdCount++].obj = callback_obj;
 80a4c04:	3501      	adds	r5, #1
    m_commands[m_cmdCount].cmd = cmd;
 80a4c06:	e9c4 122f 	strd	r1, r2, [r4, #188]	; 0xbc
    m_commands[m_cmdCount++].obj = callback_obj;
 80a4c0a:	f880 511c 	strb.w	r5, [r0, #284]	; 0x11c
 80a4c0e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
}
 80a4c12:	bd30      	pop	{r4, r5, pc}

080a4c14 <_ZN9WebServer8flushBufEv>:
  flushBuf(); //Flush any buffered output
  return m_client.write(buffer, size);
}

void WebServer::flushBuf()
{
 80a4c14:	b510      	push	{r4, lr}
  if(m_bufFill > 0)
 80a4c16:	f890 2144 	ldrb.w	r2, [r0, #324]	; 0x144
{
 80a4c1a:	4604      	mov	r4, r0
  if(m_bufFill > 0)
 80a4c1c:	b13a      	cbz	r2, 80a4c2e <_ZN9WebServer8flushBufEv+0x1a>
  {
    m_client.write(m_buffer, m_bufFill);
 80a4c1e:	f500 7192 	add.w	r1, r0, #292	; 0x124
 80a4c22:	3038      	adds	r0, #56	; 0x38
 80a4c24:	f001 fc57 	bl	80a64d6 <_ZN9TCPClient5writeEPKhj>
    m_bufFill = 0;
 80a4c28:	2300      	movs	r3, #0
 80a4c2a:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
  }
}
 80a4c2e:	bd10      	pop	{r4, pc}

080a4c30 <_ZN9WebServer5writeEPKhj>:
{
 80a4c30:	b570      	push	{r4, r5, r6, lr}
 80a4c32:	4604      	mov	r4, r0
 80a4c34:	460d      	mov	r5, r1
 80a4c36:	4616      	mov	r6, r2
  flushBuf(); //Flush any buffered output
 80a4c38:	f7ff ffec 	bl	80a4c14 <_ZN9WebServer8flushBufEv>
  return m_client.write(buffer, size);
 80a4c3c:	4632      	mov	r2, r6
 80a4c3e:	4629      	mov	r1, r5
 80a4c40:	f104 0038 	add.w	r0, r4, #56	; 0x38
}
 80a4c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return m_client.write(buffer, size);
 80a4c48:	f001 bc45 	b.w	80a64d6 <_ZN9TCPClient5writeEPKhj>

080a4c4c <_ZN9WebServer6writePEPKhj>:

void WebServer::writeP(const unsigned char *data, size_t length)
{
 80a4c4c:	b570      	push	{r4, r5, r6, lr}
 80a4c4e:	4605      	mov	r5, r0
 80a4c50:	460c      	mov	r4, r1
 80a4c52:	188e      	adds	r6, r1, r2
  // copy data out of program memory into local storage

  while (length--)
 80a4c54:	42b4      	cmp	r4, r6
 80a4c56:	d006      	beq.n	80a4c66 <_ZN9WebServer6writePEPKhj+0x1a>
  {
    write(pgm_read_byte(data++));
 80a4c58:	682b      	ldr	r3, [r5, #0]
 80a4c5a:	4628      	mov	r0, r5
 80a4c5c:	689b      	ldr	r3, [r3, #8]
 80a4c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a4c62:	4798      	blx	r3
  while (length--)
 80a4c64:	e7f6      	b.n	80a4c54 <_ZN9WebServer6writePEPKhj+0x8>
  }
}
 80a4c66:	bd70      	pop	{r4, r5, r6, pc}

080a4c68 <_ZN9WebServer6printPEPKh>:

void WebServer::printP(const unsigned char *str)
{
 80a4c68:	b538      	push	{r3, r4, r5, lr}
 80a4c6a:	4604      	mov	r4, r0
 80a4c6c:	460d      	mov	r5, r1
  // copy data out of program memory into local storage

  while (uint8_t value = pgm_read_byte(str++))
 80a4c6e:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a4c72:	b121      	cbz	r1, 80a4c7e <_ZN9WebServer6printPEPKh+0x16>
  {
    write(value);
 80a4c74:	6823      	ldr	r3, [r4, #0]
 80a4c76:	4620      	mov	r0, r4
 80a4c78:	689b      	ldr	r3, [r3, #8]
 80a4c7a:	4798      	blx	r3
  }
 80a4c7c:	e7f7      	b.n	80a4c6e <_ZN9WebServer6printPEPKh+0x6>
}
 80a4c7e:	bd38      	pop	{r3, r4, r5, pc}

080a4c80 <_ZN9WebServer9printCRLFEv>:

void WebServer::printCRLF()
{
  print(CRLF);
 80a4c80:	4901      	ldr	r1, [pc, #4]	; (80a4c88 <_ZN9WebServer9printCRLFEv+0x8>)
 80a4c82:	f001 ba79 	b.w	80a6178 <_ZN5Print5printEPKc>
 80a4c86:	bf00      	nop
 80a4c88:	080ad33c 	.word	0x080ad33c

080a4c8c <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb>:
}
#endif

bool WebServer::dispatchCommand(ConnectionType requestType, char *verb,
        bool tail_complete)
{
 80a4c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // if there is no URL, i.e. we have a prefix and it's requested without a
  // trailing slash or if the URL is just the slash
  if ((verb[0] == 0) || ((verb[0] == '/') && (verb[1] == 0)))
 80a4c90:	7814      	ldrb	r4, [r2, #0]
{
 80a4c92:	4606      	mov	r6, r0
 80a4c94:	4688      	mov	r8, r1
 80a4c96:	4699      	mov	r9, r3
 80a4c98:	b08f      	sub	sp, #60	; 0x3c
  if ((verb[0] == 0) || ((verb[0] == '/') && (verb[1] == 0)))
 80a4c9a:	b124      	cbz	r4, 80a4ca6 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x1a>
 80a4c9c:	2c2f      	cmp	r4, #47	; 0x2f
 80a4c9e:	f040 8088 	bne.w	80a4db2 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x126>
 80a4ca2:	7854      	ldrb	r4, [r2, #1]
 80a4ca4:	b964      	cbnz	r4, 80a4cc0 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x34>
  {
    m_defaultCmd(*this, requestType, (char*)"", tail_complete, NULL);
 80a4ca6:	2300      	movs	r3, #0
 80a4ca8:	4641      	mov	r1, r8
 80a4caa:	9300      	str	r3, [sp, #0]
 80a4cac:	4630      	mov	r0, r6
 80a4cae:	464b      	mov	r3, r9
 80a4cb0:	f8d6 40b8 	ldr.w	r4, [r6, #184]	; 0xb8
 80a4cb4:	4a40      	ldr	r2, [pc, #256]	; (80a4db8 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x12c>)
  // if the URL is just a slash followed by a question mark
  // we're looking at the default command with GET parameters passed
  if ((verb[0] == '/') && (verb[1] == '?'))
  {
    verb+=2; // skip over the "/?" part of the url
    m_defaultCmd(*this, requestType, verb, tail_complete, NULL);
 80a4cb6:	47a0      	blx	r4
          if (part == WEBDUINO_URL_PATH_COMMAND_LENGTH) break;
        }
      }
      m_urlPathCmd(*this, requestType, url_path,
                   verb + verb_len + qm_offset, tail_complete);
      return true;
 80a4cb8:	2001      	movs	r0, #1
    }
  }
  return false;
}
 80a4cba:	b00f      	add	sp, #60	; 0x3c
 80a4cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((verb[0] == '/') && (verb[1] == '?'))
 80a4cc0:	2c3f      	cmp	r4, #63	; 0x3f
 80a4cc2:	d105      	bne.n	80a4cd0 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x44>
    m_defaultCmd(*this, requestType, verb, tail_complete, NULL);
 80a4cc4:	2400      	movs	r4, #0
 80a4cc6:	9400      	str	r4, [sp, #0]
 80a4cc8:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
 80a4ccc:	3202      	adds	r2, #2
 80a4cce:	e7f2      	b.n	80a4cb6 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x2a>
    verb++;
 80a4cd0:	1c54      	adds	r4, r2, #1
    qm_loc = strchr(verb, '?');
 80a4cd2:	213f      	movs	r1, #63	; 0x3f
 80a4cd4:	4620      	mov	r0, r4
 80a4cd6:	f007 fc5b 	bl	80ac590 <strchr>
    verb_len = (qm_loc == NULL) ? strlen(verb) : (qm_loc - verb);
 80a4cda:	4607      	mov	r7, r0
 80a4cdc:	bb90      	cbnz	r0, 80a4d44 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0xb8>
 80a4cde:	4620      	mov	r0, r4
 80a4ce0:	f007 fc91 	bl	80ac606 <strlen>
 80a4ce4:	b285      	uxth	r5, r0
    qm_offset = (qm_loc == NULL) ? 0 : 1;
 80a4ce6:	3f00      	subs	r7, #0
 80a4ce8:	bf18      	it	ne
 80a4cea:	2701      	movne	r7, #1
    for (i = 0; i < m_cmdCount; ++i)
 80a4cec:	f04f 0b00 	mov.w	fp, #0
 80a4cf0:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 80a4cf4:	9303      	str	r3, [sp, #12]
      if ((verb_len == strlen(m_commands[i].verb))
 80a4cf6:	f106 03bc 	add.w	r3, r6, #188	; 0xbc
 80a4cfa:	9304      	str	r3, [sp, #16]
    for (i = 0; i < m_cmdCount; ++i)
 80a4cfc:	9b03      	ldr	r3, [sp, #12]
 80a4cfe:	fa5f f28b 	uxtb.w	r2, fp
 80a4d02:	4293      	cmp	r3, r2
 80a4d04:	d924      	bls.n	80a4d50 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0xc4>
      if ((verb_len == strlen(m_commands[i].verb))
 80a4d06:	230c      	movs	r3, #12
 80a4d08:	fb03 fa0b 	mul.w	sl, r3, fp
 80a4d0c:	9b04      	ldr	r3, [sp, #16]
 80a4d0e:	f853 100a 	ldr.w	r1, [r3, sl]
 80a4d12:	4608      	mov	r0, r1
 80a4d14:	9105      	str	r1, [sp, #20]
 80a4d16:	f007 fc76 	bl	80ac606 <strlen>
 80a4d1a:	4285      	cmp	r5, r0
 80a4d1c:	9905      	ldr	r1, [sp, #20]
 80a4d1e:	d114      	bne.n	80a4d4a <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0xbe>
          && (strncmp(verb, m_commands[i].verb, verb_len) == 0))
 80a4d20:	462a      	mov	r2, r5
 80a4d22:	4620      	mov	r0, r4
 80a4d24:	f007 fc77 	bl	80ac616 <strncmp>
 80a4d28:	b978      	cbnz	r0, 80a4d4a <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0xbe>
        m_commands[i].cmd(*this, requestType,
 80a4d2a:	44b2      	add	sl, r6
 80a4d2c:	f8da 30c4 	ldr.w	r3, [sl, #196]	; 0xc4
        verb + verb_len + qm_offset,
 80a4d30:	197a      	adds	r2, r7, r5
        m_commands[i].cmd(*this, requestType,
 80a4d32:	9300      	str	r3, [sp, #0]
 80a4d34:	4641      	mov	r1, r8
 80a4d36:	464b      	mov	r3, r9
 80a4d38:	4630      	mov	r0, r6
 80a4d3a:	f8da 70c0 	ldr.w	r7, [sl, #192]	; 0xc0
 80a4d3e:	4422      	add	r2, r4
 80a4d40:	47b8      	blx	r7
        return true;
 80a4d42:	e7b9      	b.n	80a4cb8 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x2c>
    verb_len = (qm_loc == NULL) ? strlen(verb) : (qm_loc - verb);
 80a4d44:	1b05      	subs	r5, r0, r4
 80a4d46:	b2ad      	uxth	r5, r5
 80a4d48:	e7cd      	b.n	80a4ce6 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x5a>
    for (i = 0; i < m_cmdCount; ++i)
 80a4d4a:	f10b 0b01 	add.w	fp, fp, #1
 80a4d4e:	e7d5      	b.n	80a4cfc <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x70>
    if (m_urlPathCmd != NULL)
 80a4d50:	f8d6 0120 	ldr.w	r0, [r6, #288]	; 0x120
 80a4d54:	2800      	cmp	r0, #0
 80a4d56:	d0b0      	beq.n	80a4cba <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x2e>
      char *url_path[WEBDUINO_URL_PATH_COMMAND_LENGTH] = {0};
 80a4d58:	221c      	movs	r2, #28
 80a4d5a:	2100      	movs	r1, #0
 80a4d5c:	eb0d 0002 	add.w	r0, sp, r2
 80a4d60:	f007 fbb6 	bl	80ac4d0 <memset>
      *(verb + verb_len) = 0;
 80a4d64:	2100      	movs	r1, #0
      url_path[part++] = verb;
 80a4d66:	4622      	mov	r2, r4
 80a4d68:	2301      	movs	r3, #1
          *p = 0;
 80a4d6a:	4608      	mov	r0, r1
      *(verb + verb_len) = 0;
 80a4d6c:	eb04 0c05 	add.w	ip, r4, r5
 80a4d70:	5561      	strb	r1, [r4, r5]
      url_path[part++] = verb;
 80a4d72:	9406      	str	r4, [sp, #24]
      for (char * p = verb; p < verb + verb_len; p++)
 80a4d74:	4594      	cmp	ip, r2
 80a4d76:	d911      	bls.n	80a4d9c <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x110>
        if (*p == '/')
 80a4d78:	f812 1b01 	ldrb.w	r1, [r2], #1
 80a4d7c:	292f      	cmp	r1, #47	; 0x2f
 80a4d7e:	d1f9      	bne.n	80a4d74 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0xe8>
          url_path[part++] = p + 1;
 80a4d80:	1c59      	adds	r1, r3, #1
 80a4d82:	b2c9      	uxtb	r1, r1
 80a4d84:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 80a4d88:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
          if (part == WEBDUINO_URL_PATH_COMMAND_LENGTH) break;
 80a4d8c:	2908      	cmp	r1, #8
          *p = 0;
 80a4d8e:	f802 0c01 	strb.w	r0, [r2, #-1]
          url_path[part++] = p + 1;
 80a4d92:	f843 2c20 	str.w	r2, [r3, #-32]
          if (part == WEBDUINO_URL_PATH_COMMAND_LENGTH) break;
 80a4d96:	d001      	beq.n	80a4d9c <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x110>
 80a4d98:	460b      	mov	r3, r1
      for (char * p = verb; p < verb + verb_len; p++)
 80a4d9a:	e7eb      	b.n	80a4d74 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0xe8>
                   verb + verb_len + qm_offset, tail_complete);
 80a4d9c:	443d      	add	r5, r7
      m_urlPathCmd(*this, requestType, url_path,
 80a4d9e:	4641      	mov	r1, r8
 80a4da0:	4630      	mov	r0, r6
 80a4da2:	f8d6 7120 	ldr.w	r7, [r6, #288]	; 0x120
 80a4da6:	f8cd 9000 	str.w	r9, [sp]
 80a4daa:	1963      	adds	r3, r4, r5
 80a4dac:	aa06      	add	r2, sp, #24
 80a4dae:	47b8      	blx	r7
 80a4db0:	e782      	b.n	80a4cb8 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x2c>
  return false;
 80a4db2:	2000      	movs	r0, #0
 80a4db4:	e781      	b.n	80a4cba <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x2e>
 80a4db6:	bf00      	nop
 80a4db8:	080ad33e 	.word	0x080ad33e

080a4dbc <_ZN9WebServer8httpFailEv>:
     (0 == strcmp(authCredentials, m_authCredentials + 6))) return true;
  return false;
}

void WebServer::httpFail()
{
 80a4dbc:	b510      	push	{r4, lr}
 80a4dbe:	4604      	mov	r4, r0
  P(failMsg1) = "HTTP/1.0 400 Bad Request" CRLF;
  printP(failMsg1);
 80a4dc0:	4906      	ldr	r1, [pc, #24]	; (80a4ddc <_ZN9WebServer8httpFailEv+0x20>)
 80a4dc2:	f7ff ff51 	bl	80a4c68 <_ZN9WebServer6printPEPKh>

#ifndef WEBDUINO_SUPRESS_SERVER_HEADER
  printP(webServerHeader);
 80a4dc6:	4620      	mov	r0, r4
 80a4dc8:	4905      	ldr	r1, [pc, #20]	; (80a4de0 <_ZN9WebServer8httpFailEv+0x24>)
 80a4dca:	f7ff ff4d 	bl	80a4c68 <_ZN9WebServer6printPEPKh>
  P(failMsg2) =
    "Content-Type: text/html" CRLF
    CRLF
    WEBDUINO_FAIL_MESSAGE;

  printP(failMsg2);
 80a4dce:	4620      	mov	r0, r4
}
 80a4dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  printP(failMsg2);
 80a4dd4:	4903      	ldr	r1, [pc, #12]	; (80a4de4 <_ZN9WebServer8httpFailEv+0x28>)
 80a4dd6:	f7ff bf47 	b.w	80a4c68 <_ZN9WebServer6printPEPKh>
 80a4dda:	bf00      	nop
 80a4ddc:	080ad4b3 	.word	0x080ad4b3
 80a4de0:	080ad358 	.word	0x080ad358
 80a4de4:	080ad4ce 	.word	0x080ad4ce

080a4de8 <_ZN9WebServer14defaultFailCmdERS_NS_14ConnectionTypeEPcbPv>:
                               WebServer::ConnectionType type,
                               char *url_tail,
                               bool tail_complete,
                               void * obj)
{
  server.httpFail();
 80a4de8:	f7ff bfe8 	b.w	80a4dbc <_ZN9WebServer8httpFailEv>

080a4dec <_ZN9WebServer11httpSuccessEPKcS1_>:
  printP(noContentMsg2);
}

void WebServer::httpSuccess(const char *contentType,
                            const char *extraHeaders)
{
 80a4dec:	b570      	push	{r4, r5, r6, lr}
 80a4dee:	4604      	mov	r4, r0
 80a4df0:	460e      	mov	r6, r1
 80a4df2:	4615      	mov	r5, r2
  P(successMsg1) = "HTTP/1.0 200 OK" CRLF;
  printP(successMsg1);
 80a4df4:	490d      	ldr	r1, [pc, #52]	; (80a4e2c <_ZN9WebServer11httpSuccessEPKcS1_+0x40>)
 80a4df6:	f7ff ff37 	bl	80a4c68 <_ZN9WebServer6printPEPKh>

#ifndef WEBDUINO_SUPRESS_SERVER_HEADER
  printP(webServerHeader);
 80a4dfa:	4620      	mov	r0, r4
 80a4dfc:	490c      	ldr	r1, [pc, #48]	; (80a4e30 <_ZN9WebServer11httpSuccessEPKcS1_+0x44>)
 80a4dfe:	f7ff ff33 	bl	80a4c68 <_ZN9WebServer6printPEPKh>

  P(successMsg2) =
    "Access-Control-Allow-Origin: *" CRLF
    "Content-Type: ";

  printP(successMsg2);
 80a4e02:	4620      	mov	r0, r4
 80a4e04:	490b      	ldr	r1, [pc, #44]	; (80a4e34 <_ZN9WebServer11httpSuccessEPKcS1_+0x48>)
 80a4e06:	f7ff ff2f 	bl	80a4c68 <_ZN9WebServer6printPEPKh>
  print(contentType);
 80a4e0a:	4631      	mov	r1, r6
 80a4e0c:	4620      	mov	r0, r4
 80a4e0e:	f001 f9b3 	bl	80a6178 <_ZN5Print5printEPKc>
  printCRLF();
 80a4e12:	4620      	mov	r0, r4
 80a4e14:	f7ff ff34 	bl	80a4c80 <_ZN9WebServer9printCRLFEv>
  if (extraHeaders)
 80a4e18:	b11d      	cbz	r5, 80a4e22 <_ZN9WebServer11httpSuccessEPKcS1_+0x36>
    print(extraHeaders);
 80a4e1a:	4629      	mov	r1, r5
 80a4e1c:	4620      	mov	r0, r4
 80a4e1e:	f001 f9ab 	bl	80a6178 <_ZN5Print5printEPKc>
  printCRLF();
 80a4e22:	4620      	mov	r0, r4
}
 80a4e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  printCRLF();
 80a4e28:	f7ff bf2a 	b.w	80a4c80 <_ZN9WebServer9printCRLFEv>
 80a4e2c:	080ad388 	.word	0x080ad388
 80a4e30:	080ad358 	.word	0x080ad358
 80a4e34:	080ad39a 	.word	0x080ad39a

080a4e38 <_ZN9WebServer8noRobotsENS_14ConnectionTypeE>:
{
 80a4e38:	b538      	push	{r3, r4, r5, lr}
 80a4e3a:	460d      	mov	r5, r1
  httpSuccess("text/plain");
 80a4e3c:	2200      	movs	r2, #0
 80a4e3e:	4906      	ldr	r1, [pc, #24]	; (80a4e58 <_ZN9WebServer8noRobotsENS_14ConnectionTypeE+0x20>)
{
 80a4e40:	4604      	mov	r4, r0
  httpSuccess("text/plain");
 80a4e42:	f7ff ffd3 	bl	80a4dec <_ZN9WebServer11httpSuccessEPKcS1_>
  if (type != HEAD)
 80a4e46:	2d02      	cmp	r5, #2
 80a4e48:	d005      	beq.n	80a4e56 <_ZN9WebServer8noRobotsENS_14ConnectionTypeE+0x1e>
    printP(allowNoneMsg);
 80a4e4a:	4620      	mov	r0, r4
}
 80a4e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printP(allowNoneMsg);
 80a4e50:	4902      	ldr	r1, [pc, #8]	; (80a4e5c <_ZN9WebServer8noRobotsENS_14ConnectionTypeE+0x24>)
 80a4e52:	f7ff bf09 	b.w	80a4c68 <_ZN9WebServer6printPEPKh>
}
 80a4e56:	bd38      	pop	{r3, r4, r5, pc}
 80a4e58:	080ad2bc 	.word	0x080ad2bc
 80a4e5c:	080ad4fc 	.word	0x080ad4fc

080a4e60 <_ZN9WebServer7faviconENS_14ConnectionTypeE>:
{
 80a4e60:	b538      	push	{r3, r4, r5, lr}
 80a4e62:	460d      	mov	r5, r1
  httpSuccess("image/x-icon","Cache-Control: max-age=31536000\r\n");
 80a4e64:	4a07      	ldr	r2, [pc, #28]	; (80a4e84 <_ZN9WebServer7faviconENS_14ConnectionTypeE+0x24>)
 80a4e66:	4908      	ldr	r1, [pc, #32]	; (80a4e88 <_ZN9WebServer7faviconENS_14ConnectionTypeE+0x28>)
{
 80a4e68:	4604      	mov	r4, r0
  httpSuccess("image/x-icon","Cache-Control: max-age=31536000\r\n");
 80a4e6a:	f7ff ffbf 	bl	80a4dec <_ZN9WebServer11httpSuccessEPKcS1_>
  if (type != HEAD)
 80a4e6e:	2d02      	cmp	r5, #2
 80a4e70:	d006      	beq.n	80a4e80 <_ZN9WebServer7faviconENS_14ConnectionTypeE+0x20>
    writeP(faviconIco, sizeof(faviconIco));
 80a4e72:	4620      	mov	r0, r4
}
 80a4e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    writeP(faviconIco, sizeof(faviconIco));
 80a4e78:	22c6      	movs	r2, #198	; 0xc6
 80a4e7a:	4904      	ldr	r1, [pc, #16]	; (80a4e8c <_ZN9WebServer7faviconENS_14ConnectionTypeE+0x2c>)
 80a4e7c:	f7ff bee6 	b.w	80a4c4c <_ZN9WebServer6writePEPKhj>
}
 80a4e80:	bd38      	pop	{r3, r4, r5, pc}
 80a4e82:	bf00      	nop
 80a4e84:	080ad2c7 	.word	0x080ad2c7
 80a4e88:	080ad2e9 	.word	0x080ad2e9
 80a4e8c:	080ad3ed 	.word	0x080ad3ed

080a4e90 <_ZN9WebServer12httpSeeOtherEPKc>:

void WebServer::httpSeeOther(const char *otherURL)
{
 80a4e90:	b538      	push	{r3, r4, r5, lr}
 80a4e92:	4604      	mov	r4, r0
 80a4e94:	460d      	mov	r5, r1
  P(seeOtherMsg1) = "HTTP/1.0 303 See Other" CRLF;
  printP(seeOtherMsg1);
 80a4e96:	490b      	ldr	r1, [pc, #44]	; (80a4ec4 <_ZN9WebServer12httpSeeOtherEPKc+0x34>)
 80a4e98:	f7ff fee6 	bl	80a4c68 <_ZN9WebServer6printPEPKh>

#ifndef WEBDUINO_SUPRESS_SERVER_HEADER
  printP(webServerHeader);
 80a4e9c:	4620      	mov	r0, r4
 80a4e9e:	490a      	ldr	r1, [pc, #40]	; (80a4ec8 <_ZN9WebServer12httpSeeOtherEPKc+0x38>)
 80a4ea0:	f7ff fee2 	bl	80a4c68 <_ZN9WebServer6printPEPKh>
#endif

  P(seeOtherMsg2) = "Location: ";
  printP(seeOtherMsg2);
 80a4ea4:	4620      	mov	r0, r4
 80a4ea6:	4909      	ldr	r1, [pc, #36]	; (80a4ecc <_ZN9WebServer12httpSeeOtherEPKc+0x3c>)
 80a4ea8:	f7ff fede 	bl	80a4c68 <_ZN9WebServer6printPEPKh>
  print(otherURL);
 80a4eac:	4629      	mov	r1, r5
 80a4eae:	4620      	mov	r0, r4
 80a4eb0:	f001 f962 	bl	80a6178 <_ZN5Print5printEPKc>
  printCRLF();
 80a4eb4:	4620      	mov	r0, r4
 80a4eb6:	f7ff fee3 	bl	80a4c80 <_ZN9WebServer9printCRLFEv>
  printCRLF();
 80a4eba:	4620      	mov	r0, r4
}
 80a4ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  printCRLF();
 80a4ec0:	f7ff bede 	b.w	80a4c80 <_ZN9WebServer9printCRLFEv>
 80a4ec4:	080ad3c9 	.word	0x080ad3c9
 80a4ec8:	080ad358 	.word	0x080ad358
 80a4ecc:	080ad3e2 	.word	0x080ad3e2

080a4ed0 <_ZN9WebServer4pushEi>:
}

void WebServer::push(int ch)
{
  // don't allow pushing EOF
  if (ch == -1)
 80a4ed0:	1c4b      	adds	r3, r1, #1
 80a4ed2:	d00e      	beq.n	80a4ef2 <_ZN9WebServer4pushEi+0x22>
    return;

  m_pushback[m_pushbackDepth++] = ch;
 80a4ed4:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 80a4ed8:	1c53      	adds	r3, r2, #1
 80a4eda:	b2db      	uxtb	r3, r3
  // can't raise error here, so just replace last char over and over
  if (m_pushbackDepth == SIZE(m_pushback))
 80a4edc:	2b20      	cmp	r3, #32
  m_pushback[m_pushbackDepth++] = ch;
 80a4ede:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    m_pushbackDepth = SIZE(m_pushback) - 1;
 80a4ee2:	bf08      	it	eq
 80a4ee4:	231f      	moveq	r3, #31
  m_pushback[m_pushbackDepth++] = ch;
 80a4ee6:	4402      	add	r2, r0
 80a4ee8:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
    m_pushbackDepth = SIZE(m_pushback) - 1;
 80a4eec:	bf08      	it	eq
 80a4eee:	f880 3078 	strbeq.w	r3, [r0, #120]	; 0x78
}
 80a4ef2:	4770      	bx	lr

080a4ef4 <_ZN9WebServer5resetEv>:

void WebServer::reset()
{
  m_pushbackDepth = 0;
 80a4ef4:	2300      	movs	r3, #0
{
 80a4ef6:	b510      	push	{r4, lr}
  m_client.flush();
 80a4ef8:	f100 0438 	add.w	r4, r0, #56	; 0x38
  m_pushbackDepth = 0;
 80a4efc:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
  m_client.flush();
 80a4f00:	4620      	mov	r0, r4
 80a4f02:	f001 fafc 	bl	80a64fe <_ZN9TCPClient5flushEv>
  m_client.stop();
 80a4f06:	4620      	mov	r0, r4
}
 80a4f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  m_client.stop();
 80a4f0c:	f001 bc58 	b.w	80a67c0 <_ZN9TCPClient4stopEv>

080a4f10 <_ZN9WebServer4readEv>:
{
 80a4f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_client)
 80a4f12:	f100 0738 	add.w	r7, r0, #56	; 0x38
{
 80a4f16:	4604      	mov	r4, r0
  if (!m_client)
 80a4f18:	4638      	mov	r0, r7
 80a4f1a:	f001 fc84 	bl	80a6826 <_ZN9TCPClientcvbEv>
 80a4f1e:	b918      	cbnz	r0, 80a4f28 <_ZN9WebServer4readEv+0x18>
    return -1;
 80a4f20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
 80a4f24:	4628      	mov	r0, r5
 80a4f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_pushbackDepth == 0)
 80a4f28:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
 80a4f2c:	bb20      	cbnz	r0, 80a4f78 <_ZN9WebServer4readEv+0x68>
 80a4f2e:	f000 fa49 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
    unsigned long timeoutTime = millis() + WEBDUINO_READ_TIMEOUT_IN_MS;
 80a4f32:	f500 767a 	add.w	r6, r0, #1000	; 0x3e8
    while (m_client.connected())
 80a4f36:	4638      	mov	r0, r7
 80a4f38:	f001 fc99 	bl	80a686e <_ZN9TCPClient9connectedEv>
 80a4f3c:	2800      	cmp	r0, #0
 80a4f3e:	d0ef      	beq.n	80a4f20 <_ZN9WebServer4readEv+0x10>
      if (m_readingContent)
 80a4f40:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
 80a4f44:	b113      	cbz	r3, 80a4f4c <_ZN9WebServer4readEv+0x3c>
        if (m_contentLength == 0)
 80a4f46:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80a4f48:	2b00      	cmp	r3, #0
 80a4f4a:	d0e9      	beq.n	80a4f20 <_ZN9WebServer4readEv+0x10>
      int ch = m_client.read();
 80a4f4c:	4638      	mov	r0, r7
 80a4f4e:	f001 fb40 	bl	80a65d2 <_ZN9TCPClient4readEv>
      if (ch != -1)
 80a4f52:	1c43      	adds	r3, r0, #1
      int ch = m_client.read();
 80a4f54:	4605      	mov	r5, r0
      if (ch != -1)
 80a4f56:	d007      	beq.n	80a4f68 <_ZN9WebServer4readEv+0x58>
        if (m_readingContent)
 80a4f58:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
 80a4f5c:	2b00      	cmp	r3, #0
 80a4f5e:	d0e1      	beq.n	80a4f24 <_ZN9WebServer4readEv+0x14>
          --m_contentLength;
 80a4f60:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80a4f62:	3b01      	subs	r3, #1
 80a4f64:	67e3      	str	r3, [r4, #124]	; 0x7c
 80a4f66:	e7dd      	b.n	80a4f24 <_ZN9WebServer4readEv+0x14>
 80a4f68:	f000 fa2c 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
        if (now > timeoutTime)
 80a4f6c:	4286      	cmp	r6, r0
 80a4f6e:	d2e2      	bcs.n	80a4f36 <_ZN9WebServer4readEv+0x26>
          reset();
 80a4f70:	4620      	mov	r0, r4
 80a4f72:	f7ff ffbf 	bl	80a4ef4 <_ZN9WebServer5resetEv>
          return -1;
 80a4f76:	e7d5      	b.n	80a4f24 <_ZN9WebServer4readEv+0x14>
    return m_pushback[--m_pushbackDepth];
 80a4f78:	3801      	subs	r0, #1
 80a4f7a:	b2c0      	uxtb	r0, r0
 80a4f7c:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
 80a4f80:	4404      	add	r4, r0
 80a4f82:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 80a4f86:	e7cd      	b.n	80a4f24 <_ZN9WebServer4readEv+0x14>

080a4f88 <_ZN9WebServer6expectEPKc>:

bool WebServer::expect(const char *str)
{
 80a4f88:	b570      	push	{r4, r5, r6, lr}
 80a4f8a:	4605      	mov	r5, r0
 80a4f8c:	460e      	mov	r6, r1
 80a4f8e:	460c      	mov	r4, r1
  const char *curr = str;
  while (*curr != 0)
 80a4f90:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a4f94:	b19b      	cbz	r3, 80a4fbe <_ZN9WebServer6expectEPKc+0x36>
  {
    int ch = read();
 80a4f96:	4628      	mov	r0, r5
 80a4f98:	f7ff ffba 	bl	80a4f10 <_ZN9WebServer4readEv>
    if (ch != *curr++)
 80a4f9c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    int ch = read();
 80a4fa0:	4601      	mov	r1, r0
    if (ch != *curr++)
 80a4fa2:	4283      	cmp	r3, r0
 80a4fa4:	d0f4      	beq.n	80a4f90 <_ZN9WebServer6expectEPKc+0x8>
    {
      // push back ch and the characters we accepted
      push(ch);
 80a4fa6:	4628      	mov	r0, r5
 80a4fa8:	f7ff ff92 	bl	80a4ed0 <_ZN9WebServer4pushEi>
 80a4fac:	3c01      	subs	r4, #1
      while (--curr != str)
 80a4fae:	42b4      	cmp	r4, r6
 80a4fb0:	d007      	beq.n	80a4fc2 <_ZN9WebServer6expectEPKc+0x3a>
        push(curr[-1]);
 80a4fb2:	4628      	mov	r0, r5
 80a4fb4:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 80a4fb8:	f7ff ff8a 	bl	80a4ed0 <_ZN9WebServer4pushEi>
      while (--curr != str)
 80a4fbc:	e7f7      	b.n	80a4fae <_ZN9WebServer6expectEPKc+0x26>
      return false;
    }
  }
  return true;
 80a4fbe:	2001      	movs	r0, #1
}
 80a4fc0:	bd70      	pop	{r4, r5, r6, pc}
      return false;
 80a4fc2:	2000      	movs	r0, #0
 80a4fc4:	e7fc      	b.n	80a4fc0 <_ZN9WebServer6expectEPKc+0x38>

080a4fc6 <_ZN9WebServer7readIntERi>:
bool WebServer::readInt(int &number)
{
  bool negate = false;
  bool gotNumber = false;
  int ch;
  number = 0;
 80a4fc6:	2300      	movs	r3, #0
{
 80a4fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4fcc:	4605      	mov	r5, r0
 80a4fce:	460c      	mov	r4, r1
  number = 0;
 80a4fd0:	600b      	str	r3, [r1, #0]

  // absorb whitespace
  do
  {
    ch = read();
 80a4fd2:	4628      	mov	r0, r5
 80a4fd4:	f7ff ff9c 	bl	80a4f10 <_ZN9WebServer4readEv>
  } while (ch == ' ' || ch == '\t');
 80a4fd8:	2820      	cmp	r0, #32
 80a4fda:	d0fa      	beq.n	80a4fd2 <_ZN9WebServer7readIntERi+0xc>
 80a4fdc:	2809      	cmp	r0, #9
 80a4fde:	d0f8      	beq.n	80a4fd2 <_ZN9WebServer7readIntERi+0xc>

  // check for leading minus sign
  if (ch == '-')
 80a4fe0:	282d      	cmp	r0, #45	; 0x2d
 80a4fe2:	d114      	bne.n	80a500e <_ZN9WebServer7readIntERi+0x48>
  {
    negate = true;
    ch = read();
 80a4fe4:	4628      	mov	r0, r5
 80a4fe6:	f7ff ff93 	bl	80a4f10 <_ZN9WebServer4readEv>
    negate = true;
 80a4fea:	2601      	movs	r6, #1
  bool negate = false;
 80a4fec:	2700      	movs	r7, #0

  // read digits to update number, exit when we find non-digit
  while (ch >= '0' && ch <= '9')
  {
    gotNumber = true;
    number = number * 10 + ch - '0';
 80a4fee:	f04f 080a 	mov.w	r8, #10
  while (ch >= '0' && ch <= '9')
 80a4ff2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a4ff6:	2b09      	cmp	r3, #9
 80a4ff8:	d80b      	bhi.n	80a5012 <_ZN9WebServer7readIntERi+0x4c>
    number = number * 10 + ch - '0';
 80a4ffa:	6823      	ldr	r3, [r4, #0]
    gotNumber = true;
 80a4ffc:	2701      	movs	r7, #1
    number = number * 10 + ch - '0';
 80a4ffe:	fb08 0103 	mla	r1, r8, r3, r0
 80a5002:	3930      	subs	r1, #48	; 0x30
    ch = read();
 80a5004:	4628      	mov	r0, r5
    number = number * 10 + ch - '0';
 80a5006:	6021      	str	r1, [r4, #0]
    ch = read();
 80a5008:	f7ff ff82 	bl	80a4f10 <_ZN9WebServer4readEv>
  while (ch >= '0' && ch <= '9')
 80a500c:	e7f1      	b.n	80a4ff2 <_ZN9WebServer7readIntERi+0x2c>
  bool negate = false;
 80a500e:	2600      	movs	r6, #0
 80a5010:	e7ec      	b.n	80a4fec <_ZN9WebServer7readIntERi+0x26>
  }

  push(ch);
 80a5012:	4601      	mov	r1, r0
 80a5014:	4628      	mov	r0, r5
 80a5016:	f7ff ff5b 	bl	80a4ed0 <_ZN9WebServer4pushEi>
  if (negate)
 80a501a:	b116      	cbz	r6, 80a5022 <_ZN9WebServer7readIntERi+0x5c>
    number = -number;
 80a501c:	6823      	ldr	r3, [r4, #0]
 80a501e:	425b      	negs	r3, r3
 80a5020:	6023      	str	r3, [r4, #0]
  return gotNumber;
}
 80a5022:	4638      	mov	r0, r7
 80a5024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a5028 <_ZN9WebServer10readHeaderEPci>:

void WebServer::readHeader(char *value, int valueLen)
{
 80a5028:	b570      	push	{r4, r5, r6, lr}
 80a502a:	460c      	mov	r4, r1
 80a502c:	4615      	mov	r5, r2
 80a502e:	4606      	mov	r6, r0
  int ch;
  memset(value, 0, valueLen);
 80a5030:	2100      	movs	r1, #0
 80a5032:	4620      	mov	r0, r4
 80a5034:	f007 fa4c 	bl	80ac4d0 <memset>
  --valueLen;
 80a5038:	3d01      	subs	r5, #1

  // absorb whitespace
  do
  {
    ch = read();
 80a503a:	4630      	mov	r0, r6
 80a503c:	f7ff ff68 	bl	80a4f10 <_ZN9WebServer4readEv>
  } while (ch == ' ' || ch == '\t');
 80a5040:	2820      	cmp	r0, #32
    ch = read();
 80a5042:	4601      	mov	r1, r0
  } while (ch == ' ' || ch == '\t');
 80a5044:	d0f9      	beq.n	80a503a <_ZN9WebServer10readHeaderEPci+0x12>
 80a5046:	2809      	cmp	r0, #9
 80a5048:	d0f7      	beq.n	80a503a <_ZN9WebServer10readHeaderEPci+0x12>

  // read rest of line
  do
  {
    if (valueLen > 1)
 80a504a:	2d01      	cmp	r5, #1
    {
      *value++=ch;
 80a504c:	bfc8      	it	gt
 80a504e:	f804 1b01 	strbgt.w	r1, [r4], #1
      --valueLen;
    }
    ch = read();
 80a5052:	4630      	mov	r0, r6
      --valueLen;
 80a5054:	bfc8      	it	gt
 80a5056:	f105 35ff 	addgt.w	r5, r5, #4294967295	; 0xffffffff
    ch = read();
 80a505a:	f7ff ff59 	bl	80a4f10 <_ZN9WebServer4readEv>
  } while (ch != '\r');
 80a505e:	280d      	cmp	r0, #13
    ch = read();
 80a5060:	4601      	mov	r1, r0
  } while (ch != '\r');
 80a5062:	d1f2      	bne.n	80a504a <_ZN9WebServer10readHeaderEPci+0x22>
  push(ch);
 80a5064:	4630      	mov	r0, r6
}
 80a5066:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  push(ch);
 80a506a:	f7ff bf31 	b.w	80a4ed0 <_ZN9WebServer4pushEi>

080a506e <_ZN9WebServer13readPOSTparamEPciS0_i>:

bool WebServer::readPOSTparam(char *name, int nameLen,
                              char *value, int valueLen)
{
 80a506e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a5072:	460d      	mov	r5, r1
 80a5074:	461c      	mov	r4, r3
  // assume name is at current place in stream
  int ch;
  // to not to miss the last parameter
  bool foundSomething = false;
 80a5076:	f04f 0a00 	mov.w	sl, #0
{
 80a507a:	9f0a      	ldr	r7, [sp, #40]	; 0x28

  // clear out name and value so they'll be NUL terminated
  memset(name, 0, nameLen);
 80a507c:	2100      	movs	r1, #0
{
 80a507e:	4680      	mov	r8, r0
  memset(name, 0, nameLen);
 80a5080:	4628      	mov	r0, r5
{
 80a5082:	4616      	mov	r6, r2
  memset(name, 0, nameLen);
 80a5084:	f007 fa24 	bl	80ac4d0 <memset>
  memset(value, 0, valueLen);
 80a5088:	463a      	mov	r2, r7
 80a508a:	2100      	movs	r1, #0
 80a508c:	4620      	mov	r0, r4
 80a508e:	f007 fa1f 	bl	80ac4d0 <memset>

  // decrement length so we don't write into NUL terminator
  --nameLen;
 80a5092:	46d1      	mov	r9, sl
 80a5094:	3e01      	subs	r6, #1
  --valueLen;
 80a5096:	3f01      	subs	r7, #1

  while ((ch = read()) != -1)
 80a5098:	4640      	mov	r0, r8
 80a509a:	f7ff ff39 	bl	80a4f10 <_ZN9WebServer4readEv>
 80a509e:	1c42      	adds	r2, r0, #1
 80a50a0:	d015      	beq.n	80a50ce <_ZN9WebServer13readPOSTparamEPciS0_i+0x60>
  {
    foundSomething = true;
    if (ch == '+')
 80a50a2:	282b      	cmp	r0, #43	; 0x2b
 80a50a4:	d02c      	beq.n	80a5100 <_ZN9WebServer13readPOSTparamEPciS0_i+0x92>
    {
      ch = ' ';
    }
    else if (ch == '=')
 80a50a6:	283d      	cmp	r0, #61	; 0x3d
 80a50a8:	d015      	beq.n	80a50d6 <_ZN9WebServer13readPOSTparamEPciS0_i+0x68>
    {
      /* that's end of name, so switch to storing in value */
      nameLen = 0;
      continue;
    }
    else if (ch == '&')
 80a50aa:	2826      	cmp	r0, #38	; 0x26
 80a50ac:	d030      	beq.n	80a5110 <_ZN9WebServer13readPOSTparamEPciS0_i+0xa2>
    {
      /* that's end of pair, go away */
      return true;
    }
    else if (ch == '%')
 80a50ae:	2825      	cmp	r0, #37	; 0x25
 80a50b0:	d120      	bne.n	80a50f4 <_ZN9WebServer13readPOSTparamEPciS0_i+0x86>
    {
      /* handle URL encoded characters by converting back to original form */
      int ch1 = read();
 80a50b2:	4640      	mov	r0, r8
 80a50b4:	f7ff ff2c 	bl	80a4f10 <_ZN9WebServer4readEv>
 80a50b8:	4682      	mov	sl, r0
      int ch2 = read();
 80a50ba:	4640      	mov	r0, r8
 80a50bc:	f7ff ff28 	bl	80a4f10 <_ZN9WebServer4readEv>
      if (ch1 == -1 || ch2 == -1)
 80a50c0:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80a50c4:	d001      	beq.n	80a50ca <_ZN9WebServer13readPOSTparamEPciS0_i+0x5c>
 80a50c6:	1c43      	adds	r3, r0, #1
 80a50c8:	d109      	bne.n	80a50de <_ZN9WebServer13readPOSTparamEPciS0_i+0x70>
        return false;
 80a50ca:	f04f 0a00 	mov.w	sl, #0
  {
    // if we get here, we hit the end-of-file, so POST is over and there
    // are no more parameters
    return false;
  }
}
 80a50ce:	4650      	mov	r0, sl
 80a50d0:	b002      	add	sp, #8
 80a50d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      nameLen = 0;
 80a50d6:	2600      	movs	r6, #0
 80a50d8:	f04f 0a01 	mov.w	sl, #1
 80a50dc:	e7dc      	b.n	80a5098 <_ZN9WebServer13readPOSTparamEPciS0_i+0x2a>
      char hex[3] = { (char)ch1, (char)ch2, '\0' };
 80a50de:	f88d 0005 	strb.w	r0, [sp, #5]
      ch = strtoul(hex, NULL, 16);
 80a50e2:	2210      	movs	r2, #16
 80a50e4:	2100      	movs	r1, #0
 80a50e6:	a801      	add	r0, sp, #4
      char hex[3] = { (char)ch1, (char)ch2, '\0' };
 80a50e8:	f88d 9006 	strb.w	r9, [sp, #6]
 80a50ec:	f88d a004 	strb.w	sl, [sp, #4]
      ch = strtoul(hex, NULL, 16);
 80a50f0:	f007 fba4 	bl	80ac83c <strtoul>
    if (nameLen > 0)
 80a50f4:	2e00      	cmp	r6, #0
 80a50f6:	dd05      	ble.n	80a5104 <_ZN9WebServer13readPOSTparamEPciS0_i+0x96>
      *name++ = ch;
 80a50f8:	f805 0b01 	strb.w	r0, [r5], #1
      --nameLen;
 80a50fc:	3e01      	subs	r6, #1
 80a50fe:	e7eb      	b.n	80a50d8 <_ZN9WebServer13readPOSTparamEPciS0_i+0x6a>
      ch = ' ';
 80a5100:	2020      	movs	r0, #32
 80a5102:	e7f7      	b.n	80a50f4 <_ZN9WebServer13readPOSTparamEPciS0_i+0x86>
    else if (valueLen > 0)
 80a5104:	2f00      	cmp	r7, #0
 80a5106:	dde7      	ble.n	80a50d8 <_ZN9WebServer13readPOSTparamEPciS0_i+0x6a>
      *value++ = ch;
 80a5108:	f804 0b01 	strb.w	r0, [r4], #1
      --valueLen;
 80a510c:	3f01      	subs	r7, #1
 80a510e:	e7e3      	b.n	80a50d8 <_ZN9WebServer13readPOSTparamEPciS0_i+0x6a>
      return true;
 80a5110:	f04f 0a01 	mov.w	sl, #1
 80a5114:	e7db      	b.n	80a50ce <_ZN9WebServer13readPOSTparamEPciS0_i+0x60>
	...

080a5118 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi>:
// less than 0,  the URL was longer than the buffer,  and part of it had to
// be discarded.

void WebServer::getRequest(WebServer::ConnectionType &type,
                           char *request, int *length)
{
 80a5118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a511a:	461e      	mov	r6, r3
  --*length; // save room for NUL
 80a511c:	681b      	ldr	r3, [r3, #0]
{
 80a511e:	460c      	mov	r4, r1
  --*length; // save room for NUL
 80a5120:	3b01      	subs	r3, #1
 80a5122:	6033      	str	r3, [r6, #0]

  type = INVALID;
 80a5124:	2300      	movs	r3, #0
 80a5126:	700b      	strb	r3, [r1, #0]

  // store the HTTP method line of the request
  if (expect("GET "))
 80a5128:	4922      	ldr	r1, [pc, #136]	; (80a51b4 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x9c>)
{
 80a512a:	4605      	mov	r5, r0
 80a512c:	4617      	mov	r7, r2
  if (expect("GET "))
 80a512e:	f7ff ff2b 	bl	80a4f88 <_ZN9WebServer6expectEPKc>
 80a5132:	b170      	cbz	r0, 80a5152 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x3a>
    type = GET;
 80a5134:	2301      	movs	r3, #1
  else if (expect("HEAD "))
    type = HEAD;
 80a5136:	7023      	strb	r3, [r4, #0]
  // so just get out of here
  else
    return;

  int ch;
  while ((ch = read()) != -1)
 80a5138:	f644 0401 	movw	r4, #18433	; 0x4801
 80a513c:	4628      	mov	r0, r5
 80a513e:	f7ff fee7 	bl	80a4f10 <_ZN9WebServer4readEv>
 80a5142:	1c43      	adds	r3, r0, #1
 80a5144:	2b0e      	cmp	r3, #14
 80a5146:	d928      	bls.n	80a519a <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x82>
  {
    // stop storing at first space or end of line
    if (ch == ' ' || ch == '\n' || ch == '\r')
 80a5148:	2820      	cmp	r0, #32
 80a514a:	d12a      	bne.n	80a51a2 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x8a>
      ++request;
    }
    --*length;
  }
  // NUL terminate
  *request = 0;
 80a514c:	2300      	movs	r3, #0
 80a514e:	703b      	strb	r3, [r7, #0]
}
 80a5150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (expect("HEAD "))
 80a5152:	4628      	mov	r0, r5
 80a5154:	4918      	ldr	r1, [pc, #96]	; (80a51b8 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0xa0>)
 80a5156:	f7ff ff17 	bl	80a4f88 <_ZN9WebServer6expectEPKc>
 80a515a:	b108      	cbz	r0, 80a5160 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x48>
    type = HEAD;
 80a515c:	2302      	movs	r3, #2
 80a515e:	e7ea      	b.n	80a5136 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x1e>
  else if (expect("POST "))
 80a5160:	4628      	mov	r0, r5
 80a5162:	4916      	ldr	r1, [pc, #88]	; (80a51bc <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0xa4>)
 80a5164:	f7ff ff10 	bl	80a4f88 <_ZN9WebServer6expectEPKc>
 80a5168:	b108      	cbz	r0, 80a516e <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x56>
    type = POST;
 80a516a:	2303      	movs	r3, #3
 80a516c:	e7e3      	b.n	80a5136 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x1e>
  else if (expect("PUT "))
 80a516e:	4628      	mov	r0, r5
 80a5170:	4913      	ldr	r1, [pc, #76]	; (80a51c0 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0xa8>)
 80a5172:	f7ff ff09 	bl	80a4f88 <_ZN9WebServer6expectEPKc>
 80a5176:	b108      	cbz	r0, 80a517c <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x64>
    type = PUT;
 80a5178:	2304      	movs	r3, #4
 80a517a:	e7dc      	b.n	80a5136 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x1e>
  else if (expect("DELETE "))
 80a517c:	4628      	mov	r0, r5
 80a517e:	4911      	ldr	r1, [pc, #68]	; (80a51c4 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0xac>)
 80a5180:	f7ff ff02 	bl	80a4f88 <_ZN9WebServer6expectEPKc>
 80a5184:	b108      	cbz	r0, 80a518a <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x72>
    type = DELETE;
 80a5186:	2305      	movs	r3, #5
 80a5188:	e7d5      	b.n	80a5136 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x1e>
  else if (expect("PATCH "))
 80a518a:	4628      	mov	r0, r5
 80a518c:	490e      	ldr	r1, [pc, #56]	; (80a51c8 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0xb0>)
 80a518e:	f7ff fefb 	bl	80a4f88 <_ZN9WebServer6expectEPKc>
 80a5192:	2800      	cmp	r0, #0
 80a5194:	d0dc      	beq.n	80a5150 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x38>
    type = PATCH;
 80a5196:	2306      	movs	r3, #6
 80a5198:	e7cd      	b.n	80a5136 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x1e>
  while ((ch = read()) != -1)
 80a519a:	fa24 f303 	lsr.w	r3, r4, r3
 80a519e:	07db      	lsls	r3, r3, #31
 80a51a0:	d4d4      	bmi.n	80a514c <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x34>
    if (*length > 0)
 80a51a2:	6833      	ldr	r3, [r6, #0]
 80a51a4:	2b00      	cmp	r3, #0
      *request = ch;
 80a51a6:	bfc8      	it	gt
 80a51a8:	f807 0b01 	strbgt.w	r0, [r7], #1
    --*length;
 80a51ac:	6833      	ldr	r3, [r6, #0]
 80a51ae:	3b01      	subs	r3, #1
 80a51b0:	6033      	str	r3, [r6, #0]
  while ((ch = read()) != -1)
 80a51b2:	e7c3      	b.n	80a513c <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x24>
 80a51b4:	080ad2f6 	.word	0x080ad2f6
 80a51b8:	080ad2fb 	.word	0x080ad2fb
 80a51bc:	080ad301 	.word	0x080ad301
 80a51c0:	080ad307 	.word	0x080ad307
 80a51c4:	080ad30c 	.word	0x080ad30c
 80a51c8:	080ad314 	.word	0x080ad314

080a51cc <_ZN9WebServer14processHeadersEv>:

void WebServer::processHeaders()
{
 80a51cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // header, and the double-CRLF that ends the headers.

  // empty the m_authCredentials before every run of this function.
  // otherwise users who don't send an Authorization header would be treated
  // like the last user who tried to authenticate (possibly successful)
  m_authCredentials[0]=0;
 80a51ce:	2300      	movs	r3, #0
{
 80a51d0:	4604      	mov	r4, r0

  while (1)
  {
    if (expect("Content-Length:"))
 80a51d2:	4d15      	ldr	r5, [pc, #84]	; (80a5228 <_ZN9WebServer14processHeadersEv+0x5c>)
      Serial.print(" ***");
#endif
      continue;
    }

    if (expect("Authorization:"))
 80a51d4:	4e15      	ldr	r6, [pc, #84]	; (80a522c <_ZN9WebServer14processHeadersEv+0x60>)
      Serial.print(" ***");
#endif
      continue;
    }

    if (expect(CRLF CRLF))
 80a51d6:	4f16      	ldr	r7, [pc, #88]	; (80a5230 <_ZN9WebServer14processHeadersEv+0x64>)
  m_authCredentials[0]=0;
 80a51d8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (expect("Content-Length:"))
 80a51dc:	4629      	mov	r1, r5
 80a51de:	4620      	mov	r0, r4
 80a51e0:	f7ff fed2 	bl	80a4f88 <_ZN9WebServer6expectEPKc>
 80a51e4:	b128      	cbz	r0, 80a51f2 <_ZN9WebServer14processHeadersEv+0x26>
      readInt(m_contentLength);
 80a51e6:	4620      	mov	r0, r4
 80a51e8:	f104 017c 	add.w	r1, r4, #124	; 0x7c
 80a51ec:	f7ff feeb 	bl	80a4fc6 <_ZN9WebServer7readIntERi>
      continue;
 80a51f0:	e7f4      	b.n	80a51dc <_ZN9WebServer14processHeadersEv+0x10>
    if (expect("Authorization:"))
 80a51f2:	4631      	mov	r1, r6
 80a51f4:	4620      	mov	r0, r4
 80a51f6:	f7ff fec7 	bl	80a4f88 <_ZN9WebServer6expectEPKc>
 80a51fa:	b130      	cbz	r0, 80a520a <_ZN9WebServer14processHeadersEv+0x3e>
      readHeader(m_authCredentials,51);
 80a51fc:	2233      	movs	r2, #51	; 0x33
 80a51fe:	4620      	mov	r0, r4
 80a5200:	f104 0180 	add.w	r1, r4, #128	; 0x80
 80a5204:	f7ff ff10 	bl	80a5028 <_ZN9WebServer10readHeaderEPci>
      continue;
 80a5208:	e7e8      	b.n	80a51dc <_ZN9WebServer14processHeadersEv+0x10>
    if (expect(CRLF CRLF))
 80a520a:	4639      	mov	r1, r7
 80a520c:	4620      	mov	r0, r4
 80a520e:	f7ff febb 	bl	80a4f88 <_ZN9WebServer6expectEPKc>
 80a5212:	b118      	cbz	r0, 80a521c <_ZN9WebServer14processHeadersEv+0x50>
    {
      m_readingContent = true;
 80a5214:	2301      	movs	r3, #1
 80a5216:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
    if (read() == -1)
    {
      return;
    }
  }
}
 80a521a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (read() == -1)
 80a521c:	4620      	mov	r0, r4
 80a521e:	f7ff fe77 	bl	80a4f10 <_ZN9WebServer4readEv>
 80a5222:	3001      	adds	r0, #1
 80a5224:	d1da      	bne.n	80a51dc <_ZN9WebServer14processHeadersEv+0x10>
 80a5226:	e7f8      	b.n	80a521a <_ZN9WebServer14processHeadersEv+0x4e>
 80a5228:	080ad31b 	.word	0x080ad31b
 80a522c:	080ad32b 	.word	0x080ad32b
 80a5230:	080ad33a 	.word	0x080ad33a

080a5234 <_ZN9WebServer17processConnectionEPcPi>:
{
 80a5234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a5238:	4604      	mov	r4, r0
 80a523a:	b08b      	sub	sp, #44	; 0x2c
  int urlPrefixLen = strlen(m_urlPrefix);
 80a523c:	6d40      	ldr	r0, [r0, #84]	; 0x54
{
 80a523e:	460d      	mov	r5, r1
 80a5240:	4616      	mov	r6, r2
  int urlPrefixLen = strlen(m_urlPrefix);
 80a5242:	f007 f9e0 	bl	80ac606 <strlen>
  m_client = m_server.available();
 80a5246:	f104 0108 	add.w	r1, r4, #8
  int urlPrefixLen = strlen(m_urlPrefix);
 80a524a:	4680      	mov	r8, r0
  m_client = m_server.available();
 80a524c:	a803      	add	r0, sp, #12
 80a524e:	f001 fcb7 	bl	80a6bc0 <_ZN9TCPServer9availableEv>
class Print
 80a5252:	9b04      	ldr	r3, [sp, #16]
    class __shared_ptr
 80a5254:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80a5256:	63e3      	str	r3, [r4, #60]	; 0x3c
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 80a5258:	9b05      	ldr	r3, [sp, #20]
 80a525a:	f104 0938 	add.w	r9, r4, #56	; 0x38
 80a525e:	6423      	str	r3, [r4, #64]	; 0x40
 80a5260:	9b06      	ldr	r3, [sp, #24]
 80a5262:	6463      	str	r3, [r4, #68]	; 0x44
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a5264:	9b07      	ldr	r3, [sp, #28]
 80a5266:	64a3      	str	r3, [r4, #72]	; 0x48
 80a5268:	9b08      	ldr	r3, [sp, #32]
 80a526a:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (__tmp != _M_pi)
 80a526c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a526e:	429f      	cmp	r7, r3
 80a5270:	d00c      	beq.n	80a528c <_ZN9WebServer17processConnectionEPcPi+0x58>
	    if (__tmp != 0)
 80a5272:	b117      	cbz	r7, 80a527a <_ZN9WebServer17processConnectionEPcPi+0x46>
    { ++_M_use_count; }
 80a5274:	687b      	ldr	r3, [r7, #4]
 80a5276:	3301      	adds	r3, #1
 80a5278:	607b      	str	r3, [r7, #4]
	    if (_M_pi != 0)
 80a527a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a527c:	b128      	cbz	r0, 80a528a <_ZN9WebServer17processConnectionEPcPi+0x56>
      if (--_M_use_count == 0)
 80a527e:	6843      	ldr	r3, [r0, #4]
 80a5280:	3b01      	subs	r3, #1
 80a5282:	6043      	str	r3, [r0, #4]
 80a5284:	b90b      	cbnz	r3, 80a528a <_ZN9WebServer17processConnectionEPcPi+0x56>
 80a5286:	f7ff fc7a 	bl	80a4b7e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 80a528a:	6527      	str	r7, [r4, #80]	; 0x50
 80a528c:	4b32      	ldr	r3, [pc, #200]	; (80a5358 <_ZN9WebServer17processConnectionEPcPi+0x124>)
      ~__shared_ptr() = default;
 80a528e:	a809      	add	r0, sp, #36	; 0x24
 80a5290:	9303      	str	r3, [sp, #12]
 80a5292:	f7fe fda9 	bl	80a3de8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  if (m_client) {
 80a5296:	4648      	mov	r0, r9
 80a5298:	f001 fac5 	bl	80a6826 <_ZN9TCPClientcvbEv>
 80a529c:	2800      	cmp	r0, #0
 80a529e:	d039      	beq.n	80a5314 <_ZN9WebServer17processConnectionEPcPi+0xe0>
    m_readingContent = false;
 80a52a0:	2300      	movs	r3, #0
    getRequest(requestType, buff, bufflen);
 80a52a2:	462a      	mov	r2, r5
    m_readingContent = false;
 80a52a4:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
    ConnectionType requestType = INVALID;
 80a52a8:	f88d 300c 	strb.w	r3, [sp, #12]
    buff[0] = 0;
 80a52ac:	702b      	strb	r3, [r5, #0]
    getRequest(requestType, buff, bufflen);
 80a52ae:	4620      	mov	r0, r4
 80a52b0:	4633      	mov	r3, r6
 80a52b2:	a903      	add	r1, sp, #12
 80a52b4:	f7ff ff30 	bl	80a5118 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi>
    if (requestType != INVALID)
 80a52b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80a52bc:	b16b      	cbz	r3, 80a52da <_ZN9WebServer17processConnectionEPcPi+0xa6>
      processHeaders();
 80a52be:	4620      	mov	r0, r4
 80a52c0:	f7ff ff84 	bl	80a51cc <_ZN9WebServer14processHeadersEv>
      if (strcmp(buff, "/robots.txt") == 0)
 80a52c4:	4628      	mov	r0, r5
 80a52c6:	4925      	ldr	r1, [pc, #148]	; (80a535c <_ZN9WebServer17processConnectionEPcPi+0x128>)
 80a52c8:	f007 f96f 	bl	80ac5aa <strcmp>
 80a52cc:	f89d 700c 	ldrb.w	r7, [sp, #12]
 80a52d0:	bb18      	cbnz	r0, 80a531a <_ZN9WebServer17processConnectionEPcPi+0xe6>
        noRobots(requestType);
 80a52d2:	4639      	mov	r1, r7
 80a52d4:	4620      	mov	r0, r4
 80a52d6:	f7ff fdaf 	bl	80a4e38 <_ZN9WebServer8noRobotsENS_14ConnectionTypeE>
    if (requestType == INVALID ||
 80a52da:	6837      	ldr	r7, [r6, #0]
 80a52dc:	f89d 900c 	ldrb.w	r9, [sp, #12]
 80a52e0:	43ff      	mvns	r7, r7
 80a52e2:	0fff      	lsrs	r7, r7, #31
 80a52e4:	f1b9 0f00 	cmp.w	r9, #0
 80a52e8:	d005      	beq.n	80a52f6 <_ZN9WebServer17processConnectionEPcPi+0xc2>
        strncmp(buff, m_urlPrefix, urlPrefixLen) != 0)
 80a52ea:	4642      	mov	r2, r8
 80a52ec:	4628      	mov	r0, r5
 80a52ee:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80a52f0:	f007 f991 	bl	80ac616 <strncmp>
    if (requestType == INVALID ||
 80a52f4:	b1e0      	cbz	r0, 80a5330 <_ZN9WebServer17processConnectionEPcPi+0xfc>
      m_failureCmd(*this, requestType, buff, (*bufflen) >= 0, NULL);
 80a52f6:	2300      	movs	r3, #0
 80a52f8:	462a      	mov	r2, r5
 80a52fa:	9300      	str	r3, [sp, #0]
 80a52fc:	4649      	mov	r1, r9
 80a52fe:	463b      	mov	r3, r7
 80a5300:	f8d4 60b4 	ldr.w	r6, [r4, #180]	; 0xb4
      m_failureCmd(*this, requestType, buff, (*bufflen) >= 0, NULL);
 80a5304:	4620      	mov	r0, r4
 80a5306:	47b0      	blx	r6
    flushBuf();
 80a5308:	4620      	mov	r0, r4
 80a530a:	f7ff fc83 	bl	80a4c14 <_ZN9WebServer8flushBufEv>
    reset();
 80a530e:	4620      	mov	r0, r4
 80a5310:	f7ff fdf0 	bl	80a4ef4 <_ZN9WebServer5resetEv>
}
 80a5314:	b00b      	add	sp, #44	; 0x2c
 80a5316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (strcmp(buff, "/favicon.ico") == 0)
 80a531a:	4628      	mov	r0, r5
 80a531c:	4910      	ldr	r1, [pc, #64]	; (80a5360 <_ZN9WebServer17processConnectionEPcPi+0x12c>)
 80a531e:	f007 f944 	bl	80ac5aa <strcmp>
 80a5322:	2800      	cmp	r0, #0
 80a5324:	d1d9      	bne.n	80a52da <_ZN9WebServer17processConnectionEPcPi+0xa6>
        favicon(requestType);
 80a5326:	4639      	mov	r1, r7
 80a5328:	4620      	mov	r0, r4
 80a532a:	f7ff fd99 	bl	80a4e60 <_ZN9WebServer7faviconENS_14ConnectionTypeE>
 80a532e:	e7d4      	b.n	80a52da <_ZN9WebServer17processConnectionEPcPi+0xa6>
    else if (!dispatchCommand(requestType, buff + urlPrefixLen,
 80a5330:	463b      	mov	r3, r7
 80a5332:	4649      	mov	r1, r9
 80a5334:	4620      	mov	r0, r4
 80a5336:	eb05 0208 	add.w	r2, r5, r8
 80a533a:	f7ff fca7 	bl	80a4c8c <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb>
 80a533e:	2800      	cmp	r0, #0
 80a5340:	d1e2      	bne.n	80a5308 <_ZN9WebServer17processConnectionEPcPi+0xd4>
      m_failureCmd(*this, requestType, buff, (*bufflen) >= 0, NULL);
 80a5342:	6833      	ldr	r3, [r6, #0]
 80a5344:	462a      	mov	r2, r5
 80a5346:	43db      	mvns	r3, r3
 80a5348:	f8d4 60b4 	ldr.w	r6, [r4, #180]	; 0xb4
 80a534c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80a5350:	9000      	str	r0, [sp, #0]
 80a5352:	0fdb      	lsrs	r3, r3, #31
 80a5354:	e7d6      	b.n	80a5304 <_ZN9WebServer17processConnectionEPcPi+0xd0>
 80a5356:	bf00      	nop
 80a5358:	080ad5fc 	.word	0x080ad5fc
 80a535c:	080ad33f 	.word	0x080ad33f
 80a5360:	080ad34b 	.word	0x080ad34b

080a5364 <os_thread_scheduling>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 80a5364:	b508      	push	{r3, lr}
 80a5366:	4b02      	ldr	r3, [pc, #8]	; (80a5370 <os_thread_scheduling+0xc>)
 80a5368:	681b      	ldr	r3, [r3, #0]
 80a536a:	69db      	ldr	r3, [r3, #28]
 80a536c:	9301      	str	r3, [sp, #4]
 80a536e:	bd08      	pop	{r3, pc}
 80a5370:	080601d0 	.word	0x080601d0

080a5374 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a5374:	b508      	push	{r3, lr}
 80a5376:	4b02      	ldr	r3, [pc, #8]	; (80a5380 <os_mutex_recursive_create+0xc>)
 80a5378:	681b      	ldr	r3, [r3, #0]
 80a537a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a537c:	9301      	str	r3, [sp, #4]
 80a537e:	bd08      	pop	{r3, pc}
 80a5380:	080601d0 	.word	0x080601d0

080a5384 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a5384:	b508      	push	{r3, lr}
 80a5386:	4b02      	ldr	r3, [pc, #8]	; (80a5390 <os_mutex_recursive_destroy+0xc>)
 80a5388:	681b      	ldr	r3, [r3, #0]
 80a538a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a538c:	9301      	str	r3, [sp, #4]
 80a538e:	bd08      	pop	{r3, pc}
 80a5390:	080601d0 	.word	0x080601d0

080a5394 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a5394:	b508      	push	{r3, lr}
 80a5396:	4b02      	ldr	r3, [pc, #8]	; (80a53a0 <HAL_RNG_GetRandomNumber+0xc>)
 80a5398:	681b      	ldr	r3, [r3, #0]
 80a539a:	685b      	ldr	r3, [r3, #4]
 80a539c:	9301      	str	r3, [sp, #4]
 80a539e:	bd08      	pop	{r3, pc}
 80a53a0:	0806019c 	.word	0x0806019c

080a53a4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a53a4:	b508      	push	{r3, lr}
 80a53a6:	4b02      	ldr	r3, [pc, #8]	; (80a53b0 <HAL_Delay_Microseconds+0xc>)
 80a53a8:	681b      	ldr	r3, [r3, #0]
 80a53aa:	68db      	ldr	r3, [r3, #12]
 80a53ac:	9301      	str	r3, [sp, #4]
 80a53ae:	bd08      	pop	{r3, pc}
 80a53b0:	0806019c 	.word	0x0806019c

080a53b4 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a53b4:	b508      	push	{r3, lr}
 80a53b6:	4b02      	ldr	r3, [pc, #8]	; (80a53c0 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a53b8:	681b      	ldr	r3, [r3, #0]
 80a53ba:	691b      	ldr	r3, [r3, #16]
 80a53bc:	9301      	str	r3, [sp, #4]
 80a53be:	bd08      	pop	{r3, pc}
 80a53c0:	0806019c 	.word	0x0806019c

080a53c4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a53c4:	b508      	push	{r3, lr}
 80a53c6:	4b02      	ldr	r3, [pc, #8]	; (80a53d0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a53c8:	681b      	ldr	r3, [r3, #0]
 80a53ca:	695b      	ldr	r3, [r3, #20]
 80a53cc:	9301      	str	r3, [sp, #4]
 80a53ce:	bd08      	pop	{r3, pc}
 80a53d0:	0806019c 	.word	0x0806019c

080a53d4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a53d4:	b508      	push	{r3, lr}
 80a53d6:	4b02      	ldr	r3, [pc, #8]	; (80a53e0 <hal_rtc_time_is_valid+0xc>)
 80a53d8:	681b      	ldr	r3, [r3, #0]
 80a53da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a53dc:	9301      	str	r3, [sp, #4]
 80a53de:	bd08      	pop	{r3, pc}
 80a53e0:	0806019c 	.word	0x0806019c

080a53e4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a53e4:	b508      	push	{r3, lr}
 80a53e6:	4b02      	ldr	r3, [pc, #8]	; (80a53f0 <hal_rtc_get_time+0xc>)
 80a53e8:	681b      	ldr	r3, [r3, #0]
 80a53ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a53ec:	9301      	str	r3, [sp, #4]
 80a53ee:	bd08      	pop	{r3, pc}
 80a53f0:	0806019c 	.word	0x0806019c

080a53f4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a53f4:	b508      	push	{r3, lr}
 80a53f6:	4b02      	ldr	r3, [pc, #8]	; (80a5400 <HAL_Pin_Map+0xc>)
 80a53f8:	681b      	ldr	r3, [r3, #0]
 80a53fa:	681b      	ldr	r3, [r3, #0]
 80a53fc:	9301      	str	r3, [sp, #4]
 80a53fe:	bd08      	pop	{r3, pc}
 80a5400:	080601b0 	.word	0x080601b0

080a5404 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a5404:	b508      	push	{r3, lr}
 80a5406:	4b02      	ldr	r3, [pc, #8]	; (80a5410 <HAL_Validate_Pin_Function+0xc>)
 80a5408:	681b      	ldr	r3, [r3, #0]
 80a540a:	685b      	ldr	r3, [r3, #4]
 80a540c:	9301      	str	r3, [sp, #4]
 80a540e:	bd08      	pop	{r3, pc}
 80a5410:	080601b0 	.word	0x080601b0

080a5414 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a5414:	b508      	push	{r3, lr}
 80a5416:	4b02      	ldr	r3, [pc, #8]	; (80a5420 <HAL_Pin_Mode+0xc>)
 80a5418:	681b      	ldr	r3, [r3, #0]
 80a541a:	689b      	ldr	r3, [r3, #8]
 80a541c:	9301      	str	r3, [sp, #4]
 80a541e:	bd08      	pop	{r3, pc}
 80a5420:	080601b0 	.word	0x080601b0

080a5424 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a5424:	b508      	push	{r3, lr}
 80a5426:	4b02      	ldr	r3, [pc, #8]	; (80a5430 <HAL_Get_Pin_Mode+0xc>)
 80a5428:	681b      	ldr	r3, [r3, #0]
 80a542a:	68db      	ldr	r3, [r3, #12]
 80a542c:	9301      	str	r3, [sp, #4]
 80a542e:	bd08      	pop	{r3, pc}
 80a5430:	080601b0 	.word	0x080601b0

080a5434 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a5434:	b508      	push	{r3, lr}
 80a5436:	4b02      	ldr	r3, [pc, #8]	; (80a5440 <HAL_GPIO_Write+0xc>)
 80a5438:	681b      	ldr	r3, [r3, #0]
 80a543a:	691b      	ldr	r3, [r3, #16]
 80a543c:	9301      	str	r3, [sp, #4]
 80a543e:	bd08      	pop	{r3, pc}
 80a5440:	080601b0 	.word	0x080601b0

080a5444 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a5444:	b508      	push	{r3, lr}
 80a5446:	4b02      	ldr	r3, [pc, #8]	; (80a5450 <hal_adc_read+0xc>)
 80a5448:	681b      	ldr	r3, [r3, #0]
 80a544a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a544c:	9301      	str	r3, [sp, #4]
 80a544e:	bd08      	pop	{r3, pc}
 80a5450:	080601b0 	.word	0x080601b0

080a5454 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a5454:	b508      	push	{r3, lr}
 80a5456:	4b02      	ldr	r3, [pc, #8]	; (80a5460 <hal_i2c_write+0xc>)
 80a5458:	681b      	ldr	r3, [r3, #0]
 80a545a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a545c:	9301      	str	r3, [sp, #4]
 80a545e:	bd08      	pop	{r3, pc}
 80a5460:	080601ac 	.word	0x080601ac

080a5464 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a5464:	b508      	push	{r3, lr}
 80a5466:	4b02      	ldr	r3, [pc, #8]	; (80a5470 <hal_i2c_available+0xc>)
 80a5468:	681b      	ldr	r3, [r3, #0]
 80a546a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a546c:	9301      	str	r3, [sp, #4]
 80a546e:	bd08      	pop	{r3, pc}
 80a5470:	080601ac 	.word	0x080601ac

080a5474 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a5474:	b508      	push	{r3, lr}
 80a5476:	4b02      	ldr	r3, [pc, #8]	; (80a5480 <hal_i2c_read+0xc>)
 80a5478:	681b      	ldr	r3, [r3, #0]
 80a547a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a547c:	9301      	str	r3, [sp, #4]
 80a547e:	bd08      	pop	{r3, pc}
 80a5480:	080601ac 	.word	0x080601ac

080a5484 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a5484:	b508      	push	{r3, lr}
 80a5486:	4b02      	ldr	r3, [pc, #8]	; (80a5490 <hal_i2c_peek+0xc>)
 80a5488:	681b      	ldr	r3, [r3, #0]
 80a548a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a548c:	9301      	str	r3, [sp, #4]
 80a548e:	bd08      	pop	{r3, pc}
 80a5490:	080601ac 	.word	0x080601ac

080a5494 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a5494:	b508      	push	{r3, lr}
 80a5496:	4b02      	ldr	r3, [pc, #8]	; (80a54a0 <hal_i2c_flush+0xc>)
 80a5498:	681b      	ldr	r3, [r3, #0]
 80a549a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a549c:	9301      	str	r3, [sp, #4]
 80a549e:	bd08      	pop	{r3, pc}
 80a54a0:	080601ac 	.word	0x080601ac

080a54a4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a54a4:	b508      	push	{r3, lr}
 80a54a6:	4b02      	ldr	r3, [pc, #8]	; (80a54b0 <hal_i2c_is_enabled+0xc>)
 80a54a8:	681b      	ldr	r3, [r3, #0]
 80a54aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a54ac:	9301      	str	r3, [sp, #4]
 80a54ae:	bd08      	pop	{r3, pc}
 80a54b0:	080601ac 	.word	0x080601ac

080a54b4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a54b4:	b508      	push	{r3, lr}
 80a54b6:	4b03      	ldr	r3, [pc, #12]	; (80a54c4 <hal_i2c_init+0x10>)
 80a54b8:	681b      	ldr	r3, [r3, #0]
 80a54ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a54be:	9301      	str	r3, [sp, #4]
 80a54c0:	bd08      	pop	{r3, pc}
 80a54c2:	0000      	.short	0x0000
 80a54c4:	080601ac 	.word	0x080601ac

080a54c8 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a54c8:	b508      	push	{r3, lr}
 80a54ca:	4b02      	ldr	r3, [pc, #8]	; (80a54d4 <socket_active_status+0xc>)
 80a54cc:	681b      	ldr	r3, [r3, #0]
 80a54ce:	681b      	ldr	r3, [r3, #0]
 80a54d0:	9301      	str	r3, [sp, #4]
 80a54d2:	bd08      	pop	{r3, pc}
 80a54d4:	080601bc 	.word	0x080601bc

080a54d8 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a54d8:	b508      	push	{r3, lr}
 80a54da:	4b02      	ldr	r3, [pc, #8]	; (80a54e4 <socket_handle_valid+0xc>)
 80a54dc:	681b      	ldr	r3, [r3, #0]
 80a54de:	685b      	ldr	r3, [r3, #4]
 80a54e0:	9301      	str	r3, [sp, #4]
 80a54e2:	bd08      	pop	{r3, pc}
 80a54e4:	080601bc 	.word	0x080601bc

080a54e8 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a54e8:	b508      	push	{r3, lr}
 80a54ea:	4b02      	ldr	r3, [pc, #8]	; (80a54f4 <socket_create+0xc>)
 80a54ec:	681b      	ldr	r3, [r3, #0]
 80a54ee:	689b      	ldr	r3, [r3, #8]
 80a54f0:	9301      	str	r3, [sp, #4]
 80a54f2:	bd08      	pop	{r3, pc}
 80a54f4:	080601bc 	.word	0x080601bc

080a54f8 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a54f8:	b508      	push	{r3, lr}
 80a54fa:	4b02      	ldr	r3, [pc, #8]	; (80a5504 <socket_connect+0xc>)
 80a54fc:	681b      	ldr	r3, [r3, #0]
 80a54fe:	68db      	ldr	r3, [r3, #12]
 80a5500:	9301      	str	r3, [sp, #4]
 80a5502:	bd08      	pop	{r3, pc}
 80a5504:	080601bc 	.word	0x080601bc

080a5508 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a5508:	b508      	push	{r3, lr}
 80a550a:	4b02      	ldr	r3, [pc, #8]	; (80a5514 <socket_receive+0xc>)
 80a550c:	681b      	ldr	r3, [r3, #0]
 80a550e:	691b      	ldr	r3, [r3, #16]
 80a5510:	9301      	str	r3, [sp, #4]
 80a5512:	bd08      	pop	{r3, pc}
 80a5514:	080601bc 	.word	0x080601bc

080a5518 <socket_sendto>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a5518:	b508      	push	{r3, lr}
 80a551a:	4b02      	ldr	r3, [pc, #8]	; (80a5524 <socket_sendto+0xc>)
 80a551c:	681b      	ldr	r3, [r3, #0]
 80a551e:	69db      	ldr	r3, [r3, #28]
 80a5520:	9301      	str	r3, [sp, #4]
 80a5522:	bd08      	pop	{r3, pc}
 80a5524:	080601bc 	.word	0x080601bc

080a5528 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a5528:	b508      	push	{r3, lr}
 80a552a:	4b02      	ldr	r3, [pc, #8]	; (80a5534 <socket_close+0xc>)
 80a552c:	681b      	ldr	r3, [r3, #0]
 80a552e:	6a1b      	ldr	r3, [r3, #32]
 80a5530:	9301      	str	r3, [sp, #4]
 80a5532:	bd08      	pop	{r3, pc}
 80a5534:	080601bc 	.word	0x080601bc

080a5538 <socket_create_tcp_server>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
 80a5538:	b508      	push	{r3, lr}
 80a553a:	4b02      	ldr	r3, [pc, #8]	; (80a5544 <socket_create_tcp_server+0xc>)
 80a553c:	681b      	ldr	r3, [r3, #0]
 80a553e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a5540:	9301      	str	r3, [sp, #4]
 80a5542:	bd08      	pop	{r3, pc}
 80a5544:	080601bc 	.word	0x080601bc

080a5548 <socket_accept>:
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
 80a5548:	b508      	push	{r3, lr}
 80a554a:	4b02      	ldr	r3, [pc, #8]	; (80a5554 <socket_accept+0xc>)
 80a554c:	681b      	ldr	r3, [r3, #0]
 80a554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a5550:	9301      	str	r3, [sp, #4]
 80a5552:	bd08      	pop	{r3, pc}
 80a5554:	080601bc 	.word	0x080601bc

080a5558 <socket_handle_invalid>:
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a5558:	b508      	push	{r3, lr}
 80a555a:	4b02      	ldr	r3, [pc, #8]	; (80a5564 <socket_handle_invalid+0xc>)
 80a555c:	681b      	ldr	r3, [r3, #0]
 80a555e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a5560:	9301      	str	r3, [sp, #4]
 80a5562:	bd08      	pop	{r3, pc}
 80a5564:	080601bc 	.word	0x080601bc

080a5568 <socket_join_multicast>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
 80a5568:	b508      	push	{r3, lr}
 80a556a:	4b02      	ldr	r3, [pc, #8]	; (80a5574 <socket_join_multicast+0xc>)
 80a556c:	681b      	ldr	r3, [r3, #0]
 80a556e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a5570:	9301      	str	r3, [sp, #4]
 80a5572:	bd08      	pop	{r3, pc}
 80a5574:	080601bc 	.word	0x080601bc

080a5578 <socket_peer>:
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
 80a5578:	b508      	push	{r3, lr}
 80a557a:	4b02      	ldr	r3, [pc, #8]	; (80a5584 <socket_peer+0xc>)
 80a557c:	681b      	ldr	r3, [r3, #0]
 80a557e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a5580:	9301      	str	r3, [sp, #4]
 80a5582:	bd08      	pop	{r3, pc}
 80a5584:	080601bc 	.word	0x080601bc

080a5588 <socket_send_ex>:
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a5588:	b508      	push	{r3, lr}
 80a558a:	4b02      	ldr	r3, [pc, #8]	; (80a5594 <socket_send_ex+0xc>)
 80a558c:	681b      	ldr	r3, [r3, #0]
 80a558e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a5590:	9301      	str	r3, [sp, #4]
 80a5592:	bd08      	pop	{r3, pc}
 80a5594:	080601bc 	.word	0x080601bc

080a5598 <socket_receivefrom_ex>:
DYNALIB_FN(18, hal_socket, socket_receivefrom_ex, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*, system_tick_t, void*))
 80a5598:	b508      	push	{r3, lr}
 80a559a:	4b02      	ldr	r3, [pc, #8]	; (80a55a4 <socket_receivefrom_ex+0xc>)
 80a559c:	681b      	ldr	r3, [r3, #0]
 80a559e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a55a0:	9301      	str	r3, [sp, #4]
 80a55a2:	bd08      	pop	{r3, pc}
 80a55a4:	080601bc 	.word	0x080601bc

080a55a8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a55a8:	b508      	push	{r3, lr}
 80a55aa:	4b02      	ldr	r3, [pc, #8]	; (80a55b4 <hal_spi_init+0xc>)
 80a55ac:	681b      	ldr	r3, [r3, #0]
 80a55ae:	69db      	ldr	r3, [r3, #28]
 80a55b0:	9301      	str	r3, [sp, #4]
 80a55b2:	bd08      	pop	{r3, pc}
 80a55b4:	080601b4 	.word	0x080601b4

080a55b8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a55b8:	b508      	push	{r3, lr}
 80a55ba:	4b02      	ldr	r3, [pc, #8]	; (80a55c4 <hal_spi_is_enabled+0xc>)
 80a55bc:	681b      	ldr	r3, [r3, #0]
 80a55be:	6a1b      	ldr	r3, [r3, #32]
 80a55c0:	9301      	str	r3, [sp, #4]
 80a55c2:	bd08      	pop	{r3, pc}
 80a55c4:	080601b4 	.word	0x080601b4

080a55c8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a55c8:	b508      	push	{r3, lr}
 80a55ca:	4b02      	ldr	r3, [pc, #8]	; (80a55d4 <hal_usart_init+0xc>)
 80a55cc:	681b      	ldr	r3, [r3, #0]
 80a55ce:	699b      	ldr	r3, [r3, #24]
 80a55d0:	9301      	str	r3, [sp, #4]
 80a55d2:	bd08      	pop	{r3, pc}
 80a55d4:	080601c4 	.word	0x080601c4

080a55d8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a55d8:	b508      	push	{r3, lr}
 80a55da:	4b02      	ldr	r3, [pc, #8]	; (80a55e4 <hal_usart_write+0xc>)
 80a55dc:	681b      	ldr	r3, [r3, #0]
 80a55de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a55e0:	9301      	str	r3, [sp, #4]
 80a55e2:	bd08      	pop	{r3, pc}
 80a55e4:	080601c4 	.word	0x080601c4

080a55e8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a55e8:	b508      	push	{r3, lr}
 80a55ea:	4b02      	ldr	r3, [pc, #8]	; (80a55f4 <hal_usart_available+0xc>)
 80a55ec:	681b      	ldr	r3, [r3, #0]
 80a55ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a55f0:	9301      	str	r3, [sp, #4]
 80a55f2:	bd08      	pop	{r3, pc}
 80a55f4:	080601c4 	.word	0x080601c4

080a55f8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a55f8:	b508      	push	{r3, lr}
 80a55fa:	4b02      	ldr	r3, [pc, #8]	; (80a5604 <hal_usart_read+0xc>)
 80a55fc:	681b      	ldr	r3, [r3, #0]
 80a55fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a5600:	9301      	str	r3, [sp, #4]
 80a5602:	bd08      	pop	{r3, pc}
 80a5604:	080601c4 	.word	0x080601c4

080a5608 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a5608:	b508      	push	{r3, lr}
 80a560a:	4b02      	ldr	r3, [pc, #8]	; (80a5614 <hal_usart_peek+0xc>)
 80a560c:	681b      	ldr	r3, [r3, #0]
 80a560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a5610:	9301      	str	r3, [sp, #4]
 80a5612:	bd08      	pop	{r3, pc}
 80a5614:	080601c4 	.word	0x080601c4

080a5618 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a5618:	b508      	push	{r3, lr}
 80a561a:	4b02      	ldr	r3, [pc, #8]	; (80a5624 <hal_usart_flush+0xc>)
 80a561c:	681b      	ldr	r3, [r3, #0]
 80a561e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a5620:	9301      	str	r3, [sp, #4]
 80a5622:	bd08      	pop	{r3, pc}
 80a5624:	080601c4 	.word	0x080601c4

080a5628 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a5628:	b508      	push	{r3, lr}
 80a562a:	4b02      	ldr	r3, [pc, #8]	; (80a5634 <hal_usart_is_enabled+0xc>)
 80a562c:	681b      	ldr	r3, [r3, #0]
 80a562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a5630:	9301      	str	r3, [sp, #4]
 80a5632:	bd08      	pop	{r3, pc}
 80a5634:	080601c4 	.word	0x080601c4

080a5638 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a5638:	b508      	push	{r3, lr}
 80a563a:	4b02      	ldr	r3, [pc, #8]	; (80a5644 <hal_usart_available_data_for_write+0xc>)
 80a563c:	681b      	ldr	r3, [r3, #0]
 80a563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a5640:	9301      	str	r3, [sp, #4]
 80a5642:	bd08      	pop	{r3, pc}
 80a5644:	080601c4 	.word	0x080601c4

080a5648 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a5648:	b508      	push	{r3, lr}
 80a564a:	4b02      	ldr	r3, [pc, #8]	; (80a5654 <HAL_USB_USART_Init+0xc>)
 80a564c:	681b      	ldr	r3, [r3, #0]
 80a564e:	681b      	ldr	r3, [r3, #0]
 80a5650:	9301      	str	r3, [sp, #4]
 80a5652:	bd08      	pop	{r3, pc}
 80a5654:	080601d8 	.word	0x080601d8

080a5658 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a5658:	b508      	push	{r3, lr}
 80a565a:	4b02      	ldr	r3, [pc, #8]	; (80a5664 <HAL_USB_USART_Available_Data+0xc>)
 80a565c:	681b      	ldr	r3, [r3, #0]
 80a565e:	691b      	ldr	r3, [r3, #16]
 80a5660:	9301      	str	r3, [sp, #4]
 80a5662:	bd08      	pop	{r3, pc}
 80a5664:	080601d8 	.word	0x080601d8

080a5668 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a5668:	b508      	push	{r3, lr}
 80a566a:	4b02      	ldr	r3, [pc, #8]	; (80a5674 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a566c:	681b      	ldr	r3, [r3, #0]
 80a566e:	695b      	ldr	r3, [r3, #20]
 80a5670:	9301      	str	r3, [sp, #4]
 80a5672:	bd08      	pop	{r3, pc}
 80a5674:	080601d8 	.word	0x080601d8

080a5678 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a5678:	b508      	push	{r3, lr}
 80a567a:	4b02      	ldr	r3, [pc, #8]	; (80a5684 <HAL_USB_USART_Receive_Data+0xc>)
 80a567c:	681b      	ldr	r3, [r3, #0]
 80a567e:	699b      	ldr	r3, [r3, #24]
 80a5680:	9301      	str	r3, [sp, #4]
 80a5682:	bd08      	pop	{r3, pc}
 80a5684:	080601d8 	.word	0x080601d8

080a5688 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a5688:	b508      	push	{r3, lr}
 80a568a:	4b02      	ldr	r3, [pc, #8]	; (80a5694 <HAL_USB_USART_Send_Data+0xc>)
 80a568c:	681b      	ldr	r3, [r3, #0]
 80a568e:	69db      	ldr	r3, [r3, #28]
 80a5690:	9301      	str	r3, [sp, #4]
 80a5692:	bd08      	pop	{r3, pc}
 80a5694:	080601d8 	.word	0x080601d8

080a5698 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a5698:	b508      	push	{r3, lr}
 80a569a:	4b02      	ldr	r3, [pc, #8]	; (80a56a4 <HAL_USB_USART_Flush_Data+0xc>)
 80a569c:	681b      	ldr	r3, [r3, #0]
 80a569e:	6a1b      	ldr	r3, [r3, #32]
 80a56a0:	9301      	str	r3, [sp, #4]
 80a56a2:	bd08      	pop	{r3, pc}
 80a56a4:	080601d8 	.word	0x080601d8

080a56a8 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a56a8:	b508      	push	{r3, lr}
 80a56aa:	4b02      	ldr	r3, [pc, #8]	; (80a56b4 <HAL_NET_SetNetWatchDog+0xc>)
 80a56ac:	681b      	ldr	r3, [r3, #0]
 80a56ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a56b0:	9301      	str	r3, [sp, #4]
 80a56b2:	bd08      	pop	{r3, pc}
 80a56b4:	080601c0 	.word	0x080601c0

080a56b8 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a56b8:	b508      	push	{r3, lr}
 80a56ba:	4b02      	ldr	r3, [pc, #8]	; (80a56c4 <inet_gethostbyname+0xc>)
 80a56bc:	681b      	ldr	r3, [r3, #0]
 80a56be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a56c0:	9301      	str	r3, [sp, #4]
 80a56c2:	bd08      	pop	{r3, pc}
 80a56c4:	080601c0 	.word	0x080601c0

080a56c8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a56c8:	b508      	push	{r3, lr}
 80a56ca:	4b02      	ldr	r3, [pc, #8]	; (80a56d4 <panic_+0xc>)
 80a56cc:	681b      	ldr	r3, [r3, #0]
 80a56ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a56d0:	9301      	str	r3, [sp, #4]
 80a56d2:	bd08      	pop	{r3, pc}
 80a56d4:	080201a8 	.word	0x080201a8

080a56d8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a56d8:	b508      	push	{r3, lr}
 80a56da:	4b02      	ldr	r3, [pc, #8]	; (80a56e4 <log_message+0xc>)
 80a56dc:	681b      	ldr	r3, [r3, #0]
 80a56de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a56e0:	9301      	str	r3, [sp, #4]
 80a56e2:	bd08      	pop	{r3, pc}
 80a56e4:	080201a8 	.word	0x080201a8

080a56e8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a56e8:	b508      	push	{r3, lr}
 80a56ea:	4b02      	ldr	r3, [pc, #8]	; (80a56f4 <system_mode+0xc>)
 80a56ec:	681b      	ldr	r3, [r3, #0]
 80a56ee:	681b      	ldr	r3, [r3, #0]
 80a56f0:	9301      	str	r3, [sp, #4]
 80a56f2:	bd08      	pop	{r3, pc}
 80a56f4:	080601a4 	.word	0x080601a4

080a56f8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a56f8:	b508      	push	{r3, lr}
 80a56fa:	4b02      	ldr	r3, [pc, #8]	; (80a5704 <set_system_mode+0xc>)
 80a56fc:	681b      	ldr	r3, [r3, #0]
 80a56fe:	685b      	ldr	r3, [r3, #4]
 80a5700:	9301      	str	r3, [sp, #4]
 80a5702:	bd08      	pop	{r3, pc}
 80a5704:	080601a4 	.word	0x080601a4

080a5708 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a5708:	b508      	push	{r3, lr}
 80a570a:	4b02      	ldr	r3, [pc, #8]	; (80a5714 <system_delay_ms+0xc>)
 80a570c:	681b      	ldr	r3, [r3, #0]
 80a570e:	695b      	ldr	r3, [r3, #20]
 80a5710:	9301      	str	r3, [sp, #4]
 80a5712:	bd08      	pop	{r3, pc}
 80a5714:	080601a4 	.word	0x080601a4

080a5718 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a5718:	b508      	push	{r3, lr}
 80a571a:	4b02      	ldr	r3, [pc, #8]	; (80a5724 <application_thread_current+0xc>)
 80a571c:	681b      	ldr	r3, [r3, #0]
 80a571e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a5720:	9301      	str	r3, [sp, #4]
 80a5722:	bd08      	pop	{r3, pc}
 80a5724:	080601a4 	.word	0x080601a4

080a5728 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a5728:	b508      	push	{r3, lr}
 80a572a:	4b02      	ldr	r3, [pc, #8]	; (80a5734 <application_thread_invoke+0xc>)
 80a572c:	681b      	ldr	r3, [r3, #0]
 80a572e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a5730:	9301      	str	r3, [sp, #4]
 80a5732:	bd08      	pop	{r3, pc}
 80a5734:	080601a4 	.word	0x080601a4

080a5738 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a5738:	b508      	push	{r3, lr}
 80a573a:	4b02      	ldr	r3, [pc, #8]	; (80a5744 <system_thread_get_state+0xc>)
 80a573c:	681b      	ldr	r3, [r3, #0]
 80a573e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a5740:	9301      	str	r3, [sp, #4]
 80a5742:	bd08      	pop	{r3, pc}
 80a5744:	080601a4 	.word	0x080601a4

080a5748 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a5748:	b508      	push	{r3, lr}
 80a574a:	4b03      	ldr	r3, [pc, #12]	; (80a5758 <system_ctrl_set_app_request_handler+0x10>)
 80a574c:	681b      	ldr	r3, [r3, #0]
 80a574e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a5752:	9301      	str	r3, [sp, #4]
 80a5754:	bd08      	pop	{r3, pc}
 80a5756:	0000      	.short	0x0000
 80a5758:	080601a4 	.word	0x080601a4

080a575c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a575c:	b508      	push	{r3, lr}
 80a575e:	4b03      	ldr	r3, [pc, #12]	; (80a576c <system_ctrl_set_result+0x10>)
 80a5760:	681b      	ldr	r3, [r3, #0]
 80a5762:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a5766:	9301      	str	r3, [sp, #4]
 80a5768:	bd08      	pop	{r3, pc}
 80a576a:	0000      	.short	0x0000
 80a576c:	080601a4 	.word	0x080601a4

080a5770 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a5770:	b508      	push	{r3, lr}
 80a5772:	4b02      	ldr	r3, [pc, #8]	; (80a577c <spark_variable+0xc>)
 80a5774:	681b      	ldr	r3, [r3, #0]
 80a5776:	681b      	ldr	r3, [r3, #0]
 80a5778:	9301      	str	r3, [sp, #4]
 80a577a:	bd08      	pop	{r3, pc}
 80a577c:	080601cc 	.word	0x080601cc

080a5780 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a5780:	b508      	push	{r3, lr}
 80a5782:	4b02      	ldr	r3, [pc, #8]	; (80a578c <spark_process+0xc>)
 80a5784:	681b      	ldr	r3, [r3, #0]
 80a5786:	689b      	ldr	r3, [r3, #8]
 80a5788:	9301      	str	r3, [sp, #4]
 80a578a:	bd08      	pop	{r3, pc}
 80a578c:	080601cc 	.word	0x080601cc

080a5790 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a5790:	b508      	push	{r3, lr}
 80a5792:	4b02      	ldr	r3, [pc, #8]	; (80a579c <spark_cloud_flag_connected+0xc>)
 80a5794:	681b      	ldr	r3, [r3, #0]
 80a5796:	695b      	ldr	r3, [r3, #20]
 80a5798:	9301      	str	r3, [sp, #4]
 80a579a:	bd08      	pop	{r3, pc}
 80a579c:	080601cc 	.word	0x080601cc

080a57a0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a57a0:	b508      	push	{r3, lr}
 80a57a2:	4b02      	ldr	r3, [pc, #8]	; (80a57ac <spark_send_event+0xc>)
 80a57a4:	681b      	ldr	r3, [r3, #0]
 80a57a6:	6a1b      	ldr	r3, [r3, #32]
 80a57a8:	9301      	str	r3, [sp, #4]
 80a57aa:	bd08      	pop	{r3, pc}
 80a57ac:	080601cc 	.word	0x080601cc

080a57b0 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a57b0:	b508      	push	{r3, lr}
 80a57b2:	4b02      	ldr	r3, [pc, #8]	; (80a57bc <spark_sync_time_pending+0xc>)
 80a57b4:	681b      	ldr	r3, [r3, #0]
 80a57b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a57b8:	9301      	str	r3, [sp, #4]
 80a57ba:	bd08      	pop	{r3, pc}
 80a57bc:	080601cc 	.word	0x080601cc

080a57c0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a57c0:	b508      	push	{r3, lr}
 80a57c2:	4b02      	ldr	r3, [pc, #8]	; (80a57cc <spark_set_random_seed_from_cloud_handler+0xc>)
 80a57c4:	681b      	ldr	r3, [r3, #0]
 80a57c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a57c8:	9301      	str	r3, [sp, #4]
 80a57ca:	bd08      	pop	{r3, pc}
 80a57cc:	080601cc 	.word	0x080601cc

080a57d0 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a57d0:	b508      	push	{r3, lr}
 80a57d2:	4b02      	ldr	r3, [pc, #8]	; (80a57dc <network_config+0xc>)
 80a57d4:	681b      	ldr	r3, [r3, #0]
 80a57d6:	681b      	ldr	r3, [r3, #0]
 80a57d8:	9301      	str	r3, [sp, #4]
 80a57da:	bd08      	pop	{r3, pc}
 80a57dc:	080601c8 	.word	0x080601c8

080a57e0 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a57e0:	b508      	push	{r3, lr}
 80a57e2:	4b02      	ldr	r3, [pc, #8]	; (80a57ec <network_connect+0xc>)
 80a57e4:	681b      	ldr	r3, [r3, #0]
 80a57e6:	685b      	ldr	r3, [r3, #4]
 80a57e8:	9301      	str	r3, [sp, #4]
 80a57ea:	bd08      	pop	{r3, pc}
 80a57ec:	080601c8 	.word	0x080601c8

080a57f0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a57f0:	b508      	push	{r3, lr}
 80a57f2:	4b02      	ldr	r3, [pc, #8]	; (80a57fc <network_connecting+0xc>)
 80a57f4:	681b      	ldr	r3, [r3, #0]
 80a57f6:	689b      	ldr	r3, [r3, #8]
 80a57f8:	9301      	str	r3, [sp, #4]
 80a57fa:	bd08      	pop	{r3, pc}
 80a57fc:	080601c8 	.word	0x080601c8

080a5800 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a5800:	b508      	push	{r3, lr}
 80a5802:	4b02      	ldr	r3, [pc, #8]	; (80a580c <network_disconnect+0xc>)
 80a5804:	681b      	ldr	r3, [r3, #0]
 80a5806:	68db      	ldr	r3, [r3, #12]
 80a5808:	9301      	str	r3, [sp, #4]
 80a580a:	bd08      	pop	{r3, pc}
 80a580c:	080601c8 	.word	0x080601c8

080a5810 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a5810:	b508      	push	{r3, lr}
 80a5812:	4b02      	ldr	r3, [pc, #8]	; (80a581c <network_ready+0xc>)
 80a5814:	681b      	ldr	r3, [r3, #0]
 80a5816:	691b      	ldr	r3, [r3, #16]
 80a5818:	9301      	str	r3, [sp, #4]
 80a581a:	bd08      	pop	{r3, pc}
 80a581c:	080601c8 	.word	0x080601c8

080a5820 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a5820:	b508      	push	{r3, lr}
 80a5822:	4b02      	ldr	r3, [pc, #8]	; (80a582c <network_on+0xc>)
 80a5824:	681b      	ldr	r3, [r3, #0]
 80a5826:	695b      	ldr	r3, [r3, #20]
 80a5828:	9301      	str	r3, [sp, #4]
 80a582a:	bd08      	pop	{r3, pc}
 80a582c:	080601c8 	.word	0x080601c8

080a5830 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a5830:	b508      	push	{r3, lr}
 80a5832:	4b02      	ldr	r3, [pc, #8]	; (80a583c <network_off+0xc>)
 80a5834:	681b      	ldr	r3, [r3, #0]
 80a5836:	699b      	ldr	r3, [r3, #24]
 80a5838:	9301      	str	r3, [sp, #4]
 80a583a:	bd08      	pop	{r3, pc}
 80a583c:	080601c8 	.word	0x080601c8

080a5840 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a5840:	b508      	push	{r3, lr}
 80a5842:	4b02      	ldr	r3, [pc, #8]	; (80a584c <network_listen+0xc>)
 80a5844:	681b      	ldr	r3, [r3, #0]
 80a5846:	69db      	ldr	r3, [r3, #28]
 80a5848:	9301      	str	r3, [sp, #4]
 80a584a:	bd08      	pop	{r3, pc}
 80a584c:	080601c8 	.word	0x080601c8

080a5850 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a5850:	b508      	push	{r3, lr}
 80a5852:	4b02      	ldr	r3, [pc, #8]	; (80a585c <network_listening+0xc>)
 80a5854:	681b      	ldr	r3, [r3, #0]
 80a5856:	6a1b      	ldr	r3, [r3, #32]
 80a5858:	9301      	str	r3, [sp, #4]
 80a585a:	bd08      	pop	{r3, pc}
 80a585c:	080601c8 	.word	0x080601c8

080a5860 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a5860:	b508      	push	{r3, lr}
 80a5862:	4b02      	ldr	r3, [pc, #8]	; (80a586c <network_set_listen_timeout+0xc>)
 80a5864:	681b      	ldr	r3, [r3, #0]
 80a5866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a5868:	9301      	str	r3, [sp, #4]
 80a586a:	bd08      	pop	{r3, pc}
 80a586c:	080601c8 	.word	0x080601c8

080a5870 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a5870:	b508      	push	{r3, lr}
 80a5872:	4b02      	ldr	r3, [pc, #8]	; (80a587c <network_get_listen_timeout+0xc>)
 80a5874:	681b      	ldr	r3, [r3, #0]
 80a5876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a5878:	9301      	str	r3, [sp, #4]
 80a587a:	bd08      	pop	{r3, pc}
 80a587c:	080601c8 	.word	0x080601c8

080a5880 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a5880:	b508      	push	{r3, lr}
 80a5882:	4b02      	ldr	r3, [pc, #8]	; (80a588c <network_is_on+0xc>)
 80a5884:	681b      	ldr	r3, [r3, #0]
 80a5886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a5888:	9301      	str	r3, [sp, #4]
 80a588a:	bd08      	pop	{r3, pc}
 80a588c:	080601c8 	.word	0x080601c8

080a5890 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a5890:	b508      	push	{r3, lr}
 80a5892:	4b02      	ldr	r3, [pc, #8]	; (80a589c <network_is_off+0xc>)
 80a5894:	681b      	ldr	r3, [r3, #0]
 80a5896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a5898:	9301      	str	r3, [sp, #4]
 80a589a:	bd08      	pop	{r3, pc}
 80a589c:	080601c8 	.word	0x080601c8

080a58a0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a58a0:	b508      	push	{r3, lr}
 80a58a2:	4b02      	ldr	r3, [pc, #8]	; (80a58ac <malloc+0xc>)
 80a58a4:	681b      	ldr	r3, [r3, #0]
 80a58a6:	681b      	ldr	r3, [r3, #0]
 80a58a8:	9301      	str	r3, [sp, #4]
 80a58aa:	bd08      	pop	{r3, pc}
 80a58ac:	080601a0 	.word	0x080601a0

080a58b0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a58b0:	b508      	push	{r3, lr}
 80a58b2:	4b02      	ldr	r3, [pc, #8]	; (80a58bc <free+0xc>)
 80a58b4:	681b      	ldr	r3, [r3, #0]
 80a58b6:	685b      	ldr	r3, [r3, #4]
 80a58b8:	9301      	str	r3, [sp, #4]
 80a58ba:	bd08      	pop	{r3, pc}
 80a58bc:	080601a0 	.word	0x080601a0

080a58c0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a58c0:	b508      	push	{r3, lr}
 80a58c2:	4b02      	ldr	r3, [pc, #8]	; (80a58cc <realloc+0xc>)
 80a58c4:	681b      	ldr	r3, [r3, #0]
 80a58c6:	689b      	ldr	r3, [r3, #8]
 80a58c8:	9301      	str	r3, [sp, #4]
 80a58ca:	bd08      	pop	{r3, pc}
 80a58cc:	080601a0 	.word	0x080601a0

080a58d0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a58d0:	b508      	push	{r3, lr}
 80a58d2:	4b02      	ldr	r3, [pc, #8]	; (80a58dc <sprintf+0xc>)
 80a58d4:	681b      	ldr	r3, [r3, #0]
 80a58d6:	68db      	ldr	r3, [r3, #12]
 80a58d8:	9301      	str	r3, [sp, #4]
 80a58da:	bd08      	pop	{r3, pc}
 80a58dc:	080601a0 	.word	0x080601a0

080a58e0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a58e0:	b508      	push	{r3, lr}
 80a58e2:	4b02      	ldr	r3, [pc, #8]	; (80a58ec <abort+0xc>)
 80a58e4:	681b      	ldr	r3, [r3, #0]
 80a58e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a58e8:	9301      	str	r3, [sp, #4]
 80a58ea:	bd08      	pop	{r3, pc}
 80a58ec:	080601a0 	.word	0x080601a0

080a58f0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a58f0:	b508      	push	{r3, lr}
 80a58f2:	4b02      	ldr	r3, [pc, #8]	; (80a58fc <_malloc_r+0xc>)
 80a58f4:	681b      	ldr	r3, [r3, #0]
 80a58f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a58f8:	9301      	str	r3, [sp, #4]
 80a58fa:	bd08      	pop	{r3, pc}
 80a58fc:	080601a0 	.word	0x080601a0

080a5900 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a5900:	b508      	push	{r3, lr}
 80a5902:	4b02      	ldr	r3, [pc, #8]	; (80a590c <__errno+0xc>)
 80a5904:	681b      	ldr	r3, [r3, #0]
 80a5906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a5908:	9301      	str	r3, [sp, #4]
 80a590a:	bd08      	pop	{r3, pc}
 80a590c:	080601a0 	.word	0x080601a0

080a5910 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a5910:	b508      	push	{r3, lr}
 80a5912:	4b02      	ldr	r3, [pc, #8]	; (80a591c <newlib_impure_ptr_callback+0xc>)
 80a5914:	681b      	ldr	r3, [r3, #0]
 80a5916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a5918:	9301      	str	r3, [sp, #4]
 80a591a:	bd08      	pop	{r3, pc}
 80a591c:	080601a0 	.word	0x080601a0

080a5920 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a5920:	2100      	movs	r1, #0
 80a5922:	f7ff bef1 	b.w	80a5708 <system_delay_ms>

080a5926 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a5926:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a5928:	6883      	ldr	r3, [r0, #8]
 80a592a:	4604      	mov	r4, r0
 80a592c:	b90b      	cbnz	r3, 80a5932 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a592e:	f002 f897 	bl	80a7a60 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a5932:	68c3      	ldr	r3, [r0, #12]
 80a5934:	4798      	blx	r3
      if (_M_manager)
 80a5936:	68a3      	ldr	r3, [r4, #8]
 80a5938:	b11b      	cbz	r3, 80a5942 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a593a:	2203      	movs	r2, #3
 80a593c:	4621      	mov	r1, r4
 80a593e:	4620      	mov	r0, r4
 80a5940:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a5942:	4620      	mov	r0, r4
}
 80a5944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a5948:	2110      	movs	r1, #16
 80a594a:	f001 bfbc 	b.w	80a78c6 <_ZdlPvj>

080a594e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a594e:	4770      	bx	lr

080a5950 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a5950:	2000      	movs	r0, #0
 80a5952:	4770      	bx	lr

080a5954 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a5954:	b510      	push	{r4, lr}
 80a5956:	4604      	mov	r4, r0
 80a5958:	2110      	movs	r1, #16
 80a595a:	f001 ffb4 	bl	80a78c6 <_ZdlPvj>
 80a595e:	4620      	mov	r0, r4
 80a5960:	bd10      	pop	{r4, pc}

080a5962 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a5962:	b508      	push	{r3, lr}
      { delete this; }
 80a5964:	f7ff fff6 	bl	80a5954 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a5968:	bd08      	pop	{r3, pc}

080a596a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a596a:	b510      	push	{r4, lr}
      if (_M_manager)
 80a596c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a596e:	4604      	mov	r4, r0
      if (_M_manager)
 80a5970:	b113      	cbz	r3, 80a5978 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a5972:	2203      	movs	r2, #3
 80a5974:	4601      	mov	r1, r0
 80a5976:	4798      	blx	r3
    }
 80a5978:	4620      	mov	r0, r4
 80a597a:	bd10      	pop	{r4, pc}

080a597c <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a597c:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a597e:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a5980:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a5984:	6002      	str	r2, [r0, #0]
 80a5986:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a5988:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a598a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a598c:	680c      	ldr	r4, [r1, #0]
 80a598e:	8085      	strh	r5, [r0, #4]
 80a5990:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a5992:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a5994:	bd30      	pop	{r4, r5, pc}

080a5996 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a5996:	b510      	push	{r4, lr}
 80a5998:	4604      	mov	r4, r0
    free((void*)msg_);
 80a599a:	6800      	ldr	r0, [r0, #0]
 80a599c:	f7ff ff88 	bl	80a58b0 <free>
}
 80a59a0:	4620      	mov	r0, r4
 80a59a2:	bd10      	pop	{r4, pc}

080a59a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a59a4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a59a6:	68c4      	ldr	r4, [r0, #12]
 80a59a8:	b1f4      	cbz	r4, 80a59e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a59aa:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a59ac:	2b02      	cmp	r3, #2
 80a59ae:	d103      	bne.n	80a59b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a59b0:	f104 000c 	add.w	r0, r4, #12
 80a59b4:	f7ff ffef 	bl	80a5996 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a59b8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a59ba:	b135      	cbz	r5, 80a59ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a59bc:	4628      	mov	r0, r5
 80a59be:	f7ff ffd4 	bl	80a596a <_ZNSt14_Function_baseD1Ev>
 80a59c2:	2110      	movs	r1, #16
 80a59c4:	4628      	mov	r0, r5
 80a59c6:	f001 ff7e 	bl	80a78c6 <_ZdlPvj>
 80a59ca:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a59cc:	b135      	cbz	r5, 80a59dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a59ce:	4628      	mov	r0, r5
 80a59d0:	f7ff ffcb 	bl	80a596a <_ZNSt14_Function_baseD1Ev>
 80a59d4:	2110      	movs	r1, #16
 80a59d6:	4628      	mov	r0, r5
 80a59d8:	f001 ff75 	bl	80a78c6 <_ZdlPvj>
 80a59dc:	4620      	mov	r0, r4
 80a59de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a59e2:	2114      	movs	r1, #20
 80a59e4:	f001 bf6f 	b.w	80a78c6 <_ZdlPvj>
 80a59e8:	bd38      	pop	{r3, r4, r5, pc}

080a59ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a59ea:	680b      	ldr	r3, [r1, #0]
 80a59ec:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a59ee:	b113      	cbz	r3, 80a59f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a59f0:	685a      	ldr	r2, [r3, #4]
 80a59f2:	3201      	adds	r2, #1
 80a59f4:	605a      	str	r2, [r3, #4]
      }
 80a59f6:	4770      	bx	lr

080a59f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a59f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a59fa:	460e      	mov	r6, r1
 80a59fc:	4604      	mov	r4, r0
 80a59fe:	f856 3b04 	ldr.w	r3, [r6], #4
 80a5a02:	460d      	mov	r5, r1
 80a5a04:	a801      	add	r0, sp, #4
 80a5a06:	4631      	mov	r1, r6
 80a5a08:	9300      	str	r3, [sp, #0]
 80a5a0a:	f7ff ffee 	bl	80a59ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a5a0e:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a5a10:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a5a12:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a5a14:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a5a16:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a5a18:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a5a1a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a5a1c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a5a1e:	f7fe f9e3 	bl	80a3de8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a5a22:	4630      	mov	r0, r6
 80a5a24:	f7fe f9e0 	bl	80a3de8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a5a28:	4628      	mov	r0, r5
 80a5a2a:	2108      	movs	r1, #8
 80a5a2c:	f001 ff4b 	bl	80a78c6 <_ZdlPvj>
        return p;
    }
 80a5a30:	4620      	mov	r0, r4
 80a5a32:	b002      	add	sp, #8
 80a5a34:	bd70      	pop	{r4, r5, r6, pc}

080a5a36 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a5a36:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a5a38:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a5a3a:	460b      	mov	r3, r1
 80a5a3c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a5a3e:	c803      	ldmia	r0, {r0, r1}
 80a5a40:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a5a44:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a5a48:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a5a4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a5a50:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a5a54:	b002      	add	sp, #8
 80a5a56:	bd10      	pop	{r4, pc}

080a5a58 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a5a58:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a5a5a:	b510      	push	{r4, lr}
      if (_M_empty())
 80a5a5c:	b90a      	cbnz	r2, 80a5a62 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a5a5e:	f001 ffff 	bl	80a7a60 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a5a62:	68c3      	ldr	r3, [r0, #12]
    }
 80a5a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a5a68:	4718      	bx	r3

080a5a6a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a5a6a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a5a6c:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a5a6e:	f100 0110 	add.w	r1, r0, #16
 80a5a72:	f7ff fff1 	bl	80a5a58 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a5a76:	bd08      	pop	{r3, pc}

080a5a78 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a5a78:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a5a7a:	b510      	push	{r4, lr}
      if (_M_empty())
 80a5a7c:	b90a      	cbnz	r2, 80a5a82 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a5a7e:	f001 ffef 	bl	80a7a60 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a5a82:	68c3      	ldr	r3, [r0, #12]
    }
 80a5a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a5a88:	4718      	bx	r3

080a5a8a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a5a8a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a5a8c:	6800      	ldr	r0, [r0, #0]
 80a5a8e:	f100 0110 	add.w	r1, r0, #16
 80a5a92:	f7ff fff1 	bl	80a5a78 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a5a96:	bd08      	pop	{r3, pc}

080a5a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a5a98:	b538      	push	{r3, r4, r5, lr}
 80a5a9a:	2300      	movs	r3, #0
 80a5a9c:	4604      	mov	r4, r0
 80a5a9e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a5aa0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a5aa2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a5aa4:	f7fa faf9 	bl	80a009a <_Znwj>
 80a5aa8:	b128      	cbz	r0, 80a5ab6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a5aaa:	2301      	movs	r3, #1
 80a5aac:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a5ab0:	4b02      	ldr	r3, [pc, #8]	; (80a5abc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a5ab2:	60c5      	str	r5, [r0, #12]
 80a5ab4:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a5ab6:	6020      	str	r0, [r4, #0]
	}
 80a5ab8:	4620      	mov	r0, r4
 80a5aba:	bd38      	pop	{r3, r4, r5, pc}
 80a5abc:	080ad524 	.word	0x080ad524

080a5ac0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a5ac0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a5ac2:	2300      	movs	r3, #0
 80a5ac4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a5ac6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a5ac8:	4604      	mov	r4, r0
 80a5aca:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a5acc:	b12b      	cbz	r3, 80a5ada <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a5ace:	2202      	movs	r2, #2
 80a5ad0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a5ad2:	68eb      	ldr	r3, [r5, #12]
 80a5ad4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a5ad6:	68ab      	ldr	r3, [r5, #8]
 80a5ad8:	60a3      	str	r3, [r4, #8]
    }
 80a5ada:	4620      	mov	r0, r4
 80a5adc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a5ae0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a5ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a5ae2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a5ae4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a5ae6:	4668      	mov	r0, sp
 80a5ae8:	f7ff ff48 	bl	80a597c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a5aec:	f04f 0302 	mov.w	r3, #2
 80a5af0:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a5af4:	2a00      	cmp	r2, #0
 80a5af6:	d103      	bne.n	80a5b00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a5af8:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a5afc:	2900      	cmp	r1, #0
 80a5afe:	d1f7      	bne.n	80a5af0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a5b00:	d125      	bne.n	80a5b4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a5b02:	f104 050c 	add.w	r5, r4, #12
 80a5b06:	4669      	mov	r1, sp
 80a5b08:	4628      	mov	r0, r5
 80a5b0a:	f7ff ff37 	bl	80a597c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a5b0e:	2301      	movs	r3, #1
 80a5b10:	f3bf 8f5b 	dmb	ish
 80a5b14:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a5b16:	2000      	movs	r0, #0
 80a5b18:	f3bf 8f5b 	dmb	ish
 80a5b1c:	f104 0308 	add.w	r3, r4, #8
 80a5b20:	e853 6f00 	ldrex	r6, [r3]
 80a5b24:	e843 0200 	strex	r2, r0, [r3]
 80a5b28:	2a00      	cmp	r2, #0
 80a5b2a:	d1f9      	bne.n	80a5b20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a5b2c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a5b30:	b16e      	cbz	r6, 80a5b4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a5b32:	f7ff fdf1 	bl	80a5718 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a5b36:	b178      	cbz	r0, 80a5b58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a5b38:	4629      	mov	r1, r5
 80a5b3a:	4630      	mov	r0, r6
 80a5b3c:	f7ff ff8c 	bl	80a5a58 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a5b40:	4630      	mov	r0, r6
 80a5b42:	f7ff ff12 	bl	80a596a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a5b46:	2110      	movs	r1, #16
 80a5b48:	4630      	mov	r0, r6
 80a5b4a:	f001 febc 	bl	80a78c6 <_ZdlPvj>
        p_->setError(std::move(error));
 80a5b4e:	4668      	mov	r0, sp
 80a5b50:	f7ff ff21 	bl	80a5996 <_ZN8particle5ErrorD1Ev>
    }
 80a5b54:	b009      	add	sp, #36	; 0x24
 80a5b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a5b58:	4631      	mov	r1, r6
 80a5b5a:	a802      	add	r0, sp, #8
 80a5b5c:	f7ff ffb0 	bl	80a5ac0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a5b60:	68e0      	ldr	r0, [r4, #12]
 80a5b62:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a5b66:	b108      	cbz	r0, 80a5b6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a5b68:	f006 fd32 	bl	80ac5d0 <strdup>
        type_(type) {
 80a5b6c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a5b6e:	2010      	movs	r0, #16
 80a5b70:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a5b74:	f7fa fa91 	bl	80a009a <_Znwj>
 80a5b78:	4605      	mov	r5, r0
 80a5b7a:	b1e8      	cbz	r0, 80a5bb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a5b7c:	2700      	movs	r7, #0
 80a5b7e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a5b80:	2018      	movs	r0, #24
 80a5b82:	f7fa fa8a 	bl	80a009a <_Znwj>
 80a5b86:	4604      	mov	r4, r0
 80a5b88:	b188      	cbz	r0, 80a5bae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a5b8a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a5b8c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a5b8e:	a802      	add	r0, sp, #8
 80a5b90:	f7ff ff51 	bl	80a5a36 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a5b94:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a5b96:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a5b98:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a5b9a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a5b9c:	9204      	str	r2, [sp, #16]
 80a5b9e:	68e2      	ldr	r2, [r4, #12]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a5ba0:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a5ba2:	60e3      	str	r3, [r4, #12]
 80a5ba4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a5ba8:	9205      	str	r2, [sp, #20]
 80a5baa:	f7ff fee7 	bl	80a597c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a5bae:	4b08      	ldr	r3, [pc, #32]	; (80a5bd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a5bb0:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a5bb2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a5bb4:	4b07      	ldr	r3, [pc, #28]	; (80a5bd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a5bb6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a5bb8:	a806      	add	r0, sp, #24
 80a5bba:	f7ff feec 	bl	80a5996 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a5bbe:	a802      	add	r0, sp, #8
 80a5bc0:	f7ff fed3 	bl	80a596a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a5bc4:	2200      	movs	r2, #0
 80a5bc6:	4629      	mov	r1, r5
 80a5bc8:	4803      	ldr	r0, [pc, #12]	; (80a5bd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a5bca:	f7ff fdad 	bl	80a5728 <application_thread_invoke>
 80a5bce:	e7b7      	b.n	80a5b40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a5bd0:	080a5a6b 	.word	0x080a5a6b
 80a5bd4:	080a5d01 	.word	0x080a5d01
 80a5bd8:	080a5927 	.word	0x080a5927

080a5bdc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a5bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a5be0:	b08a      	sub	sp, #40	; 0x28
 80a5be2:	4605      	mov	r5, r0
 80a5be4:	460c      	mov	r4, r1
 80a5be6:	4617      	mov	r7, r2
 80a5be8:	4698      	mov	r8, r3
 80a5bea:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a5bee:	f7ff fdcf 	bl	80a5790 <spark_cloud_flag_connected>
 80a5bf2:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a5bf4:	4682      	mov	sl, r0
 80a5bf6:	bb38      	cbnz	r0, 80a5c48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a5bf8:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a5bfc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a5bfe:	a905      	add	r1, sp, #20
 80a5c00:	4630      	mov	r0, r6
 80a5c02:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a5c06:	f7ff feb9 	bl	80a597c <_ZN8particle5ErrorC1EOS0_>
 80a5c0a:	2014      	movs	r0, #20
 80a5c0c:	f7fa fa45 	bl	80a009a <_Znwj>
 80a5c10:	4604      	mov	r4, r0
 80a5c12:	b148      	cbz	r0, 80a5c28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a5c14:	2302      	movs	r3, #2
 80a5c16:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a5c18:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a5c1a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a5c1e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a5c20:	4631      	mov	r1, r6
 80a5c22:	300c      	adds	r0, #12
 80a5c24:	f7ff feaa 	bl	80a597c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a5c28:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a5c2a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a5c2c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a5c30:	f7ff ff32 	bl	80a5a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a5c34:	4630      	mov	r0, r6
 80a5c36:	f7ff feae 	bl	80a5996 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a5c3a:	a805      	add	r0, sp, #20
 80a5c3c:	f7ff feab 	bl	80a5996 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a5c40:	4628      	mov	r0, r5
 80a5c42:	b00a      	add	sp, #40	; 0x28
 80a5c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a5c48:	230c      	movs	r3, #12
 80a5c4a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a5c4e:	2014      	movs	r0, #20
 80a5c50:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a5c54:	9307      	str	r3, [sp, #28]
 80a5c56:	f7fa fa20 	bl	80a009a <_Znwj>
 80a5c5a:	4601      	mov	r1, r0
 80a5c5c:	b128      	cbz	r0, 80a5c6a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a5c5e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a5c62:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a5c66:	f880 a001 	strb.w	sl, [r0, #1]
 80a5c6a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a5c6c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a5c6e:	f7ff ff13 	bl	80a5a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a5c72:	4b22      	ldr	r3, [pc, #136]	; (80a5cfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a5c74:	2008      	movs	r0, #8
 80a5c76:	9308      	str	r3, [sp, #32]
 80a5c78:	f7fa fa0f 	bl	80a009a <_Znwj>
 80a5c7c:	4682      	mov	sl, r0
 80a5c7e:	b128      	cbz	r0, 80a5c8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a5c80:	9b03      	ldr	r3, [sp, #12]
 80a5c82:	a904      	add	r1, sp, #16
 80a5c84:	f840 3b04 	str.w	r3, [r0], #4
 80a5c88:	f7ff feaf 	bl	80a59ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a5c8c:	4642      	mov	r2, r8
 80a5c8e:	4639      	mov	r1, r7
 80a5c90:	4620      	mov	r0, r4
 80a5c92:	9600      	str	r6, [sp, #0]
 80a5c94:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a5c98:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a5c9c:	f7ff fd80 	bl	80a57a0 <spark_send_event>
 80a5ca0:	b9b8      	cbnz	r0, 80a5cd2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a5ca2:	9b03      	ldr	r3, [sp, #12]
 80a5ca4:	785b      	ldrb	r3, [r3, #1]
 80a5ca6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a5caa:	b993      	cbnz	r3, 80a5cd2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a5cac:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a5cb0:	a905      	add	r1, sp, #20
 80a5cb2:	a803      	add	r0, sp, #12
 80a5cb4:	9205      	str	r2, [sp, #20]
 80a5cb6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a5cba:	f7ff ff11 	bl	80a5ae0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a5cbe:	a805      	add	r0, sp, #20
 80a5cc0:	f7ff fe69 	bl	80a5996 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a5cc4:	a805      	add	r0, sp, #20
 80a5cc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a5cc8:	f7ff fe96 	bl	80a59f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a5ccc:	a806      	add	r0, sp, #24
 80a5cce:	f7fe f88b 	bl	80a3de8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a5cd2:	9b03      	ldr	r3, [sp, #12]
 80a5cd4:	a904      	add	r1, sp, #16
 80a5cd6:	a806      	add	r0, sp, #24
 80a5cd8:	9305      	str	r3, [sp, #20]
 80a5cda:	f7ff fe86 	bl	80a59ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a5cde:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a5ce0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a5ce2:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a5ce4:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a5ce6:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a5ce8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a5cea:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a5cec:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a5cee:	f7fe f87b 	bl	80a3de8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a5cf2:	a804      	add	r0, sp, #16
 80a5cf4:	f7fe f878 	bl	80a3de8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a5cf8:	e7a2      	b.n	80a5c40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a5cfa:	bf00      	nop
 80a5cfc:	080a5dc5 	.word	0x080a5dc5

080a5d00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a5d00:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a5d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a5d04:	4605      	mov	r5, r0
	  switch (__op)
 80a5d06:	d007      	beq.n	80a5d18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a5d08:	2a03      	cmp	r2, #3
 80a5d0a:	d018      	beq.n	80a5d3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a5d0c:	2a01      	cmp	r2, #1
 80a5d0e:	d101      	bne.n	80a5d14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a5d10:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a5d12:	6003      	str	r3, [r0, #0]
	}
 80a5d14:	2000      	movs	r0, #0
 80a5d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a5d18:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a5d1a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a5d1c:	f7fa f9bd 	bl	80a009a <_Znwj>
 80a5d20:	4604      	mov	r4, r0
 80a5d22:	b150      	cbz	r0, 80a5d3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a5d24:	4631      	mov	r1, r6
 80a5d26:	f7ff fecb 	bl	80a5ac0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a5d2a:	6930      	ldr	r0, [r6, #16]
 80a5d2c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a5d30:	b108      	cbz	r0, 80a5d36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a5d32:	f006 fc4d 	bl	80ac5d0 <strdup>
        type_(type) {
 80a5d36:	6120      	str	r0, [r4, #16]
 80a5d38:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a5d3a:	602c      	str	r4, [r5, #0]
	}
 80a5d3c:	e7ea      	b.n	80a5d14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a5d3e:	6804      	ldr	r4, [r0, #0]
 80a5d40:	2c00      	cmp	r4, #0
 80a5d42:	d0e7      	beq.n	80a5d14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a5d44:	f104 0010 	add.w	r0, r4, #16
 80a5d48:	f7ff fe25 	bl	80a5996 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a5d4c:	4620      	mov	r0, r4
 80a5d4e:	f7ff fe0c 	bl	80a596a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a5d52:	2118      	movs	r1, #24
 80a5d54:	4620      	mov	r0, r4
 80a5d56:	f001 fdb6 	bl	80a78c6 <_ZdlPvj>
 80a5d5a:	e7db      	b.n	80a5d14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a5d5c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a5d5c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a5d5e:	2300      	movs	r3, #0
 80a5d60:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a5d62:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a5d64:	4604      	mov	r4, r0
 80a5d66:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a5d68:	b12b      	cbz	r3, 80a5d76 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a5d6a:	2202      	movs	r2, #2
 80a5d6c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a5d6e:	68eb      	ldr	r3, [r5, #12]
 80a5d70:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a5d72:	68ab      	ldr	r3, [r5, #8]
 80a5d74:	60a3      	str	r3, [r4, #8]
    }
 80a5d76:	4620      	mov	r0, r4
 80a5d78:	bd38      	pop	{r3, r4, r5, pc}

080a5d7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a5d7a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a5d7c:	b570      	push	{r4, r5, r6, lr}
 80a5d7e:	4604      	mov	r4, r0
	  switch (__op)
 80a5d80:	d007      	beq.n	80a5d92 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a5d82:	2a03      	cmp	r2, #3
 80a5d84:	d012      	beq.n	80a5dac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a5d86:	2a01      	cmp	r2, #1
 80a5d88:	d101      	bne.n	80a5d8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a5d8a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a5d8c:	6003      	str	r3, [r0, #0]
	}
 80a5d8e:	2000      	movs	r0, #0
 80a5d90:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a5d92:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a5d94:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a5d96:	f7fa f980 	bl	80a009a <_Znwj>
 80a5d9a:	4605      	mov	r5, r0
 80a5d9c:	b120      	cbz	r0, 80a5da8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a5d9e:	4631      	mov	r1, r6
 80a5da0:	f7ff ffdc 	bl	80a5d5c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a5da4:	7c33      	ldrb	r3, [r6, #16]
 80a5da6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a5da8:	6025      	str	r5, [r4, #0]
	}
 80a5daa:	e7f0      	b.n	80a5d8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a5dac:	6804      	ldr	r4, [r0, #0]
 80a5dae:	2c00      	cmp	r4, #0
 80a5db0:	d0ed      	beq.n	80a5d8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a5db2:	4620      	mov	r0, r4
 80a5db4:	f7ff fdd9 	bl	80a596a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a5db8:	2114      	movs	r1, #20
 80a5dba:	4620      	mov	r0, r4
 80a5dbc:	f001 fd83 	bl	80a78c6 <_ZdlPvj>
 80a5dc0:	e7e5      	b.n	80a5d8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a5dc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a5dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a5dc6:	4604      	mov	r4, r0
 80a5dc8:	b089      	sub	sp, #36	; 0x24
 80a5dca:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a5dcc:	a801      	add	r0, sp, #4
 80a5dce:	4611      	mov	r1, r2
 80a5dd0:	f7ff fe12 	bl	80a59f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a5dd4:	b1a4      	cbz	r4, 80a5e00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a5dd6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a5dd8:	b11d      	cbz	r5, 80a5de2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a5dda:	4628      	mov	r0, r5
 80a5ddc:	f006 fbf8 	bl	80ac5d0 <strdup>
 80a5de0:	4605      	mov	r5, r0
 80a5de2:	a801      	add	r0, sp, #4
 80a5de4:	a903      	add	r1, sp, #12
        type_(type) {
 80a5de6:	9503      	str	r5, [sp, #12]
 80a5de8:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a5dec:	f7ff fe78 	bl	80a5ae0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a5df0:	a803      	add	r0, sp, #12
 80a5df2:	f7ff fdd0 	bl	80a5996 <_ZN8particle5ErrorD1Ev>
 80a5df6:	a802      	add	r0, sp, #8
 80a5df8:	f7fd fff6 	bl	80a3de8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a5dfc:	b009      	add	sp, #36	; 0x24
 80a5dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a5e00:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a5e02:	9d01      	ldr	r5, [sp, #4]
 80a5e04:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a5e08:	2a00      	cmp	r2, #0
 80a5e0a:	d103      	bne.n	80a5e14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a5e0c:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a5e10:	2900      	cmp	r1, #0
 80a5e12:	d1f7      	bne.n	80a5e04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a5e14:	d1ef      	bne.n	80a5df6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a5e16:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a5e18:	f3bf 8f5b 	dmb	ish
 80a5e1c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a5e1e:	f3bf 8f5b 	dmb	ish
 80a5e22:	1d2b      	adds	r3, r5, #4
 80a5e24:	e853 6f00 	ldrex	r6, [r3]
 80a5e28:	e843 4200 	strex	r2, r4, [r3]
 80a5e2c:	2a00      	cmp	r2, #0
 80a5e2e:	d1f9      	bne.n	80a5e24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a5e30:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a5e34:	2e00      	cmp	r6, #0
 80a5e36:	d0de      	beq.n	80a5df6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a5e38:	4620      	mov	r0, r4
 80a5e3a:	f7ff fc6d 	bl	80a5718 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a5e3e:	4607      	mov	r7, r0
 80a5e40:	b160      	cbz	r0, 80a5e5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a5e42:	4630      	mov	r0, r6
 80a5e44:	f105 010c 	add.w	r1, r5, #12
 80a5e48:	f7ff fe16 	bl	80a5a78 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a5e4c:	4630      	mov	r0, r6
 80a5e4e:	f7ff fd8c 	bl	80a596a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a5e52:	2110      	movs	r1, #16
 80a5e54:	4630      	mov	r0, r6
 80a5e56:	f001 fd36 	bl	80a78c6 <_ZdlPvj>
 80a5e5a:	e7cc      	b.n	80a5df6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a5e5c:	4631      	mov	r1, r6
 80a5e5e:	a803      	add	r0, sp, #12
 80a5e60:	f7ff ff7c 	bl	80a5d5c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a5e64:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a5e66:	2010      	movs	r0, #16
 80a5e68:	f88d 301c 	strb.w	r3, [sp, #28]
 80a5e6c:	f7fa f915 	bl	80a009a <_Znwj>
 80a5e70:	4605      	mov	r5, r0
 80a5e72:	b1d0      	cbz	r0, 80a5eaa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a5e74:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a5e76:	2014      	movs	r0, #20
 80a5e78:	f7fa f90f 	bl	80a009a <_Znwj>
 80a5e7c:	4604      	mov	r4, r0
 80a5e7e:	b178      	cbz	r0, 80a5ea0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a5e80:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a5e82:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a5e84:	a803      	add	r0, sp, #12
 80a5e86:	f7ff fdd6 	bl	80a5a36 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a5e8a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a5e8c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a5e8e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a5e90:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a5e92:	9205      	str	r2, [sp, #20]
 80a5e94:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a5e96:	60e3      	str	r3, [r4, #12]
 80a5e98:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a5e9c:	9206      	str	r2, [sp, #24]
 80a5e9e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a5ea0:	4b06      	ldr	r3, [pc, #24]	; (80a5ebc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a5ea2:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a5ea4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a5ea6:	4b06      	ldr	r3, [pc, #24]	; (80a5ec0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a5ea8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a5eaa:	a803      	add	r0, sp, #12
 80a5eac:	f7ff fd5d 	bl	80a596a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a5eb0:	2200      	movs	r2, #0
 80a5eb2:	4629      	mov	r1, r5
 80a5eb4:	4803      	ldr	r0, [pc, #12]	; (80a5ec4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a5eb6:	f7ff fc37 	bl	80a5728 <application_thread_invoke>
 80a5eba:	e7c7      	b.n	80a5e4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a5ebc:	080a5a8b 	.word	0x080a5a8b
 80a5ec0:	080a5d7b 	.word	0x080a5d7b
 80a5ec4:	080a5927 	.word	0x080a5927

080a5ec8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a5ec8:	4770      	bx	lr

080a5eca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a5eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a5ecc:	4606      	mov	r6, r0
 80a5ece:	4615      	mov	r5, r2
 80a5ed0:	460c      	mov	r4, r1
 80a5ed2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a5ed4:	42bc      	cmp	r4, r7
 80a5ed6:	d006      	beq.n	80a5ee6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a5ed8:	6833      	ldr	r3, [r6, #0]
 80a5eda:	4630      	mov	r0, r6
 80a5edc:	689b      	ldr	r3, [r3, #8]
 80a5ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a5ee2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a5ee4:	e7f6      	b.n	80a5ed4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a5ee6:	4628      	mov	r0, r5
 80a5ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a5eea <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a5eea:	2200      	movs	r2, #0
 80a5eec:	7c00      	ldrb	r0, [r0, #16]
 80a5eee:	f7ff bab1 	b.w	80a5454 <hal_i2c_write>

080a5ef2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a5ef2:	2100      	movs	r1, #0
 80a5ef4:	7c00      	ldrb	r0, [r0, #16]
 80a5ef6:	f7ff bab5 	b.w	80a5464 <hal_i2c_available>

080a5efa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a5efa:	2100      	movs	r1, #0
 80a5efc:	7c00      	ldrb	r0, [r0, #16]
 80a5efe:	f7ff bab9 	b.w	80a5474 <hal_i2c_read>

080a5f02 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a5f02:	2100      	movs	r1, #0
 80a5f04:	7c00      	ldrb	r0, [r0, #16]
 80a5f06:	f7ff babd 	b.w	80a5484 <hal_i2c_peek>

080a5f0a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a5f0a:	2100      	movs	r1, #0
 80a5f0c:	7c00      	ldrb	r0, [r0, #16]
 80a5f0e:	f7ff bac1 	b.w	80a5494 <hal_i2c_flush>

080a5f12 <_ZN7TwoWireD0Ev>:
 80a5f12:	b510      	push	{r4, lr}
 80a5f14:	4604      	mov	r4, r0
 80a5f16:	2114      	movs	r1, #20
 80a5f18:	f001 fcd5 	bl	80a78c6 <_ZdlPvj>
 80a5f1c:	4620      	mov	r0, r4
 80a5f1e:	bd10      	pop	{r4, pc}

080a5f20 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a5f20:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a5f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a5f26:	4604      	mov	r4, r0
 80a5f28:	4608      	mov	r0, r1
 80a5f2a:	2100      	movs	r1, #0
 80a5f2c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a5f30:	4b03      	ldr	r3, [pc, #12]	; (80a5f40 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a5f32:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a5f34:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a5f36:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a5f38:	f7ff fabc 	bl	80a54b4 <hal_i2c_init>
}
 80a5f3c:	4620      	mov	r0, r4
 80a5f3e:	bd10      	pop	{r4, pc}
 80a5f40:	080ad540 	.word	0x080ad540

080a5f44 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a5f44:	4770      	bx	lr

080a5f46 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a5f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a5f48:	460e      	mov	r6, r1
 80a5f4a:	2400      	movs	r4, #0
 80a5f4c:	f100 0708 	add.w	r7, r0, #8
 80a5f50:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a5f52:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a5f56:	220a      	movs	r2, #10
 80a5f58:	4630      	mov	r0, r6
 80a5f5a:	f000 f914 	bl	80a6186 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a5f5e:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a5f60:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a5f62:	d101      	bne.n	80a5f68 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a5f64:	4620      	mov	r0, r4
 80a5f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a5f68:	2c00      	cmp	r4, #0
 80a5f6a:	d0f2      	beq.n	80a5f52 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a5f6c:	212e      	movs	r1, #46	; 0x2e
 80a5f6e:	4630      	mov	r0, r6
 80a5f70:	f000 f906 	bl	80a6180 <_ZN5Print5printEc>
 80a5f74:	4404      	add	r4, r0
 80a5f76:	e7ec      	b.n	80a5f52 <_ZNK9IPAddress7printToER5Print+0xc>

080a5f78 <_ZN9IPAddressD0Ev>:
 80a5f78:	b510      	push	{r4, lr}
 80a5f7a:	4604      	mov	r4, r0
 80a5f7c:	2118      	movs	r1, #24
 80a5f7e:	f001 fca2 	bl	80a78c6 <_ZdlPvj>
 80a5f82:	4620      	mov	r0, r4
 80a5f84:	bd10      	pop	{r4, pc}
	...

080a5f88 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a5f88:	b510      	push	{r4, lr}
 80a5f8a:	4604      	mov	r4, r0
 80a5f8c:	4b04      	ldr	r3, [pc, #16]	; (80a5fa0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a5f8e:	2211      	movs	r2, #17
 80a5f90:	2100      	movs	r1, #0
 80a5f92:	f840 3b04 	str.w	r3, [r0], #4
 80a5f96:	f006 fa9b 	bl	80ac4d0 <memset>
}
 80a5f9a:	4620      	mov	r0, r4
 80a5f9c:	bd10      	pop	{r4, pc}
 80a5f9e:	bf00      	nop
 80a5fa0:	080ad568 	.word	0x080ad568

080a5fa4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a5fa4:	4603      	mov	r3, r0
 80a5fa6:	4a07      	ldr	r2, [pc, #28]	; (80a5fc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a5fa8:	b510      	push	{r4, lr}
 80a5faa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a5fae:	f101 0210 	add.w	r2, r1, #16
 80a5fb2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a5fb6:	4291      	cmp	r1, r2
 80a5fb8:	f843 4b04 	str.w	r4, [r3], #4
 80a5fbc:	d1f9      	bne.n	80a5fb2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a5fbe:	780a      	ldrb	r2, [r1, #0]
 80a5fc0:	701a      	strb	r2, [r3, #0]
}
 80a5fc2:	bd10      	pop	{r4, pc}
 80a5fc4:	080ad568 	.word	0x080ad568

080a5fc8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a5fc8:	4a02      	ldr	r2, [pc, #8]	; (80a5fd4 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a5fca:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a5fce:	2204      	movs	r2, #4
 80a5fd0:	7502      	strb	r2, [r0, #20]
}
 80a5fd2:	4770      	bx	lr
 80a5fd4:	080ad568 	.word	0x080ad568

080a5fd8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a5fd8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a5fda:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a5fde:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a5fe2:	2304      	movs	r3, #4
 80a5fe4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a5fe8:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a5fec:	6044      	str	r4, [r0, #4]
 80a5fee:	7503      	strb	r3, [r0, #20]
}
 80a5ff0:	bd10      	pop	{r4, pc}
	...

080a5ff4 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a5ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a5ff6:	4d04      	ldr	r5, [pc, #16]	; (80a6008 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a5ff8:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a5ffa:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a5ffe:	9500      	str	r5, [sp, #0]
 80a6000:	f7ff ffea 	bl	80a5fd8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a6004:	b003      	add	sp, #12
 80a6006:	bd30      	pop	{r4, r5, pc}
 80a6008:	080ad568 	.word	0x080ad568

080a600c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 80a600c:	b513      	push	{r0, r1, r4, lr}
 80a600e:	4b05      	ldr	r3, [pc, #20]	; (80a6024 <_ZN9IPAddressC1EPKh+0x18>)
 80a6010:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 80a6012:	78cb      	ldrb	r3, [r1, #3]
 80a6014:	9300      	str	r3, [sp, #0]
 80a6016:	788b      	ldrb	r3, [r1, #2]
 80a6018:	784a      	ldrb	r2, [r1, #1]
 80a601a:	7809      	ldrb	r1, [r1, #0]
 80a601c:	f7ff ffdc 	bl	80a5fd8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a6020:	b002      	add	sp, #8
 80a6022:	bd10      	pop	{r4, pc}
 80a6024:	080ad568 	.word	0x080ad568

080a6028 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a6028:	4b01      	ldr	r3, [pc, #4]	; (80a6030 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a602a:	4a02      	ldr	r2, [pc, #8]	; (80a6034 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a602c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a602e:	4770      	bx	lr
 80a6030:	20001048 	.word	0x20001048
 80a6034:	080ad574 	.word	0x080ad574

080a6038 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a6038:	2300      	movs	r3, #0
 80a603a:	6840      	ldr	r0, [r0, #4]
 80a603c:	461a      	mov	r2, r3
 80a603e:	f7ff bbcf 	b.w	80a57e0 <network_connect>

080a6042 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a6042:	2200      	movs	r2, #0
 80a6044:	2102      	movs	r1, #2
 80a6046:	6840      	ldr	r0, [r0, #4]
 80a6048:	f7ff bbda 	b.w	80a5800 <network_disconnect>

080a604c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a604c:	2200      	movs	r2, #0
 80a604e:	6840      	ldr	r0, [r0, #4]
 80a6050:	4611      	mov	r1, r2
 80a6052:	f7ff bbcd 	b.w	80a57f0 <network_connecting>

080a6056 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a6056:	2200      	movs	r2, #0
 80a6058:	6840      	ldr	r0, [r0, #4]
 80a605a:	4611      	mov	r1, r2
 80a605c:	f7ff bbd8 	b.w	80a5810 <network_ready>

080a6060 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a6060:	2300      	movs	r3, #0
 80a6062:	6840      	ldr	r0, [r0, #4]
 80a6064:	461a      	mov	r2, r3
 80a6066:	4619      	mov	r1, r3
 80a6068:	f7ff bbda 	b.w	80a5820 <network_on>

080a606c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a606c:	2300      	movs	r3, #0
 80a606e:	6840      	ldr	r0, [r0, #4]
 80a6070:	461a      	mov	r2, r3
 80a6072:	4619      	mov	r1, r3
 80a6074:	f7ff bbdc 	b.w	80a5830 <network_off>

080a6078 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a6078:	2100      	movs	r1, #0
 80a607a:	6840      	ldr	r0, [r0, #4]
 80a607c:	f7ff bc00 	b.w	80a5880 <network_is_on>

080a6080 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a6080:	2100      	movs	r1, #0
 80a6082:	6840      	ldr	r0, [r0, #4]
 80a6084:	f7ff bc04 	b.w	80a5890 <network_is_off>

080a6088 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a6088:	2200      	movs	r2, #0
 80a608a:	6840      	ldr	r0, [r0, #4]
 80a608c:	f081 0101 	eor.w	r1, r1, #1
 80a6090:	f7ff bbd6 	b.w	80a5840 <network_listen>

080a6094 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a6094:	2200      	movs	r2, #0
 80a6096:	6840      	ldr	r0, [r0, #4]
 80a6098:	f7ff bbe2 	b.w	80a5860 <network_set_listen_timeout>

080a609c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a609c:	2200      	movs	r2, #0
 80a609e:	6840      	ldr	r0, [r0, #4]
 80a60a0:	4611      	mov	r1, r2
 80a60a2:	f7ff bbe5 	b.w	80a5870 <network_get_listen_timeout>

080a60a6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a60a6:	2200      	movs	r2, #0
 80a60a8:	6840      	ldr	r0, [r0, #4]
 80a60aa:	4611      	mov	r1, r2
 80a60ac:	f7ff bbd0 	b.w	80a5850 <network_listening>

080a60b0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a60b0:	b570      	push	{r4, r5, r6, lr}
 80a60b2:	4615      	mov	r5, r2
 80a60b4:	b08e      	sub	sp, #56	; 0x38
 80a60b6:	4604      	mov	r4, r0
    IPAddress addr;
 80a60b8:	a808      	add	r0, sp, #32
 80a60ba:	f7ff ff65 	bl	80a5f88 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a60be:	2211      	movs	r2, #17
 80a60c0:	2100      	movs	r1, #0
 80a60c2:	a803      	add	r0, sp, #12
 80a60c4:	f006 fa04 	bl	80ac4d0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a60c8:	2600      	movs	r6, #0
 80a60ca:	4628      	mov	r0, r5
 80a60cc:	f006 fa9b 	bl	80ac606 <strlen>
 80a60d0:	4b0a      	ldr	r3, [pc, #40]	; (80a60fc <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a60d2:	9600      	str	r6, [sp, #0]
 80a60d4:	b281      	uxth	r1, r0
 80a60d6:	685b      	ldr	r3, [r3, #4]
 80a60d8:	4628      	mov	r0, r5
 80a60da:	aa03      	add	r2, sp, #12
 80a60dc:	f7ff faec 	bl	80a56b8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a60e0:	b130      	cbz	r0, 80a60f0 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a60e2:	4631      	mov	r1, r6
 80a60e4:	4620      	mov	r0, r4
 80a60e6:	f7ff ff6f 	bl	80a5fc8 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a60ea:	4620      	mov	r0, r4
 80a60ec:	b00e      	add	sp, #56	; 0x38
 80a60ee:	bd70      	pop	{r4, r5, r6, pc}
 80a60f0:	4620      	mov	r0, r4
 80a60f2:	a903      	add	r1, sp, #12
 80a60f4:	f7ff ff56 	bl	80a5fa4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a60f8:	e7f7      	b.n	80a60ea <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a60fa:	bf00      	nop
 80a60fc:	200014d0 	.word	0x200014d0

080a6100 <_ZN5spark12NetworkClass4fromEm>:
}
 80a6100:	4a03      	ldr	r2, [pc, #12]	; (80a6110 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a6102:	4b04      	ldr	r3, [pc, #16]	; (80a6114 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a6104:	2804      	cmp	r0, #4
 80a6106:	bf14      	ite	ne
 80a6108:	4610      	movne	r0, r2
 80a610a:	4618      	moveq	r0, r3
 80a610c:	4770      	bx	lr
 80a610e:	bf00      	nop
 80a6110:	2000104c 	.word	0x2000104c
 80a6114:	200014d0 	.word	0x200014d0

080a6118 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a6118:	4b02      	ldr	r3, [pc, #8]	; (80a6124 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a611a:	4a03      	ldr	r2, [pc, #12]	; (80a6128 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a611c:	601a      	str	r2, [r3, #0]
 80a611e:	2200      	movs	r2, #0
 80a6120:	605a      	str	r2, [r3, #4]

} // spark
 80a6122:	4770      	bx	lr
 80a6124:	2000104c 	.word	0x2000104c
 80a6128:	080ad580 	.word	0x080ad580

080a612c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a612e:	4606      	mov	r6, r0
 80a6130:	460d      	mov	r5, r1
  size_t n = 0;
 80a6132:	2400      	movs	r4, #0
 80a6134:	188f      	adds	r7, r1, r2
  while (size--) {
 80a6136:	42bd      	cmp	r5, r7
 80a6138:	d00c      	beq.n	80a6154 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a613a:	6833      	ldr	r3, [r6, #0]
 80a613c:	4630      	mov	r0, r6
 80a613e:	689b      	ldr	r3, [r3, #8]
 80a6140:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a6144:	4798      	blx	r3
     if (chunk>=0)
 80a6146:	1e03      	subs	r3, r0, #0
 80a6148:	db01      	blt.n	80a614e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a614a:	441c      	add	r4, r3
  while (size--) {
 80a614c:	e7f3      	b.n	80a6136 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a614e:	2c00      	cmp	r4, #0
 80a6150:	bf08      	it	eq
 80a6152:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a6154:	4620      	mov	r0, r4
 80a6156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a6158 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a6158:	b570      	push	{r4, r5, r6, lr}
 80a615a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a615c:	460c      	mov	r4, r1
    }
 80a615e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a6160:	b149      	cbz	r1, 80a6176 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a6162:	f006 fa50 	bl	80ac606 <strlen>
 80a6166:	682b      	ldr	r3, [r5, #0]
 80a6168:	4602      	mov	r2, r0
 80a616a:	4621      	mov	r1, r4
 80a616c:	4628      	mov	r0, r5
    }
 80a616e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a6172:	68db      	ldr	r3, [r3, #12]
 80a6174:	4718      	bx	r3
    }
 80a6176:	bd70      	pop	{r4, r5, r6, pc}

080a6178 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a6178:	b508      	push	{r3, lr}
  return write(str);
 80a617a:	f7ff ffed 	bl	80a6158 <_ZN5Print5writeEPKc>
}
 80a617e:	bd08      	pop	{r3, pc}

080a6180 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a6180:	6803      	ldr	r3, [r0, #0]
 80a6182:	689b      	ldr	r3, [r3, #8]
 80a6184:	4718      	bx	r3

080a6186 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a6186:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a6188:	2a01      	cmp	r2, #1
 80a618a:	bf98      	it	ls
 80a618c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a618e:	b530      	push	{r4, r5, lr}
 80a6190:	b08b      	sub	sp, #44	; 0x2c
 80a6192:	460c      	mov	r4, r1
  *str = '\0';
 80a6194:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a6198:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a619a:	4625      	mov	r5, r4
 80a619c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a61a0:	fb04 5312 	mls	r3, r4, r2, r5
 80a61a4:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a61a6:	2b09      	cmp	r3, #9
 80a61a8:	bf94      	ite	ls
 80a61aa:	3330      	addls	r3, #48	; 0x30
 80a61ac:	3337      	addhi	r3, #55	; 0x37
 80a61ae:	b2db      	uxtb	r3, r3
  } while(n);
 80a61b0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a61b2:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a61b6:	d9f0      	bls.n	80a619a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a61b8:	f7ff ffce 	bl	80a6158 <_ZN5Print5writeEPKc>
}
 80a61bc:	b00b      	add	sp, #44	; 0x2c
 80a61be:	bd30      	pop	{r4, r5, pc}

080a61c0 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
 80a61c0:	b510      	push	{r4, lr}
  if (0 == max) {
 80a61c2:	4604      	mov	r4, r0
 80a61c4:	b128      	cbz	r0, 80a61d2 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
 80a61c6:	f006 f9af 	bl	80ac528 <rand>
 80a61ca:	fb90 f3f4 	sdiv	r3, r0, r4
 80a61ce:	fb03 0414 	mls	r4, r3, r4, r0
}
 80a61d2:	4620      	mov	r0, r4
 80a61d4:	bd10      	pop	{r4, pc}

080a61d6 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
 80a61d6:	4288      	cmp	r0, r1
{
 80a61d8:	b510      	push	{r4, lr}
 80a61da:	4604      	mov	r4, r0
  if (min >= max) {
 80a61dc:	da03      	bge.n	80a61e6 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
 80a61de:	1a08      	subs	r0, r1, r0
 80a61e0:	f7ff ffee 	bl	80a61c0 <_Z6randomi>
 80a61e4:	4404      	add	r4, r0
}
 80a61e6:	4620      	mov	r0, r4
 80a61e8:	bd10      	pop	{r4, pc}

080a61ea <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a61ea:	b510      	push	{r4, lr}
 80a61ec:	4604      	mov	r4, r0
 80a61ee:	f7ff fbbc 	bl	80a596a <_ZNSt14_Function_baseD1Ev>
 80a61f2:	4620      	mov	r0, r4
 80a61f4:	bd10      	pop	{r4, pc}
	...

080a61f8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a61f8:	2300      	movs	r3, #0
 80a61fa:	4803      	ldr	r0, [pc, #12]	; (80a6208 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a61fc:	4a03      	ldr	r2, [pc, #12]	; (80a620c <_GLOBAL__sub_I_RGB+0x14>)
 80a61fe:	4904      	ldr	r1, [pc, #16]	; (80a6210 <_GLOBAL__sub_I_RGB+0x18>)
 80a6200:	6083      	str	r3, [r0, #8]
 80a6202:	f001 bb5b 	b.w	80a78bc <__aeabi_atexit>
 80a6206:	bf00      	nop
 80a6208:	20001054 	.word	0x20001054
 80a620c:	2000006c 	.word	0x2000006c
 80a6210:	080a61eb 	.word	0x080a61eb

080a6214 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a6214:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a6216:	2600      	movs	r6, #0
 80a6218:	4604      	mov	r4, r0
 80a621a:	460d      	mov	r5, r1
 80a621c:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a6220:	f7ff f8a8 	bl	80a5374 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a6224:	4628      	mov	r0, r5
    _spi = spi;
 80a6226:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a6228:	f7ff f9be 	bl	80a55a8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a622c:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a622e:	6066      	str	r6, [r4, #4]
}
 80a6230:	bd70      	pop	{r4, r5, r6, pc}

080a6232 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a6232:	b510      	push	{r4, lr}
 80a6234:	4604      	mov	r4, r0
{
	free(buffer);
 80a6236:	6800      	ldr	r0, [r0, #0]
 80a6238:	f7ff fb3a 	bl	80a58b0 <free>
}
 80a623c:	4620      	mov	r0, r4
 80a623e:	bd10      	pop	{r4, pc}

080a6240 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a6240:	b510      	push	{r4, lr}
 80a6242:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a6244:	6800      	ldr	r0, [r0, #0]
 80a6246:	b108      	cbz	r0, 80a624c <_ZN6String10invalidateEv+0xc>
 80a6248:	f7ff fb32 	bl	80a58b0 <free>
	buffer = NULL;
 80a624c:	2300      	movs	r3, #0
	capacity = len = 0;
 80a624e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a6252:	6023      	str	r3, [r4, #0]
}
 80a6254:	bd10      	pop	{r4, pc}

080a6256 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a6256:	b538      	push	{r3, r4, r5, lr}
 80a6258:	4604      	mov	r4, r0
 80a625a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a625c:	6800      	ldr	r0, [r0, #0]
 80a625e:	3101      	adds	r1, #1
 80a6260:	f7ff fb2e 	bl	80a58c0 <realloc>
	if (newbuffer) {
 80a6264:	b110      	cbz	r0, 80a626c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a6266:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a626a:	2001      	movs	r0, #1
	}
	return 0;
}
 80a626c:	bd38      	pop	{r3, r4, r5, pc}

080a626e <_ZN6String7reserveEj>:
{
 80a626e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a6270:	6803      	ldr	r3, [r0, #0]
{
 80a6272:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a6274:	b123      	cbz	r3, 80a6280 <_ZN6String7reserveEj+0x12>
 80a6276:	6843      	ldr	r3, [r0, #4]
 80a6278:	428b      	cmp	r3, r1
 80a627a:	d301      	bcc.n	80a6280 <_ZN6String7reserveEj+0x12>
 80a627c:	2001      	movs	r0, #1
}
 80a627e:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a6280:	4620      	mov	r0, r4
 80a6282:	f7ff ffe8 	bl	80a6256 <_ZN6String12changeBufferEj>
 80a6286:	2800      	cmp	r0, #0
 80a6288:	d0f9      	beq.n	80a627e <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a628a:	68a3      	ldr	r3, [r4, #8]
 80a628c:	2b00      	cmp	r3, #0
 80a628e:	d1f5      	bne.n	80a627c <_ZN6String7reserveEj+0xe>
 80a6290:	6822      	ldr	r2, [r4, #0]
 80a6292:	7013      	strb	r3, [r2, #0]
 80a6294:	e7f2      	b.n	80a627c <_ZN6String7reserveEj+0xe>

080a6296 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a6296:	b570      	push	{r4, r5, r6, lr}
 80a6298:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a629a:	4611      	mov	r1, r2
{
 80a629c:	4604      	mov	r4, r0
 80a629e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a62a0:	f7ff ffe5 	bl	80a626e <_ZN6String7reserveEj>
 80a62a4:	b920      	cbnz	r0, 80a62b0 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a62a6:	4620      	mov	r0, r4
 80a62a8:	f7ff ffca 	bl	80a6240 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a62ac:	4620      	mov	r0, r4
 80a62ae:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a62b0:	462a      	mov	r2, r5
 80a62b2:	4631      	mov	r1, r6
 80a62b4:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a62b6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a62b8:	f006 f8e2 	bl	80ac480 <memcpy>
	buffer[len] = 0;
 80a62bc:	2100      	movs	r1, #0
 80a62be:	6822      	ldr	r2, [r4, #0]
 80a62c0:	68a3      	ldr	r3, [r4, #8]
 80a62c2:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a62c4:	e7f2      	b.n	80a62ac <_ZN6String4copyEPKcj+0x16>

080a62c6 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a62c6:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a62c8:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a62ca:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a62cc:	460d      	mov	r5, r1
	capacity = 0;
 80a62ce:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a62d2:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a62d4:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a62d6:	b139      	cbz	r1, 80a62e8 <_ZN6StringC1EPKc+0x22>
 80a62d8:	4608      	mov	r0, r1
 80a62da:	f006 f994 	bl	80ac606 <strlen>
 80a62de:	4629      	mov	r1, r5
 80a62e0:	4602      	mov	r2, r0
 80a62e2:	4620      	mov	r0, r4
 80a62e4:	f7ff ffd7 	bl	80a6296 <_ZN6String4copyEPKcj>
}
 80a62e8:	4620      	mov	r0, r4
 80a62ea:	bd38      	pop	{r3, r4, r5, pc}

080a62ec <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a62ec:	b538      	push	{r3, r4, r5, lr}
 80a62ee:	4605      	mov	r5, r0
	if (buffer) {
 80a62f0:	6800      	ldr	r0, [r0, #0]
{
 80a62f2:	460c      	mov	r4, r1
	if (buffer) {
 80a62f4:	b168      	cbz	r0, 80a6312 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a62f6:	686a      	ldr	r2, [r5, #4]
 80a62f8:	688b      	ldr	r3, [r1, #8]
 80a62fa:	429a      	cmp	r2, r3
 80a62fc:	d307      	bcc.n	80a630e <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a62fe:	6809      	ldr	r1, [r1, #0]
 80a6300:	f006 f95d 	bl	80ac5be <strcpy>
			len = rhs.len;
 80a6304:	68a3      	ldr	r3, [r4, #8]
 80a6306:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a6308:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a630a:	60a3      	str	r3, [r4, #8]
}
 80a630c:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a630e:	f7ff facf 	bl	80a58b0 <free>
	buffer = rhs.buffer;
 80a6312:	6823      	ldr	r3, [r4, #0]
 80a6314:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a6316:	6863      	ldr	r3, [r4, #4]
 80a6318:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a631a:	68a3      	ldr	r3, [r4, #8]
 80a631c:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a631e:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a6320:	e9c4 3300 	strd	r3, r3, [r4]
 80a6324:	e7f1      	b.n	80a630a <_ZN6String4moveERS_+0x1e>

080a6326 <_ZN6StringC1EOS_>:
	buffer = NULL;
 80a6326:	2300      	movs	r3, #0
String::String(String &&rval)
 80a6328:	b510      	push	{r4, lr}
 80a632a:	4604      	mov	r4, r0
	capacity = 0;
 80a632c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a6330:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a6332:	7303      	strb	r3, [r0, #12]
	move(rval);
 80a6334:	f7ff ffda 	bl	80a62ec <_ZN6String4moveERS_>
}
 80a6338:	4620      	mov	r0, r4
 80a633a:	bd10      	pop	{r4, pc}

080a633c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a633c:	4288      	cmp	r0, r1
{
 80a633e:	b510      	push	{r4, lr}
 80a6340:	460b      	mov	r3, r1
 80a6342:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a6344:	d004      	beq.n	80a6350 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a6346:	6809      	ldr	r1, [r1, #0]
 80a6348:	b121      	cbz	r1, 80a6354 <_ZN6StringaSERKS_+0x18>
 80a634a:	689a      	ldr	r2, [r3, #8]
 80a634c:	f7ff ffa3 	bl	80a6296 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a6350:	4620      	mov	r0, r4
 80a6352:	bd10      	pop	{r4, pc}
	else invalidate();
 80a6354:	f7ff ff74 	bl	80a6240 <_ZN6String10invalidateEv>
 80a6358:	e7fa      	b.n	80a6350 <_ZN6StringaSERKS_+0x14>

080a635a <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a635a:	2300      	movs	r3, #0
String::String(const String &value)
 80a635c:	b510      	push	{r4, lr}
 80a635e:	4604      	mov	r4, r0
	capacity = 0;
 80a6360:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a6364:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a6366:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a6368:	f7ff ffe8 	bl	80a633c <_ZN6StringaSERKS_>
}
 80a636c:	4620      	mov	r0, r4
 80a636e:	bd10      	pop	{r4, pc}

080a6370 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a6370:	4288      	cmp	r0, r1
{
 80a6372:	b510      	push	{r4, lr}
 80a6374:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a6376:	d001      	beq.n	80a637c <_ZN6StringaSEOS_+0xc>
 80a6378:	f7ff ffb8 	bl	80a62ec <_ZN6String4moveERS_>
	return *this;
}
 80a637c:	4620      	mov	r0, r4
 80a637e:	bd10      	pop	{r4, pc}

080a6380 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a6380:	b538      	push	{r3, r4, r5, lr}
 80a6382:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a6384:	460c      	mov	r4, r1
 80a6386:	b149      	cbz	r1, 80a639c <_ZN6StringaSEPKc+0x1c>
 80a6388:	4608      	mov	r0, r1
 80a638a:	f006 f93c 	bl	80ac606 <strlen>
 80a638e:	4621      	mov	r1, r4
 80a6390:	4602      	mov	r2, r0
 80a6392:	4628      	mov	r0, r5
 80a6394:	f7ff ff7f 	bl	80a6296 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a6398:	4628      	mov	r0, r5
 80a639a:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a639c:	f7ff ff50 	bl	80a6240 <_ZN6String10invalidateEv>
 80a63a0:	e7fa      	b.n	80a6398 <_ZN6StringaSEPKc+0x18>

080a63a2 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
 80a63a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a63a4:	4604      	mov	r4, r0
	buffer = NULL;
 80a63a6:	2300      	movs	r3, #0
String::String(unsigned char value, unsigned char base)
 80a63a8:	4608      	mov	r0, r1
	capacity = 0;
 80a63aa:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a63ae:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a63b0:	7323      	strb	r3, [r4, #12]
	utoa(value, buf, base);
 80a63b2:	a901      	add	r1, sp, #4
 80a63b4:	f001 f8ef 	bl	80a7596 <utoa>
	*this = buf;
 80a63b8:	4620      	mov	r0, r4
 80a63ba:	a901      	add	r1, sp, #4
 80a63bc:	f7ff ffe0 	bl	80a6380 <_ZN6StringaSEPKc>
}
 80a63c0:	4620      	mov	r0, r4
 80a63c2:	b004      	add	sp, #16
 80a63c4:	bd10      	pop	{r4, pc}

080a63c6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a63c6:	b570      	push	{r4, r5, r6, lr}
 80a63c8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a63ca:	460e      	mov	r6, r1
 80a63cc:	b909      	cbnz	r1, 80a63d2 <_ZN6String6concatEPKcj+0xc>
 80a63ce:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a63d0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a63d2:	b16a      	cbz	r2, 80a63f0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a63d4:	6884      	ldr	r4, [r0, #8]
 80a63d6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a63d8:	4621      	mov	r1, r4
 80a63da:	f7ff ff48 	bl	80a626e <_ZN6String7reserveEj>
 80a63de:	2800      	cmp	r0, #0
 80a63e0:	d0f5      	beq.n	80a63ce <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a63e2:	6828      	ldr	r0, [r5, #0]
 80a63e4:	68ab      	ldr	r3, [r5, #8]
 80a63e6:	4631      	mov	r1, r6
 80a63e8:	4418      	add	r0, r3
 80a63ea:	f006 f8e8 	bl	80ac5be <strcpy>
	len = newlen;
 80a63ee:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a63f0:	2001      	movs	r0, #1
 80a63f2:	e7ed      	b.n	80a63d0 <_ZN6String6concatEPKcj+0xa>

080a63f4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a63f4:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a63f6:	688a      	ldr	r2, [r1, #8]
 80a63f8:	6809      	ldr	r1, [r1, #0]
{
 80a63fa:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a63fc:	f7ff ffe3 	bl	80a63c6 <_ZN6String6concatEPKcj>
 80a6400:	b910      	cbnz	r0, 80a6408 <_ZplRK15StringSumHelperRK6String+0x14>
 80a6402:	4620      	mov	r0, r4
 80a6404:	f7ff ff1c 	bl	80a6240 <_ZN6String10invalidateEv>
	return a;
}
 80a6408:	4620      	mov	r0, r4
 80a640a:	bd10      	pop	{r4, pc}

080a640c <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a640c:	b538      	push	{r3, r4, r5, lr}
 80a640e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a6410:	460d      	mov	r5, r1
 80a6412:	b921      	cbnz	r1, 80a641e <_ZplRK15StringSumHelperPKc+0x12>
 80a6414:	4620      	mov	r0, r4
 80a6416:	f7ff ff13 	bl	80a6240 <_ZN6String10invalidateEv>
	return a;
}
 80a641a:	4620      	mov	r0, r4
 80a641c:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a641e:	4608      	mov	r0, r1
 80a6420:	f006 f8f1 	bl	80ac606 <strlen>
 80a6424:	4629      	mov	r1, r5
 80a6426:	4602      	mov	r2, r0
 80a6428:	4620      	mov	r0, r4
 80a642a:	f7ff ffcc 	bl	80a63c6 <_ZN6String6concatEPKcj>
 80a642e:	2800      	cmp	r0, #0
 80a6430:	d0f0      	beq.n	80a6414 <_ZplRK15StringSumHelperPKc+0x8>
 80a6432:	e7f2      	b.n	80a641a <_ZplRK15StringSumHelperPKc+0xe>

080a6434 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
 80a6434:	4602      	mov	r2, r0
	if (!buffer || !s.buffer) {
 80a6436:	6800      	ldr	r0, [r0, #0]
{
 80a6438:	460b      	mov	r3, r1
 80a643a:	6809      	ldr	r1, [r1, #0]
	if (!buffer || !s.buffer) {
 80a643c:	b158      	cbz	r0, 80a6456 <_ZNK6String9compareToERKS_+0x22>
 80a643e:	b941      	cbnz	r1, 80a6452 <_ZNK6String9compareToERKS_+0x1e>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
 80a6440:	6891      	ldr	r1, [r2, #8]
 80a6442:	b151      	cbz	r1, 80a645a <_ZNK6String9compareToERKS_+0x26>
 80a6444:	7800      	ldrb	r0, [r0, #0]
 80a6446:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 80a6448:	6898      	ldr	r0, [r3, #8]
 80a644a:	b138      	cbz	r0, 80a645c <_ZNK6String9compareToERKS_+0x28>
 80a644c:	7809      	ldrb	r1, [r1, #0]
 80a644e:	4248      	negs	r0, r1
 80a6450:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
 80a6452:	f006 b8aa 	b.w	80ac5aa <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 80a6456:	2900      	cmp	r1, #0
 80a6458:	d1f6      	bne.n	80a6448 <_ZNK6String9compareToERKS_+0x14>
		return 0;
 80a645a:	4608      	mov	r0, r1
}
 80a645c:	4770      	bx	lr

080a645e <_ZNK6StringltERKS_>:
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
}

unsigned char String::operator<(const String &rhs) const
{
 80a645e:	b508      	push	{r3, lr}
	return compareTo(rhs) < 0;
 80a6460:	f7ff ffe8 	bl	80a6434 <_ZNK6String9compareToERKS_>
}
 80a6464:	0fc0      	lsrs	r0, r0, #31
 80a6466:	bd08      	pop	{r3, pc}

080a6468 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 80a6468:	6883      	ldr	r3, [r0, #8]
 80a646a:	428b      	cmp	r3, r1
 80a646c:	d903      	bls.n	80a6476 <_ZNK6StringixEj+0xe>
 80a646e:	6800      	ldr	r0, [r0, #0]
 80a6470:	b110      	cbz	r0, 80a6478 <_ZNK6StringixEj+0x10>
	return buffer[index];
 80a6472:	5c40      	ldrb	r0, [r0, r1]
 80a6474:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
 80a6476:	2000      	movs	r0, #0
}
 80a6478:	4770      	bx	lr

080a647a <_ZNK6String6charAtEj>:
	return operator[](loc);
 80a647a:	f7ff bff5 	b.w	80a6468 <_ZNK6StringixEj>
	...

080a6480 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a6480:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a6482:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a6484:	b510      	push	{r4, lr}
 80a6486:	4b08      	ldr	r3, [pc, #32]	; (80a64a8 <_GLOBAL__sub_I_System+0x28>)
 80a6488:	4c08      	ldr	r4, [pc, #32]	; (80a64ac <_GLOBAL__sub_I_System+0x2c>)
 80a648a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a648c:	4b08      	ldr	r3, [pc, #32]	; (80a64b0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a648e:	6020      	str	r0, [r4, #0]
 80a6490:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a6492:	71a0      	strb	r0, [r4, #6]
 80a6494:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a6496:	f7ff f92f 	bl	80a56f8 <set_system_mode>
SystemClass System;
 80a649a:	4620      	mov	r0, r4
 80a649c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a64a0:	4a04      	ldr	r2, [pc, #16]	; (80a64b4 <_GLOBAL__sub_I_System+0x34>)
 80a64a2:	4905      	ldr	r1, [pc, #20]	; (80a64b8 <_GLOBAL__sub_I_System+0x38>)
 80a64a4:	f001 ba0a 	b.w	80a78bc <__aeabi_atexit>
 80a64a8:	20001070 	.word	0x20001070
 80a64ac:	20001064 	.word	0x20001064
 80a64b0:	ffff0000 	.word	0xffff0000
 80a64b4:	2000006c 	.word	0x2000006c
 80a64b8:	080a22af 	.word	0x080a22af

080a64bc <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a64bc:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a64be:	6803      	ldr	r3, [r0, #0]
{
 80a64c0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a64c4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a64c6:	2201      	movs	r2, #1
 80a64c8:	f247 5330 	movw	r3, #30000	; 0x7530
 80a64cc:	f10d 0107 	add.w	r1, sp, #7
 80a64d0:	47a0      	blx	r4
}
 80a64d2:	b002      	add	sp, #8
 80a64d4:	bd10      	pop	{r4, pc}

080a64d6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a64d6:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a64d8:	6803      	ldr	r3, [r0, #0]
 80a64da:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a64dc:	f247 5330 	movw	r3, #30000	; 0x7530
 80a64e0:	46a4      	mov	ip, r4
}
 80a64e2:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a64e4:	4760      	bx	ip

080a64e6 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a64e6:	b513      	push	{r0, r1, r4, lr}
 80a64e8:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a64ea:	6802      	ldr	r2, [r0, #0]
{
 80a64ec:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a64f0:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a64f2:	f10d 0107 	add.w	r1, sp, #7
 80a64f6:	2201      	movs	r2, #1
 80a64f8:	47a0      	blx	r4
}
 80a64fa:	b002      	add	sp, #8
 80a64fc:	bd10      	pop	{r4, pc}

080a64fe <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a64fe:	4770      	bx	lr

080a6500 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a6500:	4770      	bx	lr
	...

080a6504 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a6504:	b510      	push	{r4, lr}
 80a6506:	4604      	mov	r4, r0
	    ||
 80a6508:	4b06      	ldr	r3, [pc, #24]	; (80a6524 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a650a:	4608      	mov	r0, r1
	    ||
 80a650c:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a650e:	f104 040c 	add.w	r4, r4, #12
 80a6512:	d004      	beq.n	80a651e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a6514:	f001 faa8 	bl	80a7a68 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a6518:	2800      	cmp	r0, #0
	return nullptr;
 80a651a:	bf08      	it	eq
 80a651c:	2400      	moveq	r4, #0
      }
 80a651e:	4620      	mov	r0, r4
 80a6520:	bd10      	pop	{r4, pc}
 80a6522:	bf00      	nop
 80a6524:	080ad5ec 	.word	0x080ad5ec

080a6528 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a6528:	b510      	push	{r4, lr}
 80a652a:	4604      	mov	r4, r0
 80a652c:	21ac      	movs	r1, #172	; 0xac
 80a652e:	f001 f9ca 	bl	80a78c6 <_ZdlPvj>
 80a6532:	4620      	mov	r0, r4
 80a6534:	bd10      	pop	{r4, pc}

080a6536 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p);
 80a6536:	f7f9 bdb4 	b.w	80a00a2 <_ZdlPv>
	...

080a653c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a653c:	b538      	push	{r3, r4, r5, lr}
 80a653e:	4b0b      	ldr	r3, [pc, #44]	; (80a656c <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a6540:	6984      	ldr	r4, [r0, #24]
 80a6542:	4605      	mov	r5, r0
 80a6544:	6003      	str	r3, [r0, #0]
 80a6546:	b17c      	cbz	r4, 80a6568 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a6548:	6863      	ldr	r3, [r4, #4]
 80a654a:	3b01      	subs	r3, #1
 80a654c:	6063      	str	r3, [r4, #4]
 80a654e:	b95b      	cbnz	r3, 80a6568 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a6550:	6823      	ldr	r3, [r4, #0]
 80a6552:	4620      	mov	r0, r4
 80a6554:	689b      	ldr	r3, [r3, #8]
 80a6556:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a6558:	68a3      	ldr	r3, [r4, #8]
 80a655a:	3b01      	subs	r3, #1
 80a655c:	60a3      	str	r3, [r4, #8]
 80a655e:	b91b      	cbnz	r3, 80a6568 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a6560:	6823      	ldr	r3, [r4, #0]
 80a6562:	4620      	mov	r0, r4
 80a6564:	68db      	ldr	r3, [r3, #12]
 80a6566:	4798      	blx	r3
 80a6568:	4628      	mov	r0, r5
 80a656a:	bd38      	pop	{r3, r4, r5, pc}
 80a656c:	080ad5fc 	.word	0x080ad5fc

080a6570 <_ZN9TCPClientD0Ev>:
 80a6570:	b510      	push	{r4, lr}
 80a6572:	4604      	mov	r4, r0
 80a6574:	f7ff ffe2 	bl	80a653c <_ZN9TCPClientD1Ev>
 80a6578:	4620      	mov	r0, r4
 80a657a:	211c      	movs	r1, #28
 80a657c:	f001 f9a3 	bl	80a78c6 <_ZdlPvj>
 80a6580:	4620      	mov	r0, r4
 80a6582:	bd10      	pop	{r4, pc}

080a6584 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a6584:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 80a6586:	4604      	mov	r4, r0
 80a6588:	4606      	mov	r6, r0
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a658a:	694d      	ldr	r5, [r1, #20]
 80a658c:	4b04      	ldr	r3, [pc, #16]	; (80a65a0 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a658e:	358c      	adds	r5, #140	; 0x8c
 80a6590:	f844 3b04 	str.w	r3, [r4], #4
 80a6594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a6596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a6598:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a659a:	4630      	mov	r0, r6
 80a659c:	7023      	strb	r3, [r4, #0]
 80a659e:	bd70      	pop	{r4, r5, r6, pc}
 80a65a0:	080ad568 	.word	0x080ad568

080a65a4 <_ZN9TCPClient4peekEv>:
{
 80a65a4:	b510      	push	{r4, lr}
 80a65a6:	6943      	ldr	r3, [r0, #20]
 80a65a8:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a65aa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a65ae:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a65b2:	429a      	cmp	r2, r3
 80a65b4:	d005      	beq.n	80a65c2 <_ZN9TCPClient4peekEv+0x1e>
 80a65b6:	6963      	ldr	r3, [r4, #20]
 80a65b8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a65bc:	4413      	add	r3, r2
 80a65be:	7918      	ldrb	r0, [r3, #4]
}
 80a65c0:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a65c2:	6803      	ldr	r3, [r0, #0]
 80a65c4:	691b      	ldr	r3, [r3, #16]
 80a65c6:	4798      	blx	r3
 80a65c8:	2800      	cmp	r0, #0
 80a65ca:	d1f4      	bne.n	80a65b6 <_ZN9TCPClient4peekEv+0x12>
 80a65cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a65d0:	e7f6      	b.n	80a65c0 <_ZN9TCPClient4peekEv+0x1c>

080a65d2 <_ZN9TCPClient4readEv>:
{
 80a65d2:	b510      	push	{r4, lr}
 80a65d4:	6943      	ldr	r3, [r0, #20]
 80a65d6:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a65d8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a65dc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a65e0:	429a      	cmp	r2, r3
 80a65e2:	d008      	beq.n	80a65f6 <_ZN9TCPClient4readEv+0x24>
 80a65e4:	6963      	ldr	r3, [r4, #20]
 80a65e6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a65ea:	1c51      	adds	r1, r2, #1
 80a65ec:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a65f0:	4413      	add	r3, r2
 80a65f2:	7918      	ldrb	r0, [r3, #4]
}
 80a65f4:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a65f6:	6803      	ldr	r3, [r0, #0]
 80a65f8:	691b      	ldr	r3, [r3, #16]
 80a65fa:	4798      	blx	r3
 80a65fc:	2800      	cmp	r0, #0
 80a65fe:	d1f1      	bne.n	80a65e4 <_ZN9TCPClient4readEv+0x12>
 80a6600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a6604:	e7f6      	b.n	80a65f4 <_ZN9TCPClient4readEv+0x22>

080a6606 <_ZN9TCPClient4readEPhj>:
{
 80a6606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a6608:	6943      	ldr	r3, [r0, #20]
 80a660a:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a660c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a6610:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a6614:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a6616:	429a      	cmp	r2, r3
{
 80a6618:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a661a:	d016      	beq.n	80a664a <_ZN9TCPClient4readEPhj+0x44>
 80a661c:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a661e:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a6620:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a6624:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a6628:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a662a:	42bc      	cmp	r4, r7
 80a662c:	bf28      	it	cs
 80a662e:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a6630:	3304      	adds	r3, #4
 80a6632:	4622      	mov	r2, r4
 80a6634:	4419      	add	r1, r3
 80a6636:	f005 ff23 	bl	80ac480 <memcpy>
 80a663a:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a663c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a6640:	4423      	add	r3, r4
 80a6642:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a6646:	4620      	mov	r0, r4
 80a6648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a664a:	6803      	ldr	r3, [r0, #0]
 80a664c:	691b      	ldr	r3, [r3, #16]
 80a664e:	4798      	blx	r3
 80a6650:	2800      	cmp	r0, #0
 80a6652:	d1e3      	bne.n	80a661c <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a6654:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a6658:	e7f5      	b.n	80a6646 <_ZN9TCPClient4readEPhj+0x40>

080a665a <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a665a:	2300      	movs	r3, #0
 80a665c:	6942      	ldr	r2, [r0, #20]
 80a665e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a6662:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a6664:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a6668:	4770      	bx	lr
	...

080a666c <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a666c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a6670:	461f      	mov	r7, r3
    stop();
 80a6672:	6803      	ldr	r3, [r0, #0]
{
 80a6674:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a6676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a6678:	4605      	mov	r5, r0
 80a667a:	460c      	mov	r4, r1
 80a667c:	4616      	mov	r6, r2
    stop();
 80a667e:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a6680:	4638      	mov	r0, r7
 80a6682:	f7ff fd3d 	bl	80a6100 <_ZN5spark12NetworkClass4fromEm>
 80a6686:	6803      	ldr	r3, [r0, #0]
 80a6688:	68db      	ldr	r3, [r3, #12]
 80a668a:	4798      	blx	r3
 80a668c:	2800      	cmp	r0, #0
 80a668e:	d054      	beq.n	80a673a <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a6690:	4633      	mov	r3, r6
 80a6692:	2206      	movs	r2, #6
 80a6694:	2101      	movs	r1, #1
 80a6696:	2002      	movs	r0, #2
 80a6698:	9700      	str	r7, [sp, #0]
 80a669a:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a669e:	f7fe ff23 	bl	80a54e8 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a66a2:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a66a4:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a66a8:	f04f 0800 	mov.w	r8, #0
 80a66ac:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a66b0:	696b      	ldr	r3, [r5, #20]
 80a66b2:	2001      	movs	r0, #1
 80a66b4:	681b      	ldr	r3, [r3, #0]
 80a66b6:	4923      	ldr	r1, [pc, #140]	; (80a6744 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a66b8:	9301      	str	r3, [sp, #4]
 80a66ba:	4b23      	ldr	r3, [pc, #140]	; (80a6748 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a66bc:	aa02      	add	r2, sp, #8
 80a66be:	9300      	str	r3, [sp, #0]
 80a66c0:	4643      	mov	r3, r8
 80a66c2:	f7ff f809 	bl	80a56d8 <log_message>
          if (socket_handle_valid(d_->sock))
 80a66c6:	696b      	ldr	r3, [r5, #20]
 80a66c8:	6818      	ldr	r0, [r3, #0]
 80a66ca:	f7fe ff05 	bl	80a54d8 <socket_handle_valid>
 80a66ce:	2800      	cmp	r0, #0
 80a66d0:	d033      	beq.n	80a673a <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a66d2:	4628      	mov	r0, r5
 80a66d4:	f7ff ffc1 	bl	80a665a <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a66d8:	2302      	movs	r3, #2
 80a66da:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a66de:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a66e0:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a66e2:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a66e6:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a66e8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a66ec:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a66f0:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a66f2:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a66f6:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a66fa:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a66fe:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a6702:	f7fe ffd1 	bl	80a56a8 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a6706:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a6708:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a670a:	2210      	movs	r2, #16
 80a670c:	6818      	ldr	r0, [r3, #0]
 80a670e:	a902      	add	r1, sp, #8
 80a6710:	f7fe fef2 	bl	80a54f8 <socket_connect>
 80a6714:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a6716:	4630      	mov	r0, r6
 80a6718:	f7fe ffc6 	bl	80a56a8 <HAL_NET_SetNetWatchDog>
 80a671c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a671e:	696e      	ldr	r6, [r5, #20]
 80a6720:	368c      	adds	r6, #140	; 0x8c
 80a6722:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a6724:	6823      	ldr	r3, [r4, #0]
 80a6726:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a6728:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a672a:	f1b9 0f00 	cmp.w	r9, #0
 80a672e:	d007      	beq.n	80a6740 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a6730:	682b      	ldr	r3, [r5, #0]
 80a6732:	4628      	mov	r0, r5
 80a6734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a6736:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a6738:	4640      	mov	r0, r8
}
 80a673a:	b00b      	add	sp, #44	; 0x2c
 80a673c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a6740:	2001      	movs	r0, #1
        return connected;
 80a6742:	e7fa      	b.n	80a673a <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a6744:	080ad5b4 	.word	0x080ad5b4
 80a6748:	080ad5bb 	.word	0x080ad5bb

080a674c <_ZN9TCPClient9availableEv>:
{
 80a674c:	b538      	push	{r3, r4, r5, lr}
 80a674e:	6942      	ldr	r2, [r0, #20]
 80a6750:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a6752:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a6756:	b12b      	cbz	r3, 80a6764 <_ZN9TCPClient9availableEv+0x18>
 80a6758:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a675c:	429a      	cmp	r2, r3
 80a675e:	d101      	bne.n	80a6764 <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a6760:	f7ff ff7b 	bl	80a665a <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a6764:	6920      	ldr	r0, [r4, #16]
 80a6766:	f7ff fccb 	bl	80a6100 <_ZN5spark12NetworkClass4fromEm>
 80a676a:	6803      	ldr	r3, [r0, #0]
 80a676c:	68db      	ldr	r3, [r3, #12]
 80a676e:	4798      	blx	r3
 80a6770:	b1f8      	cbz	r0, 80a67b2 <_ZN9TCPClient9availableEv+0x66>
 80a6772:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a6774:	6818      	ldr	r0, [r3, #0]
 80a6776:	f7fe feaf 	bl	80a54d8 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a677a:	b1d0      	cbz	r0, 80a67b2 <_ZN9TCPClient9availableEv+0x66>
 80a677c:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a677e:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a6782:	297f      	cmp	r1, #127	; 0x7f
 80a6784:	d815      	bhi.n	80a67b2 <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a6786:	1d05      	adds	r5, r0, #4
 80a6788:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a678c:	2300      	movs	r3, #0
 80a678e:	6800      	ldr	r0, [r0, #0]
 80a6790:	4429      	add	r1, r5
 80a6792:	f7fe feb9 	bl	80a5508 <socket_receive>
            if (ret > 0)
 80a6796:	2800      	cmp	r0, #0
 80a6798:	dd0b      	ble.n	80a67b2 <_ZN9TCPClient9availableEv+0x66>
 80a679a:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a679c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a67a0:	b90a      	cbnz	r2, 80a67a6 <_ZN9TCPClient9availableEv+0x5a>
 80a67a2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a67a6:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a67a8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a67ac:	4410      	add	r0, r2
 80a67ae:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a67b2:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a67b4:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a67b8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a67bc:	1ac0      	subs	r0, r0, r3
 80a67be:	bd38      	pop	{r3, r4, r5, pc}

080a67c0 <_ZN9TCPClient4stopEv>:
{
 80a67c0:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a67c2:	6943      	ldr	r3, [r0, #20]
{
 80a67c4:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a67c6:	6818      	ldr	r0, [r3, #0]
 80a67c8:	f7fe fe86 	bl	80a54d8 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a67cc:	b118      	cbz	r0, 80a67d6 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a67ce:	6963      	ldr	r3, [r4, #20]
 80a67d0:	6818      	ldr	r0, [r3, #0]
 80a67d2:	f7fe fea9 	bl	80a5528 <socket_close>
 80a67d6:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a67d8:	f7fe febe 	bl	80a5558 <socket_handle_invalid>
 80a67dc:	6028      	str	r0, [r5, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
 80a67de:	6960      	ldr	r0, [r4, #20]
 80a67e0:	2211      	movs	r2, #17
 80a67e2:	2100      	movs	r1, #0
 80a67e4:	308c      	adds	r0, #140	; 0x8c
 80a67e6:	f005 fe73 	bl	80ac4d0 <memset>
  flush_buffer();
 80a67ea:	4620      	mov	r0, r4
}
 80a67ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a67f0:	f7ff bf33 	b.w	80a665a <_ZN9TCPClient12flush_bufferEv>

080a67f4 <_ZN9TCPClient6statusEv>:
{
 80a67f4:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a67f6:	6943      	ldr	r3, [r0, #20]
{
 80a67f8:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a67fa:	6818      	ldr	r0, [r3, #0]
 80a67fc:	f7fe fe6c 	bl	80a54d8 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a6800:	b908      	cbnz	r0, 80a6806 <_ZN9TCPClient6statusEv+0x12>
 80a6802:	2000      	movs	r0, #0
}
 80a6804:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a6806:	6920      	ldr	r0, [r4, #16]
 80a6808:	f7ff fc7a 	bl	80a6100 <_ZN5spark12NetworkClass4fromEm>
 80a680c:	6803      	ldr	r3, [r0, #0]
 80a680e:	68db      	ldr	r3, [r3, #12]
 80a6810:	4798      	blx	r3
 80a6812:	2800      	cmp	r0, #0
 80a6814:	d0f5      	beq.n	80a6802 <_ZN9TCPClient6statusEv+0xe>
 80a6816:	6963      	ldr	r3, [r4, #20]
 80a6818:	6818      	ldr	r0, [r3, #0]
 80a681a:	f7fe fe55 	bl	80a54c8 <socket_active_status>
 80a681e:	fab0 f080 	clz	r0, r0
 80a6822:	0940      	lsrs	r0, r0, #5
 80a6824:	e7ee      	b.n	80a6804 <_ZN9TCPClient6statusEv+0x10>

080a6826 <_ZN9TCPClientcvbEv>:
{
 80a6826:	b508      	push	{r3, lr}
   return (status()!=0);
 80a6828:	f7ff ffe4 	bl	80a67f4 <_ZN9TCPClient6statusEv>
}
 80a682c:	3800      	subs	r0, #0
 80a682e:	bf18      	it	ne
 80a6830:	2001      	movne	r0, #1
 80a6832:	bd08      	pop	{r3, pc}

080a6834 <_ZN9TCPClient5writeEPKhjm>:
{
 80a6834:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 80a6838:	2700      	movs	r7, #0
 80a683a:	6047      	str	r7, [r0, #4]
 80a683c:	4604      	mov	r4, r0
 80a683e:	460d      	mov	r5, r1
 80a6840:	4616      	mov	r6, r2
 80a6842:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a6844:	f7ff ffd6 	bl	80a67f4 <_ZN9TCPClient6statusEv>
 80a6848:	b170      	cbz	r0, 80a6868 <_ZN9TCPClient5writeEPKhjm+0x34>
 80a684a:	e9cd 8700 	strd	r8, r7, [sp]
 80a684e:	6960      	ldr	r0, [r4, #20]
 80a6850:	463b      	mov	r3, r7
 80a6852:	4632      	mov	r2, r6
 80a6854:	4629      	mov	r1, r5
 80a6856:	6800      	ldr	r0, [r0, #0]
 80a6858:	f7fe fe96 	bl	80a5588 <socket_send_ex>
    if (ret < 0) {
 80a685c:	2800      	cmp	r0, #0
 80a685e:	da00      	bge.n	80a6862 <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a6860:	6060      	str	r0, [r4, #4]
}
 80a6862:	b002      	add	sp, #8
 80a6864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a6868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a686c:	e7f8      	b.n	80a6860 <_ZN9TCPClient5writeEPKhjm+0x2c>

080a686e <_ZN9TCPClient9connectedEv>:
{
 80a686e:	b570      	push	{r4, r5, r6, lr}
 80a6870:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a6872:	f7ff ffbf 	bl	80a67f4 <_ZN9TCPClient6statusEv>
 80a6876:	b9e8      	cbnz	r0, 80a68b4 <_ZN9TCPClient9connectedEv+0x46>
 80a6878:	696b      	ldr	r3, [r5, #20]
 80a687a:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a687e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a6882:	4291      	cmp	r1, r2
 80a6884:	d116      	bne.n	80a68b4 <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a6886:	6818      	ldr	r0, [r3, #0]
 80a6888:	f7fe fe26 	bl	80a54d8 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a688c:	b908      	cbnz	r0, 80a6892 <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a688e:	2000      	movs	r0, #0
}
 80a6890:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a6892:	696b      	ldr	r3, [r5, #20]
 80a6894:	6818      	ldr	r0, [r3, #0]
 80a6896:	f7fe fe17 	bl	80a54c8 <socket_active_status>
 80a689a:	2801      	cmp	r0, #1
 80a689c:	4604      	mov	r4, r0
 80a689e:	d1f6      	bne.n	80a688e <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a68a0:	682b      	ldr	r3, [r5, #0]
 80a68a2:	4628      	mov	r0, r5
 80a68a4:	691b      	ldr	r3, [r3, #16]
 80a68a6:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a68a8:	b930      	cbnz	r0, 80a68b8 <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a68aa:	682b      	ldr	r3, [r5, #0]
 80a68ac:	4628      	mov	r0, r5
 80a68ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a68b0:	4798      	blx	r3
 80a68b2:	e7ec      	b.n	80a688e <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a68b4:	2001      	movs	r0, #1
 80a68b6:	e7eb      	b.n	80a6890 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a68b8:	4620      	mov	r0, r4
 80a68ba:	e7e9      	b.n	80a6890 <_ZN9TCPClient9connectedEv+0x22>

080a68bc <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a68bc:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a68be:	b510      	push	{r4, lr}
 80a68c0:	4604      	mov	r4, r0
          total(0) {
 80a68c2:	6001      	str	r1, [r0, #0]
 80a68c4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a68c8:	3088      	adds	r0, #136	; 0x88
 80a68ca:	f7ff fb5d 	bl	80a5f88 <_ZN9IPAddressC1Ev>
}
 80a68ce:	4620      	mov	r0, r4
 80a68d0:	bd10      	pop	{r4, pc}
	...

080a68d4 <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a68d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a68d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a68da:	2300      	movs	r3, #0
 80a68dc:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a68e0:	4a0d      	ldr	r2, [pc, #52]	; (80a6918 <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a68e2:	6103      	str	r3, [r0, #16]
 80a68e4:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a68e6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a68e8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a68ea:	20ac      	movs	r0, #172	; 0xac
 80a68ec:	460e      	mov	r6, r1
 80a68ee:	f7f9 fbd4 	bl	80a009a <_Znwj>
	  auto __pi = ::new (__mem)
 80a68f2:	1e05      	subs	r5, r0, #0
 80a68f4:	f105 070c 	add.w	r7, r5, #12
 80a68f8:	d008      	beq.n	80a690c <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a68fa:	2301      	movs	r3, #1
 80a68fc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a6900:	4b06      	ldr	r3, [pc, #24]	; (80a691c <_ZN9TCPClientC1Em+0x48>)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a6902:	4631      	mov	r1, r6
 80a6904:	4638      	mov	r0, r7
 80a6906:	602b      	str	r3, [r5, #0]
 80a6908:	f7ff ffd8 	bl	80a68bc <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a690c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a690e:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a6912:	f7ff fea2 	bl	80a665a <_ZN9TCPClient12flush_bufferEv>
}
 80a6916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a6918:	080ad5fc 	.word	0x080ad5fc
 80a691c:	080ad5d8 	.word	0x080ad5d8

080a6920 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a6920:	b510      	push	{r4, lr}
 80a6922:	4604      	mov	r4, r0
 80a6924:	f7fe fe18 	bl	80a5558 <socket_handle_invalid>
 80a6928:	4601      	mov	r1, r0
 80a692a:	4620      	mov	r0, r4
 80a692c:	f7ff ffd2 	bl	80a68d4 <_ZN9TCPClientC1Em>
}
 80a6930:	4620      	mov	r0, r4
 80a6932:	bd10      	pop	{r4, pc}

080a6934 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a6934:	b510      	push	{r4, lr}
 80a6936:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a6938:	6800      	ldr	r0, [r0, #0]
 80a693a:	f7fe fdcd 	bl	80a54d8 <socket_handle_valid>
 80a693e:	b110      	cbz	r0, 80a6946 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a6940:	6820      	ldr	r0, [r4, #0]
 80a6942:	f7fe fdf1 	bl	80a5528 <socket_close>
    }
}
 80a6946:	4620      	mov	r0, r4
 80a6948:	bd10      	pop	{r4, pc}

080a694a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80a694a:	300c      	adds	r0, #12
 80a694c:	f7ff bff2 	b.w	80a6934 <_ZN9TCPClient4DataD1Ev>

080a6950 <_ZN9TCPClient7connectEPKctm>:
{
 80a6950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a6954:	461f      	mov	r7, r3
    stop();
 80a6956:	6803      	ldr	r3, [r0, #0]
{
 80a6958:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a695c:	4606      	mov	r6, r0
 80a695e:	460d      	mov	r5, r1
 80a6960:	4690      	mov	r8, r2
    stop();
 80a6962:	4798      	blx	r3
    if (Network.ready())
 80a6964:	4813      	ldr	r0, [pc, #76]	; (80a69b4 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a6966:	f7ff fb76 	bl	80a6056 <_ZN5spark12NetworkClass5readyEv>
 80a696a:	b1f0      	cbz	r0, 80a69aa <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a696c:	a802      	add	r0, sp, #8
 80a696e:	f7ff fb0b 	bl	80a5f88 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a6972:	4628      	mov	r0, r5
 80a6974:	f005 fe47 	bl	80ac606 <strlen>
 80a6978:	2400      	movs	r4, #0
 80a697a:	b281      	uxth	r1, r0
 80a697c:	463b      	mov	r3, r7
 80a697e:	4628      	mov	r0, r5
 80a6980:	9400      	str	r4, [sp, #0]
 80a6982:	aa03      	add	r2, sp, #12
 80a6984:	f7fe fe98 	bl	80a56b8 <inet_gethostbyname>
 80a6988:	b990      	cbnz	r0, 80a69b0 <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a698a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a698c:	ad09      	add	r5, sp, #36	; 0x24
 80a698e:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a6992:	4b09      	ldr	r3, [pc, #36]	; (80a69b8 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a6994:	ac03      	add	r4, sp, #12
 80a6996:	9308      	str	r3, [sp, #32]
 80a6998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a699a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a699c:	6823      	ldr	r3, [r4, #0]
 80a699e:	4642      	mov	r2, r8
 80a69a0:	702b      	strb	r3, [r5, #0]
 80a69a2:	4630      	mov	r0, r6
 80a69a4:	463b      	mov	r3, r7
 80a69a6:	a908      	add	r1, sp, #32
 80a69a8:	47c8      	blx	r9
}
 80a69aa:	b00f      	add	sp, #60	; 0x3c
 80a69ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a69b0:	4620      	mov	r0, r4
 80a69b2:	e7fa      	b.n	80a69aa <_ZN9TCPClient7connectEPKctm+0x5a>
 80a69b4:	2000104c 	.word	0x2000104c
 80a69b8:	080ad568 	.word	0x080ad568

080a69bc <_ZN9TCPServer5writeEhm>:

    return _client;
}

size_t TCPServer::write(uint8_t b, system_tick_t timeout)
{
 80a69bc:	b513      	push	{r0, r1, r4, lr}
 80a69be:	4613      	mov	r3, r2
    return write(&b, sizeof(b), timeout);
 80a69c0:	6802      	ldr	r2, [r0, #0]
{
 80a69c2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, sizeof(b), timeout);
 80a69c6:	6994      	ldr	r4, [r2, #24]
 80a69c8:	f10d 0107 	add.w	r1, sp, #7
 80a69cc:	2201      	movs	r2, #1
 80a69ce:	47a0      	blx	r4
}
 80a69d0:	b002      	add	sp, #8
 80a69d2:	bd10      	pop	{r4, pc}

080a69d4 <_ZN9TCPServer5writeEh>:
    setWriteError(_client.getWriteError());
    return ret;
}

size_t TCPServer::write(uint8_t b)
{
 80a69d4:	b507      	push	{r0, r1, r2, lr}
    return write(&b, 1);
 80a69d6:	6803      	ldr	r3, [r0, #0]
{
 80a69d8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1);
 80a69dc:	2201      	movs	r2, #1
 80a69de:	68db      	ldr	r3, [r3, #12]
 80a69e0:	f10d 0107 	add.w	r1, sp, #7
 80a69e4:	4798      	blx	r3
}
 80a69e6:	b003      	add	sp, #12
 80a69e8:	f85d fb04 	ldr.w	pc, [sp], #4

080a69ec <_ZN9TCPServer5writeEPKhj>:

size_t TCPServer::write(const uint8_t *buffer, size_t size)
{
 80a69ec:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a69ee:	6803      	ldr	r3, [r0, #0]
 80a69f0:	699c      	ldr	r4, [r3, #24]
 80a69f2:	f247 5330 	movw	r3, #30000	; 0x7530
 80a69f6:	46a4      	mov	ip, r4
}
 80a69f8:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a69fa:	4760      	bx	ip

080a69fc <_ZN9TCPServer5writeEPKhjm>:
{
 80a69fc:	b510      	push	{r4, lr}
 80a69fe:	4604      	mov	r4, r0
 80a6a00:	2000      	movs	r0, #0
 80a6a02:	61a0      	str	r0, [r4, #24]
    size_t ret = _client.write(buf, size, timeout);
 80a6a04:	f104 0014 	add.w	r0, r4, #20
 80a6a08:	f7ff ff14 	bl	80a6834 <_ZN9TCPClient5writeEPKhjm>
 80a6a0c:	69a3      	ldr	r3, [r4, #24]
 80a6a0e:	6063      	str	r3, [r4, #4]
}
 80a6a10:	bd10      	pop	{r4, pc}

080a6a12 <_ZN15TCPServerClient8remoteIPEv>:
    virtual IPAddress remoteIP() override
 80a6a12:	b570      	push	{r4, r5, r6, lr}
        memset(&peer, 0, sizeof(peer));
 80a6a14:	2616      	movs	r6, #22
    virtual IPAddress remoteIP() override
 80a6a16:	460d      	mov	r5, r1
 80a6a18:	4604      	mov	r4, r0
 80a6a1a:	b086      	sub	sp, #24
        memset(&peer, 0, sizeof(peer));
 80a6a1c:	4632      	mov	r2, r6
 80a6a1e:	2100      	movs	r1, #0
 80a6a20:	4668      	mov	r0, sp
 80a6a22:	f005 fd55 	bl	80ac4d0 <memset>
    friend class TCPServer;

    using Print::write;

protected:
    inline sock_handle_t sock_handle() { return d_->sock; }
 80a6a26:	696b      	ldr	r3, [r5, #20]
        peer.size = sizeof(peer);
 80a6a28:	f8ad 6000 	strh.w	r6, [sp]
        socket_peer(sock_handle(), &peer, NULL);
 80a6a2c:	2200      	movs	r2, #0
 80a6a2e:	4669      	mov	r1, sp
 80a6a30:	6818      	ldr	r0, [r3, #0]
 80a6a32:	f7fe fda1 	bl	80a5578 <socket_peer>
        return peer.address;
 80a6a36:	4620      	mov	r0, r4
 80a6a38:	f10d 0102 	add.w	r1, sp, #2
 80a6a3c:	f7ff fab2 	bl	80a5fa4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a6a40:	4620      	mov	r0, r4
 80a6a42:	b006      	add	sp, #24
 80a6a44:	bd70      	pop	{r4, r5, r6, pc}

080a6a46 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a6a46:	b510      	push	{r4, lr}
 80a6a48:	4604      	mov	r4, r0
          _M_dispose();
 80a6a4a:	6803      	ldr	r3, [r0, #0]
 80a6a4c:	689b      	ldr	r3, [r3, #8]
 80a6a4e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a6a50:	68a3      	ldr	r3, [r4, #8]
 80a6a52:	3b01      	subs	r3, #1
 80a6a54:	60a3      	str	r3, [r4, #8]
 80a6a56:	b92b      	cbnz	r3, 80a6a64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80a6a58:	6823      	ldr	r3, [r4, #0]
 80a6a5a:	4620      	mov	r0, r4
    }
 80a6a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80a6a60:	68db      	ldr	r3, [r3, #12]
 80a6a62:	4718      	bx	r3
    }
 80a6a64:	bd10      	pop	{r4, pc}
	...

080a6a68 <_ZN9TCPServerC1Etm>:
TCPServer::TCPServer(uint16_t port, network_interface_t nif) : _port(port), _nif(nif), _sock(socket_handle_invalid()), _client(socket_handle_invalid())
 80a6a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Print() : write_error(0) {}
 80a6a6a:	2500      	movs	r5, #0
 80a6a6c:	4b14      	ldr	r3, [pc, #80]	; (80a6ac0 <_ZN9TCPServerC1Etm+0x58>)
 80a6a6e:	60c2      	str	r2, [r0, #12]
 80a6a70:	6003      	str	r3, [r0, #0]
 80a6a72:	8101      	strh	r1, [r0, #8]
 80a6a74:	6045      	str	r5, [r0, #4]
 80a6a76:	4604      	mov	r4, r0
 80a6a78:	f7fe fd6e 	bl	80a5558 <socket_handle_invalid>
 80a6a7c:	6120      	str	r0, [r4, #16]
 80a6a7e:	f7fe fd6b 	bl	80a5558 <socket_handle_invalid>
 80a6a82:	4601      	mov	r1, r0
 80a6a84:	f104 0014 	add.w	r0, r4, #20
 80a6a88:	f7ff ff24 	bl	80a68d4 <_ZN9TCPClientC1Em>
        os_thread_scheduling(false, NULL);
 80a6a8c:	4629      	mov	r1, r5
 80a6a8e:	4628      	mov	r0, r5
        if (!s_invalid_client) {
 80a6a90:	4d0c      	ldr	r5, [pc, #48]	; (80a6ac4 <_ZN9TCPServerC1Etm+0x5c>)
 80a6a92:	f7fe fc67 	bl	80a5364 <os_thread_scheduling>
 80a6a96:	682a      	ldr	r2, [r5, #0]
 80a6a98:	b95a      	cbnz	r2, 80a6ab2 <_ZN9TCPServerC1Etm+0x4a>
            s_invalid_client = new TCPClient(socket_handle_invalid());
 80a6a9a:	f7fe fd5d 	bl	80a5558 <socket_handle_invalid>
 80a6a9e:	4607      	mov	r7, r0
 80a6aa0:	201c      	movs	r0, #28
 80a6aa2:	f7f9 fafa 	bl	80a009a <_Znwj>
 80a6aa6:	4606      	mov	r6, r0
 80a6aa8:	b110      	cbz	r0, 80a6ab0 <_ZN9TCPServerC1Etm+0x48>
 80a6aaa:	4639      	mov	r1, r7
 80a6aac:	f7ff ff12 	bl	80a68d4 <_ZN9TCPClientC1Em>
 80a6ab0:	602e      	str	r6, [r5, #0]
        os_thread_scheduling(true, NULL);
 80a6ab2:	2100      	movs	r1, #0
 80a6ab4:	2001      	movs	r0, #1
 80a6ab6:	f7fe fc55 	bl	80a5364 <os_thread_scheduling>
}
 80a6aba:	4620      	mov	r0, r4
 80a6abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a6abe:	bf00      	nop
 80a6ac0:	080ad6bc 	.word	0x080ad6bc
 80a6ac4:	20001074 	.word	0x20001074

080a6ac8 <_ZN9TCPServer4stopEv>:
{
 80a6ac8:	b510      	push	{r4, lr}
 80a6aca:	4604      	mov	r4, r0
    _client.stop();
 80a6acc:	3014      	adds	r0, #20
 80a6ace:	f7ff fe77 	bl	80a67c0 <_ZN9TCPClient4stopEv>
    socket_close(_sock);
 80a6ad2:	6920      	ldr	r0, [r4, #16]
 80a6ad4:	f7fe fd28 	bl	80a5528 <socket_close>
    _sock = socket_handle_invalid();
 80a6ad8:	f7fe fd3e 	bl	80a5558 <socket_handle_invalid>
 80a6adc:	6120      	str	r0, [r4, #16]
}
 80a6ade:	bd10      	pop	{r4, pc}

080a6ae0 <_ZN9TCPServer5beginEv>:
{
 80a6ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a6ae2:	4604      	mov	r4, r0
    stop();
 80a6ae4:	f7ff fff0 	bl	80a6ac8 <_ZN9TCPServer4stopEv>
    if(!Network.from(_nif).ready())
 80a6ae8:	68e0      	ldr	r0, [r4, #12]
 80a6aea:	f7ff fb09 	bl	80a6100 <_ZN5spark12NetworkClass4fromEm>
 80a6aee:	6803      	ldr	r3, [r0, #0]
 80a6af0:	68db      	ldr	r3, [r3, #12]
 80a6af2:	4798      	blx	r3
 80a6af4:	4605      	mov	r5, r0
 80a6af6:	b168      	cbz	r0, 80a6b14 <_ZN9TCPServer5beginEv+0x34>
    if (socket_handle_valid(_sock)) {
 80a6af8:	6920      	ldr	r0, [r4, #16]
 80a6afa:	f7fe fced 	bl	80a54d8 <socket_handle_valid>
 80a6afe:	b948      	cbnz	r0, 80a6b14 <_ZN9TCPServer5beginEv+0x34>
    sock_result_t result = socket_create_tcp_server(_port, _nif);
 80a6b00:	68e1      	ldr	r1, [r4, #12]
 80a6b02:	8920      	ldrh	r0, [r4, #8]
 80a6b04:	f7fe fd18 	bl	80a5538 <socket_create_tcp_server>
 80a6b08:	4607      	mov	r7, r0
    if (socket_handle_valid(result)) {
 80a6b0a:	f7fe fce5 	bl	80a54d8 <socket_handle_valid>
 80a6b0e:	4606      	mov	r6, r0
 80a6b10:	b110      	cbz	r0, 80a6b18 <_ZN9TCPServer5beginEv+0x38>
        _sock = result;
 80a6b12:	6127      	str	r7, [r4, #16]
}
 80a6b14:	4628      	mov	r0, r5
 80a6b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    stop();
 80a6b18:	4620      	mov	r0, r4
 80a6b1a:	f7ff ffd5 	bl	80a6ac8 <_ZN9TCPServer4stopEv>
    return false;
 80a6b1e:	4635      	mov	r5, r6
 80a6b20:	e7f8      	b.n	80a6b14 <_ZN9TCPServer5beginEv+0x34>

080a6b22 <_ZN9TCPClientaSERKS_>:
class TCPClient : public Client {
 80a6b22:	b538      	push	{r3, r4, r5, lr}
class Stream : public Print
 80a6b24:	684b      	ldr	r3, [r1, #4]
 80a6b26:	4604      	mov	r4, r0
class Print
 80a6b28:	6043      	str	r3, [r0, #4]
 80a6b2a:	688b      	ldr	r3, [r1, #8]
 80a6b2c:	6083      	str	r3, [r0, #8]
 80a6b2e:	68cb      	ldr	r3, [r1, #12]
 80a6b30:	60c3      	str	r3, [r0, #12]
 80a6b32:	690b      	ldr	r3, [r1, #16]
 80a6b34:	6103      	str	r3, [r0, #16]
    class __shared_ptr
 80a6b36:	694b      	ldr	r3, [r1, #20]
 80a6b38:	6143      	str	r3, [r0, #20]
 80a6b3a:	698d      	ldr	r5, [r1, #24]
	if (__tmp != _M_pi)
 80a6b3c:	6983      	ldr	r3, [r0, #24]
 80a6b3e:	429d      	cmp	r5, r3
 80a6b40:	d00c      	beq.n	80a6b5c <_ZN9TCPClientaSERKS_+0x3a>
	    if (__tmp != 0)
 80a6b42:	b115      	cbz	r5, 80a6b4a <_ZN9TCPClientaSERKS_+0x28>
    { ++_M_use_count; }
 80a6b44:	686b      	ldr	r3, [r5, #4]
 80a6b46:	3301      	adds	r3, #1
 80a6b48:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 80a6b4a:	69a0      	ldr	r0, [r4, #24]
 80a6b4c:	b128      	cbz	r0, 80a6b5a <_ZN9TCPClientaSERKS_+0x38>
      if (--_M_use_count == 0)
 80a6b4e:	6843      	ldr	r3, [r0, #4]
 80a6b50:	3b01      	subs	r3, #1
 80a6b52:	6043      	str	r3, [r0, #4]
 80a6b54:	b90b      	cbnz	r3, 80a6b5a <_ZN9TCPClientaSERKS_+0x38>
 80a6b56:	f7ff ff76 	bl	80a6a46 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 80a6b5a:	61a5      	str	r5, [r4, #24]
 80a6b5c:	4620      	mov	r0, r4
 80a6b5e:	bd38      	pop	{r3, r4, r5, pc}

080a6b60 <_ZN9TCPClientC1ERKS_>:
 80a6b60:	684b      	ldr	r3, [r1, #4]
 80a6b62:	6043      	str	r3, [r0, #4]
 80a6b64:	4b09      	ldr	r3, [pc, #36]	; (80a6b8c <_ZN9TCPClientC1ERKS_+0x2c>)
 80a6b66:	6003      	str	r3, [r0, #0]
 80a6b68:	688b      	ldr	r3, [r1, #8]
 80a6b6a:	6083      	str	r3, [r0, #8]
 80a6b6c:	68cb      	ldr	r3, [r1, #12]
 80a6b6e:	60c3      	str	r3, [r0, #12]
 80a6b70:	690b      	ldr	r3, [r1, #16]
 80a6b72:	6103      	str	r3, [r0, #16]
 80a6b74:	4b06      	ldr	r3, [pc, #24]	; (80a6b90 <_ZN9TCPClientC1ERKS_+0x30>)
 80a6b76:	6003      	str	r3, [r0, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a6b78:	694b      	ldr	r3, [r1, #20]
 80a6b7a:	6143      	str	r3, [r0, #20]
      : _M_pi(__r._M_pi)
 80a6b7c:	698b      	ldr	r3, [r1, #24]
 80a6b7e:	6183      	str	r3, [r0, #24]
	if (_M_pi != 0)
 80a6b80:	b113      	cbz	r3, 80a6b88 <_ZN9TCPClientC1ERKS_+0x28>
    { ++_M_use_count; }
 80a6b82:	685a      	ldr	r2, [r3, #4]
 80a6b84:	3201      	adds	r2, #1
 80a6b86:	605a      	str	r2, [r3, #4]
 80a6b88:	4770      	bx	lr
 80a6b8a:	bf00      	nop
 80a6b8c:	080ad648 	.word	0x080ad648
 80a6b90:	080ad5fc 	.word	0x080ad5fc

080a6b94 <_ZN15TCPServerClientD1Ev>:
class TCPServerClient : public TCPClient
 80a6b94:	b510      	push	{r4, lr}
 80a6b96:	4604      	mov	r4, r0
    virtual ~TCPClient() {};
 80a6b98:	4b03      	ldr	r3, [pc, #12]	; (80a6ba8 <_ZN15TCPServerClientD1Ev+0x14>)
 80a6b9a:	f840 3b18 	str.w	r3, [r0], #24
      ~__shared_ptr() = default;
 80a6b9e:	f7fd f923 	bl	80a3de8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a6ba2:	4620      	mov	r0, r4
 80a6ba4:	bd10      	pop	{r4, pc}
 80a6ba6:	bf00      	nop
 80a6ba8:	080ad5fc 	.word	0x080ad5fc

080a6bac <_ZN15TCPServerClientD0Ev>:
 80a6bac:	b510      	push	{r4, lr}
 80a6bae:	4604      	mov	r4, r0
 80a6bb0:	f7ff fff0 	bl	80a6b94 <_ZN15TCPServerClientD1Ev>
 80a6bb4:	4620      	mov	r0, r4
 80a6bb6:	211c      	movs	r1, #28
 80a6bb8:	f000 fe85 	bl	80a78c6 <_ZdlPvj>
 80a6bbc:	4620      	mov	r0, r4
 80a6bbe:	bd10      	pop	{r4, pc}

080a6bc0 <_ZN9TCPServer9availableEv>:
{
 80a6bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a6bc2:	460c      	mov	r4, r1
 80a6bc4:	b08f      	sub	sp, #60	; 0x3c
 80a6bc6:	4606      	mov	r6, r0
    sock_handle_t SOCKET_INVALID = socket_handle_invalid();
 80a6bc8:	f7fe fcc6 	bl	80a5558 <socket_handle_invalid>
    if(_sock == SOCKET_INVALID)
 80a6bcc:	6923      	ldr	r3, [r4, #16]
    sock_handle_t SOCKET_INVALID = socket_handle_invalid();
 80a6bce:	4605      	mov	r5, r0
    if(_sock == SOCKET_INVALID)
 80a6bd0:	4283      	cmp	r3, r0
 80a6bd2:	d103      	bne.n	80a6bdc <_ZN9TCPServer9availableEv+0x1c>
        begin();
 80a6bd4:	6823      	ldr	r3, [r4, #0]
 80a6bd6:	4620      	mov	r0, r4
 80a6bd8:	691b      	ldr	r3, [r3, #16]
 80a6bda:	4798      	blx	r3
    if((!Network.from(_nif).ready()) || (_sock == SOCKET_INVALID))
 80a6bdc:	68e0      	ldr	r0, [r4, #12]
 80a6bde:	f7ff fa8f 	bl	80a6100 <_ZN5spark12NetworkClass4fromEm>
 80a6be2:	6803      	ldr	r3, [r0, #0]
 80a6be4:	f104 0714 	add.w	r7, r4, #20
 80a6be8:	68db      	ldr	r3, [r3, #12]
 80a6bea:	4798      	blx	r3
 80a6bec:	b308      	cbz	r0, 80a6c32 <_ZN9TCPServer9availableEv+0x72>
 80a6bee:	6920      	ldr	r0, [r4, #16]
 80a6bf0:	42a8      	cmp	r0, r5
 80a6bf2:	d01e      	beq.n	80a6c32 <_ZN9TCPServer9availableEv+0x72>
    int sock = socket_accept(_sock);
 80a6bf4:	f7fe fca8 	bl	80a5548 <socket_accept>
 80a6bf8:	4604      	mov	r4, r0
    if (!socket_handle_valid(sock))
 80a6bfa:	f7fe fc6d 	bl	80a54d8 <socket_handle_valid>
 80a6bfe:	b1d8      	cbz	r0, 80a6c38 <_ZN9TCPServer9availableEv+0x78>
    TCPServerClient(sock_handle_t sock) : TCPClient(sock) {}
 80a6c00:	4621      	mov	r1, r4
 80a6c02:	a807      	add	r0, sp, #28
 80a6c04:	f7ff fe66 	bl	80a68d4 <_ZN9TCPClientC1Em>
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a6c08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a6c0a:	4b11      	ldr	r3, [pc, #68]	; (80a6c50 <_ZN9TCPServer9availableEv+0x90>)
        client.d_->remoteIP = client.remoteIP();      // fetch the peer IP ready for the copy operator
 80a6c0c:	a907      	add	r1, sp, #28
 80a6c0e:	a801      	add	r0, sp, #4
 80a6c10:	ad02      	add	r5, sp, #8
 80a6c12:	348c      	adds	r4, #140	; 0x8c
    TCPServerClient(sock_handle_t sock) : TCPClient(sock) {}
 80a6c14:	9307      	str	r3, [sp, #28]
        client.d_->remoteIP = client.remoteIP();      // fetch the peer IP ready for the copy operator
 80a6c16:	f7ff fefc 	bl	80a6a12 <_ZN15TCPServerClient8remoteIPEv>
 80a6c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a6c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a6c1e:	682b      	ldr	r3, [r5, #0]
        _client = client;
 80a6c20:	4638      	mov	r0, r7
 80a6c22:	7023      	strb	r3, [r4, #0]
 80a6c24:	a907      	add	r1, sp, #28
 80a6c26:	f7ff ff7c 	bl	80a6b22 <_ZN9TCPClientaSERKS_>
        TCPServerClient client = TCPServerClient(sock);
 80a6c2a:	a807      	add	r0, sp, #28
 80a6c2c:	f7ff ffb2 	bl	80a6b94 <_ZN15TCPServerClientD1Ev>
 80a6c30:	e007      	b.n	80a6c42 <_ZN9TCPServer9availableEv+0x82>
        stop();
 80a6c32:	4620      	mov	r0, r4
 80a6c34:	f7ff ff48 	bl	80a6ac8 <_ZN9TCPServer4stopEv>
        _client = *s_invalid_client;
 80a6c38:	4b06      	ldr	r3, [pc, #24]	; (80a6c54 <_ZN9TCPServer9availableEv+0x94>)
 80a6c3a:	4638      	mov	r0, r7
 80a6c3c:	6819      	ldr	r1, [r3, #0]
 80a6c3e:	f7ff ff70 	bl	80a6b22 <_ZN9TCPClientaSERKS_>
    return _client;
 80a6c42:	4639      	mov	r1, r7
 80a6c44:	4630      	mov	r0, r6
 80a6c46:	f7ff ff8b 	bl	80a6b60 <_ZN9TCPClientC1ERKS_>
}
 80a6c4a:	4630      	mov	r0, r6
 80a6c4c:	b00f      	add	sp, #60	; 0x3c
 80a6c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a6c50:	080ad670 	.word	0x080ad670
 80a6c54:	20001074 	.word	0x20001074

080a6c58 <_ZN9TCPServerD1Ev>:
    sock_handle_t _sock;
    TCPClient _client;

public:
    TCPServer(uint16_t, network_interface_t nif=0);
    ~TCPServer() { stop(); }
 80a6c58:	b510      	push	{r4, lr}
 80a6c5a:	4604      	mov	r4, r0
 80a6c5c:	4b05      	ldr	r3, [pc, #20]	; (80a6c74 <_ZN9TCPServerD1Ev+0x1c>)
 80a6c5e:	6003      	str	r3, [r0, #0]
 80a6c60:	f7ff ff32 	bl	80a6ac8 <_ZN9TCPServer4stopEv>
 80a6c64:	4b04      	ldr	r3, [pc, #16]	; (80a6c78 <_ZN9TCPServerD1Ev+0x20>)
      ~__shared_ptr() = default;
 80a6c66:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a6c6a:	6163      	str	r3, [r4, #20]
 80a6c6c:	f7fd f8bc 	bl	80a3de8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a6c70:	4620      	mov	r0, r4
 80a6c72:	bd10      	pop	{r4, pc}
 80a6c74:	080ad6bc 	.word	0x080ad6bc
 80a6c78:	080ad5fc 	.word	0x080ad5fc

080a6c7c <_ZN9TCPServerD0Ev>:
 80a6c7c:	b510      	push	{r4, lr}
 80a6c7e:	4604      	mov	r4, r0
 80a6c80:	f7ff ffea 	bl	80a6c58 <_ZN9TCPServerD1Ev>
 80a6c84:	4620      	mov	r0, r4
 80a6c86:	2130      	movs	r1, #48	; 0x30
 80a6c88:	f000 fe1d 	bl	80a78c6 <_ZdlPvj>
 80a6c8c:	4620      	mov	r0, r4
 80a6c8e:	bd10      	pop	{r4, pc}

080a6c90 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 80a6c90:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a6c92:	2000      	movs	r0, #0
 80a6c94:	f7fe fd8c 	bl	80a57b0 <spark_sync_time_pending>
 80a6c98:	b128      	cbz	r0, 80a6ca6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a6c9a:	f7fe fd79 	bl	80a5790 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a6c9e:	f080 0001 	eor.w	r0, r0, #1
 80a6ca2:	b2c0      	uxtb	r0, r0
    }
 80a6ca4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a6ca6:	2001      	movs	r0, #1
 80a6ca8:	e7fc      	b.n	80a6ca4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

080a6caa <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a6caa:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a6cac:	2000      	movs	r0, #0
 80a6cae:	f7fe fb91 	bl	80a53d4 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a6cb2:	4604      	mov	r4, r0
 80a6cb4:	b9a0      	cbnz	r0, 80a6ce0 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a6cb6:	f7fe fd17 	bl	80a56e8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a6cba:	2801      	cmp	r0, #1
 80a6cbc:	d110      	bne.n	80a6ce0 <_ZN9TimeClass7isValidEv+0x36>
 80a6cbe:	4620      	mov	r0, r4
 80a6cc0:	f7fe fd3a 	bl	80a5738 <system_thread_get_state>
 80a6cc4:	b960      	cbnz	r0, 80a6ce0 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a6cc6:	f7ff ffe3 	bl	80a6c90 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a6cca:	b910      	cbnz	r0, 80a6cd2 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a6ccc:	f7fe fd58 	bl	80a5780 <spark_process>
        while (_while() && !_condition()) {
 80a6cd0:	e7f9      	b.n	80a6cc6 <_ZN9TimeClass7isValidEv+0x1c>
 80a6cd2:	f7ff ffdd 	bl	80a6c90 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a6cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a6cda:	2000      	movs	r0, #0
 80a6cdc:	f7fe bb7a 	b.w	80a53d4 <hal_rtc_time_is_valid>
}
 80a6ce0:	4620      	mov	r0, r4
 80a6ce2:	bd10      	pop	{r4, pc}

080a6ce4 <_ZN9TimeClass3nowEv>:
{
 80a6ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a6ce6:	f7ff ffe0 	bl	80a6caa <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a6cea:	2210      	movs	r2, #16
 80a6cec:	2100      	movs	r1, #0
 80a6cee:	4668      	mov	r0, sp
 80a6cf0:	f005 fbee 	bl	80ac4d0 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a6cf4:	2100      	movs	r1, #0
 80a6cf6:	4668      	mov	r0, sp
 80a6cf8:	f7fe fb74 	bl	80a53e4 <hal_rtc_get_time>
}
 80a6cfc:	9800      	ldr	r0, [sp, #0]
 80a6cfe:	b005      	add	sp, #20
 80a6d00:	f85d fb04 	ldr.w	pc, [sp], #4

080a6d04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a6d04:	4b02      	ldr	r3, [pc, #8]	; (80a6d10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a6d06:	681a      	ldr	r2, [r3, #0]
 80a6d08:	4b02      	ldr	r3, [pc, #8]	; (80a6d14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a6d0a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a6d0c:	4770      	bx	lr
 80a6d0e:	bf00      	nop
 80a6d10:	20000000 	.word	0x20000000
 80a6d14:	20001078 	.word	0x20001078

080a6d18 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a6d18:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a6d1a:	6804      	ldr	r4, [r0, #0]
 80a6d1c:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a6d1e:	46a4      	mov	ip, r4
    }
 80a6d20:	bc10      	pop	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a6d22:	4760      	bx	ip

080a6d24 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a6d24:	6803      	ldr	r3, [r0, #0]
 80a6d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a6d28:	4718      	bx	r3

080a6d2a <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a6d2a:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a6d2c:	4770      	bx	lr

080a6d2e <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a6d2e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a6d30:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a6d32:	1a10      	subs	r0, r2, r0
 80a6d34:	4770      	bx	lr

080a6d36 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a6d36:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
 80a6d38:	6803      	ldr	r3, [r0, #0]
{
 80a6d3a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
 80a6d3e:	2201      	movs	r2, #1
 80a6d40:	68db      	ldr	r3, [r3, #12]
 80a6d42:	f10d 0107 	add.w	r1, sp, #7
 80a6d46:	4798      	blx	r3
}
 80a6d48:	b003      	add	sp, #12
 80a6d4a:	f85d fb04 	ldr.w	pc, [sp], #4

080a6d4e <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a6d4e:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a6d50:	6803      	ldr	r3, [r0, #0]
{
 80a6d52:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a6d54:	691b      	ldr	r3, [r3, #16]
 80a6d56:	4798      	blx	r3
 80a6d58:	b128      	cbz	r0, 80a6d66 <_ZN3UDP4readEv+0x18>
 80a6d5a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a6d5c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a6d5e:	1c59      	adds	r1, r3, #1
 80a6d60:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a6d62:	5cd0      	ldrb	r0, [r2, r3]
}
 80a6d64:	bd10      	pop	{r4, pc}
  return available() ? _buffer[_offset++] : -1;
 80a6d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a6d6a:	e7fb      	b.n	80a6d64 <_ZN3UDP4readEv+0x16>

080a6d6c <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a6d6c:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a6d6e:	6803      	ldr	r3, [r0, #0]
{
 80a6d70:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a6d72:	691b      	ldr	r3, [r3, #16]
 80a6d74:	4798      	blx	r3
 80a6d76:	b118      	cbz	r0, 80a6d80 <_ZN3UDP4peekEv+0x14>
 80a6d78:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a6d7a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a6d7c:	5cd0      	ldrb	r0, [r2, r3]
}
 80a6d7e:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
 80a6d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a6d84:	e7fb      	b.n	80a6d7e <_ZN3UDP4peekEv+0x12>

080a6d86 <_ZN3UDP5flushEv>:

void UDP::flush()
{
}
 80a6d86:	4770      	bx	lr

080a6d88 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a6d88:	4603      	mov	r3, r0
 80a6d8a:	4608      	mov	r0, r1
 80a6d8c:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a6d8e:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a6d90:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
 80a6d92:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer+_offset, size);
 80a6d94:	6803      	ldr	r3, [r0, #0]
 80a6d96:	1a52      	subs	r2, r2, r1
 80a6d98:	68db      	ldr	r3, [r3, #12]
 80a6d9a:	4421      	add	r1, r4
}
 80a6d9c:	bc10      	pop	{r4}
    return p.write(_buffer+_offset, size);
 80a6d9e:	4718      	bx	r3

080a6da0 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a6da0:	f1a0 0010 	sub.w	r0, r0, #16
 80a6da4:	f7ff bff0 	b.w	80a6d88 <_ZNK3UDP7printToER5Print>

080a6da8 <_ZN3UDP5beginEtm>:
{
 80a6da8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a6dac:	4616      	mov	r6, r2
    stop();
 80a6dae:	6803      	ldr	r3, [r0, #0]
{
 80a6db0:	4688      	mov	r8, r1
    stop();
 80a6db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 80a6db4:	4604      	mov	r4, r0
    stop();
 80a6db6:	4798      	blx	r3
    if(Network.from(nif).ready())
 80a6db8:	4630      	mov	r0, r6
 80a6dba:	f7ff f9a1 	bl	80a6100 <_ZN5spark12NetworkClass4fromEm>
 80a6dbe:	6803      	ldr	r3, [r0, #0]
 80a6dc0:	68db      	ldr	r3, [r3, #12]
 80a6dc2:	4798      	blx	r3
 80a6dc4:	4605      	mov	r5, r0
 80a6dc6:	b188      	cbz	r0, 80a6dec <_ZN3UDP5beginEtm+0x44>
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a6dc8:	2102      	movs	r1, #2
 80a6dca:	4643      	mov	r3, r8
 80a6dcc:	2211      	movs	r2, #17
 80a6dce:	4608      	mov	r0, r1
 80a6dd0:	9600      	str	r6, [sp, #0]
 80a6dd2:	f7fe fb89 	bl	80a54e8 <socket_create>
 80a6dd6:	6160      	str	r0, [r4, #20]
        if (socket_handle_valid(_sock))
 80a6dd8:	f7fe fb7e 	bl	80a54d8 <socket_handle_valid>
 80a6ddc:	4607      	mov	r7, r0
 80a6dde:	b148      	cbz	r0, 80a6df4 <_ZN3UDP5beginEtm+0x4c>
  _offset = 0;
 80a6de0:	2300      	movs	r3, #0
            _port = port;
 80a6de2:	f8a4 8018 	strh.w	r8, [r4, #24]
  _offset = 0;
 80a6de6:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a6de8:	8723      	strh	r3, [r4, #56]	; 0x38
            _nif = nif;
 80a6dea:	6466      	str	r6, [r4, #68]	; 0x44
}
 80a6dec:	4628      	mov	r0, r5
 80a6dee:	b002      	add	sp, #8
 80a6df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            stop();
 80a6df4:	6823      	ldr	r3, [r4, #0]
 80a6df6:	4620      	mov	r0, r4
 80a6df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a6dfa:	4798      	blx	r3
            bound = false;
 80a6dfc:	463d      	mov	r5, r7
 80a6dfe:	e7f5      	b.n	80a6dec <_ZN3UDP5beginEtm+0x44>

080a6e00 <_ZN3UDP4stopEv>:
{
 80a6e00:	b538      	push	{r3, r4, r5, lr}
 80a6e02:	4604      	mov	r4, r0
    if (isOpen(_sock))
 80a6e04:	6945      	ldr	r5, [r0, #20]
   return sd != socket_handle_invalid();
 80a6e06:	f7fe fba7 	bl	80a5558 <socket_handle_invalid>
    if (isOpen(_sock))
 80a6e0a:	4285      	cmp	r5, r0
 80a6e0c:	d002      	beq.n	80a6e14 <_ZN3UDP4stopEv+0x14>
        socket_close(_sock);
 80a6e0e:	6960      	ldr	r0, [r4, #20]
 80a6e10:	f7fe fb8a 	bl	80a5528 <socket_close>
    _sock = socket_handle_invalid();
 80a6e14:	f7fe fba0 	bl	80a5558 <socket_handle_invalid>
  _offset = 0;
 80a6e18:	2300      	movs	r3, #0
    _sock = socket_handle_invalid();
 80a6e1a:	6160      	str	r0, [r4, #20]
  _offset = 0;
 80a6e1c:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a6e1e:	8723      	strh	r3, [r4, #56]	; 0x38
}
 80a6e20:	bd38      	pop	{r3, r4, r5, pc}

080a6e22 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
{
 80a6e22:	b510      	push	{r4, lr}
    remoteSockAddr.sa_family = AF_INET;
 80a6e24:	2402      	movs	r4, #2
{
 80a6e26:	b086      	sub	sp, #24
    remoteSockAddr.sa_family = AF_INET;
 80a6e28:	f8ad 4008 	strh.w	r4, [sp, #8]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a6e2c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80a6e30:	ba64      	rev16	r4, r4
 80a6e32:	f8ad 400a 	strh.w	r4, [sp, #10]
    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a6e36:	79dc      	ldrb	r4, [r3, #7]
 80a6e38:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a6e3c:	799c      	ldrb	r4, [r3, #6]
 80a6e3e:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a6e42:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a6e44:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a6e46:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a6e4a:	f88d 300f 	strb.w	r3, [sp, #15]
    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a6e4e:	2310      	movs	r3, #16
 80a6e50:	9301      	str	r3, [sp, #4]
 80a6e52:	ab02      	add	r3, sp, #8
 80a6e54:	9300      	str	r3, [sp, #0]
 80a6e56:	6940      	ldr	r0, [r0, #20]
 80a6e58:	2300      	movs	r3, #0
 80a6e5a:	f7fe fb5d 	bl	80a5518 <socket_sendto>
}
 80a6e5e:	b006      	add	sp, #24
 80a6e60:	bd10      	pop	{r4, pc}

080a6e62 <_ZN3UDP5writeEPKhj>:
{
 80a6e62:	b570      	push	{r4, r5, r6, lr}
 80a6e64:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a6e66:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a6e68:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80a6e6a:	b168      	cbz	r0, 80a6e88 <_ZN3UDP5writeEPKhj+0x26>
 80a6e6c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80a6e6e:	1b9c      	subs	r4, r3, r6
    if (size>available)
 80a6e70:	4294      	cmp	r4, r2
 80a6e72:	bf28      	it	cs
 80a6e74:	4614      	movcs	r4, r2
    memcpy(_buffer+_offset, buffer, size);
 80a6e76:	4430      	add	r0, r6
 80a6e78:	4622      	mov	r2, r4
 80a6e7a:	f005 fb01 	bl	80ac480 <memcpy>
    _offset += size;
 80a6e7e:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
}
 80a6e80:	4620      	mov	r0, r4
    _offset += size;
 80a6e82:	4423      	add	r3, r4
 80a6e84:	86eb      	strh	r3, [r5, #54]	; 0x36
}
 80a6e86:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a6e88:	4604      	mov	r4, r0
 80a6e8a:	e7f1      	b.n	80a6e70 <_ZN3UDP5writeEPKhj+0xe>

080a6e8c <_ZN3UDP4readEPhj>:
{
 80a6e8c:	b570      	push	{r4, r5, r6, lr}
    if (available())
 80a6e8e:	6803      	ldr	r3, [r0, #0]
{
 80a6e90:	4604      	mov	r4, r0
    if (available())
 80a6e92:	691b      	ldr	r3, [r3, #16]
{
 80a6e94:	460e      	mov	r6, r1
 80a6e96:	4615      	mov	r5, r2
    if (available())
 80a6e98:	4798      	blx	r3
 80a6e9a:	b190      	cbz	r0, 80a6ec2 <_ZN3UDP4readEPhj+0x36>
    read = min(int(len), available());
 80a6e9c:	6823      	ldr	r3, [r4, #0]
 80a6e9e:	4620      	mov	r0, r4
 80a6ea0:	691b      	ldr	r3, [r3, #16]
 80a6ea2:	4798      	blx	r3
 80a6ea4:	4285      	cmp	r5, r0
 80a6ea6:	bfa8      	it	ge
 80a6ea8:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a6eaa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a6eac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a6eae:	462a      	mov	r2, r5
 80a6eb0:	4419      	add	r1, r3
 80a6eb2:	4630      	mov	r0, r6
 80a6eb4:	f005 fae4 	bl	80ac480 <memcpy>
      _offset += read;
 80a6eb8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a6eba:	442b      	add	r3, r5
 80a6ebc:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 80a6ebe:	4628      	mov	r0, r5
 80a6ec0:	bd70      	pop	{r4, r5, r6, pc}
    int read = -1;
 80a6ec2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    return read;
 80a6ec6:	e7fa      	b.n	80a6ebe <_ZN3UDP4readEPhj+0x32>

080a6ec8 <_ZN3UDP13receivePacketEPhjm>:
{
 80a6ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6ecc:	4604      	mov	r4, r0
 80a6ece:	b090      	sub	sp, #64	; 0x40
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a6ed0:	6c40      	ldr	r0, [r0, #68]	; 0x44
{
 80a6ed2:	461f      	mov	r7, r3
 80a6ed4:	460d      	mov	r5, r1
 80a6ed6:	4616      	mov	r6, r2
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a6ed8:	f7ff f912 	bl	80a6100 <_ZN5spark12NetworkClass4fromEm>
 80a6edc:	6803      	ldr	r3, [r0, #0]
 80a6ede:	68db      	ldr	r3, [r3, #12]
 80a6ee0:	4798      	blx	r3
 80a6ee2:	b928      	cbnz	r0, 80a6ef0 <_ZN3UDP13receivePacketEPhjm+0x28>
    int ret = -1;
 80a6ee4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
}
 80a6ee8:	4630      	mov	r0, r6
 80a6eea:	b010      	add	sp, #64	; 0x40
 80a6eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a6ef0:	f8d4 8014 	ldr.w	r8, [r4, #20]
   return sd != socket_handle_invalid();
 80a6ef4:	f7fe fb30 	bl	80a5558 <socket_handle_invalid>
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a6ef8:	4580      	cmp	r8, r0
 80a6efa:	d0f3      	beq.n	80a6ee4 <_ZN3UDP13receivePacketEPhjm+0x1c>
 80a6efc:	2d00      	cmp	r5, #0
 80a6efe:	d0f1      	beq.n	80a6ee4 <_ZN3UDP13receivePacketEPhjm+0x1c>
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a6f00:	2310      	movs	r3, #16
 80a6f02:	9305      	str	r3, [sp, #20]
        ret = socket_receivefrom_ex(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen, timeout, nullptr);
 80a6f04:	2300      	movs	r3, #0
 80a6f06:	aa05      	add	r2, sp, #20
 80a6f08:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80a6f0c:	9201      	str	r2, [sp, #4]
 80a6f0e:	aa06      	add	r2, sp, #24
 80a6f10:	9200      	str	r2, [sp, #0]
 80a6f12:	4629      	mov	r1, r5
 80a6f14:	4632      	mov	r2, r6
 80a6f16:	6960      	ldr	r0, [r4, #20]
 80a6f18:	f7fe fb3e 	bl	80a5598 <socket_receivefrom_ex>
        if (ret >= 0)
 80a6f1c:	1e06      	subs	r6, r0, #0
 80a6f1e:	dbe3      	blt.n	80a6ee8 <_ZN3UDP13receivePacketEPhjm+0x20>
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a6f20:	f89d 201a 	ldrb.w	r2, [sp, #26]
 80a6f24:	f89d 301b 	ldrb.w	r3, [sp, #27]
        return *this = IPAddress(address);
 80a6f28:	a907      	add	r1, sp, #28
 80a6f2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a6f2e:	86a3      	strh	r3, [r4, #52]	; 0x34
 80a6f30:	a80a      	add	r0, sp, #40	; 0x28
class IPAddress : public Printable {
 80a6f32:	3420      	adds	r4, #32
 80a6f34:	ad0b      	add	r5, sp, #44	; 0x2c
        return *this = IPAddress(address);
 80a6f36:	f7ff f869 	bl	80a600c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 80a6f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a6f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a6f3e:	682b      	ldr	r3, [r5, #0]
 80a6f40:	7023      	strb	r3, [r4, #0]
    return ret;
 80a6f42:	e7d1      	b.n	80a6ee8 <_ZN3UDP13receivePacketEPhjm+0x20>

080a6f44 <_ZN3UDP11beginPacketEPKct>:
{
 80a6f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6f48:	4606      	mov	r6, r0
 80a6f4a:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a6f4c:	6c40      	ldr	r0, [r0, #68]	; 0x44
{
 80a6f4e:	460d      	mov	r5, r1
 80a6f50:	4617      	mov	r7, r2
    if(Network.from(_nif).ready())
 80a6f52:	f7ff f8d5 	bl	80a6100 <_ZN5spark12NetworkClass4fromEm>
 80a6f56:	6803      	ldr	r3, [r0, #0]
 80a6f58:	68db      	ldr	r3, [r3, #12]
 80a6f5a:	4798      	blx	r3
 80a6f5c:	b1f0      	cbz	r0, 80a6f9c <_ZN3UDP11beginPacketEPKct+0x58>
        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a6f5e:	4628      	mov	r0, r5
 80a6f60:	f005 fb51 	bl	80ac606 <strlen>
 80a6f64:	2400      	movs	r4, #0
 80a6f66:	b281      	uxth	r1, r0
 80a6f68:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a6f6a:	4628      	mov	r0, r5
 80a6f6c:	9400      	str	r4, [sp, #0]
 80a6f6e:	aa03      	add	r2, sp, #12
 80a6f70:	f7fe fba2 	bl	80a56b8 <inet_gethostbyname>
 80a6f74:	b9a8      	cbnz	r0, 80a6fa2 <_ZN3UDP11beginPacketEPKct+0x5e>
            IPAddress remote_addr(ip_addr);
 80a6f76:	a903      	add	r1, sp, #12
 80a6f78:	a808      	add	r0, sp, #32
 80a6f7a:	f7ff f813 	bl	80a5fa4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a6f7e:	6833      	ldr	r3, [r6, #0]
 80a6f80:	ac0f      	add	r4, sp, #60	; 0x3c
 80a6f82:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
 80a6f86:	4b08      	ldr	r3, [pc, #32]	; (80a6fa8 <_ZN3UDP11beginPacketEPKct+0x64>)
 80a6f88:	ad09      	add	r5, sp, #36	; 0x24
 80a6f8a:	930e      	str	r3, [sp, #56]	; 0x38
 80a6f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a6f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a6f90:	682b      	ldr	r3, [r5, #0]
 80a6f92:	463a      	mov	r2, r7
 80a6f94:	4630      	mov	r0, r6
 80a6f96:	7023      	strb	r3, [r4, #0]
 80a6f98:	a90e      	add	r1, sp, #56	; 0x38
 80a6f9a:	47c0      	blx	r8
}
 80a6f9c:	b014      	add	sp, #80	; 0x50
 80a6f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 0;
 80a6fa2:	4620      	mov	r0, r4
 80a6fa4:	e7fa      	b.n	80a6f9c <_ZN3UDP11beginPacketEPKct+0x58>
 80a6fa6:	bf00      	nop
 80a6fa8:	080ad568 	.word	0x080ad568

080a6fac <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
 80a6fac:	b570      	push	{r4, r5, r6, lr}
 80a6fae:	4604      	mov	r4, r0
 80a6fb0:	4606      	mov	r6, r0
 80a6fb2:	4b05      	ldr	r3, [pc, #20]	; (80a6fc8 <_ZN3UDP8remoteIPEv+0x1c>)
 80a6fb4:	f101 0520 	add.w	r5, r1, #32
 80a6fb8:	f844 3b04 	str.w	r3, [r4], #4
 80a6fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a6fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a6fc0:	682b      	ldr	r3, [r5, #0]
 80a6fc2:	4630      	mov	r0, r6
 80a6fc4:	7023      	strb	r3, [r4, #0]
 80a6fc6:	bd70      	pop	{r4, r5, r6, pc}
 80a6fc8:	080ad568 	.word	0x080ad568

080a6fcc <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a6fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a6fce:	468c      	mov	ip, r1
 80a6fd0:	4696      	mov	lr, r2
 80a6fd2:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a6fd4:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a6fd6:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a6fd8:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a6fda:	4a09      	ldr	r2, [pc, #36]	; (80a7000 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a6fdc:	ad03      	add	r5, sp, #12
 80a6fde:	1d1c      	adds	r4, r3, #4
 80a6fe0:	9202      	str	r2, [sp, #8]
 80a6fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a6fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a6fe6:	6823      	ldr	r3, [r4, #0]
 80a6fe8:	4672      	mov	r2, lr
 80a6fea:	702b      	strb	r3, [r5, #0]
 80a6fec:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a6ff0:	4661      	mov	r1, ip
 80a6ff2:	9300      	str	r3, [sp, #0]
 80a6ff4:	4630      	mov	r0, r6
 80a6ff6:	ab02      	add	r3, sp, #8
 80a6ff8:	47b8      	blx	r7
    }
 80a6ffa:	b009      	add	sp, #36	; 0x24
 80a6ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a6ffe:	bf00      	nop
 80a7000:	080ad568 	.word	0x080ad568

080a7004 <_ZN3UDP9endPacketEv>:
{
 80a7004:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a7006:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a7008:	6803      	ldr	r3, [r0, #0]
{
 80a700a:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a700c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a700e:	4b0c      	ldr	r3, [pc, #48]	; (80a7040 <_ZN3UDP9endPacketEv+0x3c>)
 80a7010:	ad03      	add	r5, sp, #12
 80a7012:	f100 0620 	add.w	r6, r0, #32
 80a7016:	9302      	str	r3, [sp, #8]
 80a7018:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a701a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a701c:	6833      	ldr	r3, [r6, #0]
 80a701e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80a7020:	702b      	strb	r3, [r5, #0]
 80a7022:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a7024:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a7026:	9300      	str	r3, [sp, #0]
 80a7028:	4620      	mov	r0, r4
 80a702a:	ab02      	add	r3, sp, #8
 80a702c:	47b8      	blx	r7
 80a702e:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a7030:	6823      	ldr	r3, [r4, #0]
 80a7032:	4620      	mov	r0, r4
 80a7034:	69db      	ldr	r3, [r3, #28]
 80a7036:	4798      	blx	r3
}
 80a7038:	4628      	mov	r0, r5
 80a703a:	b009      	add	sp, #36	; 0x24
 80a703c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a703e:	bf00      	nop
 80a7040:	080ad568 	.word	0x080ad568

080a7044 <_ZN3UDPC1Ev>:
UDP::UDP() :
 80a7044:	b538      	push	{r3, r4, r5, lr}
    Stream() {_timeout=1000;}
 80a7046:	2500      	movs	r5, #0
 80a7048:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a704c:	e9c0 5301 	strd	r5, r3, [r0, #4]
        _buffer_allocated(false)
 80a7050:	4b0c      	ldr	r3, [pc, #48]	; (80a7084 <_ZN3UDPC1Ev+0x40>)
UDP::UDP() :
 80a7052:	4604      	mov	r4, r0
        _buffer_allocated(false)
 80a7054:	f103 0208 	add.w	r2, r3, #8
 80a7058:	336c      	adds	r3, #108	; 0x6c
 80a705a:	6002      	str	r2, [r0, #0]
 80a705c:	6103      	str	r3, [r0, #16]
        _sock(socket_handle_invalid()),
 80a705e:	f7fe fa7b 	bl	80a5558 <socket_handle_invalid>
        _buffer_allocated(false)
 80a7062:	6160      	str	r0, [r4, #20]
 80a7064:	f104 001c 	add.w	r0, r4, #28
 80a7068:	f7fe ff8e 	bl	80a5f88 <_ZN9IPAddressC1Ev>
 80a706c:	f44f 7300 	mov.w	r3, #512	; 0x200
}
 80a7070:	4620      	mov	r0, r4
        _buffer_allocated(false)
 80a7072:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
 80a7076:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a7078:	8725      	strh	r5, [r4, #56]	; 0x38
 80a707a:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a707c:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
 80a7080:	bd38      	pop	{r3, r4, r5, pc}
 80a7082:	bf00      	nop
 80a7084:	080ad6f4 	.word	0x080ad6f4

080a7088 <_ZN3UDP13releaseBufferEv>:
{
 80a7088:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a708a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 80a708e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a7090:	b123      	cbz	r3, 80a709c <_ZN3UDP13releaseBufferEv+0x14>
 80a7092:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a7094:	b110      	cbz	r0, 80a709c <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a7096:	2101      	movs	r1, #1
 80a7098:	f000 fc15 	bl	80a78c6 <_ZdlPvj>
    _buffer = NULL;
 80a709c:	2300      	movs	r3, #0
 80a709e:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a70a0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a70a4:	6423      	str	r3, [r4, #64]	; 0x40
  _offset = 0;
 80a70a6:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a70a8:	8723      	strh	r3, [r4, #56]	; 0x38
}
 80a70aa:	bd10      	pop	{r4, pc}

080a70ac <_ZN3UDP9setBufferEjPh>:
{
 80a70ac:	b570      	push	{r4, r5, r6, lr}
 80a70ae:	4604      	mov	r4, r0
 80a70b0:	4616      	mov	r6, r2
 80a70b2:	460d      	mov	r5, r1
    releaseBuffer();
 80a70b4:	f7ff ffe8 	bl	80a7088 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
 80a70b8:	2300      	movs	r3, #0
    _buffer = buffer;
 80a70ba:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a70bc:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a70be:	b12e      	cbz	r6, 80a70cc <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
 80a70c0:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
 80a70c2:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a70c4:	3800      	subs	r0, #0
 80a70c6:	bf18      	it	ne
 80a70c8:	2001      	movne	r0, #1
 80a70ca:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
 80a70cc:	2d00      	cmp	r5, #0
 80a70ce:	d0f8      	beq.n	80a70c2 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
 80a70d0:	4628      	mov	r0, r5
 80a70d2:	f7f8 ffe4 	bl	80a009e <_Znaj>
        _buffer_allocated = true;
 80a70d6:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
 80a70d8:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a70da:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
 80a70de:	2800      	cmp	r0, #0
 80a70e0:	d0ef      	beq.n	80a70c2 <_ZN3UDP9setBufferEjPh+0x16>
 80a70e2:	e7ed      	b.n	80a70c0 <_ZN3UDP9setBufferEjPh+0x14>

080a70e4 <_ZN3UDP11beginPacketE9IPAddresst>:
{
 80a70e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a70e6:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
 80a70e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
{
 80a70ea:	4605      	mov	r5, r0
 80a70ec:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
 80a70ee:	b91a      	cbnz	r2, 80a70f8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a70f0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a70f2:	b109      	cbz	r1, 80a70f8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a70f4:	f7ff ffda 	bl	80a70ac <_ZN3UDP9setBufferEjPh>
 80a70f8:	f105 0620 	add.w	r6, r5, #32
 80a70fc:	3404      	adds	r4, #4
 80a70fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a7100:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a7102:	6823      	ldr	r3, [r4, #0]
 80a7104:	7033      	strb	r3, [r6, #0]
  _offset = 0;
 80a7106:	2300      	movs	r3, #0
}
 80a7108:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
 80a710a:	86af      	strh	r7, [r5, #52]	; 0x34
  _offset = 0;
 80a710c:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a710e:	872b      	strh	r3, [r5, #56]	; 0x38
}
 80a7110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a7112 <_ZN3UDP11parsePacketEm>:
{
 80a7112:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a7114:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
{
 80a7116:	4604      	mov	r4, r0
 80a7118:	460d      	mov	r5, r1
    if (!_buffer && _buffer_size) {
 80a711a:	b91a      	cbnz	r2, 80a7124 <_ZN3UDP11parsePacketEm+0x12>
 80a711c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a711e:	b109      	cbz	r1, 80a7124 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
 80a7120:	f7ff ffc4 	bl	80a70ac <_ZN3UDP9setBufferEjPh>
  _offset = 0;
 80a7124:	2300      	movs	r3, #0
    if (_buffer && _buffer_size) {
 80a7126:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  _offset = 0;
 80a7128:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a712a:	8723      	strh	r3, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
 80a712c:	b149      	cbz	r1, 80a7142 <_ZN3UDP11parsePacketEm+0x30>
 80a712e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a7130:	b13a      	cbz	r2, 80a7142 <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
 80a7132:	6823      	ldr	r3, [r4, #0]
 80a7134:	4620      	mov	r0, r4
 80a7136:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80a7138:	462b      	mov	r3, r5
 80a713a:	47b0      	blx	r6
        if (result>0) {
 80a713c:	2800      	cmp	r0, #0
            _total = result;
 80a713e:	bfc8      	it	gt
 80a7140:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
 80a7142:	6823      	ldr	r3, [r4, #0]
 80a7144:	4620      	mov	r0, r4
}
 80a7146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return available();
 80a714a:	691b      	ldr	r3, [r3, #16]
 80a714c:	4718      	bx	r3
	...

080a7150 <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a7150:	b510      	push	{r4, lr}
 80a7152:	4604      	mov	r4, r0
 80a7154:	4b06      	ldr	r3, [pc, #24]	; (80a7170 <_ZN3UDPD1Ev+0x20>)
 80a7156:	f103 0208 	add.w	r2, r3, #8
 80a715a:	336c      	adds	r3, #108	; 0x6c
 80a715c:	6002      	str	r2, [r0, #0]
 80a715e:	6103      	str	r3, [r0, #16]
 80a7160:	f7ff fe4e 	bl	80a6e00 <_ZN3UDP4stopEv>
 80a7164:	4620      	mov	r0, r4
 80a7166:	f7ff ff8f 	bl	80a7088 <_ZN3UDP13releaseBufferEv>
 80a716a:	4620      	mov	r0, r4
 80a716c:	bd10      	pop	{r4, pc}
 80a716e:	bf00      	nop
 80a7170:	080ad6f4 	.word	0x080ad6f4

080a7174 <_ZN3UDPD0Ev>:
 80a7174:	b510      	push	{r4, lr}
 80a7176:	4604      	mov	r4, r0
 80a7178:	f7ff ffea 	bl	80a7150 <_ZN3UDPD1Ev>
 80a717c:	4620      	mov	r0, r4
 80a717e:	214c      	movs	r1, #76	; 0x4c
 80a7180:	f000 fba1 	bl	80a78c6 <_ZdlPvj>
 80a7184:	4620      	mov	r0, r4
 80a7186:	bd10      	pop	{r4, pc}

080a7188 <_ZN3UDP13joinMulticastERK9IPAddress>:

int UDP::joinMulticast(const IPAddress& ip)
{
 80a7188:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a718a:	b089      	sub	sp, #36	; 0x24
    if (_sock == socket_handle_invalid())
 80a718c:	6946      	ldr	r6, [r0, #20]
{
 80a718e:	4605      	mov	r5, r0
 80a7190:	460c      	mov	r4, r1
    if (_sock == socket_handle_invalid())
 80a7192:	f7fe f9e1 	bl	80a5558 <socket_handle_invalid>
 80a7196:	4286      	cmp	r6, r0
 80a7198:	d01a      	beq.n	80a71d0 <_ZN3UDP13joinMulticastERK9IPAddress+0x48>
        return -1;
    HAL_IPAddress address = ip.raw();
 80a719a:	aa03      	add	r2, sp, #12
 80a719c:	4617      	mov	r7, r2
 80a719e:	1d23      	adds	r3, r4, #4
 80a71a0:	3414      	adds	r4, #20
 80a71a2:	4616      	mov	r6, r2
 80a71a4:	6818      	ldr	r0, [r3, #0]
 80a71a6:	6859      	ldr	r1, [r3, #4]
 80a71a8:	3308      	adds	r3, #8
 80a71aa:	c603      	stmia	r6!, {r0, r1}
 80a71ac:	42a3      	cmp	r3, r4
 80a71ae:	4632      	mov	r2, r6
 80a71b0:	d1f7      	bne.n	80a71a2 <_ZN3UDP13joinMulticastERK9IPAddress+0x1a>
 80a71b2:	781b      	ldrb	r3, [r3, #0]
    socket_multicast_info_t info;
    info.size = sizeof(info);
    info.sock_handle = _sock;
    return socket_join_multicast(&address, _nif, &info);
 80a71b4:	4638      	mov	r0, r7
    HAL_IPAddress address = ip.raw();
 80a71b6:	7033      	strb	r3, [r6, #0]
    info.size = sizeof(info);
 80a71b8:	2306      	movs	r3, #6
 80a71ba:	f8ad 3004 	strh.w	r3, [sp, #4]
    info.sock_handle = _sock;
 80a71be:	696b      	ldr	r3, [r5, #20]
    return socket_join_multicast(&address, _nif, &info);
 80a71c0:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80a71c2:	aa01      	add	r2, sp, #4
    info.sock_handle = _sock;
 80a71c4:	f8cd 3006 	str.w	r3, [sp, #6]
    return socket_join_multicast(&address, _nif, &info);
 80a71c8:	f7fe f9ce 	bl	80a5568 <socket_join_multicast>
}
 80a71cc:	b009      	add	sp, #36	; 0x24
 80a71ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 80a71d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a71d4:	e7fa      	b.n	80a71cc <_ZN3UDP13joinMulticastERK9IPAddress+0x44>

080a71d6 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a71d6:	4770      	bx	lr

080a71d8 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a71d8:	7441      	strb	r1, [r0, #17]
}
 80a71da:	4770      	bx	lr

080a71dc <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a71dc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a71de:	7c00      	ldrb	r0, [r0, #16]
 80a71e0:	f7fe fa2a 	bl	80a5638 <hal_usart_available_data_for_write>
}
 80a71e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a71e8:	bd08      	pop	{r3, pc}

080a71ea <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a71ea:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a71ec:	7c00      	ldrb	r0, [r0, #16]
 80a71ee:	f7fe f9fb 	bl	80a55e8 <hal_usart_available>
}
 80a71f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a71f6:	bd08      	pop	{r3, pc}

080a71f8 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a71f8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a71fa:	7c00      	ldrb	r0, [r0, #16]
 80a71fc:	f7fe fa04 	bl	80a5608 <hal_usart_peek>
}
 80a7200:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a7204:	bd08      	pop	{r3, pc}

080a7206 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a7206:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a7208:	7c00      	ldrb	r0, [r0, #16]
 80a720a:	f7fe f9f5 	bl	80a55f8 <hal_usart_read>
}
 80a720e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a7212:	bd08      	pop	{r3, pc}

080a7214 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a7214:	7c00      	ldrb	r0, [r0, #16]
 80a7216:	f7fe b9ff 	b.w	80a5618 <hal_usart_flush>

080a721a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a721a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a721c:	7c46      	ldrb	r6, [r0, #17]
{
 80a721e:	4604      	mov	r4, r0
 80a7220:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a7222:	b12e      	cbz	r6, 80a7230 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a7224:	4629      	mov	r1, r5
 80a7226:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a7228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a722c:	f7fe b9d4 	b.w	80a55d8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a7230:	7c00      	ldrb	r0, [r0, #16]
 80a7232:	f7fe fa01 	bl	80a5638 <hal_usart_available_data_for_write>
 80a7236:	2800      	cmp	r0, #0
 80a7238:	dcf4      	bgt.n	80a7224 <_ZN11USARTSerial5writeEh+0xa>
}
 80a723a:	4630      	mov	r0, r6
 80a723c:	bd70      	pop	{r4, r5, r6, pc}

080a723e <_ZN11USARTSerialD0Ev>:
 80a723e:	b510      	push	{r4, lr}
 80a7240:	4604      	mov	r4, r0
 80a7242:	2114      	movs	r1, #20
 80a7244:	f000 fb3f 	bl	80a78c6 <_ZdlPvj>
 80a7248:	4620      	mov	r0, r4
 80a724a:	bd10      	pop	{r4, pc}

080a724c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a724c:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a7250:	b510      	push	{r4, lr}
 80a7252:	4604      	mov	r4, r0
 80a7254:	4608      	mov	r0, r1
 80a7256:	4611      	mov	r1, r2
 80a7258:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a725c:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a7260:	4a04      	ldr	r2, [pc, #16]	; (80a7274 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a7262:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a7264:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a7266:	2201      	movs	r2, #1
 80a7268:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a726a:	461a      	mov	r2, r3
 80a726c:	f7fe f9ac 	bl	80a55c8 <hal_usart_init>
}
 80a7270:	4620      	mov	r0, r4
 80a7272:	bd10      	pop	{r4, pc}
 80a7274:	080ad76c 	.word	0x080ad76c

080a7278 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a7278:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a727a:	4d0d      	ldr	r5, [pc, #52]	; (80a72b0 <_Z22__fetch_global_Serial1v+0x38>)
 80a727c:	7829      	ldrb	r1, [r5, #0]
 80a727e:	f3bf 8f5b 	dmb	ish
 80a7282:	f011 0401 	ands.w	r4, r1, #1
 80a7286:	d111      	bne.n	80a72ac <_Z22__fetch_global_Serial1v+0x34>
 80a7288:	4628      	mov	r0, r5
 80a728a:	f7f8 ff17 	bl	80a00bc <__cxa_guard_acquire>
 80a728e:	b168      	cbz	r0, 80a72ac <_Z22__fetch_global_Serial1v+0x34>
 80a7290:	4621      	mov	r1, r4
 80a7292:	4a08      	ldr	r2, [pc, #32]	; (80a72b4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a7294:	4b08      	ldr	r3, [pc, #32]	; (80a72b8 <_Z22__fetch_global_Serial1v+0x40>)
 80a7296:	4809      	ldr	r0, [pc, #36]	; (80a72bc <_Z22__fetch_global_Serial1v+0x44>)
 80a7298:	f7ff ffd8 	bl	80a724c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a729c:	4628      	mov	r0, r5
 80a729e:	f7f8 ff12 	bl	80a00c6 <__cxa_guard_release>
 80a72a2:	4a07      	ldr	r2, [pc, #28]	; (80a72c0 <_Z22__fetch_global_Serial1v+0x48>)
 80a72a4:	4907      	ldr	r1, [pc, #28]	; (80a72c4 <_Z22__fetch_global_Serial1v+0x4c>)
 80a72a6:	4805      	ldr	r0, [pc, #20]	; (80a72bc <_Z22__fetch_global_Serial1v+0x44>)
 80a72a8:	f000 fb08 	bl	80a78bc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a72ac:	4803      	ldr	r0, [pc, #12]	; (80a72bc <_Z22__fetch_global_Serial1v+0x44>)
 80a72ae:	bd38      	pop	{r3, r4, r5, pc}
 80a72b0:	2000107c 	.word	0x2000107c
 80a72b4:	20001080 	.word	0x20001080
 80a72b8:	20001104 	.word	0x20001104
 80a72bc:	20001188 	.word	0x20001188
 80a72c0:	2000006c 	.word	0x2000006c
 80a72c4:	080a71d7 	.word	0x080a71d7

080a72c8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a72c8:	7441      	strb	r1, [r0, #17]
}
 80a72ca:	4770      	bx	lr

080a72cc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a72cc:	4770      	bx	lr

080a72ce <_ZN9USBSerial4readEv>:
{
 80a72ce:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a72d0:	2100      	movs	r1, #0
 80a72d2:	7c00      	ldrb	r0, [r0, #16]
 80a72d4:	f7fe f9d0 	bl	80a5678 <HAL_USB_USART_Receive_Data>
}
 80a72d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a72dc:	bd08      	pop	{r3, pc}

080a72de <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a72de:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a72e0:	2101      	movs	r1, #1
 80a72e2:	7c00      	ldrb	r0, [r0, #16]
 80a72e4:	f7fe f9c8 	bl	80a5678 <HAL_USB_USART_Receive_Data>
}
 80a72e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a72ec:	bd08      	pop	{r3, pc}

080a72ee <_ZN9USBSerial17availableForWriteEv>:
{
 80a72ee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a72f0:	7c00      	ldrb	r0, [r0, #16]
 80a72f2:	f7fe f9b9 	bl	80a5668 <HAL_USB_USART_Available_Data_For_Write>
}
 80a72f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a72fa:	bd08      	pop	{r3, pc}

080a72fc <_ZN9USBSerial9availableEv>:
{
 80a72fc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a72fe:	7c00      	ldrb	r0, [r0, #16]
 80a7300:	f7fe f9aa 	bl	80a5658 <HAL_USB_USART_Available_Data>
}
 80a7304:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a7308:	bd08      	pop	{r3, pc}

080a730a <_ZN9USBSerial5writeEh>:
{
 80a730a:	b538      	push	{r3, r4, r5, lr}
 80a730c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a730e:	7c00      	ldrb	r0, [r0, #16]
{
 80a7310:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a7312:	f7fe f9a9 	bl	80a5668 <HAL_USB_USART_Available_Data_For_Write>
 80a7316:	2800      	cmp	r0, #0
 80a7318:	dc01      	bgt.n	80a731e <_ZN9USBSerial5writeEh+0x14>
 80a731a:	7c60      	ldrb	r0, [r4, #17]
 80a731c:	b128      	cbz	r0, 80a732a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a731e:	4629      	mov	r1, r5
 80a7320:	7c20      	ldrb	r0, [r4, #16]
 80a7322:	f7fe f9b1 	bl	80a5688 <HAL_USB_USART_Send_Data>
 80a7326:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a732a:	bd38      	pop	{r3, r4, r5, pc}

080a732c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a732c:	7c00      	ldrb	r0, [r0, #16]
 80a732e:	f7fe b9b3 	b.w	80a5698 <HAL_USB_USART_Flush_Data>

080a7332 <_ZN9USBSerialD0Ev>:
 80a7332:	b510      	push	{r4, lr}
 80a7334:	4604      	mov	r4, r0
 80a7336:	2114      	movs	r1, #20
 80a7338:	f000 fac5 	bl	80a78c6 <_ZdlPvj>
 80a733c:	4620      	mov	r0, r4
 80a733e:	bd10      	pop	{r4, pc}

080a7340 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a7340:	b510      	push	{r4, lr}
 80a7342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a7346:	4604      	mov	r4, r0
 80a7348:	4608      	mov	r0, r1
 80a734a:	2100      	movs	r1, #0
 80a734c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a7350:	4b04      	ldr	r3, [pc, #16]	; (80a7364 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a7352:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a7354:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a7356:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a7358:	4611      	mov	r1, r2
  _blocking = true;
 80a735a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a735c:	f7fe f974 	bl	80a5648 <HAL_USB_USART_Init>
}
 80a7360:	4620      	mov	r0, r4
 80a7362:	bd10      	pop	{r4, pc}
 80a7364:	080ad79c 	.word	0x080ad79c

080a7368 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a7368:	b510      	push	{r4, lr}
 80a736a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a736c:	2214      	movs	r2, #20
 80a736e:	2100      	movs	r1, #0
 80a7370:	f005 f8ae 	bl	80ac4d0 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a7374:	4b05      	ldr	r3, [pc, #20]	; (80a738c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a7376:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a7378:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a737a:	4b05      	ldr	r3, [pc, #20]	; (80a7390 <_Z19acquireSerialBufferv+0x28>)
 80a737c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a737e:	f240 1301 	movw	r3, #257	; 0x101
 80a7382:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a7384:	2381      	movs	r3, #129	; 0x81
 80a7386:	8223      	strh	r3, [r4, #16]
}
 80a7388:	bd10      	pop	{r4, pc}
 80a738a:	bf00      	nop
 80a738c:	200011cc 	.word	0x200011cc
 80a7390:	200012cd 	.word	0x200012cd

080a7394 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a7394:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a7396:	4d0f      	ldr	r5, [pc, #60]	; (80a73d4 <_Z16_fetch_usbserialv+0x40>)
{
 80a7398:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a739a:	a801      	add	r0, sp, #4
 80a739c:	f7ff ffe4 	bl	80a7368 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a73a0:	7829      	ldrb	r1, [r5, #0]
 80a73a2:	f3bf 8f5b 	dmb	ish
 80a73a6:	f011 0401 	ands.w	r4, r1, #1
 80a73aa:	d110      	bne.n	80a73ce <_Z16_fetch_usbserialv+0x3a>
 80a73ac:	4628      	mov	r0, r5
 80a73ae:	f7f8 fe85 	bl	80a00bc <__cxa_guard_acquire>
 80a73b2:	b160      	cbz	r0, 80a73ce <_Z16_fetch_usbserialv+0x3a>
 80a73b4:	4621      	mov	r1, r4
 80a73b6:	aa01      	add	r2, sp, #4
 80a73b8:	4807      	ldr	r0, [pc, #28]	; (80a73d8 <_Z16_fetch_usbserialv+0x44>)
 80a73ba:	f7ff ffc1 	bl	80a7340 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a73be:	4628      	mov	r0, r5
 80a73c0:	f7f8 fe81 	bl	80a00c6 <__cxa_guard_release>
 80a73c4:	4a05      	ldr	r2, [pc, #20]	; (80a73dc <_Z16_fetch_usbserialv+0x48>)
 80a73c6:	4906      	ldr	r1, [pc, #24]	; (80a73e0 <_Z16_fetch_usbserialv+0x4c>)
 80a73c8:	4803      	ldr	r0, [pc, #12]	; (80a73d8 <_Z16_fetch_usbserialv+0x44>)
 80a73ca:	f000 fa77 	bl	80a78bc <__aeabi_atexit>
	return _usbserial;
}
 80a73ce:	4802      	ldr	r0, [pc, #8]	; (80a73d8 <_Z16_fetch_usbserialv+0x44>)
 80a73d0:	b007      	add	sp, #28
 80a73d2:	bd30      	pop	{r4, r5, pc}
 80a73d4:	2000119c 	.word	0x2000119c
 80a73d8:	200011a4 	.word	0x200011a4
 80a73dc:	2000006c 	.word	0x2000006c
 80a73e0:	080a72cd 	.word	0x080a72cd

080a73e4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a73e4:	b510      	push	{r4, lr}
 80a73e6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a73e8:	2214      	movs	r2, #20
 80a73ea:	2100      	movs	r1, #0
 80a73ec:	f005 f870 	bl	80ac4d0 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a73f0:	4b05      	ldr	r3, [pc, #20]	; (80a7408 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a73f2:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a73f4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a73f6:	4b05      	ldr	r3, [pc, #20]	; (80a740c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a73f8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a73fa:	f240 1301 	movw	r3, #257	; 0x101
 80a73fe:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a7400:	2381      	movs	r3, #129	; 0x81
 80a7402:	8223      	strh	r3, [r4, #16]
}
 80a7404:	bd10      	pop	{r4, pc}
 80a7406:	bf00      	nop
 80a7408:	2000134e 	.word	0x2000134e
 80a740c:	2000144f 	.word	0x2000144f

080a7410 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a7410:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a7412:	4c0f      	ldr	r4, [pc, #60]	; (80a7450 <_Z17_fetch_usbserial1v+0x40>)
{
 80a7414:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a7416:	a801      	add	r0, sp, #4
 80a7418:	f7ff ffe4 	bl	80a73e4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a741c:	7823      	ldrb	r3, [r4, #0]
 80a741e:	f3bf 8f5b 	dmb	ish
 80a7422:	07db      	lsls	r3, r3, #31
 80a7424:	d410      	bmi.n	80a7448 <_Z17_fetch_usbserial1v+0x38>
 80a7426:	4620      	mov	r0, r4
 80a7428:	f7f8 fe48 	bl	80a00bc <__cxa_guard_acquire>
 80a742c:	b160      	cbz	r0, 80a7448 <_Z17_fetch_usbserial1v+0x38>
 80a742e:	2101      	movs	r1, #1
 80a7430:	aa01      	add	r2, sp, #4
 80a7432:	4808      	ldr	r0, [pc, #32]	; (80a7454 <_Z17_fetch_usbserial1v+0x44>)
 80a7434:	f7ff ff84 	bl	80a7340 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a7438:	4620      	mov	r0, r4
 80a743a:	f7f8 fe44 	bl	80a00c6 <__cxa_guard_release>
 80a743e:	4a06      	ldr	r2, [pc, #24]	; (80a7458 <_Z17_fetch_usbserial1v+0x48>)
 80a7440:	4906      	ldr	r1, [pc, #24]	; (80a745c <_Z17_fetch_usbserial1v+0x4c>)
 80a7442:	4804      	ldr	r0, [pc, #16]	; (80a7454 <_Z17_fetch_usbserial1v+0x44>)
 80a7444:	f000 fa3a 	bl	80a78bc <__aeabi_atexit>
  return _usbserial1;
}
 80a7448:	4802      	ldr	r0, [pc, #8]	; (80a7454 <_Z17_fetch_usbserial1v+0x44>)
 80a744a:	b006      	add	sp, #24
 80a744c:	bd10      	pop	{r4, pc}
 80a744e:	bf00      	nop
 80a7450:	200011a0 	.word	0x200011a0
 80a7454:	200011b8 	.word	0x200011b8
 80a7458:	2000006c 	.word	0x2000006c
 80a745c:	080a72cd 	.word	0x080a72cd

080a7460 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a7460:	2200      	movs	r2, #0
 80a7462:	6840      	ldr	r0, [r0, #4]
 80a7464:	4611      	mov	r1, r2
 80a7466:	f7fe b9d3 	b.w	80a5810 <network_ready>

080a746a <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a746a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a746c:	4615      	mov	r5, r2
 80a746e:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a7470:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a7472:	460e      	mov	r6, r1
 80a7474:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a7476:	2100      	movs	r1, #0
 80a7478:	a803      	add	r0, sp, #12
 80a747a:	f005 f829 	bl	80ac4d0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a747e:	4628      	mov	r0, r5
 80a7480:	f005 f8c1 	bl	80ac606 <strlen>
 80a7484:	2700      	movs	r7, #0
 80a7486:	b281      	uxth	r1, r0
 80a7488:	6873      	ldr	r3, [r6, #4]
 80a748a:	4628      	mov	r0, r5
 80a748c:	9700      	str	r7, [sp, #0]
 80a748e:	aa03      	add	r2, sp, #12
 80a7490:	f7fe f912 	bl	80a56b8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a7494:	b130      	cbz	r0, 80a74a4 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a7496:	4639      	mov	r1, r7
 80a7498:	4620      	mov	r0, r4
 80a749a:	f7fe fd95 	bl	80a5fc8 <_ZN9IPAddressC1Em>
    }
 80a749e:	4620      	mov	r0, r4
 80a74a0:	b009      	add	sp, #36	; 0x24
 80a74a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a74a4:	4620      	mov	r0, r4
 80a74a6:	a903      	add	r1, sp, #12
 80a74a8:	f7fe fd7c 	bl	80a5fa4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a74ac:	e7f7      	b.n	80a749e <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a74ae <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a74ae:	2200      	movs	r2, #0
 80a74b0:	6840      	ldr	r0, [r0, #4]
 80a74b2:	4611      	mov	r1, r2
 80a74b4:	f7fe b9cc 	b.w	80a5850 <network_listening>

080a74b8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a74b8:	2200      	movs	r2, #0
 80a74ba:	6840      	ldr	r0, [r0, #4]
 80a74bc:	4611      	mov	r1, r2
 80a74be:	f7fe b9d7 	b.w	80a5870 <network_get_listen_timeout>

080a74c2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a74c2:	2200      	movs	r2, #0
 80a74c4:	6840      	ldr	r0, [r0, #4]
 80a74c6:	f7fe b9cb 	b.w	80a5860 <network_set_listen_timeout>

080a74ca <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a74ca:	2200      	movs	r2, #0
 80a74cc:	6840      	ldr	r0, [r0, #4]
 80a74ce:	f081 0101 	eor.w	r1, r1, #1
 80a74d2:	f7fe b9b5 	b.w	80a5840 <network_listen>

080a74d6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a74d6:	2300      	movs	r3, #0
 80a74d8:	6840      	ldr	r0, [r0, #4]
 80a74da:	461a      	mov	r2, r3
 80a74dc:	4619      	mov	r1, r3
 80a74de:	f7fe b9a7 	b.w	80a5830 <network_off>

080a74e2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a74e2:	2300      	movs	r3, #0
 80a74e4:	6840      	ldr	r0, [r0, #4]
 80a74e6:	461a      	mov	r2, r3
 80a74e8:	4619      	mov	r1, r3
 80a74ea:	f7fe b999 	b.w	80a5820 <network_on>

080a74ee <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a74ee:	2200      	movs	r2, #0
 80a74f0:	6840      	ldr	r0, [r0, #4]
 80a74f2:	4611      	mov	r1, r2
 80a74f4:	f7fe b97c 	b.w	80a57f0 <network_connecting>

080a74f8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a74f8:	2200      	movs	r2, #0
 80a74fa:	2102      	movs	r1, #2
 80a74fc:	6840      	ldr	r0, [r0, #4]
 80a74fe:	f7fe b97f 	b.w	80a5800 <network_disconnect>

080a7502 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a7502:	2300      	movs	r3, #0
 80a7504:	6840      	ldr	r0, [r0, #4]
 80a7506:	461a      	mov	r2, r3
 80a7508:	f7fe b96a 	b.w	80a57e0 <network_connect>

080a750c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a750c:	2204      	movs	r2, #4
 80a750e:	4b02      	ldr	r3, [pc, #8]	; (80a7518 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a7510:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a7512:	4a02      	ldr	r2, [pc, #8]	; (80a751c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a7514:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a7516:	4770      	bx	lr
 80a7518:	200014d0 	.word	0x200014d0
 80a751c:	080ad7cc 	.word	0x080ad7cc

080a7520 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a7520:	b510      	push	{r4, lr}
 80a7522:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a7524:	f005 f86f 	bl	80ac606 <strlen>
 80a7528:	1e43      	subs	r3, r0, #1
 80a752a:	4620      	mov	r0, r4
 80a752c:	4423      	add	r3, r4
	while(i<j){
 80a752e:	4283      	cmp	r3, r0
 80a7530:	d906      	bls.n	80a7540 <_Z11str_reversePc+0x20>
		c = *i;
 80a7532:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a7534:	7819      	ldrb	r1, [r3, #0]
 80a7536:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a753a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a753e:	e7f6      	b.n	80a752e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a7540:	bd10      	pop	{r4, pc}

080a7542 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a7542:	b570      	push	{r4, r5, r6, lr}
 80a7544:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a7546:	1e91      	subs	r1, r2, #2
 80a7548:	2922      	cmp	r1, #34	; 0x22
 80a754a:	d822      	bhi.n	80a7592 <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 80a754c:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a754e:	b168      	cbz	r0, 80a756c <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a7550:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a7554:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a7558:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a755a:	2809      	cmp	r0, #9
                *ptr += '0';
 80a755c:	bf94      	ite	ls
 80a755e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a7560:	3157      	addhi	r1, #87	; 0x57
 80a7562:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 80a7564:	4630      	mov	r0, r6
 80a7566:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a756a:	e7f0      	b.n	80a754e <ultoa+0xc>
 80a756c:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a756e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 80a7570:	4423      	add	r3, r4
 80a7572:	4293      	cmp	r3, r2
 80a7574:	d902      	bls.n	80a757c <ultoa+0x3a>
            *ptr++ = '0';
 80a7576:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80a757a:	e7fa      	b.n	80a7572 <ultoa+0x30>
 80a757c:	1b5a      	subs	r2, r3, r5
 80a757e:	42ab      	cmp	r3, r5
 80a7580:	bf38      	it	cc
 80a7582:	2200      	movcc	r2, #0

	*ptr = '\0';
 80a7584:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a7586:	4620      	mov	r0, r4
	*ptr = '\0';
 80a7588:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80a758a:	f7ff ffc9 	bl	80a7520 <_Z11str_reversePc>
	return buffer;
 80a758e:	4620      	mov	r0, r4
}
 80a7590:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a7592:	2000      	movs	r0, #0
 80a7594:	e7fc      	b.n	80a7590 <ultoa+0x4e>

080a7596 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 80a7596:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 80a7598:	2301      	movs	r3, #1
 80a759a:	f7ff ffd2 	bl	80a7542 <ultoa>
}
 80a759e:	bd08      	pop	{r3, pc}

080a75a0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a75a0:	4b01      	ldr	r3, [pc, #4]	; (80a75a8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a75a2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a75a4:	4770      	bx	lr
 80a75a6:	bf00      	nop
 80a75a8:	20000008 	.word	0x20000008

080a75ac <serialEventRun>:
{
 80a75ac:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a75ae:	4b13      	ldr	r3, [pc, #76]	; (80a75fc <serialEventRun+0x50>)
 80a75b0:	b143      	cbz	r3, 80a75c4 <serialEventRun+0x18>
 80a75b2:	f7ff feef 	bl	80a7394 <_Z16_fetch_usbserialv>
 80a75b6:	6803      	ldr	r3, [r0, #0]
 80a75b8:	691b      	ldr	r3, [r3, #16]
 80a75ba:	4798      	blx	r3
 80a75bc:	2800      	cmp	r0, #0
 80a75be:	dd01      	ble.n	80a75c4 <serialEventRun+0x18>
        serialEvent();
 80a75c0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a75c4:	4b0e      	ldr	r3, [pc, #56]	; (80a7600 <serialEventRun+0x54>)
 80a75c6:	b143      	cbz	r3, 80a75da <serialEventRun+0x2e>
 80a75c8:	f7ff fe56 	bl	80a7278 <_Z22__fetch_global_Serial1v>
 80a75cc:	6803      	ldr	r3, [r0, #0]
 80a75ce:	691b      	ldr	r3, [r3, #16]
 80a75d0:	4798      	blx	r3
 80a75d2:	2800      	cmp	r0, #0
 80a75d4:	dd01      	ble.n	80a75da <serialEventRun+0x2e>
        serialEvent1();
 80a75d6:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a75da:	4b0a      	ldr	r3, [pc, #40]	; (80a7604 <serialEventRun+0x58>)
 80a75dc:	b10b      	cbz	r3, 80a75e2 <serialEventRun+0x36>
 80a75de:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a75e2:	4b09      	ldr	r3, [pc, #36]	; (80a7608 <serialEventRun+0x5c>)
 80a75e4:	b143      	cbz	r3, 80a75f8 <serialEventRun+0x4c>
 80a75e6:	f7ff ff13 	bl	80a7410 <_Z17_fetch_usbserial1v>
 80a75ea:	6803      	ldr	r3, [r0, #0]
 80a75ec:	691b      	ldr	r3, [r3, #16]
 80a75ee:	4798      	blx	r3
 80a75f0:	2800      	cmp	r0, #0
 80a75f2:	dd01      	ble.n	80a75f8 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a75f4:	f3af 8000 	nop.w
}
 80a75f8:	bd08      	pop	{r3, pc}
 80a75fa:	bf00      	nop
	...

080a760c <_post_loop>:
{
 80a760c:	b508      	push	{r3, lr}
	serialEventRun();
 80a760e:	f7ff ffcd 	bl	80a75ac <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a7612:	f7fd fed7 	bl	80a53c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a7616:	4b01      	ldr	r3, [pc, #4]	; (80a761c <_post_loop+0x10>)
 80a7618:	6018      	str	r0, [r3, #0]
}
 80a761a:	bd08      	pop	{r3, pc}
 80a761c:	200014f0 	.word	0x200014f0

080a7620 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a7620:	4802      	ldr	r0, [pc, #8]	; (80a762c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a7622:	4a03      	ldr	r2, [pc, #12]	; (80a7630 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a7624:	4903      	ldr	r1, [pc, #12]	; (80a7634 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a7626:	1a12      	subs	r2, r2, r0
 80a7628:	f004 bf2a 	b.w	80ac480 <memcpy>
 80a762c:	40024000 	.word	0x40024000
 80a7630:	40024004 	.word	0x40024004
 80a7634:	080ae000 	.word	0x080ae000

080a7638 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a7638:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a763a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a763c:	461a      	mov	r2, r3
 80a763e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a7642:	9300      	str	r3, [sp, #0]
 80a7644:	f7fe f88a 	bl	80a575c <system_ctrl_set_result>
}
 80a7648:	b003      	add	sp, #12
 80a764a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a7650 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a7650:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a7652:	8843      	ldrh	r3, [r0, #2]
 80a7654:	2b0a      	cmp	r3, #10
 80a7656:	d008      	beq.n	80a766a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a7658:	2b50      	cmp	r3, #80	; 0x50
 80a765a:	d10b      	bne.n	80a7674 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a765c:	4b09      	ldr	r3, [pc, #36]	; (80a7684 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a765e:	681b      	ldr	r3, [r3, #0]
 80a7660:	b14b      	cbz	r3, 80a7676 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a7662:	b003      	add	sp, #12
 80a7664:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a7668:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a766a:	f7ff ffe5 	bl	80a7638 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a766e:	b003      	add	sp, #12
 80a7670:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a7674:	2300      	movs	r3, #0
 80a7676:	461a      	mov	r2, r3
 80a7678:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a767c:	9300      	str	r3, [sp, #0]
 80a767e:	f7fe f86d 	bl	80a575c <system_ctrl_set_result>
}
 80a7682:	e7f4      	b.n	80a766e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a7684:	200014dc 	.word	0x200014dc

080a7688 <module_user_init_hook>:
{
 80a7688:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a768a:	4c12      	ldr	r4, [pc, #72]	; (80a76d4 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a768c:	2100      	movs	r1, #0
 80a768e:	4812      	ldr	r0, [pc, #72]	; (80a76d8 <module_user_init_hook+0x50>)
 80a7690:	f7fe f93e 	bl	80a5910 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a7694:	4d11      	ldr	r5, [pc, #68]	; (80a76dc <module_user_init_hook+0x54>)
 80a7696:	6823      	ldr	r3, [r4, #0]
 80a7698:	42ab      	cmp	r3, r5
 80a769a:	bf0c      	ite	eq
 80a769c:	2201      	moveq	r2, #1
 80a769e:	2200      	movne	r2, #0
 80a76a0:	4b0f      	ldr	r3, [pc, #60]	; (80a76e0 <module_user_init_hook+0x58>)
 80a76a2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a76a4:	d002      	beq.n	80a76ac <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a76a6:	f7ff ffbb 	bl	80a7620 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a76aa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a76ac:	f7fd fe72 	bl	80a5394 <HAL_RNG_GetRandomNumber>
 80a76b0:	4604      	mov	r4, r0
    srand(seed);
 80a76b2:	f004 ff15 	bl	80ac4e0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a76b6:	4b0b      	ldr	r3, [pc, #44]	; (80a76e4 <module_user_init_hook+0x5c>)
 80a76b8:	b113      	cbz	r3, 80a76c0 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a76ba:	4620      	mov	r0, r4
 80a76bc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a76c0:	2100      	movs	r1, #0
 80a76c2:	4808      	ldr	r0, [pc, #32]	; (80a76e4 <module_user_init_hook+0x5c>)
 80a76c4:	f7fe f87c 	bl	80a57c0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a76c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a76cc:	2100      	movs	r1, #0
 80a76ce:	4806      	ldr	r0, [pc, #24]	; (80a76e8 <module_user_init_hook+0x60>)
 80a76d0:	f7fe b83a 	b.w	80a5748 <system_ctrl_set_app_request_handler>
 80a76d4:	40024000 	.word	0x40024000
 80a76d8:	080a75a1 	.word	0x080a75a1
 80a76dc:	9a271c1e 	.word	0x9a271c1e
 80a76e0:	200014d8 	.word	0x200014d8
 80a76e4:	00000000 	.word	0x00000000
 80a76e8:	080a7651 	.word	0x080a7651

080a76ec <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a76ec:	b510      	push	{r4, lr}
 80a76ee:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a76f0:	6880      	ldr	r0, [r0, #8]
 80a76f2:	b108      	cbz	r0, 80a76f8 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a76f4:	f7fd fe46 	bl	80a5384 <os_mutex_recursive_destroy>
 80a76f8:	4620      	mov	r0, r4
 80a76fa:	bd10      	pop	{r4, pc}

080a76fc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a76fc:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a76fe:	b570      	push	{r4, r5, r6, lr}
 80a7700:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a7702:	d901      	bls.n	80a7708 <pinAvailable+0xc>
    return false;
 80a7704:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a7706:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a7708:	f1a0 030d 	sub.w	r3, r0, #13
 80a770c:	2b02      	cmp	r3, #2
 80a770e:	d90b      	bls.n	80a7728 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a7710:	2801      	cmp	r0, #1
 80a7712:	d826      	bhi.n	80a7762 <pinAvailable+0x66>
 80a7714:	f000 f892 	bl	80a783c <_Z19__fetch_global_Wirev>
 80a7718:	2100      	movs	r1, #0
 80a771a:	7c00      	ldrb	r0, [r0, #16]
 80a771c:	f7fd fec2 	bl	80a54a4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a7720:	f080 0001 	eor.w	r0, r0, #1
 80a7724:	b2c0      	uxtb	r0, r0
 80a7726:	e7ee      	b.n	80a7706 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a7728:	4e13      	ldr	r6, [pc, #76]	; (80a7778 <pinAvailable+0x7c>)
 80a772a:	7831      	ldrb	r1, [r6, #0]
 80a772c:	f3bf 8f5b 	dmb	ish
 80a7730:	f011 0501 	ands.w	r5, r1, #1
 80a7734:	d10f      	bne.n	80a7756 <pinAvailable+0x5a>
 80a7736:	4630      	mov	r0, r6
 80a7738:	f7f8 fcc0 	bl	80a00bc <__cxa_guard_acquire>
 80a773c:	b158      	cbz	r0, 80a7756 <pinAvailable+0x5a>
 80a773e:	4629      	mov	r1, r5
 80a7740:	480e      	ldr	r0, [pc, #56]	; (80a777c <pinAvailable+0x80>)
 80a7742:	f7fe fd67 	bl	80a6214 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a7746:	4630      	mov	r0, r6
 80a7748:	f7f8 fcbd 	bl	80a00c6 <__cxa_guard_release>
 80a774c:	4a0c      	ldr	r2, [pc, #48]	; (80a7780 <pinAvailable+0x84>)
 80a774e:	490d      	ldr	r1, [pc, #52]	; (80a7784 <pinAvailable+0x88>)
 80a7750:	480a      	ldr	r0, [pc, #40]	; (80a777c <pinAvailable+0x80>)
 80a7752:	f000 f8b3 	bl	80a78bc <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a7756:	4b09      	ldr	r3, [pc, #36]	; (80a777c <pinAvailable+0x80>)
 80a7758:	7818      	ldrb	r0, [r3, #0]
 80a775a:	f7fd ff2d 	bl	80a55b8 <hal_spi_is_enabled>
 80a775e:	2800      	cmp	r0, #0
 80a7760:	d1d0      	bne.n	80a7704 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a7762:	3c12      	subs	r4, #18
 80a7764:	2c01      	cmp	r4, #1
 80a7766:	d805      	bhi.n	80a7774 <pinAvailable+0x78>
 80a7768:	f7ff fd86 	bl	80a7278 <_Z22__fetch_global_Serial1v>
 80a776c:	7c00      	ldrb	r0, [r0, #16]
 80a776e:	f7fd ff5b 	bl	80a5628 <hal_usart_is_enabled>
 80a7772:	e7d5      	b.n	80a7720 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a7774:	2001      	movs	r0, #1
 80a7776:	e7c6      	b.n	80a7706 <pinAvailable+0xa>
 80a7778:	200014e0 	.word	0x200014e0
 80a777c:	200014e4 	.word	0x200014e4
 80a7780:	2000006c 	.word	0x2000006c
 80a7784:	080a76ed 	.word	0x080a76ed

080a7788 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a7788:	2817      	cmp	r0, #23
{
 80a778a:	b538      	push	{r3, r4, r5, lr}
 80a778c:	4604      	mov	r4, r0
 80a778e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a7790:	d80a      	bhi.n	80a77a8 <pinMode+0x20>
 80a7792:	29ff      	cmp	r1, #255	; 0xff
 80a7794:	d008      	beq.n	80a77a8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a7796:	f7ff ffb1 	bl	80a76fc <pinAvailable>
 80a779a:	b128      	cbz	r0, 80a77a8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a779c:	4629      	mov	r1, r5
 80a779e:	4620      	mov	r0, r4
}
 80a77a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a77a4:	f7fd be36 	b.w	80a5414 <HAL_Pin_Mode>
}
 80a77a8:	bd38      	pop	{r3, r4, r5, pc}

080a77aa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a77aa:	b538      	push	{r3, r4, r5, lr}
 80a77ac:	4604      	mov	r4, r0
 80a77ae:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a77b0:	f7fd fe38 	bl	80a5424 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a77b4:	28ff      	cmp	r0, #255	; 0xff
 80a77b6:	d010      	beq.n	80a77da <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a77b8:	2806      	cmp	r0, #6
 80a77ba:	d804      	bhi.n	80a77c6 <digitalWrite+0x1c>
 80a77bc:	234d      	movs	r3, #77	; 0x4d
 80a77be:	fa23 f000 	lsr.w	r0, r3, r0
 80a77c2:	07c3      	lsls	r3, r0, #31
 80a77c4:	d409      	bmi.n	80a77da <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a77c6:	4620      	mov	r0, r4
 80a77c8:	f7ff ff98 	bl	80a76fc <pinAvailable>
 80a77cc:	b128      	cbz	r0, 80a77da <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a77ce:	4629      	mov	r1, r5
 80a77d0:	4620      	mov	r0, r4
}
 80a77d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a77d6:	f7fd be2d 	b.w	80a5434 <HAL_GPIO_Write>
}
 80a77da:	bd38      	pop	{r3, r4, r5, pc}

080a77dc <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a77dc:	b510      	push	{r4, lr}
 80a77de:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a77e0:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a77e2:	bf9c      	itt	ls
 80a77e4:	340a      	addls	r4, #10
 80a77e6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a77e8:	4620      	mov	r0, r4
 80a77ea:	f7ff ff87 	bl	80a76fc <pinAvailable>
 80a77ee:	b150      	cbz	r0, 80a7806 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a77f0:	2103      	movs	r1, #3
 80a77f2:	4620      	mov	r0, r4
 80a77f4:	f7fd fe06 	bl	80a5404 <HAL_Validate_Pin_Function>
 80a77f8:	2803      	cmp	r0, #3
 80a77fa:	d104      	bne.n	80a7806 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a77fc:	4620      	mov	r0, r4
}
 80a77fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a7802:	f7fd be1f 	b.w	80a5444 <hal_adc_read>
}
 80a7806:	2000      	movs	r0, #0
 80a7808:	bd10      	pop	{r4, pc}
	...

080a780c <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a780c:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a780e:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a7810:	2520      	movs	r5, #32
 80a7812:	8043      	strh	r3, [r0, #2]
 80a7814:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a7816:	4e08      	ldr	r6, [pc, #32]	; (80a7838 <_Z17acquireWireBufferv+0x2c>)
{
 80a7818:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a781a:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a781c:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a781e:	6085      	str	r5, [r0, #8]
 80a7820:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a7822:	4628      	mov	r0, r5
 80a7824:	f000 f851 	bl	80a78ca <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a7828:	4631      	mov	r1, r6
	};
 80a782a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a782c:	4628      	mov	r0, r5
 80a782e:	f000 f84c 	bl	80a78ca <_ZnajRKSt9nothrow_t>
	};
 80a7832:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a7834:	4620      	mov	r0, r4
 80a7836:	bd70      	pop	{r4, r5, r6, pc}
 80a7838:	080ad800 	.word	0x080ad800

080a783c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a783c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a783e:	4d0f      	ldr	r5, [pc, #60]	; (80a787c <_Z19__fetch_global_Wirev+0x40>)
{
 80a7840:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a7842:	7829      	ldrb	r1, [r5, #0]
 80a7844:	f3bf 8f5b 	dmb	ish
 80a7848:	f011 0401 	ands.w	r4, r1, #1
 80a784c:	d113      	bne.n	80a7876 <_Z19__fetch_global_Wirev+0x3a>
 80a784e:	4628      	mov	r0, r5
 80a7850:	f7f8 fc34 	bl	80a00bc <__cxa_guard_acquire>
 80a7854:	b178      	cbz	r0, 80a7876 <_Z19__fetch_global_Wirev+0x3a>
 80a7856:	a801      	add	r0, sp, #4
 80a7858:	f7ff ffd8 	bl	80a780c <_Z17acquireWireBufferv>
 80a785c:	4621      	mov	r1, r4
 80a785e:	aa01      	add	r2, sp, #4
 80a7860:	4807      	ldr	r0, [pc, #28]	; (80a7880 <_Z19__fetch_global_Wirev+0x44>)
 80a7862:	f7fe fb5d 	bl	80a5f20 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a7866:	4628      	mov	r0, r5
 80a7868:	f7f8 fc2d 	bl	80a00c6 <__cxa_guard_release>
 80a786c:	4a05      	ldr	r2, [pc, #20]	; (80a7884 <_Z19__fetch_global_Wirev+0x48>)
 80a786e:	4906      	ldr	r1, [pc, #24]	; (80a7888 <_Z19__fetch_global_Wirev+0x4c>)
 80a7870:	4803      	ldr	r0, [pc, #12]	; (80a7880 <_Z19__fetch_global_Wirev+0x44>)
 80a7872:	f000 f823 	bl	80a78bc <__aeabi_atexit>
	return wire;
}
 80a7876:	4802      	ldr	r0, [pc, #8]	; (80a7880 <_Z19__fetch_global_Wirev+0x44>)
 80a7878:	b007      	add	sp, #28
 80a787a:	bd30      	pop	{r4, r5, pc}
 80a787c:	200014f4 	.word	0x200014f4
 80a7880:	200014f8 	.word	0x200014f8
 80a7884:	2000006c 	.word	0x2000006c
 80a7888:	080a5ec9 	.word	0x080a5ec9

080a788c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a788c:	2300      	movs	r3, #0
 80a788e:	b513      	push	{r0, r1, r4, lr}
 80a7890:	4c07      	ldr	r4, [pc, #28]	; (80a78b0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a7892:	461a      	mov	r2, r3
 80a7894:	4619      	mov	r1, r3
 80a7896:	4620      	mov	r0, r4
 80a7898:	9300      	str	r3, [sp, #0]
 80a789a:	f7fe fbab 	bl	80a5ff4 <_ZN9IPAddressC1Ehhhh>
 80a789e:	4620      	mov	r0, r4
 80a78a0:	4a04      	ldr	r2, [pc, #16]	; (80a78b4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a78a2:	4905      	ldr	r1, [pc, #20]	; (80a78b8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a78a4:	b002      	add	sp, #8
 80a78a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a78aa:	f000 b807 	b.w	80a78bc <__aeabi_atexit>
 80a78ae:	bf00      	nop
 80a78b0:	2000150c 	.word	0x2000150c
 80a78b4:	2000006c 	.word	0x2000006c
 80a78b8:	080a5f45 	.word	0x080a5f45

080a78bc <__aeabi_atexit>:
 80a78bc:	460b      	mov	r3, r1
 80a78be:	4601      	mov	r1, r0
 80a78c0:	4618      	mov	r0, r3
 80a78c2:	f004 bdcf 	b.w	80ac464 <__cxa_atexit>

080a78c6 <_ZdlPvj>:
 80a78c6:	f7f8 bbec 	b.w	80a00a2 <_ZdlPv>

080a78ca <_ZnajRKSt9nothrow_t>:
 80a78ca:	f7f8 bbe8 	b.w	80a009e <_Znaj>

080a78ce <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 80a78ce:	68c3      	ldr	r3, [r0, #12]
 80a78d0:	b510      	push	{r4, lr}
 80a78d2:	689a      	ldr	r2, [r3, #8]
 80a78d4:	60c2      	str	r2, [r0, #12]
 80a78d6:	b102      	cbz	r2, 80a78da <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 80a78d8:	6050      	str	r0, [r2, #4]
 80a78da:	6842      	ldr	r2, [r0, #4]
 80a78dc:	605a      	str	r2, [r3, #4]
 80a78de:	680c      	ldr	r4, [r1, #0]
 80a78e0:	4284      	cmp	r4, r0
 80a78e2:	d103      	bne.n	80a78ec <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 80a78e4:	600b      	str	r3, [r1, #0]
 80a78e6:	6098      	str	r0, [r3, #8]
 80a78e8:	6043      	str	r3, [r0, #4]
 80a78ea:	bd10      	pop	{r4, pc}
 80a78ec:	6891      	ldr	r1, [r2, #8]
 80a78ee:	4281      	cmp	r1, r0
 80a78f0:	bf0c      	ite	eq
 80a78f2:	6093      	streq	r3, [r2, #8]
 80a78f4:	60d3      	strne	r3, [r2, #12]
 80a78f6:	e7f6      	b.n	80a78e6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

080a78f8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 80a78f8:	6883      	ldr	r3, [r0, #8]
 80a78fa:	b510      	push	{r4, lr}
 80a78fc:	68da      	ldr	r2, [r3, #12]
 80a78fe:	6082      	str	r2, [r0, #8]
 80a7900:	b102      	cbz	r2, 80a7904 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 80a7902:	6050      	str	r0, [r2, #4]
 80a7904:	6842      	ldr	r2, [r0, #4]
 80a7906:	605a      	str	r2, [r3, #4]
 80a7908:	680c      	ldr	r4, [r1, #0]
 80a790a:	4284      	cmp	r4, r0
 80a790c:	d103      	bne.n	80a7916 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 80a790e:	600b      	str	r3, [r1, #0]
 80a7910:	60d8      	str	r0, [r3, #12]
 80a7912:	6043      	str	r3, [r0, #4]
 80a7914:	bd10      	pop	{r4, pc}
 80a7916:	68d1      	ldr	r1, [r2, #12]
 80a7918:	4281      	cmp	r1, r0
 80a791a:	bf0c      	ite	eq
 80a791c:	60d3      	streq	r3, [r2, #12]
 80a791e:	6093      	strne	r3, [r2, #8]
 80a7920:	e7f6      	b.n	80a7910 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

080a7922 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80a7922:	7802      	ldrb	r2, [r0, #0]
 80a7924:	4603      	mov	r3, r0
 80a7926:	b92a      	cbnz	r2, 80a7934 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80a7928:	6842      	ldr	r2, [r0, #4]
 80a792a:	6852      	ldr	r2, [r2, #4]
 80a792c:	4282      	cmp	r2, r0
 80a792e:	d101      	bne.n	80a7934 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80a7930:	68d0      	ldr	r0, [r2, #12]
 80a7932:	4770      	bx	lr
 80a7934:	689a      	ldr	r2, [r3, #8]
 80a7936:	b122      	cbz	r2, 80a7942 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 80a7938:	4610      	mov	r0, r2
 80a793a:	68d2      	ldr	r2, [r2, #12]
 80a793c:	2a00      	cmp	r2, #0
 80a793e:	d1fb      	bne.n	80a7938 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 80a7940:	4770      	bx	lr
 80a7942:	6858      	ldr	r0, [r3, #4]
 80a7944:	6882      	ldr	r2, [r0, #8]
 80a7946:	429a      	cmp	r2, r3
 80a7948:	d102      	bne.n	80a7950 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2e>
 80a794a:	4603      	mov	r3, r0
 80a794c:	6840      	ldr	r0, [r0, #4]
 80a794e:	e7f9      	b.n	80a7944 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>
 80a7950:	4770      	bx	lr

080a7952 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80a7952:	68c3      	ldr	r3, [r0, #12]
 80a7954:	b123      	cbz	r3, 80a7960 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 80a7956:	4618      	mov	r0, r3
 80a7958:	689b      	ldr	r3, [r3, #8]
 80a795a:	2b00      	cmp	r3, #0
 80a795c:	d1fb      	bne.n	80a7956 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 80a795e:	4770      	bx	lr
 80a7960:	6843      	ldr	r3, [r0, #4]
 80a7962:	68da      	ldr	r2, [r3, #12]
 80a7964:	4282      	cmp	r2, r0
 80a7966:	d102      	bne.n	80a796e <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 80a7968:	4618      	mov	r0, r3
 80a796a:	685b      	ldr	r3, [r3, #4]
 80a796c:	e7f9      	b.n	80a7962 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 80a796e:	68c2      	ldr	r2, [r0, #12]
 80a7970:	4293      	cmp	r3, r2
 80a7972:	bf18      	it	ne
 80a7974:	4618      	movne	r0, r3
 80a7976:	4770      	bx	lr

080a7978 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>:
 80a7978:	68c3      	ldr	r3, [r0, #12]
 80a797a:	b123      	cbz	r3, 80a7986 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0xe>
 80a797c:	4618      	mov	r0, r3
 80a797e:	689b      	ldr	r3, [r3, #8]
 80a7980:	2b00      	cmp	r3, #0
 80a7982:	d1fb      	bne.n	80a797c <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x4>
 80a7984:	4770      	bx	lr
 80a7986:	6843      	ldr	r3, [r0, #4]
 80a7988:	68da      	ldr	r2, [r3, #12]
 80a798a:	4282      	cmp	r2, r0
 80a798c:	d102      	bne.n	80a7994 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x1c>
 80a798e:	4618      	mov	r0, r3
 80a7990:	685b      	ldr	r3, [r3, #4]
 80a7992:	e7f9      	b.n	80a7988 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x10>
 80a7994:	68c2      	ldr	r2, [r0, #12]
 80a7996:	4293      	cmp	r3, r2
 80a7998:	bf18      	it	ne
 80a799a:	4618      	movne	r0, r3
 80a799c:	4770      	bx	lr

080a799e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80a799e:	f7ff bfc0 	b.w	80a7922 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

080a79a2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 80a79a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a79a6:	461e      	mov	r6, r3
 80a79a8:	f103 0804 	add.w	r8, r3, #4
 80a79ac:	2300      	movs	r3, #0
 80a79ae:	460c      	mov	r4, r1
 80a79b0:	e9c1 3302 	strd	r3, r3, [r1, #8]
 80a79b4:	604a      	str	r2, [r1, #4]
 80a79b6:	700b      	strb	r3, [r1, #0]
 80a79b8:	b300      	cbz	r0, 80a79fc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 80a79ba:	4296      	cmp	r6, r2
 80a79bc:	6091      	str	r1, [r2, #8]
 80a79be:	d118      	bne.n	80a79f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 80a79c0:	6071      	str	r1, [r6, #4]
 80a79c2:	60f4      	str	r4, [r6, #12]
 80a79c4:	2701      	movs	r7, #1
 80a79c6:	f04f 0900 	mov.w	r9, #0
 80a79ca:	6873      	ldr	r3, [r6, #4]
 80a79cc:	42a3      	cmp	r3, r4
 80a79ce:	d03f      	beq.n	80a7a50 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 80a79d0:	6860      	ldr	r0, [r4, #4]
 80a79d2:	7802      	ldrb	r2, [r0, #0]
 80a79d4:	2a00      	cmp	r2, #0
 80a79d6:	d13c      	bne.n	80a7a52 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
 80a79d8:	6845      	ldr	r5, [r0, #4]
 80a79da:	68ab      	ldr	r3, [r5, #8]
 80a79dc:	4298      	cmp	r0, r3
 80a79de:	d123      	bne.n	80a7a28 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 80a79e0:	68eb      	ldr	r3, [r5, #12]
 80a79e2:	b183      	cbz	r3, 80a7a06 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80a79e4:	781a      	ldrb	r2, [r3, #0]
 80a79e6:	b972      	cbnz	r2, 80a7a06 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80a79e8:	7007      	strb	r7, [r0, #0]
 80a79ea:	701f      	strb	r7, [r3, #0]
 80a79ec:	702a      	strb	r2, [r5, #0]
 80a79ee:	462c      	mov	r4, r5
 80a79f0:	e7eb      	b.n	80a79ca <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 80a79f2:	68b3      	ldr	r3, [r6, #8]
 80a79f4:	4293      	cmp	r3, r2
 80a79f6:	d1e5      	bne.n	80a79c4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80a79f8:	60b1      	str	r1, [r6, #8]
 80a79fa:	e7e3      	b.n	80a79c4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80a79fc:	60d1      	str	r1, [r2, #12]
 80a79fe:	68f3      	ldr	r3, [r6, #12]
 80a7a00:	4293      	cmp	r3, r2
 80a7a02:	d1df      	bne.n	80a79c4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80a7a04:	e7dd      	b.n	80a79c2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 80a7a06:	68c3      	ldr	r3, [r0, #12]
 80a7a08:	42a3      	cmp	r3, r4
 80a7a0a:	d103      	bne.n	80a7a14 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 80a7a0c:	4641      	mov	r1, r8
 80a7a0e:	f7ff ff5e 	bl	80a78ce <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80a7a12:	4604      	mov	r4, r0
 80a7a14:	6863      	ldr	r3, [r4, #4]
 80a7a16:	4641      	mov	r1, r8
 80a7a18:	701f      	strb	r7, [r3, #0]
 80a7a1a:	4628      	mov	r0, r5
 80a7a1c:	f885 9000 	strb.w	r9, [r5]
 80a7a20:	f7ff ff6a 	bl	80a78f8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80a7a24:	4625      	mov	r5, r4
 80a7a26:	e7e2      	b.n	80a79ee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 80a7a28:	b113      	cbz	r3, 80a7a30 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 80a7a2a:	781a      	ldrb	r2, [r3, #0]
 80a7a2c:	2a00      	cmp	r2, #0
 80a7a2e:	d0db      	beq.n	80a79e8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 80a7a30:	6883      	ldr	r3, [r0, #8]
 80a7a32:	42a3      	cmp	r3, r4
 80a7a34:	d103      	bne.n	80a7a3e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 80a7a36:	4641      	mov	r1, r8
 80a7a38:	f7ff ff5e 	bl	80a78f8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80a7a3c:	4604      	mov	r4, r0
 80a7a3e:	6863      	ldr	r3, [r4, #4]
 80a7a40:	4641      	mov	r1, r8
 80a7a42:	701f      	strb	r7, [r3, #0]
 80a7a44:	4628      	mov	r0, r5
 80a7a46:	f885 9000 	strb.w	r9, [r5]
 80a7a4a:	f7ff ff40 	bl	80a78ce <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80a7a4e:	e7e9      	b.n	80a7a24 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 80a7a50:	4623      	mov	r3, r4
 80a7a52:	2201      	movs	r2, #1
 80a7a54:	701a      	strb	r2, [r3, #0]
 80a7a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a7a5a <_ZSt20__throw_length_errorPKc>:
 80a7a5a:	b508      	push	{r3, lr}
 80a7a5c:	f7fd ff40 	bl	80a58e0 <abort>

080a7a60 <_ZSt25__throw_bad_function_callv>:
 80a7a60:	b508      	push	{r3, lr}
 80a7a62:	f7fd ff3d 	bl	80a58e0 <abort>
	...

080a7a68 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a7a68:	4901      	ldr	r1, [pc, #4]	; (80a7a70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a7a6a:	f000 b8fb 	b.w	80a7c64 <_ZNKSt9type_infoeqERKS_>
 80a7a6e:	bf00      	nop
 80a7a70:	080ad81c 	.word	0x080ad81c

080a7a74 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a7a74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a7a76:	2400      	movs	r4, #0
 80a7a78:	2310      	movs	r3, #16
 80a7a7a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a7a7e:	6803      	ldr	r3, [r0, #0]
 80a7a80:	4615      	mov	r5, r2
 80a7a82:	699e      	ldr	r6, [r3, #24]
 80a7a84:	6812      	ldr	r2, [r2, #0]
 80a7a86:	466b      	mov	r3, sp
 80a7a88:	9400      	str	r4, [sp, #0]
 80a7a8a:	f88d 4004 	strb.w	r4, [sp, #4]
 80a7a8e:	47b0      	blx	r6
 80a7a90:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a7a94:	f003 0306 	and.w	r3, r3, #6
 80a7a98:	2b06      	cmp	r3, #6
 80a7a9a:	bf09      	itett	eq
 80a7a9c:	2001      	moveq	r0, #1
 80a7a9e:	4620      	movne	r0, r4
 80a7aa0:	9b00      	ldreq	r3, [sp, #0]
 80a7aa2:	602b      	streq	r3, [r5, #0]
 80a7aa4:	b004      	add	sp, #16
 80a7aa6:	bd70      	pop	{r4, r5, r6, pc}

080a7aa8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a7aa8:	9800      	ldr	r0, [sp, #0]
 80a7aaa:	4290      	cmp	r0, r2
 80a7aac:	bf14      	ite	ne
 80a7aae:	2001      	movne	r0, #1
 80a7ab0:	2006      	moveq	r0, #6
 80a7ab2:	4770      	bx	lr

080a7ab4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a7ab4:	b510      	push	{r4, lr}
 80a7ab6:	4604      	mov	r4, r0
 80a7ab8:	4b02      	ldr	r3, [pc, #8]	; (80a7ac4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a7aba:	6003      	str	r3, [r0, #0]
 80a7abc:	f000 f8cf 	bl	80a7c5e <_ZNSt9type_infoD1Ev>
 80a7ac0:	4620      	mov	r0, r4
 80a7ac2:	bd10      	pop	{r4, pc}
 80a7ac4:	080ad85c 	.word	0x080ad85c

080a7ac8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a7ac8:	b510      	push	{r4, lr}
 80a7aca:	4604      	mov	r4, r0
 80a7acc:	f7ff fff2 	bl	80a7ab4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a7ad0:	4620      	mov	r0, r4
 80a7ad2:	2108      	movs	r1, #8
 80a7ad4:	f7ff fef7 	bl	80a78c6 <_ZdlPvj>
 80a7ad8:	4620      	mov	r0, r4
 80a7ada:	bd10      	pop	{r4, pc}

080a7adc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a7adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7ae0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a7ae4:	461f      	mov	r7, r3
 80a7ae6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a7aea:	4598      	cmp	r8, r3
 80a7aec:	4606      	mov	r6, r0
 80a7aee:	4615      	mov	r5, r2
 80a7af0:	d107      	bne.n	80a7b02 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a7af2:	9907      	ldr	r1, [sp, #28]
 80a7af4:	f000 f8b6 	bl	80a7c64 <_ZNKSt9type_infoeqERKS_>
 80a7af8:	b118      	cbz	r0, 80a7b02 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a7afa:	7165      	strb	r5, [r4, #5]
 80a7afc:	2000      	movs	r0, #0
 80a7afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a7b02:	4639      	mov	r1, r7
 80a7b04:	4630      	mov	r0, r6
 80a7b06:	f000 f8ad 	bl	80a7c64 <_ZNKSt9type_infoeqERKS_>
 80a7b0a:	2800      	cmp	r0, #0
 80a7b0c:	d0f6      	beq.n	80a7afc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a7b0e:	2301      	movs	r3, #1
 80a7b10:	f8c4 8000 	str.w	r8, [r4]
 80a7b14:	7125      	strb	r5, [r4, #4]
 80a7b16:	71a3      	strb	r3, [r4, #6]
 80a7b18:	e7f0      	b.n	80a7afc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a7b1a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a7b1a:	b538      	push	{r3, r4, r5, lr}
 80a7b1c:	4615      	mov	r5, r2
 80a7b1e:	461c      	mov	r4, r3
 80a7b20:	f000 f8a0 	bl	80a7c64 <_ZNKSt9type_infoeqERKS_>
 80a7b24:	b120      	cbz	r0, 80a7b30 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a7b26:	2308      	movs	r3, #8
 80a7b28:	60e3      	str	r3, [r4, #12]
 80a7b2a:	2306      	movs	r3, #6
 80a7b2c:	6025      	str	r5, [r4, #0]
 80a7b2e:	7123      	strb	r3, [r4, #4]
 80a7b30:	bd38      	pop	{r3, r4, r5, pc}

080a7b32 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a7b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7b36:	4605      	mov	r5, r0
 80a7b38:	460c      	mov	r4, r1
 80a7b3a:	4616      	mov	r6, r2
 80a7b3c:	461f      	mov	r7, r3
 80a7b3e:	f000 f891 	bl	80a7c64 <_ZNKSt9type_infoeqERKS_>
 80a7b42:	b948      	cbnz	r0, 80a7b58 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a7b44:	2f03      	cmp	r7, #3
 80a7b46:	d807      	bhi.n	80a7b58 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a7b48:	6823      	ldr	r3, [r4, #0]
 80a7b4a:	4632      	mov	r2, r6
 80a7b4c:	4629      	mov	r1, r5
 80a7b4e:	4620      	mov	r0, r4
 80a7b50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a7b54:	695b      	ldr	r3, [r3, #20]
 80a7b56:	4718      	bx	r3
 80a7b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a7b5c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a7b5c:	b510      	push	{r4, lr}
 80a7b5e:	4604      	mov	r4, r0
 80a7b60:	4b02      	ldr	r3, [pc, #8]	; (80a7b6c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a7b62:	6003      	str	r3, [r0, #0]
 80a7b64:	f7ff ffa6 	bl	80a7ab4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a7b68:	4620      	mov	r0, r4
 80a7b6a:	bd10      	pop	{r4, pc}
 80a7b6c:	080ad8bc 	.word	0x080ad8bc

080a7b70 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a7b70:	b510      	push	{r4, lr}
 80a7b72:	4604      	mov	r4, r0
 80a7b74:	f7ff fff2 	bl	80a7b5c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a7b78:	4620      	mov	r0, r4
 80a7b7a:	210c      	movs	r1, #12
 80a7b7c:	f7ff fea3 	bl	80a78c6 <_ZdlPvj>
 80a7b80:	4620      	mov	r0, r4
 80a7b82:	bd10      	pop	{r4, pc}

080a7b84 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a7b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7b88:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a7b8c:	4606      	mov	r6, r0
 80a7b8e:	4590      	cmp	r8, r2
 80a7b90:	460f      	mov	r7, r1
 80a7b92:	4615      	mov	r5, r2
 80a7b94:	461c      	mov	r4, r3
 80a7b96:	d00b      	beq.n	80a7bb0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a7b98:	68b0      	ldr	r0, [r6, #8]
 80a7b9a:	462a      	mov	r2, r5
 80a7b9c:	6803      	ldr	r3, [r0, #0]
 80a7b9e:	f8cd 8018 	str.w	r8, [sp, #24]
 80a7ba2:	6a1e      	ldr	r6, [r3, #32]
 80a7ba4:	4639      	mov	r1, r7
 80a7ba6:	4623      	mov	r3, r4
 80a7ba8:	46b4      	mov	ip, r6
 80a7baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a7bae:	4760      	bx	ip
 80a7bb0:	4619      	mov	r1, r3
 80a7bb2:	f000 f857 	bl	80a7c64 <_ZNKSt9type_infoeqERKS_>
 80a7bb6:	2800      	cmp	r0, #0
 80a7bb8:	d0ee      	beq.n	80a7b98 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a7bba:	2006      	movs	r0, #6
 80a7bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a7bc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a7bc0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7bc4:	460d      	mov	r5, r1
 80a7bc6:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a7bca:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a7bce:	4619      	mov	r1, r3
 80a7bd0:	4681      	mov	r9, r0
 80a7bd2:	4617      	mov	r7, r2
 80a7bd4:	4698      	mov	r8, r3
 80a7bd6:	f000 f845 	bl	80a7c64 <_ZNKSt9type_infoeqERKS_>
 80a7bda:	b190      	cbz	r0, 80a7c02 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a7bdc:	2d00      	cmp	r5, #0
 80a7bde:	6034      	str	r4, [r6, #0]
 80a7be0:	7137      	strb	r7, [r6, #4]
 80a7be2:	db09      	blt.n	80a7bf8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a7be4:	442c      	add	r4, r5
 80a7be6:	45a2      	cmp	sl, r4
 80a7be8:	bf0c      	ite	eq
 80a7bea:	2406      	moveq	r4, #6
 80a7bec:	2401      	movne	r4, #1
 80a7bee:	71b4      	strb	r4, [r6, #6]
 80a7bf0:	2000      	movs	r0, #0
 80a7bf2:	b001      	add	sp, #4
 80a7bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7bf8:	3502      	adds	r5, #2
 80a7bfa:	d1f9      	bne.n	80a7bf0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a7bfc:	2301      	movs	r3, #1
 80a7bfe:	71b3      	strb	r3, [r6, #6]
 80a7c00:	e7f6      	b.n	80a7bf0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a7c02:	4554      	cmp	r4, sl
 80a7c04:	d106      	bne.n	80a7c14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a7c06:	4659      	mov	r1, fp
 80a7c08:	4648      	mov	r0, r9
 80a7c0a:	f000 f82b 	bl	80a7c64 <_ZNKSt9type_infoeqERKS_>
 80a7c0e:	b108      	cbz	r0, 80a7c14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a7c10:	7177      	strb	r7, [r6, #5]
 80a7c12:	e7ed      	b.n	80a7bf0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a7c14:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a7c18:	463a      	mov	r2, r7
 80a7c1a:	6803      	ldr	r3, [r0, #0]
 80a7c1c:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a7c20:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a7c24:	69dc      	ldr	r4, [r3, #28]
 80a7c26:	4629      	mov	r1, r5
 80a7c28:	4643      	mov	r3, r8
 80a7c2a:	46a4      	mov	ip, r4
 80a7c2c:	b001      	add	sp, #4
 80a7c2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7c32:	4760      	bx	ip

080a7c34 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a7c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7c38:	4607      	mov	r7, r0
 80a7c3a:	460c      	mov	r4, r1
 80a7c3c:	4615      	mov	r5, r2
 80a7c3e:	461e      	mov	r6, r3
 80a7c40:	f7ff ff6b 	bl	80a7b1a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a7c44:	b948      	cbnz	r0, 80a7c5a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a7c46:	68b8      	ldr	r0, [r7, #8]
 80a7c48:	462a      	mov	r2, r5
 80a7c4a:	6803      	ldr	r3, [r0, #0]
 80a7c4c:	4621      	mov	r1, r4
 80a7c4e:	699f      	ldr	r7, [r3, #24]
 80a7c50:	4633      	mov	r3, r6
 80a7c52:	46bc      	mov	ip, r7
 80a7c54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a7c58:	4760      	bx	ip
 80a7c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a7c5e <_ZNSt9type_infoD1Ev>:
 80a7c5e:	4770      	bx	lr

080a7c60 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a7c60:	2000      	movs	r0, #0
 80a7c62:	4770      	bx	lr

080a7c64 <_ZNKSt9type_infoeqERKS_>:
 80a7c64:	4281      	cmp	r1, r0
 80a7c66:	b508      	push	{r3, lr}
 80a7c68:	d00e      	beq.n	80a7c88 <_ZNKSt9type_infoeqERKS_+0x24>
 80a7c6a:	6840      	ldr	r0, [r0, #4]
 80a7c6c:	7803      	ldrb	r3, [r0, #0]
 80a7c6e:	2b2a      	cmp	r3, #42	; 0x2a
 80a7c70:	d00c      	beq.n	80a7c8c <_ZNKSt9type_infoeqERKS_+0x28>
 80a7c72:	6849      	ldr	r1, [r1, #4]
 80a7c74:	780b      	ldrb	r3, [r1, #0]
 80a7c76:	2b2a      	cmp	r3, #42	; 0x2a
 80a7c78:	bf08      	it	eq
 80a7c7a:	3101      	addeq	r1, #1
 80a7c7c:	f004 fc95 	bl	80ac5aa <strcmp>
 80a7c80:	fab0 f080 	clz	r0, r0
 80a7c84:	0940      	lsrs	r0, r0, #5
 80a7c86:	bd08      	pop	{r3, pc}
 80a7c88:	2001      	movs	r0, #1
 80a7c8a:	e7fc      	b.n	80a7c86 <_ZNKSt9type_infoeqERKS_+0x22>
 80a7c8c:	2000      	movs	r0, #0
 80a7c8e:	e7fa      	b.n	80a7c86 <_ZNKSt9type_infoeqERKS_+0x22>

080a7c90 <cos>:
 80a7c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a7c92:	4d28      	ldr	r5, [pc, #160]	; (80a7d34 <cos+0xa4>)
 80a7c94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a7c98:	42ab      	cmp	r3, r5
 80a7c9a:	b087      	sub	sp, #28
 80a7c9c:	dd21      	ble.n	80a7ce2 <cos+0x52>
 80a7c9e:	4d26      	ldr	r5, [pc, #152]	; (80a7d38 <cos+0xa8>)
 80a7ca0:	42ab      	cmp	r3, r5
 80a7ca2:	dd09      	ble.n	80a7cb8 <cos+0x28>
 80a7ca4:	4602      	mov	r2, r0
 80a7ca6:	460b      	mov	r3, r1
 80a7ca8:	f003 fbac 	bl	80ab404 <__aeabi_dsub>
 80a7cac:	4602      	mov	r2, r0
 80a7cae:	460b      	mov	r3, r1
 80a7cb0:	4610      	mov	r0, r2
 80a7cb2:	4619      	mov	r1, r3
 80a7cb4:	b007      	add	sp, #28
 80a7cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a7cb8:	aa02      	add	r2, sp, #8
 80a7cba:	f001 f891 	bl	80a8de0 <__ieee754_rem_pio2>
 80a7cbe:	f000 0003 	and.w	r0, r0, #3
 80a7cc2:	2801      	cmp	r0, #1
 80a7cc4:	d017      	beq.n	80a7cf6 <cos+0x66>
 80a7cc6:	2802      	cmp	r0, #2
 80a7cc8:	d029      	beq.n	80a7d1e <cos+0x8e>
 80a7cca:	b1f8      	cbz	r0, 80a7d0c <cos+0x7c>
 80a7ccc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a7cd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a7cd4:	2401      	movs	r4, #1
 80a7cd6:	9400      	str	r4, [sp, #0]
 80a7cd8:	f002 fbea 	bl	80aa4b0 <__kernel_sin>
 80a7cdc:	4602      	mov	r2, r0
 80a7cde:	460b      	mov	r3, r1
 80a7ce0:	e7e6      	b.n	80a7cb0 <cos+0x20>
 80a7ce2:	2200      	movs	r2, #0
 80a7ce4:	2300      	movs	r3, #0
 80a7ce6:	f001 fe97 	bl	80a9a18 <__kernel_cos>
 80a7cea:	4602      	mov	r2, r0
 80a7cec:	460b      	mov	r3, r1
 80a7cee:	4610      	mov	r0, r2
 80a7cf0:	4619      	mov	r1, r3
 80a7cf2:	b007      	add	sp, #28
 80a7cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a7cf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a7cfa:	9000      	str	r0, [sp, #0]
 80a7cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a7d00:	f002 fbd6 	bl	80aa4b0 <__kernel_sin>
 80a7d04:	4602      	mov	r2, r0
 80a7d06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a7d0a:	e7d1      	b.n	80a7cb0 <cos+0x20>
 80a7d0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a7d10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a7d14:	f001 fe80 	bl	80a9a18 <__kernel_cos>
 80a7d18:	4602      	mov	r2, r0
 80a7d1a:	460b      	mov	r3, r1
 80a7d1c:	e7c8      	b.n	80a7cb0 <cos+0x20>
 80a7d1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a7d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a7d26:	f001 fe77 	bl	80a9a18 <__kernel_cos>
 80a7d2a:	4602      	mov	r2, r0
 80a7d2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a7d30:	e7be      	b.n	80a7cb0 <cos+0x20>
 80a7d32:	bf00      	nop
 80a7d34:	3fe921fb 	.word	0x3fe921fb
 80a7d38:	7fefffff 	.word	0x7fefffff

080a7d3c <cosf>:
 80a7d3c:	b500      	push	{lr}
 80a7d3e:	4a1c      	ldr	r2, [pc, #112]	; (80a7db0 <cosf+0x74>)
 80a7d40:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80a7d44:	4293      	cmp	r3, r2
 80a7d46:	b083      	sub	sp, #12
 80a7d48:	dd18      	ble.n	80a7d7c <cosf+0x40>
 80a7d4a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80a7d4e:	db05      	blt.n	80a7d5c <cosf+0x20>
 80a7d50:	4601      	mov	r1, r0
 80a7d52:	f004 f85b 	bl	80abe0c <__aeabi_fsub>
 80a7d56:	b003      	add	sp, #12
 80a7d58:	f85d fb04 	ldr.w	pc, [sp], #4
 80a7d5c:	4669      	mov	r1, sp
 80a7d5e:	f001 fce7 	bl	80a9730 <__ieee754_rem_pio2f>
 80a7d62:	f000 0203 	and.w	r2, r0, #3
 80a7d66:	2a01      	cmp	r2, #1
 80a7d68:	d00e      	beq.n	80a7d88 <cosf+0x4c>
 80a7d6a:	2a02      	cmp	r2, #2
 80a7d6c:	d018      	beq.n	80a7da0 <cosf+0x64>
 80a7d6e:	b192      	cbz	r2, 80a7d96 <cosf+0x5a>
 80a7d70:	2201      	movs	r2, #1
 80a7d72:	9901      	ldr	r1, [sp, #4]
 80a7d74:	9800      	ldr	r0, [sp, #0]
 80a7d76:	f003 f895 	bl	80aaea4 <__kernel_sinf>
 80a7d7a:	e7ec      	b.n	80a7d56 <cosf+0x1a>
 80a7d7c:	2100      	movs	r1, #0
 80a7d7e:	f002 fc59 	bl	80aa634 <__kernel_cosf>
 80a7d82:	b003      	add	sp, #12
 80a7d84:	f85d fb04 	ldr.w	pc, [sp], #4
 80a7d88:	9901      	ldr	r1, [sp, #4]
 80a7d8a:	9800      	ldr	r0, [sp, #0]
 80a7d8c:	f003 f88a 	bl	80aaea4 <__kernel_sinf>
 80a7d90:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a7d94:	e7df      	b.n	80a7d56 <cosf+0x1a>
 80a7d96:	9901      	ldr	r1, [sp, #4]
 80a7d98:	9800      	ldr	r0, [sp, #0]
 80a7d9a:	f002 fc4b 	bl	80aa634 <__kernel_cosf>
 80a7d9e:	e7da      	b.n	80a7d56 <cosf+0x1a>
 80a7da0:	9901      	ldr	r1, [sp, #4]
 80a7da2:	9800      	ldr	r0, [sp, #0]
 80a7da4:	f002 fc46 	bl	80aa634 <__kernel_cosf>
 80a7da8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a7dac:	e7d3      	b.n	80a7d56 <cosf+0x1a>
 80a7dae:	bf00      	nop
 80a7db0:	3f490fd8 	.word	0x3f490fd8

080a7db4 <pow>:
 80a7db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7db8:	b08f      	sub	sp, #60	; 0x3c
 80a7dba:	461d      	mov	r5, r3
 80a7dbc:	4606      	mov	r6, r0
 80a7dbe:	460f      	mov	r7, r1
 80a7dc0:	4614      	mov	r4, r2
 80a7dc2:	f000 fa75 	bl	80a82b0 <__ieee754_pow>
 80a7dc6:	4ba4      	ldr	r3, [pc, #656]	; (80a8058 <pow+0x2a4>)
 80a7dc8:	e9cd 0100 	strd	r0, r1, [sp]
 80a7dcc:	f993 9000 	ldrsb.w	r9, [r3]
 80a7dd0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80a7dd4:	d038      	beq.n	80a7e48 <pow+0x94>
 80a7dd6:	4622      	mov	r2, r4
 80a7dd8:	462b      	mov	r3, r5
 80a7dda:	4620      	mov	r0, r4
 80a7ddc:	4629      	mov	r1, r5
 80a7dde:	f003 ff63 	bl	80abca8 <__aeabi_dcmpun>
 80a7de2:	4683      	mov	fp, r0
 80a7de4:	bb80      	cbnz	r0, 80a7e48 <pow+0x94>
 80a7de6:	4632      	mov	r2, r6
 80a7de8:	463b      	mov	r3, r7
 80a7dea:	4630      	mov	r0, r6
 80a7dec:	4639      	mov	r1, r7
 80a7dee:	f003 ff5b 	bl	80abca8 <__aeabi_dcmpun>
 80a7df2:	4680      	mov	r8, r0
 80a7df4:	2800      	cmp	r0, #0
 80a7df6:	f040 80d9 	bne.w	80a7fac <pow+0x1f8>
 80a7dfa:	f04f 0a00 	mov.w	sl, #0
 80a7dfe:	f04f 0b00 	mov.w	fp, #0
 80a7e02:	4630      	mov	r0, r6
 80a7e04:	4639      	mov	r1, r7
 80a7e06:	4652      	mov	r2, sl
 80a7e08:	465b      	mov	r3, fp
 80a7e0a:	f003 ff1b 	bl	80abc44 <__aeabi_dcmpeq>
 80a7e0e:	b300      	cbz	r0, 80a7e52 <pow+0x9e>
 80a7e10:	4652      	mov	r2, sl
 80a7e12:	465b      	mov	r3, fp
 80a7e14:	4620      	mov	r0, r4
 80a7e16:	4629      	mov	r1, r5
 80a7e18:	f003 ff14 	bl	80abc44 <__aeabi_dcmpeq>
 80a7e1c:	9003      	str	r0, [sp, #12]
 80a7e1e:	2800      	cmp	r0, #0
 80a7e20:	d048      	beq.n	80a7eb4 <pow+0x100>
 80a7e22:	2201      	movs	r2, #1
 80a7e24:	4b8d      	ldr	r3, [pc, #564]	; (80a805c <pow+0x2a8>)
 80a7e26:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a7e2a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a7e2e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80a7e32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a7e36:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80a7e3a:	f1b9 0f00 	cmp.w	r9, #0
 80a7e3e:	d068      	beq.n	80a7f12 <pow+0x15e>
 80a7e40:	2300      	movs	r3, #0
 80a7e42:	4c87      	ldr	r4, [pc, #540]	; (80a8060 <pow+0x2ac>)
 80a7e44:	e9cd 3400 	strd	r3, r4, [sp]
 80a7e48:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a7e4c:	b00f      	add	sp, #60	; 0x3c
 80a7e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7e52:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a7e56:	f003 f89f 	bl	80aaf98 <finite>
 80a7e5a:	4680      	mov	r8, r0
 80a7e5c:	2800      	cmp	r0, #0
 80a7e5e:	d069      	beq.n	80a7f34 <pow+0x180>
 80a7e60:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a7e64:	f04f 0800 	mov.w	r8, #0
 80a7e68:	f04f 0900 	mov.w	r9, #0
 80a7e6c:	4642      	mov	r2, r8
 80a7e6e:	464b      	mov	r3, r9
 80a7e70:	f003 fee8 	bl	80abc44 <__aeabi_dcmpeq>
 80a7e74:	2800      	cmp	r0, #0
 80a7e76:	d0e7      	beq.n	80a7e48 <pow+0x94>
 80a7e78:	4630      	mov	r0, r6
 80a7e7a:	4639      	mov	r1, r7
 80a7e7c:	f003 f88c 	bl	80aaf98 <finite>
 80a7e80:	2800      	cmp	r0, #0
 80a7e82:	d0e1      	beq.n	80a7e48 <pow+0x94>
 80a7e84:	4620      	mov	r0, r4
 80a7e86:	4629      	mov	r1, r5
 80a7e88:	f003 f886 	bl	80aaf98 <finite>
 80a7e8c:	2800      	cmp	r0, #0
 80a7e8e:	d0db      	beq.n	80a7e48 <pow+0x94>
 80a7e90:	2004      	movs	r0, #4
 80a7e92:	2100      	movs	r1, #0
 80a7e94:	4b70      	ldr	r3, [pc, #448]	; (80a8058 <pow+0x2a4>)
 80a7e96:	4a71      	ldr	r2, [pc, #452]	; (80a805c <pow+0x2a8>)
 80a7e98:	f993 3000 	ldrsb.w	r3, [r3]
 80a7e9c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a7ea0:	2b02      	cmp	r3, #2
 80a7ea2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a7ea6:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a7eaa:	9004      	str	r0, [sp, #16]
 80a7eac:	910c      	str	r1, [sp, #48]	; 0x30
 80a7eae:	9205      	str	r2, [sp, #20]
 80a7eb0:	d172      	bne.n	80a7f98 <pow+0x1e4>
 80a7eb2:	e076      	b.n	80a7fa2 <pow+0x1ee>
 80a7eb4:	4620      	mov	r0, r4
 80a7eb6:	4629      	mov	r1, r5
 80a7eb8:	f003 f86e 	bl	80aaf98 <finite>
 80a7ebc:	2800      	cmp	r0, #0
 80a7ebe:	d0c3      	beq.n	80a7e48 <pow+0x94>
 80a7ec0:	4652      	mov	r2, sl
 80a7ec2:	465b      	mov	r3, fp
 80a7ec4:	4620      	mov	r0, r4
 80a7ec6:	4629      	mov	r1, r5
 80a7ec8:	f003 fec6 	bl	80abc58 <__aeabi_dcmplt>
 80a7ecc:	2800      	cmp	r0, #0
 80a7ece:	d0bb      	beq.n	80a7e48 <pow+0x94>
 80a7ed0:	2101      	movs	r1, #1
 80a7ed2:	9a03      	ldr	r2, [sp, #12]
 80a7ed4:	4b60      	ldr	r3, [pc, #384]	; (80a8058 <pow+0x2a4>)
 80a7ed6:	920c      	str	r2, [sp, #48]	; 0x30
 80a7ed8:	f993 3000 	ldrsb.w	r3, [r3]
 80a7edc:	4a5f      	ldr	r2, [pc, #380]	; (80a805c <pow+0x2a8>)
 80a7ede:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a7ee2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a7ee6:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80a7eea:	2b00      	cmp	r3, #0
 80a7eec:	d17b      	bne.n	80a7fe6 <pow+0x232>
 80a7eee:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80a7ef2:	a804      	add	r0, sp, #16
 80a7ef4:	f003 f8d4 	bl	80ab0a0 <matherr>
 80a7ef8:	2800      	cmp	r0, #0
 80a7efa:	d07b      	beq.n	80a7ff4 <pow+0x240>
 80a7efc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a7efe:	b11b      	cbz	r3, 80a7f08 <pow+0x154>
 80a7f00:	f7fd fcfe 	bl	80a5900 <__errno>
 80a7f04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a7f06:	6003      	str	r3, [r0, #0]
 80a7f08:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80a7f0c:	e9cd 3400 	strd	r3, r4, [sp]
 80a7f10:	e79a      	b.n	80a7e48 <pow+0x94>
 80a7f12:	a804      	add	r0, sp, #16
 80a7f14:	f003 f8c4 	bl	80ab0a0 <matherr>
 80a7f18:	2800      	cmp	r0, #0
 80a7f1a:	d070      	beq.n	80a7ffe <pow+0x24a>
 80a7f1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a7f1e:	2b00      	cmp	r3, #0
 80a7f20:	d0f2      	beq.n	80a7f08 <pow+0x154>
 80a7f22:	f7fd fced 	bl	80a5900 <__errno>
 80a7f26:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80a7f2a:	e9cd 3400 	strd	r3, r4, [sp]
 80a7f2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a7f30:	6003      	str	r3, [r0, #0]
 80a7f32:	e789      	b.n	80a7e48 <pow+0x94>
 80a7f34:	4630      	mov	r0, r6
 80a7f36:	4639      	mov	r1, r7
 80a7f38:	f003 f82e 	bl	80aaf98 <finite>
 80a7f3c:	2800      	cmp	r0, #0
 80a7f3e:	d08f      	beq.n	80a7e60 <pow+0xac>
 80a7f40:	4620      	mov	r0, r4
 80a7f42:	4629      	mov	r1, r5
 80a7f44:	f003 f828 	bl	80aaf98 <finite>
 80a7f48:	2800      	cmp	r0, #0
 80a7f4a:	d089      	beq.n	80a7e60 <pow+0xac>
 80a7f4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a7f50:	4610      	mov	r0, r2
 80a7f52:	4619      	mov	r1, r3
 80a7f54:	f003 fea8 	bl	80abca8 <__aeabi_dcmpun>
 80a7f58:	2800      	cmp	r0, #0
 80a7f5a:	f040 80a4 	bne.w	80a80a6 <pow+0x2f2>
 80a7f5e:	2203      	movs	r2, #3
 80a7f60:	9204      	str	r2, [sp, #16]
 80a7f62:	4a3d      	ldr	r2, [pc, #244]	; (80a8058 <pow+0x2a4>)
 80a7f64:	4b3d      	ldr	r3, [pc, #244]	; (80a805c <pow+0x2a8>)
 80a7f66:	f992 8000 	ldrsb.w	r8, [r2]
 80a7f6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a7f6e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a7f72:	900c      	str	r0, [sp, #48]	; 0x30
 80a7f74:	9305      	str	r3, [sp, #20]
 80a7f76:	f1b8 0f00 	cmp.w	r8, #0
 80a7f7a:	d145      	bne.n	80a8008 <pow+0x254>
 80a7f7c:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
 80a7f80:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80a8074 <pow+0x2c0>
 80a7f84:	4652      	mov	r2, sl
 80a7f86:	465b      	mov	r3, fp
 80a7f88:	4630      	mov	r0, r6
 80a7f8a:	4639      	mov	r1, r7
 80a7f8c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a7f90:	f003 fe62 	bl	80abc58 <__aeabi_dcmplt>
 80a7f94:	2800      	cmp	r0, #0
 80a7f96:	d146      	bne.n	80a8026 <pow+0x272>
 80a7f98:	a804      	add	r0, sp, #16
 80a7f9a:	f003 f881 	bl	80ab0a0 <matherr>
 80a7f9e:	2800      	cmp	r0, #0
 80a7fa0:	d1ac      	bne.n	80a7efc <pow+0x148>
 80a7fa2:	f7fd fcad 	bl	80a5900 <__errno>
 80a7fa6:	2322      	movs	r3, #34	; 0x22
 80a7fa8:	6003      	str	r3, [r0, #0]
 80a7faa:	e7a7      	b.n	80a7efc <pow+0x148>
 80a7fac:	2200      	movs	r2, #0
 80a7fae:	2300      	movs	r3, #0
 80a7fb0:	4620      	mov	r0, r4
 80a7fb2:	4629      	mov	r1, r5
 80a7fb4:	f003 fe46 	bl	80abc44 <__aeabi_dcmpeq>
 80a7fb8:	2800      	cmp	r0, #0
 80a7fba:	f43f af45 	beq.w	80a7e48 <pow+0x94>
 80a7fbe:	2201      	movs	r2, #1
 80a7fc0:	2000      	movs	r0, #0
 80a7fc2:	4927      	ldr	r1, [pc, #156]	; (80a8060 <pow+0x2ac>)
 80a7fc4:	4b25      	ldr	r3, [pc, #148]	; (80a805c <pow+0x2a8>)
 80a7fc6:	f1b9 0f02 	cmp.w	r9, #2
 80a7fca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a7fce:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a7fd2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a7fd6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80a7fda:	9204      	str	r2, [sp, #16]
 80a7fdc:	9305      	str	r3, [sp, #20]
 80a7fde:	d198      	bne.n	80a7f12 <pow+0x15e>
 80a7fe0:	e9cd 0100 	strd	r0, r1, [sp]
 80a7fe4:	e730      	b.n	80a7e48 <pow+0x94>
 80a7fe6:	2000      	movs	r0, #0
 80a7fe8:	491e      	ldr	r1, [pc, #120]	; (80a8064 <pow+0x2b0>)
 80a7fea:	2b02      	cmp	r3, #2
 80a7fec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a7ff0:	f47f af7f 	bne.w	80a7ef2 <pow+0x13e>
 80a7ff4:	f7fd fc84 	bl	80a5900 <__errno>
 80a7ff8:	2321      	movs	r3, #33	; 0x21
 80a7ffa:	6003      	str	r3, [r0, #0]
 80a7ffc:	e77e      	b.n	80a7efc <pow+0x148>
 80a7ffe:	f7fd fc7f 	bl	80a5900 <__errno>
 80a8002:	2321      	movs	r3, #33	; 0x21
 80a8004:	6003      	str	r3, [r0, #0]
 80a8006:	e789      	b.n	80a7f1c <pow+0x168>
 80a8008:	4630      	mov	r0, r6
 80a800a:	2600      	movs	r6, #0
 80a800c:	4639      	mov	r1, r7
 80a800e:	4f16      	ldr	r7, [pc, #88]	; (80a8068 <pow+0x2b4>)
 80a8010:	4652      	mov	r2, sl
 80a8012:	465b      	mov	r3, fp
 80a8014:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80a8018:	f003 fe1e 	bl	80abc58 <__aeabi_dcmplt>
 80a801c:	bb60      	cbnz	r0, 80a8078 <pow+0x2c4>
 80a801e:	f1b8 0f02 	cmp.w	r8, #2
 80a8022:	d0be      	beq.n	80a7fa2 <pow+0x1ee>
 80a8024:	e7b8      	b.n	80a7f98 <pow+0x1e4>
 80a8026:	2200      	movs	r2, #0
 80a8028:	4b10      	ldr	r3, [pc, #64]	; (80a806c <pow+0x2b8>)
 80a802a:	4620      	mov	r0, r4
 80a802c:	4629      	mov	r1, r5
 80a802e:	f003 fba1 	bl	80ab774 <__aeabi_dmul>
 80a8032:	4604      	mov	r4, r0
 80a8034:	460d      	mov	r5, r1
 80a8036:	f003 f83b 	bl	80ab0b0 <rint>
 80a803a:	4622      	mov	r2, r4
 80a803c:	462b      	mov	r3, r5
 80a803e:	f003 fe01 	bl	80abc44 <__aeabi_dcmpeq>
 80a8042:	bb60      	cbnz	r0, 80a809e <pow+0x2ea>
 80a8044:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a8048:	4b09      	ldr	r3, [pc, #36]	; (80a8070 <pow+0x2bc>)
 80a804a:	4903      	ldr	r1, [pc, #12]	; (80a8058 <pow+0x2a4>)
 80a804c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a8050:	f991 8000 	ldrsb.w	r8, [r1]
 80a8054:	e7e3      	b.n	80a801e <pow+0x26a>
 80a8056:	bf00      	nop
 80a8058:	20000004 	.word	0x20000004
 80a805c:	080ad8f8 	.word	0x080ad8f8
 80a8060:	3ff00000 	.word	0x3ff00000
 80a8064:	fff00000 	.word	0xfff00000
 80a8068:	7ff00000 	.word	0x7ff00000
 80a806c:	3fe00000 	.word	0x3fe00000
 80a8070:	c7efffff 	.word	0xc7efffff
 80a8074:	47efffff 	.word	0x47efffff
 80a8078:	2200      	movs	r2, #0
 80a807a:	4b19      	ldr	r3, [pc, #100]	; (80a80e0 <pow+0x32c>)
 80a807c:	4620      	mov	r0, r4
 80a807e:	4629      	mov	r1, r5
 80a8080:	f003 fb78 	bl	80ab774 <__aeabi_dmul>
 80a8084:	4604      	mov	r4, r0
 80a8086:	460d      	mov	r5, r1
 80a8088:	f003 f812 	bl	80ab0b0 <rint>
 80a808c:	4622      	mov	r2, r4
 80a808e:	462b      	mov	r3, r5
 80a8090:	f003 fdd8 	bl	80abc44 <__aeabi_dcmpeq>
 80a8094:	b918      	cbnz	r0, 80a809e <pow+0x2ea>
 80a8096:	2200      	movs	r2, #0
 80a8098:	4b12      	ldr	r3, [pc, #72]	; (80a80e4 <pow+0x330>)
 80a809a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a809e:	4b12      	ldr	r3, [pc, #72]	; (80a80e8 <pow+0x334>)
 80a80a0:	f993 8000 	ldrsb.w	r8, [r3]
 80a80a4:	e7bb      	b.n	80a801e <pow+0x26a>
 80a80a6:	2201      	movs	r2, #1
 80a80a8:	4b0f      	ldr	r3, [pc, #60]	; (80a80e8 <pow+0x334>)
 80a80aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a80ae:	f993 9000 	ldrsb.w	r9, [r3]
 80a80b2:	4b0e      	ldr	r3, [pc, #56]	; (80a80ec <pow+0x338>)
 80a80b4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a80b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a80bc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80a80c0:	f1b9 0f00 	cmp.w	r9, #0
 80a80c4:	f43f af13 	beq.w	80a7eee <pow+0x13a>
 80a80c8:	4652      	mov	r2, sl
 80a80ca:	465b      	mov	r3, fp
 80a80cc:	4650      	mov	r0, sl
 80a80ce:	4659      	mov	r1, fp
 80a80d0:	f003 fc7a 	bl	80ab9c8 <__aeabi_ddiv>
 80a80d4:	f1b9 0f02 	cmp.w	r9, #2
 80a80d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a80dc:	d08a      	beq.n	80a7ff4 <pow+0x240>
 80a80de:	e708      	b.n	80a7ef2 <pow+0x13e>
 80a80e0:	3fe00000 	.word	0x3fe00000
 80a80e4:	fff00000 	.word	0xfff00000
 80a80e8:	20000004 	.word	0x20000004
 80a80ec:	080ad8f8 	.word	0x080ad8f8

080a80f0 <fmodf>:
 80a80f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a80f4:	b08a      	sub	sp, #40	; 0x28
 80a80f6:	4607      	mov	r7, r0
 80a80f8:	460c      	mov	r4, r1
 80a80fa:	f001 f957 	bl	80a93ac <__ieee754_fmodf>
 80a80fe:	4b2a      	ldr	r3, [pc, #168]	; (80a81a8 <fmodf+0xb8>)
 80a8100:	4605      	mov	r5, r0
 80a8102:	f993 8000 	ldrsb.w	r8, [r3]
 80a8106:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80a810a:	d03a      	beq.n	80a8182 <fmodf+0x92>
 80a810c:	4621      	mov	r1, r4
 80a810e:	4620      	mov	r0, r4
 80a8110:	f004 f94c 	bl	80ac3ac <__aeabi_fcmpun>
 80a8114:	2800      	cmp	r0, #0
 80a8116:	d134      	bne.n	80a8182 <fmodf+0x92>
 80a8118:	4639      	mov	r1, r7
 80a811a:	4638      	mov	r0, r7
 80a811c:	f004 f946 	bl	80ac3ac <__aeabi_fcmpun>
 80a8120:	4606      	mov	r6, r0
 80a8122:	bb70      	cbnz	r0, 80a8182 <fmodf+0x92>
 80a8124:	2100      	movs	r1, #0
 80a8126:	4620      	mov	r0, r4
 80a8128:	f004 f90e 	bl	80ac348 <__aeabi_fcmpeq>
 80a812c:	b348      	cbz	r0, 80a8182 <fmodf+0x92>
 80a812e:	2201      	movs	r2, #1
 80a8130:	4b1e      	ldr	r3, [pc, #120]	; (80a81ac <fmodf+0xbc>)
 80a8132:	4638      	mov	r0, r7
 80a8134:	e9cd 2300 	strd	r2, r3, [sp]
 80a8138:	9608      	str	r6, [sp, #32]
 80a813a:	f003 fac3 	bl	80ab6c4 <__aeabi_f2d>
 80a813e:	4606      	mov	r6, r0
 80a8140:	460f      	mov	r7, r1
 80a8142:	4620      	mov	r0, r4
 80a8144:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80a8148:	f003 fabc 	bl	80ab6c4 <__aeabi_f2d>
 80a814c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a8150:	f1b8 0f00 	cmp.w	r8, #0
 80a8154:	d019      	beq.n	80a818a <fmodf+0x9a>
 80a8156:	2200      	movs	r2, #0
 80a8158:	2300      	movs	r3, #0
 80a815a:	4610      	mov	r0, r2
 80a815c:	4619      	mov	r1, r3
 80a815e:	f003 fc33 	bl	80ab9c8 <__aeabi_ddiv>
 80a8162:	f1b8 0f02 	cmp.w	r8, #2
 80a8166:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a816a:	d110      	bne.n	80a818e <fmodf+0x9e>
 80a816c:	f7fd fbc8 	bl	80a5900 <__errno>
 80a8170:	2321      	movs	r3, #33	; 0x21
 80a8172:	6003      	str	r3, [r0, #0]
 80a8174:	9b08      	ldr	r3, [sp, #32]
 80a8176:	b993      	cbnz	r3, 80a819e <fmodf+0xae>
 80a8178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a817c:	f003 fdf2 	bl	80abd64 <__aeabi_d2f>
 80a8180:	4605      	mov	r5, r0
 80a8182:	4628      	mov	r0, r5
 80a8184:	b00a      	add	sp, #40	; 0x28
 80a8186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a818a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a818e:	4668      	mov	r0, sp
 80a8190:	f002 ff86 	bl	80ab0a0 <matherr>
 80a8194:	2800      	cmp	r0, #0
 80a8196:	d0e9      	beq.n	80a816c <fmodf+0x7c>
 80a8198:	9b08      	ldr	r3, [sp, #32]
 80a819a:	2b00      	cmp	r3, #0
 80a819c:	d0ec      	beq.n	80a8178 <fmodf+0x88>
 80a819e:	f7fd fbaf 	bl	80a5900 <__errno>
 80a81a2:	9b08      	ldr	r3, [sp, #32]
 80a81a4:	6003      	str	r3, [r0, #0]
 80a81a6:	e7e7      	b.n	80a8178 <fmodf+0x88>
 80a81a8:	20000004 	.word	0x20000004
 80a81ac:	080ad8fc 	.word	0x080ad8fc

080a81b0 <logf>:
 80a81b0:	b570      	push	{r4, r5, r6, lr}
 80a81b2:	b08a      	sub	sp, #40	; 0x28
 80a81b4:	4604      	mov	r4, r0
 80a81b6:	f001 f97b 	bl	80a94b0 <__ieee754_logf>
 80a81ba:	4b37      	ldr	r3, [pc, #220]	; (80a8298 <logf+0xe8>)
 80a81bc:	4605      	mov	r5, r0
 80a81be:	f993 6000 	ldrsb.w	r6, [r3]
 80a81c2:	1c73      	adds	r3, r6, #1
 80a81c4:	d033      	beq.n	80a822e <logf+0x7e>
 80a81c6:	4621      	mov	r1, r4
 80a81c8:	4620      	mov	r0, r4
 80a81ca:	f004 f8ef 	bl	80ac3ac <__aeabi_fcmpun>
 80a81ce:	2800      	cmp	r0, #0
 80a81d0:	d12d      	bne.n	80a822e <logf+0x7e>
 80a81d2:	2100      	movs	r1, #0
 80a81d4:	4620      	mov	r0, r4
 80a81d6:	f004 f8df 	bl	80ac398 <__aeabi_fcmpgt>
 80a81da:	4603      	mov	r3, r0
 80a81dc:	bb38      	cbnz	r0, 80a822e <logf+0x7e>
 80a81de:	4a2f      	ldr	r2, [pc, #188]	; (80a829c <logf+0xec>)
 80a81e0:	4620      	mov	r0, r4
 80a81e2:	9308      	str	r3, [sp, #32]
 80a81e4:	9201      	str	r2, [sp, #4]
 80a81e6:	f003 fa6d 	bl	80ab6c4 <__aeabi_f2d>
 80a81ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a81ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a81f2:	b1fe      	cbz	r6, 80a8234 <logf+0x84>
 80a81f4:	2200      	movs	r2, #0
 80a81f6:	4b2a      	ldr	r3, [pc, #168]	; (80a82a0 <logf+0xf0>)
 80a81f8:	4620      	mov	r0, r4
 80a81fa:	2100      	movs	r1, #0
 80a81fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a8200:	f004 f8a2 	bl	80ac348 <__aeabi_fcmpeq>
 80a8204:	2800      	cmp	r0, #0
 80a8206:	d03d      	beq.n	80a8284 <logf+0xd4>
 80a8208:	2302      	movs	r3, #2
 80a820a:	429e      	cmp	r6, r3
 80a820c:	9300      	str	r3, [sp, #0]
 80a820e:	d133      	bne.n	80a8278 <logf+0xc8>
 80a8210:	f7fd fb76 	bl	80a5900 <__errno>
 80a8214:	2322      	movs	r3, #34	; 0x22
 80a8216:	6003      	str	r3, [r0, #0]
 80a8218:	9b08      	ldr	r3, [sp, #32]
 80a821a:	b31b      	cbz	r3, 80a8264 <logf+0xb4>
 80a821c:	f7fd fb70 	bl	80a5900 <__errno>
 80a8220:	9b08      	ldr	r3, [sp, #32]
 80a8222:	6003      	str	r3, [r0, #0]
 80a8224:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a8228:	f003 fd9c 	bl	80abd64 <__aeabi_d2f>
 80a822c:	4605      	mov	r5, r0
 80a822e:	4628      	mov	r0, r5
 80a8230:	b00a      	add	sp, #40	; 0x28
 80a8232:	bd70      	pop	{r4, r5, r6, pc}
 80a8234:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a8238:	4b1a      	ldr	r3, [pc, #104]	; (80a82a4 <logf+0xf4>)
 80a823a:	4620      	mov	r0, r4
 80a823c:	2100      	movs	r1, #0
 80a823e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a8242:	f004 f881 	bl	80ac348 <__aeabi_fcmpeq>
 80a8246:	b9a8      	cbnz	r0, 80a8274 <logf+0xc4>
 80a8248:	2301      	movs	r3, #1
 80a824a:	9300      	str	r3, [sp, #0]
 80a824c:	4668      	mov	r0, sp
 80a824e:	f002 ff27 	bl	80ab0a0 <matherr>
 80a8252:	b1d8      	cbz	r0, 80a828c <logf+0xdc>
 80a8254:	4814      	ldr	r0, [pc, #80]	; (80a82a8 <logf+0xf8>)
 80a8256:	f002 ff25 	bl	80ab0a4 <nan>
 80a825a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a825e:	9b08      	ldr	r3, [sp, #32]
 80a8260:	2b00      	cmp	r3, #0
 80a8262:	d1db      	bne.n	80a821c <logf+0x6c>
 80a8264:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a8268:	f003 fd7c 	bl	80abd64 <__aeabi_d2f>
 80a826c:	4605      	mov	r5, r0
 80a826e:	4628      	mov	r0, r5
 80a8270:	b00a      	add	sp, #40	; 0x28
 80a8272:	bd70      	pop	{r4, r5, r6, pc}
 80a8274:	2302      	movs	r3, #2
 80a8276:	9300      	str	r3, [sp, #0]
 80a8278:	4668      	mov	r0, sp
 80a827a:	f002 ff11 	bl	80ab0a0 <matherr>
 80a827e:	2800      	cmp	r0, #0
 80a8280:	d1ed      	bne.n	80a825e <logf+0xae>
 80a8282:	e7c5      	b.n	80a8210 <logf+0x60>
 80a8284:	2301      	movs	r3, #1
 80a8286:	2e02      	cmp	r6, #2
 80a8288:	9300      	str	r3, [sp, #0]
 80a828a:	d1df      	bne.n	80a824c <logf+0x9c>
 80a828c:	f7fd fb38 	bl	80a5900 <__errno>
 80a8290:	2321      	movs	r3, #33	; 0x21
 80a8292:	6003      	str	r3, [r0, #0]
 80a8294:	e7de      	b.n	80a8254 <logf+0xa4>
 80a8296:	bf00      	nop
 80a8298:	20000004 	.word	0x20000004
 80a829c:	080ad904 	.word	0x080ad904
 80a82a0:	fff00000 	.word	0xfff00000
 80a82a4:	c7efffff 	.word	0xc7efffff
 80a82a8:	080ad908 	.word	0x080ad908
 80a82ac:	00000000 	.word	0x00000000

080a82b0 <__ieee754_pow>:
 80a82b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a82b4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80a82b8:	461f      	mov	r7, r3
 80a82ba:	4698      	mov	r8, r3
 80a82bc:	ea55 0302 	orrs.w	r3, r5, r2
 80a82c0:	b095      	sub	sp, #84	; 0x54
 80a82c2:	d037      	beq.n	80a8334 <__ieee754_pow+0x84>
 80a82c4:	468b      	mov	fp, r1
 80a82c6:	4689      	mov	r9, r1
 80a82c8:	496f      	ldr	r1, [pc, #444]	; (80a8488 <__ieee754_pow+0x1d8>)
 80a82ca:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
 80a82ce:	428c      	cmp	r4, r1
 80a82d0:	4682      	mov	sl, r0
 80a82d2:	4603      	mov	r3, r0
 80a82d4:	dc28      	bgt.n	80a8328 <__ieee754_pow+0x78>
 80a82d6:	4616      	mov	r6, r2
 80a82d8:	d035      	beq.n	80a8346 <__ieee754_pow+0x96>
 80a82da:	428d      	cmp	r5, r1
 80a82dc:	dc24      	bgt.n	80a8328 <__ieee754_pow+0x78>
 80a82de:	496a      	ldr	r1, [pc, #424]	; (80a8488 <__ieee754_pow+0x1d8>)
 80a82e0:	428d      	cmp	r5, r1
 80a82e2:	d01f      	beq.n	80a8324 <__ieee754_pow+0x74>
 80a82e4:	f1b9 0f00 	cmp.w	r9, #0
 80a82e8:	db36      	blt.n	80a8358 <__ieee754_pow+0xa8>
 80a82ea:	2100      	movs	r1, #0
 80a82ec:	9102      	str	r1, [sp, #8]
 80a82ee:	2a00      	cmp	r2, #0
 80a82f0:	d14d      	bne.n	80a838e <__ieee754_pow+0xde>
 80a82f2:	4a65      	ldr	r2, [pc, #404]	; (80a8488 <__ieee754_pow+0x1d8>)
 80a82f4:	4295      	cmp	r5, r2
 80a82f6:	f000 809d 	beq.w	80a8434 <__ieee754_pow+0x184>
 80a82fa:	4a64      	ldr	r2, [pc, #400]	; (80a848c <__ieee754_pow+0x1dc>)
 80a82fc:	4295      	cmp	r5, r2
 80a82fe:	f000 80ab 	beq.w	80a8458 <__ieee754_pow+0x1a8>
 80a8302:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
 80a8306:	f000 84d4 	beq.w	80a8cb2 <__ieee754_pow+0xa02>
 80a830a:	4a61      	ldr	r2, [pc, #388]	; (80a8490 <__ieee754_pow+0x1e0>)
 80a830c:	4590      	cmp	r8, r2
 80a830e:	d13e      	bne.n	80a838e <__ieee754_pow+0xde>
 80a8310:	f1b9 0f00 	cmp.w	r9, #0
 80a8314:	db3b      	blt.n	80a838e <__ieee754_pow+0xde>
 80a8316:	4650      	mov	r0, sl
 80a8318:	4659      	mov	r1, fp
 80a831a:	b015      	add	sp, #84	; 0x54
 80a831c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8320:	f000 bf80 	b.w	80a9224 <__ieee754_sqrt>
 80a8324:	2a00      	cmp	r2, #0
 80a8326:	d0dd      	beq.n	80a82e4 <__ieee754_pow+0x34>
 80a8328:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a832c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a8330:	4323      	orrs	r3, r4
 80a8332:	d10b      	bne.n	80a834c <__ieee754_pow+0x9c>
 80a8334:	2300      	movs	r3, #0
 80a8336:	4c55      	ldr	r4, [pc, #340]	; (80a848c <__ieee754_pow+0x1dc>)
 80a8338:	e9cd 3400 	strd	r3, r4, [sp]
 80a833c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a8340:	b015      	add	sp, #84	; 0x54
 80a8342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8346:	b908      	cbnz	r0, 80a834c <__ieee754_pow+0x9c>
 80a8348:	42a5      	cmp	r5, r4
 80a834a:	ddc8      	ble.n	80a82de <__ieee754_pow+0x2e>
 80a834c:	4851      	ldr	r0, [pc, #324]	; (80a8494 <__ieee754_pow+0x1e4>)
 80a834e:	b015      	add	sp, #84	; 0x54
 80a8350:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8354:	f002 bea6 	b.w	80ab0a4 <nan>
 80a8358:	494f      	ldr	r1, [pc, #316]	; (80a8498 <__ieee754_pow+0x1e8>)
 80a835a:	428d      	cmp	r5, r1
 80a835c:	f300 8085 	bgt.w	80a846a <__ieee754_pow+0x1ba>
 80a8360:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80a8364:	428d      	cmp	r5, r1
 80a8366:	dd0e      	ble.n	80a8386 <__ieee754_pow+0xd6>
 80a8368:	1529      	asrs	r1, r5, #20
 80a836a:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80a836e:	2914      	cmp	r1, #20
 80a8370:	f340 84a9 	ble.w	80a8cc6 <__ieee754_pow+0xa16>
 80a8374:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80a8378:	fa22 f001 	lsr.w	r0, r2, r1
 80a837c:	fa00 f101 	lsl.w	r1, r0, r1
 80a8380:	4291      	cmp	r1, r2
 80a8382:	f000 84f6 	beq.w	80a8d72 <__ieee754_pow+0xac2>
 80a8386:	2100      	movs	r1, #0
 80a8388:	9102      	str	r1, [sp, #8]
 80a838a:	2a00      	cmp	r2, #0
 80a838c:	d0b5      	beq.n	80a82fa <__ieee754_pow+0x4a>
 80a838e:	4650      	mov	r0, sl
 80a8390:	4659      	mov	r1, fp
 80a8392:	930c      	str	r3, [sp, #48]	; 0x30
 80a8394:	f002 fdfc 	bl	80aaf90 <fabs>
 80a8398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a839a:	e9cd 0100 	strd	r0, r1, [sp]
 80a839e:	bb43      	cbnz	r3, 80a83f2 <__ieee754_pow+0x142>
 80a83a0:	b124      	cbz	r4, 80a83ac <__ieee754_pow+0xfc>
 80a83a2:	4b3a      	ldr	r3, [pc, #232]	; (80a848c <__ieee754_pow+0x1dc>)
 80a83a4:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80a83a8:	429a      	cmp	r2, r3
 80a83aa:	d122      	bne.n	80a83f2 <__ieee754_pow+0x142>
 80a83ac:	f1b8 0f00 	cmp.w	r8, #0
 80a83b0:	da07      	bge.n	80a83c2 <__ieee754_pow+0x112>
 80a83b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a83b6:	2000      	movs	r0, #0
 80a83b8:	4934      	ldr	r1, [pc, #208]	; (80a848c <__ieee754_pow+0x1dc>)
 80a83ba:	f003 fb05 	bl	80ab9c8 <__aeabi_ddiv>
 80a83be:	e9cd 0100 	strd	r0, r1, [sp]
 80a83c2:	f1b9 0f00 	cmp.w	r9, #0
 80a83c6:	dab9      	bge.n	80a833c <__ieee754_pow+0x8c>
 80a83c8:	9b02      	ldr	r3, [sp, #8]
 80a83ca:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a83ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a83d2:	4323      	orrs	r3, r4
 80a83d4:	f040 849c 	bne.w	80a8d10 <__ieee754_pow+0xa60>
 80a83d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a83dc:	4610      	mov	r0, r2
 80a83de:	4619      	mov	r1, r3
 80a83e0:	f003 f810 	bl	80ab404 <__aeabi_dsub>
 80a83e4:	4602      	mov	r2, r0
 80a83e6:	460b      	mov	r3, r1
 80a83e8:	f003 faee 	bl	80ab9c8 <__aeabi_ddiv>
 80a83ec:	e9cd 0100 	strd	r0, r1, [sp]
 80a83f0:	e7a4      	b.n	80a833c <__ieee754_pow+0x8c>
 80a83f2:	9a02      	ldr	r2, [sp, #8]
 80a83f4:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80a83f8:	3b01      	subs	r3, #1
 80a83fa:	930c      	str	r3, [sp, #48]	; 0x30
 80a83fc:	4313      	orrs	r3, r2
 80a83fe:	d037      	beq.n	80a8470 <__ieee754_pow+0x1c0>
 80a8400:	4b26      	ldr	r3, [pc, #152]	; (80a849c <__ieee754_pow+0x1ec>)
 80a8402:	429d      	cmp	r5, r3
 80a8404:	dd4e      	ble.n	80a84a4 <__ieee754_pow+0x1f4>
 80a8406:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80a840a:	429d      	cmp	r5, r3
 80a840c:	4b24      	ldr	r3, [pc, #144]	; (80a84a0 <__ieee754_pow+0x1f0>)
 80a840e:	f340 83df 	ble.w	80a8bd0 <__ieee754_pow+0x920>
 80a8412:	429c      	cmp	r4, r3
 80a8414:	f340 835e 	ble.w	80a8ad4 <__ieee754_pow+0x824>
 80a8418:	f1b8 0f00 	cmp.w	r8, #0
 80a841c:	f340 835e 	ble.w	80a8adc <__ieee754_pow+0x82c>
 80a8420:	a317      	add	r3, pc, #92	; (adr r3, 80a8480 <__ieee754_pow+0x1d0>)
 80a8422:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8426:	4610      	mov	r0, r2
 80a8428:	4619      	mov	r1, r3
 80a842a:	f003 f9a3 	bl	80ab774 <__aeabi_dmul>
 80a842e:	e9cd 0100 	strd	r0, r1, [sp]
 80a8432:	e783      	b.n	80a833c <__ieee754_pow+0x8c>
 80a8434:	f104 4240 	add.w	r2, r4, #3221225472	; 0xc0000000
 80a8438:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80a843c:	4313      	orrs	r3, r2
 80a843e:	f43f af79 	beq.w	80a8334 <__ieee754_pow+0x84>
 80a8442:	4b17      	ldr	r3, [pc, #92]	; (80a84a0 <__ieee754_pow+0x1f0>)
 80a8444:	429c      	cmp	r4, r3
 80a8446:	f340 8373 	ble.w	80a8b30 <__ieee754_pow+0x880>
 80a844a:	f1b8 0f00 	cmp.w	r8, #0
 80a844e:	f2c0 8345 	blt.w	80a8adc <__ieee754_pow+0x82c>
 80a8452:	e9cd 6700 	strd	r6, r7, [sp]
 80a8456:	e771      	b.n	80a833c <__ieee754_pow+0x8c>
 80a8458:	f1b8 0f00 	cmp.w	r8, #0
 80a845c:	f2c0 841f 	blt.w	80a8c9e <__ieee754_pow+0x9ee>
 80a8460:	4650      	mov	r0, sl
 80a8462:	4659      	mov	r1, fp
 80a8464:	e9cd 0100 	strd	r0, r1, [sp]
 80a8468:	e768      	b.n	80a833c <__ieee754_pow+0x8c>
 80a846a:	2102      	movs	r1, #2
 80a846c:	9102      	str	r1, [sp, #8]
 80a846e:	e73e      	b.n	80a82ee <__ieee754_pow+0x3e>
 80a8470:	4652      	mov	r2, sl
 80a8472:	4650      	mov	r0, sl
 80a8474:	465b      	mov	r3, fp
 80a8476:	4659      	mov	r1, fp
 80a8478:	e7b2      	b.n	80a83e0 <__ieee754_pow+0x130>
 80a847a:	bf00      	nop
 80a847c:	f3af 8000 	nop.w
 80a8480:	8800759c 	.word	0x8800759c
 80a8484:	7e37e43c 	.word	0x7e37e43c
 80a8488:	7ff00000 	.word	0x7ff00000
 80a848c:	3ff00000 	.word	0x3ff00000
 80a8490:	3fe00000 	.word	0x3fe00000
 80a8494:	080ad908 	.word	0x080ad908
 80a8498:	433fffff 	.word	0x433fffff
 80a849c:	41e00000 	.word	0x41e00000
 80a84a0:	3fefffff 	.word	0x3fefffff
 80a84a4:	4bd0      	ldr	r3, [pc, #832]	; (80a87e8 <__ieee754_pow+0x538>)
 80a84a6:	ea09 0303 	and.w	r3, r9, r3
 80a84aa:	2b00      	cmp	r3, #0
 80a84ac:	f040 8356 	bne.w	80a8b5c <__ieee754_pow+0x8ac>
 80a84b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a84b4:	2200      	movs	r2, #0
 80a84b6:	4bcd      	ldr	r3, [pc, #820]	; (80a87ec <__ieee754_pow+0x53c>)
 80a84b8:	f003 f95c 	bl	80ab774 <__aeabi_dmul>
 80a84bc:	f06f 0c34 	mvn.w	ip, #52	; 0x34
 80a84c0:	460c      	mov	r4, r1
 80a84c2:	e9cd 0100 	strd	r0, r1, [sp]
 80a84c6:	1523      	asrs	r3, r4, #20
 80a84c8:	4ac9      	ldr	r2, [pc, #804]	; (80a87f0 <__ieee754_pow+0x540>)
 80a84ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80a84ce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a84d2:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80a84d6:	eb03 010c 	add.w	r1, r3, ip
 80a84da:	4294      	cmp	r4, r2
 80a84dc:	910d      	str	r1, [sp, #52]	; 0x34
 80a84de:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80a84e2:	f340 832e 	ble.w	80a8b42 <__ieee754_pow+0x892>
 80a84e6:	4bc3      	ldr	r3, [pc, #780]	; (80a87f4 <__ieee754_pow+0x544>)
 80a84e8:	429c      	cmp	r4, r3
 80a84ea:	f340 841e 	ble.w	80a8d2a <__ieee754_pow+0xa7a>
 80a84ee:	2300      	movs	r3, #0
 80a84f0:	2400      	movs	r4, #0
 80a84f2:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a84f6:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a84fa:	2300      	movs	r3, #0
 80a84fc:	f04f 0a00 	mov.w	sl, #0
 80a8500:	4cbd      	ldr	r4, [pc, #756]	; (80a87f8 <__ieee754_pow+0x548>)
 80a8502:	3101      	adds	r1, #1
 80a8504:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a8508:	910d      	str	r1, [sp, #52]	; 0x34
 80a850a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80a850e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a8512:	4629      	mov	r1, r5
 80a8514:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a8518:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a851c:	f002 ff72 	bl	80ab404 <__aeabi_dsub>
 80a8520:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a8524:	4680      	mov	r8, r0
 80a8526:	4689      	mov	r9, r1
 80a8528:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a852c:	f002 ff6c 	bl	80ab408 <__adddf3>
 80a8530:	4602      	mov	r2, r0
 80a8532:	460b      	mov	r3, r1
 80a8534:	2000      	movs	r0, #0
 80a8536:	49b0      	ldr	r1, [pc, #704]	; (80a87f8 <__ieee754_pow+0x548>)
 80a8538:	f003 fa46 	bl	80ab9c8 <__aeabi_ddiv>
 80a853c:	4603      	mov	r3, r0
 80a853e:	460c      	mov	r4, r1
 80a8540:	461a      	mov	r2, r3
 80a8542:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 80a8546:	4640      	mov	r0, r8
 80a8548:	4623      	mov	r3, r4
 80a854a:	4649      	mov	r1, r9
 80a854c:	f003 f912 	bl	80ab774 <__aeabi_dmul>
 80a8550:	460c      	mov	r4, r1
 80a8552:	4603      	mov	r3, r0
 80a8554:	4601      	mov	r1, r0
 80a8556:	4622      	mov	r2, r4
 80a8558:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80a855c:	2400      	movs	r4, #0
 80a855e:	2000      	movs	r0, #0
 80a8560:	106b      	asrs	r3, r5, #1
 80a8562:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80a8566:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80a856a:	e9cd 1200 	strd	r1, r2, [sp]
 80a856e:	eb03 010a 	add.w	r1, r3, sl
 80a8572:	9400      	str	r4, [sp, #0]
 80a8574:	e9dd ab00 	ldrd	sl, fp, [sp]
 80a8578:	4604      	mov	r4, r0
 80a857a:	460d      	mov	r5, r1
 80a857c:	4602      	mov	r2, r0
 80a857e:	460b      	mov	r3, r1
 80a8580:	4650      	mov	r0, sl
 80a8582:	4659      	mov	r1, fp
 80a8584:	f003 f8f6 	bl	80ab774 <__aeabi_dmul>
 80a8588:	4602      	mov	r2, r0
 80a858a:	460b      	mov	r3, r1
 80a858c:	4640      	mov	r0, r8
 80a858e:	4649      	mov	r1, r9
 80a8590:	f002 ff38 	bl	80ab404 <__aeabi_dsub>
 80a8594:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a8598:	4680      	mov	r8, r0
 80a859a:	4689      	mov	r9, r1
 80a859c:	4620      	mov	r0, r4
 80a859e:	4629      	mov	r1, r5
 80a85a0:	f002 ff30 	bl	80ab404 <__aeabi_dsub>
 80a85a4:	4602      	mov	r2, r0
 80a85a6:	460b      	mov	r3, r1
 80a85a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a85ac:	f002 ff2a 	bl	80ab404 <__aeabi_dsub>
 80a85b0:	4652      	mov	r2, sl
 80a85b2:	465b      	mov	r3, fp
 80a85b4:	f003 f8de 	bl	80ab774 <__aeabi_dmul>
 80a85b8:	4602      	mov	r2, r0
 80a85ba:	460b      	mov	r3, r1
 80a85bc:	4640      	mov	r0, r8
 80a85be:	4649      	mov	r1, r9
 80a85c0:	f002 ff20 	bl	80ab404 <__aeabi_dsub>
 80a85c4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a85c8:	f003 f8d4 	bl	80ab774 <__aeabi_dmul>
 80a85cc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80a85d0:	4604      	mov	r4, r0
 80a85d2:	460d      	mov	r5, r1
 80a85d4:	4642      	mov	r2, r8
 80a85d6:	464b      	mov	r3, r9
 80a85d8:	4640      	mov	r0, r8
 80a85da:	4649      	mov	r1, r9
 80a85dc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a85e0:	f003 f8c8 	bl	80ab774 <__aeabi_dmul>
 80a85e4:	a36e      	add	r3, pc, #440	; (adr r3, 80a87a0 <__ieee754_pow+0x4f0>)
 80a85e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a85ea:	4604      	mov	r4, r0
 80a85ec:	460d      	mov	r5, r1
 80a85ee:	f003 f8c1 	bl	80ab774 <__aeabi_dmul>
 80a85f2:	a36d      	add	r3, pc, #436	; (adr r3, 80a87a8 <__ieee754_pow+0x4f8>)
 80a85f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a85f8:	f002 ff06 	bl	80ab408 <__adddf3>
 80a85fc:	4622      	mov	r2, r4
 80a85fe:	462b      	mov	r3, r5
 80a8600:	f003 f8b8 	bl	80ab774 <__aeabi_dmul>
 80a8604:	a36a      	add	r3, pc, #424	; (adr r3, 80a87b0 <__ieee754_pow+0x500>)
 80a8606:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a860a:	f002 fefd 	bl	80ab408 <__adddf3>
 80a860e:	4622      	mov	r2, r4
 80a8610:	462b      	mov	r3, r5
 80a8612:	f003 f8af 	bl	80ab774 <__aeabi_dmul>
 80a8616:	a368      	add	r3, pc, #416	; (adr r3, 80a87b8 <__ieee754_pow+0x508>)
 80a8618:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a861c:	f002 fef4 	bl	80ab408 <__adddf3>
 80a8620:	4622      	mov	r2, r4
 80a8622:	462b      	mov	r3, r5
 80a8624:	f003 f8a6 	bl	80ab774 <__aeabi_dmul>
 80a8628:	a365      	add	r3, pc, #404	; (adr r3, 80a87c0 <__ieee754_pow+0x510>)
 80a862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a862e:	f002 feeb 	bl	80ab408 <__adddf3>
 80a8632:	4622      	mov	r2, r4
 80a8634:	462b      	mov	r3, r5
 80a8636:	f003 f89d 	bl	80ab774 <__aeabi_dmul>
 80a863a:	a363      	add	r3, pc, #396	; (adr r3, 80a87c8 <__ieee754_pow+0x518>)
 80a863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8640:	f002 fee2 	bl	80ab408 <__adddf3>
 80a8644:	4622      	mov	r2, r4
 80a8646:	462b      	mov	r3, r5
 80a8648:	4604      	mov	r4, r0
 80a864a:	460d      	mov	r5, r1
 80a864c:	4610      	mov	r0, r2
 80a864e:	4619      	mov	r1, r3
 80a8650:	f003 f890 	bl	80ab774 <__aeabi_dmul>
 80a8654:	4602      	mov	r2, r0
 80a8656:	460b      	mov	r3, r1
 80a8658:	4620      	mov	r0, r4
 80a865a:	4629      	mov	r1, r5
 80a865c:	f003 f88a 	bl	80ab774 <__aeabi_dmul>
 80a8660:	4604      	mov	r4, r0
 80a8662:	460d      	mov	r5, r1
 80a8664:	4652      	mov	r2, sl
 80a8666:	465b      	mov	r3, fp
 80a8668:	4640      	mov	r0, r8
 80a866a:	4649      	mov	r1, r9
 80a866c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80a8670:	f002 feca 	bl	80ab408 <__adddf3>
 80a8674:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a8678:	f003 f87c 	bl	80ab774 <__aeabi_dmul>
 80a867c:	4622      	mov	r2, r4
 80a867e:	462b      	mov	r3, r5
 80a8680:	f002 fec2 	bl	80ab408 <__adddf3>
 80a8684:	4652      	mov	r2, sl
 80a8686:	4604      	mov	r4, r0
 80a8688:	460d      	mov	r5, r1
 80a868a:	465b      	mov	r3, fp
 80a868c:	4650      	mov	r0, sl
 80a868e:	4659      	mov	r1, fp
 80a8690:	f003 f870 	bl	80ab774 <__aeabi_dmul>
 80a8694:	46a0      	mov	r8, r4
 80a8696:	46a9      	mov	r9, r5
 80a8698:	4604      	mov	r4, r0
 80a869a:	460d      	mov	r5, r1
 80a869c:	2200      	movs	r2, #0
 80a869e:	4b57      	ldr	r3, [pc, #348]	; (80a87fc <__ieee754_pow+0x54c>)
 80a86a0:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80a86a4:	f002 feb0 	bl	80ab408 <__adddf3>
 80a86a8:	4642      	mov	r2, r8
 80a86aa:	464b      	mov	r3, r9
 80a86ac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80a86b0:	f002 feaa 	bl	80ab408 <__adddf3>
 80a86b4:	460d      	mov	r5, r1
 80a86b6:	9c00      	ldr	r4, [sp, #0]
 80a86b8:	462b      	mov	r3, r5
 80a86ba:	4622      	mov	r2, r4
 80a86bc:	4650      	mov	r0, sl
 80a86be:	4659      	mov	r1, fp
 80a86c0:	f003 f858 	bl	80ab774 <__aeabi_dmul>
 80a86c4:	4680      	mov	r8, r0
 80a86c6:	4689      	mov	r9, r1
 80a86c8:	2200      	movs	r2, #0
 80a86ca:	4620      	mov	r0, r4
 80a86cc:	4629      	mov	r1, r5
 80a86ce:	4b4b      	ldr	r3, [pc, #300]	; (80a87fc <__ieee754_pow+0x54c>)
 80a86d0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a86d4:	f002 fe96 	bl	80ab404 <__aeabi_dsub>
 80a86d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80a86dc:	f002 fe92 	bl	80ab404 <__aeabi_dsub>
 80a86e0:	4602      	mov	r2, r0
 80a86e2:	460b      	mov	r3, r1
 80a86e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80a86e8:	f002 fe8c 	bl	80ab404 <__aeabi_dsub>
 80a86ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a86f0:	f003 f840 	bl	80ab774 <__aeabi_dmul>
 80a86f4:	4622      	mov	r2, r4
 80a86f6:	4680      	mov	r8, r0
 80a86f8:	4689      	mov	r9, r1
 80a86fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a86fe:	462b      	mov	r3, r5
 80a8700:	f003 f838 	bl	80ab774 <__aeabi_dmul>
 80a8704:	4602      	mov	r2, r0
 80a8706:	460b      	mov	r3, r1
 80a8708:	4640      	mov	r0, r8
 80a870a:	4649      	mov	r1, r9
 80a870c:	f002 fe7c 	bl	80ab408 <__adddf3>
 80a8710:	4682      	mov	sl, r0
 80a8712:	468b      	mov	fp, r1
 80a8714:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a8718:	4652      	mov	r2, sl
 80a871a:	465b      	mov	r3, fp
 80a871c:	f002 fe74 	bl	80ab408 <__adddf3>
 80a8720:	a32b      	add	r3, pc, #172	; (adr r3, 80a87d0 <__ieee754_pow+0x520>)
 80a8722:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8726:	9c00      	ldr	r4, [sp, #0]
 80a8728:	460d      	mov	r5, r1
 80a872a:	4620      	mov	r0, r4
 80a872c:	f003 f822 	bl	80ab774 <__aeabi_dmul>
 80a8730:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a8734:	4680      	mov	r8, r0
 80a8736:	4689      	mov	r9, r1
 80a8738:	4620      	mov	r0, r4
 80a873a:	4629      	mov	r1, r5
 80a873c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80a8740:	f002 fe60 	bl	80ab404 <__aeabi_dsub>
 80a8744:	4602      	mov	r2, r0
 80a8746:	460b      	mov	r3, r1
 80a8748:	4650      	mov	r0, sl
 80a874a:	4659      	mov	r1, fp
 80a874c:	f002 fe5a 	bl	80ab404 <__aeabi_dsub>
 80a8750:	a321      	add	r3, pc, #132	; (adr r3, 80a87d8 <__ieee754_pow+0x528>)
 80a8752:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8756:	f003 f80d 	bl	80ab774 <__aeabi_dmul>
 80a875a:	a321      	add	r3, pc, #132	; (adr r3, 80a87e0 <__ieee754_pow+0x530>)
 80a875c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8760:	4680      	mov	r8, r0
 80a8762:	4689      	mov	r9, r1
 80a8764:	4620      	mov	r0, r4
 80a8766:	4629      	mov	r1, r5
 80a8768:	f003 f804 	bl	80ab774 <__aeabi_dmul>
 80a876c:	4602      	mov	r2, r0
 80a876e:	460b      	mov	r3, r1
 80a8770:	4640      	mov	r0, r8
 80a8772:	4649      	mov	r1, r9
 80a8774:	f002 fe48 	bl	80ab408 <__adddf3>
 80a8778:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80a877c:	f002 fe44 	bl	80ab408 <__adddf3>
 80a8780:	4682      	mov	sl, r0
 80a8782:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a8784:	468b      	mov	fp, r1
 80a8786:	f002 ff8b 	bl	80ab6a0 <__aeabi_i2d>
 80a878a:	4680      	mov	r8, r0
 80a878c:	4689      	mov	r9, r1
 80a878e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a8792:	4652      	mov	r2, sl
 80a8794:	465b      	mov	r3, fp
 80a8796:	f002 fe37 	bl	80ab408 <__adddf3>
 80a879a:	e031      	b.n	80a8800 <__ieee754_pow+0x550>
 80a879c:	f3af 8000 	nop.w
 80a87a0:	4a454eef 	.word	0x4a454eef
 80a87a4:	3fca7e28 	.word	0x3fca7e28
 80a87a8:	93c9db65 	.word	0x93c9db65
 80a87ac:	3fcd864a 	.word	0x3fcd864a
 80a87b0:	a91d4101 	.word	0xa91d4101
 80a87b4:	3fd17460 	.word	0x3fd17460
 80a87b8:	518f264d 	.word	0x518f264d
 80a87bc:	3fd55555 	.word	0x3fd55555
 80a87c0:	db6fabff 	.word	0xdb6fabff
 80a87c4:	3fdb6db6 	.word	0x3fdb6db6
 80a87c8:	33333303 	.word	0x33333303
 80a87cc:	3fe33333 	.word	0x3fe33333
 80a87d0:	e0000000 	.word	0xe0000000
 80a87d4:	3feec709 	.word	0x3feec709
 80a87d8:	dc3a03fd 	.word	0xdc3a03fd
 80a87dc:	3feec709 	.word	0x3feec709
 80a87e0:	145b01f5 	.word	0x145b01f5
 80a87e4:	be3e2fe0 	.word	0xbe3e2fe0
 80a87e8:	7ff00000 	.word	0x7ff00000
 80a87ec:	43400000 	.word	0x43400000
 80a87f0:	0003988e 	.word	0x0003988e
 80a87f4:	000bb679 	.word	0x000bb679
 80a87f8:	3ff00000 	.word	0x3ff00000
 80a87fc:	40080000 	.word	0x40080000
 80a8800:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a8804:	f002 fe00 	bl	80ab408 <__adddf3>
 80a8808:	4642      	mov	r2, r8
 80a880a:	464b      	mov	r3, r9
 80a880c:	f002 fdfc 	bl	80ab408 <__adddf3>
 80a8810:	9c00      	ldr	r4, [sp, #0]
 80a8812:	4642      	mov	r2, r8
 80a8814:	464b      	mov	r3, r9
 80a8816:	4620      	mov	r0, r4
 80a8818:	460d      	mov	r5, r1
 80a881a:	f002 fdf3 	bl	80ab404 <__aeabi_dsub>
 80a881e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a8822:	f002 fdef 	bl	80ab404 <__aeabi_dsub>
 80a8826:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a882a:	f002 fdeb 	bl	80ab404 <__aeabi_dsub>
 80a882e:	4602      	mov	r2, r0
 80a8830:	460b      	mov	r3, r1
 80a8832:	4650      	mov	r0, sl
 80a8834:	4659      	mov	r1, fp
 80a8836:	f002 fde5 	bl	80ab404 <__aeabi_dsub>
 80a883a:	4682      	mov	sl, r0
 80a883c:	468b      	mov	fp, r1
 80a883e:	9b02      	ldr	r3, [sp, #8]
 80a8840:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a8842:	3b01      	subs	r3, #1
 80a8844:	4313      	orrs	r3, r2
 80a8846:	f04f 0200 	mov.w	r2, #0
 80a884a:	bf0c      	ite	eq
 80a884c:	4bda      	ldreq	r3, [pc, #872]	; (80a8bb8 <__ieee754_pow+0x908>)
 80a884e:	4bdb      	ldrne	r3, [pc, #876]	; (80a8bbc <__ieee754_pow+0x90c>)
 80a8850:	e9cd 6700 	strd	r6, r7, [sp]
 80a8854:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a8858:	2300      	movs	r3, #0
 80a885a:	9300      	str	r3, [sp, #0]
 80a885c:	e9dd 8900 	ldrd	r8, r9, [sp]
 80a8860:	4630      	mov	r0, r6
 80a8862:	4642      	mov	r2, r8
 80a8864:	4639      	mov	r1, r7
 80a8866:	464b      	mov	r3, r9
 80a8868:	f002 fdcc 	bl	80ab404 <__aeabi_dsub>
 80a886c:	4622      	mov	r2, r4
 80a886e:	462b      	mov	r3, r5
 80a8870:	f002 ff80 	bl	80ab774 <__aeabi_dmul>
 80a8874:	4632      	mov	r2, r6
 80a8876:	463b      	mov	r3, r7
 80a8878:	4606      	mov	r6, r0
 80a887a:	460f      	mov	r7, r1
 80a887c:	4650      	mov	r0, sl
 80a887e:	4659      	mov	r1, fp
 80a8880:	f002 ff78 	bl	80ab774 <__aeabi_dmul>
 80a8884:	4602      	mov	r2, r0
 80a8886:	460b      	mov	r3, r1
 80a8888:	4630      	mov	r0, r6
 80a888a:	4639      	mov	r1, r7
 80a888c:	f002 fdbc 	bl	80ab408 <__adddf3>
 80a8890:	4642      	mov	r2, r8
 80a8892:	4682      	mov	sl, r0
 80a8894:	468b      	mov	fp, r1
 80a8896:	464b      	mov	r3, r9
 80a8898:	4620      	mov	r0, r4
 80a889a:	4629      	mov	r1, r5
 80a889c:	f002 ff6a 	bl	80ab774 <__aeabi_dmul>
 80a88a0:	4606      	mov	r6, r0
 80a88a2:	460f      	mov	r7, r1
 80a88a4:	4650      	mov	r0, sl
 80a88a6:	463b      	mov	r3, r7
 80a88a8:	4659      	mov	r1, fp
 80a88aa:	4632      	mov	r2, r6
 80a88ac:	f002 fdac 	bl	80ab408 <__adddf3>
 80a88b0:	4bc3      	ldr	r3, [pc, #780]	; (80a8bc0 <__ieee754_pow+0x910>)
 80a88b2:	4604      	mov	r4, r0
 80a88b4:	4299      	cmp	r1, r3
 80a88b6:	460d      	mov	r5, r1
 80a88b8:	4688      	mov	r8, r1
 80a88ba:	f340 8114 	ble.w	80a8ae6 <__ieee754_pow+0x836>
 80a88be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80a88c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80a88c6:	4303      	orrs	r3, r0
 80a88c8:	f040 8212 	bne.w	80a8cf0 <__ieee754_pow+0xa40>
 80a88cc:	a3a6      	add	r3, pc, #664	; (adr r3, 80a8b68 <__ieee754_pow+0x8b8>)
 80a88ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a88d2:	4650      	mov	r0, sl
 80a88d4:	4659      	mov	r1, fp
 80a88d6:	f002 fd97 	bl	80ab408 <__adddf3>
 80a88da:	4632      	mov	r2, r6
 80a88dc:	e9cd 0100 	strd	r0, r1, [sp]
 80a88e0:	463b      	mov	r3, r7
 80a88e2:	4620      	mov	r0, r4
 80a88e4:	4629      	mov	r1, r5
 80a88e6:	f002 fd8d 	bl	80ab404 <__aeabi_dsub>
 80a88ea:	4602      	mov	r2, r0
 80a88ec:	460b      	mov	r3, r1
 80a88ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a88f2:	f003 f9cf 	bl	80abc94 <__aeabi_dcmpgt>
 80a88f6:	2800      	cmp	r0, #0
 80a88f8:	f040 81fa 	bne.w	80a8cf0 <__ieee754_pow+0xa40>
 80a88fc:	f3c8 530a 	ubfx	r3, r8, #20, #11
 80a8900:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80a8904:	2000      	movs	r0, #0
 80a8906:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80a890a:	fa42 f303 	asr.w	r3, r2, r3
 80a890e:	4443      	add	r3, r8
 80a8910:	4cac      	ldr	r4, [pc, #688]	; (80a8bc4 <__ieee754_pow+0x914>)
 80a8912:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80a8916:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a891a:	fa44 fc02 	asr.w	ip, r4, r2
 80a891e:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80a8922:	ea23 010c 	bic.w	r1, r3, ip
 80a8926:	f1c2 0414 	rsb	r4, r2, #20
 80a892a:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 80a892e:	f1b8 0f00 	cmp.w	r8, #0
 80a8932:	460b      	mov	r3, r1
 80a8934:	fa45 f104 	asr.w	r1, r5, r4
 80a8938:	910c      	str	r1, [sp, #48]	; 0x30
 80a893a:	bfb8      	it	lt
 80a893c:	4249      	neglt	r1, r1
 80a893e:	4602      	mov	r2, r0
 80a8940:	bfb8      	it	lt
 80a8942:	910c      	strlt	r1, [sp, #48]	; 0x30
 80a8944:	4630      	mov	r0, r6
 80a8946:	4639      	mov	r1, r7
 80a8948:	f002 fd5c 	bl	80ab404 <__aeabi_dsub>
 80a894c:	4606      	mov	r6, r0
 80a894e:	460f      	mov	r7, r1
 80a8950:	4650      	mov	r0, sl
 80a8952:	463b      	mov	r3, r7
 80a8954:	4659      	mov	r1, fp
 80a8956:	4632      	mov	r2, r6
 80a8958:	f002 fd56 	bl	80ab408 <__adddf3>
 80a895c:	460d      	mov	r5, r1
 80a895e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a8960:	051b      	lsls	r3, r3, #20
 80a8962:	9300      	str	r3, [sp, #0]
 80a8964:	2400      	movs	r4, #0
 80a8966:	a382      	add	r3, pc, #520	; (adr r3, 80a8b70 <__ieee754_pow+0x8c0>)
 80a8968:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a896c:	4620      	mov	r0, r4
 80a896e:	4629      	mov	r1, r5
 80a8970:	f002 ff00 	bl	80ab774 <__aeabi_dmul>
 80a8974:	4632      	mov	r2, r6
 80a8976:	4680      	mov	r8, r0
 80a8978:	4689      	mov	r9, r1
 80a897a:	463b      	mov	r3, r7
 80a897c:	4620      	mov	r0, r4
 80a897e:	4629      	mov	r1, r5
 80a8980:	f002 fd40 	bl	80ab404 <__aeabi_dsub>
 80a8984:	4602      	mov	r2, r0
 80a8986:	460b      	mov	r3, r1
 80a8988:	4650      	mov	r0, sl
 80a898a:	4659      	mov	r1, fp
 80a898c:	f002 fd3a 	bl	80ab404 <__aeabi_dsub>
 80a8990:	a379      	add	r3, pc, #484	; (adr r3, 80a8b78 <__ieee754_pow+0x8c8>)
 80a8992:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8996:	f002 feed 	bl	80ab774 <__aeabi_dmul>
 80a899a:	a379      	add	r3, pc, #484	; (adr r3, 80a8b80 <__ieee754_pow+0x8d0>)
 80a899c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a89a0:	4606      	mov	r6, r0
 80a89a2:	460f      	mov	r7, r1
 80a89a4:	4620      	mov	r0, r4
 80a89a6:	4629      	mov	r1, r5
 80a89a8:	f002 fee4 	bl	80ab774 <__aeabi_dmul>
 80a89ac:	4602      	mov	r2, r0
 80a89ae:	460b      	mov	r3, r1
 80a89b0:	4630      	mov	r0, r6
 80a89b2:	4639      	mov	r1, r7
 80a89b4:	f002 fd28 	bl	80ab408 <__adddf3>
 80a89b8:	4606      	mov	r6, r0
 80a89ba:	460f      	mov	r7, r1
 80a89bc:	4632      	mov	r2, r6
 80a89be:	463b      	mov	r3, r7
 80a89c0:	4640      	mov	r0, r8
 80a89c2:	4649      	mov	r1, r9
 80a89c4:	f002 fd20 	bl	80ab408 <__adddf3>
 80a89c8:	4642      	mov	r2, r8
 80a89ca:	464b      	mov	r3, r9
 80a89cc:	460d      	mov	r5, r1
 80a89ce:	4604      	mov	r4, r0
 80a89d0:	f002 fd18 	bl	80ab404 <__aeabi_dsub>
 80a89d4:	4602      	mov	r2, r0
 80a89d6:	460b      	mov	r3, r1
 80a89d8:	4630      	mov	r0, r6
 80a89da:	4639      	mov	r1, r7
 80a89dc:	f002 fd12 	bl	80ab404 <__aeabi_dsub>
 80a89e0:	462b      	mov	r3, r5
 80a89e2:	4682      	mov	sl, r0
 80a89e4:	468b      	mov	fp, r1
 80a89e6:	4622      	mov	r2, r4
 80a89e8:	4629      	mov	r1, r5
 80a89ea:	4620      	mov	r0, r4
 80a89ec:	f002 fec2 	bl	80ab774 <__aeabi_dmul>
 80a89f0:	a365      	add	r3, pc, #404	; (adr r3, 80a8b88 <__ieee754_pow+0x8d8>)
 80a89f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a89f6:	4606      	mov	r6, r0
 80a89f8:	460f      	mov	r7, r1
 80a89fa:	f002 febb 	bl	80ab774 <__aeabi_dmul>
 80a89fe:	a364      	add	r3, pc, #400	; (adr r3, 80a8b90 <__ieee754_pow+0x8e0>)
 80a8a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8a04:	f002 fcfe 	bl	80ab404 <__aeabi_dsub>
 80a8a08:	4632      	mov	r2, r6
 80a8a0a:	463b      	mov	r3, r7
 80a8a0c:	f002 feb2 	bl	80ab774 <__aeabi_dmul>
 80a8a10:	a361      	add	r3, pc, #388	; (adr r3, 80a8b98 <__ieee754_pow+0x8e8>)
 80a8a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8a16:	f002 fcf7 	bl	80ab408 <__adddf3>
 80a8a1a:	4632      	mov	r2, r6
 80a8a1c:	463b      	mov	r3, r7
 80a8a1e:	f002 fea9 	bl	80ab774 <__aeabi_dmul>
 80a8a22:	a35f      	add	r3, pc, #380	; (adr r3, 80a8ba0 <__ieee754_pow+0x8f0>)
 80a8a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8a28:	f002 fcec 	bl	80ab404 <__aeabi_dsub>
 80a8a2c:	4632      	mov	r2, r6
 80a8a2e:	463b      	mov	r3, r7
 80a8a30:	f002 fea0 	bl	80ab774 <__aeabi_dmul>
 80a8a34:	a35c      	add	r3, pc, #368	; (adr r3, 80a8ba8 <__ieee754_pow+0x8f8>)
 80a8a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8a3a:	f002 fce5 	bl	80ab408 <__adddf3>
 80a8a3e:	4632      	mov	r2, r6
 80a8a40:	463b      	mov	r3, r7
 80a8a42:	f002 fe97 	bl	80ab774 <__aeabi_dmul>
 80a8a46:	4602      	mov	r2, r0
 80a8a48:	460b      	mov	r3, r1
 80a8a4a:	4620      	mov	r0, r4
 80a8a4c:	4629      	mov	r1, r5
 80a8a4e:	f002 fcd9 	bl	80ab404 <__aeabi_dsub>
 80a8a52:	4606      	mov	r6, r0
 80a8a54:	460f      	mov	r7, r1
 80a8a56:	4632      	mov	r2, r6
 80a8a58:	463b      	mov	r3, r7
 80a8a5a:	4629      	mov	r1, r5
 80a8a5c:	4620      	mov	r0, r4
 80a8a5e:	f002 fe89 	bl	80ab774 <__aeabi_dmul>
 80a8a62:	2200      	movs	r2, #0
 80a8a64:	4680      	mov	r8, r0
 80a8a66:	4689      	mov	r9, r1
 80a8a68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a8a6c:	4630      	mov	r0, r6
 80a8a6e:	4639      	mov	r1, r7
 80a8a70:	f002 fcc8 	bl	80ab404 <__aeabi_dsub>
 80a8a74:	4602      	mov	r2, r0
 80a8a76:	460b      	mov	r3, r1
 80a8a78:	4640      	mov	r0, r8
 80a8a7a:	4649      	mov	r1, r9
 80a8a7c:	f002 ffa4 	bl	80ab9c8 <__aeabi_ddiv>
 80a8a80:	4652      	mov	r2, sl
 80a8a82:	4606      	mov	r6, r0
 80a8a84:	460f      	mov	r7, r1
 80a8a86:	465b      	mov	r3, fp
 80a8a88:	4629      	mov	r1, r5
 80a8a8a:	4620      	mov	r0, r4
 80a8a8c:	f002 fe72 	bl	80ab774 <__aeabi_dmul>
 80a8a90:	4652      	mov	r2, sl
 80a8a92:	465b      	mov	r3, fp
 80a8a94:	f002 fcb8 	bl	80ab408 <__adddf3>
 80a8a98:	4602      	mov	r2, r0
 80a8a9a:	460b      	mov	r3, r1
 80a8a9c:	4630      	mov	r0, r6
 80a8a9e:	4639      	mov	r1, r7
 80a8aa0:	f002 fcb0 	bl	80ab404 <__aeabi_dsub>
 80a8aa4:	462b      	mov	r3, r5
 80a8aa6:	4622      	mov	r2, r4
 80a8aa8:	f002 fcac 	bl	80ab404 <__aeabi_dsub>
 80a8aac:	4602      	mov	r2, r0
 80a8aae:	460b      	mov	r3, r1
 80a8ab0:	2000      	movs	r0, #0
 80a8ab2:	4942      	ldr	r1, [pc, #264]	; (80a8bbc <__ieee754_pow+0x90c>)
 80a8ab4:	f002 fca6 	bl	80ab404 <__aeabi_dsub>
 80a8ab8:	9d00      	ldr	r5, [sp, #0]
 80a8aba:	440d      	add	r5, r1
 80a8abc:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80a8ac0:	f2c0 8153 	blt.w	80a8d6a <__ieee754_pow+0xaba>
 80a8ac4:	4629      	mov	r1, r5
 80a8ac6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8aca:	f002 fe53 	bl	80ab774 <__aeabi_dmul>
 80a8ace:	e9cd 0100 	strd	r0, r1, [sp]
 80a8ad2:	e433      	b.n	80a833c <__ieee754_pow+0x8c>
 80a8ad4:	f1b8 0f00 	cmp.w	r8, #0
 80a8ad8:	f6ff aca2 	blt.w	80a8420 <__ieee754_pow+0x170>
 80a8adc:	2300      	movs	r3, #0
 80a8ade:	2400      	movs	r4, #0
 80a8ae0:	e9cd 3400 	strd	r3, r4, [sp]
 80a8ae4:	e42a      	b.n	80a833c <__ieee754_pow+0x8c>
 80a8ae6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80a8bcc <__ieee754_pow+0x91c>
 80a8aea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a8aee:	4563      	cmp	r3, ip
 80a8af0:	f340 80f6 	ble.w	80a8ce0 <__ieee754_pow+0xa30>
 80a8af4:	4b34      	ldr	r3, [pc, #208]	; (80a8bc8 <__ieee754_pow+0x918>)
 80a8af6:	440b      	add	r3, r1
 80a8af8:	4303      	orrs	r3, r0
 80a8afa:	d10a      	bne.n	80a8b12 <__ieee754_pow+0x862>
 80a8afc:	4632      	mov	r2, r6
 80a8afe:	463b      	mov	r3, r7
 80a8b00:	f002 fc80 	bl	80ab404 <__aeabi_dsub>
 80a8b04:	4652      	mov	r2, sl
 80a8b06:	465b      	mov	r3, fp
 80a8b08:	f003 f8ba 	bl	80abc80 <__aeabi_dcmpge>
 80a8b0c:	2800      	cmp	r0, #0
 80a8b0e:	f43f aef5 	beq.w	80a88fc <__ieee754_pow+0x64c>
 80a8b12:	a327      	add	r3, pc, #156	; (adr r3, 80a8bb0 <__ieee754_pow+0x900>)
 80a8b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8b18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a8b1c:	f002 fe2a 	bl	80ab774 <__aeabi_dmul>
 80a8b20:	a323      	add	r3, pc, #140	; (adr r3, 80a8bb0 <__ieee754_pow+0x900>)
 80a8b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8b26:	f002 fe25 	bl	80ab774 <__aeabi_dmul>
 80a8b2a:	e9cd 0100 	strd	r0, r1, [sp]
 80a8b2e:	e405      	b.n	80a833c <__ieee754_pow+0x8c>
 80a8b30:	f1b8 0f00 	cmp.w	r8, #0
 80a8b34:	dad2      	bge.n	80a8adc <__ieee754_pow+0x82c>
 80a8b36:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80a8b3a:	9600      	str	r6, [sp, #0]
 80a8b3c:	9301      	str	r3, [sp, #4]
 80a8b3e:	f7ff bbfd 	b.w	80a833c <__ieee754_pow+0x8c>
 80a8b42:	2300      	movs	r3, #0
 80a8b44:	2400      	movs	r4, #0
 80a8b46:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a8b4a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a8b4e:	2300      	movs	r3, #0
 80a8b50:	4c1a      	ldr	r4, [pc, #104]	; (80a8bbc <__ieee754_pow+0x90c>)
 80a8b52:	f04f 0a00 	mov.w	sl, #0
 80a8b56:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a8b5a:	e4d8      	b.n	80a850e <__ieee754_pow+0x25e>
 80a8b5c:	f04f 0c00 	mov.w	ip, #0
 80a8b60:	e4b1      	b.n	80a84c6 <__ieee754_pow+0x216>
 80a8b62:	bf00      	nop
 80a8b64:	f3af 8000 	nop.w
 80a8b68:	652b82fe 	.word	0x652b82fe
 80a8b6c:	3c971547 	.word	0x3c971547
 80a8b70:	00000000 	.word	0x00000000
 80a8b74:	3fe62e43 	.word	0x3fe62e43
 80a8b78:	fefa39ef 	.word	0xfefa39ef
 80a8b7c:	3fe62e42 	.word	0x3fe62e42
 80a8b80:	0ca86c39 	.word	0x0ca86c39
 80a8b84:	be205c61 	.word	0xbe205c61
 80a8b88:	72bea4d0 	.word	0x72bea4d0
 80a8b8c:	3e663769 	.word	0x3e663769
 80a8b90:	c5d26bf1 	.word	0xc5d26bf1
 80a8b94:	3ebbbd41 	.word	0x3ebbbd41
 80a8b98:	af25de2c 	.word	0xaf25de2c
 80a8b9c:	3f11566a 	.word	0x3f11566a
 80a8ba0:	16bebd93 	.word	0x16bebd93
 80a8ba4:	3f66c16c 	.word	0x3f66c16c
 80a8ba8:	5555553e 	.word	0x5555553e
 80a8bac:	3fc55555 	.word	0x3fc55555
 80a8bb0:	c2f8f359 	.word	0xc2f8f359
 80a8bb4:	01a56e1f 	.word	0x01a56e1f
 80a8bb8:	bff00000 	.word	0xbff00000
 80a8bbc:	3ff00000 	.word	0x3ff00000
 80a8bc0:	408fffff 	.word	0x408fffff
 80a8bc4:	000fffff 	.word	0x000fffff
 80a8bc8:	3f6f3400 	.word	0x3f6f3400
 80a8bcc:	4090cbff 	.word	0x4090cbff
 80a8bd0:	429c      	cmp	r4, r3
 80a8bd2:	f6ff af7f 	blt.w	80a8ad4 <__ieee754_pow+0x824>
 80a8bd6:	4b7e      	ldr	r3, [pc, #504]	; (80a8dd0 <__ieee754_pow+0xb20>)
 80a8bd8:	429c      	cmp	r4, r3
 80a8bda:	f73f ac1d 	bgt.w	80a8418 <__ieee754_pow+0x168>
 80a8bde:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a8be2:	2200      	movs	r2, #0
 80a8be4:	4b7a      	ldr	r3, [pc, #488]	; (80a8dd0 <__ieee754_pow+0xb20>)
 80a8be6:	f002 fc0d 	bl	80ab404 <__aeabi_dsub>
 80a8bea:	a36b      	add	r3, pc, #428	; (adr r3, 80a8d98 <__ieee754_pow+0xae8>)
 80a8bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8bf0:	4604      	mov	r4, r0
 80a8bf2:	460d      	mov	r5, r1
 80a8bf4:	f002 fdbe 	bl	80ab774 <__aeabi_dmul>
 80a8bf8:	a369      	add	r3, pc, #420	; (adr r3, 80a8da0 <__ieee754_pow+0xaf0>)
 80a8bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8bfe:	4682      	mov	sl, r0
 80a8c00:	468b      	mov	fp, r1
 80a8c02:	4620      	mov	r0, r4
 80a8c04:	4629      	mov	r1, r5
 80a8c06:	f002 fdb5 	bl	80ab774 <__aeabi_dmul>
 80a8c0a:	2200      	movs	r2, #0
 80a8c0c:	4680      	mov	r8, r0
 80a8c0e:	4689      	mov	r9, r1
 80a8c10:	4620      	mov	r0, r4
 80a8c12:	4629      	mov	r1, r5
 80a8c14:	4b6f      	ldr	r3, [pc, #444]	; (80a8dd4 <__ieee754_pow+0xb24>)
 80a8c16:	f002 fdad 	bl	80ab774 <__aeabi_dmul>
 80a8c1a:	4602      	mov	r2, r0
 80a8c1c:	460b      	mov	r3, r1
 80a8c1e:	a162      	add	r1, pc, #392	; (adr r1, 80a8da8 <__ieee754_pow+0xaf8>)
 80a8c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a8c24:	f002 fbee 	bl	80ab404 <__aeabi_dsub>
 80a8c28:	4622      	mov	r2, r4
 80a8c2a:	462b      	mov	r3, r5
 80a8c2c:	f002 fda2 	bl	80ab774 <__aeabi_dmul>
 80a8c30:	4602      	mov	r2, r0
 80a8c32:	460b      	mov	r3, r1
 80a8c34:	2000      	movs	r0, #0
 80a8c36:	4968      	ldr	r1, [pc, #416]	; (80a8dd8 <__ieee754_pow+0xb28>)
 80a8c38:	f002 fbe4 	bl	80ab404 <__aeabi_dsub>
 80a8c3c:	4622      	mov	r2, r4
 80a8c3e:	462b      	mov	r3, r5
 80a8c40:	4604      	mov	r4, r0
 80a8c42:	460d      	mov	r5, r1
 80a8c44:	4610      	mov	r0, r2
 80a8c46:	4619      	mov	r1, r3
 80a8c48:	f002 fd94 	bl	80ab774 <__aeabi_dmul>
 80a8c4c:	4602      	mov	r2, r0
 80a8c4e:	460b      	mov	r3, r1
 80a8c50:	4620      	mov	r0, r4
 80a8c52:	4629      	mov	r1, r5
 80a8c54:	f002 fd8e 	bl	80ab774 <__aeabi_dmul>
 80a8c58:	a355      	add	r3, pc, #340	; (adr r3, 80a8db0 <__ieee754_pow+0xb00>)
 80a8c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8c5e:	f002 fd89 	bl	80ab774 <__aeabi_dmul>
 80a8c62:	4602      	mov	r2, r0
 80a8c64:	460b      	mov	r3, r1
 80a8c66:	4640      	mov	r0, r8
 80a8c68:	4649      	mov	r1, r9
 80a8c6a:	f002 fbcb 	bl	80ab404 <__aeabi_dsub>
 80a8c6e:	4680      	mov	r8, r0
 80a8c70:	4689      	mov	r9, r1
 80a8c72:	4650      	mov	r0, sl
 80a8c74:	4659      	mov	r1, fp
 80a8c76:	4642      	mov	r2, r8
 80a8c78:	464b      	mov	r3, r9
 80a8c7a:	2400      	movs	r4, #0
 80a8c7c:	f002 fbc4 	bl	80ab408 <__adddf3>
 80a8c80:	4652      	mov	r2, sl
 80a8c82:	465b      	mov	r3, fp
 80a8c84:	4620      	mov	r0, r4
 80a8c86:	460d      	mov	r5, r1
 80a8c88:	f002 fbbc 	bl	80ab404 <__aeabi_dsub>
 80a8c8c:	4602      	mov	r2, r0
 80a8c8e:	460b      	mov	r3, r1
 80a8c90:	4640      	mov	r0, r8
 80a8c92:	4649      	mov	r1, r9
 80a8c94:	f002 fbb6 	bl	80ab404 <__aeabi_dsub>
 80a8c98:	4682      	mov	sl, r0
 80a8c9a:	468b      	mov	fp, r1
 80a8c9c:	e5cf      	b.n	80a883e <__ieee754_pow+0x58e>
 80a8c9e:	4652      	mov	r2, sl
 80a8ca0:	465b      	mov	r3, fp
 80a8ca2:	2000      	movs	r0, #0
 80a8ca4:	494a      	ldr	r1, [pc, #296]	; (80a8dd0 <__ieee754_pow+0xb20>)
 80a8ca6:	f002 fe8f 	bl	80ab9c8 <__aeabi_ddiv>
 80a8caa:	e9cd 0100 	strd	r0, r1, [sp]
 80a8cae:	f7ff bb45 	b.w	80a833c <__ieee754_pow+0x8c>
 80a8cb2:	4652      	mov	r2, sl
 80a8cb4:	4650      	mov	r0, sl
 80a8cb6:	465b      	mov	r3, fp
 80a8cb8:	4659      	mov	r1, fp
 80a8cba:	f002 fd5b 	bl	80ab774 <__aeabi_dmul>
 80a8cbe:	e9cd 0100 	strd	r0, r1, [sp]
 80a8cc2:	f7ff bb3b 	b.w	80a833c <__ieee754_pow+0x8c>
 80a8cc6:	2a00      	cmp	r2, #0
 80a8cc8:	d141      	bne.n	80a8d4e <__ieee754_pow+0xa9e>
 80a8cca:	f1c1 0114 	rsb	r1, r1, #20
 80a8cce:	fa45 f001 	asr.w	r0, r5, r1
 80a8cd2:	fa00 f101 	lsl.w	r1, r0, r1
 80a8cd6:	42a9      	cmp	r1, r5
 80a8cd8:	d055      	beq.n	80a8d86 <__ieee754_pow+0xad6>
 80a8cda:	9202      	str	r2, [sp, #8]
 80a8cdc:	f7ff bb0d 	b.w	80a82fa <__ieee754_pow+0x4a>
 80a8ce0:	4a3d      	ldr	r2, [pc, #244]	; (80a8dd8 <__ieee754_pow+0xb28>)
 80a8ce2:	4293      	cmp	r3, r2
 80a8ce4:	dc56      	bgt.n	80a8d94 <__ieee754_pow+0xae4>
 80a8ce6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80a8cea:	9100      	str	r1, [sp, #0]
 80a8cec:	910c      	str	r1, [sp, #48]	; 0x30
 80a8cee:	e639      	b.n	80a8964 <__ieee754_pow+0x6b4>
 80a8cf0:	a331      	add	r3, pc, #196	; (adr r3, 80a8db8 <__ieee754_pow+0xb08>)
 80a8cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a8cfa:	f002 fd3b 	bl	80ab774 <__aeabi_dmul>
 80a8cfe:	a32e      	add	r3, pc, #184	; (adr r3, 80a8db8 <__ieee754_pow+0xb08>)
 80a8d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8d04:	f002 fd36 	bl	80ab774 <__aeabi_dmul>
 80a8d08:	e9cd 0100 	strd	r0, r1, [sp]
 80a8d0c:	f7ff bb16 	b.w	80a833c <__ieee754_pow+0x8c>
 80a8d10:	9b02      	ldr	r3, [sp, #8]
 80a8d12:	2b01      	cmp	r3, #1
 80a8d14:	f47f ab12 	bne.w	80a833c <__ieee754_pow+0x8c>
 80a8d18:	e9dd 4500 	ldrd	r4, r5, [sp]
 80a8d1c:	4622      	mov	r2, r4
 80a8d1e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a8d22:	e9cd 2300 	strd	r2, r3, [sp]
 80a8d26:	f7ff bb09 	b.w	80a833c <__ieee754_pow+0x8c>
 80a8d2a:	a425      	add	r4, pc, #148	; (adr r4, 80a8dc0 <__ieee754_pow+0xb10>)
 80a8d2c:	e9d4 3400 	ldrd	r3, r4, [r4]
 80a8d30:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a8d34:	a424      	add	r4, pc, #144	; (adr r4, 80a8dc8 <__ieee754_pow+0xb18>)
 80a8d36:	e9d4 3400 	ldrd	r3, r4, [r4]
 80a8d3a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a8d3e:	2300      	movs	r3, #0
 80a8d40:	4c26      	ldr	r4, [pc, #152]	; (80a8ddc <__ieee754_pow+0xb2c>)
 80a8d42:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
 80a8d46:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a8d4a:	f7ff bbe0 	b.w	80a850e <__ieee754_pow+0x25e>
 80a8d4e:	4650      	mov	r0, sl
 80a8d50:	4659      	mov	r1, fp
 80a8d52:	9302      	str	r3, [sp, #8]
 80a8d54:	f002 f91c 	bl	80aaf90 <fabs>
 80a8d58:	9b02      	ldr	r3, [sp, #8]
 80a8d5a:	e9cd 0100 	strd	r0, r1, [sp]
 80a8d5e:	2b00      	cmp	r3, #0
 80a8d60:	f47f ab86 	bne.w	80a8470 <__ieee754_pow+0x1c0>
 80a8d64:	9302      	str	r3, [sp, #8]
 80a8d66:	f7ff bb1b 	b.w	80a83a0 <__ieee754_pow+0xf0>
 80a8d6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a8d6c:	f002 fa30 	bl	80ab1d0 <scalbn>
 80a8d70:	e6a9      	b.n	80a8ac6 <__ieee754_pow+0x816>
 80a8d72:	f000 0001 	and.w	r0, r0, #1
 80a8d76:	f1c0 0102 	rsb	r1, r0, #2
 80a8d7a:	9102      	str	r1, [sp, #8]
 80a8d7c:	2a00      	cmp	r2, #0
 80a8d7e:	f43f aabc 	beq.w	80a82fa <__ieee754_pow+0x4a>
 80a8d82:	f7ff bb04 	b.w	80a838e <__ieee754_pow+0xde>
 80a8d86:	f000 0001 	and.w	r0, r0, #1
 80a8d8a:	f1c0 0202 	rsb	r2, r0, #2
 80a8d8e:	9202      	str	r2, [sp, #8]
 80a8d90:	f7ff bab3 	b.w	80a82fa <__ieee754_pow+0x4a>
 80a8d94:	151b      	asrs	r3, r3, #20
 80a8d96:	e5b3      	b.n	80a8900 <__ieee754_pow+0x650>
 80a8d98:	60000000 	.word	0x60000000
 80a8d9c:	3ff71547 	.word	0x3ff71547
 80a8da0:	f85ddf44 	.word	0xf85ddf44
 80a8da4:	3e54ae0b 	.word	0x3e54ae0b
 80a8da8:	55555555 	.word	0x55555555
 80a8dac:	3fd55555 	.word	0x3fd55555
 80a8db0:	652b82fe 	.word	0x652b82fe
 80a8db4:	3ff71547 	.word	0x3ff71547
 80a8db8:	8800759c 	.word	0x8800759c
 80a8dbc:	7e37e43c 	.word	0x7e37e43c
 80a8dc0:	40000000 	.word	0x40000000
 80a8dc4:	3fe2b803 	.word	0x3fe2b803
 80a8dc8:	43cfd006 	.word	0x43cfd006
 80a8dcc:	3e4cfdeb 	.word	0x3e4cfdeb
 80a8dd0:	3ff00000 	.word	0x3ff00000
 80a8dd4:	3fd00000 	.word	0x3fd00000
 80a8dd8:	3fe00000 	.word	0x3fe00000
 80a8ddc:	3ff80000 	.word	0x3ff80000

080a8de0 <__ieee754_rem_pio2>:
 80a8de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8de4:	4f8c      	ldr	r7, [pc, #560]	; (80a9018 <__ieee754_rem_pio2+0x238>)
 80a8de6:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 80a8dea:	42bd      	cmp	r5, r7
 80a8dec:	4614      	mov	r4, r2
 80a8dee:	4606      	mov	r6, r0
 80a8df0:	b08d      	sub	sp, #52	; 0x34
 80a8df2:	f340 8086 	ble.w	80a8f02 <__ieee754_rem_pio2+0x122>
 80a8df6:	4a89      	ldr	r2, [pc, #548]	; (80a901c <__ieee754_rem_pio2+0x23c>)
 80a8df8:	468b      	mov	fp, r1
 80a8dfa:	4295      	cmp	r5, r2
 80a8dfc:	dc27      	bgt.n	80a8e4e <__ieee754_rem_pio2+0x6e>
 80a8dfe:	a37c      	add	r3, pc, #496	; (adr r3, 80a8ff0 <__ieee754_rem_pio2+0x210>)
 80a8e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8e04:	2900      	cmp	r1, #0
 80a8e06:	f340 81b8 	ble.w	80a917a <__ieee754_rem_pio2+0x39a>
 80a8e0a:	f002 fafb 	bl	80ab404 <__aeabi_dsub>
 80a8e0e:	4b84      	ldr	r3, [pc, #528]	; (80a9020 <__ieee754_rem_pio2+0x240>)
 80a8e10:	4606      	mov	r6, r0
 80a8e12:	429d      	cmp	r5, r3
 80a8e14:	460f      	mov	r7, r1
 80a8e16:	f000 808b 	beq.w	80a8f30 <__ieee754_rem_pio2+0x150>
 80a8e1a:	a377      	add	r3, pc, #476	; (adr r3, 80a8ff8 <__ieee754_rem_pio2+0x218>)
 80a8e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8e20:	f002 faf0 	bl	80ab404 <__aeabi_dsub>
 80a8e24:	4602      	mov	r2, r0
 80a8e26:	460b      	mov	r3, r1
 80a8e28:	4630      	mov	r0, r6
 80a8e2a:	e9c4 2300 	strd	r2, r3, [r4]
 80a8e2e:	4639      	mov	r1, r7
 80a8e30:	f002 fae8 	bl	80ab404 <__aeabi_dsub>
 80a8e34:	a370      	add	r3, pc, #448	; (adr r3, 80a8ff8 <__ieee754_rem_pio2+0x218>)
 80a8e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8e3a:	f002 fae3 	bl	80ab404 <__aeabi_dsub>
 80a8e3e:	f04f 0a01 	mov.w	sl, #1
 80a8e42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a8e46:	4650      	mov	r0, sl
 80a8e48:	b00d      	add	sp, #52	; 0x34
 80a8e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8e4e:	4a75      	ldr	r2, [pc, #468]	; (80a9024 <__ieee754_rem_pio2+0x244>)
 80a8e50:	4295      	cmp	r5, r2
 80a8e52:	f340 808e 	ble.w	80a8f72 <__ieee754_rem_pio2+0x192>
 80a8e56:	4a74      	ldr	r2, [pc, #464]	; (80a9028 <__ieee754_rem_pio2+0x248>)
 80a8e58:	4295      	cmp	r5, r2
 80a8e5a:	dc5e      	bgt.n	80a8f1a <__ieee754_rem_pio2+0x13a>
 80a8e5c:	ea4f 5a25 	mov.w	sl, r5, asr #20
 80a8e60:	f2aa 4a16 	subw	sl, sl, #1046	; 0x416
 80a8e64:	eba5 510a 	sub.w	r1, r5, sl, lsl #20
 80a8e68:	460f      	mov	r7, r1
 80a8e6a:	f002 ff33 	bl	80abcd4 <__aeabi_d2iz>
 80a8e6e:	f002 fc17 	bl	80ab6a0 <__aeabi_i2d>
 80a8e72:	4680      	mov	r8, r0
 80a8e74:	4689      	mov	r9, r1
 80a8e76:	4630      	mov	r0, r6
 80a8e78:	4639      	mov	r1, r7
 80a8e7a:	4642      	mov	r2, r8
 80a8e7c:	464b      	mov	r3, r9
 80a8e7e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80a8e82:	f002 fabf 	bl	80ab404 <__aeabi_dsub>
 80a8e86:	2200      	movs	r2, #0
 80a8e88:	4b68      	ldr	r3, [pc, #416]	; (80a902c <__ieee754_rem_pio2+0x24c>)
 80a8e8a:	f002 fc73 	bl	80ab774 <__aeabi_dmul>
 80a8e8e:	460f      	mov	r7, r1
 80a8e90:	4606      	mov	r6, r0
 80a8e92:	f002 ff1f 	bl	80abcd4 <__aeabi_d2iz>
 80a8e96:	4605      	mov	r5, r0
 80a8e98:	f002 fc02 	bl	80ab6a0 <__aeabi_i2d>
 80a8e9c:	4602      	mov	r2, r0
 80a8e9e:	460b      	mov	r3, r1
 80a8ea0:	4630      	mov	r0, r6
 80a8ea2:	4639      	mov	r1, r7
 80a8ea4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a8ea8:	f002 faac 	bl	80ab404 <__aeabi_dsub>
 80a8eac:	2200      	movs	r2, #0
 80a8eae:	4b5f      	ldr	r3, [pc, #380]	; (80a902c <__ieee754_rem_pio2+0x24c>)
 80a8eb0:	f002 fc60 	bl	80ab774 <__aeabi_dmul>
 80a8eb4:	4602      	mov	r2, r0
 80a8eb6:	460b      	mov	r3, r1
 80a8eb8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a8ebc:	2200      	movs	r2, #0
 80a8ebe:	2300      	movs	r3, #0
 80a8ec0:	f002 fec0 	bl	80abc44 <__aeabi_dcmpeq>
 80a8ec4:	2800      	cmp	r0, #0
 80a8ec6:	f000 8156 	beq.w	80a9176 <__ieee754_rem_pio2+0x396>
 80a8eca:	2d00      	cmp	r5, #0
 80a8ecc:	bf0c      	ite	eq
 80a8ece:	2301      	moveq	r3, #1
 80a8ed0:	2302      	movne	r3, #2
 80a8ed2:	2002      	movs	r0, #2
 80a8ed4:	4956      	ldr	r1, [pc, #344]	; (80a9030 <__ieee754_rem_pio2+0x250>)
 80a8ed6:	4652      	mov	r2, sl
 80a8ed8:	e9cd 0100 	strd	r0, r1, [sp]
 80a8edc:	4621      	mov	r1, r4
 80a8ede:	a806      	add	r0, sp, #24
 80a8ee0:	f000 fec2 	bl	80a9c68 <__kernel_rem_pio2>
 80a8ee4:	f1bb 0f00 	cmp.w	fp, #0
 80a8ee8:	4682      	mov	sl, r0
 80a8eea:	daac      	bge.n	80a8e46 <__ieee754_rem_pio2+0x66>
 80a8eec:	6862      	ldr	r2, [r4, #4]
 80a8eee:	68e3      	ldr	r3, [r4, #12]
 80a8ef0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a8ef4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a8ef8:	f1c0 0a00 	rsb	sl, r0, #0
 80a8efc:	6062      	str	r2, [r4, #4]
 80a8efe:	60e3      	str	r3, [r4, #12]
 80a8f00:	e7a1      	b.n	80a8e46 <__ieee754_rem_pio2+0x66>
 80a8f02:	f04f 0a00 	mov.w	sl, #0
 80a8f06:	2200      	movs	r2, #0
 80a8f08:	2300      	movs	r3, #0
 80a8f0a:	e9c4 0100 	strd	r0, r1, [r4]
 80a8f0e:	4650      	mov	r0, sl
 80a8f10:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a8f14:	b00d      	add	sp, #52	; 0x34
 80a8f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8f1a:	4602      	mov	r2, r0
 80a8f1c:	465b      	mov	r3, fp
 80a8f1e:	f002 fa71 	bl	80ab404 <__aeabi_dsub>
 80a8f22:	f04f 0a00 	mov.w	sl, #0
 80a8f26:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a8f2a:	e9c4 0100 	strd	r0, r1, [r4]
 80a8f2e:	e78a      	b.n	80a8e46 <__ieee754_rem_pio2+0x66>
 80a8f30:	a333      	add	r3, pc, #204	; (adr r3, 80a9000 <__ieee754_rem_pio2+0x220>)
 80a8f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8f36:	f002 fa65 	bl	80ab404 <__aeabi_dsub>
 80a8f3a:	a333      	add	r3, pc, #204	; (adr r3, 80a9008 <__ieee754_rem_pio2+0x228>)
 80a8f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8f40:	4606      	mov	r6, r0
 80a8f42:	460f      	mov	r7, r1
 80a8f44:	f002 fa5e 	bl	80ab404 <__aeabi_dsub>
 80a8f48:	4602      	mov	r2, r0
 80a8f4a:	460b      	mov	r3, r1
 80a8f4c:	4630      	mov	r0, r6
 80a8f4e:	e9c4 2300 	strd	r2, r3, [r4]
 80a8f52:	4639      	mov	r1, r7
 80a8f54:	f002 fa56 	bl	80ab404 <__aeabi_dsub>
 80a8f58:	a32b      	add	r3, pc, #172	; (adr r3, 80a9008 <__ieee754_rem_pio2+0x228>)
 80a8f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8f5e:	f002 fa51 	bl	80ab404 <__aeabi_dsub>
 80a8f62:	f04f 0a01 	mov.w	sl, #1
 80a8f66:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a8f6a:	4650      	mov	r0, sl
 80a8f6c:	b00d      	add	sp, #52	; 0x34
 80a8f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8f72:	f002 f80d 	bl	80aaf90 <fabs>
 80a8f76:	a326      	add	r3, pc, #152	; (adr r3, 80a9010 <__ieee754_rem_pio2+0x230>)
 80a8f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8f7c:	4606      	mov	r6, r0
 80a8f7e:	460f      	mov	r7, r1
 80a8f80:	f002 fbf8 	bl	80ab774 <__aeabi_dmul>
 80a8f84:	2200      	movs	r2, #0
 80a8f86:	4b2b      	ldr	r3, [pc, #172]	; (80a9034 <__ieee754_rem_pio2+0x254>)
 80a8f88:	f002 fa3e 	bl	80ab408 <__adddf3>
 80a8f8c:	f002 fea2 	bl	80abcd4 <__aeabi_d2iz>
 80a8f90:	4682      	mov	sl, r0
 80a8f92:	f002 fb85 	bl	80ab6a0 <__aeabi_i2d>
 80a8f96:	a316      	add	r3, pc, #88	; (adr r3, 80a8ff0 <__ieee754_rem_pio2+0x210>)
 80a8f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8f9c:	4680      	mov	r8, r0
 80a8f9e:	4689      	mov	r9, r1
 80a8fa0:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80a8fa4:	f002 fbe6 	bl	80ab774 <__aeabi_dmul>
 80a8fa8:	4602      	mov	r2, r0
 80a8faa:	460b      	mov	r3, r1
 80a8fac:	4630      	mov	r0, r6
 80a8fae:	4639      	mov	r1, r7
 80a8fb0:	f002 fa28 	bl	80ab404 <__aeabi_dsub>
 80a8fb4:	a310      	add	r3, pc, #64	; (adr r3, 80a8ff8 <__ieee754_rem_pio2+0x218>)
 80a8fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8fba:	4606      	mov	r6, r0
 80a8fbc:	460f      	mov	r7, r1
 80a8fbe:	4640      	mov	r0, r8
 80a8fc0:	4649      	mov	r1, r9
 80a8fc2:	46b0      	mov	r8, r6
 80a8fc4:	46b9      	mov	r9, r7
 80a8fc6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80a8fca:	f002 fbd3 	bl	80ab774 <__aeabi_dmul>
 80a8fce:	f1ba 0f1f 	cmp.w	sl, #31
 80a8fd2:	4606      	mov	r6, r0
 80a8fd4:	460f      	mov	r7, r1
 80a8fd6:	dc31      	bgt.n	80a903c <__ieee754_rem_pio2+0x25c>
 80a8fd8:	4b17      	ldr	r3, [pc, #92]	; (80a9038 <__ieee754_rem_pio2+0x258>)
 80a8fda:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80a8fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a8fe2:	42ab      	cmp	r3, r5
 80a8fe4:	d02a      	beq.n	80a903c <__ieee754_rem_pio2+0x25c>
 80a8fe6:	4602      	mov	r2, r0
 80a8fe8:	460b      	mov	r3, r1
 80a8fea:	4640      	mov	r0, r8
 80a8fec:	4649      	mov	r1, r9
 80a8fee:	e09e      	b.n	80a912e <__ieee754_rem_pio2+0x34e>
 80a8ff0:	54400000 	.word	0x54400000
 80a8ff4:	3ff921fb 	.word	0x3ff921fb
 80a8ff8:	1a626331 	.word	0x1a626331
 80a8ffc:	3dd0b461 	.word	0x3dd0b461
 80a9000:	1a600000 	.word	0x1a600000
 80a9004:	3dd0b461 	.word	0x3dd0b461
 80a9008:	2e037073 	.word	0x2e037073
 80a900c:	3ba3198a 	.word	0x3ba3198a
 80a9010:	6dc9c883 	.word	0x6dc9c883
 80a9014:	3fe45f30 	.word	0x3fe45f30
 80a9018:	3fe921fb 	.word	0x3fe921fb
 80a901c:	4002d97b 	.word	0x4002d97b
 80a9020:	3ff921fb 	.word	0x3ff921fb
 80a9024:	413921fb 	.word	0x413921fb
 80a9028:	7fefffff 	.word	0x7fefffff
 80a902c:	41700000 	.word	0x41700000
 80a9030:	080ad98c 	.word	0x080ad98c
 80a9034:	3fe00000 	.word	0x3fe00000
 80a9038:	080ad90c 	.word	0x080ad90c
 80a903c:	463b      	mov	r3, r7
 80a903e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a9042:	4632      	mov	r2, r6
 80a9044:	f002 f9de 	bl	80ab404 <__aeabi_dsub>
 80a9048:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a904c:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
 80a9050:	2b10      	cmp	r3, #16
 80a9052:	4689      	mov	r9, r1
 80a9054:	4680      	mov	r8, r0
 80a9056:	ea4f 5525 	mov.w	r5, r5, asr #20
 80a905a:	dd6c      	ble.n	80a9136 <__ieee754_rem_pio2+0x356>
 80a905c:	a366      	add	r3, pc, #408	; (adr r3, 80a91f8 <__ieee754_rem_pio2+0x418>)
 80a905e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9062:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a9066:	f002 fb85 	bl	80ab774 <__aeabi_dmul>
 80a906a:	4606      	mov	r6, r0
 80a906c:	460f      	mov	r7, r1
 80a906e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a9072:	4632      	mov	r2, r6
 80a9074:	463b      	mov	r3, r7
 80a9076:	f002 f9c5 	bl	80ab404 <__aeabi_dsub>
 80a907a:	4680      	mov	r8, r0
 80a907c:	4689      	mov	r9, r1
 80a907e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a9082:	4642      	mov	r2, r8
 80a9084:	464b      	mov	r3, r9
 80a9086:	f002 f9bd 	bl	80ab404 <__aeabi_dsub>
 80a908a:	4632      	mov	r2, r6
 80a908c:	463b      	mov	r3, r7
 80a908e:	f002 f9b9 	bl	80ab404 <__aeabi_dsub>
 80a9092:	a35b      	add	r3, pc, #364	; (adr r3, 80a9200 <__ieee754_rem_pio2+0x420>)
 80a9094:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9098:	4606      	mov	r6, r0
 80a909a:	460f      	mov	r7, r1
 80a909c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a90a0:	f002 fb68 	bl	80ab774 <__aeabi_dmul>
 80a90a4:	4632      	mov	r2, r6
 80a90a6:	463b      	mov	r3, r7
 80a90a8:	f002 f9ac 	bl	80ab404 <__aeabi_dsub>
 80a90ac:	4606      	mov	r6, r0
 80a90ae:	460f      	mov	r7, r1
 80a90b0:	4640      	mov	r0, r8
 80a90b2:	4649      	mov	r1, r9
 80a90b4:	463b      	mov	r3, r7
 80a90b6:	4632      	mov	r2, r6
 80a90b8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80a90bc:	f002 f9a2 	bl	80ab404 <__aeabi_dsub>
 80a90c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a90c4:	1aed      	subs	r5, r5, r3
 80a90c6:	2d31      	cmp	r5, #49	; 0x31
 80a90c8:	4689      	mov	r9, r1
 80a90ca:	4680      	mov	r8, r0
 80a90cc:	dd33      	ble.n	80a9136 <__ieee754_rem_pio2+0x356>
 80a90ce:	a34e      	add	r3, pc, #312	; (adr r3, 80a9208 <__ieee754_rem_pio2+0x428>)
 80a90d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a90d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a90d8:	f002 fb4c 	bl	80ab774 <__aeabi_dmul>
 80a90dc:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
 80a90e0:	4680      	mov	r8, r0
 80a90e2:	4689      	mov	r9, r1
 80a90e4:	4642      	mov	r2, r8
 80a90e6:	4631      	mov	r1, r6
 80a90e8:	464b      	mov	r3, r9
 80a90ea:	4628      	mov	r0, r5
 80a90ec:	f002 f98a 	bl	80ab404 <__aeabi_dsub>
 80a90f0:	4602      	mov	r2, r0
 80a90f2:	460b      	mov	r3, r1
 80a90f4:	4628      	mov	r0, r5
 80a90f6:	4631      	mov	r1, r6
 80a90f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a90fc:	f002 f982 	bl	80ab404 <__aeabi_dsub>
 80a9100:	4642      	mov	r2, r8
 80a9102:	464b      	mov	r3, r9
 80a9104:	f002 f97e 	bl	80ab404 <__aeabi_dsub>
 80a9108:	a341      	add	r3, pc, #260	; (adr r3, 80a9210 <__ieee754_rem_pio2+0x430>)
 80a910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a910e:	4606      	mov	r6, r0
 80a9110:	460f      	mov	r7, r1
 80a9112:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a9116:	f002 fb2d 	bl	80ab774 <__aeabi_dmul>
 80a911a:	4632      	mov	r2, r6
 80a911c:	463b      	mov	r3, r7
 80a911e:	f002 f971 	bl	80ab404 <__aeabi_dsub>
 80a9122:	4606      	mov	r6, r0
 80a9124:	460f      	mov	r7, r1
 80a9126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a912a:	4632      	mov	r2, r6
 80a912c:	463b      	mov	r3, r7
 80a912e:	f002 f969 	bl	80ab404 <__aeabi_dsub>
 80a9132:	4680      	mov	r8, r0
 80a9134:	4689      	mov	r9, r1
 80a9136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a913a:	4642      	mov	r2, r8
 80a913c:	464b      	mov	r3, r9
 80a913e:	e9c4 2300 	strd	r2, r3, [r4]
 80a9142:	f002 f95f 	bl	80ab404 <__aeabi_dsub>
 80a9146:	4632      	mov	r2, r6
 80a9148:	463b      	mov	r3, r7
 80a914a:	f002 f95b 	bl	80ab404 <__aeabi_dsub>
 80a914e:	4602      	mov	r2, r0
 80a9150:	460b      	mov	r3, r1
 80a9152:	f1bb 0f00 	cmp.w	fp, #0
 80a9156:	4605      	mov	r5, r0
 80a9158:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a915c:	f6bf ae73 	bge.w	80a8e46 <__ieee754_rem_pio2+0x66>
 80a9160:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a9164:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a9168:	e9c4 8300 	strd	r8, r3, [r4]
 80a916c:	e9c4 5102 	strd	r5, r1, [r4, #8]
 80a9170:	f1ca 0a00 	rsb	sl, sl, #0
 80a9174:	e667      	b.n	80a8e46 <__ieee754_rem_pio2+0x66>
 80a9176:	2303      	movs	r3, #3
 80a9178:	e6ab      	b.n	80a8ed2 <__ieee754_rem_pio2+0xf2>
 80a917a:	f002 f945 	bl	80ab408 <__adddf3>
 80a917e:	4b28      	ldr	r3, [pc, #160]	; (80a9220 <__ieee754_rem_pio2+0x440>)
 80a9180:	4606      	mov	r6, r0
 80a9182:	429d      	cmp	r5, r3
 80a9184:	460f      	mov	r7, r1
 80a9186:	d016      	beq.n	80a91b6 <__ieee754_rem_pio2+0x3d6>
 80a9188:	a323      	add	r3, pc, #140	; (adr r3, 80a9218 <__ieee754_rem_pio2+0x438>)
 80a918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a918e:	f002 f93b 	bl	80ab408 <__adddf3>
 80a9192:	4602      	mov	r2, r0
 80a9194:	460b      	mov	r3, r1
 80a9196:	4630      	mov	r0, r6
 80a9198:	e9c4 2300 	strd	r2, r3, [r4]
 80a919c:	4639      	mov	r1, r7
 80a919e:	f002 f931 	bl	80ab404 <__aeabi_dsub>
 80a91a2:	a31d      	add	r3, pc, #116	; (adr r3, 80a9218 <__ieee754_rem_pio2+0x438>)
 80a91a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a91a8:	f002 f92e 	bl	80ab408 <__adddf3>
 80a91ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80a91b0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a91b4:	e647      	b.n	80a8e46 <__ieee754_rem_pio2+0x66>
 80a91b6:	a310      	add	r3, pc, #64	; (adr r3, 80a91f8 <__ieee754_rem_pio2+0x418>)
 80a91b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a91bc:	f002 f924 	bl	80ab408 <__adddf3>
 80a91c0:	a30f      	add	r3, pc, #60	; (adr r3, 80a9200 <__ieee754_rem_pio2+0x420>)
 80a91c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a91c6:	4606      	mov	r6, r0
 80a91c8:	460f      	mov	r7, r1
 80a91ca:	f002 f91d 	bl	80ab408 <__adddf3>
 80a91ce:	4602      	mov	r2, r0
 80a91d0:	460b      	mov	r3, r1
 80a91d2:	4630      	mov	r0, r6
 80a91d4:	e9c4 2300 	strd	r2, r3, [r4]
 80a91d8:	4639      	mov	r1, r7
 80a91da:	f002 f913 	bl	80ab404 <__aeabi_dsub>
 80a91de:	a308      	add	r3, pc, #32	; (adr r3, 80a9200 <__ieee754_rem_pio2+0x420>)
 80a91e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a91e4:	f002 f910 	bl	80ab408 <__adddf3>
 80a91e8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80a91ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a91f0:	e629      	b.n	80a8e46 <__ieee754_rem_pio2+0x66>
 80a91f2:	bf00      	nop
 80a91f4:	f3af 8000 	nop.w
 80a91f8:	1a600000 	.word	0x1a600000
 80a91fc:	3dd0b461 	.word	0x3dd0b461
 80a9200:	2e037073 	.word	0x2e037073
 80a9204:	3ba3198a 	.word	0x3ba3198a
 80a9208:	2e000000 	.word	0x2e000000
 80a920c:	3ba3198a 	.word	0x3ba3198a
 80a9210:	252049c1 	.word	0x252049c1
 80a9214:	397b839a 	.word	0x397b839a
 80a9218:	1a626331 	.word	0x1a626331
 80a921c:	3dd0b461 	.word	0x3dd0b461
 80a9220:	3ff921fb 	.word	0x3ff921fb

080a9224 <__ieee754_sqrt>:
 80a9224:	4a60      	ldr	r2, [pc, #384]	; (80a93a8 <__ieee754_sqrt+0x184>)
 80a9226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a922a:	438a      	bics	r2, r1
 80a922c:	460e      	mov	r6, r1
 80a922e:	4605      	mov	r5, r0
 80a9230:	f000 8097 	beq.w	80a9362 <__ieee754_sqrt+0x13e>
 80a9234:	2900      	cmp	r1, #0
 80a9236:	460b      	mov	r3, r1
 80a9238:	4604      	mov	r4, r0
 80a923a:	dd4e      	ble.n	80a92da <__ieee754_sqrt+0xb6>
 80a923c:	1509      	asrs	r1, r1, #20
 80a923e:	d05a      	beq.n	80a92f6 <__ieee754_sqrt+0xd2>
 80a9240:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a9244:	07ca      	lsls	r2, r1, #31
 80a9246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a924a:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
 80a924e:	d403      	bmi.n	80a9258 <__ieee754_sqrt+0x34>
 80a9250:	005b      	lsls	r3, r3, #1
 80a9252:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80a9256:	0064      	lsls	r4, r4, #1
 80a9258:	f04f 0c00 	mov.w	ip, #0
 80a925c:	2516      	movs	r5, #22
 80a925e:	4666      	mov	r6, ip
 80a9260:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80a9264:	0fe1      	lsrs	r1, r4, #31
 80a9266:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a926a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80a926e:	0064      	lsls	r4, r4, #1
 80a9270:	18b1      	adds	r1, r6, r2
 80a9272:	4299      	cmp	r1, r3
 80a9274:	dc02      	bgt.n	80a927c <__ieee754_sqrt+0x58>
 80a9276:	1a5b      	subs	r3, r3, r1
 80a9278:	188e      	adds	r6, r1, r2
 80a927a:	4494      	add	ip, r2
 80a927c:	005b      	lsls	r3, r3, #1
 80a927e:	3d01      	subs	r5, #1
 80a9280:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80a9284:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a9288:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80a928c:	d1f0      	bne.n	80a9270 <__ieee754_sqrt+0x4c>
 80a928e:	462f      	mov	r7, r5
 80a9290:	2020      	movs	r0, #32
 80a9292:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80a9296:	e009      	b.n	80a92ac <__ieee754_sqrt+0x88>
 80a9298:	d03d      	beq.n	80a9316 <__ieee754_sqrt+0xf2>
 80a929a:	0fe1      	lsrs	r1, r4, #31
 80a929c:	3801      	subs	r0, #1
 80a929e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a92a2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80a92a6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80a92aa:	d03d      	beq.n	80a9328 <__ieee754_sqrt+0x104>
 80a92ac:	42b3      	cmp	r3, r6
 80a92ae:	eb02 0105 	add.w	r1, r2, r5
 80a92b2:	ddf1      	ble.n	80a9298 <__ieee754_sqrt+0x74>
 80a92b4:	2900      	cmp	r1, #0
 80a92b6:	eb01 0502 	add.w	r5, r1, r2
 80a92ba:	db09      	blt.n	80a92d0 <__ieee754_sqrt+0xac>
 80a92bc:	46b0      	mov	r8, r6
 80a92be:	1b9b      	subs	r3, r3, r6
 80a92c0:	42a1      	cmp	r1, r4
 80a92c2:	bf88      	it	hi
 80a92c4:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80a92c8:	4646      	mov	r6, r8
 80a92ca:	1a64      	subs	r4, r4, r1
 80a92cc:	4417      	add	r7, r2
 80a92ce:	e7e4      	b.n	80a929a <__ieee754_sqrt+0x76>
 80a92d0:	2d00      	cmp	r5, #0
 80a92d2:	dbf3      	blt.n	80a92bc <__ieee754_sqrt+0x98>
 80a92d4:	f106 0801 	add.w	r8, r6, #1
 80a92d8:	e7f1      	b.n	80a92be <__ieee754_sqrt+0x9a>
 80a92da:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a92de:	4302      	orrs	r2, r0
 80a92e0:	d057      	beq.n	80a9392 <__ieee754_sqrt+0x16e>
 80a92e2:	2900      	cmp	r1, #0
 80a92e4:	d14b      	bne.n	80a937e <__ieee754_sqrt+0x15a>
 80a92e6:	0ae2      	lsrs	r2, r4, #11
 80a92e8:	4613      	mov	r3, r2
 80a92ea:	3915      	subs	r1, #21
 80a92ec:	0564      	lsls	r4, r4, #21
 80a92ee:	2a00      	cmp	r2, #0
 80a92f0:	d0f9      	beq.n	80a92e6 <__ieee754_sqrt+0xc2>
 80a92f2:	02d7      	lsls	r7, r2, #11
 80a92f4:	d452      	bmi.n	80a939c <__ieee754_sqrt+0x178>
 80a92f6:	2000      	movs	r0, #0
 80a92f8:	005b      	lsls	r3, r3, #1
 80a92fa:	02de      	lsls	r6, r3, #11
 80a92fc:	4605      	mov	r5, r0
 80a92fe:	f100 0001 	add.w	r0, r0, #1
 80a9302:	d5f9      	bpl.n	80a92f8 <__ieee754_sqrt+0xd4>
 80a9304:	461a      	mov	r2, r3
 80a9306:	4623      	mov	r3, r4
 80a9308:	4084      	lsls	r4, r0
 80a930a:	f1c0 0020 	rsb	r0, r0, #32
 80a930e:	40c3      	lsrs	r3, r0
 80a9310:	4313      	orrs	r3, r2
 80a9312:	1b49      	subs	r1, r1, r5
 80a9314:	e794      	b.n	80a9240 <__ieee754_sqrt+0x1c>
 80a9316:	42a1      	cmp	r1, r4
 80a9318:	d8bf      	bhi.n	80a929a <__ieee754_sqrt+0x76>
 80a931a:	2900      	cmp	r1, #0
 80a931c:	eb01 0502 	add.w	r5, r1, r2
 80a9320:	dbd6      	blt.n	80a92d0 <__ieee754_sqrt+0xac>
 80a9322:	4698      	mov	r8, r3
 80a9324:	2300      	movs	r3, #0
 80a9326:	e7cf      	b.n	80a92c8 <__ieee754_sqrt+0xa4>
 80a9328:	4323      	orrs	r3, r4
 80a932a:	d113      	bne.n	80a9354 <__ieee754_sqrt+0x130>
 80a932c:	0878      	lsrs	r0, r7, #1
 80a932e:	ea4f 036c 	mov.w	r3, ip, asr #1
 80a9332:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a9336:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a933a:	f01c 0f01 	tst.w	ip, #1
 80a933e:	bf18      	it	ne
 80a9340:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
 80a9344:	eb03 550e 	add.w	r5, r3, lr, lsl #20
 80a9348:	4602      	mov	r2, r0
 80a934a:	462b      	mov	r3, r5
 80a934c:	4610      	mov	r0, r2
 80a934e:	4619      	mov	r1, r3
 80a9350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a9354:	1c7b      	adds	r3, r7, #1
 80a9356:	bf16      	itet	ne
 80a9358:	1c78      	addne	r0, r7, #1
 80a935a:	f10c 0c01 	addeq.w	ip, ip, #1
 80a935e:	0840      	lsrne	r0, r0, #1
 80a9360:	e7e5      	b.n	80a932e <__ieee754_sqrt+0x10a>
 80a9362:	4602      	mov	r2, r0
 80a9364:	460b      	mov	r3, r1
 80a9366:	f002 fa05 	bl	80ab774 <__aeabi_dmul>
 80a936a:	462a      	mov	r2, r5
 80a936c:	4633      	mov	r3, r6
 80a936e:	f002 f84b 	bl	80ab408 <__adddf3>
 80a9372:	4602      	mov	r2, r0
 80a9374:	460b      	mov	r3, r1
 80a9376:	4610      	mov	r0, r2
 80a9378:	4619      	mov	r1, r3
 80a937a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a937e:	4602      	mov	r2, r0
 80a9380:	f002 f840 	bl	80ab404 <__aeabi_dsub>
 80a9384:	4602      	mov	r2, r0
 80a9386:	460b      	mov	r3, r1
 80a9388:	f002 fb1e 	bl	80ab9c8 <__aeabi_ddiv>
 80a938c:	4602      	mov	r2, r0
 80a938e:	460b      	mov	r3, r1
 80a9390:	e7dc      	b.n	80a934c <__ieee754_sqrt+0x128>
 80a9392:	4602      	mov	r2, r0
 80a9394:	4619      	mov	r1, r3
 80a9396:	4610      	mov	r0, r2
 80a9398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a939c:	4623      	mov	r3, r4
 80a939e:	2020      	movs	r0, #32
 80a93a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a93a4:	e7b3      	b.n	80a930e <__ieee754_sqrt+0xea>
 80a93a6:	bf00      	nop
 80a93a8:	7ff00000 	.word	0x7ff00000

080a93ac <__ieee754_fmodf>:
 80a93ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a93ae:	f031 4700 	bics.w	r7, r1, #2147483648	; 0x80000000
 80a93b2:	d041      	beq.n	80a9438 <__ieee754_fmodf+0x8c>
 80a93b4:	f020 4c00 	bic.w	ip, r0, #2147483648	; 0x80000000
 80a93b8:	f1bc 4fff 	cmp.w	ip, #2139095040	; 0x7f800000
 80a93bc:	4603      	mov	r3, r0
 80a93be:	da3b      	bge.n	80a9438 <__ieee754_fmodf+0x8c>
 80a93c0:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80a93c4:	dc38      	bgt.n	80a9438 <__ieee754_fmodf+0x8c>
 80a93c6:	45bc      	cmp	ip, r7
 80a93c8:	db3b      	blt.n	80a9442 <__ieee754_fmodf+0x96>
 80a93ca:	f000 4600 	and.w	r6, r0, #2147483648	; 0x80000000
 80a93ce:	d039      	beq.n	80a9444 <__ieee754_fmodf+0x98>
 80a93d0:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80a93d4:	460c      	mov	r4, r1
 80a93d6:	d14e      	bne.n	80a9476 <__ieee754_fmodf+0xca>
 80a93d8:	ea4f 210c 	mov.w	r1, ip, lsl #8
 80a93dc:	2900      	cmp	r1, #0
 80a93de:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 80a93e2:	dd04      	ble.n	80a93ee <__ieee754_fmodf+0x42>
 80a93e4:	0049      	lsls	r1, r1, #1
 80a93e6:	2900      	cmp	r1, #0
 80a93e8:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80a93ec:	dcfa      	bgt.n	80a93e4 <__ieee754_fmodf+0x38>
 80a93ee:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
 80a93f2:	d150      	bne.n	80a9496 <__ieee754_fmodf+0xea>
 80a93f4:	0239      	lsls	r1, r7, #8
 80a93f6:	f06f 057d 	mvn.w	r5, #125	; 0x7d
 80a93fa:	d403      	bmi.n	80a9404 <__ieee754_fmodf+0x58>
 80a93fc:	0049      	lsls	r1, r1, #1
 80a93fe:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80a9402:	d5fb      	bpl.n	80a93fc <__ieee754_fmodf+0x50>
 80a9404:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80a9408:	db3f      	blt.n	80a948a <__ieee754_fmodf+0xde>
 80a940a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80a940e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80a9412:	f115 0f7e 	cmn.w	r5, #126	; 0x7e
 80a9416:	db32      	blt.n	80a947e <__ieee754_fmodf+0xd2>
 80a9418:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80a941c:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 80a9420:	1b52      	subs	r2, r2, r5
 80a9422:	d104      	bne.n	80a942e <__ieee754_fmodf+0x82>
 80a9424:	e013      	b.n	80a944e <__ieee754_fmodf+0xa2>
 80a9426:	d00d      	beq.n	80a9444 <__ieee754_fmodf+0x98>
 80a9428:	004b      	lsls	r3, r1, #1
 80a942a:	3a01      	subs	r2, #1
 80a942c:	d00f      	beq.n	80a944e <__ieee754_fmodf+0xa2>
 80a942e:	1b19      	subs	r1, r3, r4
 80a9430:	2900      	cmp	r1, #0
 80a9432:	daf8      	bge.n	80a9426 <__ieee754_fmodf+0x7a>
 80a9434:	005b      	lsls	r3, r3, #1
 80a9436:	e7f8      	b.n	80a942a <__ieee754_fmodf+0x7e>
 80a9438:	f002 fdf2 	bl	80ac020 <__aeabi_fmul>
 80a943c:	4601      	mov	r1, r0
 80a943e:	f002 fea3 	bl	80ac188 <__aeabi_fdiv>
 80a9442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a9444:	4b19      	ldr	r3, [pc, #100]	; (80a94ac <__ieee754_fmodf+0x100>)
 80a9446:	0ff0      	lsrs	r0, r6, #31
 80a9448:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80a944c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a944e:	1b1c      	subs	r4, r3, r4
 80a9450:	bf58      	it	pl
 80a9452:	4623      	movpl	r3, r4
 80a9454:	b913      	cbnz	r3, 80a945c <__ieee754_fmodf+0xb0>
 80a9456:	e7f5      	b.n	80a9444 <__ieee754_fmodf+0x98>
 80a9458:	005b      	lsls	r3, r3, #1
 80a945a:	3d01      	subs	r5, #1
 80a945c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80a9460:	dbfa      	blt.n	80a9458 <__ieee754_fmodf+0xac>
 80a9462:	f115 0f7e 	cmn.w	r5, #126	; 0x7e
 80a9466:	db19      	blt.n	80a949c <__ieee754_fmodf+0xf0>
 80a9468:	f5a3 0000 	sub.w	r0, r3, #8388608	; 0x800000
 80a946c:	4330      	orrs	r0, r6
 80a946e:	357f      	adds	r5, #127	; 0x7f
 80a9470:	ea40 50c5 	orr.w	r0, r0, r5, lsl #23
 80a9474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a9476:	ea4f 52ec 	mov.w	r2, ip, asr #23
 80a947a:	3a7f      	subs	r2, #127	; 0x7f
 80a947c:	e7b7      	b.n	80a93ee <__ieee754_fmodf+0x42>
 80a947e:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80a9482:	1b49      	subs	r1, r1, r5
 80a9484:	fa07 f401 	lsl.w	r4, r7, r1
 80a9488:	e7ca      	b.n	80a9420 <__ieee754_fmodf+0x74>
 80a948a:	f06f 037d 	mvn.w	r3, #125	; 0x7d
 80a948e:	1a9b      	subs	r3, r3, r2
 80a9490:	fa0c f303 	lsl.w	r3, ip, r3
 80a9494:	e7bd      	b.n	80a9412 <__ieee754_fmodf+0x66>
 80a9496:	15fd      	asrs	r5, r7, #23
 80a9498:	3d7f      	subs	r5, #127	; 0x7f
 80a949a:	e7b3      	b.n	80a9404 <__ieee754_fmodf+0x58>
 80a949c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80a94a0:	1b40      	subs	r0, r0, r5
 80a94a2:	fa43 f000 	asr.w	r0, r3, r0
 80a94a6:	4330      	orrs	r0, r6
 80a94a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a94aa:	bf00      	nop
 80a94ac:	080ada94 	.word	0x080ada94

080a94b0 <__ieee754_logf>:
 80a94b0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a94b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a94b8:	d02b      	beq.n	80a9512 <__ieee754_logf+0x62>
 80a94ba:	2800      	cmp	r0, #0
 80a94bc:	4601      	mov	r1, r0
 80a94be:	4603      	mov	r3, r0
 80a94c0:	db40      	blt.n	80a9544 <__ieee754_logf+0x94>
 80a94c2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80a94c6:	da39      	bge.n	80a953c <__ieee754_logf+0x8c>
 80a94c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a94cc:	db41      	blt.n	80a9552 <__ieee754_logf+0xa2>
 80a94ce:	2100      	movs	r1, #0
 80a94d0:	4a8a      	ldr	r2, [pc, #552]	; (80a96fc <__ieee754_logf+0x24c>)
 80a94d2:	f3c3 0616 	ubfx	r6, r3, #0, #23
 80a94d6:	4432      	add	r2, r6
 80a94d8:	15dc      	asrs	r4, r3, #23
 80a94da:	f402 0000 	and.w	r0, r2, #8388608	; 0x800000
 80a94de:	3c7f      	subs	r4, #127	; 0x7f
 80a94e0:	f080 507e 	eor.w	r0, r0, #1065353216	; 0x3f800000
 80a94e4:	440c      	add	r4, r1
 80a94e6:	4330      	orrs	r0, r6
 80a94e8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a94ec:	eb04 54d2 	add.w	r4, r4, r2, lsr #23
 80a94f0:	f002 fc8c 	bl	80abe0c <__aeabi_fsub>
 80a94f4:	4b82      	ldr	r3, [pc, #520]	; (80a9700 <__ieee754_logf+0x250>)
 80a94f6:	f106 020f 	add.w	r2, r6, #15
 80a94fa:	4013      	ands	r3, r2
 80a94fc:	4605      	mov	r5, r0
 80a94fe:	bb83      	cbnz	r3, 80a9562 <__ieee754_logf+0xb2>
 80a9500:	2100      	movs	r1, #0
 80a9502:	f002 ff21 	bl	80ac348 <__aeabi_fcmpeq>
 80a9506:	2800      	cmp	r0, #0
 80a9508:	f000 80a2 	beq.w	80a9650 <__ieee754_logf+0x1a0>
 80a950c:	b944      	cbnz	r4, 80a9520 <__ieee754_logf+0x70>
 80a950e:	2000      	movs	r0, #0
 80a9510:	e004      	b.n	80a951c <__ieee754_logf+0x6c>
 80a9512:	2100      	movs	r1, #0
 80a9514:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 80a9518:	f002 fe36 	bl	80ac188 <__aeabi_fdiv>
 80a951c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a9520:	4620      	mov	r0, r4
 80a9522:	f002 fd29 	bl	80abf78 <__aeabi_i2f>
 80a9526:	4977      	ldr	r1, [pc, #476]	; (80a9704 <__ieee754_logf+0x254>)
 80a9528:	4605      	mov	r5, r0
 80a952a:	f002 fd79 	bl	80ac020 <__aeabi_fmul>
 80a952e:	4976      	ldr	r1, [pc, #472]	; (80a9708 <__ieee754_logf+0x258>)
 80a9530:	4604      	mov	r4, r0
 80a9532:	4628      	mov	r0, r5
 80a9534:	f002 fd74 	bl	80ac020 <__aeabi_fmul>
 80a9538:	4601      	mov	r1, r0
 80a953a:	4620      	mov	r0, r4
 80a953c:	f002 fc68 	bl	80abe10 <__addsf3>
 80a9540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a9544:	f002 fc62 	bl	80abe0c <__aeabi_fsub>
 80a9548:	2100      	movs	r1, #0
 80a954a:	f002 fe1d 	bl	80ac188 <__aeabi_fdiv>
 80a954e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a9552:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80a9556:	f002 fd63 	bl	80ac020 <__aeabi_fmul>
 80a955a:	f06f 0118 	mvn.w	r1, #24
 80a955e:	4603      	mov	r3, r0
 80a9560:	e7b6      	b.n	80a94d0 <__ieee754_logf+0x20>
 80a9562:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80a9566:	f002 fc53 	bl	80abe10 <__addsf3>
 80a956a:	4601      	mov	r1, r0
 80a956c:	4628      	mov	r0, r5
 80a956e:	f002 fe0b 	bl	80ac188 <__aeabi_fdiv>
 80a9572:	4680      	mov	r8, r0
 80a9574:	4620      	mov	r0, r4
 80a9576:	f002 fcff 	bl	80abf78 <__aeabi_i2f>
 80a957a:	4641      	mov	r1, r8
 80a957c:	4681      	mov	r9, r0
 80a957e:	4640      	mov	r0, r8
 80a9580:	f002 fd4e 	bl	80ac020 <__aeabi_fmul>
 80a9584:	4601      	mov	r1, r0
 80a9586:	4682      	mov	sl, r0
 80a9588:	f002 fd4a 	bl	80ac020 <__aeabi_fmul>
 80a958c:	4607      	mov	r7, r0
 80a958e:	495f      	ldr	r1, [pc, #380]	; (80a970c <__ieee754_logf+0x25c>)
 80a9590:	f002 fd46 	bl	80ac020 <__aeabi_fmul>
 80a9594:	495e      	ldr	r1, [pc, #376]	; (80a9710 <__ieee754_logf+0x260>)
 80a9596:	f002 fc3b 	bl	80abe10 <__addsf3>
 80a959a:	4639      	mov	r1, r7
 80a959c:	f002 fd40 	bl	80ac020 <__aeabi_fmul>
 80a95a0:	495c      	ldr	r1, [pc, #368]	; (80a9714 <__ieee754_logf+0x264>)
 80a95a2:	f002 fc35 	bl	80abe10 <__addsf3>
 80a95a6:	4639      	mov	r1, r7
 80a95a8:	f002 fd3a 	bl	80ac020 <__aeabi_fmul>
 80a95ac:	495a      	ldr	r1, [pc, #360]	; (80a9718 <__ieee754_logf+0x268>)
 80a95ae:	f002 fc2f 	bl	80abe10 <__addsf3>
 80a95b2:	4651      	mov	r1, sl
 80a95b4:	f002 fd34 	bl	80ac020 <__aeabi_fmul>
 80a95b8:	4958      	ldr	r1, [pc, #352]	; (80a971c <__ieee754_logf+0x26c>)
 80a95ba:	4682      	mov	sl, r0
 80a95bc:	4638      	mov	r0, r7
 80a95be:	f002 fd2f 	bl	80ac020 <__aeabi_fmul>
 80a95c2:	4957      	ldr	r1, [pc, #348]	; (80a9720 <__ieee754_logf+0x270>)
 80a95c4:	f002 fc24 	bl	80abe10 <__addsf3>
 80a95c8:	4639      	mov	r1, r7
 80a95ca:	f002 fd29 	bl	80ac020 <__aeabi_fmul>
 80a95ce:	4955      	ldr	r1, [pc, #340]	; (80a9724 <__ieee754_logf+0x274>)
 80a95d0:	f002 fc1e 	bl	80abe10 <__addsf3>
 80a95d4:	4639      	mov	r1, r7
 80a95d6:	f002 fd23 	bl	80ac020 <__aeabi_fmul>
 80a95da:	4601      	mov	r1, r0
 80a95dc:	4650      	mov	r0, sl
 80a95de:	f002 fc17 	bl	80abe10 <__addsf3>
 80a95e2:	4a51      	ldr	r2, [pc, #324]	; (80a9728 <__ieee754_logf+0x278>)
 80a95e4:	f5c6 1357 	rsb	r3, r6, #3522560	; 0x35c000
 80a95e8:	4432      	add	r2, r6
 80a95ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80a95ee:	4313      	orrs	r3, r2
 80a95f0:	2b00      	cmp	r3, #0
 80a95f2:	4606      	mov	r6, r0
 80a95f4:	dd4f      	ble.n	80a9696 <__ieee754_logf+0x1e6>
 80a95f6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a95fa:	4628      	mov	r0, r5
 80a95fc:	f002 fd10 	bl	80ac020 <__aeabi_fmul>
 80a9600:	4629      	mov	r1, r5
 80a9602:	f002 fd0d 	bl	80ac020 <__aeabi_fmul>
 80a9606:	4607      	mov	r7, r0
 80a9608:	2c00      	cmp	r4, #0
 80a960a:	d051      	beq.n	80a96b0 <__ieee754_logf+0x200>
 80a960c:	493d      	ldr	r1, [pc, #244]	; (80a9704 <__ieee754_logf+0x254>)
 80a960e:	4648      	mov	r0, r9
 80a9610:	f002 fd06 	bl	80ac020 <__aeabi_fmul>
 80a9614:	4639      	mov	r1, r7
 80a9616:	4604      	mov	r4, r0
 80a9618:	4630      	mov	r0, r6
 80a961a:	f002 fbf9 	bl	80abe10 <__addsf3>
 80a961e:	4641      	mov	r1, r8
 80a9620:	f002 fcfe 	bl	80ac020 <__aeabi_fmul>
 80a9624:	4938      	ldr	r1, [pc, #224]	; (80a9708 <__ieee754_logf+0x258>)
 80a9626:	4606      	mov	r6, r0
 80a9628:	4648      	mov	r0, r9
 80a962a:	f002 fcf9 	bl	80ac020 <__aeabi_fmul>
 80a962e:	4601      	mov	r1, r0
 80a9630:	4630      	mov	r0, r6
 80a9632:	f002 fbed 	bl	80abe10 <__addsf3>
 80a9636:	4601      	mov	r1, r0
 80a9638:	4638      	mov	r0, r7
 80a963a:	f002 fbe7 	bl	80abe0c <__aeabi_fsub>
 80a963e:	4629      	mov	r1, r5
 80a9640:	f002 fbe4 	bl	80abe0c <__aeabi_fsub>
 80a9644:	4601      	mov	r1, r0
 80a9646:	4620      	mov	r0, r4
 80a9648:	f002 fbe0 	bl	80abe0c <__aeabi_fsub>
 80a964c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a9650:	4936      	ldr	r1, [pc, #216]	; (80a972c <__ieee754_logf+0x27c>)
 80a9652:	4628      	mov	r0, r5
 80a9654:	f002 fce4 	bl	80ac020 <__aeabi_fmul>
 80a9658:	4601      	mov	r1, r0
 80a965a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80a965e:	f002 fbd5 	bl	80abe0c <__aeabi_fsub>
 80a9662:	4629      	mov	r1, r5
 80a9664:	4606      	mov	r6, r0
 80a9666:	4628      	mov	r0, r5
 80a9668:	f002 fcda 	bl	80ac020 <__aeabi_fmul>
 80a966c:	4601      	mov	r1, r0
 80a966e:	4630      	mov	r0, r6
 80a9670:	f002 fcd6 	bl	80ac020 <__aeabi_fmul>
 80a9674:	4606      	mov	r6, r0
 80a9676:	b35c      	cbz	r4, 80a96d0 <__ieee754_logf+0x220>
 80a9678:	4620      	mov	r0, r4
 80a967a:	f002 fc7d 	bl	80abf78 <__aeabi_i2f>
 80a967e:	4921      	ldr	r1, [pc, #132]	; (80a9704 <__ieee754_logf+0x254>)
 80a9680:	4607      	mov	r7, r0
 80a9682:	f002 fccd 	bl	80ac020 <__aeabi_fmul>
 80a9686:	4604      	mov	r4, r0
 80a9688:	4638      	mov	r0, r7
 80a968a:	491f      	ldr	r1, [pc, #124]	; (80a9708 <__ieee754_logf+0x258>)
 80a968c:	f002 fcc8 	bl	80ac020 <__aeabi_fmul>
 80a9690:	4601      	mov	r1, r0
 80a9692:	4630      	mov	r0, r6
 80a9694:	e7d1      	b.n	80a963a <__ieee754_logf+0x18a>
 80a9696:	bb04      	cbnz	r4, 80a96da <__ieee754_logf+0x22a>
 80a9698:	4601      	mov	r1, r0
 80a969a:	4628      	mov	r0, r5
 80a969c:	f002 fbb6 	bl	80abe0c <__aeabi_fsub>
 80a96a0:	4641      	mov	r1, r8
 80a96a2:	f002 fcbd 	bl	80ac020 <__aeabi_fmul>
 80a96a6:	4601      	mov	r1, r0
 80a96a8:	4628      	mov	r0, r5
 80a96aa:	f002 fbaf 	bl	80abe0c <__aeabi_fsub>
 80a96ae:	e735      	b.n	80a951c <__ieee754_logf+0x6c>
 80a96b0:	4639      	mov	r1, r7
 80a96b2:	4630      	mov	r0, r6
 80a96b4:	f002 fbac 	bl	80abe10 <__addsf3>
 80a96b8:	4641      	mov	r1, r8
 80a96ba:	f002 fcb1 	bl	80ac020 <__aeabi_fmul>
 80a96be:	4601      	mov	r1, r0
 80a96c0:	4638      	mov	r0, r7
 80a96c2:	f002 fba3 	bl	80abe0c <__aeabi_fsub>
 80a96c6:	4601      	mov	r1, r0
 80a96c8:	4628      	mov	r0, r5
 80a96ca:	f002 fb9f 	bl	80abe0c <__aeabi_fsub>
 80a96ce:	e725      	b.n	80a951c <__ieee754_logf+0x6c>
 80a96d0:	4601      	mov	r1, r0
 80a96d2:	4628      	mov	r0, r5
 80a96d4:	f002 fb9a 	bl	80abe0c <__aeabi_fsub>
 80a96d8:	e720      	b.n	80a951c <__ieee754_logf+0x6c>
 80a96da:	490a      	ldr	r1, [pc, #40]	; (80a9704 <__ieee754_logf+0x254>)
 80a96dc:	4648      	mov	r0, r9
 80a96de:	f002 fc9f 	bl	80ac020 <__aeabi_fmul>
 80a96e2:	4631      	mov	r1, r6
 80a96e4:	4604      	mov	r4, r0
 80a96e6:	4628      	mov	r0, r5
 80a96e8:	f002 fb90 	bl	80abe0c <__aeabi_fsub>
 80a96ec:	4641      	mov	r1, r8
 80a96ee:	f002 fc97 	bl	80ac020 <__aeabi_fmul>
 80a96f2:	4905      	ldr	r1, [pc, #20]	; (80a9708 <__ieee754_logf+0x258>)
 80a96f4:	4606      	mov	r6, r0
 80a96f6:	4648      	mov	r0, r9
 80a96f8:	e7c8      	b.n	80a968c <__ieee754_logf+0x1dc>
 80a96fa:	bf00      	nop
 80a96fc:	004afb20 	.word	0x004afb20
 80a9700:	007ffff0 	.word	0x007ffff0
 80a9704:	3f317180 	.word	0x3f317180
 80a9708:	3717f7d1 	.word	0x3717f7d1
 80a970c:	3e178897 	.word	0x3e178897
 80a9710:	3e3a3325 	.word	0x3e3a3325
 80a9714:	3e924925 	.word	0x3e924925
 80a9718:	3f2aaaab 	.word	0x3f2aaaab
 80a971c:	3e1cd04f 	.word	0x3e1cd04f
 80a9720:	3e638e29 	.word	0x3e638e29
 80a9724:	3ecccccd 	.word	0x3ecccccd
 80a9728:	ffcf5c30 	.word	0xffcf5c30
 80a972c:	3eaaaaab 	.word	0x3eaaaaab

080a9730 <__ieee754_rem_pio2f>:
 80a9730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a9734:	4aab      	ldr	r2, [pc, #684]	; (80a99e4 <__ieee754_rem_pio2f+0x2b4>)
 80a9736:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80a973a:	4294      	cmp	r4, r2
 80a973c:	460d      	mov	r5, r1
 80a973e:	b089      	sub	sp, #36	; 0x24
 80a9740:	dd6c      	ble.n	80a981c <__ieee754_rem_pio2f+0xec>
 80a9742:	4aa9      	ldr	r2, [pc, #676]	; (80a99e8 <__ieee754_rem_pio2f+0x2b8>)
 80a9744:	4607      	mov	r7, r0
 80a9746:	4294      	cmp	r4, r2
 80a9748:	dc1c      	bgt.n	80a9784 <__ieee754_rem_pio2f+0x54>
 80a974a:	2800      	cmp	r0, #0
 80a974c:	49a7      	ldr	r1, [pc, #668]	; (80a99ec <__ieee754_rem_pio2f+0x2bc>)
 80a974e:	f340 811e 	ble.w	80a998e <__ieee754_rem_pio2f+0x25e>
 80a9752:	f002 fb5b 	bl	80abe0c <__aeabi_fsub>
 80a9756:	4ba6      	ldr	r3, [pc, #664]	; (80a99f0 <__ieee754_rem_pio2f+0x2c0>)
 80a9758:	f024 040f 	bic.w	r4, r4, #15
 80a975c:	429c      	cmp	r4, r3
 80a975e:	4606      	mov	r6, r0
 80a9760:	d06b      	beq.n	80a983a <__ieee754_rem_pio2f+0x10a>
 80a9762:	49a4      	ldr	r1, [pc, #656]	; (80a99f4 <__ieee754_rem_pio2f+0x2c4>)
 80a9764:	f002 fb52 	bl	80abe0c <__aeabi_fsub>
 80a9768:	4601      	mov	r1, r0
 80a976a:	4630      	mov	r0, r6
 80a976c:	6029      	str	r1, [r5, #0]
 80a976e:	f002 fb4d 	bl	80abe0c <__aeabi_fsub>
 80a9772:	49a0      	ldr	r1, [pc, #640]	; (80a99f4 <__ieee754_rem_pio2f+0x2c4>)
 80a9774:	f002 fb4a 	bl	80abe0c <__aeabi_fsub>
 80a9778:	2601      	movs	r6, #1
 80a977a:	6068      	str	r0, [r5, #4]
 80a977c:	4630      	mov	r0, r6
 80a977e:	b009      	add	sp, #36	; 0x24
 80a9780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a9784:	4a9c      	ldr	r2, [pc, #624]	; (80a99f8 <__ieee754_rem_pio2f+0x2c8>)
 80a9786:	4294      	cmp	r4, r2
 80a9788:	dd6c      	ble.n	80a9864 <__ieee754_rem_pio2f+0x134>
 80a978a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80a978e:	da4d      	bge.n	80a982c <__ieee754_rem_pio2f+0xfc>
 80a9790:	15e6      	asrs	r6, r4, #23
 80a9792:	3e86      	subs	r6, #134	; 0x86
 80a9794:	eba4 54c6 	sub.w	r4, r4, r6, lsl #23
 80a9798:	4620      	mov	r0, r4
 80a979a:	f002 fe1d 	bl	80ac3d8 <__aeabi_f2iz>
 80a979e:	f002 fbeb 	bl	80abf78 <__aeabi_i2f>
 80a97a2:	4601      	mov	r1, r0
 80a97a4:	4620      	mov	r0, r4
 80a97a6:	9105      	str	r1, [sp, #20]
 80a97a8:	f002 fb30 	bl	80abe0c <__aeabi_fsub>
 80a97ac:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a97b0:	f002 fc36 	bl	80ac020 <__aeabi_fmul>
 80a97b4:	4680      	mov	r8, r0
 80a97b6:	f002 fe0f 	bl	80ac3d8 <__aeabi_f2iz>
 80a97ba:	f002 fbdd 	bl	80abf78 <__aeabi_i2f>
 80a97be:	4604      	mov	r4, r0
 80a97c0:	4640      	mov	r0, r8
 80a97c2:	4621      	mov	r1, r4
 80a97c4:	9406      	str	r4, [sp, #24]
 80a97c6:	f002 fb21 	bl	80abe0c <__aeabi_fsub>
 80a97ca:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a97ce:	f002 fc27 	bl	80ac020 <__aeabi_fmul>
 80a97d2:	2100      	movs	r1, #0
 80a97d4:	9007      	str	r0, [sp, #28]
 80a97d6:	f002 fdb7 	bl	80ac348 <__aeabi_fcmpeq>
 80a97da:	2800      	cmp	r0, #0
 80a97dc:	f000 80b8 	beq.w	80a9950 <__ieee754_rem_pio2f+0x220>
 80a97e0:	4620      	mov	r0, r4
 80a97e2:	2100      	movs	r1, #0
 80a97e4:	f002 fdb0 	bl	80ac348 <__aeabi_fcmpeq>
 80a97e8:	2800      	cmp	r0, #0
 80a97ea:	bf14      	ite	ne
 80a97ec:	2301      	movne	r3, #1
 80a97ee:	2302      	moveq	r3, #2
 80a97f0:	2002      	movs	r0, #2
 80a97f2:	4982      	ldr	r1, [pc, #520]	; (80a99fc <__ieee754_rem_pio2f+0x2cc>)
 80a97f4:	4632      	mov	r2, r6
 80a97f6:	e9cd 0100 	strd	r0, r1, [sp]
 80a97fa:	4629      	mov	r1, r5
 80a97fc:	a805      	add	r0, sp, #20
 80a97fe:	f000 ffdf 	bl	80aa7c0 <__kernel_rem_pio2f>
 80a9802:	2f00      	cmp	r7, #0
 80a9804:	4606      	mov	r6, r0
 80a9806:	dab9      	bge.n	80a977c <__ieee754_rem_pio2f+0x4c>
 80a9808:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a980c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a9810:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a9814:	4246      	negs	r6, r0
 80a9816:	602a      	str	r2, [r5, #0]
 80a9818:	606b      	str	r3, [r5, #4]
 80a981a:	e7af      	b.n	80a977c <__ieee754_rem_pio2f+0x4c>
 80a981c:	2600      	movs	r6, #0
 80a981e:	6028      	str	r0, [r5, #0]
 80a9820:	2200      	movs	r2, #0
 80a9822:	4630      	mov	r0, r6
 80a9824:	604a      	str	r2, [r1, #4]
 80a9826:	b009      	add	sp, #36	; 0x24
 80a9828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a982c:	4601      	mov	r1, r0
 80a982e:	f002 faed 	bl	80abe0c <__aeabi_fsub>
 80a9832:	2600      	movs	r6, #0
 80a9834:	6068      	str	r0, [r5, #4]
 80a9836:	6028      	str	r0, [r5, #0]
 80a9838:	e7a0      	b.n	80a977c <__ieee754_rem_pio2f+0x4c>
 80a983a:	4971      	ldr	r1, [pc, #452]	; (80a9a00 <__ieee754_rem_pio2f+0x2d0>)
 80a983c:	f002 fae6 	bl	80abe0c <__aeabi_fsub>
 80a9840:	4970      	ldr	r1, [pc, #448]	; (80a9a04 <__ieee754_rem_pio2f+0x2d4>)
 80a9842:	4604      	mov	r4, r0
 80a9844:	f002 fae2 	bl	80abe0c <__aeabi_fsub>
 80a9848:	4601      	mov	r1, r0
 80a984a:	4620      	mov	r0, r4
 80a984c:	6029      	str	r1, [r5, #0]
 80a984e:	f002 fadd 	bl	80abe0c <__aeabi_fsub>
 80a9852:	496c      	ldr	r1, [pc, #432]	; (80a9a04 <__ieee754_rem_pio2f+0x2d4>)
 80a9854:	f002 fada 	bl	80abe0c <__aeabi_fsub>
 80a9858:	2601      	movs	r6, #1
 80a985a:	6068      	str	r0, [r5, #4]
 80a985c:	4630      	mov	r0, r6
 80a985e:	b009      	add	sp, #36	; 0x24
 80a9860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a9864:	f001 fd2e 	bl	80ab2c4 <fabsf>
 80a9868:	4967      	ldr	r1, [pc, #412]	; (80a9a08 <__ieee754_rem_pio2f+0x2d8>)
 80a986a:	4680      	mov	r8, r0
 80a986c:	f002 fbd8 	bl	80ac020 <__aeabi_fmul>
 80a9870:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a9874:	f002 facc 	bl	80abe10 <__addsf3>
 80a9878:	f002 fdae 	bl	80ac3d8 <__aeabi_f2iz>
 80a987c:	4606      	mov	r6, r0
 80a987e:	f002 fb7b 	bl	80abf78 <__aeabi_i2f>
 80a9882:	495a      	ldr	r1, [pc, #360]	; (80a99ec <__ieee754_rem_pio2f+0x2bc>)
 80a9884:	4683      	mov	fp, r0
 80a9886:	f002 fbcb 	bl	80ac020 <__aeabi_fmul>
 80a988a:	4601      	mov	r1, r0
 80a988c:	4640      	mov	r0, r8
 80a988e:	f002 fabd 	bl	80abe0c <__aeabi_fsub>
 80a9892:	4958      	ldr	r1, [pc, #352]	; (80a99f4 <__ieee754_rem_pio2f+0x2c4>)
 80a9894:	4682      	mov	sl, r0
 80a9896:	4658      	mov	r0, fp
 80a9898:	f002 fbc2 	bl	80ac020 <__aeabi_fmul>
 80a989c:	2e1f      	cmp	r6, #31
 80a989e:	4681      	mov	r9, r0
 80a98a0:	4601      	mov	r1, r0
 80a98a2:	4650      	mov	r0, sl
 80a98a4:	dc20      	bgt.n	80a98e8 <__ieee754_rem_pio2f+0x1b8>
 80a98a6:	4b59      	ldr	r3, [pc, #356]	; (80a9a0c <__ieee754_rem_pio2f+0x2dc>)
 80a98a8:	1e72      	subs	r2, r6, #1
 80a98aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a98ae:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80a98b2:	429a      	cmp	r2, r3
 80a98b4:	d018      	beq.n	80a98e8 <__ieee754_rem_pio2f+0x1b8>
 80a98b6:	f002 faa9 	bl	80abe0c <__aeabi_fsub>
 80a98ba:	4680      	mov	r8, r0
 80a98bc:	f8c5 8000 	str.w	r8, [r5]
 80a98c0:	4641      	mov	r1, r8
 80a98c2:	4650      	mov	r0, sl
 80a98c4:	f002 faa2 	bl	80abe0c <__aeabi_fsub>
 80a98c8:	4649      	mov	r1, r9
 80a98ca:	f002 fa9f 	bl	80abe0c <__aeabi_fsub>
 80a98ce:	2f00      	cmp	r7, #0
 80a98d0:	6068      	str	r0, [r5, #4]
 80a98d2:	f6bf af53 	bge.w	80a977c <__ieee754_rem_pio2f+0x4c>
 80a98d6:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
 80a98da:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a98de:	f8c5 8000 	str.w	r8, [r5]
 80a98e2:	6068      	str	r0, [r5, #4]
 80a98e4:	4276      	negs	r6, r6
 80a98e6:	e749      	b.n	80a977c <__ieee754_rem_pio2f+0x4c>
 80a98e8:	f002 fa90 	bl	80abe0c <__aeabi_fsub>
 80a98ec:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80a98f0:	ebc3 53d4 	rsb	r3, r3, r4, lsr #23
 80a98f4:	2b08      	cmp	r3, #8
 80a98f6:	4680      	mov	r8, r0
 80a98f8:	ea4f 52e4 	mov.w	r2, r4, asr #23
 80a98fc:	ddde      	ble.n	80a98bc <__ieee754_rem_pio2f+0x18c>
 80a98fe:	4940      	ldr	r1, [pc, #256]	; (80a9a00 <__ieee754_rem_pio2f+0x2d0>)
 80a9900:	4658      	mov	r0, fp
 80a9902:	9203      	str	r2, [sp, #12]
 80a9904:	f002 fb8c 	bl	80ac020 <__aeabi_fmul>
 80a9908:	4680      	mov	r8, r0
 80a990a:	4650      	mov	r0, sl
 80a990c:	4641      	mov	r1, r8
 80a990e:	f002 fa7d 	bl	80abe0c <__aeabi_fsub>
 80a9912:	4604      	mov	r4, r0
 80a9914:	4650      	mov	r0, sl
 80a9916:	4621      	mov	r1, r4
 80a9918:	f002 fa78 	bl	80abe0c <__aeabi_fsub>
 80a991c:	4641      	mov	r1, r8
 80a991e:	f002 fa75 	bl	80abe0c <__aeabi_fsub>
 80a9922:	4680      	mov	r8, r0
 80a9924:	4937      	ldr	r1, [pc, #220]	; (80a9a04 <__ieee754_rem_pio2f+0x2d4>)
 80a9926:	4658      	mov	r0, fp
 80a9928:	f002 fb7a 	bl	80ac020 <__aeabi_fmul>
 80a992c:	4641      	mov	r1, r8
 80a992e:	f002 fa6d 	bl	80abe0c <__aeabi_fsub>
 80a9932:	4681      	mov	r9, r0
 80a9934:	4620      	mov	r0, r4
 80a9936:	4649      	mov	r1, r9
 80a9938:	f002 fa68 	bl	80abe0c <__aeabi_fsub>
 80a993c:	9a03      	ldr	r2, [sp, #12]
 80a993e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80a9942:	1ad2      	subs	r2, r2, r3
 80a9944:	2a19      	cmp	r2, #25
 80a9946:	4680      	mov	r8, r0
 80a9948:	dc04      	bgt.n	80a9954 <__ieee754_rem_pio2f+0x224>
 80a994a:	46a2      	mov	sl, r4
 80a994c:	6028      	str	r0, [r5, #0]
 80a994e:	e7b7      	b.n	80a98c0 <__ieee754_rem_pio2f+0x190>
 80a9950:	2303      	movs	r3, #3
 80a9952:	e74d      	b.n	80a97f0 <__ieee754_rem_pio2f+0xc0>
 80a9954:	492e      	ldr	r1, [pc, #184]	; (80a9a10 <__ieee754_rem_pio2f+0x2e0>)
 80a9956:	4658      	mov	r0, fp
 80a9958:	f002 fb62 	bl	80ac020 <__aeabi_fmul>
 80a995c:	4680      	mov	r8, r0
 80a995e:	4620      	mov	r0, r4
 80a9960:	4641      	mov	r1, r8
 80a9962:	f002 fa53 	bl	80abe0c <__aeabi_fsub>
 80a9966:	4682      	mov	sl, r0
 80a9968:	4620      	mov	r0, r4
 80a996a:	4651      	mov	r1, sl
 80a996c:	f002 fa4e 	bl	80abe0c <__aeabi_fsub>
 80a9970:	4641      	mov	r1, r8
 80a9972:	f002 fa4b 	bl	80abe0c <__aeabi_fsub>
 80a9976:	4604      	mov	r4, r0
 80a9978:	4926      	ldr	r1, [pc, #152]	; (80a9a14 <__ieee754_rem_pio2f+0x2e4>)
 80a997a:	4658      	mov	r0, fp
 80a997c:	f002 fb50 	bl	80ac020 <__aeabi_fmul>
 80a9980:	4621      	mov	r1, r4
 80a9982:	f002 fa43 	bl	80abe0c <__aeabi_fsub>
 80a9986:	4681      	mov	r9, r0
 80a9988:	4650      	mov	r0, sl
 80a998a:	4649      	mov	r1, r9
 80a998c:	e793      	b.n	80a98b6 <__ieee754_rem_pio2f+0x186>
 80a998e:	f002 fa3f 	bl	80abe10 <__addsf3>
 80a9992:	4b17      	ldr	r3, [pc, #92]	; (80a99f0 <__ieee754_rem_pio2f+0x2c0>)
 80a9994:	f024 040f 	bic.w	r4, r4, #15
 80a9998:	429c      	cmp	r4, r3
 80a999a:	4606      	mov	r6, r0
 80a999c:	d00e      	beq.n	80a99bc <__ieee754_rem_pio2f+0x28c>
 80a999e:	4915      	ldr	r1, [pc, #84]	; (80a99f4 <__ieee754_rem_pio2f+0x2c4>)
 80a99a0:	f002 fa36 	bl	80abe10 <__addsf3>
 80a99a4:	4601      	mov	r1, r0
 80a99a6:	4630      	mov	r0, r6
 80a99a8:	6029      	str	r1, [r5, #0]
 80a99aa:	f002 fa2f 	bl	80abe0c <__aeabi_fsub>
 80a99ae:	4911      	ldr	r1, [pc, #68]	; (80a99f4 <__ieee754_rem_pio2f+0x2c4>)
 80a99b0:	f002 fa2e 	bl	80abe10 <__addsf3>
 80a99b4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a99b8:	6068      	str	r0, [r5, #4]
 80a99ba:	e6df      	b.n	80a977c <__ieee754_rem_pio2f+0x4c>
 80a99bc:	4910      	ldr	r1, [pc, #64]	; (80a9a00 <__ieee754_rem_pio2f+0x2d0>)
 80a99be:	f002 fa27 	bl	80abe10 <__addsf3>
 80a99c2:	4910      	ldr	r1, [pc, #64]	; (80a9a04 <__ieee754_rem_pio2f+0x2d4>)
 80a99c4:	4604      	mov	r4, r0
 80a99c6:	f002 fa23 	bl	80abe10 <__addsf3>
 80a99ca:	4601      	mov	r1, r0
 80a99cc:	4620      	mov	r0, r4
 80a99ce:	6029      	str	r1, [r5, #0]
 80a99d0:	f002 fa1c 	bl	80abe0c <__aeabi_fsub>
 80a99d4:	490b      	ldr	r1, [pc, #44]	; (80a9a04 <__ieee754_rem_pio2f+0x2d4>)
 80a99d6:	f002 fa1b 	bl	80abe10 <__addsf3>
 80a99da:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a99de:	6068      	str	r0, [r5, #4]
 80a99e0:	e6cc      	b.n	80a977c <__ieee754_rem_pio2f+0x4c>
 80a99e2:	bf00      	nop
 80a99e4:	3f490fd8 	.word	0x3f490fd8
 80a99e8:	4016cbe3 	.word	0x4016cbe3
 80a99ec:	3fc90f80 	.word	0x3fc90f80
 80a99f0:	3fc90fd0 	.word	0x3fc90fd0
 80a99f4:	37354443 	.word	0x37354443
 80a99f8:	43490f80 	.word	0x43490f80
 80a99fc:	080adb1c 	.word	0x080adb1c
 80a9a00:	37354400 	.word	0x37354400
 80a9a04:	2e85a308 	.word	0x2e85a308
 80a9a08:	3f22f984 	.word	0x3f22f984
 80a9a0c:	080ada9c 	.word	0x080ada9c
 80a9a10:	2e85a300 	.word	0x2e85a300
 80a9a14:	248d3132 	.word	0x248d3132

080a9a18 <__kernel_cos>:
 80a9a18:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 80a9a1c:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80a9a20:	b086      	sub	sp, #24
 80a9a22:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80a9a26:	4688      	mov	r8, r1
 80a9a28:	4606      	mov	r6, r0
 80a9a2a:	e9cd 2300 	strd	r2, r3, [sp]
 80a9a2e:	da6c      	bge.n	80a9b0a <__kernel_cos+0xf2>
 80a9a30:	f002 f950 	bl	80abcd4 <__aeabi_d2iz>
 80a9a34:	2800      	cmp	r0, #0
 80a9a36:	f000 80ed 	beq.w	80a9c14 <__kernel_cos+0x1fc>
 80a9a3a:	4632      	mov	r2, r6
 80a9a3c:	4643      	mov	r3, r8
 80a9a3e:	4630      	mov	r0, r6
 80a9a40:	4641      	mov	r1, r8
 80a9a42:	f001 fe97 	bl	80ab774 <__aeabi_dmul>
 80a9a46:	a376      	add	r3, pc, #472	; (adr r3, 80a9c20 <__kernel_cos+0x208>)
 80a9a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9a4c:	4604      	mov	r4, r0
 80a9a4e:	460d      	mov	r5, r1
 80a9a50:	f001 fe90 	bl	80ab774 <__aeabi_dmul>
 80a9a54:	a374      	add	r3, pc, #464	; (adr r3, 80a9c28 <__kernel_cos+0x210>)
 80a9a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9a5a:	f001 fcd5 	bl	80ab408 <__adddf3>
 80a9a5e:	4622      	mov	r2, r4
 80a9a60:	462b      	mov	r3, r5
 80a9a62:	f001 fe87 	bl	80ab774 <__aeabi_dmul>
 80a9a66:	a372      	add	r3, pc, #456	; (adr r3, 80a9c30 <__kernel_cos+0x218>)
 80a9a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9a6c:	f001 fcca 	bl	80ab404 <__aeabi_dsub>
 80a9a70:	4622      	mov	r2, r4
 80a9a72:	462b      	mov	r3, r5
 80a9a74:	f001 fe7e 	bl	80ab774 <__aeabi_dmul>
 80a9a78:	a36f      	add	r3, pc, #444	; (adr r3, 80a9c38 <__kernel_cos+0x220>)
 80a9a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9a7e:	f001 fcc3 	bl	80ab408 <__adddf3>
 80a9a82:	4622      	mov	r2, r4
 80a9a84:	462b      	mov	r3, r5
 80a9a86:	f001 fe75 	bl	80ab774 <__aeabi_dmul>
 80a9a8a:	a36d      	add	r3, pc, #436	; (adr r3, 80a9c40 <__kernel_cos+0x228>)
 80a9a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9a90:	f001 fcb8 	bl	80ab404 <__aeabi_dsub>
 80a9a94:	4622      	mov	r2, r4
 80a9a96:	462b      	mov	r3, r5
 80a9a98:	f001 fe6c 	bl	80ab774 <__aeabi_dmul>
 80a9a9c:	a36a      	add	r3, pc, #424	; (adr r3, 80a9c48 <__kernel_cos+0x230>)
 80a9a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9aa2:	f001 fcb1 	bl	80ab408 <__adddf3>
 80a9aa6:	4622      	mov	r2, r4
 80a9aa8:	462b      	mov	r3, r5
 80a9aaa:	f001 fe63 	bl	80ab774 <__aeabi_dmul>
 80a9aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a9ab2:	2200      	movs	r2, #0
 80a9ab4:	4620      	mov	r0, r4
 80a9ab6:	4629      	mov	r1, r5
 80a9ab8:	4b65      	ldr	r3, [pc, #404]	; (80a9c50 <__kernel_cos+0x238>)
 80a9aba:	f001 fe5b 	bl	80ab774 <__aeabi_dmul>
 80a9abe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a9ac2:	4682      	mov	sl, r0
 80a9ac4:	468b      	mov	fp, r1
 80a9ac6:	4620      	mov	r0, r4
 80a9ac8:	4629      	mov	r1, r5
 80a9aca:	f001 fe53 	bl	80ab774 <__aeabi_dmul>
 80a9ace:	4632      	mov	r2, r6
 80a9ad0:	460f      	mov	r7, r1
 80a9ad2:	4606      	mov	r6, r0
 80a9ad4:	4641      	mov	r1, r8
 80a9ad6:	4610      	mov	r0, r2
 80a9ad8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a9adc:	f001 fe4a 	bl	80ab774 <__aeabi_dmul>
 80a9ae0:	4602      	mov	r2, r0
 80a9ae2:	460b      	mov	r3, r1
 80a9ae4:	4630      	mov	r0, r6
 80a9ae6:	4639      	mov	r1, r7
 80a9ae8:	f001 fc8c 	bl	80ab404 <__aeabi_dsub>
 80a9aec:	4602      	mov	r2, r0
 80a9aee:	460b      	mov	r3, r1
 80a9af0:	4650      	mov	r0, sl
 80a9af2:	4659      	mov	r1, fp
 80a9af4:	f001 fc86 	bl	80ab404 <__aeabi_dsub>
 80a9af8:	4602      	mov	r2, r0
 80a9afa:	460b      	mov	r3, r1
 80a9afc:	2000      	movs	r0, #0
 80a9afe:	4955      	ldr	r1, [pc, #340]	; (80a9c54 <__kernel_cos+0x23c>)
 80a9b00:	f001 fc80 	bl	80ab404 <__aeabi_dsub>
 80a9b04:	b006      	add	sp, #24
 80a9b06:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80a9b0a:	4602      	mov	r2, r0
 80a9b0c:	460b      	mov	r3, r1
 80a9b0e:	f001 fe31 	bl	80ab774 <__aeabi_dmul>
 80a9b12:	a343      	add	r3, pc, #268	; (adr r3, 80a9c20 <__kernel_cos+0x208>)
 80a9b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9b18:	4604      	mov	r4, r0
 80a9b1a:	460d      	mov	r5, r1
 80a9b1c:	f001 fe2a 	bl	80ab774 <__aeabi_dmul>
 80a9b20:	a341      	add	r3, pc, #260	; (adr r3, 80a9c28 <__kernel_cos+0x210>)
 80a9b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9b26:	f001 fc6f 	bl	80ab408 <__adddf3>
 80a9b2a:	4622      	mov	r2, r4
 80a9b2c:	462b      	mov	r3, r5
 80a9b2e:	f001 fe21 	bl	80ab774 <__aeabi_dmul>
 80a9b32:	a33f      	add	r3, pc, #252	; (adr r3, 80a9c30 <__kernel_cos+0x218>)
 80a9b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9b38:	f001 fc64 	bl	80ab404 <__aeabi_dsub>
 80a9b3c:	4622      	mov	r2, r4
 80a9b3e:	462b      	mov	r3, r5
 80a9b40:	f001 fe18 	bl	80ab774 <__aeabi_dmul>
 80a9b44:	a33c      	add	r3, pc, #240	; (adr r3, 80a9c38 <__kernel_cos+0x220>)
 80a9b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9b4a:	f001 fc5d 	bl	80ab408 <__adddf3>
 80a9b4e:	4622      	mov	r2, r4
 80a9b50:	462b      	mov	r3, r5
 80a9b52:	f001 fe0f 	bl	80ab774 <__aeabi_dmul>
 80a9b56:	a33a      	add	r3, pc, #232	; (adr r3, 80a9c40 <__kernel_cos+0x228>)
 80a9b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9b5c:	f001 fc52 	bl	80ab404 <__aeabi_dsub>
 80a9b60:	4622      	mov	r2, r4
 80a9b62:	462b      	mov	r3, r5
 80a9b64:	f001 fe06 	bl	80ab774 <__aeabi_dmul>
 80a9b68:	a337      	add	r3, pc, #220	; (adr r3, 80a9c48 <__kernel_cos+0x230>)
 80a9b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9b6e:	f001 fc4b 	bl	80ab408 <__adddf3>
 80a9b72:	462b      	mov	r3, r5
 80a9b74:	4622      	mov	r2, r4
 80a9b76:	f001 fdfd 	bl	80ab774 <__aeabi_dmul>
 80a9b7a:	4b37      	ldr	r3, [pc, #220]	; (80a9c58 <__kernel_cos+0x240>)
 80a9b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a9b80:	429f      	cmp	r7, r3
 80a9b82:	dd96      	ble.n	80a9ab2 <__kernel_cos+0x9a>
 80a9b84:	4b35      	ldr	r3, [pc, #212]	; (80a9c5c <__kernel_cos+0x244>)
 80a9b86:	429f      	cmp	r7, r3
 80a9b88:	dc3b      	bgt.n	80a9c02 <__kernel_cos+0x1ea>
 80a9b8a:	f04f 0a00 	mov.w	sl, #0
 80a9b8e:	f5a7 1b00 	sub.w	fp, r7, #2097152	; 0x200000
 80a9b92:	2000      	movs	r0, #0
 80a9b94:	4652      	mov	r2, sl
 80a9b96:	465b      	mov	r3, fp
 80a9b98:	492e      	ldr	r1, [pc, #184]	; (80a9c54 <__kernel_cos+0x23c>)
 80a9b9a:	f001 fc33 	bl	80ab404 <__aeabi_dsub>
 80a9b9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a9ba2:	2200      	movs	r2, #0
 80a9ba4:	4620      	mov	r0, r4
 80a9ba6:	4629      	mov	r1, r5
 80a9ba8:	4b29      	ldr	r3, [pc, #164]	; (80a9c50 <__kernel_cos+0x238>)
 80a9baa:	f001 fde3 	bl	80ab774 <__aeabi_dmul>
 80a9bae:	4652      	mov	r2, sl
 80a9bb0:	465b      	mov	r3, fp
 80a9bb2:	f001 fc27 	bl	80ab404 <__aeabi_dsub>
 80a9bb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a9bba:	4682      	mov	sl, r0
 80a9bbc:	468b      	mov	fp, r1
 80a9bbe:	4620      	mov	r0, r4
 80a9bc0:	4629      	mov	r1, r5
 80a9bc2:	f001 fdd7 	bl	80ab774 <__aeabi_dmul>
 80a9bc6:	4632      	mov	r2, r6
 80a9bc8:	460f      	mov	r7, r1
 80a9bca:	4606      	mov	r6, r0
 80a9bcc:	4641      	mov	r1, r8
 80a9bce:	4610      	mov	r0, r2
 80a9bd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a9bd4:	f001 fdce 	bl	80ab774 <__aeabi_dmul>
 80a9bd8:	4602      	mov	r2, r0
 80a9bda:	460b      	mov	r3, r1
 80a9bdc:	4630      	mov	r0, r6
 80a9bde:	4639      	mov	r1, r7
 80a9be0:	f001 fc10 	bl	80ab404 <__aeabi_dsub>
 80a9be4:	4602      	mov	r2, r0
 80a9be6:	460b      	mov	r3, r1
 80a9be8:	4650      	mov	r0, sl
 80a9bea:	4659      	mov	r1, fp
 80a9bec:	f001 fc0a 	bl	80ab404 <__aeabi_dsub>
 80a9bf0:	4602      	mov	r2, r0
 80a9bf2:	460b      	mov	r3, r1
 80a9bf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a9bf8:	f001 fc04 	bl	80ab404 <__aeabi_dsub>
 80a9bfc:	b006      	add	sp, #24
 80a9bfe:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80a9c02:	2200      	movs	r2, #0
 80a9c04:	4b16      	ldr	r3, [pc, #88]	; (80a9c60 <__kernel_cos+0x248>)
 80a9c06:	f04f 0a00 	mov.w	sl, #0
 80a9c0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a9c0e:	f8df b054 	ldr.w	fp, [pc, #84]	; 80a9c64 <__kernel_cos+0x24c>
 80a9c12:	e7c6      	b.n	80a9ba2 <__kernel_cos+0x18a>
 80a9c14:	2000      	movs	r0, #0
 80a9c16:	490f      	ldr	r1, [pc, #60]	; (80a9c54 <__kernel_cos+0x23c>)
 80a9c18:	b006      	add	sp, #24
 80a9c1a:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80a9c1e:	bf00      	nop
 80a9c20:	be8838d4 	.word	0xbe8838d4
 80a9c24:	bda8fae9 	.word	0xbda8fae9
 80a9c28:	bdb4b1c4 	.word	0xbdb4b1c4
 80a9c2c:	3e21ee9e 	.word	0x3e21ee9e
 80a9c30:	809c52ad 	.word	0x809c52ad
 80a9c34:	3e927e4f 	.word	0x3e927e4f
 80a9c38:	19cb1590 	.word	0x19cb1590
 80a9c3c:	3efa01a0 	.word	0x3efa01a0
 80a9c40:	16c15177 	.word	0x16c15177
 80a9c44:	3f56c16c 	.word	0x3f56c16c
 80a9c48:	5555554c 	.word	0x5555554c
 80a9c4c:	3fa55555 	.word	0x3fa55555
 80a9c50:	3fe00000 	.word	0x3fe00000
 80a9c54:	3ff00000 	.word	0x3ff00000
 80a9c58:	3fd33332 	.word	0x3fd33332
 80a9c5c:	3fe90000 	.word	0x3fe90000
 80a9c60:	3fe70000 	.word	0x3fe70000
 80a9c64:	3fd20000 	.word	0x3fd20000

080a9c68 <__kernel_rem_pio2>:
 80a9c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a9c6c:	461c      	mov	r4, r3
 80a9c6e:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80a9c72:	910b      	str	r1, [sp, #44]	; 0x2c
 80a9c74:	1e61      	subs	r1, r4, #1
 80a9c76:	9308      	str	r3, [sp, #32]
 80a9c78:	9103      	str	r1, [sp, #12]
 80a9c7a:	4bb8      	ldr	r3, [pc, #736]	; (80a9f5c <__kernel_rem_pio2+0x2f4>)
 80a9c7c:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80a9c7e:	f112 0f14 	cmn.w	r2, #20
 80a9c82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80a9c86:	4607      	mov	r7, r0
 80a9c88:	9305      	str	r3, [sp, #20]
 80a9c8a:	f2c0 8341 	blt.w	80aa310 <__kernel_rem_pio2+0x6a8>
 80a9c8e:	49b4      	ldr	r1, [pc, #720]	; (80a9f60 <__kernel_rem_pio2+0x2f8>)
 80a9c90:	1ed3      	subs	r3, r2, #3
 80a9c92:	fb81 0103 	smull	r0, r1, r1, r3
 80a9c96:	17db      	asrs	r3, r3, #31
 80a9c98:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 80a9c9c:	9307      	str	r3, [sp, #28]
 80a9c9e:	3301      	adds	r3, #1
 80a9ca0:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80a9ca4:	00db      	lsls	r3, r3, #3
 80a9ca6:	18d3      	adds	r3, r2, r3
 80a9ca8:	9306      	str	r3, [sp, #24]
 80a9caa:	9a07      	ldr	r2, [sp, #28]
 80a9cac:	9b03      	ldr	r3, [sp, #12]
 80a9cae:	1ad6      	subs	r6, r2, r3
 80a9cb0:	9a05      	ldr	r2, [sp, #20]
 80a9cb2:	eb12 0903 	adds.w	r9, r2, r3
 80a9cb6:	d41b      	bmi.n	80a9cf0 <__kernel_rem_pio2+0x88>
 80a9cb8:	f109 0901 	add.w	r9, r9, #1
 80a9cbc:	2400      	movs	r4, #0
 80a9cbe:	2500      	movs	r5, #0
 80a9cc0:	f8dd a28c 	ldr.w	sl, [sp, #652]	; 0x28c
 80a9cc4:	44b1      	add	r9, r6
 80a9cc6:	f10d 0880 	add.w	r8, sp, #128	; 0x80
 80a9cca:	e008      	b.n	80a9cde <__kernel_rem_pio2+0x76>
 80a9ccc:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 80a9cd0:	f001 fce6 	bl	80ab6a0 <__aeabi_i2d>
 80a9cd4:	3601      	adds	r6, #1
 80a9cd6:	454e      	cmp	r6, r9
 80a9cd8:	e8e8 0102 	strd	r0, r1, [r8], #8
 80a9cdc:	d008      	beq.n	80a9cf0 <__kernel_rem_pio2+0x88>
 80a9cde:	2e00      	cmp	r6, #0
 80a9ce0:	daf4      	bge.n	80a9ccc <__kernel_rem_pio2+0x64>
 80a9ce2:	4620      	mov	r0, r4
 80a9ce4:	4629      	mov	r1, r5
 80a9ce6:	3601      	adds	r6, #1
 80a9ce8:	454e      	cmp	r6, r9
 80a9cea:	e8e8 0102 	strd	r0, r1, [r8], #8
 80a9cee:	d1f6      	bne.n	80a9cde <__kernel_rem_pio2+0x76>
 80a9cf0:	9b05      	ldr	r3, [sp, #20]
 80a9cf2:	2b00      	cmp	r3, #0
 80a9cf4:	f1a7 0308 	sub.w	r3, r7, #8
 80a9cf8:	9304      	str	r3, [sp, #16]
 80a9cfa:	f2c0 83b8 	blt.w	80aa46e <__kernel_rem_pio2+0x806>
 80a9cfe:	4619      	mov	r1, r3
 80a9d00:	9b08      	ldr	r3, [sp, #32]
 80a9d02:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80a9d06:	00da      	lsls	r2, r3, #3
 80a9d08:	9202      	str	r2, [sp, #8]
 80a9d0a:	9a05      	ldr	r2, [sp, #20]
 80a9d0c:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 80a9d10:	a920      	add	r1, sp, #128	; 0x80
 80a9d12:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 80a9d16:	18d3      	adds	r3, r2, r3
 80a9d18:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80a9d1c:	9301      	str	r3, [sp, #4]
 80a9d1e:	9b03      	ldr	r3, [sp, #12]
 80a9d20:	2b00      	cmp	r3, #0
 80a9d22:	f2c0 81b0 	blt.w	80aa086 <__kernel_rem_pio2+0x41e>
 80a9d26:	4657      	mov	r7, sl
 80a9d28:	2400      	movs	r4, #0
 80a9d2a:	2500      	movs	r5, #0
 80a9d2c:	9e04      	ldr	r6, [sp, #16]
 80a9d2e:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 80a9d32:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 80a9d36:	f001 fd1d 	bl	80ab774 <__aeabi_dmul>
 80a9d3a:	4602      	mov	r2, r0
 80a9d3c:	460b      	mov	r3, r1
 80a9d3e:	4620      	mov	r0, r4
 80a9d40:	4629      	mov	r1, r5
 80a9d42:	f001 fb61 	bl	80ab408 <__adddf3>
 80a9d46:	4546      	cmp	r6, r8
 80a9d48:	4604      	mov	r4, r0
 80a9d4a:	460d      	mov	r5, r1
 80a9d4c:	d1ef      	bne.n	80a9d2e <__kernel_rem_pio2+0xc6>
 80a9d4e:	9b01      	ldr	r3, [sp, #4]
 80a9d50:	f109 0901 	add.w	r9, r9, #1
 80a9d54:	4599      	cmp	r9, r3
 80a9d56:	e8eb 4502 	strd	r4, r5, [fp], #8
 80a9d5a:	f10a 0a08 	add.w	sl, sl, #8
 80a9d5e:	d1de      	bne.n	80a9d1e <__kernel_rem_pio2+0xb6>
 80a9d60:	9a05      	ldr	r2, [sp, #20]
 80a9d62:	a90c      	add	r1, sp, #48	; 0x30
 80a9d64:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80a9d68:	9804      	ldr	r0, [sp, #16]
 80a9d6a:	9902      	ldr	r1, [sp, #8]
 80a9d6c:	3b08      	subs	r3, #8
 80a9d6e:	4401      	add	r1, r0
 80a9d70:	468b      	mov	fp, r1
 80a9d72:	9309      	str	r3, [sp, #36]	; 0x24
 80a9d74:	ab0b      	add	r3, sp, #44	; 0x2c
 80a9d76:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a9d7a:	9201      	str	r2, [sp, #4]
 80a9d7c:	930a      	str	r3, [sp, #40]	; 0x28
 80a9d7e:	9a01      	ldr	r2, [sp, #4]
 80a9d80:	a998      	add	r1, sp, #608	; 0x260
 80a9d82:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 80a9d86:	2a00      	cmp	r2, #0
 80a9d88:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80a9d8c:	dd2a      	ble.n	80a9de4 <__kernel_rem_pio2+0x17c>
 80a9d8e:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80a9d92:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80a9d96:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 80a9d9a:	2200      	movs	r2, #0
 80a9d9c:	4b71      	ldr	r3, [pc, #452]	; (80a9f64 <__kernel_rem_pio2+0x2fc>)
 80a9d9e:	4620      	mov	r0, r4
 80a9da0:	4629      	mov	r1, r5
 80a9da2:	f001 fce7 	bl	80ab774 <__aeabi_dmul>
 80a9da6:	f001 ff95 	bl	80abcd4 <__aeabi_d2iz>
 80a9daa:	f001 fc79 	bl	80ab6a0 <__aeabi_i2d>
 80a9dae:	2200      	movs	r2, #0
 80a9db0:	4b6d      	ldr	r3, [pc, #436]	; (80a9f68 <__kernel_rem_pio2+0x300>)
 80a9db2:	4606      	mov	r6, r0
 80a9db4:	460f      	mov	r7, r1
 80a9db6:	f001 fcdd 	bl	80ab774 <__aeabi_dmul>
 80a9dba:	4602      	mov	r2, r0
 80a9dbc:	460b      	mov	r3, r1
 80a9dbe:	4620      	mov	r0, r4
 80a9dc0:	4629      	mov	r1, r5
 80a9dc2:	f001 fb1f 	bl	80ab404 <__aeabi_dsub>
 80a9dc6:	f001 ff85 	bl	80abcd4 <__aeabi_d2iz>
 80a9dca:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80a9dce:	4604      	mov	r4, r0
 80a9dd0:	4639      	mov	r1, r7
 80a9dd2:	f849 4b04 	str.w	r4, [r9], #4
 80a9dd6:	4630      	mov	r0, r6
 80a9dd8:	f001 fb16 	bl	80ab408 <__adddf3>
 80a9ddc:	45d0      	cmp	r8, sl
 80a9dde:	4604      	mov	r4, r0
 80a9de0:	460d      	mov	r5, r1
 80a9de2:	d1da      	bne.n	80a9d9a <__kernel_rem_pio2+0x132>
 80a9de4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80a9de8:	4620      	mov	r0, r4
 80a9dea:	4629      	mov	r1, r5
 80a9dec:	464a      	mov	r2, r9
 80a9dee:	f001 f9ef 	bl	80ab1d0 <scalbn>
 80a9df2:	2200      	movs	r2, #0
 80a9df4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80a9df8:	4604      	mov	r4, r0
 80a9dfa:	460d      	mov	r5, r1
 80a9dfc:	f001 fcba 	bl	80ab774 <__aeabi_dmul>
 80a9e00:	f001 f8d2 	bl	80aafa8 <floor>
 80a9e04:	2200      	movs	r2, #0
 80a9e06:	4b59      	ldr	r3, [pc, #356]	; (80a9f6c <__kernel_rem_pio2+0x304>)
 80a9e08:	f001 fcb4 	bl	80ab774 <__aeabi_dmul>
 80a9e0c:	4602      	mov	r2, r0
 80a9e0e:	460b      	mov	r3, r1
 80a9e10:	4620      	mov	r0, r4
 80a9e12:	4629      	mov	r1, r5
 80a9e14:	f001 faf6 	bl	80ab404 <__aeabi_dsub>
 80a9e18:	4604      	mov	r4, r0
 80a9e1a:	460d      	mov	r5, r1
 80a9e1c:	f001 ff5a 	bl	80abcd4 <__aeabi_d2iz>
 80a9e20:	4680      	mov	r8, r0
 80a9e22:	f001 fc3d 	bl	80ab6a0 <__aeabi_i2d>
 80a9e26:	4602      	mov	r2, r0
 80a9e28:	460b      	mov	r3, r1
 80a9e2a:	4620      	mov	r0, r4
 80a9e2c:	4629      	mov	r1, r5
 80a9e2e:	464c      	mov	r4, r9
 80a9e30:	f001 fae8 	bl	80ab404 <__aeabi_dsub>
 80a9e34:	2c00      	cmp	r4, #0
 80a9e36:	4606      	mov	r6, r0
 80a9e38:	460f      	mov	r7, r1
 80a9e3a:	f340 8099 	ble.w	80a9f70 <__kernel_rem_pio2+0x308>
 80a9e3e:	9b01      	ldr	r3, [sp, #4]
 80a9e40:	f1c9 0218 	rsb	r2, r9, #24
 80a9e44:	1e58      	subs	r0, r3, #1
 80a9e46:	ab0c      	add	r3, sp, #48	; 0x30
 80a9e48:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80a9e4c:	f1c9 0517 	rsb	r5, r9, #23
 80a9e50:	fa43 f102 	asr.w	r1, r3, r2
 80a9e54:	fa01 f202 	lsl.w	r2, r1, r2
 80a9e58:	1a9b      	subs	r3, r3, r2
 80a9e5a:	fa43 f505 	asr.w	r5, r3, r5
 80a9e5e:	aa0c      	add	r2, sp, #48	; 0x30
 80a9e60:	2d00      	cmp	r5, #0
 80a9e62:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80a9e66:	4488      	add	r8, r1
 80a9e68:	f300 808c 	bgt.w	80a9f84 <__kernel_rem_pio2+0x31c>
 80a9e6c:	2200      	movs	r2, #0
 80a9e6e:	2300      	movs	r3, #0
 80a9e70:	4630      	mov	r0, r6
 80a9e72:	4639      	mov	r1, r7
 80a9e74:	f001 fee6 	bl	80abc44 <__aeabi_dcmpeq>
 80a9e78:	2800      	cmp	r0, #0
 80a9e7a:	f000 8250 	beq.w	80aa31e <__kernel_rem_pio2+0x6b6>
 80a9e7e:	9b01      	ldr	r3, [sp, #4]
 80a9e80:	9a05      	ldr	r2, [sp, #20]
 80a9e82:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80a9e86:	4552      	cmp	r2, sl
 80a9e88:	dc10      	bgt.n	80a9eac <__kernel_rem_pio2+0x244>
 80a9e8a:	2200      	movs	r2, #0
 80a9e8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a9e90:	3b01      	subs	r3, #1
 80a9e92:	a90c      	add	r1, sp, #48	; 0x30
 80a9e94:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a9e96:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a9e9a:	f853 1904 	ldr.w	r1, [r3], #-4
 80a9e9e:	4283      	cmp	r3, r0
 80a9ea0:	ea42 0201 	orr.w	r2, r2, r1
 80a9ea4:	d1f9      	bne.n	80a9e9a <__kernel_rem_pio2+0x232>
 80a9ea6:	2a00      	cmp	r2, #0
 80a9ea8:	f040 80f0 	bne.w	80aa08c <__kernel_rem_pio2+0x424>
 80a9eac:	9b05      	ldr	r3, [sp, #20]
 80a9eae:	aa0c      	add	r2, sp, #48	; 0x30
 80a9eb0:	3b01      	subs	r3, #1
 80a9eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a9eb6:	2b00      	cmp	r3, #0
 80a9eb8:	f040 80e0 	bne.w	80aa07c <__kernel_rem_pio2+0x414>
 80a9ebc:	2301      	movs	r3, #1
 80a9ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a9ec0:	f852 1904 	ldr.w	r1, [r2], #-4
 80a9ec4:	3301      	adds	r3, #1
 80a9ec6:	2900      	cmp	r1, #0
 80a9ec8:	d0fa      	beq.n	80a9ec0 <__kernel_rem_pio2+0x258>
 80a9eca:	9901      	ldr	r1, [sp, #4]
 80a9ecc:	1c4a      	adds	r2, r1, #1
 80a9ece:	4691      	mov	r9, r2
 80a9ed0:	18cb      	adds	r3, r1, r3
 80a9ed2:	9302      	str	r3, [sp, #8]
 80a9ed4:	9b07      	ldr	r3, [sp, #28]
 80a9ed6:	9908      	ldr	r1, [sp, #32]
 80a9ed8:	eb02 0a03 	add.w	sl, r2, r3
 80a9edc:	9b01      	ldr	r3, [sp, #4]
 80a9ede:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 80a9ee2:	440b      	add	r3, r1
 80a9ee4:	4698      	mov	r8, r3
 80a9ee6:	ab20      	add	r3, sp, #128	; 0x80
 80a9ee8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80a9eec:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80a9eee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80a9ef2:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 80a9ef6:	ab70      	add	r3, sp, #448	; 0x1c0
 80a9ef8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a9efc:	9301      	str	r3, [sp, #4]
 80a9efe:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80a9f02:	f001 fbcd 	bl	80ab6a0 <__aeabi_i2d>
 80a9f06:	9b03      	ldr	r3, [sp, #12]
 80a9f08:	4647      	mov	r7, r8
 80a9f0a:	2b00      	cmp	r3, #0
 80a9f0c:	e9c8 0100 	strd	r0, r1, [r8]
 80a9f10:	f108 0808 	add.w	r8, r8, #8
 80a9f14:	db1f      	blt.n	80a9f56 <__kernel_rem_pio2+0x2ee>
 80a9f16:	2400      	movs	r4, #0
 80a9f18:	2500      	movs	r5, #0
 80a9f1a:	9e04      	ldr	r6, [sp, #16]
 80a9f1c:	3f08      	subs	r7, #8
 80a9f1e:	e001      	b.n	80a9f24 <__kernel_rem_pio2+0x2bc>
 80a9f20:	e877 0102 	ldrd	r0, r1, [r7], #-8
 80a9f24:	e9f6 2302 	ldrd	r2, r3, [r6, #8]!
 80a9f28:	f001 fc24 	bl	80ab774 <__aeabi_dmul>
 80a9f2c:	4602      	mov	r2, r0
 80a9f2e:	460b      	mov	r3, r1
 80a9f30:	4620      	mov	r0, r4
 80a9f32:	4629      	mov	r1, r5
 80a9f34:	f001 fa68 	bl	80ab408 <__adddf3>
 80a9f38:	455e      	cmp	r6, fp
 80a9f3a:	4604      	mov	r4, r0
 80a9f3c:	460d      	mov	r5, r1
 80a9f3e:	d1ef      	bne.n	80a9f20 <__kernel_rem_pio2+0x2b8>
 80a9f40:	9b01      	ldr	r3, [sp, #4]
 80a9f42:	f109 0901 	add.w	r9, r9, #1
 80a9f46:	e8e3 4502 	strd	r4, r5, [r3], #8
 80a9f4a:	9301      	str	r3, [sp, #4]
 80a9f4c:	9b02      	ldr	r3, [sp, #8]
 80a9f4e:	4599      	cmp	r9, r3
 80a9f50:	ddd5      	ble.n	80a9efe <__kernel_rem_pio2+0x296>
 80a9f52:	9301      	str	r3, [sp, #4]
 80a9f54:	e713      	b.n	80a9d7e <__kernel_rem_pio2+0x116>
 80a9f56:	2400      	movs	r4, #0
 80a9f58:	2500      	movs	r5, #0
 80a9f5a:	e7f1      	b.n	80a9f40 <__kernel_rem_pio2+0x2d8>
 80a9f5c:	080ade78 	.word	0x080ade78
 80a9f60:	2aaaaaab 	.word	0x2aaaaaab
 80a9f64:	3e700000 	.word	0x3e700000
 80a9f68:	41700000 	.word	0x41700000
 80a9f6c:	40200000 	.word	0x40200000
 80a9f70:	d16b      	bne.n	80aa04a <__kernel_rem_pio2+0x3e2>
 80a9f72:	9b01      	ldr	r3, [sp, #4]
 80a9f74:	aa0c      	add	r2, sp, #48	; 0x30
 80a9f76:	3b01      	subs	r3, #1
 80a9f78:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80a9f7c:	15ed      	asrs	r5, r5, #23
 80a9f7e:	2d00      	cmp	r5, #0
 80a9f80:	f77f af74 	ble.w	80a9e6c <__kernel_rem_pio2+0x204>
 80a9f84:	9b01      	ldr	r3, [sp, #4]
 80a9f86:	f108 0801 	add.w	r8, r8, #1
 80a9f8a:	2b00      	cmp	r3, #0
 80a9f8c:	f340 81c5 	ble.w	80aa31a <__kernel_rem_pio2+0x6b2>
 80a9f90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a9f92:	2c00      	cmp	r4, #0
 80a9f94:	d151      	bne.n	80aa03a <__kernel_rem_pio2+0x3d2>
 80a9f96:	9b01      	ldr	r3, [sp, #4]
 80a9f98:	2b01      	cmp	r3, #1
 80a9f9a:	d020      	beq.n	80a9fde <__kernel_rem_pio2+0x376>
 80a9f9c:	2201      	movs	r2, #1
 80a9f9e:	ab0c      	add	r3, sp, #48	; 0x30
 80a9fa0:	f853 4f04 	ldr.w	r4, [r3, #4]!
 80a9fa4:	2c00      	cmp	r4, #0
 80a9fa6:	d04b      	beq.n	80aa040 <__kernel_rem_pio2+0x3d8>
 80a9fa8:	1c53      	adds	r3, r2, #1
 80a9faa:	a90c      	add	r1, sp, #48	; 0x30
 80a9fac:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 80a9fb0:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 80a9fb4:	9901      	ldr	r1, [sp, #4]
 80a9fb6:	4299      	cmp	r1, r3
 80a9fb8:	dd10      	ble.n	80a9fdc <__kernel_rem_pio2+0x374>
 80a9fba:	ac0c      	add	r4, sp, #48	; 0x30
 80a9fbc:	aa0c      	add	r2, sp, #48	; 0x30
 80a9fbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80a9fc2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80a9fc6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80a9fca:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80a9fce:	e000      	b.n	80a9fd2 <__kernel_rem_pio2+0x36a>
 80a9fd0:	681a      	ldr	r2, [r3, #0]
 80a9fd2:	1a82      	subs	r2, r0, r2
 80a9fd4:	f843 2b04 	str.w	r2, [r3], #4
 80a9fd8:	428b      	cmp	r3, r1
 80a9fda:	d1f9      	bne.n	80a9fd0 <__kernel_rem_pio2+0x368>
 80a9fdc:	2401      	movs	r4, #1
 80a9fde:	9b06      	ldr	r3, [sp, #24]
 80a9fe0:	2b00      	cmp	r3, #0
 80a9fe2:	dd0e      	ble.n	80aa002 <__kernel_rem_pio2+0x39a>
 80a9fe4:	2b01      	cmp	r3, #1
 80a9fe6:	f000 817a 	beq.w	80aa2de <__kernel_rem_pio2+0x676>
 80a9fea:	2b02      	cmp	r3, #2
 80a9fec:	d109      	bne.n	80aa002 <__kernel_rem_pio2+0x39a>
 80a9fee:	9b01      	ldr	r3, [sp, #4]
 80a9ff0:	a90c      	add	r1, sp, #48	; 0x30
 80a9ff2:	1e5a      	subs	r2, r3, #1
 80a9ff4:	ab0c      	add	r3, sp, #48	; 0x30
 80a9ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a9ffa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80a9ffe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80aa002:	2d02      	cmp	r5, #2
 80aa004:	f47f af32 	bne.w	80a9e6c <__kernel_rem_pio2+0x204>
 80aa008:	4632      	mov	r2, r6
 80aa00a:	463b      	mov	r3, r7
 80aa00c:	2000      	movs	r0, #0
 80aa00e:	49bc      	ldr	r1, [pc, #752]	; (80aa300 <__kernel_rem_pio2+0x698>)
 80aa010:	f001 f9f8 	bl	80ab404 <__aeabi_dsub>
 80aa014:	4606      	mov	r6, r0
 80aa016:	460f      	mov	r7, r1
 80aa018:	2c00      	cmp	r4, #0
 80aa01a:	f43f af27 	beq.w	80a9e6c <__kernel_rem_pio2+0x204>
 80aa01e:	9a06      	ldr	r2, [sp, #24]
 80aa020:	2000      	movs	r0, #0
 80aa022:	49b7      	ldr	r1, [pc, #732]	; (80aa300 <__kernel_rem_pio2+0x698>)
 80aa024:	f001 f8d4 	bl	80ab1d0 <scalbn>
 80aa028:	4602      	mov	r2, r0
 80aa02a:	460b      	mov	r3, r1
 80aa02c:	4630      	mov	r0, r6
 80aa02e:	4639      	mov	r1, r7
 80aa030:	f001 f9e8 	bl	80ab404 <__aeabi_dsub>
 80aa034:	4606      	mov	r6, r0
 80aa036:	460f      	mov	r7, r1
 80aa038:	e718      	b.n	80a9e6c <__kernel_rem_pio2+0x204>
 80aa03a:	2301      	movs	r3, #1
 80aa03c:	2200      	movs	r2, #0
 80aa03e:	e7b4      	b.n	80a9faa <__kernel_rem_pio2+0x342>
 80aa040:	9901      	ldr	r1, [sp, #4]
 80aa042:	3201      	adds	r2, #1
 80aa044:	428a      	cmp	r2, r1
 80aa046:	d1ab      	bne.n	80a9fa0 <__kernel_rem_pio2+0x338>
 80aa048:	e7c9      	b.n	80a9fde <__kernel_rem_pio2+0x376>
 80aa04a:	2200      	movs	r2, #0
 80aa04c:	4bad      	ldr	r3, [pc, #692]	; (80aa304 <__kernel_rem_pio2+0x69c>)
 80aa04e:	f001 fe17 	bl	80abc80 <__aeabi_dcmpge>
 80aa052:	4605      	mov	r5, r0
 80aa054:	2800      	cmp	r0, #0
 80aa056:	f43f af09 	beq.w	80a9e6c <__kernel_rem_pio2+0x204>
 80aa05a:	9b01      	ldr	r3, [sp, #4]
 80aa05c:	f108 0801 	add.w	r8, r8, #1
 80aa060:	2b00      	cmp	r3, #0
 80aa062:	bfc8      	it	gt
 80aa064:	2502      	movgt	r5, #2
 80aa066:	dc93      	bgt.n	80a9f90 <__kernel_rem_pio2+0x328>
 80aa068:	4632      	mov	r2, r6
 80aa06a:	463b      	mov	r3, r7
 80aa06c:	2000      	movs	r0, #0
 80aa06e:	49a4      	ldr	r1, [pc, #656]	; (80aa300 <__kernel_rem_pio2+0x698>)
 80aa070:	f001 f9c8 	bl	80ab404 <__aeabi_dsub>
 80aa074:	2502      	movs	r5, #2
 80aa076:	4606      	mov	r6, r0
 80aa078:	460f      	mov	r7, r1
 80aa07a:	e6f7      	b.n	80a9e6c <__kernel_rem_pio2+0x204>
 80aa07c:	9b01      	ldr	r3, [sp, #4]
 80aa07e:	1c5a      	adds	r2, r3, #1
 80aa080:	4691      	mov	r9, r2
 80aa082:	9202      	str	r2, [sp, #8]
 80aa084:	e726      	b.n	80a9ed4 <__kernel_rem_pio2+0x26c>
 80aa086:	2400      	movs	r4, #0
 80aa088:	2500      	movs	r5, #0
 80aa08a:	e660      	b.n	80a9d4e <__kernel_rem_pio2+0xe6>
 80aa08c:	9a06      	ldr	r2, [sp, #24]
 80aa08e:	ab0c      	add	r3, sp, #48	; 0x30
 80aa090:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 80aa094:	3a18      	subs	r2, #24
 80aa096:	f8cd 801c 	str.w	r8, [sp, #28]
 80aa09a:	9503      	str	r5, [sp, #12]
 80aa09c:	9206      	str	r2, [sp, #24]
 80aa09e:	b973      	cbnz	r3, 80aa0be <__kernel_rem_pio2+0x456>
 80aa0a0:	9b01      	ldr	r3, [sp, #4]
 80aa0a2:	a90c      	add	r1, sp, #48	; 0x30
 80aa0a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80aa0a8:	3b02      	subs	r3, #2
 80aa0aa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80aa0ae:	f853 1904 	ldr.w	r1, [r3], #-4
 80aa0b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80aa0b6:	3a18      	subs	r2, #24
 80aa0b8:	2900      	cmp	r1, #0
 80aa0ba:	d0f8      	beq.n	80aa0ae <__kernel_rem_pio2+0x446>
 80aa0bc:	9206      	str	r2, [sp, #24]
 80aa0be:	2000      	movs	r0, #0
 80aa0c0:	9a06      	ldr	r2, [sp, #24]
 80aa0c2:	498f      	ldr	r1, [pc, #572]	; (80aa300 <__kernel_rem_pio2+0x698>)
 80aa0c4:	f001 f884 	bl	80ab1d0 <scalbn>
 80aa0c8:	f1ba 0f00 	cmp.w	sl, #0
 80aa0cc:	4604      	mov	r4, r0
 80aa0ce:	460d      	mov	r5, r1
 80aa0d0:	f2c0 81d1 	blt.w	80aa476 <__kernel_rem_pio2+0x80e>
 80aa0d4:	ab70      	add	r3, sp, #448	; 0x1c0
 80aa0d6:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 80aa0da:	aa0c      	add	r2, sp, #48	; 0x30
 80aa0dc:	f10a 0301 	add.w	r3, sl, #1
 80aa0e0:	9306      	str	r3, [sp, #24]
 80aa0e2:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 80aa0e6:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80aa0ea:	f10b 0908 	add.w	r9, fp, #8
 80aa0ee:	9304      	str	r3, [sp, #16]
 80aa0f0:	f858 0d04 	ldr.w	r0, [r8, #-4]!
 80aa0f4:	f001 fad4 	bl	80ab6a0 <__aeabi_i2d>
 80aa0f8:	4622      	mov	r2, r4
 80aa0fa:	462b      	mov	r3, r5
 80aa0fc:	f001 fb3a 	bl	80ab774 <__aeabi_dmul>
 80aa100:	4606      	mov	r6, r0
 80aa102:	460f      	mov	r7, r1
 80aa104:	4620      	mov	r0, r4
 80aa106:	4629      	mov	r1, r5
 80aa108:	4b7f      	ldr	r3, [pc, #508]	; (80aa308 <__kernel_rem_pio2+0x6a0>)
 80aa10a:	2200      	movs	r2, #0
 80aa10c:	e969 6702 	strd	r6, r7, [r9, #-8]!
 80aa110:	f001 fb30 	bl	80ab774 <__aeabi_dmul>
 80aa114:	ab0c      	add	r3, sp, #48	; 0x30
 80aa116:	4598      	cmp	r8, r3
 80aa118:	4604      	mov	r4, r0
 80aa11a:	460d      	mov	r5, r1
 80aa11c:	d1e8      	bne.n	80aa0f0 <__kernel_rem_pio2+0x488>
 80aa11e:	ab48      	add	r3, sp, #288	; 0x120
 80aa120:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 80aa124:	f8dd a014 	ldr.w	sl, [sp, #20]
 80aa128:	f04f 0900 	mov.w	r9, #0
 80aa12c:	f1ba 0f00 	cmp.w	sl, #0
 80aa130:	db2c      	blt.n	80aa18c <__kernel_rem_pio2+0x524>
 80aa132:	a371      	add	r3, pc, #452	; (adr r3, 80aa2f8 <__kernel_rem_pio2+0x690>)
 80aa134:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa138:	465f      	mov	r7, fp
 80aa13a:	2400      	movs	r4, #0
 80aa13c:	2500      	movs	r5, #0
 80aa13e:	2600      	movs	r6, #0
 80aa140:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80aa30c <__kernel_rem_pio2+0x6a4>
 80aa144:	e003      	b.n	80aa14e <__kernel_rem_pio2+0x4e6>
 80aa146:	45b1      	cmp	r9, r6
 80aa148:	db10      	blt.n	80aa16c <__kernel_rem_pio2+0x504>
 80aa14a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80aa14e:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80aa152:	f001 fb0f 	bl	80ab774 <__aeabi_dmul>
 80aa156:	4602      	mov	r2, r0
 80aa158:	460b      	mov	r3, r1
 80aa15a:	4620      	mov	r0, r4
 80aa15c:	4629      	mov	r1, r5
 80aa15e:	f001 f953 	bl	80ab408 <__adddf3>
 80aa162:	3601      	adds	r6, #1
 80aa164:	45b2      	cmp	sl, r6
 80aa166:	4604      	mov	r4, r0
 80aa168:	460d      	mov	r5, r1
 80aa16a:	daec      	bge.n	80aa146 <__kernel_rem_pio2+0x4de>
 80aa16c:	9b01      	ldr	r3, [sp, #4]
 80aa16e:	9a02      	ldr	r2, [sp, #8]
 80aa170:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80aa174:	4591      	cmp	r9, r2
 80aa176:	e9c3 4500 	strd	r4, r5, [r3]
 80aa17a:	f1ab 0b08 	sub.w	fp, fp, #8
 80aa17e:	f109 0301 	add.w	r3, r9, #1
 80aa182:	d006      	beq.n	80aa192 <__kernel_rem_pio2+0x52a>
 80aa184:	f1ba 0f00 	cmp.w	sl, #0
 80aa188:	4699      	mov	r9, r3
 80aa18a:	dad2      	bge.n	80aa132 <__kernel_rem_pio2+0x4ca>
 80aa18c:	2400      	movs	r4, #0
 80aa18e:	2500      	movs	r5, #0
 80aa190:	e7ec      	b.n	80aa16c <__kernel_rem_pio2+0x504>
 80aa192:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80aa194:	f8dd a008 	ldr.w	sl, [sp, #8]
 80aa198:	2b02      	cmp	r3, #2
 80aa19a:	dc23      	bgt.n	80aa1e4 <__kernel_rem_pio2+0x57c>
 80aa19c:	2b00      	cmp	r3, #0
 80aa19e:	f300 80f1 	bgt.w	80aa384 <__kernel_rem_pio2+0x71c>
 80aa1a2:	d118      	bne.n	80aa1d6 <__kernel_rem_pio2+0x56e>
 80aa1a4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80aa1a6:	9d04      	ldr	r5, [sp, #16]
 80aa1a8:	461c      	mov	r4, r3
 80aa1aa:	9e01      	ldr	r6, [sp, #4]
 80aa1ac:	3508      	adds	r5, #8
 80aa1ae:	4435      	add	r5, r6
 80aa1b0:	4618      	mov	r0, r3
 80aa1b2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80aa1b6:	4621      	mov	r1, r4
 80aa1b8:	f001 f926 	bl	80ab408 <__adddf3>
 80aa1bc:	42ae      	cmp	r6, r5
 80aa1be:	4603      	mov	r3, r0
 80aa1c0:	460c      	mov	r4, r1
 80aa1c2:	d1f5      	bne.n	80aa1b0 <__kernel_rem_pio2+0x548>
 80aa1c4:	9a03      	ldr	r2, [sp, #12]
 80aa1c6:	b10a      	cbz	r2, 80aa1cc <__kernel_rem_pio2+0x564>
 80aa1c8:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80aa1cc:	4618      	mov	r0, r3
 80aa1ce:	4621      	mov	r1, r4
 80aa1d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80aa1d2:	e9c3 0100 	strd	r0, r1, [r3]
 80aa1d6:	9b07      	ldr	r3, [sp, #28]
 80aa1d8:	f003 0007 	and.w	r0, r3, #7
 80aa1dc:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80aa1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa1e4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80aa1e6:	2b03      	cmp	r3, #3
 80aa1e8:	d1f5      	bne.n	80aa1d6 <__kernel_rem_pio2+0x56e>
 80aa1ea:	f1ba 0f00 	cmp.w	sl, #0
 80aa1ee:	f000 8158 	beq.w	80aa4a2 <__kernel_rem_pio2+0x83a>
 80aa1f2:	9b01      	ldr	r3, [sp, #4]
 80aa1f4:	9a04      	ldr	r2, [sp, #16]
 80aa1f6:	4413      	add	r3, r2
 80aa1f8:	469b      	mov	fp, r3
 80aa1fa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80aa1fe:	e95b 6702 	ldrd	r6, r7, [fp, #-8]
 80aa202:	4620      	mov	r0, r4
 80aa204:	4629      	mov	r1, r5
 80aa206:	4632      	mov	r2, r6
 80aa208:	463b      	mov	r3, r7
 80aa20a:	f001 f8fd 	bl	80ab408 <__adddf3>
 80aa20e:	46a0      	mov	r8, r4
 80aa210:	46a9      	mov	r9, r5
 80aa212:	4604      	mov	r4, r0
 80aa214:	460d      	mov	r5, r1
 80aa216:	4622      	mov	r2, r4
 80aa218:	462b      	mov	r3, r5
 80aa21a:	4630      	mov	r0, r6
 80aa21c:	4639      	mov	r1, r7
 80aa21e:	f001 f8f1 	bl	80ab404 <__aeabi_dsub>
 80aa222:	464b      	mov	r3, r9
 80aa224:	4642      	mov	r2, r8
 80aa226:	f001 f8ef 	bl	80ab408 <__adddf3>
 80aa22a:	e9cb 0100 	strd	r0, r1, [fp]
 80aa22e:	e96b 4502 	strd	r4, r5, [fp, #-8]!
 80aa232:	9b01      	ldr	r3, [sp, #4]
 80aa234:	455b      	cmp	r3, fp
 80aa236:	d1e2      	bne.n	80aa1fe <__kernel_rem_pio2+0x596>
 80aa238:	f1ba 0f01 	cmp.w	sl, #1
 80aa23c:	f340 8131 	ble.w	80aa4a2 <__kernel_rem_pio2+0x83a>
 80aa240:	9b04      	ldr	r3, [sp, #16]
 80aa242:	9a01      	ldr	r2, [sp, #4]
 80aa244:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 80aa248:	4413      	add	r3, r2
 80aa24a:	469a      	mov	sl, r3
 80aa24c:	e9d3 4500 	ldrd	r4, r5, [r3]
 80aa250:	9302      	str	r3, [sp, #8]
 80aa252:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80aa256:	4620      	mov	r0, r4
 80aa258:	4629      	mov	r1, r5
 80aa25a:	4632      	mov	r2, r6
 80aa25c:	463b      	mov	r3, r7
 80aa25e:	f001 f8d3 	bl	80ab408 <__adddf3>
 80aa262:	46a0      	mov	r8, r4
 80aa264:	46a9      	mov	r9, r5
 80aa266:	4604      	mov	r4, r0
 80aa268:	460d      	mov	r5, r1
 80aa26a:	4622      	mov	r2, r4
 80aa26c:	462b      	mov	r3, r5
 80aa26e:	4630      	mov	r0, r6
 80aa270:	4639      	mov	r1, r7
 80aa272:	f001 f8c7 	bl	80ab404 <__aeabi_dsub>
 80aa276:	4642      	mov	r2, r8
 80aa278:	464b      	mov	r3, r9
 80aa27a:	f001 f8c5 	bl	80ab408 <__adddf3>
 80aa27e:	e9ca 0100 	strd	r0, r1, [sl]
 80aa282:	e96a 4502 	strd	r4, r5, [sl, #-8]!
 80aa286:	45d3      	cmp	fp, sl
 80aa288:	d1e3      	bne.n	80aa252 <__kernel_rem_pio2+0x5ea>
 80aa28a:	2300      	movs	r3, #0
 80aa28c:	461e      	mov	r6, r3
 80aa28e:	9c02      	ldr	r4, [sp, #8]
 80aa290:	9a01      	ldr	r2, [sp, #4]
 80aa292:	3408      	adds	r4, #8
 80aa294:	f102 0510 	add.w	r5, r2, #16
 80aa298:	4618      	mov	r0, r3
 80aa29a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80aa29e:	4631      	mov	r1, r6
 80aa2a0:	f001 f8b2 	bl	80ab408 <__adddf3>
 80aa2a4:	42a5      	cmp	r5, r4
 80aa2a6:	4603      	mov	r3, r0
 80aa2a8:	460e      	mov	r6, r1
 80aa2aa:	d1f5      	bne.n	80aa298 <__kernel_rem_pio2+0x630>
 80aa2ac:	9a03      	ldr	r2, [sp, #12]
 80aa2ae:	2a00      	cmp	r2, #0
 80aa2b0:	f040 80b1 	bne.w	80aa416 <__kernel_rem_pio2+0x7ae>
 80aa2b4:	4618      	mov	r0, r3
 80aa2b6:	4631      	mov	r1, r6
 80aa2b8:	9a01      	ldr	r2, [sp, #4]
 80aa2ba:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80aa2bc:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 80aa2c0:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 80aa2c4:	e9c6 2300 	strd	r2, r3, [r6]
 80aa2c8:	9b07      	ldr	r3, [sp, #28]
 80aa2ca:	e9c6 0104 	strd	r0, r1, [r6, #16]
 80aa2ce:	f003 0007 	and.w	r0, r3, #7
 80aa2d2:	e9c6 4502 	strd	r4, r5, [r6, #8]
 80aa2d6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80aa2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa2de:	9b01      	ldr	r3, [sp, #4]
 80aa2e0:	a90c      	add	r1, sp, #48	; 0x30
 80aa2e2:	1e5a      	subs	r2, r3, #1
 80aa2e4:	ab0c      	add	r3, sp, #48	; 0x30
 80aa2e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80aa2ea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80aa2ee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80aa2f2:	e686      	b.n	80aa002 <__kernel_rem_pio2+0x39a>
 80aa2f4:	f3af 8000 	nop.w
 80aa2f8:	40000000 	.word	0x40000000
 80aa2fc:	3ff921fb 	.word	0x3ff921fb
 80aa300:	3ff00000 	.word	0x3ff00000
 80aa304:	3fe00000 	.word	0x3fe00000
 80aa308:	3e700000 	.word	0x3e700000
 80aa30c:	080ade40 	.word	0x080ade40
 80aa310:	2100      	movs	r1, #0
 80aa312:	f06f 0317 	mvn.w	r3, #23
 80aa316:	9107      	str	r1, [sp, #28]
 80aa318:	e4c5      	b.n	80a9ca6 <__kernel_rem_pio2+0x3e>
 80aa31a:	2400      	movs	r4, #0
 80aa31c:	e65f      	b.n	80a9fde <__kernel_rem_pio2+0x376>
 80aa31e:	4639      	mov	r1, r7
 80aa320:	9f06      	ldr	r7, [sp, #24]
 80aa322:	4630      	mov	r0, r6
 80aa324:	427a      	negs	r2, r7
 80aa326:	9503      	str	r5, [sp, #12]
 80aa328:	f8cd 801c 	str.w	r8, [sp, #28]
 80aa32c:	f000 ff50 	bl	80ab1d0 <scalbn>
 80aa330:	2200      	movs	r2, #0
 80aa332:	4b5d      	ldr	r3, [pc, #372]	; (80aa4a8 <__kernel_rem_pio2+0x840>)
 80aa334:	4604      	mov	r4, r0
 80aa336:	460d      	mov	r5, r1
 80aa338:	f001 fca2 	bl	80abc80 <__aeabi_dcmpge>
 80aa33c:	2800      	cmp	r0, #0
 80aa33e:	d060      	beq.n	80aa402 <__kernel_rem_pio2+0x79a>
 80aa340:	2200      	movs	r2, #0
 80aa342:	4b5a      	ldr	r3, [pc, #360]	; (80aa4ac <__kernel_rem_pio2+0x844>)
 80aa344:	4620      	mov	r0, r4
 80aa346:	4629      	mov	r1, r5
 80aa348:	f001 fa14 	bl	80ab774 <__aeabi_dmul>
 80aa34c:	f001 fcc2 	bl	80abcd4 <__aeabi_d2iz>
 80aa350:	4606      	mov	r6, r0
 80aa352:	f001 f9a5 	bl	80ab6a0 <__aeabi_i2d>
 80aa356:	2200      	movs	r2, #0
 80aa358:	4b53      	ldr	r3, [pc, #332]	; (80aa4a8 <__kernel_rem_pio2+0x840>)
 80aa35a:	f001 fa0b 	bl	80ab774 <__aeabi_dmul>
 80aa35e:	4602      	mov	r2, r0
 80aa360:	460b      	mov	r3, r1
 80aa362:	4620      	mov	r0, r4
 80aa364:	4629      	mov	r1, r5
 80aa366:	f001 f84d 	bl	80ab404 <__aeabi_dsub>
 80aa36a:	f001 fcb3 	bl	80abcd4 <__aeabi_d2iz>
 80aa36e:	9b01      	ldr	r3, [sp, #4]
 80aa370:	aa0c      	add	r2, sp, #48	; 0x30
 80aa372:	f103 0a01 	add.w	sl, r3, #1
 80aa376:	3718      	adds	r7, #24
 80aa378:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80aa37c:	9706      	str	r7, [sp, #24]
 80aa37e:	f842 602a 	str.w	r6, [r2, sl, lsl #2]
 80aa382:	e69c      	b.n	80aa0be <__kernel_rem_pio2+0x456>
 80aa384:	2600      	movs	r6, #0
 80aa386:	9b01      	ldr	r3, [sp, #4]
 80aa388:	9906      	ldr	r1, [sp, #24]
 80aa38a:	4698      	mov	r8, r3
 80aa38c:	eb03 07c1 	add.w	r7, r3, r1, lsl #3
 80aa390:	4631      	mov	r1, r6
 80aa392:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 80aa396:	4630      	mov	r0, r6
 80aa398:	f001 f836 	bl	80ab408 <__adddf3>
 80aa39c:	45b8      	cmp	r8, r7
 80aa39e:	4606      	mov	r6, r0
 80aa3a0:	d1f7      	bne.n	80aa392 <__kernel_rem_pio2+0x72a>
 80aa3a2:	9b03      	ldr	r3, [sp, #12]
 80aa3a4:	2b00      	cmp	r3, #0
 80aa3a6:	d151      	bne.n	80aa44c <__kernel_rem_pio2+0x7e4>
 80aa3a8:	4634      	mov	r4, r6
 80aa3aa:	460d      	mov	r5, r1
 80aa3ac:	4632      	mov	r2, r6
 80aa3ae:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80aa3b0:	460b      	mov	r3, r1
 80aa3b2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80aa3b6:	e9c6 4500 	strd	r4, r5, [r6]
 80aa3ba:	f001 f823 	bl	80ab404 <__aeabi_dsub>
 80aa3be:	f1ba 0f00 	cmp.w	sl, #0
 80aa3c2:	4603      	mov	r3, r0
 80aa3c4:	460e      	mov	r6, r1
 80aa3c6:	dd10      	ble.n	80aa3ea <__kernel_rem_pio2+0x782>
 80aa3c8:	2401      	movs	r4, #1
 80aa3ca:	ad48      	add	r5, sp, #288	; 0x120
 80aa3cc:	4618      	mov	r0, r3
 80aa3ce:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80aa3d2:	4631      	mov	r1, r6
 80aa3d4:	f001 f818 	bl	80ab408 <__adddf3>
 80aa3d8:	3401      	adds	r4, #1
 80aa3da:	45a2      	cmp	sl, r4
 80aa3dc:	4603      	mov	r3, r0
 80aa3de:	460e      	mov	r6, r1
 80aa3e0:	daf4      	bge.n	80aa3cc <__kernel_rem_pio2+0x764>
 80aa3e2:	9a03      	ldr	r2, [sp, #12]
 80aa3e4:	b10a      	cbz	r2, 80aa3ea <__kernel_rem_pio2+0x782>
 80aa3e6:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80aa3ea:	4618      	mov	r0, r3
 80aa3ec:	4631      	mov	r1, r6
 80aa3ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80aa3f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80aa3f4:	9b07      	ldr	r3, [sp, #28]
 80aa3f6:	f003 0007 	and.w	r0, r3, #7
 80aa3fa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80aa3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa402:	4620      	mov	r0, r4
 80aa404:	4629      	mov	r1, r5
 80aa406:	f001 fc65 	bl	80abcd4 <__aeabi_d2iz>
 80aa40a:	9b01      	ldr	r3, [sp, #4]
 80aa40c:	aa0c      	add	r2, sp, #48	; 0x30
 80aa40e:	469a      	mov	sl, r3
 80aa410:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80aa414:	e653      	b.n	80aa0be <__kernel_rem_pio2+0x456>
 80aa416:	9a01      	ldr	r2, [sp, #4]
 80aa418:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80aa41a:	4615      	mov	r5, r2
 80aa41c:	4604      	mov	r4, r0
 80aa41e:	6103      	str	r3, [r0, #16]
 80aa420:	68ab      	ldr	r3, [r5, #8]
 80aa422:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80aa426:	6146      	str	r6, [r0, #20]
 80aa428:	6851      	ldr	r1, [r2, #4]
 80aa42a:	6828      	ldr	r0, [r5, #0]
 80aa42c:	68d2      	ldr	r2, [r2, #12]
 80aa42e:	60a3      	str	r3, [r4, #8]
 80aa430:	9b07      	ldr	r3, [sp, #28]
 80aa432:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80aa436:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80aa43a:	6020      	str	r0, [r4, #0]
 80aa43c:	f003 0007 	and.w	r0, r3, #7
 80aa440:	6061      	str	r1, [r4, #4]
 80aa442:	60e2      	str	r2, [r4, #12]
 80aa444:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80aa448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa44c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80aa44e:	f101 4400 	add.w	r4, r1, #2147483648	; 0x80000000
 80aa452:	460b      	mov	r3, r1
 80aa454:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80aa458:	4632      	mov	r2, r6
 80aa45a:	e9c5 6400 	strd	r6, r4, [r5]
 80aa45e:	f000 ffd1 	bl	80ab404 <__aeabi_dsub>
 80aa462:	f1ba 0f00 	cmp.w	sl, #0
 80aa466:	4603      	mov	r3, r0
 80aa468:	460e      	mov	r6, r1
 80aa46a:	dcad      	bgt.n	80aa3c8 <__kernel_rem_pio2+0x760>
 80aa46c:	e7bb      	b.n	80aa3e6 <__kernel_rem_pio2+0x77e>
 80aa46e:	9b08      	ldr	r3, [sp, #32]
 80aa470:	00db      	lsls	r3, r3, #3
 80aa472:	9302      	str	r3, [sp, #8]
 80aa474:	e474      	b.n	80a9d60 <__kernel_rem_pio2+0xf8>
 80aa476:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80aa478:	2b02      	cmp	r3, #2
 80aa47a:	dc06      	bgt.n	80aa48a <__kernel_rem_pio2+0x822>
 80aa47c:	2b00      	cmp	r3, #0
 80aa47e:	dc0d      	bgt.n	80aa49c <__kernel_rem_pio2+0x834>
 80aa480:	f47f aea9 	bne.w	80aa1d6 <__kernel_rem_pio2+0x56e>
 80aa484:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80aa486:	461c      	mov	r4, r3
 80aa488:	e69c      	b.n	80aa1c4 <__kernel_rem_pio2+0x55c>
 80aa48a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80aa48c:	2b03      	cmp	r3, #3
 80aa48e:	f47f aea2 	bne.w	80aa1d6 <__kernel_rem_pio2+0x56e>
 80aa492:	2300      	movs	r3, #0
 80aa494:	aa48      	add	r2, sp, #288	; 0x120
 80aa496:	461e      	mov	r6, r3
 80aa498:	9201      	str	r2, [sp, #4]
 80aa49a:	e707      	b.n	80aa2ac <__kernel_rem_pio2+0x644>
 80aa49c:	2600      	movs	r6, #0
 80aa49e:	4631      	mov	r1, r6
 80aa4a0:	e77f      	b.n	80aa3a2 <__kernel_rem_pio2+0x73a>
 80aa4a2:	2300      	movs	r3, #0
 80aa4a4:	461e      	mov	r6, r3
 80aa4a6:	e701      	b.n	80aa2ac <__kernel_rem_pio2+0x644>
 80aa4a8:	41700000 	.word	0x41700000
 80aa4ac:	3e700000 	.word	0x3e700000

080aa4b0 <__kernel_sin>:
 80aa4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80aa4b4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80aa4b8:	b085      	sub	sp, #20
 80aa4ba:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80aa4be:	4604      	mov	r4, r0
 80aa4c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80aa4c4:	9101      	str	r1, [sp, #4]
 80aa4c6:	da04      	bge.n	80aa4d2 <__kernel_sin+0x22>
 80aa4c8:	f001 fc04 	bl	80abcd4 <__aeabi_d2iz>
 80aa4cc:	2800      	cmp	r0, #0
 80aa4ce:	f000 808f 	beq.w	80aa5f0 <__kernel_sin+0x140>
 80aa4d2:	9b01      	ldr	r3, [sp, #4]
 80aa4d4:	4622      	mov	r2, r4
 80aa4d6:	4619      	mov	r1, r3
 80aa4d8:	4620      	mov	r0, r4
 80aa4da:	f001 f94b 	bl	80ab774 <__aeabi_dmul>
 80aa4de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80aa4e2:	4606      	mov	r6, r0
 80aa4e4:	460f      	mov	r7, r1
 80aa4e6:	4602      	mov	r2, r0
 80aa4e8:	460b      	mov	r3, r1
 80aa4ea:	4620      	mov	r0, r4
 80aa4ec:	4649      	mov	r1, r9
 80aa4ee:	f001 f941 	bl	80ab774 <__aeabi_dmul>
 80aa4f2:	a343      	add	r3, pc, #268	; (adr r3, 80aa600 <__kernel_sin+0x150>)
 80aa4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa4f8:	4682      	mov	sl, r0
 80aa4fa:	468b      	mov	fp, r1
 80aa4fc:	4630      	mov	r0, r6
 80aa4fe:	4639      	mov	r1, r7
 80aa500:	f001 f938 	bl	80ab774 <__aeabi_dmul>
 80aa504:	a340      	add	r3, pc, #256	; (adr r3, 80aa608 <__kernel_sin+0x158>)
 80aa506:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa50a:	f000 ff7b 	bl	80ab404 <__aeabi_dsub>
 80aa50e:	4632      	mov	r2, r6
 80aa510:	463b      	mov	r3, r7
 80aa512:	f001 f92f 	bl	80ab774 <__aeabi_dmul>
 80aa516:	a33e      	add	r3, pc, #248	; (adr r3, 80aa610 <__kernel_sin+0x160>)
 80aa518:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa51c:	f000 ff74 	bl	80ab408 <__adddf3>
 80aa520:	4632      	mov	r2, r6
 80aa522:	463b      	mov	r3, r7
 80aa524:	f001 f926 	bl	80ab774 <__aeabi_dmul>
 80aa528:	a33b      	add	r3, pc, #236	; (adr r3, 80aa618 <__kernel_sin+0x168>)
 80aa52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa52e:	f000 ff69 	bl	80ab404 <__aeabi_dsub>
 80aa532:	4632      	mov	r2, r6
 80aa534:	463b      	mov	r3, r7
 80aa536:	f001 f91d 	bl	80ab774 <__aeabi_dmul>
 80aa53a:	a339      	add	r3, pc, #228	; (adr r3, 80aa620 <__kernel_sin+0x170>)
 80aa53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa540:	f000 ff62 	bl	80ab408 <__adddf3>
 80aa544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80aa546:	4680      	mov	r8, r0
 80aa548:	4689      	mov	r9, r1
 80aa54a:	b3bb      	cbz	r3, 80aa5bc <__kernel_sin+0x10c>
 80aa54c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80aa550:	2200      	movs	r2, #0
 80aa552:	4b37      	ldr	r3, [pc, #220]	; (80aa630 <__kernel_sin+0x180>)
 80aa554:	f001 f90e 	bl	80ab774 <__aeabi_dmul>
 80aa558:	4642      	mov	r2, r8
 80aa55a:	464b      	mov	r3, r9
 80aa55c:	4680      	mov	r8, r0
 80aa55e:	4689      	mov	r9, r1
 80aa560:	4650      	mov	r0, sl
 80aa562:	4659      	mov	r1, fp
 80aa564:	f001 f906 	bl	80ab774 <__aeabi_dmul>
 80aa568:	4602      	mov	r2, r0
 80aa56a:	460b      	mov	r3, r1
 80aa56c:	4640      	mov	r0, r8
 80aa56e:	4649      	mov	r1, r9
 80aa570:	f000 ff48 	bl	80ab404 <__aeabi_dsub>
 80aa574:	4632      	mov	r2, r6
 80aa576:	463b      	mov	r3, r7
 80aa578:	f001 f8fc 	bl	80ab774 <__aeabi_dmul>
 80aa57c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80aa580:	f000 ff40 	bl	80ab404 <__aeabi_dsub>
 80aa584:	a328      	add	r3, pc, #160	; (adr r3, 80aa628 <__kernel_sin+0x178>)
 80aa586:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa58a:	4606      	mov	r6, r0
 80aa58c:	460f      	mov	r7, r1
 80aa58e:	4650      	mov	r0, sl
 80aa590:	4659      	mov	r1, fp
 80aa592:	f001 f8ef 	bl	80ab774 <__aeabi_dmul>
 80aa596:	4602      	mov	r2, r0
 80aa598:	460b      	mov	r3, r1
 80aa59a:	4630      	mov	r0, r6
 80aa59c:	4639      	mov	r1, r7
 80aa59e:	f000 ff33 	bl	80ab408 <__adddf3>
 80aa5a2:	4602      	mov	r2, r0
 80aa5a4:	460b      	mov	r3, r1
 80aa5a6:	4620      	mov	r0, r4
 80aa5a8:	9901      	ldr	r1, [sp, #4]
 80aa5aa:	f000 ff2b 	bl	80ab404 <__aeabi_dsub>
 80aa5ae:	4604      	mov	r4, r0
 80aa5b0:	460d      	mov	r5, r1
 80aa5b2:	4620      	mov	r0, r4
 80aa5b4:	4629      	mov	r1, r5
 80aa5b6:	b005      	add	sp, #20
 80aa5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa5bc:	4602      	mov	r2, r0
 80aa5be:	460b      	mov	r3, r1
 80aa5c0:	4630      	mov	r0, r6
 80aa5c2:	4639      	mov	r1, r7
 80aa5c4:	f001 f8d6 	bl	80ab774 <__aeabi_dmul>
 80aa5c8:	a317      	add	r3, pc, #92	; (adr r3, 80aa628 <__kernel_sin+0x178>)
 80aa5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa5ce:	f000 ff19 	bl	80ab404 <__aeabi_dsub>
 80aa5d2:	4652      	mov	r2, sl
 80aa5d4:	465b      	mov	r3, fp
 80aa5d6:	f001 f8cd 	bl	80ab774 <__aeabi_dmul>
 80aa5da:	4622      	mov	r2, r4
 80aa5dc:	9b01      	ldr	r3, [sp, #4]
 80aa5de:	f000 ff13 	bl	80ab408 <__adddf3>
 80aa5e2:	4604      	mov	r4, r0
 80aa5e4:	460d      	mov	r5, r1
 80aa5e6:	4620      	mov	r0, r4
 80aa5e8:	4629      	mov	r1, r5
 80aa5ea:	b005      	add	sp, #20
 80aa5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa5f0:	9d01      	ldr	r5, [sp, #4]
 80aa5f2:	4620      	mov	r0, r4
 80aa5f4:	4629      	mov	r1, r5
 80aa5f6:	b005      	add	sp, #20
 80aa5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa5fc:	f3af 8000 	nop.w
 80aa600:	5acfd57c 	.word	0x5acfd57c
 80aa604:	3de5d93a 	.word	0x3de5d93a
 80aa608:	8a2b9ceb 	.word	0x8a2b9ceb
 80aa60c:	3e5ae5e6 	.word	0x3e5ae5e6
 80aa610:	57b1fe7d 	.word	0x57b1fe7d
 80aa614:	3ec71de3 	.word	0x3ec71de3
 80aa618:	19c161d5 	.word	0x19c161d5
 80aa61c:	3f2a01a0 	.word	0x3f2a01a0
 80aa620:	1110f8a6 	.word	0x1110f8a6
 80aa624:	3f811111 	.word	0x3f811111
 80aa628:	55555549 	.word	0x55555549
 80aa62c:	3fc55555 	.word	0x3fc55555
 80aa630:	3fe00000 	.word	0x3fe00000

080aa634 <__kernel_cosf>:
 80aa634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80aa638:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80aa63c:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 80aa640:	4606      	mov	r6, r0
 80aa642:	4688      	mov	r8, r1
 80aa644:	da4a      	bge.n	80aa6dc <__kernel_cosf+0xa8>
 80aa646:	f001 fec7 	bl	80ac3d8 <__aeabi_f2iz>
 80aa64a:	2800      	cmp	r0, #0
 80aa64c:	f000 809f 	beq.w	80aa78e <__kernel_cosf+0x15a>
 80aa650:	4631      	mov	r1, r6
 80aa652:	4630      	mov	r0, r6
 80aa654:	f001 fce4 	bl	80ac020 <__aeabi_fmul>
 80aa658:	4604      	mov	r4, r0
 80aa65a:	494f      	ldr	r1, [pc, #316]	; (80aa798 <__kernel_cosf+0x164>)
 80aa65c:	f001 fce0 	bl	80ac020 <__aeabi_fmul>
 80aa660:	494e      	ldr	r1, [pc, #312]	; (80aa79c <__kernel_cosf+0x168>)
 80aa662:	f001 fbd5 	bl	80abe10 <__addsf3>
 80aa666:	4621      	mov	r1, r4
 80aa668:	f001 fcda 	bl	80ac020 <__aeabi_fmul>
 80aa66c:	494c      	ldr	r1, [pc, #304]	; (80aa7a0 <__kernel_cosf+0x16c>)
 80aa66e:	f001 fbcd 	bl	80abe0c <__aeabi_fsub>
 80aa672:	4621      	mov	r1, r4
 80aa674:	f001 fcd4 	bl	80ac020 <__aeabi_fmul>
 80aa678:	494a      	ldr	r1, [pc, #296]	; (80aa7a4 <__kernel_cosf+0x170>)
 80aa67a:	f001 fbc9 	bl	80abe10 <__addsf3>
 80aa67e:	4621      	mov	r1, r4
 80aa680:	f001 fcce 	bl	80ac020 <__aeabi_fmul>
 80aa684:	4948      	ldr	r1, [pc, #288]	; (80aa7a8 <__kernel_cosf+0x174>)
 80aa686:	f001 fbc1 	bl	80abe0c <__aeabi_fsub>
 80aa68a:	4621      	mov	r1, r4
 80aa68c:	f001 fcc8 	bl	80ac020 <__aeabi_fmul>
 80aa690:	4946      	ldr	r1, [pc, #280]	; (80aa7ac <__kernel_cosf+0x178>)
 80aa692:	f001 fbbd 	bl	80abe10 <__addsf3>
 80aa696:	4621      	mov	r1, r4
 80aa698:	f001 fcc2 	bl	80ac020 <__aeabi_fmul>
 80aa69c:	4607      	mov	r7, r0
 80aa69e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80aa6a2:	4620      	mov	r0, r4
 80aa6a4:	f001 fcbc 	bl	80ac020 <__aeabi_fmul>
 80aa6a8:	4603      	mov	r3, r0
 80aa6aa:	4639      	mov	r1, r7
 80aa6ac:	4620      	mov	r0, r4
 80aa6ae:	461c      	mov	r4, r3
 80aa6b0:	f001 fcb6 	bl	80ac020 <__aeabi_fmul>
 80aa6b4:	4641      	mov	r1, r8
 80aa6b6:	4605      	mov	r5, r0
 80aa6b8:	4630      	mov	r0, r6
 80aa6ba:	f001 fcb1 	bl	80ac020 <__aeabi_fmul>
 80aa6be:	4601      	mov	r1, r0
 80aa6c0:	4628      	mov	r0, r5
 80aa6c2:	f001 fba3 	bl	80abe0c <__aeabi_fsub>
 80aa6c6:	4601      	mov	r1, r0
 80aa6c8:	4620      	mov	r0, r4
 80aa6ca:	f001 fb9f 	bl	80abe0c <__aeabi_fsub>
 80aa6ce:	4601      	mov	r1, r0
 80aa6d0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80aa6d4:	f001 fb9a 	bl	80abe0c <__aeabi_fsub>
 80aa6d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80aa6dc:	4601      	mov	r1, r0
 80aa6de:	f001 fc9f 	bl	80ac020 <__aeabi_fmul>
 80aa6e2:	4604      	mov	r4, r0
 80aa6e4:	492c      	ldr	r1, [pc, #176]	; (80aa798 <__kernel_cosf+0x164>)
 80aa6e6:	f001 fc9b 	bl	80ac020 <__aeabi_fmul>
 80aa6ea:	492c      	ldr	r1, [pc, #176]	; (80aa79c <__kernel_cosf+0x168>)
 80aa6ec:	f001 fb90 	bl	80abe10 <__addsf3>
 80aa6f0:	4621      	mov	r1, r4
 80aa6f2:	f001 fc95 	bl	80ac020 <__aeabi_fmul>
 80aa6f6:	492a      	ldr	r1, [pc, #168]	; (80aa7a0 <__kernel_cosf+0x16c>)
 80aa6f8:	f001 fb88 	bl	80abe0c <__aeabi_fsub>
 80aa6fc:	4621      	mov	r1, r4
 80aa6fe:	f001 fc8f 	bl	80ac020 <__aeabi_fmul>
 80aa702:	4928      	ldr	r1, [pc, #160]	; (80aa7a4 <__kernel_cosf+0x170>)
 80aa704:	f001 fb84 	bl	80abe10 <__addsf3>
 80aa708:	4621      	mov	r1, r4
 80aa70a:	f001 fc89 	bl	80ac020 <__aeabi_fmul>
 80aa70e:	4926      	ldr	r1, [pc, #152]	; (80aa7a8 <__kernel_cosf+0x174>)
 80aa710:	f001 fb7c 	bl	80abe0c <__aeabi_fsub>
 80aa714:	4621      	mov	r1, r4
 80aa716:	f001 fc83 	bl	80ac020 <__aeabi_fmul>
 80aa71a:	4924      	ldr	r1, [pc, #144]	; (80aa7ac <__kernel_cosf+0x178>)
 80aa71c:	f001 fb78 	bl	80abe10 <__addsf3>
 80aa720:	4621      	mov	r1, r4
 80aa722:	f001 fc7d 	bl	80ac020 <__aeabi_fmul>
 80aa726:	4b22      	ldr	r3, [pc, #136]	; (80aa7b0 <__kernel_cosf+0x17c>)
 80aa728:	4607      	mov	r7, r0
 80aa72a:	429d      	cmp	r5, r3
 80aa72c:	ddb7      	ble.n	80aa69e <__kernel_cosf+0x6a>
 80aa72e:	4b21      	ldr	r3, [pc, #132]	; (80aa7b4 <__kernel_cosf+0x180>)
 80aa730:	429d      	cmp	r5, r3
 80aa732:	dc28      	bgt.n	80aa786 <__kernel_cosf+0x152>
 80aa734:	f105 457f 	add.w	r5, r5, #4278190080	; 0xff000000
 80aa738:	4629      	mov	r1, r5
 80aa73a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80aa73e:	f001 fb65 	bl	80abe0c <__aeabi_fsub>
 80aa742:	4681      	mov	r9, r0
 80aa744:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80aa748:	4620      	mov	r0, r4
 80aa74a:	f001 fc69 	bl	80ac020 <__aeabi_fmul>
 80aa74e:	4629      	mov	r1, r5
 80aa750:	f001 fb5c 	bl	80abe0c <__aeabi_fsub>
 80aa754:	4603      	mov	r3, r0
 80aa756:	4639      	mov	r1, r7
 80aa758:	4620      	mov	r0, r4
 80aa75a:	461c      	mov	r4, r3
 80aa75c:	f001 fc60 	bl	80ac020 <__aeabi_fmul>
 80aa760:	4641      	mov	r1, r8
 80aa762:	4605      	mov	r5, r0
 80aa764:	4630      	mov	r0, r6
 80aa766:	f001 fc5b 	bl	80ac020 <__aeabi_fmul>
 80aa76a:	4601      	mov	r1, r0
 80aa76c:	4628      	mov	r0, r5
 80aa76e:	f001 fb4d 	bl	80abe0c <__aeabi_fsub>
 80aa772:	4601      	mov	r1, r0
 80aa774:	4620      	mov	r0, r4
 80aa776:	f001 fb49 	bl	80abe0c <__aeabi_fsub>
 80aa77a:	4601      	mov	r1, r0
 80aa77c:	4648      	mov	r0, r9
 80aa77e:	f001 fb45 	bl	80abe0c <__aeabi_fsub>
 80aa782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80aa786:	f8df 9034 	ldr.w	r9, [pc, #52]	; 80aa7bc <__kernel_cosf+0x188>
 80aa78a:	4d0b      	ldr	r5, [pc, #44]	; (80aa7b8 <__kernel_cosf+0x184>)
 80aa78c:	e7da      	b.n	80aa744 <__kernel_cosf+0x110>
 80aa78e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80aa792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80aa796:	bf00      	nop
 80aa798:	ad47d74e 	.word	0xad47d74e
 80aa79c:	310f74f6 	.word	0x310f74f6
 80aa7a0:	3493f27c 	.word	0x3493f27c
 80aa7a4:	37d00d01 	.word	0x37d00d01
 80aa7a8:	3ab60b61 	.word	0x3ab60b61
 80aa7ac:	3d2aaaab 	.word	0x3d2aaaab
 80aa7b0:	3e999999 	.word	0x3e999999
 80aa7b4:	3f480000 	.word	0x3f480000
 80aa7b8:	3e900000 	.word	0x3e900000
 80aa7bc:	3f380000 	.word	0x3f380000

080aa7c0 <__kernel_rem_pio2f>:
 80aa7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80aa7c4:	461c      	mov	r4, r3
 80aa7c6:	b0dd      	sub	sp, #372	; 0x174
 80aa7c8:	9109      	str	r1, [sp, #36]	; 0x24
 80aa7ca:	1e61      	subs	r1, r4, #1
 80aa7cc:	9306      	str	r3, [sp, #24]
 80aa7ce:	9101      	str	r1, [sp, #4]
 80aa7d0:	4bbe      	ldr	r3, [pc, #760]	; (80aaacc <__kernel_rem_pio2f+0x30c>)
 80aa7d2:	9966      	ldr	r1, [sp, #408]	; 0x198
 80aa7d4:	4605      	mov	r5, r0
 80aa7d6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80aa7da:	920b      	str	r2, [sp, #44]	; 0x2c
 80aa7dc:	9103      	str	r1, [sp, #12]
 80aa7de:	1d11      	adds	r1, r2, #4
 80aa7e0:	f2c0 8301 	blt.w	80aade6 <__kernel_rem_pio2f+0x626>
 80aa7e4:	1ed3      	subs	r3, r2, #3
 80aa7e6:	bf44      	itt	mi
 80aa7e8:	4613      	movmi	r3, r2
 80aa7ea:	3304      	addmi	r3, #4
 80aa7ec:	10db      	asrs	r3, r3, #3
 80aa7ee:	9305      	str	r3, [sp, #20]
 80aa7f0:	3301      	adds	r3, #1
 80aa7f2:	00db      	lsls	r3, r3, #3
 80aa7f4:	930a      	str	r3, [sp, #40]	; 0x28
 80aa7f6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80aa7fa:	1a9b      	subs	r3, r3, r2
 80aa7fc:	9304      	str	r3, [sp, #16]
 80aa7fe:	9a05      	ldr	r2, [sp, #20]
 80aa800:	9b01      	ldr	r3, [sp, #4]
 80aa802:	1ad6      	subs	r6, r2, r3
 80aa804:	9a03      	ldr	r2, [sp, #12]
 80aa806:	eb12 0803 	adds.w	r8, r2, r3
 80aa80a:	d418      	bmi.n	80aa83e <__kernel_rem_pio2f+0x7e>
 80aa80c:	f108 0801 	add.w	r8, r8, #1
 80aa810:	2400      	movs	r4, #0
 80aa812:	f8dd 919c 	ldr.w	r9, [sp, #412]	; 0x19c
 80aa816:	44b0      	add	r8, r6
 80aa818:	af20      	add	r7, sp, #128	; 0x80
 80aa81a:	e008      	b.n	80aa82e <__kernel_rem_pio2f+0x6e>
 80aa81c:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 80aa820:	f001 fbaa 	bl	80abf78 <__aeabi_i2f>
 80aa824:	3601      	adds	r6, #1
 80aa826:	4546      	cmp	r6, r8
 80aa828:	f847 0b04 	str.w	r0, [r7], #4
 80aa82c:	d007      	beq.n	80aa83e <__kernel_rem_pio2f+0x7e>
 80aa82e:	2e00      	cmp	r6, #0
 80aa830:	daf4      	bge.n	80aa81c <__kernel_rem_pio2f+0x5c>
 80aa832:	4620      	mov	r0, r4
 80aa834:	3601      	adds	r6, #1
 80aa836:	4546      	cmp	r6, r8
 80aa838:	f847 0b04 	str.w	r0, [r7], #4
 80aa83c:	d1f7      	bne.n	80aa82e <__kernel_rem_pio2f+0x6e>
 80aa83e:	9b03      	ldr	r3, [sp, #12]
 80aa840:	2b00      	cmp	r3, #0
 80aa842:	f1a5 0304 	sub.w	r3, r5, #4
 80aa846:	9302      	str	r3, [sp, #8]
 80aa848:	f2c0 8313 	blt.w	80aae72 <__kernel_rem_pio2f+0x6b2>
 80aa84c:	4619      	mov	r1, r3
 80aa84e:	9b06      	ldr	r3, [sp, #24]
 80aa850:	9e01      	ldr	r6, [sp, #4]
 80aa852:	009a      	lsls	r2, r3, #2
 80aa854:	9200      	str	r2, [sp, #0]
 80aa856:	9a03      	ldr	r2, [sp, #12]
 80aa858:	eb01 0583 	add.w	r5, r1, r3, lsl #2
 80aa85c:	a920      	add	r1, sp, #128	; 0x80
 80aa85e:	eb01 0783 	add.w	r7, r1, r3, lsl #2
 80aa862:	f50d 7890 	add.w	r8, sp, #288	; 0x120
 80aa866:	eb02 0903 	add.w	r9, r2, r3
 80aa86a:	9b01      	ldr	r3, [sp, #4]
 80aa86c:	2b00      	cmp	r3, #0
 80aa86e:	bfb8      	it	lt
 80aa870:	2400      	movlt	r4, #0
 80aa872:	db10      	blt.n	80aa896 <__kernel_rem_pio2f+0xd6>
 80aa874:	46bb      	mov	fp, r7
 80aa876:	2400      	movs	r4, #0
 80aa878:	f8dd a008 	ldr.w	sl, [sp, #8]
 80aa87c:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 80aa880:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80aa884:	f001 fbcc 	bl	80ac020 <__aeabi_fmul>
 80aa888:	4601      	mov	r1, r0
 80aa88a:	4620      	mov	r0, r4
 80aa88c:	f001 fac0 	bl	80abe10 <__addsf3>
 80aa890:	45aa      	cmp	sl, r5
 80aa892:	4604      	mov	r4, r0
 80aa894:	d1f2      	bne.n	80aa87c <__kernel_rem_pio2f+0xbc>
 80aa896:	3601      	adds	r6, #1
 80aa898:	454e      	cmp	r6, r9
 80aa89a:	f848 4b04 	str.w	r4, [r8], #4
 80aa89e:	f107 0704 	add.w	r7, r7, #4
 80aa8a2:	d1e2      	bne.n	80aa86a <__kernel_rem_pio2f+0xaa>
 80aa8a4:	9a03      	ldr	r2, [sp, #12]
 80aa8a6:	a90c      	add	r1, sp, #48	; 0x30
 80aa8a8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80aa8ac:	9802      	ldr	r0, [sp, #8]
 80aa8ae:	9900      	ldr	r1, [sp, #0]
 80aa8b0:	4692      	mov	sl, r2
 80aa8b2:	4401      	add	r1, r0
 80aa8b4:	460d      	mov	r5, r1
 80aa8b6:	3b08      	subs	r3, #8
 80aa8b8:	9307      	str	r3, [sp, #28]
 80aa8ba:	ab0b      	add	r3, sp, #44	; 0x2c
 80aa8bc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80aa8c0:	9308      	str	r3, [sp, #32]
 80aa8c2:	ab5c      	add	r3, sp, #368	; 0x170
 80aa8c4:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80aa8c8:	f1ba 0f00 	cmp.w	sl, #0
 80aa8cc:	f853 9c50 	ldr.w	r9, [r3, #-80]
 80aa8d0:	ea4f 088a 	mov.w	r8, sl, lsl #2
 80aa8d4:	dd22      	ble.n	80aa91c <__kernel_rem_pio2f+0x15c>
 80aa8d6:	af48      	add	r7, sp, #288	; 0x120
 80aa8d8:	ae0c      	add	r6, sp, #48	; 0x30
 80aa8da:	eb07 048a 	add.w	r4, r7, sl, lsl #2
 80aa8de:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80aa8e2:	4648      	mov	r0, r9
 80aa8e4:	f001 fb9c 	bl	80ac020 <__aeabi_fmul>
 80aa8e8:	f001 fd76 	bl	80ac3d8 <__aeabi_f2iz>
 80aa8ec:	f001 fb44 	bl	80abf78 <__aeabi_i2f>
 80aa8f0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80aa8f4:	4683      	mov	fp, r0
 80aa8f6:	f001 fb93 	bl	80ac020 <__aeabi_fmul>
 80aa8fa:	4601      	mov	r1, r0
 80aa8fc:	4648      	mov	r0, r9
 80aa8fe:	f001 fa85 	bl	80abe0c <__aeabi_fsub>
 80aa902:	f001 fd69 	bl	80ac3d8 <__aeabi_f2iz>
 80aa906:	4603      	mov	r3, r0
 80aa908:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80aa90c:	4658      	mov	r0, fp
 80aa90e:	f846 3b04 	str.w	r3, [r6], #4
 80aa912:	f001 fa7d 	bl	80abe10 <__addsf3>
 80aa916:	42bc      	cmp	r4, r7
 80aa918:	4681      	mov	r9, r0
 80aa91a:	d1e0      	bne.n	80aa8de <__kernel_rem_pio2f+0x11e>
 80aa91c:	9e04      	ldr	r6, [sp, #16]
 80aa91e:	4648      	mov	r0, r9
 80aa920:	4631      	mov	r1, r6
 80aa922:	f000 fd13 	bl	80ab34c <scalbnf>
 80aa926:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80aa92a:	4604      	mov	r4, r0
 80aa92c:	f001 fb78 	bl	80ac020 <__aeabi_fmul>
 80aa930:	f000 fccc 	bl	80ab2cc <floorf>
 80aa934:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80aa938:	f001 fb72 	bl	80ac020 <__aeabi_fmul>
 80aa93c:	4601      	mov	r1, r0
 80aa93e:	4620      	mov	r0, r4
 80aa940:	f001 fa64 	bl	80abe0c <__aeabi_fsub>
 80aa944:	4604      	mov	r4, r0
 80aa946:	f001 fd47 	bl	80ac3d8 <__aeabi_f2iz>
 80aa94a:	4607      	mov	r7, r0
 80aa94c:	f001 fb14 	bl	80abf78 <__aeabi_i2f>
 80aa950:	4601      	mov	r1, r0
 80aa952:	4620      	mov	r0, r4
 80aa954:	f001 fa5a 	bl	80abe0c <__aeabi_fsub>
 80aa958:	2e00      	cmp	r6, #0
 80aa95a:	4604      	mov	r4, r0
 80aa95c:	f340 808a 	ble.w	80aaa74 <__kernel_rem_pio2f+0x2b4>
 80aa960:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 80aa964:	ab0c      	add	r3, sp, #48	; 0x30
 80aa966:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80aa96a:	f1c6 0208 	rsb	r2, r6, #8
 80aa96e:	fa43 f102 	asr.w	r1, r3, r2
 80aa972:	fa01 f202 	lsl.w	r2, r1, r2
 80aa976:	1a9b      	subs	r3, r3, r2
 80aa978:	f1c6 0607 	rsb	r6, r6, #7
 80aa97c:	fa43 f606 	asr.w	r6, r3, r6
 80aa980:	aa0c      	add	r2, sp, #48	; 0x30
 80aa982:	2e00      	cmp	r6, #0
 80aa984:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80aa988:	440f      	add	r7, r1
 80aa98a:	dc7d      	bgt.n	80aaa88 <__kernel_rem_pio2f+0x2c8>
 80aa98c:	2100      	movs	r1, #0
 80aa98e:	4620      	mov	r0, r4
 80aa990:	f001 fcda 	bl	80ac348 <__aeabi_fcmpeq>
 80aa994:	2800      	cmp	r0, #0
 80aa996:	f000 80d4 	beq.w	80aab42 <__kernel_rem_pio2f+0x382>
 80aa99a:	9b03      	ldr	r3, [sp, #12]
 80aa99c:	f10a 34ff 	add.w	r4, sl, #4294967295	; 0xffffffff
 80aa9a0:	42a3      	cmp	r3, r4
 80aa9a2:	dc10      	bgt.n	80aa9c6 <__kernel_rem_pio2f+0x206>
 80aa9a4:	2200      	movs	r2, #0
 80aa9a6:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 80aa9aa:	3b01      	subs	r3, #1
 80aa9ac:	a90c      	add	r1, sp, #48	; 0x30
 80aa9ae:	9808      	ldr	r0, [sp, #32]
 80aa9b0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80aa9b4:	f853 1904 	ldr.w	r1, [r3], #-4
 80aa9b8:	4283      	cmp	r3, r0
 80aa9ba:	ea42 0201 	orr.w	r2, r2, r1
 80aa9be:	d1f9      	bne.n	80aa9b4 <__kernel_rem_pio2f+0x1f4>
 80aa9c0:	2a00      	cmp	r2, #0
 80aa9c2:	f040 8117 	bne.w	80aabf4 <__kernel_rem_pio2f+0x434>
 80aa9c6:	9b03      	ldr	r3, [sp, #12]
 80aa9c8:	aa0c      	add	r2, sp, #48	; 0x30
 80aa9ca:	3b01      	subs	r3, #1
 80aa9cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80aa9d0:	2b00      	cmp	r3, #0
 80aa9d2:	f040 810a 	bne.w	80aabea <__kernel_rem_pio2f+0x42a>
 80aa9d6:	2701      	movs	r7, #1
 80aa9d8:	9b07      	ldr	r3, [sp, #28]
 80aa9da:	f853 2904 	ldr.w	r2, [r3], #-4
 80aa9de:	3701      	adds	r7, #1
 80aa9e0:	2a00      	cmp	r2, #0
 80aa9e2:	d0fa      	beq.n	80aa9da <__kernel_rem_pio2f+0x21a>
 80aa9e4:	f10a 0301 	add.w	r3, sl, #1
 80aa9e8:	4698      	mov	r8, r3
 80aa9ea:	eb0a 0207 	add.w	r2, sl, r7
 80aa9ee:	9200      	str	r2, [sp, #0]
 80aa9f0:	9a05      	ldr	r2, [sp, #20]
 80aa9f2:	eb03 0902 	add.w	r9, r3, r2
 80aa9f6:	9a06      	ldr	r2, [sp, #24]
 80aa9f8:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 80aa9fc:	eb02 060a 	add.w	r6, r2, sl
 80aaa00:	aa20      	add	r2, sp, #128	; 0x80
 80aaa02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80aaa06:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 80aaa08:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80aaa0c:	eb02 0989 	add.w	r9, r2, r9, lsl #2
 80aaa10:	aa48      	add	r2, sp, #288	; 0x120
 80aaa12:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 80aaa16:	f859 0f04 	ldr.w	r0, [r9, #4]!
 80aaa1a:	f001 faad 	bl	80abf78 <__aeabi_i2f>
 80aaa1e:	9b01      	ldr	r3, [sp, #4]
 80aaa20:	4634      	mov	r4, r6
 80aaa22:	2b00      	cmp	r3, #0
 80aaa24:	6030      	str	r0, [r6, #0]
 80aaa26:	f106 0604 	add.w	r6, r6, #4
 80aaa2a:	db1a      	blt.n	80aaa62 <__kernel_rem_pio2f+0x2a2>
 80aaa2c:	2700      	movs	r7, #0
 80aaa2e:	f8dd b008 	ldr.w	fp, [sp, #8]
 80aaa32:	3c04      	subs	r4, #4
 80aaa34:	e001      	b.n	80aaa3a <__kernel_rem_pio2f+0x27a>
 80aaa36:	f854 0904 	ldr.w	r0, [r4], #-4
 80aaa3a:	f85b 1f04 	ldr.w	r1, [fp, #4]!
 80aaa3e:	f001 faef 	bl	80ac020 <__aeabi_fmul>
 80aaa42:	4601      	mov	r1, r0
 80aaa44:	4638      	mov	r0, r7
 80aaa46:	f001 f9e3 	bl	80abe10 <__addsf3>
 80aaa4a:	45ab      	cmp	fp, r5
 80aaa4c:	4607      	mov	r7, r0
 80aaa4e:	d1f2      	bne.n	80aaa36 <__kernel_rem_pio2f+0x276>
 80aaa50:	9b00      	ldr	r3, [sp, #0]
 80aaa52:	f108 0801 	add.w	r8, r8, #1
 80aaa56:	4598      	cmp	r8, r3
 80aaa58:	f84a 7b04 	str.w	r7, [sl], #4
 80aaa5c:	dddb      	ble.n	80aaa16 <__kernel_rem_pio2f+0x256>
 80aaa5e:	469a      	mov	sl, r3
 80aaa60:	e72f      	b.n	80aa8c2 <__kernel_rem_pio2f+0x102>
 80aaa62:	2700      	movs	r7, #0
 80aaa64:	9b00      	ldr	r3, [sp, #0]
 80aaa66:	f108 0801 	add.w	r8, r8, #1
 80aaa6a:	4598      	cmp	r8, r3
 80aaa6c:	f84a 7b04 	str.w	r7, [sl], #4
 80aaa70:	ddd1      	ble.n	80aaa16 <__kernel_rem_pio2f+0x256>
 80aaa72:	e7f4      	b.n	80aaa5e <__kernel_rem_pio2f+0x29e>
 80aaa74:	f040 80a1 	bne.w	80aabba <__kernel_rem_pio2f+0x3fa>
 80aaa78:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80aaa7c:	aa0c      	add	r2, sp, #48	; 0x30
 80aaa7e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80aaa82:	1236      	asrs	r6, r6, #8
 80aaa84:	2e00      	cmp	r6, #0
 80aaa86:	dd81      	ble.n	80aa98c <__kernel_rem_pio2f+0x1cc>
 80aaa88:	f1ba 0f00 	cmp.w	sl, #0
 80aaa8c:	f107 0701 	add.w	r7, r7, #1
 80aaa90:	f340 81ae 	ble.w	80aadf0 <__kernel_rem_pio2f+0x630>
 80aaa94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80aaa96:	2a00      	cmp	r2, #0
 80aaa98:	f040 8087 	bne.w	80aabaa <__kernel_rem_pio2f+0x3ea>
 80aaa9c:	f1ba 0f01 	cmp.w	sl, #1
 80aaaa0:	d01e      	beq.n	80aaae0 <__kernel_rem_pio2f+0x320>
 80aaaa2:	2101      	movs	r1, #1
 80aaaa4:	ab0c      	add	r3, sp, #48	; 0x30
 80aaaa6:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80aaaaa:	2a00      	cmp	r2, #0
 80aaaac:	f000 8080 	beq.w	80aabb0 <__kernel_rem_pio2f+0x3f0>
 80aaab0:	1c4b      	adds	r3, r1, #1
 80aaab2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80aaab6:	a80c      	add	r0, sp, #48	; 0x30
 80aaab8:	459a      	cmp	sl, r3
 80aaaba:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 80aaabe:	dd0e      	ble.n	80aaade <__kernel_rem_pio2f+0x31e>
 80aaac0:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80aaac4:	4480      	add	r8, r0
 80aaac6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80aaaca:	e002      	b.n	80aaad2 <__kernel_rem_pio2f+0x312>
 80aaacc:	080adeb4 	.word	0x080adeb4
 80aaad0:	681a      	ldr	r2, [r3, #0]
 80aaad2:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80aaad6:	f843 2b04 	str.w	r2, [r3], #4
 80aaada:	4543      	cmp	r3, r8
 80aaadc:	d1f8      	bne.n	80aaad0 <__kernel_rem_pio2f+0x310>
 80aaade:	2201      	movs	r2, #1
 80aaae0:	9b04      	ldr	r3, [sp, #16]
 80aaae2:	2b00      	cmp	r3, #0
 80aaae4:	dd0e      	ble.n	80aab04 <__kernel_rem_pio2f+0x344>
 80aaae6:	2b01      	cmp	r3, #1
 80aaae8:	f000 8172 	beq.w	80aadd0 <__kernel_rem_pio2f+0x610>
 80aaaec:	2b02      	cmp	r3, #2
 80aaaee:	d109      	bne.n	80aab04 <__kernel_rem_pio2f+0x344>
 80aaaf0:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 80aaaf4:	ab0c      	add	r3, sp, #48	; 0x30
 80aaaf6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80aaafa:	a80c      	add	r0, sp, #48	; 0x30
 80aaafc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80aab00:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 80aab04:	2e02      	cmp	r6, #2
 80aab06:	f47f af41 	bne.w	80aa98c <__kernel_rem_pio2f+0x1cc>
 80aab0a:	4621      	mov	r1, r4
 80aab0c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80aab10:	9200      	str	r2, [sp, #0]
 80aab12:	f001 f97b 	bl	80abe0c <__aeabi_fsub>
 80aab16:	9a00      	ldr	r2, [sp, #0]
 80aab18:	4604      	mov	r4, r0
 80aab1a:	2a00      	cmp	r2, #0
 80aab1c:	f43f af36 	beq.w	80aa98c <__kernel_rem_pio2f+0x1cc>
 80aab20:	9904      	ldr	r1, [sp, #16]
 80aab22:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80aab26:	f000 fc11 	bl	80ab34c <scalbnf>
 80aab2a:	4601      	mov	r1, r0
 80aab2c:	4620      	mov	r0, r4
 80aab2e:	f001 f96d 	bl	80abe0c <__aeabi_fsub>
 80aab32:	4604      	mov	r4, r0
 80aab34:	2100      	movs	r1, #0
 80aab36:	4620      	mov	r0, r4
 80aab38:	f001 fc06 	bl	80ac348 <__aeabi_fcmpeq>
 80aab3c:	2800      	cmp	r0, #0
 80aab3e:	f47f af2c 	bne.w	80aa99a <__kernel_rem_pio2f+0x1da>
 80aab42:	4620      	mov	r0, r4
 80aab44:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 80aab48:	1a99      	subs	r1, r3, r2
 80aab4a:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80aab4e:	f000 fbfd 	bl	80ab34c <scalbnf>
 80aab52:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80aab56:	4604      	mov	r4, r0
 80aab58:	f001 fc14 	bl	80ac384 <__aeabi_fcmpge>
 80aab5c:	2800      	cmp	r0, #0
 80aab5e:	f000 8172 	beq.w	80aae46 <__kernel_rem_pio2f+0x686>
 80aab62:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80aab66:	4620      	mov	r0, r4
 80aab68:	f001 fa5a 	bl	80ac020 <__aeabi_fmul>
 80aab6c:	f001 fc34 	bl	80ac3d8 <__aeabi_f2iz>
 80aab70:	f001 fa02 	bl	80abf78 <__aeabi_i2f>
 80aab74:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80aab78:	4605      	mov	r5, r0
 80aab7a:	f001 fa51 	bl	80ac020 <__aeabi_fmul>
 80aab7e:	4601      	mov	r1, r0
 80aab80:	4620      	mov	r0, r4
 80aab82:	f001 f943 	bl	80abe0c <__aeabi_fsub>
 80aab86:	f001 fc27 	bl	80ac3d8 <__aeabi_f2iz>
 80aab8a:	4603      	mov	r3, r0
 80aab8c:	aa0c      	add	r2, sp, #48	; 0x30
 80aab8e:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80aab92:	4628      	mov	r0, r5
 80aab94:	f001 fc20 	bl	80ac3d8 <__aeabi_f2iz>
 80aab98:	9b04      	ldr	r3, [sp, #16]
 80aab9a:	f10a 0401 	add.w	r4, sl, #1
 80aab9e:	3308      	adds	r3, #8
 80aaba0:	9304      	str	r3, [sp, #16]
 80aaba2:	ab0c      	add	r3, sp, #48	; 0x30
 80aaba4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80aaba8:	e03a      	b.n	80aac20 <__kernel_rem_pio2f+0x460>
 80aabaa:	2301      	movs	r3, #1
 80aabac:	2100      	movs	r1, #0
 80aabae:	e780      	b.n	80aaab2 <__kernel_rem_pio2f+0x2f2>
 80aabb0:	3101      	adds	r1, #1
 80aabb2:	4551      	cmp	r1, sl
 80aabb4:	f47f af77 	bne.w	80aaaa6 <__kernel_rem_pio2f+0x2e6>
 80aabb8:	e792      	b.n	80aaae0 <__kernel_rem_pio2f+0x320>
 80aabba:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80aabbe:	f001 fbe1 	bl	80ac384 <__aeabi_fcmpge>
 80aabc2:	4606      	mov	r6, r0
 80aabc4:	2800      	cmp	r0, #0
 80aabc6:	f43f aee1 	beq.w	80aa98c <__kernel_rem_pio2f+0x1cc>
 80aabca:	f1ba 0f00 	cmp.w	sl, #0
 80aabce:	bfc8      	it	gt
 80aabd0:	2602      	movgt	r6, #2
 80aabd2:	f107 0701 	add.w	r7, r7, #1
 80aabd6:	f73f af5d 	bgt.w	80aaa94 <__kernel_rem_pio2f+0x2d4>
 80aabda:	4621      	mov	r1, r4
 80aabdc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80aabe0:	f001 f914 	bl	80abe0c <__aeabi_fsub>
 80aabe4:	2602      	movs	r6, #2
 80aabe6:	4604      	mov	r4, r0
 80aabe8:	e6d0      	b.n	80aa98c <__kernel_rem_pio2f+0x1cc>
 80aabea:	f10a 0301 	add.w	r3, sl, #1
 80aabee:	4698      	mov	r8, r3
 80aabf0:	9300      	str	r3, [sp, #0]
 80aabf2:	e6fd      	b.n	80aa9f0 <__kernel_rem_pio2f+0x230>
 80aabf4:	9a04      	ldr	r2, [sp, #16]
 80aabf6:	ab0c      	add	r3, sp, #48	; 0x30
 80aabf8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80aabfc:	3a08      	subs	r2, #8
 80aabfe:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80aac02:	9204      	str	r2, [sp, #16]
 80aac04:	b963      	cbnz	r3, 80aac20 <__kernel_rem_pio2f+0x460>
 80aac06:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 80aac0a:	3b02      	subs	r3, #2
 80aac0c:	a90c      	add	r1, sp, #48	; 0x30
 80aac0e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80aac12:	f853 1904 	ldr.w	r1, [r3], #-4
 80aac16:	3c01      	subs	r4, #1
 80aac18:	3a08      	subs	r2, #8
 80aac1a:	2900      	cmp	r1, #0
 80aac1c:	d0f9      	beq.n	80aac12 <__kernel_rem_pio2f+0x452>
 80aac1e:	9204      	str	r2, [sp, #16]
 80aac20:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80aac24:	9904      	ldr	r1, [sp, #16]
 80aac26:	f000 fb91 	bl	80ab34c <scalbnf>
 80aac2a:	2c00      	cmp	r4, #0
 80aac2c:	4607      	mov	r7, r0
 80aac2e:	f2c0 8124 	blt.w	80aae7a <__kernel_rem_pio2f+0x6ba>
 80aac32:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 80aac36:	00a3      	lsls	r3, r4, #2
 80aac38:	a948      	add	r1, sp, #288	; 0x120
 80aac3a:	1d1a      	adds	r2, r3, #4
 80aac3c:	eb01 0803 	add.w	r8, r1, r3
 80aac40:	9304      	str	r3, [sp, #16]
 80aac42:	ab0c      	add	r3, sp, #48	; 0x30
 80aac44:	9205      	str	r2, [sp, #20]
 80aac46:	eb03 0902 	add.w	r9, r3, r2
 80aac4a:	f108 0504 	add.w	r5, r8, #4
 80aac4e:	f859 0d04 	ldr.w	r0, [r9, #-4]!
 80aac52:	f001 f991 	bl	80abf78 <__aeabi_i2f>
 80aac56:	4639      	mov	r1, r7
 80aac58:	f001 f9e2 	bl	80ac020 <__aeabi_fmul>
 80aac5c:	4603      	mov	r3, r0
 80aac5e:	4631      	mov	r1, r6
 80aac60:	4638      	mov	r0, r7
 80aac62:	f845 3d04 	str.w	r3, [r5, #-4]!
 80aac66:	f001 f9db 	bl	80ac020 <__aeabi_fmul>
 80aac6a:	ab0c      	add	r3, sp, #48	; 0x30
 80aac6c:	4599      	cmp	r9, r3
 80aac6e:	4607      	mov	r7, r0
 80aac70:	d1ed      	bne.n	80aac4e <__kernel_rem_pio2f+0x48e>
 80aac72:	2700      	movs	r7, #0
 80aac74:	f04f 0900 	mov.w	r9, #0
 80aac78:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80aac7c:	f1a8 0804 	sub.w	r8, r8, #4
 80aac80:	9400      	str	r4, [sp, #0]
 80aac82:	f1ba 0f00 	cmp.w	sl, #0
 80aac86:	bfb8      	it	lt
 80aac88:	464d      	movlt	r5, r9
 80aac8a:	db15      	blt.n	80aacb8 <__kernel_rem_pio2f+0x4f8>
 80aac8c:	46c3      	mov	fp, r8
 80aac8e:	464d      	mov	r5, r9
 80aac90:	2600      	movs	r6, #0
 80aac92:	4c82      	ldr	r4, [pc, #520]	; (80aae9c <__kernel_rem_pio2f+0x6dc>)
 80aac94:	4882      	ldr	r0, [pc, #520]	; (80aaea0 <__kernel_rem_pio2f+0x6e0>)
 80aac96:	e003      	b.n	80aaca0 <__kernel_rem_pio2f+0x4e0>
 80aac98:	42b7      	cmp	r7, r6
 80aac9a:	db0d      	blt.n	80aacb8 <__kernel_rem_pio2f+0x4f8>
 80aac9c:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80aaca0:	f85b 1f04 	ldr.w	r1, [fp, #4]!
 80aaca4:	f001 f9bc 	bl	80ac020 <__aeabi_fmul>
 80aaca8:	4601      	mov	r1, r0
 80aacaa:	4628      	mov	r0, r5
 80aacac:	f001 f8b0 	bl	80abe10 <__addsf3>
 80aacb0:	3601      	adds	r6, #1
 80aacb2:	45b2      	cmp	sl, r6
 80aacb4:	4605      	mov	r5, r0
 80aacb6:	daef      	bge.n	80aac98 <__kernel_rem_pio2f+0x4d8>
 80aacb8:	9a00      	ldr	r2, [sp, #0]
 80aacba:	ab5c      	add	r3, sp, #368	; 0x170
 80aacbc:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80aacc0:	42ba      	cmp	r2, r7
 80aacc2:	f843 5ca0 	str.w	r5, [r3, #-160]
 80aacc6:	f1a8 0804 	sub.w	r8, r8, #4
 80aacca:	f107 0301 	add.w	r3, r7, #1
 80aacce:	d001      	beq.n	80aacd4 <__kernel_rem_pio2f+0x514>
 80aacd0:	461f      	mov	r7, r3
 80aacd2:	e7d6      	b.n	80aac82 <__kernel_rem_pio2f+0x4c2>
 80aacd4:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80aacd6:	9c00      	ldr	r4, [sp, #0]
 80aacd8:	2a02      	cmp	r2, #2
 80aacda:	dc1a      	bgt.n	80aad12 <__kernel_rem_pio2f+0x552>
 80aacdc:	2a00      	cmp	r2, #0
 80aacde:	f300 8089 	bgt.w	80aadf4 <__kernel_rem_pio2f+0x634>
 80aace2:	d110      	bne.n	80aad06 <__kernel_rem_pio2f+0x546>
 80aace4:	9b05      	ldr	r3, [sp, #20]
 80aace6:	ad34      	add	r5, sp, #208	; 0xd0
 80aace8:	442b      	add	r3, r5
 80aacea:	2000      	movs	r0, #0
 80aacec:	461c      	mov	r4, r3
 80aacee:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80aacf2:	f001 f88d 	bl	80abe10 <__addsf3>
 80aacf6:	42a5      	cmp	r5, r4
 80aacf8:	d1f9      	bne.n	80aacee <__kernel_rem_pio2f+0x52e>
 80aacfa:	9b01      	ldr	r3, [sp, #4]
 80aacfc:	b10b      	cbz	r3, 80aad02 <__kernel_rem_pio2f+0x542>
 80aacfe:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80aad02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80aad04:	6018      	str	r0, [r3, #0]
 80aad06:	9b02      	ldr	r3, [sp, #8]
 80aad08:	f003 0007 	and.w	r0, r3, #7
 80aad0c:	b05d      	add	sp, #372	; 0x174
 80aad0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aad12:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80aad14:	2b03      	cmp	r3, #3
 80aad16:	d1f6      	bne.n	80aad06 <__kernel_rem_pio2f+0x546>
 80aad18:	2c00      	cmp	r4, #0
 80aad1a:	f000 80bb 	beq.w	80aae94 <__kernel_rem_pio2f+0x6d4>
 80aad1e:	9a04      	ldr	r2, [sp, #16]
 80aad20:	ab5c      	add	r3, sp, #368	; 0x170
 80aad22:	4413      	add	r3, r2
 80aad24:	ad34      	add	r5, sp, #208	; 0xd0
 80aad26:	f853 7ca0 	ldr.w	r7, [r3, #-160]
 80aad2a:	18ae      	adds	r6, r5, r2
 80aad2c:	f856 8c04 	ldr.w	r8, [r6, #-4]
 80aad30:	4638      	mov	r0, r7
 80aad32:	4641      	mov	r1, r8
 80aad34:	f001 f86c 	bl	80abe10 <__addsf3>
 80aad38:	46b9      	mov	r9, r7
 80aad3a:	4607      	mov	r7, r0
 80aad3c:	4640      	mov	r0, r8
 80aad3e:	4639      	mov	r1, r7
 80aad40:	f001 f864 	bl	80abe0c <__aeabi_fsub>
 80aad44:	4649      	mov	r1, r9
 80aad46:	f001 f863 	bl	80abe10 <__addsf3>
 80aad4a:	6030      	str	r0, [r6, #0]
 80aad4c:	f846 7d04 	str.w	r7, [r6, #-4]!
 80aad50:	42b5      	cmp	r5, r6
 80aad52:	d1eb      	bne.n	80aad2c <__kernel_rem_pio2f+0x56c>
 80aad54:	2c01      	cmp	r4, #1
 80aad56:	f340 809d 	ble.w	80aae94 <__kernel_rem_pio2f+0x6d4>
 80aad5a:	9b04      	ldr	r3, [sp, #16]
 80aad5c:	aa5c      	add	r2, sp, #368	; 0x170
 80aad5e:	18ee      	adds	r6, r5, r3
 80aad60:	4637      	mov	r7, r6
 80aad62:	18d3      	adds	r3, r2, r3
 80aad64:	f853 4ca0 	ldr.w	r4, [r3, #-160]
 80aad68:	f10d 08d4 	add.w	r8, sp, #212	; 0xd4
 80aad6c:	f857 9c04 	ldr.w	r9, [r7, #-4]
 80aad70:	4620      	mov	r0, r4
 80aad72:	4649      	mov	r1, r9
 80aad74:	f001 f84c 	bl	80abe10 <__addsf3>
 80aad78:	46a2      	mov	sl, r4
 80aad7a:	4604      	mov	r4, r0
 80aad7c:	4648      	mov	r0, r9
 80aad7e:	4621      	mov	r1, r4
 80aad80:	f001 f844 	bl	80abe0c <__aeabi_fsub>
 80aad84:	4651      	mov	r1, sl
 80aad86:	f001 f843 	bl	80abe10 <__addsf3>
 80aad8a:	6038      	str	r0, [r7, #0]
 80aad8c:	f847 4d04 	str.w	r4, [r7, #-4]!
 80aad90:	45b8      	cmp	r8, r7
 80aad92:	d1eb      	bne.n	80aad6c <__kernel_rem_pio2f+0x5ac>
 80aad94:	2000      	movs	r0, #0
 80aad96:	3604      	adds	r6, #4
 80aad98:	3508      	adds	r5, #8
 80aad9a:	f856 1d04 	ldr.w	r1, [r6, #-4]!
 80aad9e:	f001 f837 	bl	80abe10 <__addsf3>
 80aada2:	42b5      	cmp	r5, r6
 80aada4:	d1f9      	bne.n	80aad9a <__kernel_rem_pio2f+0x5da>
 80aada6:	9b01      	ldr	r3, [sp, #4]
 80aada8:	2b00      	cmp	r3, #0
 80aadaa:	d054      	beq.n	80aae56 <__kernel_rem_pio2f+0x696>
 80aadac:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 80aadb0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80aadb4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80aadb8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80aadbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80aadbe:	604b      	str	r3, [r1, #4]
 80aadc0:	9b02      	ldr	r3, [sp, #8]
 80aadc2:	6088      	str	r0, [r1, #8]
 80aadc4:	f003 0007 	and.w	r0, r3, #7
 80aadc8:	600a      	str	r2, [r1, #0]
 80aadca:	b05d      	add	sp, #372	; 0x174
 80aadcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aadd0:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 80aadd4:	ab0c      	add	r3, sp, #48	; 0x30
 80aadd6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80aadda:	a80c      	add	r0, sp, #48	; 0x30
 80aaddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80aade0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 80aade4:	e68e      	b.n	80aab04 <__kernel_rem_pio2f+0x344>
 80aade6:	2308      	movs	r3, #8
 80aade8:	930a      	str	r3, [sp, #40]	; 0x28
 80aadea:	2300      	movs	r3, #0
 80aadec:	9305      	str	r3, [sp, #20]
 80aadee:	e502      	b.n	80aa7f6 <__kernel_rem_pio2f+0x36>
 80aadf0:	2200      	movs	r2, #0
 80aadf2:	e675      	b.n	80aaae0 <__kernel_rem_pio2f+0x320>
 80aadf4:	2000      	movs	r0, #0
 80aadf6:	ae34      	add	r6, sp, #208	; 0xd0
 80aadf8:	eb06 0583 	add.w	r5, r6, r3, lsl #2
 80aadfc:	f855 1d04 	ldr.w	r1, [r5, #-4]!
 80aae00:	f001 f806 	bl	80abe10 <__addsf3>
 80aae04:	42ae      	cmp	r6, r5
 80aae06:	d1f9      	bne.n	80aadfc <__kernel_rem_pio2f+0x63c>
 80aae08:	9b01      	ldr	r3, [sp, #4]
 80aae0a:	bb3b      	cbnz	r3, 80aae5c <__kernel_rem_pio2f+0x69c>
 80aae0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80aae0e:	4601      	mov	r1, r0
 80aae10:	6018      	str	r0, [r3, #0]
 80aae12:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80aae14:	f000 fffa 	bl	80abe0c <__aeabi_fsub>
 80aae18:	2c00      	cmp	r4, #0
 80aae1a:	dd0c      	ble.n	80aae36 <__kernel_rem_pio2f+0x676>
 80aae1c:	2501      	movs	r5, #1
 80aae1e:	ae34      	add	r6, sp, #208	; 0xd0
 80aae20:	f856 1f04 	ldr.w	r1, [r6, #4]!
 80aae24:	3501      	adds	r5, #1
 80aae26:	f000 fff3 	bl	80abe10 <__addsf3>
 80aae2a:	42ac      	cmp	r4, r5
 80aae2c:	daf8      	bge.n	80aae20 <__kernel_rem_pio2f+0x660>
 80aae2e:	9b01      	ldr	r3, [sp, #4]
 80aae30:	b10b      	cbz	r3, 80aae36 <__kernel_rem_pio2f+0x676>
 80aae32:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80aae36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80aae38:	6058      	str	r0, [r3, #4]
 80aae3a:	9b02      	ldr	r3, [sp, #8]
 80aae3c:	f003 0007 	and.w	r0, r3, #7
 80aae40:	b05d      	add	sp, #372	; 0x174
 80aae42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aae46:	4620      	mov	r0, r4
 80aae48:	f001 fac6 	bl	80ac3d8 <__aeabi_f2iz>
 80aae4c:	ab0c      	add	r3, sp, #48	; 0x30
 80aae4e:	4654      	mov	r4, sl
 80aae50:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 80aae54:	e6e4      	b.n	80aac20 <__kernel_rem_pio2f+0x460>
 80aae56:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80aae58:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80aae5a:	e7af      	b.n	80aadbc <__kernel_rem_pio2f+0x5fc>
 80aae5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80aae5e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80aae62:	4601      	mov	r1, r0
 80aae64:	6013      	str	r3, [r2, #0]
 80aae66:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80aae68:	f000 ffd0 	bl	80abe0c <__aeabi_fsub>
 80aae6c:	2c00      	cmp	r4, #0
 80aae6e:	dcd5      	bgt.n	80aae1c <__kernel_rem_pio2f+0x65c>
 80aae70:	e7df      	b.n	80aae32 <__kernel_rem_pio2f+0x672>
 80aae72:	9b06      	ldr	r3, [sp, #24]
 80aae74:	009b      	lsls	r3, r3, #2
 80aae76:	9300      	str	r3, [sp, #0]
 80aae78:	e514      	b.n	80aa8a4 <__kernel_rem_pio2f+0xe4>
 80aae7a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80aae7c:	2b02      	cmp	r3, #2
 80aae7e:	dc05      	bgt.n	80aae8c <__kernel_rem_pio2f+0x6cc>
 80aae80:	2b00      	cmp	r3, #0
 80aae82:	dc09      	bgt.n	80aae98 <__kernel_rem_pio2f+0x6d8>
 80aae84:	f47f af3f 	bne.w	80aad06 <__kernel_rem_pio2f+0x546>
 80aae88:	2000      	movs	r0, #0
 80aae8a:	e736      	b.n	80aacfa <__kernel_rem_pio2f+0x53a>
 80aae8c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80aae8e:	2b03      	cmp	r3, #3
 80aae90:	f47f af39 	bne.w	80aad06 <__kernel_rem_pio2f+0x546>
 80aae94:	2000      	movs	r0, #0
 80aae96:	e786      	b.n	80aada6 <__kernel_rem_pio2f+0x5e6>
 80aae98:	2000      	movs	r0, #0
 80aae9a:	e7b5      	b.n	80aae08 <__kernel_rem_pio2f+0x648>
 80aae9c:	080ade88 	.word	0x080ade88
 80aaea0:	3fc90000 	.word	0x3fc90000

080aaea4 <__kernel_sinf>:
 80aaea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80aaea8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80aaeac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80aaeb0:	4604      	mov	r4, r0
 80aaeb2:	460e      	mov	r6, r1
 80aaeb4:	4690      	mov	r8, r2
 80aaeb6:	da03      	bge.n	80aaec0 <__kernel_sinf+0x1c>
 80aaeb8:	f001 fa8e 	bl	80ac3d8 <__aeabi_f2iz>
 80aaebc:	2800      	cmp	r0, #0
 80aaebe:	d058      	beq.n	80aaf72 <__kernel_sinf+0xce>
 80aaec0:	4621      	mov	r1, r4
 80aaec2:	4620      	mov	r0, r4
 80aaec4:	f001 f8ac 	bl	80ac020 <__aeabi_fmul>
 80aaec8:	4605      	mov	r5, r0
 80aaeca:	4620      	mov	r0, r4
 80aaecc:	4629      	mov	r1, r5
 80aaece:	f001 f8a7 	bl	80ac020 <__aeabi_fmul>
 80aaed2:	4929      	ldr	r1, [pc, #164]	; (80aaf78 <__kernel_sinf+0xd4>)
 80aaed4:	4681      	mov	r9, r0
 80aaed6:	4628      	mov	r0, r5
 80aaed8:	f001 f8a2 	bl	80ac020 <__aeabi_fmul>
 80aaedc:	4927      	ldr	r1, [pc, #156]	; (80aaf7c <__kernel_sinf+0xd8>)
 80aaede:	f000 ff95 	bl	80abe0c <__aeabi_fsub>
 80aaee2:	4629      	mov	r1, r5
 80aaee4:	f001 f89c 	bl	80ac020 <__aeabi_fmul>
 80aaee8:	4925      	ldr	r1, [pc, #148]	; (80aaf80 <__kernel_sinf+0xdc>)
 80aaeea:	f000 ff91 	bl	80abe10 <__addsf3>
 80aaeee:	4629      	mov	r1, r5
 80aaef0:	f001 f896 	bl	80ac020 <__aeabi_fmul>
 80aaef4:	4923      	ldr	r1, [pc, #140]	; (80aaf84 <__kernel_sinf+0xe0>)
 80aaef6:	f000 ff89 	bl	80abe0c <__aeabi_fsub>
 80aaefa:	4629      	mov	r1, r5
 80aaefc:	f001 f890 	bl	80ac020 <__aeabi_fmul>
 80aaf00:	4921      	ldr	r1, [pc, #132]	; (80aaf88 <__kernel_sinf+0xe4>)
 80aaf02:	f000 ff85 	bl	80abe10 <__addsf3>
 80aaf06:	4607      	mov	r7, r0
 80aaf08:	f1b8 0f00 	cmp.w	r8, #0
 80aaf0c:	d022      	beq.n	80aaf54 <__kernel_sinf+0xb0>
 80aaf0e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80aaf12:	4630      	mov	r0, r6
 80aaf14:	f001 f884 	bl	80ac020 <__aeabi_fmul>
 80aaf18:	4639      	mov	r1, r7
 80aaf1a:	4607      	mov	r7, r0
 80aaf1c:	4648      	mov	r0, r9
 80aaf1e:	f001 f87f 	bl	80ac020 <__aeabi_fmul>
 80aaf22:	4601      	mov	r1, r0
 80aaf24:	4638      	mov	r0, r7
 80aaf26:	f000 ff71 	bl	80abe0c <__aeabi_fsub>
 80aaf2a:	4629      	mov	r1, r5
 80aaf2c:	f001 f878 	bl	80ac020 <__aeabi_fmul>
 80aaf30:	4631      	mov	r1, r6
 80aaf32:	f000 ff6b 	bl	80abe0c <__aeabi_fsub>
 80aaf36:	4915      	ldr	r1, [pc, #84]	; (80aaf8c <__kernel_sinf+0xe8>)
 80aaf38:	4605      	mov	r5, r0
 80aaf3a:	4648      	mov	r0, r9
 80aaf3c:	f001 f870 	bl	80ac020 <__aeabi_fmul>
 80aaf40:	4601      	mov	r1, r0
 80aaf42:	4628      	mov	r0, r5
 80aaf44:	f000 ff64 	bl	80abe10 <__addsf3>
 80aaf48:	4601      	mov	r1, r0
 80aaf4a:	4620      	mov	r0, r4
 80aaf4c:	f000 ff5e 	bl	80abe0c <__aeabi_fsub>
 80aaf50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80aaf54:	4601      	mov	r1, r0
 80aaf56:	4628      	mov	r0, r5
 80aaf58:	f001 f862 	bl	80ac020 <__aeabi_fmul>
 80aaf5c:	490b      	ldr	r1, [pc, #44]	; (80aaf8c <__kernel_sinf+0xe8>)
 80aaf5e:	f000 ff55 	bl	80abe0c <__aeabi_fsub>
 80aaf62:	4649      	mov	r1, r9
 80aaf64:	f001 f85c 	bl	80ac020 <__aeabi_fmul>
 80aaf68:	4621      	mov	r1, r4
 80aaf6a:	f000 ff51 	bl	80abe10 <__addsf3>
 80aaf6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80aaf72:	4620      	mov	r0, r4
 80aaf74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80aaf78:	2f2ec9d3 	.word	0x2f2ec9d3
 80aaf7c:	32d72f34 	.word	0x32d72f34
 80aaf80:	3638ef1b 	.word	0x3638ef1b
 80aaf84:	39500d01 	.word	0x39500d01
 80aaf88:	3c088889 	.word	0x3c088889
 80aaf8c:	3e2aaaab 	.word	0x3e2aaaab

080aaf90 <fabs>:
 80aaf90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80aaf94:	4770      	bx	lr
 80aaf96:	bf00      	nop

080aaf98 <finite>:
 80aaf98:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80aaf9c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80aafa0:	0fc0      	lsrs	r0, r0, #31
 80aafa2:	4770      	bx	lr
 80aafa4:	0000      	movs	r0, r0
	...

080aafa8 <floor>:
 80aafa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80aafaa:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80aafae:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
 80aafb2:	2d13      	cmp	r5, #19
 80aafb4:	460b      	mov	r3, r1
 80aafb6:	460c      	mov	r4, r1
 80aafb8:	4602      	mov	r2, r0
 80aafba:	4606      	mov	r6, r0
 80aafbc:	dc20      	bgt.n	80ab000 <floor+0x58>
 80aafbe:	2d00      	cmp	r5, #0
 80aafc0:	db40      	blt.n	80ab044 <floor+0x9c>
 80aafc2:	4f35      	ldr	r7, [pc, #212]	; (80ab098 <floor+0xf0>)
 80aafc4:	412f      	asrs	r7, r5
 80aafc6:	ea01 0c07 	and.w	ip, r1, r7
 80aafca:	ea5c 0c00 	orrs.w	ip, ip, r0
 80aafce:	d014      	beq.n	80aaffa <floor+0x52>
 80aafd0:	a32f      	add	r3, pc, #188	; (adr r3, 80ab090 <floor+0xe8>)
 80aafd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aafd6:	f000 fa17 	bl	80ab408 <__adddf3>
 80aafda:	2200      	movs	r2, #0
 80aafdc:	2300      	movs	r3, #0
 80aafde:	f000 fe59 	bl	80abc94 <__aeabi_dcmpgt>
 80aafe2:	b140      	cbz	r0, 80aaff6 <floor+0x4e>
 80aafe4:	2c00      	cmp	r4, #0
 80aafe6:	da03      	bge.n	80aaff0 <floor+0x48>
 80aafe8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80aafec:	412b      	asrs	r3, r5
 80aafee:	441c      	add	r4, r3
 80aaff0:	2600      	movs	r6, #0
 80aaff2:	ea24 0407 	bic.w	r4, r4, r7
 80aaff6:	4632      	mov	r2, r6
 80aaff8:	4623      	mov	r3, r4
 80aaffa:	4610      	mov	r0, r2
 80aaffc:	4619      	mov	r1, r3
 80aaffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab000:	2d33      	cmp	r5, #51	; 0x33
 80ab002:	dd07      	ble.n	80ab014 <floor+0x6c>
 80ab004:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80ab008:	d1f7      	bne.n	80aaffa <floor+0x52>
 80ab00a:	f000 f9fd 	bl	80ab408 <__adddf3>
 80ab00e:	4602      	mov	r2, r0
 80ab010:	460b      	mov	r3, r1
 80ab012:	e7f2      	b.n	80aaffa <floor+0x52>
 80ab014:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80ab018:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80ab01c:	fa2c f707 	lsr.w	r7, ip, r7
 80ab020:	4207      	tst	r7, r0
 80ab022:	d0ea      	beq.n	80aaffa <floor+0x52>
 80ab024:	a31a      	add	r3, pc, #104	; (adr r3, 80ab090 <floor+0xe8>)
 80ab026:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab02a:	f000 f9ed 	bl	80ab408 <__adddf3>
 80ab02e:	2200      	movs	r2, #0
 80ab030:	2300      	movs	r3, #0
 80ab032:	f000 fe2f 	bl	80abc94 <__aeabi_dcmpgt>
 80ab036:	2800      	cmp	r0, #0
 80ab038:	d0dd      	beq.n	80aaff6 <floor+0x4e>
 80ab03a:	2c00      	cmp	r4, #0
 80ab03c:	db1b      	blt.n	80ab076 <floor+0xce>
 80ab03e:	ea26 0607 	bic.w	r6, r6, r7
 80ab042:	e7d8      	b.n	80aaff6 <floor+0x4e>
 80ab044:	a312      	add	r3, pc, #72	; (adr r3, 80ab090 <floor+0xe8>)
 80ab046:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab04a:	f000 f9dd 	bl	80ab408 <__adddf3>
 80ab04e:	2200      	movs	r2, #0
 80ab050:	2300      	movs	r3, #0
 80ab052:	f000 fe1f 	bl	80abc94 <__aeabi_dcmpgt>
 80ab056:	2800      	cmp	r0, #0
 80ab058:	d0cd      	beq.n	80aaff6 <floor+0x4e>
 80ab05a:	2c00      	cmp	r4, #0
 80ab05c:	db02      	blt.n	80ab064 <floor+0xbc>
 80ab05e:	2600      	movs	r6, #0
 80ab060:	4634      	mov	r4, r6
 80ab062:	e7c8      	b.n	80aaff6 <floor+0x4e>
 80ab064:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80ab068:	4a0c      	ldr	r2, [pc, #48]	; (80ab09c <floor+0xf4>)
 80ab06a:	431e      	orrs	r6, r3
 80ab06c:	2e00      	cmp	r6, #0
 80ab06e:	bf18      	it	ne
 80ab070:	4614      	movne	r4, r2
 80ab072:	2600      	movs	r6, #0
 80ab074:	e7bf      	b.n	80aaff6 <floor+0x4e>
 80ab076:	2d14      	cmp	r5, #20
 80ab078:	d008      	beq.n	80ab08c <floor+0xe4>
 80ab07a:	2201      	movs	r2, #1
 80ab07c:	f1c5 0334 	rsb	r3, r5, #52	; 0x34
 80ab080:	fa02 f303 	lsl.w	r3, r2, r3
 80ab084:	199e      	adds	r6, r3, r6
 80ab086:	bf28      	it	cs
 80ab088:	18a4      	addcs	r4, r4, r2
 80ab08a:	e7d8      	b.n	80ab03e <floor+0x96>
 80ab08c:	3401      	adds	r4, #1
 80ab08e:	e7d6      	b.n	80ab03e <floor+0x96>
 80ab090:	8800759c 	.word	0x8800759c
 80ab094:	7e37e43c 	.word	0x7e37e43c
 80ab098:	000fffff 	.word	0x000fffff
 80ab09c:	bff00000 	.word	0xbff00000

080ab0a0 <matherr>:
 80ab0a0:	2000      	movs	r0, #0
 80ab0a2:	4770      	bx	lr

080ab0a4 <nan>:
 80ab0a4:	2000      	movs	r0, #0
 80ab0a6:	4901      	ldr	r1, [pc, #4]	; (80ab0ac <nan+0x8>)
 80ab0a8:	4770      	bx	lr
 80ab0aa:	bf00      	nop
 80ab0ac:	7ff80000 	.word	0x7ff80000

080ab0b0 <rint>:
 80ab0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80ab0b2:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80ab0b6:	f2ac 36ff 	subw	r6, ip, #1023	; 0x3ff
 80ab0ba:	2e13      	cmp	r6, #19
 80ab0bc:	4602      	mov	r2, r0
 80ab0be:	460b      	mov	r3, r1
 80ab0c0:	460d      	mov	r5, r1
 80ab0c2:	4607      	mov	r7, r0
 80ab0c4:	b083      	sub	sp, #12
 80ab0c6:	ea4f 74d1 	mov.w	r4, r1, lsr #31
 80ab0ca:	dc2f      	bgt.n	80ab12c <rint+0x7c>
 80ab0cc:	2e00      	cmp	r6, #0
 80ab0ce:	db4c      	blt.n	80ab16a <rint+0xba>
 80ab0d0:	493d      	ldr	r1, [pc, #244]	; (80ab1c8 <rint+0x118>)
 80ab0d2:	4131      	asrs	r1, r6
 80ab0d4:	ea03 0001 	and.w	r0, r3, r1
 80ab0d8:	4310      	orrs	r0, r2
 80ab0da:	d02c      	beq.n	80ab136 <rint+0x86>
 80ab0dc:	ea03 0351 	and.w	r3, r3, r1, lsr #1
 80ab0e0:	ea52 0703 	orrs.w	r7, r2, r3
 80ab0e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80ab0e8:	d00b      	beq.n	80ab102 <rint+0x52>
 80ab0ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80ab0ee:	2e13      	cmp	r6, #19
 80ab0f0:	bf0c      	ite	eq
 80ab0f2:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80ab0f6:	2700      	movne	r7, #0
 80ab0f8:	ea25 0101 	bic.w	r1, r5, r1
 80ab0fc:	fa43 f506 	asr.w	r5, r3, r6
 80ab100:	430d      	orrs	r5, r1
 80ab102:	4932      	ldr	r1, [pc, #200]	; (80ab1cc <rint+0x11c>)
 80ab104:	462b      	mov	r3, r5
 80ab106:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80ab10a:	e9d4 4500 	ldrd	r4, r5, [r4]
 80ab10e:	463a      	mov	r2, r7
 80ab110:	4620      	mov	r0, r4
 80ab112:	4629      	mov	r1, r5
 80ab114:	f000 f978 	bl	80ab408 <__adddf3>
 80ab118:	e9cd 0100 	strd	r0, r1, [sp]
 80ab11c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80ab120:	4622      	mov	r2, r4
 80ab122:	462b      	mov	r3, r5
 80ab124:	f000 f96e 	bl	80ab404 <__aeabi_dsub>
 80ab128:	b003      	add	sp, #12
 80ab12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80ab12c:	2e33      	cmp	r6, #51	; 0x33
 80ab12e:	dd06      	ble.n	80ab13e <rint+0x8e>
 80ab130:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80ab134:	d045      	beq.n	80ab1c2 <rint+0x112>
 80ab136:	4610      	mov	r0, r2
 80ab138:	4619      	mov	r1, r3
 80ab13a:	b003      	add	sp, #12
 80ab13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80ab13e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80ab142:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80ab146:	fa21 f10c 	lsr.w	r1, r1, ip
 80ab14a:	4208      	tst	r0, r1
 80ab14c:	d0f3      	beq.n	80ab136 <rint+0x86>
 80ab14e:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80ab152:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80ab156:	d0d4      	beq.n	80ab102 <rint+0x52>
 80ab158:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80ab15c:	ea20 0703 	bic.w	r7, r0, r3
 80ab160:	fa42 fc0c 	asr.w	ip, r2, ip
 80ab164:	ea47 070c 	orr.w	r7, r7, ip
 80ab168:	e7cb      	b.n	80ab102 <rint+0x52>
 80ab16a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80ab16e:	4301      	orrs	r1, r0
 80ab170:	4619      	mov	r1, r3
 80ab172:	d0e2      	beq.n	80ab13a <rint+0x8a>
 80ab174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80ab178:	431f      	orrs	r7, r3
 80ab17a:	427b      	negs	r3, r7
 80ab17c:	433b      	orrs	r3, r7
 80ab17e:	0c6d      	lsrs	r5, r5, #17
 80ab180:	0b1b      	lsrs	r3, r3, #12
 80ab182:	046d      	lsls	r5, r5, #17
 80ab184:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80ab188:	ea43 0105 	orr.w	r1, r3, r5
 80ab18c:	460b      	mov	r3, r1
 80ab18e:	490f      	ldr	r1, [pc, #60]	; (80ab1cc <rint+0x11c>)
 80ab190:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80ab194:	e9d1 6700 	ldrd	r6, r7, [r1]
 80ab198:	4630      	mov	r0, r6
 80ab19a:	4639      	mov	r1, r7
 80ab19c:	f000 f934 	bl	80ab408 <__adddf3>
 80ab1a0:	e9cd 0100 	strd	r0, r1, [sp]
 80ab1a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80ab1a8:	4632      	mov	r2, r6
 80ab1aa:	463b      	mov	r3, r7
 80ab1ac:	f000 f92a 	bl	80ab404 <__aeabi_dsub>
 80ab1b0:	4602      	mov	r2, r0
 80ab1b2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80ab1b6:	ea41 73c4 	orr.w	r3, r1, r4, lsl #31
 80ab1ba:	4610      	mov	r0, r2
 80ab1bc:	4619      	mov	r1, r3
 80ab1be:	b003      	add	sp, #12
 80ab1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80ab1c2:	f000 f921 	bl	80ab408 <__adddf3>
 80ab1c6:	e7b8      	b.n	80ab13a <rint+0x8a>
 80ab1c8:	000fffff 	.word	0x000fffff
 80ab1cc:	080adec0 	.word	0x080adec0

080ab1d0 <scalbn>:
 80ab1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80ab1d2:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80ab1d6:	4604      	mov	r4, r0
 80ab1d8:	460d      	mov	r5, r1
 80ab1da:	460e      	mov	r6, r1
 80ab1dc:	4617      	mov	r7, r2
 80ab1de:	bb73      	cbnz	r3, 80ab23e <scalbn+0x6e>
 80ab1e0:	4603      	mov	r3, r0
 80ab1e2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80ab1e6:	4333      	orrs	r3, r6
 80ab1e8:	d028      	beq.n	80ab23c <scalbn+0x6c>
 80ab1ea:	4b31      	ldr	r3, [pc, #196]	; (80ab2b0 <scalbn+0xe0>)
 80ab1ec:	2200      	movs	r2, #0
 80ab1ee:	f000 fac1 	bl	80ab774 <__aeabi_dmul>
 80ab1f2:	4b30      	ldr	r3, [pc, #192]	; (80ab2b4 <scalbn+0xe4>)
 80ab1f4:	4604      	mov	r4, r0
 80ab1f6:	429f      	cmp	r7, r3
 80ab1f8:	460d      	mov	r5, r1
 80ab1fa:	db1a      	blt.n	80ab232 <scalbn+0x62>
 80ab1fc:	460e      	mov	r6, r1
 80ab1fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80ab202:	3b36      	subs	r3, #54	; 0x36
 80ab204:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80ab208:	443b      	add	r3, r7
 80ab20a:	4293      	cmp	r3, r2
 80ab20c:	dc20      	bgt.n	80ab250 <scalbn+0x80>
 80ab20e:	2b00      	cmp	r3, #0
 80ab210:	dc3c      	bgt.n	80ab28c <scalbn+0xbc>
 80ab212:	f113 0f35 	cmn.w	r3, #53	; 0x35
 80ab216:	da2c      	bge.n	80ab272 <scalbn+0xa2>
 80ab218:	f24c 3350 	movw	r3, #50000	; 0xc350
 80ab21c:	429f      	cmp	r7, r3
 80ab21e:	dc17      	bgt.n	80ab250 <scalbn+0x80>
 80ab220:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80ab224:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
 80ab228:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80ab22c:	4822      	ldr	r0, [pc, #136]	; (80ab2b8 <scalbn+0xe8>)
 80ab22e:	f041 011f 	orr.w	r1, r1, #31
 80ab232:	a31b      	add	r3, pc, #108	; (adr r3, 80ab2a0 <scalbn+0xd0>)
 80ab234:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab238:	f000 fa9c 	bl	80ab774 <__aeabi_dmul>
 80ab23c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab23e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80ab242:	4293      	cmp	r3, r2
 80ab244:	d1de      	bne.n	80ab204 <scalbn+0x34>
 80ab246:	4602      	mov	r2, r0
 80ab248:	460b      	mov	r3, r1
 80ab24a:	f000 f8dd 	bl	80ab408 <__adddf3>
 80ab24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab250:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80ab254:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80ab258:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80ab25c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80ab260:	a311      	add	r3, pc, #68	; (adr r3, 80ab2a8 <scalbn+0xd8>)
 80ab262:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab266:	4815      	ldr	r0, [pc, #84]	; (80ab2bc <scalbn+0xec>)
 80ab268:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80ab26c:	f000 fa82 	bl	80ab774 <__aeabi_dmul>
 80ab270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab272:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 80ab276:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 80ab27a:	3336      	adds	r3, #54	; 0x36
 80ab27c:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
 80ab280:	4620      	mov	r0, r4
 80ab282:	2200      	movs	r2, #0
 80ab284:	4b0e      	ldr	r3, [pc, #56]	; (80ab2c0 <scalbn+0xf0>)
 80ab286:	f000 fa75 	bl	80ab774 <__aeabi_dmul>
 80ab28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab28c:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 80ab290:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 80ab294:	4620      	mov	r0, r4
 80ab296:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
 80ab29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab29c:	f3af 8000 	nop.w
 80ab2a0:	c2f8f359 	.word	0xc2f8f359
 80ab2a4:	01a56e1f 	.word	0x01a56e1f
 80ab2a8:	8800759c 	.word	0x8800759c
 80ab2ac:	7e37e43c 	.word	0x7e37e43c
 80ab2b0:	43500000 	.word	0x43500000
 80ab2b4:	ffff3cb0 	.word	0xffff3cb0
 80ab2b8:	c2f8f359 	.word	0xc2f8f359
 80ab2bc:	8800759c 	.word	0x8800759c
 80ab2c0:	3c900000 	.word	0x3c900000

080ab2c4 <fabsf>:
 80ab2c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80ab2c8:	4770      	bx	lr
 80ab2ca:	bf00      	nop

080ab2cc <floorf>:
 80ab2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80ab2ce:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80ab2d2:	3d7f      	subs	r5, #127	; 0x7f
 80ab2d4:	2d16      	cmp	r5, #22
 80ab2d6:	4604      	mov	r4, r0
 80ab2d8:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 80ab2dc:	dc17      	bgt.n	80ab30e <floorf+0x42>
 80ab2de:	2d00      	cmp	r5, #0
 80ab2e0:	4606      	mov	r6, r0
 80ab2e2:	db1b      	blt.n	80ab31c <floorf+0x50>
 80ab2e4:	4f16      	ldr	r7, [pc, #88]	; (80ab340 <floorf+0x74>)
 80ab2e6:	412f      	asrs	r7, r5
 80ab2e8:	4238      	tst	r0, r7
 80ab2ea:	d01e      	beq.n	80ab32a <floorf+0x5e>
 80ab2ec:	4915      	ldr	r1, [pc, #84]	; (80ab344 <floorf+0x78>)
 80ab2ee:	f000 fd8f 	bl	80abe10 <__addsf3>
 80ab2f2:	2100      	movs	r1, #0
 80ab2f4:	f001 f850 	bl	80ac398 <__aeabi_fcmpgt>
 80ab2f8:	b1b8      	cbz	r0, 80ab32a <floorf+0x5e>
 80ab2fa:	2c00      	cmp	r4, #0
 80ab2fc:	da04      	bge.n	80ab308 <floorf+0x3c>
 80ab2fe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80ab302:	fa43 f505 	asr.w	r5, r3, r5
 80ab306:	442e      	add	r6, r5
 80ab308:	ea26 0007 	bic.w	r0, r6, r7
 80ab30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab30e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80ab312:	d30a      	bcc.n	80ab32a <floorf+0x5e>
 80ab314:	4601      	mov	r1, r0
 80ab316:	f000 fd7b 	bl	80abe10 <__addsf3>
 80ab31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab31c:	4909      	ldr	r1, [pc, #36]	; (80ab344 <floorf+0x78>)
 80ab31e:	f000 fd77 	bl	80abe10 <__addsf3>
 80ab322:	2100      	movs	r1, #0
 80ab324:	f001 f838 	bl	80ac398 <__aeabi_fcmpgt>
 80ab328:	b908      	cbnz	r0, 80ab32e <floorf+0x62>
 80ab32a:	4620      	mov	r0, r4
 80ab32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab32e:	2c00      	cmp	r4, #0
 80ab330:	db01      	blt.n	80ab336 <floorf+0x6a>
 80ab332:	2000      	movs	r0, #0
 80ab334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab336:	2f00      	cmp	r7, #0
 80ab338:	d0f7      	beq.n	80ab32a <floorf+0x5e>
 80ab33a:	4803      	ldr	r0, [pc, #12]	; (80ab348 <floorf+0x7c>)
 80ab33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab33e:	bf00      	nop
 80ab340:	007fffff 	.word	0x007fffff
 80ab344:	7149f2ca 	.word	0x7149f2ca
 80ab348:	bf800000 	.word	0xbf800000

080ab34c <scalbnf>:
 80ab34c:	b538      	push	{r3, r4, r5, lr}
 80ab34e:	f030 4400 	bics.w	r4, r0, #2147483648	; 0x80000000
 80ab352:	4603      	mov	r3, r0
 80ab354:	d01d      	beq.n	80ab392 <scalbnf+0x46>
 80ab356:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80ab35a:	d21b      	bcs.n	80ab394 <scalbnf+0x48>
 80ab35c:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80ab360:	4602      	mov	r2, r0
 80ab362:	460d      	mov	r5, r1
 80ab364:	d11a      	bne.n	80ab39c <scalbnf+0x50>
 80ab366:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80ab36a:	f000 fe59 	bl	80ac020 <__aeabi_fmul>
 80ab36e:	4a20      	ldr	r2, [pc, #128]	; (80ab3f0 <scalbnf+0xa4>)
 80ab370:	4603      	mov	r3, r0
 80ab372:	4295      	cmp	r5, r2
 80ab374:	db2c      	blt.n	80ab3d0 <scalbnf+0x84>
 80ab376:	f3c0 54c7 	ubfx	r4, r0, #23, #8
 80ab37a:	4602      	mov	r2, r0
 80ab37c:	f1a4 0019 	sub.w	r0, r4, #25
 80ab380:	1944      	adds	r4, r0, r5
 80ab382:	2cfe      	cmp	r4, #254	; 0xfe
 80ab384:	dd0e      	ble.n	80ab3a4 <scalbnf+0x58>
 80ab386:	4618      	mov	r0, r3
 80ab388:	491a      	ldr	r1, [pc, #104]	; (80ab3f4 <scalbnf+0xa8>)
 80ab38a:	f361 001e 	bfi	r0, r1, #0, #31
 80ab38e:	f000 fe47 	bl	80ac020 <__aeabi_fmul>
 80ab392:	bd38      	pop	{r3, r4, r5, pc}
 80ab394:	4601      	mov	r1, r0
 80ab396:	f000 fd3b 	bl	80abe10 <__addsf3>
 80ab39a:	bd38      	pop	{r3, r4, r5, pc}
 80ab39c:	0de0      	lsrs	r0, r4, #23
 80ab39e:	1944      	adds	r4, r0, r5
 80ab3a0:	2cfe      	cmp	r4, #254	; 0xfe
 80ab3a2:	dcf0      	bgt.n	80ab386 <scalbnf+0x3a>
 80ab3a4:	2c00      	cmp	r4, #0
 80ab3a6:	dc0e      	bgt.n	80ab3c6 <scalbnf+0x7a>
 80ab3a8:	f114 0f16 	cmn.w	r4, #22
 80ab3ac:	da14      	bge.n	80ab3d8 <scalbnf+0x8c>
 80ab3ae:	f24c 3250 	movw	r2, #50000	; 0xc350
 80ab3b2:	4618      	mov	r0, r3
 80ab3b4:	4295      	cmp	r5, r2
 80ab3b6:	bfcc      	ite	gt
 80ab3b8:	490e      	ldrgt	r1, [pc, #56]	; (80ab3f4 <scalbnf+0xa8>)
 80ab3ba:	490f      	ldrle	r1, [pc, #60]	; (80ab3f8 <scalbnf+0xac>)
 80ab3bc:	f361 001e 	bfi	r0, r1, #0, #31
 80ab3c0:	f000 fe2e 	bl	80ac020 <__aeabi_fmul>
 80ab3c4:	bd38      	pop	{r3, r4, r5, pc}
 80ab3c6:	f022 40ff 	bic.w	r0, r2, #2139095040	; 0x7f800000
 80ab3ca:	ea40 50c4 	orr.w	r0, r0, r4, lsl #23
 80ab3ce:	bd38      	pop	{r3, r4, r5, pc}
 80ab3d0:	4909      	ldr	r1, [pc, #36]	; (80ab3f8 <scalbnf+0xac>)
 80ab3d2:	f000 fe25 	bl	80ac020 <__aeabi_fmul>
 80ab3d6:	bd38      	pop	{r3, r4, r5, pc}
 80ab3d8:	f104 0019 	add.w	r0, r4, #25
 80ab3dc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80ab3e0:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80ab3e4:	ea42 50c0 	orr.w	r0, r2, r0, lsl #23
 80ab3e8:	f000 fe1a 	bl	80ac020 <__aeabi_fmul>
 80ab3ec:	bd38      	pop	{r3, r4, r5, pc}
 80ab3ee:	bf00      	nop
 80ab3f0:	ffff3cb0 	.word	0xffff3cb0
 80ab3f4:	7149f2ca 	.word	0x7149f2ca
 80ab3f8:	0da24260 	.word	0x0da24260

080ab3fc <__aeabi_drsub>:
 80ab3fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80ab400:	e002      	b.n	80ab408 <__adddf3>
 80ab402:	bf00      	nop

080ab404 <__aeabi_dsub>:
 80ab404:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080ab408 <__adddf3>:
 80ab408:	b530      	push	{r4, r5, lr}
 80ab40a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80ab40e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80ab412:	ea94 0f05 	teq	r4, r5
 80ab416:	bf08      	it	eq
 80ab418:	ea90 0f02 	teqeq	r0, r2
 80ab41c:	bf1f      	itttt	ne
 80ab41e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80ab422:	ea55 0c02 	orrsne.w	ip, r5, r2
 80ab426:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80ab42a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80ab42e:	f000 80e2 	beq.w	80ab5f6 <__adddf3+0x1ee>
 80ab432:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80ab436:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80ab43a:	bfb8      	it	lt
 80ab43c:	426d      	neglt	r5, r5
 80ab43e:	dd0c      	ble.n	80ab45a <__adddf3+0x52>
 80ab440:	442c      	add	r4, r5
 80ab442:	ea80 0202 	eor.w	r2, r0, r2
 80ab446:	ea81 0303 	eor.w	r3, r1, r3
 80ab44a:	ea82 0000 	eor.w	r0, r2, r0
 80ab44e:	ea83 0101 	eor.w	r1, r3, r1
 80ab452:	ea80 0202 	eor.w	r2, r0, r2
 80ab456:	ea81 0303 	eor.w	r3, r1, r3
 80ab45a:	2d36      	cmp	r5, #54	; 0x36
 80ab45c:	bf88      	it	hi
 80ab45e:	bd30      	pophi	{r4, r5, pc}
 80ab460:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80ab464:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80ab468:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80ab46c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80ab470:	d002      	beq.n	80ab478 <__adddf3+0x70>
 80ab472:	4240      	negs	r0, r0
 80ab474:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80ab478:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80ab47c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80ab480:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80ab484:	d002      	beq.n	80ab48c <__adddf3+0x84>
 80ab486:	4252      	negs	r2, r2
 80ab488:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80ab48c:	ea94 0f05 	teq	r4, r5
 80ab490:	f000 80a7 	beq.w	80ab5e2 <__adddf3+0x1da>
 80ab494:	f1a4 0401 	sub.w	r4, r4, #1
 80ab498:	f1d5 0e20 	rsbs	lr, r5, #32
 80ab49c:	db0d      	blt.n	80ab4ba <__adddf3+0xb2>
 80ab49e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80ab4a2:	fa22 f205 	lsr.w	r2, r2, r5
 80ab4a6:	1880      	adds	r0, r0, r2
 80ab4a8:	f141 0100 	adc.w	r1, r1, #0
 80ab4ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80ab4b0:	1880      	adds	r0, r0, r2
 80ab4b2:	fa43 f305 	asr.w	r3, r3, r5
 80ab4b6:	4159      	adcs	r1, r3
 80ab4b8:	e00e      	b.n	80ab4d8 <__adddf3+0xd0>
 80ab4ba:	f1a5 0520 	sub.w	r5, r5, #32
 80ab4be:	f10e 0e20 	add.w	lr, lr, #32
 80ab4c2:	2a01      	cmp	r2, #1
 80ab4c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80ab4c8:	bf28      	it	cs
 80ab4ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80ab4ce:	fa43 f305 	asr.w	r3, r3, r5
 80ab4d2:	18c0      	adds	r0, r0, r3
 80ab4d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80ab4d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80ab4dc:	d507      	bpl.n	80ab4ee <__adddf3+0xe6>
 80ab4de:	f04f 0e00 	mov.w	lr, #0
 80ab4e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80ab4e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80ab4ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80ab4ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80ab4f2:	d31b      	bcc.n	80ab52c <__adddf3+0x124>
 80ab4f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80ab4f8:	d30c      	bcc.n	80ab514 <__adddf3+0x10c>
 80ab4fa:	0849      	lsrs	r1, r1, #1
 80ab4fc:	ea5f 0030 	movs.w	r0, r0, rrx
 80ab500:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80ab504:	f104 0401 	add.w	r4, r4, #1
 80ab508:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80ab50c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80ab510:	f080 809a 	bcs.w	80ab648 <__adddf3+0x240>
 80ab514:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80ab518:	bf08      	it	eq
 80ab51a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80ab51e:	f150 0000 	adcs.w	r0, r0, #0
 80ab522:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80ab526:	ea41 0105 	orr.w	r1, r1, r5
 80ab52a:	bd30      	pop	{r4, r5, pc}
 80ab52c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80ab530:	4140      	adcs	r0, r0
 80ab532:	eb41 0101 	adc.w	r1, r1, r1
 80ab536:	3c01      	subs	r4, #1
 80ab538:	bf28      	it	cs
 80ab53a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80ab53e:	d2e9      	bcs.n	80ab514 <__adddf3+0x10c>
 80ab540:	f091 0f00 	teq	r1, #0
 80ab544:	bf04      	itt	eq
 80ab546:	4601      	moveq	r1, r0
 80ab548:	2000      	moveq	r0, #0
 80ab54a:	fab1 f381 	clz	r3, r1
 80ab54e:	bf08      	it	eq
 80ab550:	3320      	addeq	r3, #32
 80ab552:	f1a3 030b 	sub.w	r3, r3, #11
 80ab556:	f1b3 0220 	subs.w	r2, r3, #32
 80ab55a:	da0c      	bge.n	80ab576 <__adddf3+0x16e>
 80ab55c:	320c      	adds	r2, #12
 80ab55e:	dd08      	ble.n	80ab572 <__adddf3+0x16a>
 80ab560:	f102 0c14 	add.w	ip, r2, #20
 80ab564:	f1c2 020c 	rsb	r2, r2, #12
 80ab568:	fa01 f00c 	lsl.w	r0, r1, ip
 80ab56c:	fa21 f102 	lsr.w	r1, r1, r2
 80ab570:	e00c      	b.n	80ab58c <__adddf3+0x184>
 80ab572:	f102 0214 	add.w	r2, r2, #20
 80ab576:	bfd8      	it	le
 80ab578:	f1c2 0c20 	rsble	ip, r2, #32
 80ab57c:	fa01 f102 	lsl.w	r1, r1, r2
 80ab580:	fa20 fc0c 	lsr.w	ip, r0, ip
 80ab584:	bfdc      	itt	le
 80ab586:	ea41 010c 	orrle.w	r1, r1, ip
 80ab58a:	4090      	lslle	r0, r2
 80ab58c:	1ae4      	subs	r4, r4, r3
 80ab58e:	bfa2      	ittt	ge
 80ab590:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80ab594:	4329      	orrge	r1, r5
 80ab596:	bd30      	popge	{r4, r5, pc}
 80ab598:	ea6f 0404 	mvn.w	r4, r4
 80ab59c:	3c1f      	subs	r4, #31
 80ab59e:	da1c      	bge.n	80ab5da <__adddf3+0x1d2>
 80ab5a0:	340c      	adds	r4, #12
 80ab5a2:	dc0e      	bgt.n	80ab5c2 <__adddf3+0x1ba>
 80ab5a4:	f104 0414 	add.w	r4, r4, #20
 80ab5a8:	f1c4 0220 	rsb	r2, r4, #32
 80ab5ac:	fa20 f004 	lsr.w	r0, r0, r4
 80ab5b0:	fa01 f302 	lsl.w	r3, r1, r2
 80ab5b4:	ea40 0003 	orr.w	r0, r0, r3
 80ab5b8:	fa21 f304 	lsr.w	r3, r1, r4
 80ab5bc:	ea45 0103 	orr.w	r1, r5, r3
 80ab5c0:	bd30      	pop	{r4, r5, pc}
 80ab5c2:	f1c4 040c 	rsb	r4, r4, #12
 80ab5c6:	f1c4 0220 	rsb	r2, r4, #32
 80ab5ca:	fa20 f002 	lsr.w	r0, r0, r2
 80ab5ce:	fa01 f304 	lsl.w	r3, r1, r4
 80ab5d2:	ea40 0003 	orr.w	r0, r0, r3
 80ab5d6:	4629      	mov	r1, r5
 80ab5d8:	bd30      	pop	{r4, r5, pc}
 80ab5da:	fa21 f004 	lsr.w	r0, r1, r4
 80ab5de:	4629      	mov	r1, r5
 80ab5e0:	bd30      	pop	{r4, r5, pc}
 80ab5e2:	f094 0f00 	teq	r4, #0
 80ab5e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80ab5ea:	bf06      	itte	eq
 80ab5ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80ab5f0:	3401      	addeq	r4, #1
 80ab5f2:	3d01      	subne	r5, #1
 80ab5f4:	e74e      	b.n	80ab494 <__adddf3+0x8c>
 80ab5f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80ab5fa:	bf18      	it	ne
 80ab5fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80ab600:	d029      	beq.n	80ab656 <__adddf3+0x24e>
 80ab602:	ea94 0f05 	teq	r4, r5
 80ab606:	bf08      	it	eq
 80ab608:	ea90 0f02 	teqeq	r0, r2
 80ab60c:	d005      	beq.n	80ab61a <__adddf3+0x212>
 80ab60e:	ea54 0c00 	orrs.w	ip, r4, r0
 80ab612:	bf04      	itt	eq
 80ab614:	4619      	moveq	r1, r3
 80ab616:	4610      	moveq	r0, r2
 80ab618:	bd30      	pop	{r4, r5, pc}
 80ab61a:	ea91 0f03 	teq	r1, r3
 80ab61e:	bf1e      	ittt	ne
 80ab620:	2100      	movne	r1, #0
 80ab622:	2000      	movne	r0, #0
 80ab624:	bd30      	popne	{r4, r5, pc}
 80ab626:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80ab62a:	d105      	bne.n	80ab638 <__adddf3+0x230>
 80ab62c:	0040      	lsls	r0, r0, #1
 80ab62e:	4149      	adcs	r1, r1
 80ab630:	bf28      	it	cs
 80ab632:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80ab636:	bd30      	pop	{r4, r5, pc}
 80ab638:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80ab63c:	bf3c      	itt	cc
 80ab63e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80ab642:	bd30      	popcc	{r4, r5, pc}
 80ab644:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80ab648:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80ab64c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80ab650:	f04f 0000 	mov.w	r0, #0
 80ab654:	bd30      	pop	{r4, r5, pc}
 80ab656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80ab65a:	bf1a      	itte	ne
 80ab65c:	4619      	movne	r1, r3
 80ab65e:	4610      	movne	r0, r2
 80ab660:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80ab664:	bf1c      	itt	ne
 80ab666:	460b      	movne	r3, r1
 80ab668:	4602      	movne	r2, r0
 80ab66a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80ab66e:	bf06      	itte	eq
 80ab670:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80ab674:	ea91 0f03 	teqeq	r1, r3
 80ab678:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80ab67c:	bd30      	pop	{r4, r5, pc}
 80ab67e:	bf00      	nop

080ab680 <__aeabi_ui2d>:
 80ab680:	f090 0f00 	teq	r0, #0
 80ab684:	bf04      	itt	eq
 80ab686:	2100      	moveq	r1, #0
 80ab688:	4770      	bxeq	lr
 80ab68a:	b530      	push	{r4, r5, lr}
 80ab68c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80ab690:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80ab694:	f04f 0500 	mov.w	r5, #0
 80ab698:	f04f 0100 	mov.w	r1, #0
 80ab69c:	e750      	b.n	80ab540 <__adddf3+0x138>
 80ab69e:	bf00      	nop

080ab6a0 <__aeabi_i2d>:
 80ab6a0:	f090 0f00 	teq	r0, #0
 80ab6a4:	bf04      	itt	eq
 80ab6a6:	2100      	moveq	r1, #0
 80ab6a8:	4770      	bxeq	lr
 80ab6aa:	b530      	push	{r4, r5, lr}
 80ab6ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80ab6b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80ab6b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80ab6b8:	bf48      	it	mi
 80ab6ba:	4240      	negmi	r0, r0
 80ab6bc:	f04f 0100 	mov.w	r1, #0
 80ab6c0:	e73e      	b.n	80ab540 <__adddf3+0x138>
 80ab6c2:	bf00      	nop

080ab6c4 <__aeabi_f2d>:
 80ab6c4:	0042      	lsls	r2, r0, #1
 80ab6c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80ab6ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80ab6ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80ab6d2:	bf1f      	itttt	ne
 80ab6d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80ab6d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80ab6dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80ab6e0:	4770      	bxne	lr
 80ab6e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80ab6e6:	bf08      	it	eq
 80ab6e8:	4770      	bxeq	lr
 80ab6ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80ab6ee:	bf04      	itt	eq
 80ab6f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80ab6f4:	4770      	bxeq	lr
 80ab6f6:	b530      	push	{r4, r5, lr}
 80ab6f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80ab6fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80ab700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80ab704:	e71c      	b.n	80ab540 <__adddf3+0x138>
 80ab706:	bf00      	nop

080ab708 <__aeabi_ul2d>:
 80ab708:	ea50 0201 	orrs.w	r2, r0, r1
 80ab70c:	bf08      	it	eq
 80ab70e:	4770      	bxeq	lr
 80ab710:	b530      	push	{r4, r5, lr}
 80ab712:	f04f 0500 	mov.w	r5, #0
 80ab716:	e00a      	b.n	80ab72e <__aeabi_l2d+0x16>

080ab718 <__aeabi_l2d>:
 80ab718:	ea50 0201 	orrs.w	r2, r0, r1
 80ab71c:	bf08      	it	eq
 80ab71e:	4770      	bxeq	lr
 80ab720:	b530      	push	{r4, r5, lr}
 80ab722:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80ab726:	d502      	bpl.n	80ab72e <__aeabi_l2d+0x16>
 80ab728:	4240      	negs	r0, r0
 80ab72a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80ab72e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80ab732:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80ab736:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80ab73a:	f43f aed8 	beq.w	80ab4ee <__adddf3+0xe6>
 80ab73e:	f04f 0203 	mov.w	r2, #3
 80ab742:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80ab746:	bf18      	it	ne
 80ab748:	3203      	addne	r2, #3
 80ab74a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80ab74e:	bf18      	it	ne
 80ab750:	3203      	addne	r2, #3
 80ab752:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80ab756:	f1c2 0320 	rsb	r3, r2, #32
 80ab75a:	fa00 fc03 	lsl.w	ip, r0, r3
 80ab75e:	fa20 f002 	lsr.w	r0, r0, r2
 80ab762:	fa01 fe03 	lsl.w	lr, r1, r3
 80ab766:	ea40 000e 	orr.w	r0, r0, lr
 80ab76a:	fa21 f102 	lsr.w	r1, r1, r2
 80ab76e:	4414      	add	r4, r2
 80ab770:	e6bd      	b.n	80ab4ee <__adddf3+0xe6>
 80ab772:	bf00      	nop

080ab774 <__aeabi_dmul>:
 80ab774:	b570      	push	{r4, r5, r6, lr}
 80ab776:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80ab77a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80ab77e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80ab782:	bf1d      	ittte	ne
 80ab784:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80ab788:	ea94 0f0c 	teqne	r4, ip
 80ab78c:	ea95 0f0c 	teqne	r5, ip
 80ab790:	f000 f8de 	bleq	80ab950 <__aeabi_dmul+0x1dc>
 80ab794:	442c      	add	r4, r5
 80ab796:	ea81 0603 	eor.w	r6, r1, r3
 80ab79a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80ab79e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80ab7a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80ab7a6:	bf18      	it	ne
 80ab7a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80ab7ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80ab7b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80ab7b4:	d038      	beq.n	80ab828 <__aeabi_dmul+0xb4>
 80ab7b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80ab7ba:	f04f 0500 	mov.w	r5, #0
 80ab7be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80ab7c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80ab7c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80ab7ca:	f04f 0600 	mov.w	r6, #0
 80ab7ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80ab7d2:	f09c 0f00 	teq	ip, #0
 80ab7d6:	bf18      	it	ne
 80ab7d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80ab7dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80ab7e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80ab7e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80ab7e8:	d204      	bcs.n	80ab7f4 <__aeabi_dmul+0x80>
 80ab7ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80ab7ee:	416d      	adcs	r5, r5
 80ab7f0:	eb46 0606 	adc.w	r6, r6, r6
 80ab7f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80ab7f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80ab7fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80ab800:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80ab804:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80ab808:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80ab80c:	bf88      	it	hi
 80ab80e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80ab812:	d81e      	bhi.n	80ab852 <__aeabi_dmul+0xde>
 80ab814:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80ab818:	bf08      	it	eq
 80ab81a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80ab81e:	f150 0000 	adcs.w	r0, r0, #0
 80ab822:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80ab826:	bd70      	pop	{r4, r5, r6, pc}
 80ab828:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80ab82c:	ea46 0101 	orr.w	r1, r6, r1
 80ab830:	ea40 0002 	orr.w	r0, r0, r2
 80ab834:	ea81 0103 	eor.w	r1, r1, r3
 80ab838:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80ab83c:	bfc2      	ittt	gt
 80ab83e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80ab842:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80ab846:	bd70      	popgt	{r4, r5, r6, pc}
 80ab848:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80ab84c:	f04f 0e00 	mov.w	lr, #0
 80ab850:	3c01      	subs	r4, #1
 80ab852:	f300 80ab 	bgt.w	80ab9ac <__aeabi_dmul+0x238>
 80ab856:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80ab85a:	bfde      	ittt	le
 80ab85c:	2000      	movle	r0, #0
 80ab85e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80ab862:	bd70      	pople	{r4, r5, r6, pc}
 80ab864:	f1c4 0400 	rsb	r4, r4, #0
 80ab868:	3c20      	subs	r4, #32
 80ab86a:	da35      	bge.n	80ab8d8 <__aeabi_dmul+0x164>
 80ab86c:	340c      	adds	r4, #12
 80ab86e:	dc1b      	bgt.n	80ab8a8 <__aeabi_dmul+0x134>
 80ab870:	f104 0414 	add.w	r4, r4, #20
 80ab874:	f1c4 0520 	rsb	r5, r4, #32
 80ab878:	fa00 f305 	lsl.w	r3, r0, r5
 80ab87c:	fa20 f004 	lsr.w	r0, r0, r4
 80ab880:	fa01 f205 	lsl.w	r2, r1, r5
 80ab884:	ea40 0002 	orr.w	r0, r0, r2
 80ab888:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80ab88c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80ab890:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80ab894:	fa21 f604 	lsr.w	r6, r1, r4
 80ab898:	eb42 0106 	adc.w	r1, r2, r6
 80ab89c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80ab8a0:	bf08      	it	eq
 80ab8a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80ab8a6:	bd70      	pop	{r4, r5, r6, pc}
 80ab8a8:	f1c4 040c 	rsb	r4, r4, #12
 80ab8ac:	f1c4 0520 	rsb	r5, r4, #32
 80ab8b0:	fa00 f304 	lsl.w	r3, r0, r4
 80ab8b4:	fa20 f005 	lsr.w	r0, r0, r5
 80ab8b8:	fa01 f204 	lsl.w	r2, r1, r4
 80ab8bc:	ea40 0002 	orr.w	r0, r0, r2
 80ab8c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80ab8c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80ab8c8:	f141 0100 	adc.w	r1, r1, #0
 80ab8cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80ab8d0:	bf08      	it	eq
 80ab8d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80ab8d6:	bd70      	pop	{r4, r5, r6, pc}
 80ab8d8:	f1c4 0520 	rsb	r5, r4, #32
 80ab8dc:	fa00 f205 	lsl.w	r2, r0, r5
 80ab8e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80ab8e4:	fa20 f304 	lsr.w	r3, r0, r4
 80ab8e8:	fa01 f205 	lsl.w	r2, r1, r5
 80ab8ec:	ea43 0302 	orr.w	r3, r3, r2
 80ab8f0:	fa21 f004 	lsr.w	r0, r1, r4
 80ab8f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80ab8f8:	fa21 f204 	lsr.w	r2, r1, r4
 80ab8fc:	ea20 0002 	bic.w	r0, r0, r2
 80ab900:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80ab904:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80ab908:	bf08      	it	eq
 80ab90a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80ab90e:	bd70      	pop	{r4, r5, r6, pc}
 80ab910:	f094 0f00 	teq	r4, #0
 80ab914:	d10f      	bne.n	80ab936 <__aeabi_dmul+0x1c2>
 80ab916:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80ab91a:	0040      	lsls	r0, r0, #1
 80ab91c:	eb41 0101 	adc.w	r1, r1, r1
 80ab920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80ab924:	bf08      	it	eq
 80ab926:	3c01      	subeq	r4, #1
 80ab928:	d0f7      	beq.n	80ab91a <__aeabi_dmul+0x1a6>
 80ab92a:	ea41 0106 	orr.w	r1, r1, r6
 80ab92e:	f095 0f00 	teq	r5, #0
 80ab932:	bf18      	it	ne
 80ab934:	4770      	bxne	lr
 80ab936:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80ab93a:	0052      	lsls	r2, r2, #1
 80ab93c:	eb43 0303 	adc.w	r3, r3, r3
 80ab940:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80ab944:	bf08      	it	eq
 80ab946:	3d01      	subeq	r5, #1
 80ab948:	d0f7      	beq.n	80ab93a <__aeabi_dmul+0x1c6>
 80ab94a:	ea43 0306 	orr.w	r3, r3, r6
 80ab94e:	4770      	bx	lr
 80ab950:	ea94 0f0c 	teq	r4, ip
 80ab954:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80ab958:	bf18      	it	ne
 80ab95a:	ea95 0f0c 	teqne	r5, ip
 80ab95e:	d00c      	beq.n	80ab97a <__aeabi_dmul+0x206>
 80ab960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80ab964:	bf18      	it	ne
 80ab966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80ab96a:	d1d1      	bne.n	80ab910 <__aeabi_dmul+0x19c>
 80ab96c:	ea81 0103 	eor.w	r1, r1, r3
 80ab970:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80ab974:	f04f 0000 	mov.w	r0, #0
 80ab978:	bd70      	pop	{r4, r5, r6, pc}
 80ab97a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80ab97e:	bf06      	itte	eq
 80ab980:	4610      	moveq	r0, r2
 80ab982:	4619      	moveq	r1, r3
 80ab984:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80ab988:	d019      	beq.n	80ab9be <__aeabi_dmul+0x24a>
 80ab98a:	ea94 0f0c 	teq	r4, ip
 80ab98e:	d102      	bne.n	80ab996 <__aeabi_dmul+0x222>
 80ab990:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80ab994:	d113      	bne.n	80ab9be <__aeabi_dmul+0x24a>
 80ab996:	ea95 0f0c 	teq	r5, ip
 80ab99a:	d105      	bne.n	80ab9a8 <__aeabi_dmul+0x234>
 80ab99c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80ab9a0:	bf1c      	itt	ne
 80ab9a2:	4610      	movne	r0, r2
 80ab9a4:	4619      	movne	r1, r3
 80ab9a6:	d10a      	bne.n	80ab9be <__aeabi_dmul+0x24a>
 80ab9a8:	ea81 0103 	eor.w	r1, r1, r3
 80ab9ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80ab9b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80ab9b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80ab9b8:	f04f 0000 	mov.w	r0, #0
 80ab9bc:	bd70      	pop	{r4, r5, r6, pc}
 80ab9be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80ab9c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80ab9c6:	bd70      	pop	{r4, r5, r6, pc}

080ab9c8 <__aeabi_ddiv>:
 80ab9c8:	b570      	push	{r4, r5, r6, lr}
 80ab9ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80ab9ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80ab9d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80ab9d6:	bf1d      	ittte	ne
 80ab9d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80ab9dc:	ea94 0f0c 	teqne	r4, ip
 80ab9e0:	ea95 0f0c 	teqne	r5, ip
 80ab9e4:	f000 f8a7 	bleq	80abb36 <__aeabi_ddiv+0x16e>
 80ab9e8:	eba4 0405 	sub.w	r4, r4, r5
 80ab9ec:	ea81 0e03 	eor.w	lr, r1, r3
 80ab9f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80ab9f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80ab9f8:	f000 8088 	beq.w	80abb0c <__aeabi_ddiv+0x144>
 80ab9fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80aba00:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80aba04:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80aba08:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80aba0c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80aba10:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80aba14:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80aba18:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80aba1c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80aba20:	429d      	cmp	r5, r3
 80aba22:	bf08      	it	eq
 80aba24:	4296      	cmpeq	r6, r2
 80aba26:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80aba2a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80aba2e:	d202      	bcs.n	80aba36 <__aeabi_ddiv+0x6e>
 80aba30:	085b      	lsrs	r3, r3, #1
 80aba32:	ea4f 0232 	mov.w	r2, r2, rrx
 80aba36:	1ab6      	subs	r6, r6, r2
 80aba38:	eb65 0503 	sbc.w	r5, r5, r3
 80aba3c:	085b      	lsrs	r3, r3, #1
 80aba3e:	ea4f 0232 	mov.w	r2, r2, rrx
 80aba42:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80aba46:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80aba4a:	ebb6 0e02 	subs.w	lr, r6, r2
 80aba4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80aba52:	bf22      	ittt	cs
 80aba54:	1ab6      	subcs	r6, r6, r2
 80aba56:	4675      	movcs	r5, lr
 80aba58:	ea40 000c 	orrcs.w	r0, r0, ip
 80aba5c:	085b      	lsrs	r3, r3, #1
 80aba5e:	ea4f 0232 	mov.w	r2, r2, rrx
 80aba62:	ebb6 0e02 	subs.w	lr, r6, r2
 80aba66:	eb75 0e03 	sbcs.w	lr, r5, r3
 80aba6a:	bf22      	ittt	cs
 80aba6c:	1ab6      	subcs	r6, r6, r2
 80aba6e:	4675      	movcs	r5, lr
 80aba70:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80aba74:	085b      	lsrs	r3, r3, #1
 80aba76:	ea4f 0232 	mov.w	r2, r2, rrx
 80aba7a:	ebb6 0e02 	subs.w	lr, r6, r2
 80aba7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80aba82:	bf22      	ittt	cs
 80aba84:	1ab6      	subcs	r6, r6, r2
 80aba86:	4675      	movcs	r5, lr
 80aba88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80aba8c:	085b      	lsrs	r3, r3, #1
 80aba8e:	ea4f 0232 	mov.w	r2, r2, rrx
 80aba92:	ebb6 0e02 	subs.w	lr, r6, r2
 80aba96:	eb75 0e03 	sbcs.w	lr, r5, r3
 80aba9a:	bf22      	ittt	cs
 80aba9c:	1ab6      	subcs	r6, r6, r2
 80aba9e:	4675      	movcs	r5, lr
 80abaa0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80abaa4:	ea55 0e06 	orrs.w	lr, r5, r6
 80abaa8:	d018      	beq.n	80abadc <__aeabi_ddiv+0x114>
 80abaaa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80abaae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80abab2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80abab6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80ababa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80ababe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80abac2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80abac6:	d1c0      	bne.n	80aba4a <__aeabi_ddiv+0x82>
 80abac8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80abacc:	d10b      	bne.n	80abae6 <__aeabi_ddiv+0x11e>
 80abace:	ea41 0100 	orr.w	r1, r1, r0
 80abad2:	f04f 0000 	mov.w	r0, #0
 80abad6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80abada:	e7b6      	b.n	80aba4a <__aeabi_ddiv+0x82>
 80abadc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80abae0:	bf04      	itt	eq
 80abae2:	4301      	orreq	r1, r0
 80abae4:	2000      	moveq	r0, #0
 80abae6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80abaea:	bf88      	it	hi
 80abaec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80abaf0:	f63f aeaf 	bhi.w	80ab852 <__aeabi_dmul+0xde>
 80abaf4:	ebb5 0c03 	subs.w	ip, r5, r3
 80abaf8:	bf04      	itt	eq
 80abafa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80abafe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80abb02:	f150 0000 	adcs.w	r0, r0, #0
 80abb06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80abb0a:	bd70      	pop	{r4, r5, r6, pc}
 80abb0c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80abb10:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80abb14:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80abb18:	bfc2      	ittt	gt
 80abb1a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80abb1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80abb22:	bd70      	popgt	{r4, r5, r6, pc}
 80abb24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80abb28:	f04f 0e00 	mov.w	lr, #0
 80abb2c:	3c01      	subs	r4, #1
 80abb2e:	e690      	b.n	80ab852 <__aeabi_dmul+0xde>
 80abb30:	ea45 0e06 	orr.w	lr, r5, r6
 80abb34:	e68d      	b.n	80ab852 <__aeabi_dmul+0xde>
 80abb36:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80abb3a:	ea94 0f0c 	teq	r4, ip
 80abb3e:	bf08      	it	eq
 80abb40:	ea95 0f0c 	teqeq	r5, ip
 80abb44:	f43f af3b 	beq.w	80ab9be <__aeabi_dmul+0x24a>
 80abb48:	ea94 0f0c 	teq	r4, ip
 80abb4c:	d10a      	bne.n	80abb64 <__aeabi_ddiv+0x19c>
 80abb4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80abb52:	f47f af34 	bne.w	80ab9be <__aeabi_dmul+0x24a>
 80abb56:	ea95 0f0c 	teq	r5, ip
 80abb5a:	f47f af25 	bne.w	80ab9a8 <__aeabi_dmul+0x234>
 80abb5e:	4610      	mov	r0, r2
 80abb60:	4619      	mov	r1, r3
 80abb62:	e72c      	b.n	80ab9be <__aeabi_dmul+0x24a>
 80abb64:	ea95 0f0c 	teq	r5, ip
 80abb68:	d106      	bne.n	80abb78 <__aeabi_ddiv+0x1b0>
 80abb6a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80abb6e:	f43f aefd 	beq.w	80ab96c <__aeabi_dmul+0x1f8>
 80abb72:	4610      	mov	r0, r2
 80abb74:	4619      	mov	r1, r3
 80abb76:	e722      	b.n	80ab9be <__aeabi_dmul+0x24a>
 80abb78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80abb7c:	bf18      	it	ne
 80abb7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80abb82:	f47f aec5 	bne.w	80ab910 <__aeabi_dmul+0x19c>
 80abb86:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80abb8a:	f47f af0d 	bne.w	80ab9a8 <__aeabi_dmul+0x234>
 80abb8e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80abb92:	f47f aeeb 	bne.w	80ab96c <__aeabi_dmul+0x1f8>
 80abb96:	e712      	b.n	80ab9be <__aeabi_dmul+0x24a>

080abb98 <__gedf2>:
 80abb98:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80abb9c:	e006      	b.n	80abbac <__cmpdf2+0x4>
 80abb9e:	bf00      	nop

080abba0 <__ledf2>:
 80abba0:	f04f 0c01 	mov.w	ip, #1
 80abba4:	e002      	b.n	80abbac <__cmpdf2+0x4>
 80abba6:	bf00      	nop

080abba8 <__cmpdf2>:
 80abba8:	f04f 0c01 	mov.w	ip, #1
 80abbac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80abbb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80abbb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80abbb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80abbbc:	bf18      	it	ne
 80abbbe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80abbc2:	d01b      	beq.n	80abbfc <__cmpdf2+0x54>
 80abbc4:	b001      	add	sp, #4
 80abbc6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80abbca:	bf0c      	ite	eq
 80abbcc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80abbd0:	ea91 0f03 	teqne	r1, r3
 80abbd4:	bf02      	ittt	eq
 80abbd6:	ea90 0f02 	teqeq	r0, r2
 80abbda:	2000      	moveq	r0, #0
 80abbdc:	4770      	bxeq	lr
 80abbde:	f110 0f00 	cmn.w	r0, #0
 80abbe2:	ea91 0f03 	teq	r1, r3
 80abbe6:	bf58      	it	pl
 80abbe8:	4299      	cmppl	r1, r3
 80abbea:	bf08      	it	eq
 80abbec:	4290      	cmpeq	r0, r2
 80abbee:	bf2c      	ite	cs
 80abbf0:	17d8      	asrcs	r0, r3, #31
 80abbf2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80abbf6:	f040 0001 	orr.w	r0, r0, #1
 80abbfa:	4770      	bx	lr
 80abbfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80abc00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80abc04:	d102      	bne.n	80abc0c <__cmpdf2+0x64>
 80abc06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80abc0a:	d107      	bne.n	80abc1c <__cmpdf2+0x74>
 80abc0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80abc10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80abc14:	d1d6      	bne.n	80abbc4 <__cmpdf2+0x1c>
 80abc16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80abc1a:	d0d3      	beq.n	80abbc4 <__cmpdf2+0x1c>
 80abc1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80abc20:	4770      	bx	lr
 80abc22:	bf00      	nop

080abc24 <__aeabi_cdrcmple>:
 80abc24:	4684      	mov	ip, r0
 80abc26:	4610      	mov	r0, r2
 80abc28:	4662      	mov	r2, ip
 80abc2a:	468c      	mov	ip, r1
 80abc2c:	4619      	mov	r1, r3
 80abc2e:	4663      	mov	r3, ip
 80abc30:	e000      	b.n	80abc34 <__aeabi_cdcmpeq>
 80abc32:	bf00      	nop

080abc34 <__aeabi_cdcmpeq>:
 80abc34:	b501      	push	{r0, lr}
 80abc36:	f7ff ffb7 	bl	80abba8 <__cmpdf2>
 80abc3a:	2800      	cmp	r0, #0
 80abc3c:	bf48      	it	mi
 80abc3e:	f110 0f00 	cmnmi.w	r0, #0
 80abc42:	bd01      	pop	{r0, pc}

080abc44 <__aeabi_dcmpeq>:
 80abc44:	f84d ed08 	str.w	lr, [sp, #-8]!
 80abc48:	f7ff fff4 	bl	80abc34 <__aeabi_cdcmpeq>
 80abc4c:	bf0c      	ite	eq
 80abc4e:	2001      	moveq	r0, #1
 80abc50:	2000      	movne	r0, #0
 80abc52:	f85d fb08 	ldr.w	pc, [sp], #8
 80abc56:	bf00      	nop

080abc58 <__aeabi_dcmplt>:
 80abc58:	f84d ed08 	str.w	lr, [sp, #-8]!
 80abc5c:	f7ff ffea 	bl	80abc34 <__aeabi_cdcmpeq>
 80abc60:	bf34      	ite	cc
 80abc62:	2001      	movcc	r0, #1
 80abc64:	2000      	movcs	r0, #0
 80abc66:	f85d fb08 	ldr.w	pc, [sp], #8
 80abc6a:	bf00      	nop

080abc6c <__aeabi_dcmple>:
 80abc6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80abc70:	f7ff ffe0 	bl	80abc34 <__aeabi_cdcmpeq>
 80abc74:	bf94      	ite	ls
 80abc76:	2001      	movls	r0, #1
 80abc78:	2000      	movhi	r0, #0
 80abc7a:	f85d fb08 	ldr.w	pc, [sp], #8
 80abc7e:	bf00      	nop

080abc80 <__aeabi_dcmpge>:
 80abc80:	f84d ed08 	str.w	lr, [sp, #-8]!
 80abc84:	f7ff ffce 	bl	80abc24 <__aeabi_cdrcmple>
 80abc88:	bf94      	ite	ls
 80abc8a:	2001      	movls	r0, #1
 80abc8c:	2000      	movhi	r0, #0
 80abc8e:	f85d fb08 	ldr.w	pc, [sp], #8
 80abc92:	bf00      	nop

080abc94 <__aeabi_dcmpgt>:
 80abc94:	f84d ed08 	str.w	lr, [sp, #-8]!
 80abc98:	f7ff ffc4 	bl	80abc24 <__aeabi_cdrcmple>
 80abc9c:	bf34      	ite	cc
 80abc9e:	2001      	movcc	r0, #1
 80abca0:	2000      	movcs	r0, #0
 80abca2:	f85d fb08 	ldr.w	pc, [sp], #8
 80abca6:	bf00      	nop

080abca8 <__aeabi_dcmpun>:
 80abca8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80abcac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80abcb0:	d102      	bne.n	80abcb8 <__aeabi_dcmpun+0x10>
 80abcb2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80abcb6:	d10a      	bne.n	80abcce <__aeabi_dcmpun+0x26>
 80abcb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80abcbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80abcc0:	d102      	bne.n	80abcc8 <__aeabi_dcmpun+0x20>
 80abcc2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80abcc6:	d102      	bne.n	80abcce <__aeabi_dcmpun+0x26>
 80abcc8:	f04f 0000 	mov.w	r0, #0
 80abccc:	4770      	bx	lr
 80abcce:	f04f 0001 	mov.w	r0, #1
 80abcd2:	4770      	bx	lr

080abcd4 <__aeabi_d2iz>:
 80abcd4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80abcd8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80abcdc:	d215      	bcs.n	80abd0a <__aeabi_d2iz+0x36>
 80abcde:	d511      	bpl.n	80abd04 <__aeabi_d2iz+0x30>
 80abce0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80abce4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80abce8:	d912      	bls.n	80abd10 <__aeabi_d2iz+0x3c>
 80abcea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80abcee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80abcf2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80abcf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80abcfa:	fa23 f002 	lsr.w	r0, r3, r2
 80abcfe:	bf18      	it	ne
 80abd00:	4240      	negne	r0, r0
 80abd02:	4770      	bx	lr
 80abd04:	f04f 0000 	mov.w	r0, #0
 80abd08:	4770      	bx	lr
 80abd0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80abd0e:	d105      	bne.n	80abd1c <__aeabi_d2iz+0x48>
 80abd10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80abd14:	bf08      	it	eq
 80abd16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80abd1a:	4770      	bx	lr
 80abd1c:	f04f 0000 	mov.w	r0, #0
 80abd20:	4770      	bx	lr
 80abd22:	bf00      	nop

080abd24 <__aeabi_d2uiz>:
 80abd24:	004a      	lsls	r2, r1, #1
 80abd26:	d211      	bcs.n	80abd4c <__aeabi_d2uiz+0x28>
 80abd28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80abd2c:	d211      	bcs.n	80abd52 <__aeabi_d2uiz+0x2e>
 80abd2e:	d50d      	bpl.n	80abd4c <__aeabi_d2uiz+0x28>
 80abd30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80abd34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80abd38:	d40e      	bmi.n	80abd58 <__aeabi_d2uiz+0x34>
 80abd3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80abd3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80abd42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80abd46:	fa23 f002 	lsr.w	r0, r3, r2
 80abd4a:	4770      	bx	lr
 80abd4c:	f04f 0000 	mov.w	r0, #0
 80abd50:	4770      	bx	lr
 80abd52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80abd56:	d102      	bne.n	80abd5e <__aeabi_d2uiz+0x3a>
 80abd58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80abd5c:	4770      	bx	lr
 80abd5e:	f04f 0000 	mov.w	r0, #0
 80abd62:	4770      	bx	lr

080abd64 <__aeabi_d2f>:
 80abd64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80abd68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80abd6c:	bf24      	itt	cs
 80abd6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80abd72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80abd76:	d90d      	bls.n	80abd94 <__aeabi_d2f+0x30>
 80abd78:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80abd7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80abd80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80abd84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80abd88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80abd8c:	bf08      	it	eq
 80abd8e:	f020 0001 	biceq.w	r0, r0, #1
 80abd92:	4770      	bx	lr
 80abd94:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80abd98:	d121      	bne.n	80abdde <__aeabi_d2f+0x7a>
 80abd9a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80abd9e:	bfbc      	itt	lt
 80abda0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80abda4:	4770      	bxlt	lr
 80abda6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80abdaa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80abdae:	f1c2 0218 	rsb	r2, r2, #24
 80abdb2:	f1c2 0c20 	rsb	ip, r2, #32
 80abdb6:	fa10 f30c 	lsls.w	r3, r0, ip
 80abdba:	fa20 f002 	lsr.w	r0, r0, r2
 80abdbe:	bf18      	it	ne
 80abdc0:	f040 0001 	orrne.w	r0, r0, #1
 80abdc4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80abdc8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80abdcc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80abdd0:	ea40 000c 	orr.w	r0, r0, ip
 80abdd4:	fa23 f302 	lsr.w	r3, r3, r2
 80abdd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80abddc:	e7cc      	b.n	80abd78 <__aeabi_d2f+0x14>
 80abdde:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80abde2:	d107      	bne.n	80abdf4 <__aeabi_d2f+0x90>
 80abde4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80abde8:	bf1e      	ittt	ne
 80abdea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80abdee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80abdf2:	4770      	bxne	lr
 80abdf4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80abdf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80abdfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80abe00:	4770      	bx	lr
 80abe02:	bf00      	nop

080abe04 <__aeabi_frsub>:
 80abe04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80abe08:	e002      	b.n	80abe10 <__addsf3>
 80abe0a:	bf00      	nop

080abe0c <__aeabi_fsub>:
 80abe0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080abe10 <__addsf3>:
 80abe10:	0042      	lsls	r2, r0, #1
 80abe12:	bf1f      	itttt	ne
 80abe14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80abe18:	ea92 0f03 	teqne	r2, r3
 80abe1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80abe20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80abe24:	d06a      	beq.n	80abefc <__addsf3+0xec>
 80abe26:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80abe2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80abe2e:	bfc1      	itttt	gt
 80abe30:	18d2      	addgt	r2, r2, r3
 80abe32:	4041      	eorgt	r1, r0
 80abe34:	4048      	eorgt	r0, r1
 80abe36:	4041      	eorgt	r1, r0
 80abe38:	bfb8      	it	lt
 80abe3a:	425b      	neglt	r3, r3
 80abe3c:	2b19      	cmp	r3, #25
 80abe3e:	bf88      	it	hi
 80abe40:	4770      	bxhi	lr
 80abe42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80abe46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80abe4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80abe4e:	bf18      	it	ne
 80abe50:	4240      	negne	r0, r0
 80abe52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80abe56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80abe5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80abe5e:	bf18      	it	ne
 80abe60:	4249      	negne	r1, r1
 80abe62:	ea92 0f03 	teq	r2, r3
 80abe66:	d03f      	beq.n	80abee8 <__addsf3+0xd8>
 80abe68:	f1a2 0201 	sub.w	r2, r2, #1
 80abe6c:	fa41 fc03 	asr.w	ip, r1, r3
 80abe70:	eb10 000c 	adds.w	r0, r0, ip
 80abe74:	f1c3 0320 	rsb	r3, r3, #32
 80abe78:	fa01 f103 	lsl.w	r1, r1, r3
 80abe7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80abe80:	d502      	bpl.n	80abe88 <__addsf3+0x78>
 80abe82:	4249      	negs	r1, r1
 80abe84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80abe88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80abe8c:	d313      	bcc.n	80abeb6 <__addsf3+0xa6>
 80abe8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80abe92:	d306      	bcc.n	80abea2 <__addsf3+0x92>
 80abe94:	0840      	lsrs	r0, r0, #1
 80abe96:	ea4f 0131 	mov.w	r1, r1, rrx
 80abe9a:	f102 0201 	add.w	r2, r2, #1
 80abe9e:	2afe      	cmp	r2, #254	; 0xfe
 80abea0:	d251      	bcs.n	80abf46 <__addsf3+0x136>
 80abea2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80abea6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80abeaa:	bf08      	it	eq
 80abeac:	f020 0001 	biceq.w	r0, r0, #1
 80abeb0:	ea40 0003 	orr.w	r0, r0, r3
 80abeb4:	4770      	bx	lr
 80abeb6:	0049      	lsls	r1, r1, #1
 80abeb8:	eb40 0000 	adc.w	r0, r0, r0
 80abebc:	3a01      	subs	r2, #1
 80abebe:	bf28      	it	cs
 80abec0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80abec4:	d2ed      	bcs.n	80abea2 <__addsf3+0x92>
 80abec6:	fab0 fc80 	clz	ip, r0
 80abeca:	f1ac 0c08 	sub.w	ip, ip, #8
 80abece:	ebb2 020c 	subs.w	r2, r2, ip
 80abed2:	fa00 f00c 	lsl.w	r0, r0, ip
 80abed6:	bfaa      	itet	ge
 80abed8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80abedc:	4252      	neglt	r2, r2
 80abede:	4318      	orrge	r0, r3
 80abee0:	bfbc      	itt	lt
 80abee2:	40d0      	lsrlt	r0, r2
 80abee4:	4318      	orrlt	r0, r3
 80abee6:	4770      	bx	lr
 80abee8:	f092 0f00 	teq	r2, #0
 80abeec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80abef0:	bf06      	itte	eq
 80abef2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80abef6:	3201      	addeq	r2, #1
 80abef8:	3b01      	subne	r3, #1
 80abefa:	e7b5      	b.n	80abe68 <__addsf3+0x58>
 80abefc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80abf00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80abf04:	bf18      	it	ne
 80abf06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80abf0a:	d021      	beq.n	80abf50 <__addsf3+0x140>
 80abf0c:	ea92 0f03 	teq	r2, r3
 80abf10:	d004      	beq.n	80abf1c <__addsf3+0x10c>
 80abf12:	f092 0f00 	teq	r2, #0
 80abf16:	bf08      	it	eq
 80abf18:	4608      	moveq	r0, r1
 80abf1a:	4770      	bx	lr
 80abf1c:	ea90 0f01 	teq	r0, r1
 80abf20:	bf1c      	itt	ne
 80abf22:	2000      	movne	r0, #0
 80abf24:	4770      	bxne	lr
 80abf26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80abf2a:	d104      	bne.n	80abf36 <__addsf3+0x126>
 80abf2c:	0040      	lsls	r0, r0, #1
 80abf2e:	bf28      	it	cs
 80abf30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80abf34:	4770      	bx	lr
 80abf36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80abf3a:	bf3c      	itt	cc
 80abf3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80abf40:	4770      	bxcc	lr
 80abf42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80abf46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80abf4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80abf4e:	4770      	bx	lr
 80abf50:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80abf54:	bf16      	itet	ne
 80abf56:	4608      	movne	r0, r1
 80abf58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80abf5c:	4601      	movne	r1, r0
 80abf5e:	0242      	lsls	r2, r0, #9
 80abf60:	bf06      	itte	eq
 80abf62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80abf66:	ea90 0f01 	teqeq	r0, r1
 80abf6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80abf6e:	4770      	bx	lr

080abf70 <__aeabi_ui2f>:
 80abf70:	f04f 0300 	mov.w	r3, #0
 80abf74:	e004      	b.n	80abf80 <__aeabi_i2f+0x8>
 80abf76:	bf00      	nop

080abf78 <__aeabi_i2f>:
 80abf78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80abf7c:	bf48      	it	mi
 80abf7e:	4240      	negmi	r0, r0
 80abf80:	ea5f 0c00 	movs.w	ip, r0
 80abf84:	bf08      	it	eq
 80abf86:	4770      	bxeq	lr
 80abf88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80abf8c:	4601      	mov	r1, r0
 80abf8e:	f04f 0000 	mov.w	r0, #0
 80abf92:	e01c      	b.n	80abfce <__aeabi_l2f+0x2a>

080abf94 <__aeabi_ul2f>:
 80abf94:	ea50 0201 	orrs.w	r2, r0, r1
 80abf98:	bf08      	it	eq
 80abf9a:	4770      	bxeq	lr
 80abf9c:	f04f 0300 	mov.w	r3, #0
 80abfa0:	e00a      	b.n	80abfb8 <__aeabi_l2f+0x14>
 80abfa2:	bf00      	nop

080abfa4 <__aeabi_l2f>:
 80abfa4:	ea50 0201 	orrs.w	r2, r0, r1
 80abfa8:	bf08      	it	eq
 80abfaa:	4770      	bxeq	lr
 80abfac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80abfb0:	d502      	bpl.n	80abfb8 <__aeabi_l2f+0x14>
 80abfb2:	4240      	negs	r0, r0
 80abfb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80abfb8:	ea5f 0c01 	movs.w	ip, r1
 80abfbc:	bf02      	ittt	eq
 80abfbe:	4684      	moveq	ip, r0
 80abfc0:	4601      	moveq	r1, r0
 80abfc2:	2000      	moveq	r0, #0
 80abfc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80abfc8:	bf08      	it	eq
 80abfca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80abfce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80abfd2:	fabc f28c 	clz	r2, ip
 80abfd6:	3a08      	subs	r2, #8
 80abfd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80abfdc:	db10      	blt.n	80ac000 <__aeabi_l2f+0x5c>
 80abfde:	fa01 fc02 	lsl.w	ip, r1, r2
 80abfe2:	4463      	add	r3, ip
 80abfe4:	fa00 fc02 	lsl.w	ip, r0, r2
 80abfe8:	f1c2 0220 	rsb	r2, r2, #32
 80abfec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80abff0:	fa20 f202 	lsr.w	r2, r0, r2
 80abff4:	eb43 0002 	adc.w	r0, r3, r2
 80abff8:	bf08      	it	eq
 80abffa:	f020 0001 	biceq.w	r0, r0, #1
 80abffe:	4770      	bx	lr
 80ac000:	f102 0220 	add.w	r2, r2, #32
 80ac004:	fa01 fc02 	lsl.w	ip, r1, r2
 80ac008:	f1c2 0220 	rsb	r2, r2, #32
 80ac00c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80ac010:	fa21 f202 	lsr.w	r2, r1, r2
 80ac014:	eb43 0002 	adc.w	r0, r3, r2
 80ac018:	bf08      	it	eq
 80ac01a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80ac01e:	4770      	bx	lr

080ac020 <__aeabi_fmul>:
 80ac020:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80ac024:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80ac028:	bf1e      	ittt	ne
 80ac02a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80ac02e:	ea92 0f0c 	teqne	r2, ip
 80ac032:	ea93 0f0c 	teqne	r3, ip
 80ac036:	d06f      	beq.n	80ac118 <__aeabi_fmul+0xf8>
 80ac038:	441a      	add	r2, r3
 80ac03a:	ea80 0c01 	eor.w	ip, r0, r1
 80ac03e:	0240      	lsls	r0, r0, #9
 80ac040:	bf18      	it	ne
 80ac042:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80ac046:	d01e      	beq.n	80ac086 <__aeabi_fmul+0x66>
 80ac048:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80ac04c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80ac050:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80ac054:	fba0 3101 	umull	r3, r1, r0, r1
 80ac058:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80ac05c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80ac060:	bf3e      	ittt	cc
 80ac062:	0049      	lslcc	r1, r1, #1
 80ac064:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80ac068:	005b      	lslcc	r3, r3, #1
 80ac06a:	ea40 0001 	orr.w	r0, r0, r1
 80ac06e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80ac072:	2afd      	cmp	r2, #253	; 0xfd
 80ac074:	d81d      	bhi.n	80ac0b2 <__aeabi_fmul+0x92>
 80ac076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80ac07a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80ac07e:	bf08      	it	eq
 80ac080:	f020 0001 	biceq.w	r0, r0, #1
 80ac084:	4770      	bx	lr
 80ac086:	f090 0f00 	teq	r0, #0
 80ac08a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80ac08e:	bf08      	it	eq
 80ac090:	0249      	lsleq	r1, r1, #9
 80ac092:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80ac096:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80ac09a:	3a7f      	subs	r2, #127	; 0x7f
 80ac09c:	bfc2      	ittt	gt
 80ac09e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80ac0a2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80ac0a6:	4770      	bxgt	lr
 80ac0a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80ac0ac:	f04f 0300 	mov.w	r3, #0
 80ac0b0:	3a01      	subs	r2, #1
 80ac0b2:	dc5d      	bgt.n	80ac170 <__aeabi_fmul+0x150>
 80ac0b4:	f112 0f19 	cmn.w	r2, #25
 80ac0b8:	bfdc      	itt	le
 80ac0ba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80ac0be:	4770      	bxle	lr
 80ac0c0:	f1c2 0200 	rsb	r2, r2, #0
 80ac0c4:	0041      	lsls	r1, r0, #1
 80ac0c6:	fa21 f102 	lsr.w	r1, r1, r2
 80ac0ca:	f1c2 0220 	rsb	r2, r2, #32
 80ac0ce:	fa00 fc02 	lsl.w	ip, r0, r2
 80ac0d2:	ea5f 0031 	movs.w	r0, r1, rrx
 80ac0d6:	f140 0000 	adc.w	r0, r0, #0
 80ac0da:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80ac0de:	bf08      	it	eq
 80ac0e0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80ac0e4:	4770      	bx	lr
 80ac0e6:	f092 0f00 	teq	r2, #0
 80ac0ea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80ac0ee:	bf02      	ittt	eq
 80ac0f0:	0040      	lsleq	r0, r0, #1
 80ac0f2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80ac0f6:	3a01      	subeq	r2, #1
 80ac0f8:	d0f9      	beq.n	80ac0ee <__aeabi_fmul+0xce>
 80ac0fa:	ea40 000c 	orr.w	r0, r0, ip
 80ac0fe:	f093 0f00 	teq	r3, #0
 80ac102:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80ac106:	bf02      	ittt	eq
 80ac108:	0049      	lsleq	r1, r1, #1
 80ac10a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80ac10e:	3b01      	subeq	r3, #1
 80ac110:	d0f9      	beq.n	80ac106 <__aeabi_fmul+0xe6>
 80ac112:	ea41 010c 	orr.w	r1, r1, ip
 80ac116:	e78f      	b.n	80ac038 <__aeabi_fmul+0x18>
 80ac118:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80ac11c:	ea92 0f0c 	teq	r2, ip
 80ac120:	bf18      	it	ne
 80ac122:	ea93 0f0c 	teqne	r3, ip
 80ac126:	d00a      	beq.n	80ac13e <__aeabi_fmul+0x11e>
 80ac128:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80ac12c:	bf18      	it	ne
 80ac12e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80ac132:	d1d8      	bne.n	80ac0e6 <__aeabi_fmul+0xc6>
 80ac134:	ea80 0001 	eor.w	r0, r0, r1
 80ac138:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80ac13c:	4770      	bx	lr
 80ac13e:	f090 0f00 	teq	r0, #0
 80ac142:	bf17      	itett	ne
 80ac144:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80ac148:	4608      	moveq	r0, r1
 80ac14a:	f091 0f00 	teqne	r1, #0
 80ac14e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80ac152:	d014      	beq.n	80ac17e <__aeabi_fmul+0x15e>
 80ac154:	ea92 0f0c 	teq	r2, ip
 80ac158:	d101      	bne.n	80ac15e <__aeabi_fmul+0x13e>
 80ac15a:	0242      	lsls	r2, r0, #9
 80ac15c:	d10f      	bne.n	80ac17e <__aeabi_fmul+0x15e>
 80ac15e:	ea93 0f0c 	teq	r3, ip
 80ac162:	d103      	bne.n	80ac16c <__aeabi_fmul+0x14c>
 80ac164:	024b      	lsls	r3, r1, #9
 80ac166:	bf18      	it	ne
 80ac168:	4608      	movne	r0, r1
 80ac16a:	d108      	bne.n	80ac17e <__aeabi_fmul+0x15e>
 80ac16c:	ea80 0001 	eor.w	r0, r0, r1
 80ac170:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80ac174:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80ac178:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80ac17c:	4770      	bx	lr
 80ac17e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80ac182:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80ac186:	4770      	bx	lr

080ac188 <__aeabi_fdiv>:
 80ac188:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80ac18c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80ac190:	bf1e      	ittt	ne
 80ac192:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80ac196:	ea92 0f0c 	teqne	r2, ip
 80ac19a:	ea93 0f0c 	teqne	r3, ip
 80ac19e:	d069      	beq.n	80ac274 <__aeabi_fdiv+0xec>
 80ac1a0:	eba2 0203 	sub.w	r2, r2, r3
 80ac1a4:	ea80 0c01 	eor.w	ip, r0, r1
 80ac1a8:	0249      	lsls	r1, r1, #9
 80ac1aa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80ac1ae:	d037      	beq.n	80ac220 <__aeabi_fdiv+0x98>
 80ac1b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80ac1b4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80ac1b8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80ac1bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80ac1c0:	428b      	cmp	r3, r1
 80ac1c2:	bf38      	it	cc
 80ac1c4:	005b      	lslcc	r3, r3, #1
 80ac1c6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80ac1ca:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80ac1ce:	428b      	cmp	r3, r1
 80ac1d0:	bf24      	itt	cs
 80ac1d2:	1a5b      	subcs	r3, r3, r1
 80ac1d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80ac1d8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80ac1dc:	bf24      	itt	cs
 80ac1de:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80ac1e2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80ac1e6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80ac1ea:	bf24      	itt	cs
 80ac1ec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80ac1f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80ac1f4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80ac1f8:	bf24      	itt	cs
 80ac1fa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80ac1fe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80ac202:	011b      	lsls	r3, r3, #4
 80ac204:	bf18      	it	ne
 80ac206:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80ac20a:	d1e0      	bne.n	80ac1ce <__aeabi_fdiv+0x46>
 80ac20c:	2afd      	cmp	r2, #253	; 0xfd
 80ac20e:	f63f af50 	bhi.w	80ac0b2 <__aeabi_fmul+0x92>
 80ac212:	428b      	cmp	r3, r1
 80ac214:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80ac218:	bf08      	it	eq
 80ac21a:	f020 0001 	biceq.w	r0, r0, #1
 80ac21e:	4770      	bx	lr
 80ac220:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80ac224:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80ac228:	327f      	adds	r2, #127	; 0x7f
 80ac22a:	bfc2      	ittt	gt
 80ac22c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80ac230:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80ac234:	4770      	bxgt	lr
 80ac236:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80ac23a:	f04f 0300 	mov.w	r3, #0
 80ac23e:	3a01      	subs	r2, #1
 80ac240:	e737      	b.n	80ac0b2 <__aeabi_fmul+0x92>
 80ac242:	f092 0f00 	teq	r2, #0
 80ac246:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80ac24a:	bf02      	ittt	eq
 80ac24c:	0040      	lsleq	r0, r0, #1
 80ac24e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80ac252:	3a01      	subeq	r2, #1
 80ac254:	d0f9      	beq.n	80ac24a <__aeabi_fdiv+0xc2>
 80ac256:	ea40 000c 	orr.w	r0, r0, ip
 80ac25a:	f093 0f00 	teq	r3, #0
 80ac25e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80ac262:	bf02      	ittt	eq
 80ac264:	0049      	lsleq	r1, r1, #1
 80ac266:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80ac26a:	3b01      	subeq	r3, #1
 80ac26c:	d0f9      	beq.n	80ac262 <__aeabi_fdiv+0xda>
 80ac26e:	ea41 010c 	orr.w	r1, r1, ip
 80ac272:	e795      	b.n	80ac1a0 <__aeabi_fdiv+0x18>
 80ac274:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80ac278:	ea92 0f0c 	teq	r2, ip
 80ac27c:	d108      	bne.n	80ac290 <__aeabi_fdiv+0x108>
 80ac27e:	0242      	lsls	r2, r0, #9
 80ac280:	f47f af7d 	bne.w	80ac17e <__aeabi_fmul+0x15e>
 80ac284:	ea93 0f0c 	teq	r3, ip
 80ac288:	f47f af70 	bne.w	80ac16c <__aeabi_fmul+0x14c>
 80ac28c:	4608      	mov	r0, r1
 80ac28e:	e776      	b.n	80ac17e <__aeabi_fmul+0x15e>
 80ac290:	ea93 0f0c 	teq	r3, ip
 80ac294:	d104      	bne.n	80ac2a0 <__aeabi_fdiv+0x118>
 80ac296:	024b      	lsls	r3, r1, #9
 80ac298:	f43f af4c 	beq.w	80ac134 <__aeabi_fmul+0x114>
 80ac29c:	4608      	mov	r0, r1
 80ac29e:	e76e      	b.n	80ac17e <__aeabi_fmul+0x15e>
 80ac2a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80ac2a4:	bf18      	it	ne
 80ac2a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80ac2aa:	d1ca      	bne.n	80ac242 <__aeabi_fdiv+0xba>
 80ac2ac:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80ac2b0:	f47f af5c 	bne.w	80ac16c <__aeabi_fmul+0x14c>
 80ac2b4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80ac2b8:	f47f af3c 	bne.w	80ac134 <__aeabi_fmul+0x114>
 80ac2bc:	e75f      	b.n	80ac17e <__aeabi_fmul+0x15e>
 80ac2be:	bf00      	nop

080ac2c0 <__gesf2>:
 80ac2c0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80ac2c4:	e006      	b.n	80ac2d4 <__cmpsf2+0x4>
 80ac2c6:	bf00      	nop

080ac2c8 <__lesf2>:
 80ac2c8:	f04f 0c01 	mov.w	ip, #1
 80ac2cc:	e002      	b.n	80ac2d4 <__cmpsf2+0x4>
 80ac2ce:	bf00      	nop

080ac2d0 <__cmpsf2>:
 80ac2d0:	f04f 0c01 	mov.w	ip, #1
 80ac2d4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80ac2d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80ac2dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80ac2e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80ac2e4:	bf18      	it	ne
 80ac2e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80ac2ea:	d011      	beq.n	80ac310 <__cmpsf2+0x40>
 80ac2ec:	b001      	add	sp, #4
 80ac2ee:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80ac2f2:	bf18      	it	ne
 80ac2f4:	ea90 0f01 	teqne	r0, r1
 80ac2f8:	bf58      	it	pl
 80ac2fa:	ebb2 0003 	subspl.w	r0, r2, r3
 80ac2fe:	bf88      	it	hi
 80ac300:	17c8      	asrhi	r0, r1, #31
 80ac302:	bf38      	it	cc
 80ac304:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80ac308:	bf18      	it	ne
 80ac30a:	f040 0001 	orrne.w	r0, r0, #1
 80ac30e:	4770      	bx	lr
 80ac310:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80ac314:	d102      	bne.n	80ac31c <__cmpsf2+0x4c>
 80ac316:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80ac31a:	d105      	bne.n	80ac328 <__cmpsf2+0x58>
 80ac31c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80ac320:	d1e4      	bne.n	80ac2ec <__cmpsf2+0x1c>
 80ac322:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80ac326:	d0e1      	beq.n	80ac2ec <__cmpsf2+0x1c>
 80ac328:	f85d 0b04 	ldr.w	r0, [sp], #4
 80ac32c:	4770      	bx	lr
 80ac32e:	bf00      	nop

080ac330 <__aeabi_cfrcmple>:
 80ac330:	4684      	mov	ip, r0
 80ac332:	4608      	mov	r0, r1
 80ac334:	4661      	mov	r1, ip
 80ac336:	e7ff      	b.n	80ac338 <__aeabi_cfcmpeq>

080ac338 <__aeabi_cfcmpeq>:
 80ac338:	b50f      	push	{r0, r1, r2, r3, lr}
 80ac33a:	f7ff ffc9 	bl	80ac2d0 <__cmpsf2>
 80ac33e:	2800      	cmp	r0, #0
 80ac340:	bf48      	it	mi
 80ac342:	f110 0f00 	cmnmi.w	r0, #0
 80ac346:	bd0f      	pop	{r0, r1, r2, r3, pc}

080ac348 <__aeabi_fcmpeq>:
 80ac348:	f84d ed08 	str.w	lr, [sp, #-8]!
 80ac34c:	f7ff fff4 	bl	80ac338 <__aeabi_cfcmpeq>
 80ac350:	bf0c      	ite	eq
 80ac352:	2001      	moveq	r0, #1
 80ac354:	2000      	movne	r0, #0
 80ac356:	f85d fb08 	ldr.w	pc, [sp], #8
 80ac35a:	bf00      	nop

080ac35c <__aeabi_fcmplt>:
 80ac35c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80ac360:	f7ff ffea 	bl	80ac338 <__aeabi_cfcmpeq>
 80ac364:	bf34      	ite	cc
 80ac366:	2001      	movcc	r0, #1
 80ac368:	2000      	movcs	r0, #0
 80ac36a:	f85d fb08 	ldr.w	pc, [sp], #8
 80ac36e:	bf00      	nop

080ac370 <__aeabi_fcmple>:
 80ac370:	f84d ed08 	str.w	lr, [sp, #-8]!
 80ac374:	f7ff ffe0 	bl	80ac338 <__aeabi_cfcmpeq>
 80ac378:	bf94      	ite	ls
 80ac37a:	2001      	movls	r0, #1
 80ac37c:	2000      	movhi	r0, #0
 80ac37e:	f85d fb08 	ldr.w	pc, [sp], #8
 80ac382:	bf00      	nop

080ac384 <__aeabi_fcmpge>:
 80ac384:	f84d ed08 	str.w	lr, [sp, #-8]!
 80ac388:	f7ff ffd2 	bl	80ac330 <__aeabi_cfrcmple>
 80ac38c:	bf94      	ite	ls
 80ac38e:	2001      	movls	r0, #1
 80ac390:	2000      	movhi	r0, #0
 80ac392:	f85d fb08 	ldr.w	pc, [sp], #8
 80ac396:	bf00      	nop

080ac398 <__aeabi_fcmpgt>:
 80ac398:	f84d ed08 	str.w	lr, [sp, #-8]!
 80ac39c:	f7ff ffc8 	bl	80ac330 <__aeabi_cfrcmple>
 80ac3a0:	bf34      	ite	cc
 80ac3a2:	2001      	movcc	r0, #1
 80ac3a4:	2000      	movcs	r0, #0
 80ac3a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80ac3aa:	bf00      	nop

080ac3ac <__aeabi_fcmpun>:
 80ac3ac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80ac3b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80ac3b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80ac3b8:	d102      	bne.n	80ac3c0 <__aeabi_fcmpun+0x14>
 80ac3ba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80ac3be:	d108      	bne.n	80ac3d2 <__aeabi_fcmpun+0x26>
 80ac3c0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80ac3c4:	d102      	bne.n	80ac3cc <__aeabi_fcmpun+0x20>
 80ac3c6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80ac3ca:	d102      	bne.n	80ac3d2 <__aeabi_fcmpun+0x26>
 80ac3cc:	f04f 0000 	mov.w	r0, #0
 80ac3d0:	4770      	bx	lr
 80ac3d2:	f04f 0001 	mov.w	r0, #1
 80ac3d6:	4770      	bx	lr

080ac3d8 <__aeabi_f2iz>:
 80ac3d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80ac3dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80ac3e0:	d30f      	bcc.n	80ac402 <__aeabi_f2iz+0x2a>
 80ac3e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80ac3e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80ac3ea:	d90d      	bls.n	80ac408 <__aeabi_f2iz+0x30>
 80ac3ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80ac3f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80ac3f4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80ac3f8:	fa23 f002 	lsr.w	r0, r3, r2
 80ac3fc:	bf18      	it	ne
 80ac3fe:	4240      	negne	r0, r0
 80ac400:	4770      	bx	lr
 80ac402:	f04f 0000 	mov.w	r0, #0
 80ac406:	4770      	bx	lr
 80ac408:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80ac40c:	d101      	bne.n	80ac412 <__aeabi_f2iz+0x3a>
 80ac40e:	0242      	lsls	r2, r0, #9
 80ac410:	d105      	bne.n	80ac41e <__aeabi_f2iz+0x46>
 80ac412:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80ac416:	bf08      	it	eq
 80ac418:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80ac41c:	4770      	bx	lr
 80ac41e:	f04f 0000 	mov.w	r0, #0
 80ac422:	4770      	bx	lr

080ac424 <__aeabi_f2uiz>:
 80ac424:	0042      	lsls	r2, r0, #1
 80ac426:	d20e      	bcs.n	80ac446 <__aeabi_f2uiz+0x22>
 80ac428:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80ac42c:	d30b      	bcc.n	80ac446 <__aeabi_f2uiz+0x22>
 80ac42e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80ac432:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80ac436:	d409      	bmi.n	80ac44c <__aeabi_f2uiz+0x28>
 80ac438:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80ac43c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80ac440:	fa23 f002 	lsr.w	r0, r3, r2
 80ac444:	4770      	bx	lr
 80ac446:	f04f 0000 	mov.w	r0, #0
 80ac44a:	4770      	bx	lr
 80ac44c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80ac450:	d101      	bne.n	80ac456 <__aeabi_f2uiz+0x32>
 80ac452:	0242      	lsls	r2, r0, #9
 80ac454:	d102      	bne.n	80ac45c <__aeabi_f2uiz+0x38>
 80ac456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80ac45a:	4770      	bx	lr
 80ac45c:	f04f 0000 	mov.w	r0, #0
 80ac460:	4770      	bx	lr
 80ac462:	bf00      	nop

080ac464 <__cxa_atexit>:
 80ac464:	b510      	push	{r4, lr}
 80ac466:	4604      	mov	r4, r0
 80ac468:	4804      	ldr	r0, [pc, #16]	; (80ac47c <__cxa_atexit+0x18>)
 80ac46a:	4613      	mov	r3, r2
 80ac46c:	b120      	cbz	r0, 80ac478 <__cxa_atexit+0x14>
 80ac46e:	460a      	mov	r2, r1
 80ac470:	2002      	movs	r0, #2
 80ac472:	4621      	mov	r1, r4
 80ac474:	f3af 8000 	nop.w
 80ac478:	bd10      	pop	{r4, pc}
 80ac47a:	bf00      	nop
 80ac47c:	00000000 	.word	0x00000000

080ac480 <memcpy>:
 80ac480:	440a      	add	r2, r1
 80ac482:	4291      	cmp	r1, r2
 80ac484:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80ac488:	d100      	bne.n	80ac48c <memcpy+0xc>
 80ac48a:	4770      	bx	lr
 80ac48c:	b510      	push	{r4, lr}
 80ac48e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80ac492:	4291      	cmp	r1, r2
 80ac494:	f803 4f01 	strb.w	r4, [r3, #1]!
 80ac498:	d1f9      	bne.n	80ac48e <memcpy+0xe>
 80ac49a:	bd10      	pop	{r4, pc}

080ac49c <memmove>:
 80ac49c:	4288      	cmp	r0, r1
 80ac49e:	b510      	push	{r4, lr}
 80ac4a0:	eb01 0402 	add.w	r4, r1, r2
 80ac4a4:	d902      	bls.n	80ac4ac <memmove+0x10>
 80ac4a6:	4284      	cmp	r4, r0
 80ac4a8:	4623      	mov	r3, r4
 80ac4aa:	d807      	bhi.n	80ac4bc <memmove+0x20>
 80ac4ac:	1e43      	subs	r3, r0, #1
 80ac4ae:	42a1      	cmp	r1, r4
 80ac4b0:	d008      	beq.n	80ac4c4 <memmove+0x28>
 80ac4b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80ac4b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80ac4ba:	e7f8      	b.n	80ac4ae <memmove+0x12>
 80ac4bc:	4601      	mov	r1, r0
 80ac4be:	4402      	add	r2, r0
 80ac4c0:	428a      	cmp	r2, r1
 80ac4c2:	d100      	bne.n	80ac4c6 <memmove+0x2a>
 80ac4c4:	bd10      	pop	{r4, pc}
 80ac4c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80ac4ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80ac4ce:	e7f7      	b.n	80ac4c0 <memmove+0x24>

080ac4d0 <memset>:
 80ac4d0:	4603      	mov	r3, r0
 80ac4d2:	4402      	add	r2, r0
 80ac4d4:	4293      	cmp	r3, r2
 80ac4d6:	d100      	bne.n	80ac4da <memset+0xa>
 80ac4d8:	4770      	bx	lr
 80ac4da:	f803 1b01 	strb.w	r1, [r3], #1
 80ac4de:	e7f9      	b.n	80ac4d4 <memset+0x4>

080ac4e0 <srand>:
 80ac4e0:	b538      	push	{r3, r4, r5, lr}
 80ac4e2:	4b0d      	ldr	r3, [pc, #52]	; (80ac518 <srand+0x38>)
 80ac4e4:	4604      	mov	r4, r0
 80ac4e6:	681d      	ldr	r5, [r3, #0]
 80ac4e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80ac4ea:	b97b      	cbnz	r3, 80ac50c <srand+0x2c>
 80ac4ec:	2018      	movs	r0, #24
 80ac4ee:	f7f9 f9d7 	bl	80a58a0 <malloc>
 80ac4f2:	4a0a      	ldr	r2, [pc, #40]	; (80ac51c <srand+0x3c>)
 80ac4f4:	4b0a      	ldr	r3, [pc, #40]	; (80ac520 <srand+0x40>)
 80ac4f6:	63a8      	str	r0, [r5, #56]	; 0x38
 80ac4f8:	e9c0 2300 	strd	r2, r3, [r0]
 80ac4fc:	4b09      	ldr	r3, [pc, #36]	; (80ac524 <srand+0x44>)
 80ac4fe:	2201      	movs	r2, #1
 80ac500:	6083      	str	r3, [r0, #8]
 80ac502:	230b      	movs	r3, #11
 80ac504:	8183      	strh	r3, [r0, #12]
 80ac506:	2300      	movs	r3, #0
 80ac508:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80ac50c:	2200      	movs	r2, #0
 80ac50e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80ac510:	611c      	str	r4, [r3, #16]
 80ac512:	615a      	str	r2, [r3, #20]
 80ac514:	bd38      	pop	{r3, r4, r5, pc}
 80ac516:	bf00      	nop
 80ac518:	20000008 	.word	0x20000008
 80ac51c:	abcd330e 	.word	0xabcd330e
 80ac520:	e66d1234 	.word	0xe66d1234
 80ac524:	0005deec 	.word	0x0005deec

080ac528 <rand>:
 80ac528:	4b13      	ldr	r3, [pc, #76]	; (80ac578 <rand+0x50>)
 80ac52a:	b510      	push	{r4, lr}
 80ac52c:	681c      	ldr	r4, [r3, #0]
 80ac52e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80ac530:	b97b      	cbnz	r3, 80ac552 <rand+0x2a>
 80ac532:	2018      	movs	r0, #24
 80ac534:	f7f9 f9b4 	bl	80a58a0 <malloc>
 80ac538:	4a10      	ldr	r2, [pc, #64]	; (80ac57c <rand+0x54>)
 80ac53a:	4b11      	ldr	r3, [pc, #68]	; (80ac580 <rand+0x58>)
 80ac53c:	63a0      	str	r0, [r4, #56]	; 0x38
 80ac53e:	e9c0 2300 	strd	r2, r3, [r0]
 80ac542:	4b10      	ldr	r3, [pc, #64]	; (80ac584 <rand+0x5c>)
 80ac544:	2201      	movs	r2, #1
 80ac546:	6083      	str	r3, [r0, #8]
 80ac548:	230b      	movs	r3, #11
 80ac54a:	8183      	strh	r3, [r0, #12]
 80ac54c:	2300      	movs	r3, #0
 80ac54e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80ac552:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80ac554:	480c      	ldr	r0, [pc, #48]	; (80ac588 <rand+0x60>)
 80ac556:	690a      	ldr	r2, [r1, #16]
 80ac558:	694b      	ldr	r3, [r1, #20]
 80ac55a:	4350      	muls	r0, r2
 80ac55c:	4c0b      	ldr	r4, [pc, #44]	; (80ac58c <rand+0x64>)
 80ac55e:	fb04 0003 	mla	r0, r4, r3, r0
 80ac562:	fba2 3404 	umull	r3, r4, r2, r4
 80ac566:	1c5a      	adds	r2, r3, #1
 80ac568:	4404      	add	r4, r0
 80ac56a:	f144 0000 	adc.w	r0, r4, #0
 80ac56e:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80ac572:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80ac576:	bd10      	pop	{r4, pc}
 80ac578:	20000008 	.word	0x20000008
 80ac57c:	abcd330e 	.word	0xabcd330e
 80ac580:	e66d1234 	.word	0xe66d1234
 80ac584:	0005deec 	.word	0x0005deec
 80ac588:	5851f42d 	.word	0x5851f42d
 80ac58c:	4c957f2d 	.word	0x4c957f2d

080ac590 <strchr>:
 80ac590:	4603      	mov	r3, r0
 80ac592:	b2c9      	uxtb	r1, r1
 80ac594:	4618      	mov	r0, r3
 80ac596:	f813 2b01 	ldrb.w	r2, [r3], #1
 80ac59a:	b112      	cbz	r2, 80ac5a2 <strchr+0x12>
 80ac59c:	428a      	cmp	r2, r1
 80ac59e:	d1f9      	bne.n	80ac594 <strchr+0x4>
 80ac5a0:	4770      	bx	lr
 80ac5a2:	2900      	cmp	r1, #0
 80ac5a4:	bf18      	it	ne
 80ac5a6:	2000      	movne	r0, #0
 80ac5a8:	4770      	bx	lr

080ac5aa <strcmp>:
 80ac5aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80ac5ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80ac5b2:	2a01      	cmp	r2, #1
 80ac5b4:	bf28      	it	cs
 80ac5b6:	429a      	cmpcs	r2, r3
 80ac5b8:	d0f7      	beq.n	80ac5aa <strcmp>
 80ac5ba:	1ad0      	subs	r0, r2, r3
 80ac5bc:	4770      	bx	lr

080ac5be <strcpy>:
 80ac5be:	4603      	mov	r3, r0
 80ac5c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80ac5c4:	f803 2b01 	strb.w	r2, [r3], #1
 80ac5c8:	2a00      	cmp	r2, #0
 80ac5ca:	d1f9      	bne.n	80ac5c0 <strcpy+0x2>
 80ac5cc:	4770      	bx	lr
	...

080ac5d0 <strdup>:
 80ac5d0:	4b02      	ldr	r3, [pc, #8]	; (80ac5dc <strdup+0xc>)
 80ac5d2:	4601      	mov	r1, r0
 80ac5d4:	6818      	ldr	r0, [r3, #0]
 80ac5d6:	f000 b803 	b.w	80ac5e0 <_strdup_r>
 80ac5da:	bf00      	nop
 80ac5dc:	20000008 	.word	0x20000008

080ac5e0 <_strdup_r>:
 80ac5e0:	b570      	push	{r4, r5, r6, lr}
 80ac5e2:	4604      	mov	r4, r0
 80ac5e4:	4608      	mov	r0, r1
 80ac5e6:	460d      	mov	r5, r1
 80ac5e8:	f000 f80d 	bl	80ac606 <strlen>
 80ac5ec:	1c46      	adds	r6, r0, #1
 80ac5ee:	4631      	mov	r1, r6
 80ac5f0:	4620      	mov	r0, r4
 80ac5f2:	f7f9 f97d 	bl	80a58f0 <_malloc_r>
 80ac5f6:	4604      	mov	r4, r0
 80ac5f8:	b118      	cbz	r0, 80ac602 <_strdup_r+0x22>
 80ac5fa:	4632      	mov	r2, r6
 80ac5fc:	4629      	mov	r1, r5
 80ac5fe:	f7ff ff3f 	bl	80ac480 <memcpy>
 80ac602:	4620      	mov	r0, r4
 80ac604:	bd70      	pop	{r4, r5, r6, pc}

080ac606 <strlen>:
 80ac606:	4603      	mov	r3, r0
 80ac608:	f813 2b01 	ldrb.w	r2, [r3], #1
 80ac60c:	2a00      	cmp	r2, #0
 80ac60e:	d1fb      	bne.n	80ac608 <strlen+0x2>
 80ac610:	1a18      	subs	r0, r3, r0
 80ac612:	3801      	subs	r0, #1
 80ac614:	4770      	bx	lr

080ac616 <strncmp>:
 80ac616:	b510      	push	{r4, lr}
 80ac618:	b16a      	cbz	r2, 80ac636 <strncmp+0x20>
 80ac61a:	3901      	subs	r1, #1
 80ac61c:	1884      	adds	r4, r0, r2
 80ac61e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80ac622:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80ac626:	4293      	cmp	r3, r2
 80ac628:	d103      	bne.n	80ac632 <strncmp+0x1c>
 80ac62a:	42a0      	cmp	r0, r4
 80ac62c:	d001      	beq.n	80ac632 <strncmp+0x1c>
 80ac62e:	2b00      	cmp	r3, #0
 80ac630:	d1f5      	bne.n	80ac61e <strncmp+0x8>
 80ac632:	1a98      	subs	r0, r3, r2
 80ac634:	bd10      	pop	{r4, pc}
 80ac636:	4610      	mov	r0, r2
 80ac638:	e7fc      	b.n	80ac634 <strncmp+0x1e>
	...

080ac63c <_strtol_l.isra.0>:
 80ac63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80ac640:	468c      	mov	ip, r1
 80ac642:	4686      	mov	lr, r0
 80ac644:	4e39      	ldr	r6, [pc, #228]	; (80ac72c <_strtol_l.isra.0+0xf0>)
 80ac646:	4660      	mov	r0, ip
 80ac648:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80ac64c:	5da5      	ldrb	r5, [r4, r6]
 80ac64e:	f015 0508 	ands.w	r5, r5, #8
 80ac652:	d1f8      	bne.n	80ac646 <_strtol_l.isra.0+0xa>
 80ac654:	2c2d      	cmp	r4, #45	; 0x2d
 80ac656:	d133      	bne.n	80ac6c0 <_strtol_l.isra.0+0x84>
 80ac658:	f04f 0801 	mov.w	r8, #1
 80ac65c:	f89c 4000 	ldrb.w	r4, [ip]
 80ac660:	f100 0c02 	add.w	ip, r0, #2
 80ac664:	2b00      	cmp	r3, #0
 80ac666:	d05c      	beq.n	80ac722 <_strtol_l.isra.0+0xe6>
 80ac668:	2b10      	cmp	r3, #16
 80ac66a:	d10c      	bne.n	80ac686 <_strtol_l.isra.0+0x4a>
 80ac66c:	2c30      	cmp	r4, #48	; 0x30
 80ac66e:	d10a      	bne.n	80ac686 <_strtol_l.isra.0+0x4a>
 80ac670:	f89c 0000 	ldrb.w	r0, [ip]
 80ac674:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80ac678:	2858      	cmp	r0, #88	; 0x58
 80ac67a:	d14d      	bne.n	80ac718 <_strtol_l.isra.0+0xdc>
 80ac67c:	2310      	movs	r3, #16
 80ac67e:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80ac682:	f10c 0c02 	add.w	ip, ip, #2
 80ac686:	2600      	movs	r6, #0
 80ac688:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80ac68c:	3f01      	subs	r7, #1
 80ac68e:	fbb7 f9f3 	udiv	r9, r7, r3
 80ac692:	4630      	mov	r0, r6
 80ac694:	fb03 7a19 	mls	sl, r3, r9, r7
 80ac698:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80ac69c:	2d09      	cmp	r5, #9
 80ac69e:	d818      	bhi.n	80ac6d2 <_strtol_l.isra.0+0x96>
 80ac6a0:	462c      	mov	r4, r5
 80ac6a2:	42a3      	cmp	r3, r4
 80ac6a4:	dd24      	ble.n	80ac6f0 <_strtol_l.isra.0+0xb4>
 80ac6a6:	1c75      	adds	r5, r6, #1
 80ac6a8:	d007      	beq.n	80ac6ba <_strtol_l.isra.0+0x7e>
 80ac6aa:	4581      	cmp	r9, r0
 80ac6ac:	d31d      	bcc.n	80ac6ea <_strtol_l.isra.0+0xae>
 80ac6ae:	d101      	bne.n	80ac6b4 <_strtol_l.isra.0+0x78>
 80ac6b0:	45a2      	cmp	sl, r4
 80ac6b2:	db1a      	blt.n	80ac6ea <_strtol_l.isra.0+0xae>
 80ac6b4:	2601      	movs	r6, #1
 80ac6b6:	fb00 4003 	mla	r0, r0, r3, r4
 80ac6ba:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80ac6be:	e7eb      	b.n	80ac698 <_strtol_l.isra.0+0x5c>
 80ac6c0:	2c2b      	cmp	r4, #43	; 0x2b
 80ac6c2:	bf08      	it	eq
 80ac6c4:	f89c 4000 	ldrbeq.w	r4, [ip]
 80ac6c8:	46a8      	mov	r8, r5
 80ac6ca:	bf08      	it	eq
 80ac6cc:	f100 0c02 	addeq.w	ip, r0, #2
 80ac6d0:	e7c8      	b.n	80ac664 <_strtol_l.isra.0+0x28>
 80ac6d2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80ac6d6:	2d19      	cmp	r5, #25
 80ac6d8:	d801      	bhi.n	80ac6de <_strtol_l.isra.0+0xa2>
 80ac6da:	3c37      	subs	r4, #55	; 0x37
 80ac6dc:	e7e1      	b.n	80ac6a2 <_strtol_l.isra.0+0x66>
 80ac6de:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80ac6e2:	2d19      	cmp	r5, #25
 80ac6e4:	d804      	bhi.n	80ac6f0 <_strtol_l.isra.0+0xb4>
 80ac6e6:	3c57      	subs	r4, #87	; 0x57
 80ac6e8:	e7db      	b.n	80ac6a2 <_strtol_l.isra.0+0x66>
 80ac6ea:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80ac6ee:	e7e4      	b.n	80ac6ba <_strtol_l.isra.0+0x7e>
 80ac6f0:	1c73      	adds	r3, r6, #1
 80ac6f2:	d106      	bne.n	80ac702 <_strtol_l.isra.0+0xc6>
 80ac6f4:	2322      	movs	r3, #34	; 0x22
 80ac6f6:	4638      	mov	r0, r7
 80ac6f8:	f8ce 3000 	str.w	r3, [lr]
 80ac6fc:	b942      	cbnz	r2, 80ac710 <_strtol_l.isra.0+0xd4>
 80ac6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80ac702:	f1b8 0f00 	cmp.w	r8, #0
 80ac706:	d000      	beq.n	80ac70a <_strtol_l.isra.0+0xce>
 80ac708:	4240      	negs	r0, r0
 80ac70a:	2a00      	cmp	r2, #0
 80ac70c:	d0f7      	beq.n	80ac6fe <_strtol_l.isra.0+0xc2>
 80ac70e:	b10e      	cbz	r6, 80ac714 <_strtol_l.isra.0+0xd8>
 80ac710:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80ac714:	6011      	str	r1, [r2, #0]
 80ac716:	e7f2      	b.n	80ac6fe <_strtol_l.isra.0+0xc2>
 80ac718:	2430      	movs	r4, #48	; 0x30
 80ac71a:	2b00      	cmp	r3, #0
 80ac71c:	d1b3      	bne.n	80ac686 <_strtol_l.isra.0+0x4a>
 80ac71e:	2308      	movs	r3, #8
 80ac720:	e7b1      	b.n	80ac686 <_strtol_l.isra.0+0x4a>
 80ac722:	2c30      	cmp	r4, #48	; 0x30
 80ac724:	d0a4      	beq.n	80ac670 <_strtol_l.isra.0+0x34>
 80ac726:	230a      	movs	r3, #10
 80ac728:	e7ad      	b.n	80ac686 <_strtol_l.isra.0+0x4a>
 80ac72a:	bf00      	nop
 80ac72c:	080aded1 	.word	0x080aded1

080ac730 <strtol>:
 80ac730:	4613      	mov	r3, r2
 80ac732:	460a      	mov	r2, r1
 80ac734:	4601      	mov	r1, r0
 80ac736:	4802      	ldr	r0, [pc, #8]	; (80ac740 <strtol+0x10>)
 80ac738:	6800      	ldr	r0, [r0, #0]
 80ac73a:	f7ff bf7f 	b.w	80ac63c <_strtol_l.isra.0>
 80ac73e:	bf00      	nop
 80ac740:	20000008 	.word	0x20000008

080ac744 <_strtoul_l.isra.0>:
 80ac744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80ac748:	468c      	mov	ip, r1
 80ac74a:	4686      	mov	lr, r0
 80ac74c:	4e3a      	ldr	r6, [pc, #232]	; (80ac838 <_strtoul_l.isra.0+0xf4>)
 80ac74e:	4660      	mov	r0, ip
 80ac750:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80ac754:	5da5      	ldrb	r5, [r4, r6]
 80ac756:	f015 0508 	ands.w	r5, r5, #8
 80ac75a:	d1f8      	bne.n	80ac74e <_strtoul_l.isra.0+0xa>
 80ac75c:	2c2d      	cmp	r4, #45	; 0x2d
 80ac75e:	d134      	bne.n	80ac7ca <_strtoul_l.isra.0+0x86>
 80ac760:	f04f 0801 	mov.w	r8, #1
 80ac764:	f89c 4000 	ldrb.w	r4, [ip]
 80ac768:	f100 0c02 	add.w	ip, r0, #2
 80ac76c:	2b00      	cmp	r3, #0
 80ac76e:	d05e      	beq.n	80ac82e <_strtoul_l.isra.0+0xea>
 80ac770:	2b10      	cmp	r3, #16
 80ac772:	d10c      	bne.n	80ac78e <_strtoul_l.isra.0+0x4a>
 80ac774:	2c30      	cmp	r4, #48	; 0x30
 80ac776:	d10a      	bne.n	80ac78e <_strtoul_l.isra.0+0x4a>
 80ac778:	f89c 0000 	ldrb.w	r0, [ip]
 80ac77c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80ac780:	2858      	cmp	r0, #88	; 0x58
 80ac782:	d14f      	bne.n	80ac824 <_strtoul_l.isra.0+0xe0>
 80ac784:	2310      	movs	r3, #16
 80ac786:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80ac78a:	f10c 0c02 	add.w	ip, ip, #2
 80ac78e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80ac792:	fbb7 f7f3 	udiv	r7, r7, r3
 80ac796:	2500      	movs	r5, #0
 80ac798:	fb03 f907 	mul.w	r9, r3, r7
 80ac79c:	4628      	mov	r0, r5
 80ac79e:	ea6f 0909 	mvn.w	r9, r9
 80ac7a2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80ac7a6:	2e09      	cmp	r6, #9
 80ac7a8:	d818      	bhi.n	80ac7dc <_strtoul_l.isra.0+0x98>
 80ac7aa:	4634      	mov	r4, r6
 80ac7ac:	42a3      	cmp	r3, r4
 80ac7ae:	dd24      	ble.n	80ac7fa <_strtoul_l.isra.0+0xb6>
 80ac7b0:	2d00      	cmp	r5, #0
 80ac7b2:	db1f      	blt.n	80ac7f4 <_strtoul_l.isra.0+0xb0>
 80ac7b4:	4287      	cmp	r7, r0
 80ac7b6:	d31d      	bcc.n	80ac7f4 <_strtoul_l.isra.0+0xb0>
 80ac7b8:	d101      	bne.n	80ac7be <_strtoul_l.isra.0+0x7a>
 80ac7ba:	45a1      	cmp	r9, r4
 80ac7bc:	db1a      	blt.n	80ac7f4 <_strtoul_l.isra.0+0xb0>
 80ac7be:	2501      	movs	r5, #1
 80ac7c0:	fb00 4003 	mla	r0, r0, r3, r4
 80ac7c4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80ac7c8:	e7eb      	b.n	80ac7a2 <_strtoul_l.isra.0+0x5e>
 80ac7ca:	2c2b      	cmp	r4, #43	; 0x2b
 80ac7cc:	bf08      	it	eq
 80ac7ce:	f89c 4000 	ldrbeq.w	r4, [ip]
 80ac7d2:	46a8      	mov	r8, r5
 80ac7d4:	bf08      	it	eq
 80ac7d6:	f100 0c02 	addeq.w	ip, r0, #2
 80ac7da:	e7c7      	b.n	80ac76c <_strtoul_l.isra.0+0x28>
 80ac7dc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80ac7e0:	2e19      	cmp	r6, #25
 80ac7e2:	d801      	bhi.n	80ac7e8 <_strtoul_l.isra.0+0xa4>
 80ac7e4:	3c37      	subs	r4, #55	; 0x37
 80ac7e6:	e7e1      	b.n	80ac7ac <_strtoul_l.isra.0+0x68>
 80ac7e8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80ac7ec:	2e19      	cmp	r6, #25
 80ac7ee:	d804      	bhi.n	80ac7fa <_strtoul_l.isra.0+0xb6>
 80ac7f0:	3c57      	subs	r4, #87	; 0x57
 80ac7f2:	e7db      	b.n	80ac7ac <_strtoul_l.isra.0+0x68>
 80ac7f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80ac7f8:	e7e4      	b.n	80ac7c4 <_strtoul_l.isra.0+0x80>
 80ac7fa:	2d00      	cmp	r5, #0
 80ac7fc:	da07      	bge.n	80ac80e <_strtoul_l.isra.0+0xca>
 80ac7fe:	2322      	movs	r3, #34	; 0x22
 80ac800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80ac804:	f8ce 3000 	str.w	r3, [lr]
 80ac808:	b942      	cbnz	r2, 80ac81c <_strtoul_l.isra.0+0xd8>
 80ac80a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80ac80e:	f1b8 0f00 	cmp.w	r8, #0
 80ac812:	d000      	beq.n	80ac816 <_strtoul_l.isra.0+0xd2>
 80ac814:	4240      	negs	r0, r0
 80ac816:	2a00      	cmp	r2, #0
 80ac818:	d0f7      	beq.n	80ac80a <_strtoul_l.isra.0+0xc6>
 80ac81a:	b10d      	cbz	r5, 80ac820 <_strtoul_l.isra.0+0xdc>
 80ac81c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80ac820:	6011      	str	r1, [r2, #0]
 80ac822:	e7f2      	b.n	80ac80a <_strtoul_l.isra.0+0xc6>
 80ac824:	2430      	movs	r4, #48	; 0x30
 80ac826:	2b00      	cmp	r3, #0
 80ac828:	d1b1      	bne.n	80ac78e <_strtoul_l.isra.0+0x4a>
 80ac82a:	2308      	movs	r3, #8
 80ac82c:	e7af      	b.n	80ac78e <_strtoul_l.isra.0+0x4a>
 80ac82e:	2c30      	cmp	r4, #48	; 0x30
 80ac830:	d0a2      	beq.n	80ac778 <_strtoul_l.isra.0+0x34>
 80ac832:	230a      	movs	r3, #10
 80ac834:	e7ab      	b.n	80ac78e <_strtoul_l.isra.0+0x4a>
 80ac836:	bf00      	nop
 80ac838:	080aded1 	.word	0x080aded1

080ac83c <strtoul>:
 80ac83c:	4613      	mov	r3, r2
 80ac83e:	460a      	mov	r2, r1
 80ac840:	4601      	mov	r1, r0
 80ac842:	4802      	ldr	r0, [pc, #8]	; (80ac84c <strtoul+0x10>)
 80ac844:	6800      	ldr	r0, [r0, #0]
 80ac846:	f7ff bf7d 	b.w	80ac744 <_strtoul_l.isra.0>
 80ac84a:	bf00      	nop
 80ac84c:	20000008 	.word	0x20000008

080ac850 <dynalib_user>:
 80ac850:	080a0021 080a0061 080a0089 080a008d     !...a...........
 80ac860:	00000000                                ....

080ac864 <_ZL11COLOR_TABLE>:
 80ac864:	00000019 00000032 0000004b 00000032     ....2...K...2...
 80ac874:	00000064 00000096 0000004b 00000096     d.......K.......
 80ac884:	000000e1 00000064 000000c8 0000002e     ....d...........
 80ac894:	0000007d 000000fa 00000079 00000096     }.......y.......
 80ac8a4:	0000002e 000000c4 000000af 00000060     ............`...
 80ac8b4:	00000011 000000c8 00000092 0000005c     ............\...
 80ac8c4:	000000e1 000000c4 000000a7 000000fa     ................
 80ac8d4:	000000f6 000000f2 00000015 0000002a     ............*...
 80ac8e4:	0000003f 0000002e 0000005c 0000008a     ?.......\.......
 80ac8f4:	00000047 0000008e 000000d5 00000060     G...........`...
 80ac904:	000000c0 00000022 00000079 000000f2     ...."...y.......
 80ac914:	0000006d 00000092 00000026 000000b8     m.......&.......
 80ac924:	000000ab 00000058 00000005 000000c4     ....X...........
 80ac934:	0000008a 00000050 000000dd 000000bc     ....P...........
 80ac944:	0000009b 000000f6 000000ee 000000e6     ................
 80ac954:	00000011 00000022 00000033 0000002a     ...."...3...*...
 80ac964:	00000054 0000007e 00000043 00000086     T...~...C.......
 80ac974:	000000c9 0000005c 000000b8 00000016     ....\...........
 80ac984:	00000075 000000ea 00000061 0000008e     u.......a.......
 80ac994:	0000001e 000000ac 000000a7 00000050     ............P...
 80ac9a4:	000000f7 000000c0 00000082 00000044     ............D...
 80ac9b4:	000000d9 000000b4 0000008f 000000f2     ................
 80ac9c4:	000000e6 000000da 0000000d 0000001a     ................
 80ac9d4:	00000027 00000026 0000004c 00000072     '...&...L...r...
 80ac9e4:	0000003f 0000007e 000000bd 00000058     ?...~.......X...
 80ac9f4:	000000b0 0000000a 00000071 000000e2     ........q.......
 80aca04:	00000055 0000008a 00000016 000000a0     U...............
 80aca14:	000000a3 00000048 000000eb 000000bc     ....H...........
 80aca24:	0000007a 00000038 000000d5 000000ac     z...8...........
 80aca34:	00000083 000000ee 000000de 000000ce     ................
 80aca44:	00000009 00000012 0000001b 00000022     ............"...
 80aca54:	00000044 00000066 0000003b 00000076     D...f...;...v...
 80aca64:	000000b1 00000054 000000a8 000000fc     ....T...........
 80aca74:	0000006d 000000da 00000049 00000086     m.......I.......
 80aca84:	0000000e 00000094 0000009f 00000040     ............@...
 80aca94:	000000df 000000b8 00000072 0000002c     ........r...,...
 80acaa4:	000000d1 000000a4 00000077 000000ea     ........w.......
 80acab4:	000000d6 000000c2 61636f6c 6b4f006c     ........local.Ok
 80acac4:	73756d00 69540065 31736b63 46007330     .muse.Ticks10s.F
 80acad4:	656d6172 73303173 4c002e00 6c61636f     rames10s...Local
 80acae4:	                                         IP.

080acae7 <_ZL11matrix_pins>:
 80acae7:	01020304 07121300 65740506 682f7478     ..........text/h
 80acaf7:	3b6c6d74 61686320 74657372 6674753d     tml; charset=utf
 80acb07:	7600382d 61757369 657a696c 746f0072     -8.visualizer.ot
 80acb17:	00726568 65776f70 772f0072 695f6265     her.power./web_i
 80acb27:	7475706e 41706900 65726464 25007373     nput.ipAddress.%
 80acb37:	64252e64 2e64252e                        d.%d.%d.%d.

080acb42 <_ZL13control_panel>:
 80acb42:	4f44213c 50595443 74682045 3c3e6c6d     <!DOCTYPE html><
 80acb52:	6c6d7468 65683c3e 3c3e6461 6c746974     html><head><titl
 80acb62:	554d3e65 43204553 72746e6f 50206c6f     e>MUSE Control P
 80acb72:	6c656e61 69742f3c 3e656c74 6e696c3c     anel</title><lin
 80acb82:	7268206b 273d6665 70747468 612f2f3a     k href='http://a
 80acb92:	2e78616a 676f6f67 7061656c 632e7369     jax.googleapis.c
 80acba2:	612f6d6f 2f78616a 7362696c 75716a2f     om/ajax/libs/jqu
 80acbb2:	75797265 2e312f69 36312e38 6568742f     eryui/1.8.16/the
 80acbc2:	2f73656d 65736162 75716a2f 2d797265     mes/base/jquery-
 80acbd2:	632e6975 20277373 3d6c6572 6c797473     ui.css' rel=styl
 80acbe2:	65687365 2f207465 63733c3e 74706972     esheet /><script
 80acbf2:	63727320 7468273d 2f3a7074 616a612f      src='http://aja
 80acc02:	6f672e78 656c676f 73697061 6d6f632e     x.googleapis.com
 80acc12:	616a612f 696c2f78 6a2f7362 72657571     /ajax/libs/jquer
 80acc22:	2e312f79 2f342e36 6575716a 6d2e7972     y/1.6.4/jquery.m
 80acc32:	6a2e6e69 3c3e2773 7263732f 3e747069     in.js'></script>
 80acc42:	7263733c 20747069 3d637273 74746827     <script src='htt
 80acc52:	2f2f3a70 78616a61 6f6f672e 61656c67     p://ajax.googlea
 80acc62:	2e736970 2f6d6f63 78616a61 62696c2f     pis.com/ajax/lib
 80acc72:	716a2f73 79726575 312f6975 312e382e     s/jqueryui/1.8.1
 80acc82:	716a2f36 79726575 2e69752d 2e6e696d     6/jquery-ui.min.
 80acc92:	3e27736a 63732f3c 74706972 74733c3e     js'></script><st
 80acca2:	3e656c79 79646f62 61627b20 72676b63     yle>body {backgr
 80accb2:	646e756f 6c6f632d 203a726f 31613123     ound-color: #1a1
 80accc2:	3b613161 746e6f66 6d61662d 3a796c69     a1a;font-family:
 80accd2:	6e617320 65732d73 3b666972 74786574      sans-serif;text
 80acce2:	696c612d 203a6e67 746e6563 7d3b7265     -align: center;}
 80accf2:	7b203168 6f6c6f63 23203a72 65656565     h1 {color: #eeee
 80acd02:	743b6565 2d747865 67696c61 63203a6e     ee;text-align: c
 80acd12:	65746e65 647d3b72 7b207669 70736964     enter;}div {disp
 80acd22:	3a79616c 6c6e6920 2d656e69 636f6c62     lay: inline-bloc
 80acd32:	69773b6b 3a687464 25303620 75627d3b     k;width: 60%;}bu
 80acd42:	6e6f7474 61627b20 72676b63 646e756f     tton {background
 80acd52:	6c6f632d 203a726f 31613123 3b613161     -color: #1a1a1a;
 80acd62:	64726f62 632d7265 726f6c6f 3323203a     border-color: #3
 80acd72:	33333333 6f633b33 3a726f6c 65652320     33333;color: #ee
 80acd82:	65656565 6e6f663b 69732d74 203a657a     eeee;font-size: 
 80acd92:	78703432 7865743b 6c612d74 3a6e6769     24px;text-align:
 80acda2:	66656c20 627d3b74 6f747475 6f683a6e      left;}button:ho
 80acdb2:	20726576 6361627b 6f72676b 2d646e75     ver {background-
 80acdc2:	6f6c6f63 23203a72 33333333 623b3333     color: #333333;b
 80acdd2:	6564726f 6f632d72 3a726f6c 34342320     order-color: #44
 80acde2:	34343434 2f3c7d3b 6c797473 6d3c3e65     4444;}</style><m
 80acdf2:	20617465 273d6469 6174656d 616e2027     eta id='meta' na
 80ace02:	273d656d 77656976 74726f70 6f632027     me='viewport' co
 80ace12:	6e65746e 68273d74 68676965 65643d74     ntent='height=de
 80ace22:	65636976 6965682d 2c746867 696e6920     vice-height, ini
 80ace32:	6c616974 6163732d 313d656c 2027302e     tial-scale=1.0' 
 80ace42:	733c3e2f 70697263 28243e74 75636f64     /><script>$(docu
 80ace52:	746e656d 65722e29 28796461 636e7566     ment).ready(func
 80ace62:	6e6f6974 7b202928 23272824 75736976     tion() {$('#visu
 80ace72:	7a696c61 645f7265 623e7669 6f747475     alizer_div>butto
 80ace82:	2e29276e 63696c63 7566286b 6974636e     n').click(functi
 80ace92:	65286e6f 746e6576 2e247b29 74736f70     on(event){$.post
 80acea2:	772f2728 695f6265 7475706e 7b202c27     ('/web_input', {
 80aceb2:	75736976 7a696c61 203a7265 6e657665     visualizer: even
 80acec2:	61742e74 74656772 6c61762e 297d6575     t.target.value})
 80aced2:	2c297d3b 23272824 6568746f 69645f72     ;}),$('#other_di
 80acee2:	75623e76 6e6f7474 632e2927 6b63696c     v>button').click
 80acef2:	6e756628 6f697463 7665286e 29746e65     (function(event)
 80acf02:	702e247b 2874736f 65772f27 6e695f62     {$.post('/web_in
 80acf12:	27747570 6f7b202c 72656874 7665203a     put', {other: ev
 80acf22:	2e746e65 67726174 762e7465 65756c61     ent.target.value
 80acf32:	7d3b297d 28242c29 6f702327 5f726577     });}),$('#power_
 80acf42:	3e766964 74747562 29276e6f 696c632e     div>button').cli
 80acf52:	66286b63 74636e75 286e6f69 6e657665     ck(function(even
 80acf62:	247b2974 736f702e 2f272874 5f626577     t){$.post('/web_
 80acf72:	75706e69 202c2774 776f707b 203a7265     input', {power: 
 80acf82:	6e657665 61742e74 74656772 6c61762e     event.target.val
 80acf92:	297d6575 7d297d3b 2f3c3b29 69726373     ue});})});</scri
 80acfa2:	3c3e7470 6165682f 623c3e64 3e79646f     pt></head><body>
 80acfb2:	7669643c 3d646920 73697627 696c6175     <div id='visuali
 80acfc2:	5f72657a 27766964 31683c3e 7369563e     zer_div'><h1>Vis
 80acfd2:	696c6175 7372657a 31682f3c 75623c3e     ualizers</h1><bu
 80acfe2:	6e6f7474 6c617620 273d6575 423e2730     tton value='0'>B
 80acff2:	3c737261 7475622f 3e6e6f74 7475623c     ars</button><but
 80ad002:	206e6f74 756c6176 31273d65 61423e27     ton value='1'>Ba
 80ad012:	4d207372 6c646469 622f3c65 6f747475     rs Middle</butto
 80ad022:	623c3e6e 6f747475 6176206e 3d65756c     n><button value=
 80ad032:	3e273227 73616c50 2f3c616d 74747562     '2'>Plasma</butt
 80ad042:	3c3e6e6f 74747562 76206e6f 65756c61     on><button value
 80ad052:	2734273d 6961523e 776f626e 75622f3c     ='4'>Rainbow</bu
 80ad062:	6e6f7474 75623c3e 6e6f7474 6c617620     tton><button val
 80ad072:	273d6575 573e2735 6c656568 75622f3c     ue='5'>Wheel</bu
 80ad082:	6e6f7474 75623c3e 6e6f7474 6c617620     tton><button val
 80ad092:	273d6575 433e2736 7373616c 2f3c6369     ue='6'>Classic</
 80ad0a2:	74747562 3c3e6e6f 74747562 76206e6f     button><button v
 80ad0b2:	65756c61 2737273d 6e6f503e 622f3c67     alue='7'>Pong</b
 80ad0c2:	6f747475 2f3c3e6e 3e766964 3e72623c     utton></div><br>
 80ad0d2:	3e72623c 7669643c 3d646920 68746f27     <br><div id='oth
 80ad0e2:	645f7265 3e277669 3e31683c 6568744f     er_div'><h1>Othe
 80ad0f2:	2f3c7372 3c3e3168 74747562 76206e6f     rs</h1><button v
 80ad102:	65756c61 3636273d 6d413e27 6e656962     alue='66'>Ambien
 80ad112:	694c2074 3c746867 7475622f 3e6e6f74     t Light</button>
 80ad122:	7475623c 206e6f74 756c6176 37273d65     <button value='7
 80ad132:	423e2737 636e756f 20676e69 656e694c     7'>Bouncing Line
 80ad142:	622f3c73 6f747475 623c3e6e 6f747475     s</button><butto
 80ad152:	6176206e 3d65756c 27383827 7261423e     n value='88'>Bar
 80ad162:	73655420 622f3c74 6f747475 623c3e6e      Test</button><b
 80ad172:	6f747475 6176206e 3d65756c 27393927     utton value='99'
 80ad182:	7869503e 54206c65 3c747365 7475622f     >Pixel Test</but
 80ad192:	3e6e6f74 69642f3c 623c3e76 623c3e72     ton></div><br><b
 80ad1a2:	643c3e72 69207669 70273d64 7265776f     r><div id='power
 80ad1b2:	7669645f 683c3e27 6f503e31 3c726577     _div'><h1>Power<
 80ad1c2:	3e31682f 7475623c 206e6f74 756c6176     /h1><button valu
 80ad1d2:	31273d65 6f503e27 20726577 2f3c6e4f     e='1'>Power On</
 80ad1e2:	74747562 3c3e6e6f 74747562 76206e6f     button><button v
 80ad1f2:	65756c61 2730273d 776f503e 4f207265     alue='0'>Power O
 80ad202:	2f3c6666 74747562 3c3e6e6f 7669642f     ff</button></div
 80ad212:	622f3c3e 3e79646f 74682f3c 003e6c6d     ></body></html>.
	...

080ad224 <_ZTV5Label>:
	...
 80ad22c:	080a3f93                                .?..

080ad230 <_ZTV9HostLabel>:
	...
 80ad238:	080a3f95 74636576 3a3a726f 725f4d5f     .?..vector::_M_r
 80ad248:	6c6c6165 695f636f 7265736e 6f480074     ealloc_insert.Ho
 80ad258:	616e7473 6120656d 6165726c 73207964     stname already s
 80ad268:	49007465 6c61766e 68206469 6e74736f     et.Invalid hostn
 80ad278:	00656d61 66667542 75207265 7265646e     ame.Buffer under
 80ad288:	776f6c66 20746120 65646e69 00002078     flow at index ..

080ad298 <_ZTV10NSECRecord>:
	...
 80ad2a0:	080a00a9                                ....

080ad2a4 <_ZTV14HostNSECRecord>:
	...
 80ad2ac:	080a4a15                                .J..

080ad2b0 <_ZTV7ARecord>:
	...
 80ad2b8:	080a4a49 74786574 616c702f 43006e69     IJ..text/plain.C
 80ad2c8:	65686361 6e6f432d 6c6f7274 616d203a     ache-Control: ma
 80ad2d8:	67612d78 31333d65 30363335 0a0d3030     x-age=31536000..
 80ad2e8:	616d6900 782f6567 6f63692d 4547006e     .image/x-icon.GE
 80ad2f8:	48002054 20444145 534f5000 50002054     T .HEAD .POST .P
 80ad308:	00205455 454c4544 00204554 43544150     UT .DELETE .PATC
 80ad318:	43002048 65746e6f 4c2d746e 74676e65     H .Content-Lengt
 80ad328:	41003a68 6f687475 617a6972 6e6f6974     h:.Authorization
 80ad338:	0a0d003a 2f000a0d 6f626f72 742e7374     :....../robots.t
 80ad348:	2f007478 69766166 2e6e6f63 006f6369     xt./favicon.ico.

080ad358 <_ZL15webServerHeader>:
 80ad358:	76726553 203a7265 64626557 6f6e6975     Server: Webduino
 80ad368:	372e312f 00000a0d                       /1.7....

080ad370 <_ZTV9WebServer>:
	...
 80ad378:	080a3e15 080a3e4d 080a4b51 080a4c31     .>..M>..QK..1L..

080ad388 <_ZZN9WebServer11httpSuccessEPKcS1_E11successMsg1>:
 80ad388:	50545448 302e312f 30303220 0d4b4f20     HTTP/1.0 200 OK.
 80ad398:	                                         ..

080ad39a <_ZZN9WebServer11httpSuccessEPKcS1_E11successMsg2>:
 80ad39a:	65636341 432d7373 72746e6f 412d6c6f     Access-Control-A
 80ad3aa:	776f6c6c 69724f2d 3a6e6967 0a0d2a20     llow-Origin: *..
 80ad3ba:	746e6f43 2d746e65 65707954               Content-Type: .

080ad3c9 <_ZZN9WebServer12httpSeeOtherEPKcE12seeOtherMsg1>:
 80ad3c9:	50545448 302e312f 33303320 65655320     HTTP/1.0 303 See
 80ad3d9:	68744f20 0a0d7265                         Other...

080ad3e2 <_ZZN9WebServer12httpSeeOtherEPKcE12seeOtherMsg2>:
 80ad3e2:	61636f4c 6e6f6974                        Location: .

080ad3ed <_ZZN9WebServer7faviconENS_14ConnectionTypeEE10faviconIco>:
 80ad3ed:	00010000 10100001 00010002 00b00001     ................
 80ad3fd:	00160000 00280000 00100000 00200000     ......(....... .
 80ad40d:	00010000 00000001 00000000 00000000     ................
	...
 80ad42d:	00ff0000 ffff0000 ffff0000 ffff0000     ................
 80ad43d:	bfcf0000 bfc70000 bfc30000 bfc10000     ................
 80ad44d:	bfc00000 00000000 bfc00000 bfc10000     ................
 80ad45d:	bfc30000 bfc70000 bfcf0000 ffff0000     ................
 80ad46d:	ffff0000 00000000 00000000 00000000     ................
	...

080ad4b3 <_ZZN9WebServer8httpFailEvE8failMsg1>:
 80ad4b3:	50545448 302e312f 30303420 64614220     HTTP/1.0 400 Bad
 80ad4c3:	71655220 74736575                         Request...

080ad4ce <_ZZN9WebServer8httpFailEvE8failMsg2>:
 80ad4ce:	746e6f43 2d746e65 65707954 6574203a     Content-Type: te
 80ad4de:	682f7478 0d6c6d74 3c0a0d0a 453e3168     xt/html....<h1>E
 80ad4ee:	20434950 4c494146 31682f3c               PIC FAIL</h1>.

080ad4fc <_ZZN9WebServer8noRobotsENS_14ConnectionTypeEE12allowNoneMsg>:
 80ad4fc:	72657355 6567612d 203a746e 440a0d2a     User-agent: *..D
 80ad50c:	6c617369 3a776f6c 0a0d2f20 00000000     isallow: /......

080ad51c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80ad524:	080a594f 080a5955 080a59a5 080a5963     OY..UY...Y..cY..
 80ad534:	080a5951                                QY..

080ad538 <_ZTV7TwoWire>:
	...
 80ad540:	080a5ec9 080a5f13 080a5eeb 080a5ecb     .^..._...^...^..
 80ad550:	080a5ef3 080a5efb 080a5f03 080a5f0b     .^...^..._..._..

080ad560 <_ZTV9IPAddress>:
	...
 80ad568:	080a5f47 080a5f45 080a5f79 00707061     G_..E_..y_..app.

080ad578 <_ZTVN5spark12NetworkClassE>:
	...
 80ad580:	080a6039 080a6043 080a604d 080a6057     9`..C`..M`..W`..
 80ad590:	080a6061 080a606d 080a6079 080a6081     a`..m`..y`...`..
 80ad5a0:	080a6089 080a6095 080a609d 080a60a7     .`...`...`...`..
 80ad5b0:	080a60b1 69726977 5400676e 6c435043     .`..wiring.TCPCl
 80ad5c0:	746e6569 636f7320 3d74656b 00007825     ient socket=%x..

080ad5d0 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80ad5d8:	080a6501 080a6529 080a694b 080a6537     .e..)e..Ki..7e..
 80ad5e8:	080a6505                                .e..

080ad5ec <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080ad5f4 <_ZTV9TCPClient>:
	...
 80ad5fc:	080a653d 080a6571 080a64bd 080a64d7     =e..qe...d...d..
 80ad60c:	080a674d 080a65d3 080a65a5 080a64ff     Mg...e...e...d..
 80ad61c:	080a666d 080a6951 080a6607 080a67c1     mf..Qi...f...g..
 80ad62c:	080a686f 080a6827 080a64e7 080a6835     oh..'h...d..5h..
 80ad63c:	080a6585                                .e..

080ad640 <_ZTV6Stream>:
	...
 80ad650:	080a00a9 080a612d 080a00a9 080a00a9     ....-a..........
 80ad660:	080a00a9 080a00a9                       ........

080ad668 <_ZTV15TCPServerClient>:
	...
 80ad670:	080a6b95 080a6bad 080a64bd 080a64d7     .k...k...d...d..
 80ad680:	080a674d 080a65d3 080a65a5 080a64ff     Mg...e...e...d..
 80ad690:	080a666d 080a6951 080a6607 080a67c1     mf..Qi...f...g..
 80ad6a0:	080a686f 080a6827 080a64e7 080a6835     oh..'h...d..5h..
 80ad6b0:	080a6a13                                .j..

080ad6b4 <_ZTV9TCPServer>:
	...
 80ad6bc:	080a6c59 080a6c7d 080a69d5 080a69ed     Yl..}l...i...i..
 80ad6cc:	080a6ae1 080a69bd 080a69fd 252d5925     .j...i...i..%Y-%
 80ad6dc:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 80ad6ec:	74637361 00656d69                       asctime.

080ad6f4 <_ZTV3UDP>:
	...
 80ad6fc:	080a7151 080a7175 080a6d37 080a6e63     Qq..uq..7m..cn..
 80ad70c:	080a6d2f 080a6d4f 080a6d6d 080a6d87     /m..Om..mm...m..
 80ad71c:	080a6da9 080a6e01 080a6e23 080a6fcd     .m...n..#n...o..
 80ad72c:	080a6ec9 080a6d19 080a70e5 080a6f45     .n...m...p..Eo..
 80ad73c:	080a7005 080a7113 080a6e8d 080a6d25     .p...q...n..%m..
 80ad74c:	080a6fad 080a6d2b 080a6d89 fffffff0     .o..+m...m......
 80ad75c:	00000000 080a6da1                       .....m..

080ad764 <_ZTV11USARTSerial>:
	...
 80ad76c:	080a71d7 080a723f 080a721b 080a612d     .q..?r...r..-a..
 80ad77c:	080a71eb 080a7207 080a71f9 080a7215     .q...r...q...r..
 80ad78c:	080a71d9 080a71dd                       .q...q..

080ad794 <_ZTV9USBSerial>:
	...
 80ad79c:	080a72cd 080a7333 080a730b 080a612d     .r..3s...s..-a..
 80ad7ac:	080a72fd 080a72cf 080a72df 080a732d     .r...r...r..-s..
 80ad7bc:	080a72ef 080a72c9                       .r...r..

080ad7c4 <_ZTVN5spark9WiFiClassE>:
	...
 80ad7cc:	080a7503 080a74f9 080a74ef 080a7461     .u...t...t..at..
 80ad7dc:	080a74e3 080a74d7 080a6079 080a6081     .t...t..y`...`..
 80ad7ec:	080a74cb 080a74c3 080a74b9 080a74af     .t...t...t...t..
 80ad7fc:	080a746b                                kt..

080ad800 <_ZSt7nothrow>:
	...

080ad801 <_ZTSSt19_Sp_make_shared_tag>:
 80ad801:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 80ad811:	5f646572 00676174                        red_tag....

080ad81c <_ZTISt19_Sp_make_shared_tag>:
 80ad81c:	080ad85c 080ad801                       \.......

080ad824 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80ad824:	080ad8bc 080ad830 080ad8e0              ....0.......

080ad830 <_ZTSN10__cxxabiv117__class_type_infoE>:
 80ad830:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 80ad840:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 80ad850:	00000045                                E...

080ad854 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80ad854:	00000000 080ad824 080a7ab5 080a7ac9     ....$....z...z..
 80ad864:	080a7c61 080a7c61 080a7b33 080a7a75     a|..a|..3{..uz..
 80ad874:	080a7b1b 080a7add 080a7aa9              .{...z...z..

080ad880 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80ad880:	080ad8bc 080ad88c 080ad824              ........$...

080ad88c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80ad88c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 80ad89c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 80ad8ac:	456f666e 00000000                       nfoE....

080ad8b4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80ad8b4:	00000000 080ad880 080a7b5d 080a7b71     ........]{..q{..
 80ad8c4:	080a7c61 080a7c61 080a7b33 080a7a75     a|..a|..3{..uz..
 80ad8d4:	080a7c35 080a7bc1 080a7b85              5|...{...{..

080ad8e0 <_ZTISt9type_info>:
 80ad8e0:	080ad85c 080ad8e8                       \.......

080ad8e8 <_ZTSSt9type_info>:
 80ad8e8:	74397453 5f657079 6f666e69 00000000     St9type_info....
 80ad8f8:	00776f70 646f6d66 00000066 66676f6c     pow.fmodf...logf
 80ad908:	00000000                                ....

080ad90c <npio2_hw>:
 80ad90c:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
 80ad91c:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
 80ad92c:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
 80ad93c:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
 80ad94c:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
 80ad95c:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
 80ad96c:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
 80ad97c:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

080ad98c <two_over_pi>:
 80ad98c:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
 80ad99c:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
 80ad9ac:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
 80ad9bc:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
 80ad9cc:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
 80ad9dc:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
 80ad9ec:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
 80ad9fc:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
 80ada0c:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
 80ada1c:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
 80ada2c:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
 80ada3c:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
 80ada4c:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
 80ada5c:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
 80ada6c:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
 80ada7c:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
 80ada8c:	0060e27b 00c08c6b                       {.`.k...

080ada94 <Zero>:
 80ada94:	00000000 80000000                       ........

080ada9c <npio2_hw>:
 80ada9c:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
 80adaac:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
 80adabc:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
 80adacc:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
 80adadc:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
 80adaec:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
 80adafc:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
 80adb0c:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

080adb1c <two_over_pi>:
 80adb1c:	000000a2 000000f9 00000083 0000006e     ............n...
 80adb2c:	0000004e 00000044 00000015 00000029     N...D.......)...
 80adb3c:	000000fc 00000027 00000057 000000d1     ....'...W.......
 80adb4c:	000000f5 00000034 000000dd 000000c0     ....4...........
 80adb5c:	000000db 00000062 00000095 00000099     ....b...........
 80adb6c:	0000003c 00000043 00000090 00000041     <...C.......A...
 80adb7c:	000000fe 00000051 00000063 000000ab     ....Q...c.......
 80adb8c:	000000de 000000bb 000000c5 00000061     ............a...
 80adb9c:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
 80adbac:	00000042 0000004d 000000d2 000000e0     B...M...........
 80adbbc:	00000006 00000049 0000002e 000000ea     ....I...........
 80adbcc:	00000009 000000d1 00000092 0000001c     ................
 80adbdc:	000000fe 0000001d 000000eb 0000001c     ................
 80adbec:	000000b1 00000029 000000a7 0000003e     ....).......>...
 80adbfc:	000000e8 00000082 00000035 000000f5     ........5.......
 80adc0c:	0000002e 000000bb 00000044 00000084     ........D.......
 80adc1c:	000000e9 0000009c 00000070 00000026     ........p...&...
 80adc2c:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
 80adc3c:	00000039 00000091 000000d6 00000039     9...........9...
 80adc4c:	00000083 00000053 00000039 000000f4     ....S...9.......
 80adc5c:	0000009c 00000084 0000005f 0000008b     ........_.......
 80adc6c:	000000bd 000000f9 00000028 0000003b     ........(...;...
 80adc7c:	0000001f 000000f8 00000097 000000ff     ................
 80adc8c:	000000de 00000005 00000098 0000000f     ................
 80adc9c:	000000ef 0000002f 00000011 0000008b     ..../...........
 80adcac:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
 80adcbc:	0000006d 00000036 0000007e 000000cf     m...6...~.......
 80adccc:	00000027 000000cb 00000009 000000b7     '...............
 80adcdc:	0000004f 00000046 0000003f 00000066     O...F...?...f...
 80adcec:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
 80adcfc:	00000075 00000027 000000ba 000000c7     u...'...........
 80add0c:	000000eb 000000e5 000000f1 0000007b     ............{...
 80add1c:	0000003d 00000007 00000039 000000f7     =.......9.......
 80add2c:	0000008a 00000052 00000092 000000ea     ....R...........
 80add3c:	0000006b 000000fb 0000005f 000000b1     k......._.......
 80add4c:	0000001f 0000008d 0000005d 00000008     ........].......
 80add5c:	00000056 00000003 00000030 00000046     V.......0...F...
 80add6c:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
 80add7c:	000000f0 000000cf 000000bc 00000020     ............ ...
 80add8c:	0000009a 000000f4 00000036 0000001d     ........6.......
 80add9c:	000000a9 000000e3 00000091 00000061     ............a...
 80addac:	0000005e 000000e6 0000001b 00000008     ^...............
 80addbc:	00000065 00000099 00000085 0000005f     e..........._...
 80addcc:	00000014 000000a0 00000068 00000040     ........h...@...
 80adddc:	0000008d 000000ff 000000d8 00000080     ................
 80addec:	0000004d 00000073 00000027 00000031     M...s...'...1...
 80addfc:	00000006 00000006 00000015 00000056     ............V...
 80ade0c:	000000ca 00000073 000000a8 000000c9     ....s...........
 80ade1c:	00000060 000000e2 0000007b 000000c0     `.......{.......
 80ade2c:	0000008c 0000006b 00000000              ....k.......

080ade38 <PIo2>:
 80ade38:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
 80ade48:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
 80ade58:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
 80ade68:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

080ade78 <init_jk>:
 80ade78:	00000002 00000003 00000004 00000006     ................

080ade88 <PIo2>:
 80ade88:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
 80ade98:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
 80adea8:	1fc40000 1bc60000 17440000              ..........D.

080adeb4 <init_jk>:
 80adeb4:	00000004 00000007 00000009              ............

080adec0 <TWO52>:
 80adec0:	00000000 43300000 00000000 c3300000     ......0C......0.

080aded0 <_ctype_>:
 80aded0:	20202000 20202020 28282020 20282828     .         ((((( 
 80adee0:	20202020 20202020 20202020 20202020                     
 80adef0:	10108820 10101010 10101010 10101010      ...............
 80adf00:	04040410 04040404 10040404 10101010     ................
 80adf10:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80adf20:	01010101 01010101 01010101 10101010     ................
 80adf30:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80adf40:	02020202 02020202 02020202 10101010     ................
 80adf50:	00000020 00000000 00000000 00000000      ...............
	...

080adfd1 <link_const_variable_data_end>:
 80adfd1:	00          	.byte	0x00
	...

080adfd4 <link_constructors_location>:
 80adfd4:	080a28c1 	.word	0x080a28c1
 80adfd8:	080a3979 	.word	0x080a3979
 80adfdc:	080a3e65 	.word	0x080a3e65
 80adfe0:	080a6029 	.word	0x080a6029
 80adfe4:	080a6119 	.word	0x080a6119
 80adfe8:	080a61f9 	.word	0x080a61f9
 80adfec:	080a6481 	.word	0x080a6481
 80adff0:	080a6d05 	.word	0x080a6d05
 80adff4:	080a750d 	.word	0x080a750d
 80adff8:	080a788d 	.word	0x080a788d

080adffc <link_constructors_end>:
 80adffc:	00000000 	.word	0x00000000
