
/Users/jasonmerlo/Projects/muse/muse/target/3.0.0/photon/muse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000de20  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080ade40  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080ade44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000014b8  2000006c  2000006c  0004006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080adeb0  080adeb0  0003deb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080aded8  080aded8  0003ded8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0024593b  00000000  00000000  0003dedc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000236c4  00000000  00000000  00283817  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002d944  00000000  00000000  002a6edb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c90  00000000  00000000  002d481f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007990  00000000  00000000  002d74af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035f7d  00000000  00000000  002dee3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004f542  00000000  00000000  00314dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ce73c  00000000  00000000  003642fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000085c4  00000000  00000000  00432a3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f00c f951 	bl	80ac2d8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f00c f973 	bl	80ac328 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080ade44 	.word	0x080ade44
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	2000006c 	.word	0x2000006c
 80a0058:	20001524 	.word	0x20001524
 80a005c:	20001524 	.word	0x20001524

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f007 fa3f 	bl	80a74e4 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080ade0c 	.word	0x080ade0c
 80a0084:	080ade34 	.word	0x080ade34

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f002 b96c 	b.w	80a2364 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f002 fa79 	bl	80a2584 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f007 b9e7 	b.w	80a7468 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f005 bb2f 	b.w	80a56fc <malloc>

080a009e <_Znaj>:
 80a009e:	f005 bb2d 	b.w	80a56fc <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f005 bb33 	b.w	80a570c <free>
	...

080a00a8 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a8:	2100      	movs	r1, #0
 80a00aa:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00ac:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00ae:	4a02      	ldr	r2, [pc, #8]	; (80a00b8 <__cxa_pure_virtual+0x10>)
 80a00b0:	f005 fa38 	bl	80a5524 <panic_>
  while (1);
 80a00b4:	e7fe      	b.n	80a00b4 <__cxa_pure_virtual+0xc>
 80a00b6:	bf00      	nop
 80a00b8:	080a5201 	.word	0x080a5201

080a00bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00bc:	7800      	ldrb	r0, [r0, #0]
 80a00be:	fab0 f080 	clz	r0, r0
 80a00c2:	0940      	lsrs	r0, r0, #5
 80a00c4:	4770      	bx	lr

080a00c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c6:	2301      	movs	r3, #1
 80a00c8:	7003      	strb	r3, [r0, #0]
 80a00ca:	4770      	bx	lr

080a00cc <_ZN10Bar_Matrix5decayEd>:
/* ================================================================== *
 * Function: decay
 * Description: slowly fades out matrix values
 * Parameters: [float] factor - decay factor to be multiplied by
 * ================================================================== */
void Bar_Matrix::decay(double factor) {
 80a00cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a00d0:	4692      	mov	sl, r2
 80a00d2:	469b      	mov	fp, r3
 80a00d4:	2600      	movs	r6, #0
    for (char i = 0; i < disp_width; i++) {
        for (char j = 0; j < disp_height; j++) {
            unsigned int color = bars[i]->getPixelColor(j);
 80a00d6:	4f28      	ldr	r7, [pc, #160]	; (80a0178 <_ZN10Bar_Matrix5decayEd+0xac>)
void Bar_Matrix::decay(double factor) {
 80a00d8:	b087      	sub	sp, #28
    for (char i = 0; i < disp_width; i++) {
 80a00da:	4a28      	ldr	r2, [pc, #160]	; (80a017c <_ZN10Bar_Matrix5decayEd+0xb0>)
 80a00dc:	b2f3      	uxtb	r3, r6
 80a00de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80a00e2:	4293      	cmp	r3, r2
 80a00e4:	da44      	bge.n	80a0170 <_ZN10Bar_Matrix5decayEd+0xa4>
            unsigned int color = bars[i]->getPixelColor(j);
 80a00e6:	f04f 0900 	mov.w	r9, #0
 80a00ea:	ea4f 0883 	mov.w	r8, r3, lsl #2
        for (char j = 0; j < disp_height; j++) {
 80a00ee:	4b24      	ldr	r3, [pc, #144]	; (80a0180 <_ZN10Bar_Matrix5decayEd+0xb4>)
 80a00f0:	fa5f f489 	uxtb.w	r4, r9
 80a00f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a00f8:	f109 0901 	add.w	r9, r9, #1
 80a00fc:	429c      	cmp	r4, r3
 80a00fe:	da35      	bge.n	80a016c <_ZN10Bar_Matrix5decayEd+0xa0>
            unsigned int color = bars[i]->getPixelColor(j);
 80a0100:	683b      	ldr	r3, [r7, #0]
 80a0102:	b2a4      	uxth	r4, r4
 80a0104:	f853 0008 	ldr.w	r0, [r3, r8]
 80a0108:	4621      	mov	r1, r4
 80a010a:	f003 fb28 	bl	80a375e <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
 80a010e:	4605      	mov	r5, r0
            bars[i]->setPixelColor(j, (char)(color >> 16) * factor,
            (char)(color >> 8) * factor,
 80a0110:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80a0114:	f00b f9f0 	bl	80ab4f8 <__aeabi_i2d>
 80a0118:	4652      	mov	r2, sl
 80a011a:	465b      	mov	r3, fp
 80a011c:	f00b fa56 	bl	80ab5cc <__aeabi_dmul>
            bars[i]->setPixelColor(j, (char)(color >> 16) * factor,
 80a0120:	f00b fd2c 	bl	80abb7c <__aeabi_d2uiz>
 80a0124:	b2c3      	uxtb	r3, r0
 80a0126:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80a012a:	9303      	str	r3, [sp, #12]
 80a012c:	f00b f9e4 	bl	80ab4f8 <__aeabi_i2d>
 80a0130:	4652      	mov	r2, sl
 80a0132:	465b      	mov	r3, fp
 80a0134:	f00b fa4a 	bl	80ab5cc <__aeabi_dmul>
 80a0138:	f00b fd20 	bl	80abb7c <__aeabi_d2uiz>
 80a013c:	b2c3      	uxtb	r3, r0
 80a013e:	9304      	str	r3, [sp, #16]
 80a0140:	683b      	ldr	r3, [r7, #0]
            (char)(color) * factor);
 80a0142:	b2e8      	uxtb	r0, r5
            bars[i]->setPixelColor(j, (char)(color >> 16) * factor,
 80a0144:	9305      	str	r3, [sp, #20]
            (char)(color) * factor);
 80a0146:	f00b f9d7 	bl	80ab4f8 <__aeabi_i2d>
 80a014a:	4652      	mov	r2, sl
 80a014c:	465b      	mov	r3, fp
 80a014e:	f00b fa3d 	bl	80ab5cc <__aeabi_dmul>
            bars[i]->setPixelColor(j, (char)(color >> 16) * factor,
 80a0152:	f00b fd13 	bl	80abb7c <__aeabi_d2uiz>
 80a0156:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80a015a:	b2c0      	uxtb	r0, r0
 80a015c:	9000      	str	r0, [sp, #0]
 80a015e:	9805      	ldr	r0, [sp, #20]
 80a0160:	4621      	mov	r1, r4
 80a0162:	f850 0008 	ldr.w	r0, [r0, r8]
 80a0166:	f003 faa3 	bl	80a36b0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        for (char j = 0; j < disp_height; j++) {
 80a016a:	e7c0      	b.n	80a00ee <_ZN10Bar_Matrix5decayEd+0x22>
    for (char i = 0; i < disp_width; i++) {
 80a016c:	3601      	adds	r6, #1
 80a016e:	e7b4      	b.n	80a00da <_ZN10Bar_Matrix5decayEd+0xe>
        }
    }
}
 80a0170:	b007      	add	sp, #28
 80a0172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0176:	bf00      	nop
 80a0178:	20000070 	.word	0x20000070
 80a017c:	2000007e 	.word	0x2000007e
 80a0180:	2000007c 	.word	0x2000007c

080a0184 <_ZN10Bar_Matrix12decay_to_rgbEdiii>:
 * Parameters: [float] factor - decay factor to be multiplied by
 *             [int] r - the red value to fade to
 *             [int] g - the green value to fade to
 *             [int] b - the blue value to fade to
 * ================================================================== */
void Bar_Matrix::decay_to_rgb(double factor, int r, int g, int b) {
 80a0184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0188:	f04f 0900 	mov.w	r9, #0
 80a018c:	b085      	sub	sp, #20
 80a018e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    for (char i = 0; i < disp_width; i++) {
        for (char j = 0; j < disp_height; j++) {
            unsigned int color = bars[i]->getPixelColor(j);
 80a0192:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 80a0250 <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xcc>
    for (char i = 0; i < disp_width; i++) {
 80a0196:	4b2c      	ldr	r3, [pc, #176]	; (80a0248 <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xc4>)
 80a0198:	fa5f f489 	uxtb.w	r4, r9
 80a019c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a01a0:	429c      	cmp	r4, r3
 80a01a2:	da4d      	bge.n	80a0240 <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xbc>
            unsigned int color = bars[i]->getPixelColor(j);
 80a01a4:	f04f 0a00 	mov.w	sl, #0
 80a01a8:	00a4      	lsls	r4, r4, #2
        for (char j = 0; j < disp_height; j++) {
 80a01aa:	4b28      	ldr	r3, [pc, #160]	; (80a024c <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xc8>)
 80a01ac:	fa5f f58a 	uxtb.w	r5, sl
 80a01b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a01b4:	f10a 0a01 	add.w	sl, sl, #1
 80a01b8:	429d      	cmp	r5, r3
 80a01ba:	da3e      	bge.n	80a023a <_ZN10Bar_Matrix12decay_to_rgbEdiii+0xb6>
            unsigned int color = bars[i]->getPixelColor(j);
 80a01bc:	f8db 3000 	ldr.w	r3, [fp]
 80a01c0:	b2ad      	uxth	r5, r5
 80a01c2:	5918      	ldr	r0, [r3, r4]
 80a01c4:	4629      	mov	r1, r5
 80a01c6:	f003 faca 	bl	80a375e <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
 80a01ca:	4680      	mov	r8, r0

            // Decay and do bounds checking on rgb values
            int rx = (int) ((char)(color >> 16) * factor);
 80a01cc:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80a01d0:	f00b f992 	bl	80ab4f8 <__aeabi_i2d>
 80a01d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a01d8:	f00b f9f8 	bl	80ab5cc <__aeabi_dmul>
 80a01dc:	f00b fca6 	bl	80abb2c <__aeabi_d2iz>
 80a01e0:	4606      	mov	r6, r0
            int gx = (int) ((char)(color >>  8) * factor);
 80a01e2:	f3c8 2007 	ubfx	r0, r8, #8, #8
 80a01e6:	f00b f987 	bl	80ab4f8 <__aeabi_i2d>
 80a01ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a01ee:	f00b f9ed 	bl	80ab5cc <__aeabi_dmul>
 80a01f2:	f00b fc9b 	bl	80abb2c <__aeabi_d2iz>
 80a01f6:	4607      	mov	r7, r0
            int bx = (int) ((char)(color      ) * factor);
 80a01f8:	fa5f f088 	uxtb.w	r0, r8
 80a01fc:	f00b f97c 	bl	80ab4f8 <__aeabi_i2d>
 80a0200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a0204:	f00b f9e2 	bl	80ab5cc <__aeabi_dmul>
 80a0208:	f00b fc90 	bl	80abb2c <__aeabi_d2iz>
            if (rx < r) { rx = r; }
            if (gx < g) { gx = g; }
            if (bx < b) { bx = b; }

            bars[i]->setPixelColor(j, rx, gx, bx);
 80a020c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a020e:	429f      	cmp	r7, r3
 80a0210:	bfb8      	it	lt
 80a0212:	461f      	movlt	r7, r3
 80a0214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a0216:	429e      	cmp	r6, r3
 80a0218:	bfb8      	it	lt
 80a021a:	461e      	movlt	r6, r3
 80a021c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a021e:	b2f2      	uxtb	r2, r6
 80a0220:	4283      	cmp	r3, r0
 80a0222:	bfb8      	it	lt
 80a0224:	4603      	movlt	r3, r0
 80a0226:	f8db 0000 	ldr.w	r0, [fp]
 80a022a:	b2d9      	uxtb	r1, r3
 80a022c:	9100      	str	r1, [sp, #0]
 80a022e:	5900      	ldr	r0, [r0, r4]
 80a0230:	4629      	mov	r1, r5
 80a0232:	b2fb      	uxtb	r3, r7
 80a0234:	f003 fa3c 	bl	80a36b0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        for (char j = 0; j < disp_height; j++) {
 80a0238:	e7b7      	b.n	80a01aa <_ZN10Bar_Matrix12decay_to_rgbEdiii+0x26>
    for (char i = 0; i < disp_width; i++) {
 80a023a:	f109 0901 	add.w	r9, r9, #1
 80a023e:	e7aa      	b.n	80a0196 <_ZN10Bar_Matrix12decay_to_rgbEdiii+0x12>
        }
    }
}
 80a0240:	b005      	add	sp, #20
 80a0242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0246:	bf00      	nop
 80a0248:	2000007e 	.word	0x2000007e
 80a024c:	2000007c 	.word	0x2000007c
 80a0250:	20000070 	.word	0x20000070

080a0254 <_ZN10Bar_Matrix8fill_barEiiii>:

void Bar_Matrix::fill_bar(int bar, int r, int g, int b) {
 80a0254:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a0258:	4616      	mov	r6, r2
    for (int j =0; j < disp_height; j++) {
 80a025a:	2400      	movs	r4, #0
 80a025c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 80a0290 <_ZN10Bar_Matrix8fill_barEiiii+0x3c>
        bars[bar]->setPixelColor(j, (uint8_t)r, (uint8_t)g, (uint8_t)b);
 80a0260:	f8df 9030 	ldr.w	r9, [pc, #48]	; 80a0294 <_ZN10Bar_Matrix8fill_barEiiii+0x40>
 80a0264:	008d      	lsls	r5, r1, #2
 80a0266:	b2df      	uxtb	r7, r3
    for (int j =0; j < disp_height; j++) {
 80a0268:	f9b8 3000 	ldrsh.w	r3, [r8]
 80a026c:	42a3      	cmp	r3, r4
 80a026e:	dd0c      	ble.n	80a028a <_ZN10Bar_Matrix8fill_barEiiii+0x36>
        bars[bar]->setPixelColor(j, (uint8_t)r, (uint8_t)g, (uint8_t)b);
 80a0270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a0272:	f8d9 0000 	ldr.w	r0, [r9]
 80a0276:	b2db      	uxtb	r3, r3
 80a0278:	9300      	str	r3, [sp, #0]
 80a027a:	b2a1      	uxth	r1, r4
 80a027c:	463b      	mov	r3, r7
 80a027e:	5940      	ldr	r0, [r0, r5]
 80a0280:	b2f2      	uxtb	r2, r6
 80a0282:	f003 fa15 	bl	80a36b0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    for (int j =0; j < disp_height; j++) {
 80a0286:	3401      	adds	r4, #1
 80a0288:	e7ee      	b.n	80a0268 <_ZN10Bar_Matrix8fill_barEiiii+0x14>
    }
}
 80a028a:	b003      	add	sp, #12
 80a028c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0290:	2000007c 	.word	0x2000007c
 80a0294:	20000070 	.word	0x20000070

080a0298 <_ZN10Bar_Matrix11fill_matrixE11Color_Value>:
/* ================================================================== *
 * Function: fill_matrix
 * Description: Sets all pixel values in matrix to given color value
 * Parameters: [Color]* color - color to set matrix to
 * ================================================================== */
void Bar_Matrix::fill_matrix(Color_Value c) {
 80a0298:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    for (int i = 0; i < disp_width; i++) {
 80a029c:	2400      	movs	r4, #0
void Bar_Matrix::fill_matrix(Color_Value c) {
 80a029e:	ab02      	add	r3, sp, #8
 80a02a0:	e903 0006 	stmdb	r3, {r1, r2}
    for (int i = 0; i < disp_width; i++) {
 80a02a4:	4e0e      	ldr	r6, [pc, #56]	; (80a02e0 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x48>)
        for (int j =0; j< disp_height; j++) {
            bars[i]->setPixelColor(j, c.c);
 80a02a6:	4f0f      	ldr	r7, [pc, #60]	; (80a02e4 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x4c>)
    for (int i = 0; i < disp_width; i++) {
 80a02a8:	f9b6 3000 	ldrsh.w	r3, [r6]
 80a02ac:	42a3      	cmp	r3, r4
 80a02ae:	dd13      	ble.n	80a02d8 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x40>
        for (int j =0; j< disp_height; j++) {
 80a02b0:	2500      	movs	r5, #0
 80a02b2:	f8df 9034 	ldr.w	r9, [pc, #52]	; 80a02e8 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x50>
 80a02b6:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80a02ba:	f9b9 3000 	ldrsh.w	r3, [r9]
 80a02be:	42ab      	cmp	r3, r5
 80a02c0:	dd08      	ble.n	80a02d4 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x3c>
            bars[i]->setPixelColor(j, c.c);
 80a02c2:	683b      	ldr	r3, [r7, #0]
 80a02c4:	b2a9      	uxth	r1, r5
 80a02c6:	9a00      	ldr	r2, [sp, #0]
 80a02c8:	f853 0008 	ldr.w	r0, [r3, r8]
 80a02cc:	f003 fa19 	bl	80a3702 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        for (int j =0; j< disp_height; j++) {
 80a02d0:	3501      	adds	r5, #1
 80a02d2:	e7f2      	b.n	80a02ba <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x22>
    for (int i = 0; i < disp_width; i++) {
 80a02d4:	3401      	adds	r4, #1
 80a02d6:	e7e7      	b.n	80a02a8 <_ZN10Bar_Matrix11fill_matrixE11Color_Value+0x10>
        }
    }
}
 80a02d8:	b003      	add	sp, #12
 80a02da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a02de:	bf00      	nop
 80a02e0:	2000007e 	.word	0x2000007e
 80a02e4:	20000070 	.word	0x20000070
 80a02e8:	2000007c 	.word	0x2000007c

080a02ec <_ZN10Bar_Matrix11init_matrixEv>:

/* ================================================================== *
 * Function: init_matrix
 * Description: Initializes the matrix to off
 * ================================================================== */
void Bar_Matrix::init_matrix() {
 80a02ec:	b570      	push	{r4, r5, r6, lr}
    for (int i = 0; i < disp_width; i++) {
 80a02ee:	2400      	movs	r4, #0
 80a02f0:	4e09      	ldr	r6, [pc, #36]	; (80a0318 <_ZN10Bar_Matrix11init_matrixEv+0x2c>)
        // switch height and width based on orientation
        bars[i]->begin();
 80a02f2:	4d0a      	ldr	r5, [pc, #40]	; (80a031c <_ZN10Bar_Matrix11init_matrixEv+0x30>)
    for (int i = 0; i < disp_width; i++) {
 80a02f4:	f9b6 3000 	ldrsh.w	r3, [r6]
 80a02f8:	42a3      	cmp	r3, r4
 80a02fa:	dd0b      	ble.n	80a0314 <_ZN10Bar_Matrix11init_matrixEv+0x28>
        bars[i]->begin();
 80a02fc:	682b      	ldr	r3, [r5, #0]
 80a02fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80a0302:	f002 fa5c 	bl	80a27be <_ZN17Adafruit_NeoPixel5beginEv>
        bars[i]->show();
 80a0306:	682b      	ldr	r3, [r5, #0]
 80a0308:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80a030c:	f002 fa64 	bl	80a27d8 <_ZN17Adafruit_NeoPixel4showEv>
    for (int i = 0; i < disp_width; i++) {
 80a0310:	3401      	adds	r4, #1
 80a0312:	e7ef      	b.n	80a02f4 <_ZN10Bar_Matrix11init_matrixEv+0x8>
    }
}
 80a0314:	bd70      	pop	{r4, r5, r6, pc}
 80a0316:	bf00      	nop
 80a0318:	2000007e 	.word	0x2000007e
 80a031c:	20000070 	.word	0x20000070

080a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>:

void Bar_Matrix::mix_pixel(unsigned char bar, unsigned short pixel, float factor, unsigned char r, unsigned char g, unsigned char b) {
 80a0320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0324:	460f      	mov	r7, r1
 80a0326:	4690      	mov	r8, r2
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a0328:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80a03f8 <_ZN10Bar_Matrix9mix_pixelEhtfhhh+0xd8>
void Bar_Matrix::mix_pixel(unsigned char bar, unsigned short pixel, float factor, unsigned char r, unsigned char g, unsigned char b) {
 80a032c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a0330:	f8db 0000 	ldr.w	r0, [fp]
void Bar_Matrix::mix_pixel(unsigned char bar, unsigned short pixel, float factor, unsigned char r, unsigned char g, unsigned char b) {
 80a0334:	461c      	mov	r4, r3
 80a0336:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a033a:	4641      	mov	r1, r8
 80a033c:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
void Bar_Matrix::mix_pixel(unsigned char bar, unsigned short pixel, float factor, unsigned char r, unsigned char g, unsigned char b) {
 80a0340:	9300      	str	r3, [sp, #0]
 80a0342:	9201      	str	r2, [sp, #4]
 80a0344:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a0348:	f003 fa09 	bl	80a375e <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a034c:	4621      	mov	r1, r4
    unsigned int color = bars[bar]->getPixelColor(pixel);
 80a034e:	4606      	mov	r6, r0
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a0350:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a0354:	f00b fc86 	bl	80abc64 <__aeabi_fsub>
 80a0358:	4605      	mov	r5, r0
    (char)(color >> 8) * (1-factor) + g * factor,
 80a035a:	f3c6 2007 	ubfx	r0, r6, #8, #8
 80a035e:	f00b fd37 	bl	80abdd0 <__aeabi_i2f>
 80a0362:	4629      	mov	r1, r5
 80a0364:	f00b fd88 	bl	80abe78 <__aeabi_fmul>
 80a0368:	4681      	mov	r9, r0
 80a036a:	4650      	mov	r0, sl
 80a036c:	f00b fd30 	bl	80abdd0 <__aeabi_i2f>
 80a0370:	4621      	mov	r1, r4
 80a0372:	f00b fd81 	bl	80abe78 <__aeabi_fmul>
 80a0376:	4601      	mov	r1, r0
 80a0378:	4648      	mov	r0, r9
 80a037a:	f00b fc75 	bl	80abc68 <__addsf3>
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a037e:	f00b ff7d 	bl	80ac27c <__aeabi_f2uiz>
 80a0382:	fa5f fa80 	uxtb.w	sl, r0
 80a0386:	f3c6 4007 	ubfx	r0, r6, #16, #8
 80a038a:	f00b fd21 	bl	80abdd0 <__aeabi_i2f>
 80a038e:	4629      	mov	r1, r5
 80a0390:	f00b fd72 	bl	80abe78 <__aeabi_fmul>
 80a0394:	9a01      	ldr	r2, [sp, #4]
 80a0396:	4681      	mov	r9, r0
 80a0398:	4610      	mov	r0, r2
 80a039a:	f00b fd19 	bl	80abdd0 <__aeabi_i2f>
 80a039e:	4621      	mov	r1, r4
 80a03a0:	f00b fd6a 	bl	80abe78 <__aeabi_fmul>
 80a03a4:	4601      	mov	r1, r0
 80a03a6:	4648      	mov	r0, r9
 80a03a8:	f00b fc5e 	bl	80abc68 <__addsf3>
 80a03ac:	f00b ff66 	bl	80ac27c <__aeabi_f2uiz>
 80a03b0:	fa5f f980 	uxtb.w	r9, r0
    (char)(color) * (1-factor) + b * factor);
 80a03b4:	b2f0      	uxtb	r0, r6
 80a03b6:	f00b fd0b 	bl	80abdd0 <__aeabi_i2f>
 80a03ba:	4629      	mov	r1, r5
 80a03bc:	f00b fd5c 	bl	80abe78 <__aeabi_fmul>
 80a03c0:	9b00      	ldr	r3, [sp, #0]
 80a03c2:	4605      	mov	r5, r0
 80a03c4:	4618      	mov	r0, r3
 80a03c6:	f00b fd03 	bl	80abdd0 <__aeabi_i2f>
 80a03ca:	4621      	mov	r1, r4
 80a03cc:	f00b fd54 	bl	80abe78 <__aeabi_fmul>
 80a03d0:	4601      	mov	r1, r0
 80a03d2:	4628      	mov	r0, r5
 80a03d4:	f00b fc48 	bl	80abc68 <__addsf3>
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a03d8:	f00b ff50 	bl	80ac27c <__aeabi_f2uiz>
 80a03dc:	4653      	mov	r3, sl
 80a03de:	464a      	mov	r2, r9
 80a03e0:	4641      	mov	r1, r8
 80a03e2:	f8db b000 	ldr.w	fp, [fp]
 80a03e6:	b2c0      	uxtb	r0, r0
 80a03e8:	900c      	str	r0, [sp, #48]	; 0x30
 80a03ea:	f85b 0027 	ldr.w	r0, [fp, r7, lsl #2]
}
 80a03ee:	b003      	add	sp, #12
 80a03f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bars[bar]->setPixelColor(pixel, (char)(color >> 16) * (1-factor) + r * factor,
 80a03f4:	f003 b95c 	b.w	80a36b0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
 80a03f8:	20000070 	.word	0x20000070

080a03fc <_ZN10Bar_Matrix12clear_matrixEv>:

/* ================================================================== *
 * Function: clear_matrix
 * Description: Sets all pixel values to (0, 0, 0)
 * ================================================================== */
void Bar_Matrix::clear_matrix() {
 80a03fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for (int i = 0; i < disp_width; i++) {
 80a0400:	2400      	movs	r4, #0
 80a0402:	4e0e      	ldr	r6, [pc, #56]	; (80a043c <_ZN10Bar_Matrix12clear_matrixEv+0x40>)
        for (int j =0; j< disp_height; j++) {
            bars[i]->setPixelColor(j, 0);
 80a0404:	4f0e      	ldr	r7, [pc, #56]	; (80a0440 <_ZN10Bar_Matrix12clear_matrixEv+0x44>)
    for (int i = 0; i < disp_width; i++) {
 80a0406:	f9b6 3000 	ldrsh.w	r3, [r6]
 80a040a:	42a3      	cmp	r3, r4
 80a040c:	dd13      	ble.n	80a0436 <_ZN10Bar_Matrix12clear_matrixEv+0x3a>
        for (int j =0; j< disp_height; j++) {
 80a040e:	2500      	movs	r5, #0
 80a0410:	f8df 9030 	ldr.w	r9, [pc, #48]	; 80a0444 <_ZN10Bar_Matrix12clear_matrixEv+0x48>
 80a0414:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80a0418:	f9b9 3000 	ldrsh.w	r3, [r9]
 80a041c:	42ab      	cmp	r3, r5
 80a041e:	dd08      	ble.n	80a0432 <_ZN10Bar_Matrix12clear_matrixEv+0x36>
            bars[i]->setPixelColor(j, 0);
 80a0420:	683b      	ldr	r3, [r7, #0]
 80a0422:	b2a9      	uxth	r1, r5
 80a0424:	2200      	movs	r2, #0
 80a0426:	f853 0008 	ldr.w	r0, [r3, r8]
 80a042a:	f003 f96a 	bl	80a3702 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        for (int j =0; j< disp_height; j++) {
 80a042e:	3501      	adds	r5, #1
 80a0430:	e7f2      	b.n	80a0418 <_ZN10Bar_Matrix12clear_matrixEv+0x1c>
    for (int i = 0; i < disp_width; i++) {
 80a0432:	3401      	adds	r4, #1
 80a0434:	e7e7      	b.n	80a0406 <_ZN10Bar_Matrix12clear_matrixEv+0xa>
        }
    }
}
 80a0436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a043a:	bf00      	nop
 80a043c:	2000007e 	.word	0x2000007e
 80a0440:	20000070 	.word	0x20000070
 80a0444:	2000007c 	.word	0x2000007c

080a0448 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection>:
Bar_Matrix::Bar_Matrix(short num_bars, short bar_len, const char led_type, const char* pins, Beat_Detection* beat_detection) {
 80a0448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a044c:	4604      	mov	r4, r0
 80a044e:	b097      	sub	sp, #92	; 0x5c
 80a0450:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 80a0454:	460d      	mov	r5, r1
 80a0456:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a045a:	f003 fa4b 	bl	80a38f4 <_ZN10PongPaddleC1Ev>
 80a045e:	f504 70c8 	add.w	r0, r4, #400	; 0x190
 80a0462:	f003 fa47 	bl	80a38f4 <_ZN10PongPaddleC1Ev>
 80a0466:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 80a046a:	f003 f9bf 	bl	80a37ec <_ZN8PongBallC1Ev>
    disp_height = bar_len; //(orientation) ? bar_len : num_bars;
 80a046e:	4b95      	ldr	r3, [pc, #596]	; (80a06c4 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x27c>)
 80a0470:	9908      	ldr	r1, [sp, #32]
    disp_width = num_bars; //(orientation) ? num_bars : bar_len;
 80a0472:	4a95      	ldr	r2, [pc, #596]	; (80a06c8 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x280>)
    disp_height = bar_len; //(orientation) ? bar_len : num_bars;
 80a0474:	8019      	strh	r1, [r3, #0]
    display = new unsigned long*[disp_width];
 80a0476:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
 80a047a:	428d      	cmp	r5, r1
 80a047c:	bf2c      	ite	cs
 80a047e:	f04f 3aff 	movcs.w	sl, #4294967295	; 0xffffffff
 80a0482:	ea4f 0a85 	movcc.w	sl, r5, lsl #2
 80a0486:	4650      	mov	r0, sl
 80a0488:	4690      	mov	r8, r2
 80a048a:	4699      	mov	r9, r3
    disp_width = num_bars; //(orientation) ? num_bars : bar_len;
 80a048c:	8015      	strh	r5, [r2, #0]
    display = new unsigned long*[disp_width];
 80a048e:	f7ff fe06 	bl	80a009e <_Znaj>
    for (int i = 0; i < disp_width; i++)
 80a0492:	2600      	movs	r6, #0
    display[i] = new unsigned long[disp_height];
 80a0494:	f06f 4b60 	mvn.w	fp, #3758096384	; 0xe0000000
    display = new unsigned long*[disp_width];
 80a0498:	4f8c      	ldr	r7, [pc, #560]	; (80a06cc <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x284>)
 80a049a:	6038      	str	r0, [r7, #0]
    for (int i = 0; i < disp_width; i++)
 80a049c:	f9b8 2000 	ldrsh.w	r2, [r8]
 80a04a0:	42b2      	cmp	r2, r6
 80a04a2:	dd0f      	ble.n	80a04c4 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x7c>
    display[i] = new unsigned long[disp_height];
 80a04a4:	f9b9 0000 	ldrsh.w	r0, [r9]
 80a04a8:	683b      	ldr	r3, [r7, #0]
 80a04aa:	4558      	cmp	r0, fp
 80a04ac:	bf2c      	ite	cs
 80a04ae:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a04b2:	0080      	lslcc	r0, r0, #2
 80a04b4:	9307      	str	r3, [sp, #28]
 80a04b6:	f7ff fdf2 	bl	80a009e <_Znaj>
 80a04ba:	9b07      	ldr	r3, [sp, #28]
 80a04bc:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    for (int i = 0; i < disp_width; i++)
 80a04c0:	3601      	adds	r6, #1
 80a04c2:	e7eb      	b.n	80a049c <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x54>
    bars = new Adafruit_NeoPixel*[num_bars];
 80a04c4:	4650      	mov	r0, sl
 80a04c6:	f7ff fdea 	bl	80a009e <_Znaj>
 80a04ca:	4b81      	ldr	r3, [pc, #516]	; (80a06d0 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x288>)
 80a04cc:	4626      	mov	r6, r4
 80a04ce:	2700      	movs	r7, #0
 80a04d0:	469a      	mov	sl, r3
        bouncing_line_speeds[i] = (float)random(5, 10) / 15.0;
 80a04d2:	f8df 9214 	ldr.w	r9, [pc, #532]	; 80a06e8 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x2a0>
        bouncing_line_colors[i][0] = bd->r();
 80a04d6:	f8df b20c 	ldr.w	fp, [pc, #524]	; 80a06e4 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x29c>
    bars = new Adafruit_NeoPixel*[num_bars];
 80a04da:	6018      	str	r0, [r3, #0]
    for(short i = 0; i < num_bars; i++) {
 80a04dc:	f1a4 0804 	sub.w	r8, r4, #4
 80a04e0:	b23b      	sxth	r3, r7
 80a04e2:	429d      	cmp	r5, r3
 80a04e4:	dd49      	ble.n	80a057a <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x132>
        bars[i] = new Adafruit_NeoPixel(bar_len, pins[i], led_type);
 80a04e6:	2010      	movs	r0, #16
 80a04e8:	f7ff fdd7 	bl	80a009a <_Znwj>
 80a04ec:	9007      	str	r0, [sp, #28]
 80a04ee:	b130      	cbz	r0, 80a04fe <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0xb6>
 80a04f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80a04f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a04f4:	5dd2      	ldrb	r2, [r2, r7]
 80a04f6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80a04fa:	f002 f949 	bl	80a2790 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a04fe:	f8da 3000 	ldr.w	r3, [sl]
 80a0502:	9a07      	ldr	r2, [sp, #28]
        bouncing_line_lengths[i] = random(10, STRIP_LENGTH / 2);
 80a0504:	211d      	movs	r1, #29
        bars[i] = new Adafruit_NeoPixel(bar_len, pins[i], led_type);
 80a0506:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
        bouncing_line_lengths[i] = random(10, STRIP_LENGTH / 2);
 80a050a:	200a      	movs	r0, #10
 80a050c:	f005 fd91 	bl	80a6032 <_Z6randomii>
        bouncing_line_positions[i] = random(0, STRIP_LENGTH);
 80a0510:	213a      	movs	r1, #58	; 0x3a
        bouncing_line_lengths[i] = random(10, STRIP_LENGTH / 2);
 80a0512:	f848 0f04 	str.w	r0, [r8, #4]!
        bouncing_line_positions[i] = random(0, STRIP_LENGTH);
 80a0516:	2000      	movs	r0, #0
 80a0518:	f005 fd8b 	bl	80a6032 <_Z6randomii>
 80a051c:	f00b fc58 	bl	80abdd0 <__aeabi_i2f>
        if (random(0, 10) > 5) bouncing_line_directions[i] = 1;
 80a0520:	210a      	movs	r1, #10
        bouncing_line_positions[i] = random(0, STRIP_LENGTH);
 80a0522:	f8c8 0020 	str.w	r0, [r8, #32]
        if (random(0, 10) > 5) bouncing_line_directions[i] = 1;
 80a0526:	2000      	movs	r0, #0
 80a0528:	f005 fd83 	bl	80a6032 <_Z6randomii>
        else                bouncing_line_directions[i] = -1;
 80a052c:	2805      	cmp	r0, #5
 80a052e:	bfcc      	ite	gt
 80a0530:	2301      	movgt	r3, #1
 80a0532:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
        bouncing_line_speeds[i] = (float)random(5, 10) / 15.0;
 80a0536:	210a      	movs	r1, #10
 80a0538:	f8c8 3060 	str.w	r3, [r8, #96]	; 0x60
 80a053c:	2005      	movs	r0, #5
 80a053e:	f005 fd78 	bl	80a6032 <_Z6randomii>
 80a0542:	f00b fc45 	bl	80abdd0 <__aeabi_i2f>
 80a0546:	4649      	mov	r1, r9
 80a0548:	f00b fd4a 	bl	80abfe0 <__aeabi_fdiv>
 80a054c:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
        bouncing_line_colors[i][0] = bd->r();
 80a0550:	f8db 0000 	ldr.w	r0, [fp]
 80a0554:	f001 fdcd 	bl	80a20f2 <_ZN14Beat_Detection1rEv>
 80a0558:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80
        bouncing_line_colors[i][1] = bd->g();
 80a055c:	f8db 0000 	ldr.w	r0, [fp]
 80a0560:	f001 fdc9 	bl	80a20f6 <_ZN14Beat_Detection1gEv>
 80a0564:	f8c6 0084 	str.w	r0, [r6, #132]	; 0x84
        bouncing_line_colors[i][2] = bd->b();
 80a0568:	f8db 0000 	ldr.w	r0, [fp]
 80a056c:	f001 fdc5 	bl	80a20fa <_ZN14Beat_Detection1bEv>
 80a0570:	3701      	adds	r7, #1
 80a0572:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
    for(short i = 0; i < num_bars; i++) {
 80a0576:	360c      	adds	r6, #12
 80a0578:	e7b2      	b.n	80a04e0 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x98>
    snakes[0] = Snake(1, 30, -30, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a057a:	2301      	movs	r3, #1
 80a057c:	2519      	movs	r5, #25
 80a057e:	2132      	movs	r1, #50	; 0x32
 80a0580:	221e      	movs	r2, #30
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0582:	2764      	movs	r7, #100	; 0x64
    snakes[0] = Snake(1, 30, -30, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0584:	e9c4 3238 	strd	r3, r2, [r4, #224]	; 0xe0
 80a0588:	e9c4 513d 	strd	r5, r1, [r4, #244]	; 0xf4
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a058c:	204b      	movs	r0, #75	; 0x4b
 80a058e:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    snakes[0] = Snake(1, 30, -30, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0592:	f06f 021d 	mvn.w	r2, #29
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0596:	2196      	movs	r1, #150	; 0x96
    snakes[0] = Snake(1, 30, -30, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0598:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a059c:	e9c4 7146 	strd	r7, r1, [r4, #280]	; 0x118
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05a0:	e9c4 014d 	strd	r0, r1, [r4, #308]	; 0x134
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05a8:	21e1      	movs	r1, #225	; 0xe1
    snakes[3] = Snake(-1, 15, NUM_BARS*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05aa:	f04f 0a0f 	mov.w	sl, #15
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05ae:	e9c4 023f 	strd	r0, r2, [r4, #252]	; 0xfc
    snakes[3] = Snake(-1, 15, NUM_BARS*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05b2:	e9c4 124f 	strd	r1, r2, [r4, #316]	; 0x13c
 80a05b6:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05ba:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
 80a05be:	25e8      	movs	r5, #232	; 0xe8
    snakes[3] = Snake(-1, 15, NUM_BARS*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05c0:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
 80a05c4:	e9c4 a251 	strd	sl, r2, [r4, #324]	; 0x144
 80a05c8:	222e      	movs	r2, #46	; 0x2e
    snakes[0].posTicks = 0;
 80a05ca:	f04f 0800 	mov.w	r8, #0
    pongPaddles[0] = PongPaddle(15, 0, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a05ce:	f04f 0900 	mov.w	r9, #0
    snakes[1] = Snake(-1, 25, NUM_BARS/2*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05d2:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05d6:	2614      	movs	r6, #20
 80a05d8:	25b9      	movs	r5, #185	; 0xb9
    color_table_idx++;
 80a05da:	2104      	movs	r1, #4
    snakes[3] = Snake(-1, 15, NUM_BARS*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05dc:	e9c4 c256 	strd	ip, r2, [r4, #344]	; 0x158
    pongPaddles[0] = PongPaddle(15, 0, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a05e0:	f8df b108 	ldr.w	fp, [pc, #264]	; 80a06ec <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x2a4>
    color_table_idx++;
 80a05e4:	4a3b      	ldr	r2, [pc, #236]	; (80a06d4 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x28c>)
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05e6:	e9c4 6549 	strd	r6, r5, [r4, #292]	; 0x124
    snakes[0].ticksNeeded = 1;
 80a05ea:	e9c4 833b 	strd	r8, r3, [r4, #236]	; 0xec
    snakes[1].ticksNeeded = 1;
 80a05ee:	e9c4 8343 	strd	r8, r3, [r4, #268]	; 0x10c
    snakes[2].ticksNeeded = 1;
 80a05f2:	e9c4 834b 	strd	r8, r3, [r4, #300]	; 0x12c
    snakes[2] = Snake(1, 20, 185, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05f6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    snakes[3] = Snake(-1, 15, NUM_BARS*STRIP_LENGTH, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a05fa:	f8c4 7154 	str.w	r7, [r4, #340]	; 0x154
    color_table_idx++;
 80a05fe:	6011      	str	r1, [r2, #0]
    pongPaddles[0] = PongPaddle(15, 0, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a0600:	a80a      	add	r0, sp, #40	; 0x28
    snakes[3].ticksNeeded = 1;
 80a0602:	e9c4 8353 	strd	r8, r3, [r4, #332]	; 0x14c
    pongPaddles[0] = PongPaddle(15, 0, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a0606:	464a      	mov	r2, r9
 80a0608:	4651      	mov	r1, sl
 80a060a:	e9cd 7704 	strd	r7, r7, [sp, #16]
 80a060e:	e9cd a702 	strd	sl, r7, [sp, #8]
 80a0612:	4b31      	ldr	r3, [pc, #196]	; (80a06d8 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x290>)
 80a0614:	f8cd b004 	str.w	fp, [sp, #4]
 80a0618:	f8cd 9000 	str.w	r9, [sp]
 80a061c:	f504 76b0 	add.w	r6, r4, #352	; 0x160
 80a0620:	ad0a      	add	r5, sp, #40	; 0x28
 80a0622:	f003 f968 	bl	80a38f6 <_ZN10PongPaddleC1Eiffffjiii>
 80a0626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0628:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a062a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a062c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a062e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80a0632:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    pongPaddles[1] = PongPaddle(15, NUM_BARS-1, STRIP_LENGTH/2, 0, 0.9, 15, 100, 100, 100);
 80a0636:	4651      	mov	r1, sl
 80a0638:	4b27      	ldr	r3, [pc, #156]	; (80a06d8 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x290>)
 80a063a:	4a28      	ldr	r2, [pc, #160]	; (80a06dc <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x294>)
 80a063c:	f8cd b004 	str.w	fp, [sp, #4]
 80a0640:	f8cd 9000 	str.w	r9, [sp]
 80a0644:	a80a      	add	r0, sp, #40	; 0x28
 80a0646:	e9cd 7704 	strd	r7, r7, [sp, #16]
 80a064a:	e9cd a702 	strd	sl, r7, [sp, #8]
 80a064e:	f504 76c8 	add.w	r6, r4, #400	; 0x190
 80a0652:	f003 f950 	bl	80a38f6 <_ZN10PongPaddleC1Eiffffjiii>
 80a0656:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80a065a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80a065e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a0660:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80a0664:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a0666:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80a066a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    pongBall = PongBall(3, 0.0625, 0.80, 15, 100, 100, 100);
 80a066e:	e9cd 7702 	strd	r7, r7, [sp, #8]
 80a0672:	e9cd a700 	strd	sl, r7, [sp]
 80a0676:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 80a067a:	2103      	movs	r1, #3
 80a067c:	4b18      	ldr	r3, [pc, #96]	; (80a06e0 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x298>)
 80a067e:	a80a      	add	r0, sp, #40	; 0x28
 80a0680:	f504 77e0 	add.w	r7, r4, #448	; 0x1c0
 80a0684:	ae0a      	add	r6, sp, #40	; 0x28
 80a0686:	f003 f8b3 	bl	80a37f0 <_ZN8PongBallC1Eiffjiii>
 80a068a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a068c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80a068e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a0690:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80a0692:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80a0696:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    last_beat_count = 0;
 80a069a:	f8c4 81f0 	str.w	r8, [r4, #496]	; 0x1f0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a069e:	f004 fdbf 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
    bass_slide_ema = 0.0;
 80a06a2:	f8c4 9214 	str.w	r9, [r4, #532]	; 0x214
    bass_slide_millis = millis();
 80a06a6:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
    init_matrix();
 80a06aa:	4620      	mov	r0, r4
 80a06ac:	f7ff fe1e 	bl	80a02ec <_ZN10Bar_Matrix11init_matrixEv>
    clear_matrix();
 80a06b0:	4620      	mov	r0, r4
 80a06b2:	f7ff fea3 	bl	80a03fc <_ZN10Bar_Matrix12clear_matrixEv>
}
 80a06b6:	4620      	mov	r0, r4
    bd = beat_detection;
 80a06b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80a06ba:	4b0a      	ldr	r3, [pc, #40]	; (80a06e4 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection+0x29c>)
 80a06bc:	601a      	str	r2, [r3, #0]
}
 80a06be:	b017      	add	sp, #92	; 0x5c
 80a06c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a06c4:	2000007c 	.word	0x2000007c
 80a06c8:	2000007e 	.word	0x2000007e
 80a06cc:	20000080 	.word	0x20000080
 80a06d0:	20000070 	.word	0x20000070
 80a06d4:	20000078 	.word	0x20000078
 80a06d8:	41e80000 	.word	0x41e80000
 80a06dc:	40e00000 	.word	0x40e00000
 80a06e0:	3f4ccccd 	.word	0x3f4ccccd
 80a06e4:	20000074 	.word	0x20000074
 80a06e8:	41700000 	.word	0x41700000
 80a06ec:	3f666666 	.word	0x3f666666

080a06f0 <_ZN10Bar_Matrix8show_allEv>:

/* ================================================================== *
 * Function: show_all
 * Description: drives pixels in physical matrix to current values
 * ================================================================== */
void Bar_Matrix::show_all() {
 80a06f0:	2300      	movs	r3, #0
 80a06f2:	b570      	push	{r4, r5, r6, lr}
    for (char i = 0; i < disp_width; i++) {
 80a06f4:	4e07      	ldr	r6, [pc, #28]	; (80a0714 <_ZN10Bar_Matrix8show_allEv+0x24>)
        bars[i]->show();
 80a06f6:	4d08      	ldr	r5, [pc, #32]	; (80a0718 <_ZN10Bar_Matrix8show_allEv+0x28>)
    for (char i = 0; i < disp_width; i++) {
 80a06f8:	f9b6 2000 	ldrsh.w	r2, [r6]
 80a06fc:	1c5c      	adds	r4, r3, #1
 80a06fe:	b2db      	uxtb	r3, r3
 80a0700:	4293      	cmp	r3, r2
 80a0702:	da06      	bge.n	80a0712 <_ZN10Bar_Matrix8show_allEv+0x22>
        bars[i]->show();
 80a0704:	682a      	ldr	r2, [r5, #0]
 80a0706:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80a070a:	f002 f865 	bl	80a27d8 <_ZN17Adafruit_NeoPixel4showEv>
    for (char i = 0; i < disp_width; i++) {
 80a070e:	4623      	mov	r3, r4
 80a0710:	e7f2      	b.n	80a06f8 <_ZN10Bar_Matrix8show_allEv+0x8>
    }
}
 80a0712:	bd70      	pop	{r4, r5, r6, pc}
 80a0714:	2000007e 	.word	0x2000007e
 80a0718:	20000070 	.word	0x20000070

080a071c <_ZN10Bar_Matrix8bar_testEv>:
/* ================================================================== *
 * Function: bar_test
 * Description: Turns on bars in order to test wiring
 * Parameters: None
 * ================================================================== */
void Bar_Matrix::bar_test() {
 80a071c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    for (int i = 0; i < STRIP_LENGTH; i++)
 80a0720:	2400      	movs	r4, #0
    bars[int(millis()/1000) % NUM_BARS]->setPixelColor(i, 64, 64, 64);
 80a0722:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80a0726:	2640      	movs	r6, #64	; 0x40
 80a0728:	f8df 802c 	ldr.w	r8, [pc, #44]	; 80a0758 <_ZN10Bar_Matrix8bar_testEv+0x3c>
 80a072c:	f8d8 5000 	ldr.w	r5, [r8]
 80a0730:	f004 fd76 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
 80a0734:	fbb0 f0f7 	udiv	r0, r0, r7
 80a0738:	2340      	movs	r3, #64	; 0x40
 80a073a:	9600      	str	r6, [sp, #0]
 80a073c:	f000 0007 	and.w	r0, r0, #7
 80a0740:	b2a1      	uxth	r1, r4
 80a0742:	461a      	mov	r2, r3
 80a0744:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    for (int i = 0; i < STRIP_LENGTH; i++)
 80a0748:	3401      	adds	r4, #1
    bars[int(millis()/1000) % NUM_BARS]->setPixelColor(i, 64, 64, 64);
 80a074a:	f002 ffb1 	bl	80a36b0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    for (int i = 0; i < STRIP_LENGTH; i++)
 80a074e:	2c3a      	cmp	r4, #58	; 0x3a
 80a0750:	d1ec      	bne.n	80a072c <_ZN10Bar_Matrix8bar_testEv+0x10>
}
 80a0752:	b002      	add	sp, #8
 80a0754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0758:	20000070 	.word	0x20000070

080a075c <_ZN10Bar_Matrix14bouncing_linesEv>:
/* ================================================================== *
 * Function: bouncing_lines
 * Description: Bounces a solid line of LEDs up and down in each matrix bar
 * Parameters: none
 * ================================================================== */
void Bar_Matrix::bouncing_lines() {
 80a075c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0760:	4606      	mov	r6, r0
 80a0762:	4605      	mov	r5, r0
    for (int i = 0; i < disp_width; i++) {
 80a0764:	2700      	movs	r7, #0
        if (bouncing_line_directions[i] == 1) {
            if (bottom > 0) mix_pixel(i, bottom-1, 1, 0, 0, 0);
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, bouncing_line_colors[i][0], bouncing_line_colors[i][1], bouncing_line_colors[i][2]);//bd->r(), bd->g(), bd->b());
        } else {
            if (bottom > 0) mix_pixel(i, bottom-1, 1, bouncing_line_colors[i][0], bouncing_line_colors[i][1], bouncing_line_colors[i][2]);//bd->r(), bd->g(), bd->b());
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, 0, 0, 0);
 80a0766:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
void Bar_Matrix::bouncing_lines() {
 80a076a:	b087      	sub	sp, #28
 80a076c:	1f04      	subs	r4, r0, #4
    for (int i = 0; i < disp_width; i++) {
 80a076e:	4b6d      	ldr	r3, [pc, #436]	; (80a0924 <_ZN10Bar_Matrix14bouncing_linesEv+0x1c8>)
 80a0770:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a0774:	42bb      	cmp	r3, r7
 80a0776:	f340 80d1 	ble.w	80a091c <_ZN10Bar_Matrix14bouncing_linesEv+0x1c0>
        int bottom = bouncing_line_positions[i];
 80a077a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a077c:	f00b fd58 	bl	80ac230 <__aeabi_f2iz>
        if (bouncing_line_directions[i] == 1) {
 80a0780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80a0782:	fa5f f987 	uxtb.w	r9, r7
 80a0786:	2b01      	cmp	r3, #1
 80a0788:	fa1f f880 	uxth.w	r8, r0
 80a078c:	f040 8091 	bne.w	80a08b2 <_ZN10Bar_Matrix14bouncing_linesEv+0x156>
            if (bottom > 0) mix_pixel(i, bottom-1, 1, 0, 0, 0);
 80a0790:	2800      	cmp	r0, #0
 80a0792:	dd0b      	ble.n	80a07ac <_ZN10Bar_Matrix14bouncing_linesEv+0x50>
 80a0794:	2300      	movs	r3, #0
 80a0796:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80a079a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a079e:	9300      	str	r3, [sp, #0]
 80a07a0:	4649      	mov	r1, r9
 80a07a2:	4653      	mov	r3, sl
 80a07a4:	4630      	mov	r0, r6
 80a07a6:	b292      	uxth	r2, r2
 80a07a8:	f7ff fdba 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, bouncing_line_colors[i][0], bouncing_line_colors[i][1], bouncing_line_colors[i][2]);//bd->r(), bd->g(), bd->b());
 80a07ac:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 80a07b0:	6862      	ldr	r2, [r4, #4]
 80a07b2:	9302      	str	r3, [sp, #8]
 80a07b4:	f895 3084 	ldrb.w	r3, [r5, #132]	; 0x84
 80a07b8:	3201      	adds	r2, #1
 80a07ba:	9301      	str	r3, [sp, #4]
 80a07bc:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 80a07c0:	4442      	add	r2, r8
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, 0, 0, 0);
 80a07c2:	b292      	uxth	r2, r2
 80a07c4:	4649      	mov	r1, r9
 80a07c6:	4630      	mov	r0, r6
 80a07c8:	9300      	str	r3, [sp, #0]
 80a07ca:	4653      	mov	r3, sl
 80a07cc:	f7ff fda8 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        }

        // Move the line
        bouncing_line_positions[i] += bouncing_line_directions[i] * bouncing_line_speeds[i];
 80a07d0:	f8d4 b064 	ldr.w	fp, [r4, #100]	; 0x64
 80a07d4:	4658      	mov	r0, fp
 80a07d6:	f00b fafb 	bl	80abdd0 <__aeabi_i2f>
 80a07da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80a07dc:	f00b fb4c 	bl	80abe78 <__aeabi_fmul>
 80a07e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80a07e2:	f00b fa41 	bl	80abc68 <__addsf3>
 80a07e6:	6260      	str	r0, [r4, #36]	; 0x24

        // Ensure we are moving in the proper direction
        if (bouncing_line_positions[i] < -.5*bouncing_line_lengths[i] && bouncing_line_directions[i] < 0) {
 80a07e8:	f00a fe98 	bl	80ab51c <__aeabi_f2d>
 80a07ec:	4680      	mov	r8, r0
 80a07ee:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80a07f2:	4689      	mov	r9, r1
 80a07f4:	f00a fe80 	bl	80ab4f8 <__aeabi_i2d>
 80a07f8:	4602      	mov	r2, r0
 80a07fa:	460b      	mov	r3, r1
 80a07fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a0800:	2200      	movs	r2, #0
 80a0802:	4b49      	ldr	r3, [pc, #292]	; (80a0928 <_ZN10Bar_Matrix14bouncing_linesEv+0x1cc>)
 80a0804:	f00a fee2 	bl	80ab5cc <__aeabi_dmul>
 80a0808:	4602      	mov	r2, r0
 80a080a:	460b      	mov	r3, r1
 80a080c:	4640      	mov	r0, r8
 80a080e:	4649      	mov	r1, r9
 80a0810:	f00b f94e 	bl	80abab0 <__aeabi_dcmplt>
 80a0814:	2800      	cmp	r0, #0
 80a0816:	d066      	beq.n	80a08e6 <_ZN10Bar_Matrix14bouncing_linesEv+0x18a>
 80a0818:	f1bb 0f00 	cmp.w	fp, #0
 80a081c:	da63      	bge.n	80a08e6 <_ZN10Bar_Matrix14bouncing_linesEv+0x18a>
            bouncing_line_directions[i] = 1;
 80a081e:	2301      	movs	r3, #1
            if (random(0, 10) > 5) {
 80a0820:	210a      	movs	r1, #10
 80a0822:	2000      	movs	r0, #0
            bouncing_line_directions[i] = 1;
 80a0824:	6623      	str	r3, [r4, #96]	; 0x60
            if (random(0, 10) > 5) {
 80a0826:	f005 fc04 	bl	80a6032 <_Z6randomii>
 80a082a:	2805      	cmp	r0, #5
 80a082c:	dd1a      	ble.n	80a0864 <_ZN10Bar_Matrix14bouncing_linesEv+0x108>
                int newlength = random(10, STRIP_LENGTH / 2);
 80a082e:	211d      	movs	r1, #29
 80a0830:	200a      	movs	r0, #10
 80a0832:	f005 fbfe 	bl	80a6032 <_Z6randomii>
                if (newlength > bouncing_line_lengths[i]) {
 80a0836:	6822      	ldr	r2, [r4, #0]
 80a0838:	0fc3      	lsrs	r3, r0, #31
 80a083a:	4282      	cmp	r2, r0
                    bouncing_line_positions[i] = (-1*newlength/2) - (newlength/2 - bouncing_line_lengths[i]/2);
 80a083c:	4403      	add	r3, r0
 80a083e:	bfb8      	it	lt
 80a0840:	eb02 72d2 	addlt.w	r2, r2, r2, lsr #31
                int newlength = random(10, STRIP_LENGTH / 2);
 80a0844:	4680      	mov	r8, r0
                    bouncing_line_positions[i] = (-1*newlength/2) - (newlength/2 - bouncing_line_lengths[i]/2);
 80a0846:	bfb8      	it	lt
 80a0848:	1052      	asrlt	r2, r2, #1
 80a084a:	ea4f 0063 	mov.w	r0, r3, asr #1
 80a084e:	f1c0 0000 	rsb	r0, r0, #0
 80a0852:	bfbc      	itt	lt
 80a0854:	ebc2 0363 	rsblt	r3, r2, r3, asr #1
 80a0858:	1ac0      	sublt	r0, r0, r3
                } else {
                    bouncing_line_positions[i] = -1 * newlength / 2;
 80a085a:	f00b fab9 	bl	80abdd0 <__aeabi_i2f>
                }

                bouncing_line_lengths[i] = newlength;
 80a085e:	f8c4 8000 	str.w	r8, [r4]
 80a0862:	6220      	str	r0, [r4, #32]
            }

            if (random(0, 10) > 7) {
 80a0864:	210a      	movs	r1, #10
 80a0866:	2000      	movs	r0, #0
 80a0868:	f005 fbe3 	bl	80a6032 <_Z6randomii>
 80a086c:	2807      	cmp	r0, #7
 80a086e:	dd09      	ble.n	80a0884 <_ZN10Bar_Matrix14bouncing_linesEv+0x128>
                bouncing_line_speeds[i] = (float)random(5, 10) / 15.0;
 80a0870:	210a      	movs	r1, #10
 80a0872:	2005      	movs	r0, #5
 80a0874:	f005 fbdd 	bl	80a6032 <_Z6randomii>
 80a0878:	f00b faaa 	bl	80abdd0 <__aeabi_i2f>
 80a087c:	492b      	ldr	r1, [pc, #172]	; (80a092c <_ZN10Bar_Matrix14bouncing_linesEv+0x1d0>)
 80a087e:	f00b fbaf 	bl	80abfe0 <__aeabi_fdiv>
 80a0882:	6420      	str	r0, [r4, #64]	; 0x40
            bouncing_line_colors[i][1] = bd->g();
            bouncing_line_colors[i][2] = bd->b();
        } else if (bouncing_line_positions[i] > STRIP_LENGTH-.5*bouncing_line_lengths[i] && bouncing_line_directions[i] > 0) {
            bouncing_line_directions[i] = -1;

            bouncing_line_colors[i][0] = bd->r();
 80a0884:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80a0938 <_ZN10Bar_Matrix14bouncing_linesEv+0x1dc>
 80a0888:	f8d8 0000 	ldr.w	r0, [r8]
 80a088c:	f001 fc31 	bl	80a20f2 <_ZN14Beat_Detection1rEv>
 80a0890:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
            bouncing_line_colors[i][1] = bd->g();
 80a0894:	f8d8 0000 	ldr.w	r0, [r8]
 80a0898:	f001 fc2d 	bl	80a20f6 <_ZN14Beat_Detection1gEv>
 80a089c:	f8c5 0084 	str.w	r0, [r5, #132]	; 0x84
            bouncing_line_colors[i][2] = bd->b();
 80a08a0:	f8d8 0000 	ldr.w	r0, [r8]
 80a08a4:	f001 fc29 	bl	80a20fa <_ZN14Beat_Detection1bEv>
 80a08a8:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
    for (int i = 0; i < disp_width; i++) {
 80a08ac:	3701      	adds	r7, #1
 80a08ae:	350c      	adds	r5, #12
 80a08b0:	e75d      	b.n	80a076e <_ZN10Bar_Matrix14bouncing_linesEv+0x12>
            if (bottom > 0) mix_pixel(i, bottom-1, 1, bouncing_line_colors[i][0], bouncing_line_colors[i][1], bouncing_line_colors[i][2]);//bd->r(), bd->g(), bd->b());
 80a08b2:	2800      	cmp	r0, #0
 80a08b4:	dd10      	ble.n	80a08d8 <_ZN10Bar_Matrix14bouncing_linesEv+0x17c>
 80a08b6:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 80a08ba:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80a08be:	9302      	str	r3, [sp, #8]
 80a08c0:	f895 3084 	ldrb.w	r3, [r5, #132]	; 0x84
 80a08c4:	4649      	mov	r1, r9
 80a08c6:	9301      	str	r3, [sp, #4]
 80a08c8:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 80a08cc:	4630      	mov	r0, r6
 80a08ce:	9300      	str	r3, [sp, #0]
 80a08d0:	b292      	uxth	r2, r2
 80a08d2:	4653      	mov	r3, sl
 80a08d4:	f7ff fd24 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(i, 1+bottom+bouncing_line_lengths[i], 1, 0, 0, 0);
 80a08d8:	2300      	movs	r3, #0
 80a08da:	6862      	ldr	r2, [r4, #4]
 80a08dc:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a08e0:	3201      	adds	r2, #1
 80a08e2:	4442      	add	r2, r8
 80a08e4:	e76d      	b.n	80a07c2 <_ZN10Bar_Matrix14bouncing_linesEv+0x66>
        } else if (bouncing_line_positions[i] > STRIP_LENGTH-.5*bouncing_line_lengths[i] && bouncing_line_directions[i] > 0) {
 80a08e6:	2200      	movs	r2, #0
 80a08e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a08ec:	4b10      	ldr	r3, [pc, #64]	; (80a0930 <_ZN10Bar_Matrix14bouncing_linesEv+0x1d4>)
 80a08ee:	f00a fe6d 	bl	80ab5cc <__aeabi_dmul>
 80a08f2:	4602      	mov	r2, r0
 80a08f4:	460b      	mov	r3, r1
 80a08f6:	2000      	movs	r0, #0
 80a08f8:	490e      	ldr	r1, [pc, #56]	; (80a0934 <_ZN10Bar_Matrix14bouncing_linesEv+0x1d8>)
 80a08fa:	f00a fcaf 	bl	80ab25c <__aeabi_dsub>
 80a08fe:	4602      	mov	r2, r0
 80a0900:	460b      	mov	r3, r1
 80a0902:	4640      	mov	r0, r8
 80a0904:	4649      	mov	r1, r9
 80a0906:	f00b f8f1 	bl	80abaec <__aeabi_dcmpgt>
 80a090a:	2800      	cmp	r0, #0
 80a090c:	d0ce      	beq.n	80a08ac <_ZN10Bar_Matrix14bouncing_linesEv+0x150>
 80a090e:	f1bb 0f00 	cmp.w	fp, #0
 80a0912:	ddcb      	ble.n	80a08ac <_ZN10Bar_Matrix14bouncing_linesEv+0x150>
            bouncing_line_directions[i] = -1;
 80a0914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a0918:	6623      	str	r3, [r4, #96]	; 0x60
 80a091a:	e7b3      	b.n	80a0884 <_ZN10Bar_Matrix14bouncing_linesEv+0x128>
        }
    }
}
 80a091c:	b007      	add	sp, #28
 80a091e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0922:	bf00      	nop
 80a0924:	2000007e 	.word	0x2000007e
 80a0928:	bfe00000 	.word	0xbfe00000
 80a092c:	41700000 	.word	0x41700000
 80a0930:	3fe00000 	.word	0x3fe00000
 80a0934:	404d0000 	.word	0x404d0000
 80a0938:	20000074 	.word	0x20000074

080a093c <_ZN10Bar_Matrix10pixel_testEv>:
/* ================================================================== *
 * Function: bar_test
 * Description: Turns on lights from top to check length of srip
 * Parameters: None
 * ================================================================== */
void Bar_Matrix::pixel_test() {
 80a093c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    clear_matrix();
 80a0940:	f7ff fd5c 	bl	80a03fc <_ZN10Bar_Matrix12clear_matrixEv>
 80a0944:	2400      	movs	r4, #0
    for (int i = 0; i < NUM_BARS; i++)
    bars[i]->setPixelColor(STRIP_LENGTH-int(millis()/1000)%10, 64, 64, 64);
 80a0946:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80a094a:	250a      	movs	r5, #10
 80a094c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80a0984 <_ZN10Bar_Matrix10pixel_testEv+0x48>
 80a0950:	f8d8 3000 	ldr.w	r3, [r8]
 80a0954:	591e      	ldr	r6, [r3, r4]
 80a0956:	f004 fc63 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
 80a095a:	fbb0 f0f7 	udiv	r0, r0, r7
 80a095e:	fbb0 f1f5 	udiv	r1, r0, r5
 80a0962:	2340      	movs	r3, #64	; 0x40
 80a0964:	fb05 0111 	mls	r1, r5, r1, r0
 80a0968:	f1c1 013a 	rsb	r1, r1, #58	; 0x3a
 80a096c:	461a      	mov	r2, r3
 80a096e:	4630      	mov	r0, r6
 80a0970:	9300      	str	r3, [sp, #0]
 80a0972:	b289      	uxth	r1, r1
 80a0974:	3404      	adds	r4, #4
 80a0976:	f002 fe9b 	bl	80a36b0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    for (int i = 0; i < NUM_BARS; i++)
 80a097a:	2c20      	cmp	r4, #32
 80a097c:	d1e8      	bne.n	80a0950 <_ZN10Bar_Matrix10pixel_testEv+0x14>
}
 80a097e:	b002      	add	sp, #8
 80a0980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0984:	20000070 	.word	0x20000070

080a0988 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80a0988:	b570      	push	{r4, r5, r6, lr}
 80a098a:	4606      	mov	r6, r0
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80a098c:	4608      	mov	r0, r1
 80a098e:	f00a fdb3 	bl	80ab4f8 <__aeabi_i2d>
 80a0992:	4604      	mov	r4, r0
 80a0994:	460d      	mov	r5, r1
 80a0996:	4630      	mov	r0, r6
 80a0998:	f00a fdc0 	bl	80ab51c <__aeabi_f2d>
 80a099c:	4622      	mov	r2, r4
 80a099e:	462b      	mov	r3, r5
    }
 80a09a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return pow(__type(__x), __type(__y));
 80a09a4:	f007 b934 	b.w	80a7c10 <pow>

080a09a8 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb>:
/* ================================================================== *
 * Function: visualizer_bars
 * Description: Sets all pixel values to given color value
 * Parameters: [audio_bins]* bins - frequency bins read from chip
 * ================================================================== */
 void Bar_Matrix::visualizer_bars(audio_bins* bins, float in_factor, float out_factor, bool strobe) {
 80a09a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a09ac:	b08f      	sub	sp, #60	; 0x3c
 80a09ae:	920c      	str	r2, [sp, #48]	; 0x30
 80a09b0:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 80a09b4:	4681      	mov	r9, r0
   decay(out_factor);
 80a09b6:	4618      	mov	r0, r3
 void Bar_Matrix::visualizer_bars(audio_bins* bins, float in_factor, float out_factor, bool strobe) {
 80a09b8:	9209      	str	r2, [sp, #36]	; 0x24
 80a09ba:	460c      	mov	r4, r1
   decay(out_factor);
 80a09bc:	f00a fdae 	bl	80ab51c <__aeabi_f2d>
 80a09c0:	4602      	mov	r2, r0
 80a09c2:	460b      	mov	r3, r1
 80a09c4:	4648      	mov	r0, r9
 80a09c6:	f7ff fb81 	bl	80a00cc <_ZN10Bar_Matrix5decayEd>
   float bass_level = 0;
   int red, green, blue;

   if (strobe)
 80a09ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a09cc:	2b00      	cmp	r3, #0
 80a09ce:	d04a      	beq.n	80a0a66 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xbe>
     bass_level = (log(((bins->left[LEFT_63]+bins->right[LEFT_63])/2.0f)/BINS_MAX)+0.7f) * 5 * 255.0f;
 80a09d0:	69e3      	ldr	r3, [r4, #28]
 80a09d2:	6820      	ldr	r0, [r4, #0]
 80a09d4:	4418      	add	r0, r3
 80a09d6:	f00b f9fb 	bl	80abdd0 <__aeabi_i2f>
 80a09da:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a09de:	f00b fa4b 	bl	80abe78 <__aeabi_fmul>
 80a09e2:	49b1      	ldr	r1, [pc, #708]	; (80a0ca8 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x300>)
 80a09e4:	f00b fafc 	bl	80abfe0 <__aeabi_fdiv>
  { return __builtin_logf(__x); }
 80a09e8:	f007 fb10 	bl	80a800c <logf>
 80a09ec:	49af      	ldr	r1, [pc, #700]	; (80a0cac <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x304>)
 80a09ee:	f00b f93b 	bl	80abc68 <__addsf3>
 80a09f2:	49af      	ldr	r1, [pc, #700]	; (80a0cb0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x308>)
 80a09f4:	f00b fa40 	bl	80abe78 <__aeabi_fmul>
 80a09f8:	49ae      	ldr	r1, [pc, #696]	; (80a0cb4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x30c>)
 80a09fa:	f00b fa3d 	bl	80abe78 <__aeabi_fmul>
 80a09fe:	9008      	str	r0, [sp, #32]
   float bass_level = 0;
 80a0a00:	f04f 0b00 	mov.w	fp, #0

   for (char i = 0; i < disp_width; i++) {
 80a0a04:	4bac      	ldr	r3, [pc, #688]	; (80a0cb8 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x310>)
 80a0a06:	fa5f f58b 	uxtb.w	r5, fp
 80a0a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a0a0e:	429d      	cmp	r5, r3
 80a0a10:	f280 8133 	bge.w	80a0c7a <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2d2>
 80a0a14:	2300      	movs	r3, #0
 80a0a16:	9307      	str	r3, [sp, #28]
     for (char j = 0; j < disp_height; j++) {
 80a0a18:	4ba8      	ldr	r3, [pc, #672]	; (80a0cbc <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x314>)
 80a0a1a:	f89d a01c 	ldrb.w	sl, [sp, #28]
 80a0a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a0a22:	459a      	cmp	sl, r3
 80a0a24:	f280 8126 	bge.w	80a0c74 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2cc>
       // get bin
       //int level = (i < disp_width/2) ? bar_levels[i] : bar_levels[7-i];

       if (strobe)
 80a0a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a0a2a:	b16b      	cbz	r3, 80a0a48 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xa0>
         mix_pixel(i, j, 0.5f, bass_level, bass_level, bass_level);
 80a0a2c:	9808      	ldr	r0, [sp, #32]
 80a0a2e:	f00b fc25 	bl	80ac27c <__aeabi_f2uiz>
 80a0a32:	b2c0      	uxtb	r0, r0
 80a0a34:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80a0a38:	9000      	str	r0, [sp, #0]
 80a0a3a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80a0a3e:	4652      	mov	r2, sl
 80a0a40:	4629      	mov	r1, r5
 80a0a42:	4648      	mov	r0, r9
 80a0a44:	f7ff fc6c 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>

       // Set bar levels
       int level = 0;
       if (disp_width == 8) {
 80a0a48:	4b9b      	ldr	r3, [pc, #620]	; (80a0cb8 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x310>)
 80a0a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a0a4e:	2b08      	cmp	r3, #8
 80a0a50:	f040 809e 	bne.w	80a0b90 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x1e8>
        switch(i) {
 80a0a54:	2d07      	cmp	r5, #7
 80a0a56:	f200 80bb 	bhi.w	80a0bd0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x228>
 80a0a5a:	e8df f005 	tbb	[pc, r5]
 80a0a5e:	8b07      	.short	0x8b07
 80a0a60:	93918f8d 	.word	0x93918f8d
 80a0a64:	9795      	.short	0x9795
   float bass_level = 0;
 80a0a66:	2300      	movs	r3, #0
 80a0a68:	9308      	str	r3, [sp, #32]
 80a0a6a:	e7c9      	b.n	80a0a00 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x58>
            case 0:
            level = bins->left[LEFT_160];
 80a0a6c:	6860      	ldr	r0, [r4, #4]
            level = bins->right[RIGHT_160];
            break;
        }  
       }

       level *= FREQ_GAIN;
 80a0a6e:	f00b f9af 	bl	80abdd0 <__aeabi_i2f>
 80a0a72:	f00b fbdd 	bl	80ac230 <__aeabi_f2iz>
 80a0a76:	900d      	str	r0, [sp, #52]	; 0x34
       // set bar
       if (j < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH)) {
 80a0a78:	f00b f9aa 	bl	80abdd0 <__aeabi_i2f>
 80a0a7c:	498a      	ldr	r1, [pc, #552]	; (80a0ca8 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x300>)
 80a0a7e:	f00b faaf 	bl	80abfe0 <__aeabi_fdiv>
 80a0a82:	2102      	movs	r1, #2
 80a0a84:	f7ff ff80 	bl	80a0988 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a0a88:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a0a8c:	4650      	mov	r0, sl
 80a0a8e:	f00a fd33 	bl	80ab4f8 <__aeabi_i2d>
 80a0a92:	2200      	movs	r2, #0
 80a0a94:	4607      	mov	r7, r0
 80a0a96:	4688      	mov	r8, r1
 80a0a98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a0a9c:	4b88      	ldr	r3, [pc, #544]	; (80a0cc0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x318>)
 80a0a9e:	f00a fd95 	bl	80ab5cc <__aeabi_dmul>
 80a0aa2:	4602      	mov	r2, r0
 80a0aa4:	460b      	mov	r3, r1
 80a0aa6:	4638      	mov	r0, r7
 80a0aa8:	4641      	mov	r1, r8
 80a0aaa:	f00b f801 	bl	80abab0 <__aeabi_dcmplt>
 80a0aae:	2800      	cmp	r0, #0
 80a0ab0:	d05c      	beq.n	80a0b6c <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x1c4>
       //if (j < (float)(level)/(float)(BINS_MAX) * (STRIP_LENGTH))

         float val = level*2*PI/BINS_MAX;
 80a0ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a0ab4:	0058      	lsls	r0, r3, #1
 80a0ab6:	f00a fd1f 	bl	80ab4f8 <__aeabi_i2d>
 80a0aba:	a371      	add	r3, pc, #452	; (adr r3, 80a0c80 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2d8>)
 80a0abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ac0:	f00a fd84 	bl	80ab5cc <__aeabi_dmul>
 80a0ac4:	a370      	add	r3, pc, #448	; (adr r3, 80a0c88 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2e0>)
 80a0ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0aca:	f00a fea9 	bl	80ab820 <__aeabi_ddiv>
 80a0ace:	f00b f875 	bl	80abbbc <__aeabi_d2f>

         // Select colors
         switch(bd->num_beats() % 3) {
 80a0ad2:	4b7c      	ldr	r3, [pc, #496]	; (80a0cc4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x31c>)
         float val = level*2*PI/BINS_MAX;
 80a0ad4:	4680      	mov	r8, r0
         switch(bd->num_beats() % 3) {
 80a0ad6:	6818      	ldr	r0, [r3, #0]
 80a0ad8:	f001 fb09 	bl	80a20ee <_ZN14Beat_Detection9num_beatsEv>
 80a0adc:	2303      	movs	r3, #3
 80a0ade:	fb90 f3f3 	sdiv	r3, r0, r3
 80a0ae2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a0ae6:	1ac0      	subs	r0, r0, r3
 80a0ae8:	2801      	cmp	r0, #1
 80a0aea:	d073      	beq.n	80a0bd4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x22c>
 80a0aec:	2802      	cmp	r0, #2
 80a0aee:	f000 8092 	beq.w	80a0c16 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x26e>
 80a0af2:	bb68      	cbnz	r0, 80a0b50 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x1a8>
  { return __builtin_cosf(__x); }
 80a0af4:	4640      	mov	r0, r8
 80a0af6:	f007 f84f 	bl	80a7b98 <cosf>
           case 0:
             red = cos(val)*255;
 80a0afa:	496e      	ldr	r1, [pc, #440]	; (80a0cb4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x30c>)
 80a0afc:	f00b f9bc 	bl	80abe78 <__aeabi_fmul>
 80a0b00:	f00b fb96 	bl	80ac230 <__aeabi_f2iz>
 80a0b04:	9005      	str	r0, [sp, #20]
             green = cos(val - 2*PI/3)*255;
 80a0b06:	4640      	mov	r0, r8
 80a0b08:	f00a fd08 	bl	80ab51c <__aeabi_f2d>
 80a0b0c:	a360      	add	r3, pc, #384	; (adr r3, 80a0c90 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2e8>)
 80a0b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0b12:	4606      	mov	r6, r0
 80a0b14:	460f      	mov	r7, r1
 80a0b16:	f00a fba1 	bl	80ab25c <__aeabi_dsub>
 80a0b1a:	f006 ffe7 	bl	80a7aec <cos>
 80a0b1e:	a35e      	add	r3, pc, #376	; (adr r3, 80a0c98 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f0>)
 80a0b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0b24:	f00a fd52 	bl	80ab5cc <__aeabi_dmul>
 80a0b28:	f00b f800 	bl	80abb2c <__aeabi_d2iz>
             blue = cos(val - 4*PI/3)*255;
 80a0b2c:	a35c      	add	r3, pc, #368	; (adr r3, 80a0ca0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f8>)
 80a0b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
             green = cos(val - 2*PI/3)*255;
 80a0b32:	9006      	str	r0, [sp, #24]
             break;
           case 1:
             red = cos(val - 4*PI/3)*255;
             green = cos(val)*255;
             blue = cos(val - 2*PI/3)*255;
 80a0b34:	4630      	mov	r0, r6
 80a0b36:	4639      	mov	r1, r7
 80a0b38:	f00a fb90 	bl	80ab25c <__aeabi_dsub>
 80a0b3c:	f006 ffd6 	bl	80a7aec <cos>
 80a0b40:	a355      	add	r3, pc, #340	; (adr r3, 80a0c98 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f0>)
 80a0b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0b46:	f00a fd41 	bl	80ab5cc <__aeabi_dmul>
 80a0b4a:	f00a ffef 	bl	80abb2c <__aeabi_d2iz>
 80a0b4e:	4606      	mov	r6, r0
             green = cos(val - 4*PI/3)*255;
             blue = cos(val)*255;
             break;
         }

         mix_pixel(i, j, in_factor, red, green, blue);
 80a0b50:	b2f3      	uxtb	r3, r6
 80a0b52:	9302      	str	r3, [sp, #8]
 80a0b54:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80a0b58:	4652      	mov	r2, sl
 80a0b5a:	9301      	str	r3, [sp, #4]
 80a0b5c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80a0b60:	4629      	mov	r1, r5
 80a0b62:	9300      	str	r3, [sp, #0]
 80a0b64:	4648      	mov	r0, r9
 80a0b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a0b68:	f7ff fbda 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
     for (char j = 0; j < disp_height; j++) {
 80a0b6c:	9b07      	ldr	r3, [sp, #28]
 80a0b6e:	3301      	adds	r3, #1
 80a0b70:	9307      	str	r3, [sp, #28]
 80a0b72:	e751      	b.n	80a0a18 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x70>
            level = bins->left[LEFT_1000];
 80a0b74:	68e0      	ldr	r0, [r4, #12]
            break;
 80a0b76:	e77a      	b.n	80a0a6e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->left[LEFT_6250];
 80a0b78:	6960      	ldr	r0, [r4, #20]
            break;
 80a0b7a:	e778      	b.n	80a0a6e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->left[LEFT_16000];
 80a0b7c:	69a0      	ldr	r0, [r4, #24]
            break;
 80a0b7e:	e776      	b.n	80a0a6e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->right[RIGHT_16000];
 80a0b80:	6b60      	ldr	r0, [r4, #52]	; 0x34
            break;
 80a0b82:	e774      	b.n	80a0a6e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->right[RIGHT_6250];
 80a0b84:	6b20      	ldr	r0, [r4, #48]	; 0x30
            break;
 80a0b86:	e772      	b.n	80a0a6e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->right[RIGHT_1000];
 80a0b88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
            break;
 80a0b8a:	e770      	b.n	80a0a6e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->right[RIGHT_160];
 80a0b8c:	6a20      	ldr	r0, [r4, #32]
            break;
 80a0b8e:	e76e      	b.n	80a0a6e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
       } else if (disp_width == 10) {
 80a0b90:	2b0a      	cmp	r3, #10
 80a0b92:	d11d      	bne.n	80a0bd0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x228>
         switch(i) {
 80a0b94:	2d09      	cmp	r5, #9
 80a0b96:	d81b      	bhi.n	80a0bd0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x228>
 80a0b98:	a301      	add	r3, pc, #4	; (adr r3, 80a0ba0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x1f8>)
 80a0b9a:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 80a0b9e:	bf00      	nop
 80a0ba0:	080a0a6d 	.word	0x080a0a6d
 80a0ba4:	080a0bc9 	.word	0x080a0bc9
 80a0ba8:	080a0b75 	.word	0x080a0b75
 80a0bac:	080a0b79 	.word	0x080a0b79
 80a0bb0:	080a0b7d 	.word	0x080a0b7d
 80a0bb4:	080a0b81 	.word	0x080a0b81
 80a0bb8:	080a0b85 	.word	0x080a0b85
 80a0bbc:	080a0b89 	.word	0x080a0b89
 80a0bc0:	080a0bcd 	.word	0x080a0bcd
 80a0bc4:	080a0b8d 	.word	0x080a0b8d
            level = bins->left[LEFT_400];
 80a0bc8:	68a0      	ldr	r0, [r4, #8]
            break;
 80a0bca:	e750      	b.n	80a0a6e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
            level = bins->right[RIGHT_400];
 80a0bcc:	6a60      	ldr	r0, [r4, #36]	; 0x24
            break;
 80a0bce:	e74e      	b.n	80a0a6e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
       } else if (disp_width == 10) {
 80a0bd0:	2000      	movs	r0, #0
 80a0bd2:	e74c      	b.n	80a0a6e <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0xc6>
             red = cos(val - 4*PI/3)*255;
 80a0bd4:	4640      	mov	r0, r8
 80a0bd6:	f00a fca1 	bl	80ab51c <__aeabi_f2d>
 80a0bda:	a331      	add	r3, pc, #196	; (adr r3, 80a0ca0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f8>)
 80a0bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0be0:	4606      	mov	r6, r0
 80a0be2:	460f      	mov	r7, r1
 80a0be4:	f00a fb3a 	bl	80ab25c <__aeabi_dsub>
 80a0be8:	f006 ff80 	bl	80a7aec <cos>
 80a0bec:	a32a      	add	r3, pc, #168	; (adr r3, 80a0c98 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f0>)
 80a0bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0bf2:	f00a fceb 	bl	80ab5cc <__aeabi_dmul>
 80a0bf6:	f00a ff99 	bl	80abb2c <__aeabi_d2iz>
 80a0bfa:	9005      	str	r0, [sp, #20]
 80a0bfc:	4640      	mov	r0, r8
 80a0bfe:	f006 ffcb 	bl	80a7b98 <cosf>
             green = cos(val)*255;
 80a0c02:	492c      	ldr	r1, [pc, #176]	; (80a0cb4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x30c>)
 80a0c04:	f00b f938 	bl	80abe78 <__aeabi_fmul>
 80a0c08:	f00b fb12 	bl	80ac230 <__aeabi_f2iz>
             blue = cos(val - 2*PI/3)*255;
 80a0c0c:	a320      	add	r3, pc, #128	; (adr r3, 80a0c90 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2e8>)
 80a0c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
             green = cos(val)*255;
 80a0c12:	9006      	str	r0, [sp, #24]
             blue = cos(val - 2*PI/3)*255;
 80a0c14:	e78e      	b.n	80a0b34 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x18c>
             red = cos(val - 2*PI/3)*255;
 80a0c16:	4640      	mov	r0, r8
 80a0c18:	f00a fc80 	bl	80ab51c <__aeabi_f2d>
 80a0c1c:	a31c      	add	r3, pc, #112	; (adr r3, 80a0c90 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2e8>)
 80a0c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0c22:	4606      	mov	r6, r0
 80a0c24:	460f      	mov	r7, r1
 80a0c26:	f00a fb19 	bl	80ab25c <__aeabi_dsub>
 80a0c2a:	f006 ff5f 	bl	80a7aec <cos>
 80a0c2e:	a31a      	add	r3, pc, #104	; (adr r3, 80a0c98 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f0>)
 80a0c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0c34:	f00a fcca 	bl	80ab5cc <__aeabi_dmul>
 80a0c38:	f00a ff78 	bl	80abb2c <__aeabi_d2iz>
             green = cos(val - 4*PI/3)*255;
 80a0c3c:	a318      	add	r3, pc, #96	; (adr r3, 80a0ca0 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f8>)
 80a0c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
             red = cos(val - 2*PI/3)*255;
 80a0c42:	9005      	str	r0, [sp, #20]
             green = cos(val - 4*PI/3)*255;
 80a0c44:	4639      	mov	r1, r7
 80a0c46:	4630      	mov	r0, r6
 80a0c48:	f00a fb08 	bl	80ab25c <__aeabi_dsub>
 80a0c4c:	f006 ff4e 	bl	80a7aec <cos>
 80a0c50:	a311      	add	r3, pc, #68	; (adr r3, 80a0c98 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x2f0>)
 80a0c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0c56:	f00a fcb9 	bl	80ab5cc <__aeabi_dmul>
 80a0c5a:	f00a ff67 	bl	80abb2c <__aeabi_d2iz>
 80a0c5e:	9006      	str	r0, [sp, #24]
 80a0c60:	4640      	mov	r0, r8
 80a0c62:	f006 ff99 	bl	80a7b98 <cosf>
             blue = cos(val)*255;
 80a0c66:	4913      	ldr	r1, [pc, #76]	; (80a0cb4 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x30c>)
 80a0c68:	f00b f906 	bl	80abe78 <__aeabi_fmul>
 80a0c6c:	f00b fae0 	bl	80ac230 <__aeabi_f2iz>
 80a0c70:	4606      	mov	r6, r0
             break;
 80a0c72:	e76d      	b.n	80a0b50 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x1a8>
   for (char i = 0; i < disp_width; i++) {
 80a0c74:	f10b 0b01 	add.w	fp, fp, #1
 80a0c78:	e6c4      	b.n	80a0a04 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb+0x5c>
                                    bins->left[1]/(64-(bins->left[2]/128)),
                                    bins->left[2]/(64-(bins->left[0]/128)));*/
       }
     }
   }
 }
 80a0c7a:	b00f      	add	sp, #60	; 0x3c
 80a0c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0c80:	fc8b007a 	.word	0xfc8b007a
 80a0c84:	400921fa 	.word	0x400921fa
 80a0c88:	00000000 	.word	0x00000000
 80a0c8c:	40affe00 	.word	0x40affe00
 80a0c90:	fdb20051 	.word	0xfdb20051
 80a0c94:	4000c151 	.word	0x4000c151
 80a0c98:	00000000 	.word	0x00000000
 80a0c9c:	406fe000 	.word	0x406fe000
 80a0ca0:	fdb20051 	.word	0xfdb20051
 80a0ca4:	4010c151 	.word	0x4010c151
 80a0ca8:	457ff000 	.word	0x457ff000
 80a0cac:	3f333333 	.word	0x3f333333
 80a0cb0:	40a00000 	.word	0x40a00000
 80a0cb4:	437f0000 	.word	0x437f0000
 80a0cb8:	2000007e 	.word	0x2000007e
 80a0cbc:	2000007c 	.word	0x2000007c
 80a0cc0:	404d0000 	.word	0x404d0000
 80a0cc4:	20000074 	.word	0x20000074

080a0cc8 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff>:
 * Function: visualizer_bars_middle
 * Description: Bars start at the middle and go to the edges.
 *              One channel fills up, the other fills down.
 * Parameters: none.
 * ================================================================== */
void Bar_Matrix::visualizer_bars_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0ccc:	4606      	mov	r6, r0
 80a0cce:	b089      	sub	sp, #36	; 0x24
    decay(out_factor);
 80a0cd0:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_bars_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0cd2:	4690      	mov	r8, r2
 80a0cd4:	460c      	mov	r4, r1
    decay(out_factor);
 80a0cd6:	f00a fc21 	bl	80ab51c <__aeabi_f2d>

    if (bd->beat_on_bin(0) || bd->beat_on_bin(1)) {
 80a0cda:	4d66      	ldr	r5, [pc, #408]	; (80a0e74 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1ac>)
    decay(out_factor);
 80a0cdc:	4602      	mov	r2, r0
 80a0cde:	460b      	mov	r3, r1
 80a0ce0:	4630      	mov	r0, r6
 80a0ce2:	f7ff f9f3 	bl	80a00cc <_ZN10Bar_Matrix5decayEd>
    if (bd->beat_on_bin(0) || bd->beat_on_bin(1)) {
 80a0ce6:	2100      	movs	r1, #0
 80a0ce8:	6828      	ldr	r0, [r5, #0]
 80a0cea:	f001 f9fc 	bl	80a20e6 <_ZN14Beat_Detection11beat_on_binEi>
 80a0cee:	b308      	cbz	r0, 80a0d34 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x6c>
        //fill_bar(i, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
        color_table_idx = (color_table_idx+1) % 51;
 80a0cf0:	2033      	movs	r0, #51	; 0x33
 80a0cf2:	4961      	ldr	r1, [pc, #388]	; (80a0e78 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1b0>)
 80a0cf4:	680b      	ldr	r3, [r1, #0]
 80a0cf6:	3301      	adds	r3, #1
 80a0cf8:	fb93 f2f0 	sdiv	r2, r3, r0
 80a0cfc:	fb00 3312 	mls	r3, r0, r2, r3
 80a0d00:	600b      	str	r3, [r1, #0]
void Bar_Matrix::visualizer_bars_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0d02:	2300      	movs	r3, #0
                case 6: level = bins->left[LEFT_1000];  break;
                case 7: level = bins->left[LEFT_16000]; break;
            }
            level *= FREQ_GAIN;
            // set bar
            float p = (float)(level)/(float)(BINS_MAX);
 80a0d04:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80a0e84 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1bc>
            if (j < p*p * (STRIP_LENGTH/2)) {
 80a0d08:	f8df a17c 	ldr.w	sl, [pc, #380]	; 80a0e88 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1c0>
void Bar_Matrix::visualizer_bars_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0d0c:	9305      	str	r3, [sp, #20]
    for (char i = 0; i < disp_width; i++) {
 80a0d0e:	4b5b      	ldr	r3, [pc, #364]	; (80a0e7c <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1b4>)
 80a0d10:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80a0d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a0d18:	429d      	cmp	r5, r3
 80a0d1a:	f280 80a7 	bge.w	80a0e6c <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1a4>
 80a0d1e:	2700      	movs	r7, #0
                //j < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
                float val = level*2*PI/BINS_MAX;
                //mix_pixel(i, STRIP_LENGTH/2 - j, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                //mix_pixel(i, STRIP_LENGTH/2 - j, in_factor, bd->r(), bd->g(), bd->b());
                mix_pixel(i, STRIP_LENGTH/2 - j, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0d20:	f8df b154 	ldr.w	fp, [pc, #340]	; 80a0e78 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1b0>
            switch(i) {
 80a0d24:	2d07      	cmp	r5, #7
 80a0d26:	d858      	bhi.n	80a0dda <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x112>
 80a0d28:	e8df f005 	tbb	[pc, r5]
 80a0d2c:	4f4d4b0b 	.word	0x4f4d4b0b
 80a0d30:	554f5351 	.word	0x554f5351
    if (bd->beat_on_bin(0) || bd->beat_on_bin(1)) {
 80a0d34:	2101      	movs	r1, #1
 80a0d36:	6828      	ldr	r0, [r5, #0]
 80a0d38:	f001 f9d5 	bl	80a20e6 <_ZN14Beat_Detection11beat_on_binEi>
 80a0d3c:	2800      	cmp	r0, #0
 80a0d3e:	d1d7      	bne.n	80a0cf0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x28>
 80a0d40:	e7df      	b.n	80a0d02 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x3a>
                case 0: level = bins->left[LEFT_63];    break;
 80a0d42:	6820      	ldr	r0, [r4, #0]
            level *= FREQ_GAIN;
 80a0d44:	f00b f844 	bl	80abdd0 <__aeabi_i2f>
 80a0d48:	f00b fa72 	bl	80ac230 <__aeabi_f2iz>
            float p = (float)(level)/(float)(BINS_MAX);
 80a0d4c:	f00b f840 	bl	80abdd0 <__aeabi_i2f>
 80a0d50:	4649      	mov	r1, r9
 80a0d52:	f00b f945 	bl	80abfe0 <__aeabi_fdiv>
 80a0d56:	9007      	str	r0, [sp, #28]
            if (j < p*p * (STRIP_LENGTH/2)) {
 80a0d58:	4638      	mov	r0, r7
 80a0d5a:	f00b f839 	bl	80abdd0 <__aeabi_i2f>
 80a0d5e:	9907      	ldr	r1, [sp, #28]
 80a0d60:	9006      	str	r0, [sp, #24]
 80a0d62:	4608      	mov	r0, r1
 80a0d64:	f00b f888 	bl	80abe78 <__aeabi_fmul>
 80a0d68:	4651      	mov	r1, sl
 80a0d6a:	f00b f885 	bl	80abe78 <__aeabi_fmul>
 80a0d6e:	9b06      	ldr	r3, [sp, #24]
 80a0d70:	4601      	mov	r1, r0
 80a0d72:	4618      	mov	r0, r3
 80a0d74:	f00b fa1e 	bl	80ac1b4 <__aeabi_fcmplt>
 80a0d78:	b1a8      	cbz	r0, 80a0da6 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0xde>
                mix_pixel(i, STRIP_LENGTH/2 - j, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0d7a:	230c      	movs	r3, #12
 80a0d7c:	f8db 0000 	ldr.w	r0, [fp]
 80a0d80:	493f      	ldr	r1, [pc, #252]	; (80a0e80 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1b8>)
 80a0d82:	4343      	muls	r3, r0
 80a0d84:	18c8      	adds	r0, r1, r3
 80a0d86:	f890 c008 	ldrb.w	ip, [r0, #8]
 80a0d8a:	5ccb      	ldrb	r3, [r1, r3]
 80a0d8c:	7900      	ldrb	r0, [r0, #4]
 80a0d8e:	f1c7 021d 	rsb	r2, r7, #29
 80a0d92:	9001      	str	r0, [sp, #4]
 80a0d94:	9300      	str	r3, [sp, #0]
 80a0d96:	4629      	mov	r1, r5
 80a0d98:	4643      	mov	r3, r8
 80a0d9a:	4630      	mov	r0, r6
 80a0d9c:	f8cd c008 	str.w	ip, [sp, #8]
 80a0da0:	b292      	uxth	r2, r2
 80a0da2:	f7ff fabd 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = 0; j < STRIP_LENGTH/2; j++) {
 80a0da6:	3701      	adds	r7, #1
 80a0da8:	2f1d      	cmp	r7, #29
 80a0daa:	d1bb      	bne.n	80a0d24 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x5c>
 80a0dac:	2700      	movs	r7, #0
            if (j-STRIP_LENGTH/2 < p*p * (STRIP_LENGTH/2)) {
                //j-STRIP_LENGTH/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
                float val = level*2*PI/BINS_MAX;
                //mix_pixel(i, j, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                //mix_pixel(i, j, in_factor, bd->r(), bd->g(), bd->b());//reds[i], greens[i], blues[i]);
                mix_pixel(i, j, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0dae:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 80a0e78 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1b0>
            switch(i) {
 80a0db2:	2d07      	cmp	r5, #7
 80a0db4:	d858      	bhi.n	80a0e68 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1a0>
 80a0db6:	e8df f005 	tbb	[pc, r5]
 80a0dba:	4b12      	.short	0x4b12
 80a0dbc:	53514f4d 	.word	0x53514f4d
 80a0dc0:	554f      	.short	0x554f
                case 1: level = bins->left[LEFT_160];   break;
 80a0dc2:	6860      	ldr	r0, [r4, #4]
 80a0dc4:	e7be      	b.n	80a0d44 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
                case 2: level = bins->left[LEFT_400];   break;
 80a0dc6:	68a0      	ldr	r0, [r4, #8]
 80a0dc8:	e7bc      	b.n	80a0d44 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
                case 3: level = bins->left[LEFT_1000];  break;
 80a0dca:	68e0      	ldr	r0, [r4, #12]
 80a0dcc:	e7ba      	b.n	80a0d44 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
                case 4: level = bins->left[LEFT_2500];  break;
 80a0dce:	6920      	ldr	r0, [r4, #16]
 80a0dd0:	e7b8      	b.n	80a0d44 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
                case 5: level = bins->left[LEFT_6250];  break;
 80a0dd2:	6960      	ldr	r0, [r4, #20]
 80a0dd4:	e7b6      	b.n	80a0d44 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
                case 7: level = bins->left[LEFT_16000]; break;
 80a0dd6:	69a0      	ldr	r0, [r4, #24]
 80a0dd8:	e7b4      	b.n	80a0d44 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
 80a0dda:	2000      	movs	r0, #0
 80a0ddc:	e7b2      	b.n	80a0d44 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x7c>
                case 0: level = bins->right[RIGHT_63];    break;
 80a0dde:	69e0      	ldr	r0, [r4, #28]
            level *= FREQ_GAIN;
 80a0de0:	f00a fff6 	bl	80abdd0 <__aeabi_i2f>
 80a0de4:	f00b fa24 	bl	80ac230 <__aeabi_f2iz>
            float p = (float)(level)/(float)(BINS_MAX);
 80a0de8:	f00a fff2 	bl	80abdd0 <__aeabi_i2f>
 80a0dec:	4649      	mov	r1, r9
 80a0dee:	f00b f8f7 	bl	80abfe0 <__aeabi_fdiv>
 80a0df2:	9007      	str	r0, [sp, #28]
            if (j-STRIP_LENGTH/2 < p*p * (STRIP_LENGTH/2)) {
 80a0df4:	4638      	mov	r0, r7
 80a0df6:	f00a ffeb 	bl	80abdd0 <__aeabi_i2f>
 80a0dfa:	9907      	ldr	r1, [sp, #28]
 80a0dfc:	9006      	str	r0, [sp, #24]
 80a0dfe:	4608      	mov	r0, r1
 80a0e00:	f00b f83a 	bl	80abe78 <__aeabi_fmul>
 80a0e04:	4651      	mov	r1, sl
 80a0e06:	f00b f837 	bl	80abe78 <__aeabi_fmul>
 80a0e0a:	9b06      	ldr	r3, [sp, #24]
 80a0e0c:	4601      	mov	r1, r0
 80a0e0e:	4618      	mov	r0, r3
 80a0e10:	f00b f9d0 	bl	80ac1b4 <__aeabi_fcmplt>
 80a0e14:	b1a8      	cbz	r0, 80a0e42 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x17a>
                mix_pixel(i, j, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0e16:	230c      	movs	r3, #12
 80a0e18:	f8db 0000 	ldr.w	r0, [fp]
 80a0e1c:	4918      	ldr	r1, [pc, #96]	; (80a0e80 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x1b8>)
 80a0e1e:	4343      	muls	r3, r0
 80a0e20:	18c8      	adds	r0, r1, r3
 80a0e22:	f890 c008 	ldrb.w	ip, [r0, #8]
 80a0e26:	5ccb      	ldrb	r3, [r1, r3]
 80a0e28:	7900      	ldrb	r0, [r0, #4]
 80a0e2a:	f107 021d 	add.w	r2, r7, #29
 80a0e2e:	9001      	str	r0, [sp, #4]
 80a0e30:	9300      	str	r3, [sp, #0]
 80a0e32:	4629      	mov	r1, r5
 80a0e34:	4643      	mov	r3, r8
 80a0e36:	4630      	mov	r0, r6
 80a0e38:	f8cd c008 	str.w	ip, [sp, #8]
 80a0e3c:	b292      	uxth	r2, r2
 80a0e3e:	f7ff fa6f 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = STRIP_LENGTH/2; j < STRIP_LENGTH; j++) {
 80a0e42:	3701      	adds	r7, #1
 80a0e44:	2f1d      	cmp	r7, #29
 80a0e46:	d1b4      	bne.n	80a0db2 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0xea>
    for (char i = 0; i < disp_width; i++) {
 80a0e48:	9b05      	ldr	r3, [sp, #20]
 80a0e4a:	3301      	adds	r3, #1
 80a0e4c:	9305      	str	r3, [sp, #20]
 80a0e4e:	e75e      	b.n	80a0d0e <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x46>
                case 1: level = bins->right[RIGHT_160];   break;
 80a0e50:	6a20      	ldr	r0, [r4, #32]
 80a0e52:	e7c5      	b.n	80a0de0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
                case 2: level = bins->right[RIGHT_400];   break;
 80a0e54:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0e56:	e7c3      	b.n	80a0de0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
                case 3: level = bins->right[RIGHT_1000];  break;
 80a0e58:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0e5a:	e7c1      	b.n	80a0de0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
                case 4: level = bins->right[RIGHT_2500];  break;
 80a0e5c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a0e5e:	e7bf      	b.n	80a0de0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
                case 5: level = bins->right[RIGHT_6250];  break;
 80a0e60:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80a0e62:	e7bd      	b.n	80a0de0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
                case 7: level = bins->right[RIGHT_16000]; break;
 80a0e64:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80a0e66:	e7bb      	b.n	80a0de0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
 80a0e68:	2000      	movs	r0, #0
 80a0e6a:	e7b9      	b.n	80a0de0 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff+0x118>
            }
        }
    }
}
 80a0e6c:	b009      	add	sp, #36	; 0x24
 80a0e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0e72:	bf00      	nop
 80a0e74:	20000074 	.word	0x20000074
 80a0e78:	20000078 	.word	0x20000078
 80a0e7c:	2000007e 	.word	0x2000007e
 80a0e80:	080ac6bc 	.word	0x080ac6bc
 80a0e84:	457ff000 	.word	0x457ff000
 80a0e88:	41e80000 	.word	0x41e80000

080a0e8c <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff>:
/* ================================================================== *
 * Function: visualizer_bass_middle
 * Description: All bars react to bass beats. Bulge in middle of display
 * Parameters: none.
 * ================================================================== */
void Bar_Matrix::visualizer_bass_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0e90:	4604      	mov	r4, r0
 80a0e92:	b089      	sub	sp, #36	; 0x24
    decay(out_factor);
 80a0e94:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_bass_middle(audio_bins* bins, float in_factor, float out_factor) {
 80a0e96:	4690      	mov	r8, r2
 80a0e98:	460d      	mov	r5, r1
    decay(out_factor);
 80a0e9a:	f00a fb3f 	bl	80ab51c <__aeabi_f2d>

    if (bd->num_beats() != last_beat_count) {
 80a0e9e:	4e43      	ldr	r6, [pc, #268]	; (80a0fac <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x120>)
    decay(out_factor);
 80a0ea0:	4602      	mov	r2, r0
 80a0ea2:	460b      	mov	r3, r1
 80a0ea4:	4620      	mov	r0, r4
 80a0ea6:	f7ff f911 	bl	80a00cc <_ZN10Bar_Matrix5decayEd>
    if (bd->num_beats() != last_beat_count) {
 80a0eaa:	6830      	ldr	r0, [r6, #0]
 80a0eac:	f001 f91f 	bl	80a20ee <_ZN14Beat_Detection9num_beatsEv>
 80a0eb0:	f8d4 31f0 	ldr.w	r3, [r4, #496]	; 0x1f0
 80a0eb4:	4298      	cmp	r0, r3
 80a0eb6:	d00d      	beq.n	80a0ed4 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x48>
        last_beat_count = bd->num_beats();
 80a0eb8:	6830      	ldr	r0, [r6, #0]
 80a0eba:	f001 f918 	bl	80a20ee <_ZN14Beat_Detection9num_beatsEv>
 80a0ebe:	f8c4 01f0 	str.w	r0, [r4, #496]	; 0x1f0
        color_table_idx++;
        color_table_idx %= 51;
 80a0ec2:	2033      	movs	r0, #51	; 0x33
 80a0ec4:	493a      	ldr	r1, [pc, #232]	; (80a0fb0 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x124>)
        color_table_idx++;
 80a0ec6:	680b      	ldr	r3, [r1, #0]
 80a0ec8:	3301      	adds	r3, #1
        color_table_idx %= 51;
 80a0eca:	fb93 f2f0 	sdiv	r2, r3, r0
 80a0ece:	fb00 3312 	mls	r3, r0, r2, r3
 80a0ed2:	600b      	str	r3, [r1, #0]
    }

    // Average all 4 low frequency bins
    float energy = bins->right[RIGHT_63] + bins->left[LEFT_63] + bins->right[RIGHT_160] + bins->left[LEFT_160];
 80a0ed4:	682b      	ldr	r3, [r5, #0]
 80a0ed6:	69e8      	ldr	r0, [r5, #28]
    energy /= 4.0;
    energy /= (float) BINS_MAX;
    energy *= energy;
    // Use the "energy" of the low frequency bins to determine number of LEDs to light
    // Add 0.5 forces round to nearest integer
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
 80a0ed8:	2607      	movs	r6, #7
    float energy = bins->right[RIGHT_63] + bins->left[LEFT_63] + bins->right[RIGHT_160] + bins->left[LEFT_160];
 80a0eda:	4418      	add	r0, r3
 80a0edc:	6a2b      	ldr	r3, [r5, #32]
    for (int x = 0; x < NUM_BARS / 2; x++) {
        int num_lit = max_lit / (NUM_BARS/2 - x);
        int y = (STRIP_LENGTH / 2) - (num_lit / 2);

        for (int i = 0; i < num_lit; i++) {
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0ede:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 80a0fb0 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x124>
    float energy = bins->right[RIGHT_63] + bins->left[LEFT_63] + bins->right[RIGHT_160] + bins->left[LEFT_160];
 80a0ee2:	4418      	add	r0, r3
 80a0ee4:	686b      	ldr	r3, [r5, #4]
    for (int x = 0; x < NUM_BARS / 2; x++) {
 80a0ee6:	2500      	movs	r5, #0
    float energy = bins->right[RIGHT_63] + bins->left[LEFT_63] + bins->right[RIGHT_160] + bins->left[LEFT_160];
 80a0ee8:	4418      	add	r0, r3
 80a0eea:	f00a ff71 	bl	80abdd0 <__aeabi_i2f>
    energy /= 4.0;
 80a0eee:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a0ef2:	f00a ffc1 	bl	80abe78 <__aeabi_fmul>
    energy /= (float) BINS_MAX;
 80a0ef6:	492f      	ldr	r1, [pc, #188]	; (80a0fb4 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x128>)
 80a0ef8:	f00b f872 	bl	80abfe0 <__aeabi_fdiv>
 80a0efc:	4601      	mov	r1, r0
    energy *= energy;
 80a0efe:	f00a ffbb 	bl	80abe78 <__aeabi_fmul>
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
 80a0f02:	492d      	ldr	r1, [pc, #180]	; (80a0fb8 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x12c>)
 80a0f04:	f00a ffb8 	bl	80abe78 <__aeabi_fmul>
 80a0f08:	f00a fb08 	bl	80ab51c <__aeabi_f2d>
 80a0f0c:	2200      	movs	r2, #0
 80a0f0e:	4b2b      	ldr	r3, [pc, #172]	; (80a0fbc <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x130>)
 80a0f10:	f00a f9a6 	bl	80ab260 <__adddf3>
 80a0f14:	f00a fe0a 	bl	80abb2c <__aeabi_d2iz>
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0f18:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80a0fc0 <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x134>
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
 80a0f1c:	9004      	str	r0, [sp, #16]
        int num_lit = max_lit / (NUM_BARS/2 - x);
 80a0f1e:	9b04      	ldr	r3, [sp, #16]
 80a0f20:	f1c5 0704 	rsb	r7, r5, #4
 80a0f24:	fb93 f7f7 	sdiv	r7, r3, r7
        for (int i = 0; i < num_lit; i++) {
 80a0f28:	f04f 0a00 	mov.w	sl, #0
        int y = (STRIP_LENGTH / 2) - (num_lit / 2);
 80a0f2c:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
 80a0f30:	105b      	asrs	r3, r3, #1
 80a0f32:	f1c3 031d 	rsb	r3, r3, #29
 80a0f36:	9305      	str	r3, [sp, #20]
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0f38:	b2eb      	uxtb	r3, r5
 80a0f3a:	9306      	str	r3, [sp, #24]
        for (int i = 0; i < num_lit; i++) {
 80a0f3c:	45ba      	cmp	sl, r7
 80a0f3e:	da2c      	bge.n	80a0f9a <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x10e>
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0f40:	210c      	movs	r1, #12
 80a0f42:	9b05      	ldr	r3, [sp, #20]
 80a0f44:	eb03 020a 	add.w	r2, r3, sl
 80a0f48:	f8db 3000 	ldr.w	r3, [fp]
 80a0f4c:	b292      	uxth	r2, r2
 80a0f4e:	434b      	muls	r3, r1
 80a0f50:	eb09 0103 	add.w	r1, r9, r3
 80a0f54:	7a08      	ldrb	r0, [r1, #8]
 80a0f56:	f819 3003 	ldrb.w	r3, [r9, r3]
 80a0f5a:	7909      	ldrb	r1, [r1, #4]
 80a0f5c:	9002      	str	r0, [sp, #8]
 80a0f5e:	9101      	str	r1, [sp, #4]
 80a0f60:	4620      	mov	r0, r4
 80a0f62:	9906      	ldr	r1, [sp, #24]
 80a0f64:	9300      	str	r3, [sp, #0]
 80a0f66:	4643      	mov	r3, r8
 80a0f68:	9207      	str	r2, [sp, #28]
 80a0f6a:	f7ff f9d9 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(NUM_BARS-x-1, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a0f6e:	210c      	movs	r1, #12
 80a0f70:	f8db 3000 	ldr.w	r3, [fp]
 80a0f74:	9a07      	ldr	r2, [sp, #28]
 80a0f76:	434b      	muls	r3, r1
 80a0f78:	eb09 0103 	add.w	r1, r9, r3
 80a0f7c:	7a08      	ldrb	r0, [r1, #8]
 80a0f7e:	f819 3003 	ldrb.w	r3, [r9, r3]
 80a0f82:	7909      	ldrb	r1, [r1, #4]
 80a0f84:	9002      	str	r0, [sp, #8]
 80a0f86:	9101      	str	r1, [sp, #4]
 80a0f88:	9300      	str	r3, [sp, #0]
 80a0f8a:	4631      	mov	r1, r6
 80a0f8c:	4643      	mov	r3, r8
 80a0f8e:	4620      	mov	r0, r4
 80a0f90:	f7ff f9c6 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (int i = 0; i < num_lit; i++) {
 80a0f94:	f10a 0a01 	add.w	sl, sl, #1
 80a0f98:	e7d0      	b.n	80a0f3c <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0xb0>
    for (int x = 0; x < NUM_BARS / 2; x++) {
 80a0f9a:	3501      	adds	r5, #1
 80a0f9c:	3e01      	subs	r6, #1
 80a0f9e:	2d04      	cmp	r5, #4
 80a0fa0:	b2f6      	uxtb	r6, r6
 80a0fa2:	d1bc      	bne.n	80a0f1e <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff+0x92>
        }
    }
}
 80a0fa4:	b009      	add	sp, #36	; 0x24
 80a0fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0faa:	bf00      	nop
 80a0fac:	20000074 	.word	0x20000074
 80a0fb0:	20000078 	.word	0x20000078
 80a0fb4:	457ff000 	.word	0x457ff000
 80a0fb8:	42680000 	.word	0x42680000
 80a0fbc:	3fe00000 	.word	0x3fe00000
 80a0fc0:	080ac6bc 	.word	0x080ac6bc

080a0fc4 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff>:
/* ================================================================== *
 * Function: visualizer_bass_slide
 * Description: All bars react to bass beats. Bulge in middle of display
 * Parameters: none.
 * ================================================================== */
void Bar_Matrix::visualizer_bass_slide(audio_bins* bins, float in_factor, float out_factor) {
 80a0fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0fc8:	4604      	mov	r4, r0
 80a0fca:	b089      	sub	sp, #36	; 0x24
    decay(out_factor);
 80a0fcc:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_bass_slide(audio_bins* bins, float in_factor, float out_factor) {
 80a0fce:	4617      	mov	r7, r2
 80a0fd0:	460d      	mov	r5, r1
    decay(out_factor);
 80a0fd2:	f00a faa3 	bl	80ab51c <__aeabi_f2d>

    if (bd->num_beats() != last_beat_count) {
 80a0fd6:	4e6c      	ldr	r6, [pc, #432]	; (80a1188 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1c4>)
    decay(out_factor);
 80a0fd8:	4602      	mov	r2, r0
 80a0fda:	460b      	mov	r3, r1
 80a0fdc:	4620      	mov	r0, r4
 80a0fde:	f7ff f875 	bl	80a00cc <_ZN10Bar_Matrix5decayEd>
    if (bd->num_beats() != last_beat_count) {
 80a0fe2:	6830      	ldr	r0, [r6, #0]
 80a0fe4:	f001 f883 	bl	80a20ee <_ZN14Beat_Detection9num_beatsEv>
 80a0fe8:	f8d4 31f0 	ldr.w	r3, [r4, #496]	; 0x1f0
 80a0fec:	4298      	cmp	r0, r3
 80a0fee:	d00d      	beq.n	80a100c <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x48>
        last_beat_count = bd->num_beats();
 80a0ff0:	6830      	ldr	r0, [r6, #0]
 80a0ff2:	f001 f87c 	bl	80a20ee <_ZN14Beat_Detection9num_beatsEv>
 80a0ff6:	f8c4 01f0 	str.w	r0, [r4, #496]	; 0x1f0
        color_table_idx++;
        color_table_idx %= 51;
 80a0ffa:	2033      	movs	r0, #51	; 0x33
 80a0ffc:	4963      	ldr	r1, [pc, #396]	; (80a118c <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1c8>)
        color_table_idx++;
 80a0ffe:	680b      	ldr	r3, [r1, #0]
 80a1000:	3301      	adds	r3, #1
        color_table_idx %= 51;
 80a1002:	fb93 f2f0 	sdiv	r2, r3, r0
 80a1006:	fb00 3312 	mls	r3, r0, r2, r3
 80a100a:	600b      	str	r3, [r1, #0]
    }

    // Average all 4 low frequency bins
    float energy = (bins->right[RIGHT_63] + bins->left[LEFT_63]) + (bins->right[RIGHT_160] + bins->left[LEFT_160])+ (bins->right[RIGHT_400] + bins->left[LEFT_400])+ (bins->right[RIGHT_1000] + bins->left[LEFT_1000])+ (bins->right[RIGHT_2500] + bins->left[LEFT_2500])+ (bins->right[RIGHT_6250] + bins->left[LEFT_6250])+ (bins->right[RIGHT_16000] + bins->left[LEFT_16000]);
 80a100c:	682a      	ldr	r2, [r5, #0]
 80a100e:	69eb      	ldr	r3, [r5, #28]
 80a1010:	6869      	ldr	r1, [r5, #4]
 80a1012:	4413      	add	r3, r2
 80a1014:	6a2a      	ldr	r2, [r5, #32]
 80a1016:	68e8      	ldr	r0, [r5, #12]
 80a1018:	440a      	add	r2, r1
 80a101a:	4413      	add	r3, r2
 80a101c:	68a9      	ldr	r1, [r5, #8]
 80a101e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80a1020:	440a      	add	r2, r1
 80a1022:	4413      	add	r3, r2
 80a1024:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a1026:	4402      	add	r2, r0
 80a1028:	4413      	add	r3, r2
 80a102a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80a102c:	692a      	ldr	r2, [r5, #16]
 80a102e:	4410      	add	r0, r2
 80a1030:	4403      	add	r3, r0
 80a1032:	696a      	ldr	r2, [r5, #20]
 80a1034:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80a1036:	4410      	add	r0, r2
 80a1038:	4403      	add	r3, r0
 80a103a:	69aa      	ldr	r2, [r5, #24]
 80a103c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80a103e:	4410      	add	r0, r2
 80a1040:	4418      	add	r0, r3
 80a1042:	f00a fec5 	bl	80abdd0 <__aeabi_i2f>
    energy = energy / 2;
 80a1046:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a104a:	f00a ff15 	bl	80abe78 <__aeabi_fmul>
    bass_slide_ema = 0.5 * energy + 0.5 * bass_slide_ema;
 80a104e:	f00a fa65 	bl	80ab51c <__aeabi_f2d>
 80a1052:	2200      	movs	r2, #0
 80a1054:	4b4e      	ldr	r3, [pc, #312]	; (80a1190 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1cc>)
 80a1056:	f00a fab9 	bl	80ab5cc <__aeabi_dmul>
 80a105a:	4680      	mov	r8, r0
 80a105c:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 80a1060:	4689      	mov	r9, r1
 80a1062:	f00a fa5b 	bl	80ab51c <__aeabi_f2d>
 80a1066:	2200      	movs	r2, #0
 80a1068:	4b49      	ldr	r3, [pc, #292]	; (80a1190 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1cc>)
 80a106a:	f00a faaf 	bl	80ab5cc <__aeabi_dmul>
 80a106e:	460b      	mov	r3, r1
 80a1070:	4602      	mov	r2, r0
 80a1072:	4649      	mov	r1, r9
 80a1074:	4640      	mov	r0, r8
 80a1076:	f00a f8f3 	bl	80ab260 <__adddf3>
 80a107a:	f00a fd9f 	bl	80abbbc <__aeabi_d2f>
 80a107e:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
 80a1082:	4605      	mov	r5, r0
 80a1084:	f004 f8cc 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
    // Add 0.5 forces round to nearest integer
    //bass_slide_ema = 0.9 * energy + 0.1 * bass_slide_ema;
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
    int middle_led = STRIP_LENGTH / 2;

    if (millis() - bass_slide_millis > 35) {
 80a1088:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80a108c:	1ac0      	subs	r0, r0, r3
 80a108e:	2823      	cmp	r0, #35	; 0x23
 80a1090:	d92b      	bls.n	80a10ea <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x126>
 80a1092:	f004 f8c5 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
        bass_slide_millis = millis();

        bass_slide_heights[0] = bass_slide_heights[1];
 80a1096:	f8d4 31f8 	ldr.w	r3, [r4, #504]	; 0x1f8
    energy /= 4.0;
 80a109a:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
        bass_slide_heights[0] = bass_slide_heights[1];
 80a109e:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
        bass_slide_heights[1] = bass_slide_heights[2];
 80a10a2:	f8d4 31fc 	ldr.w	r3, [r4, #508]	; 0x1fc
        bass_slide_millis = millis();
 80a10a6:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
        bass_slide_heights[1] = bass_slide_heights[2];
 80a10aa:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
        bass_slide_heights[2] = bass_slide_heights[3];
 80a10ae:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    energy /= 4.0;
 80a10b2:	4628      	mov	r0, r5
        bass_slide_heights[2] = bass_slide_heights[3];
 80a10b4:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
        bass_slide_heights[3] = bass_slide_heights[4];
 80a10b8:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 80a10bc:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    energy /= 4.0;
 80a10c0:	f00a feda 	bl	80abe78 <__aeabi_fmul>
    energy /= (float) BINS_MAX;
 80a10c4:	4933      	ldr	r1, [pc, #204]	; (80a1194 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1d0>)
 80a10c6:	f00a ff8b 	bl	80abfe0 <__aeabi_fdiv>
 80a10ca:	4601      	mov	r1, r0
    energy *= energy;
 80a10cc:	f00a fed4 	bl	80abe78 <__aeabi_fmul>
    int max_lit = (energy * (float)STRIP_LENGTH) + 0.5;
 80a10d0:	4931      	ldr	r1, [pc, #196]	; (80a1198 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1d4>)
 80a10d2:	f00a fed1 	bl	80abe78 <__aeabi_fmul>
 80a10d6:	f00a fa21 	bl	80ab51c <__aeabi_f2d>
 80a10da:	2200      	movs	r2, #0
 80a10dc:	4b2c      	ldr	r3, [pc, #176]	; (80a1190 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1cc>)
 80a10de:	f00a f8bf 	bl	80ab260 <__adddf3>
 80a10e2:	f00a fd23 	bl	80abb2c <__aeabi_d2iz>
 80a10e6:	f8c4 0204 	str.w	r0, [r4, #516]	; 0x204
void Bar_Matrix::visualizer_bass_slide(audio_bins* bins, float in_factor, float out_factor) {
 80a10ea:	2507      	movs	r5, #7
 80a10ec:	2600      	movs	r6, #0
 80a10ee:	f504 73fa 	add.w	r3, r4, #500	; 0x1f4
    for (int x = 0; x < NUM_BARS / 2; x++) {
        int num_lit = bass_slide_heights[x];// / (float)(NUM_BARS/2 - x);
        int y = (STRIP_LENGTH / 2) - (num_lit / 2);

        for (int i = 0; i < num_lit; i++) {
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a10f2:	f8df b098 	ldr.w	fp, [pc, #152]	; 80a118c <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1c8>
 80a10f6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80a119c <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1d8>
 80a10fa:	9304      	str	r3, [sp, #16]
        for (int i = 0; i < num_lit; i++) {
 80a10fc:	f04f 0900 	mov.w	r9, #0
        int num_lit = bass_slide_heights[x];// / (float)(NUM_BARS/2 - x);
 80a1100:	9b04      	ldr	r3, [sp, #16]
 80a1102:	f853 ab04 	ldr.w	sl, [r3], #4
 80a1106:	9304      	str	r3, [sp, #16]
        int y = (STRIP_LENGTH / 2) - (num_lit / 2);
 80a1108:	eb0a 73da 	add.w	r3, sl, sl, lsr #31
 80a110c:	105b      	asrs	r3, r3, #1
 80a110e:	f1c3 031d 	rsb	r3, r3, #29
 80a1112:	9305      	str	r3, [sp, #20]
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a1114:	b2f3      	uxtb	r3, r6
 80a1116:	9306      	str	r3, [sp, #24]
        for (int i = 0; i < num_lit; i++) {
 80a1118:	45d1      	cmp	r9, sl
 80a111a:	da2c      	bge.n	80a1176 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x1b2>
            mix_pixel(x, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a111c:	210c      	movs	r1, #12
 80a111e:	9b05      	ldr	r3, [sp, #20]
 80a1120:	eb03 0209 	add.w	r2, r3, r9
 80a1124:	f8db 3000 	ldr.w	r3, [fp]
 80a1128:	b292      	uxth	r2, r2
 80a112a:	434b      	muls	r3, r1
 80a112c:	eb08 0103 	add.w	r1, r8, r3
 80a1130:	7a08      	ldrb	r0, [r1, #8]
 80a1132:	f818 3003 	ldrb.w	r3, [r8, r3]
 80a1136:	7909      	ldrb	r1, [r1, #4]
 80a1138:	9002      	str	r0, [sp, #8]
 80a113a:	9101      	str	r1, [sp, #4]
 80a113c:	4620      	mov	r0, r4
 80a113e:	9906      	ldr	r1, [sp, #24]
 80a1140:	9300      	str	r3, [sp, #0]
 80a1142:	463b      	mov	r3, r7
 80a1144:	9207      	str	r2, [sp, #28]
 80a1146:	f7ff f8eb 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(NUM_BARS-x-1, y+i, in_factor, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a114a:	210c      	movs	r1, #12
 80a114c:	f8db 3000 	ldr.w	r3, [fp]
 80a1150:	9a07      	ldr	r2, [sp, #28]
 80a1152:	434b      	muls	r3, r1
 80a1154:	eb08 0103 	add.w	r1, r8, r3
 80a1158:	7a08      	ldrb	r0, [r1, #8]
 80a115a:	f818 3003 	ldrb.w	r3, [r8, r3]
 80a115e:	7909      	ldrb	r1, [r1, #4]
 80a1160:	9002      	str	r0, [sp, #8]
 80a1162:	9101      	str	r1, [sp, #4]
 80a1164:	9300      	str	r3, [sp, #0]
 80a1166:	4629      	mov	r1, r5
 80a1168:	463b      	mov	r3, r7
 80a116a:	4620      	mov	r0, r4
 80a116c:	f7ff f8d8 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (int i = 0; i < num_lit; i++) {
 80a1170:	f109 0901 	add.w	r9, r9, #1
 80a1174:	e7d0      	b.n	80a1118 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x154>
    for (int x = 0; x < NUM_BARS / 2; x++) {
 80a1176:	3601      	adds	r6, #1
 80a1178:	3d01      	subs	r5, #1
 80a117a:	2e04      	cmp	r6, #4
 80a117c:	b2ed      	uxtb	r5, r5
 80a117e:	d1bd      	bne.n	80a10fc <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff+0x138>
            mix_pixel(NUM_BARS-x-1, i, in_factor, 255-COLOR_TABLE[color_table_idx][0], 255-COLOR_TABLE[color_table_idx][1], 255-COLOR_TABLE[color_table_idx][2]);
            mix_pixel(x, y+i+num_lit, in_factor, 255-COLOR_TABLE[color_table_idx][0], 255-COLOR_TABLE[color_table_idx][1], 255-COLOR_TABLE[color_table_idx][2]);
            mix_pixel(NUM_BARS-x-1, y+i+num_lit, in_factor, 255-COLOR_TABLE[color_table_idx][0], 255-COLOR_TABLE[color_table_idx][1], 255-COLOR_TABLE[color_table_idx][2]);
        }*/
    }
}
 80a1180:	b009      	add	sp, #36	; 0x24
 80a1182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1186:	bf00      	nop
 80a1188:	20000074 	.word	0x20000074
 80a118c:	20000078 	.word	0x20000078
 80a1190:	3fe00000 	.word	0x3fe00000
 80a1194:	457ff000 	.word	0x457ff000
 80a1198:	42680000 	.word	0x42680000
 80a119c:	080ac6bc 	.word	0x080ac6bc

080a11a0 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff>:
/* ================================================================== *
 * Function: visualizer_classic
 * Description: Emulate Steven's original, pre-muse, visualizer.
 * Parameters: none.
 * ================================================================== */
void Bar_Matrix::visualizer_classic(audio_bins* bins, float in_factor, float out_factor) {
 80a11a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a11a4:	4605      	mov	r5, r0
 80a11a6:	b085      	sub	sp, #20
    decay_to_rgb(out_factor, 0, 0, 10);
 80a11a8:	4618      	mov	r0, r3
 80a11aa:	f00a f9b7 	bl	80ab51c <__aeabi_f2d>
 80a11ae:	2400      	movs	r4, #0
 80a11b0:	460b      	mov	r3, r1
 80a11b2:	210a      	movs	r1, #10
 80a11b4:	4602      	mov	r2, r0
 80a11b6:	e9cd 4101 	strd	r4, r1, [sp, #4]
 80a11ba:	4628      	mov	r0, r5
 80a11bc:	9400      	str	r4, [sp, #0]
 80a11be:	f7fe ffe1 	bl	80a0184 <_ZN10Bar_Matrix12decay_to_rgbEdiii>

    for (int i = 0; i < NUM_BINS; i++) {
        if (bd->beat_on_bin(i)) {
 80a11c2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80a1234 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x94>
            fill_bar(i, 200, 200, 200);
            //fill_bar(i, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
            color_table_idx = (color_table_idx+1) % 51;
 80a11c6:	4e1a      	ldr	r6, [pc, #104]	; (80a1230 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x90>)

            if (i == 6) {
                fill_bar(7, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a11c8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80a1238 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x98>
        if (bd->beat_on_bin(i)) {
 80a11cc:	4621      	mov	r1, r4
 80a11ce:	f8d9 0000 	ldr.w	r0, [r9]
 80a11d2:	f000 ff88 	bl	80a20e6 <_ZN14Beat_Detection11beat_on_binEi>
 80a11d6:	b328      	cbz	r0, 80a1224 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x84>
            fill_bar(i, 200, 200, 200);
 80a11d8:	23c8      	movs	r3, #200	; 0xc8
            color_table_idx = (color_table_idx+1) % 51;
 80a11da:	2733      	movs	r7, #51	; 0x33
            fill_bar(i, 200, 200, 200);
 80a11dc:	461a      	mov	r2, r3
 80a11de:	9300      	str	r3, [sp, #0]
 80a11e0:	4621      	mov	r1, r4
 80a11e2:	4628      	mov	r0, r5
 80a11e4:	f7ff f836 	bl	80a0254 <_ZN10Bar_Matrix8fill_barEiiii>
            color_table_idx = (color_table_idx+1) % 51;
 80a11e8:	6833      	ldr	r3, [r6, #0]
            if (i == 6) {
 80a11ea:	2c06      	cmp	r4, #6
            color_table_idx = (color_table_idx+1) % 51;
 80a11ec:	f103 0301 	add.w	r3, r3, #1
 80a11f0:	fb93 f2f7 	sdiv	r2, r3, r7
 80a11f4:	fb07 3312 	mls	r3, r7, r2, r3
 80a11f8:	6033      	str	r3, [r6, #0]
            if (i == 6) {
 80a11fa:	d113      	bne.n	80a1224 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x84>
                fill_bar(7, COLOR_TABLE[color_table_idx][0], COLOR_TABLE[color_table_idx][1], COLOR_TABLE[color_table_idx][2]);
 80a11fc:	220c      	movs	r2, #12
 80a11fe:	435a      	muls	r2, r3
 80a1200:	eb08 0302 	add.w	r3, r8, r2
 80a1204:	6899      	ldr	r1, [r3, #8]
 80a1206:	f858 2002 	ldr.w	r2, [r8, r2]
 80a120a:	685b      	ldr	r3, [r3, #4]
 80a120c:	9100      	str	r1, [sp, #0]
 80a120e:	4628      	mov	r0, r5
 80a1210:	2107      	movs	r1, #7
 80a1212:	f7ff f81f 	bl	80a0254 <_ZN10Bar_Matrix8fill_barEiiii>
                color_table_idx = (color_table_idx+1) % 51;
 80a1216:	6833      	ldr	r3, [r6, #0]
 80a1218:	3301      	adds	r3, #1
 80a121a:	fb93 f2f7 	sdiv	r2, r3, r7
 80a121e:	fb07 3712 	mls	r7, r7, r2, r3
 80a1222:	6037      	str	r7, [r6, #0]
    for (int i = 0; i < NUM_BINS; i++) {
 80a1224:	3401      	adds	r4, #1
 80a1226:	2c07      	cmp	r4, #7
 80a1228:	d1d0      	bne.n	80a11cc <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff+0x2c>
            }
        }
    }
}
 80a122a:	b005      	add	sp, #20
 80a122c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1230:	20000078 	.word	0x20000078
 80a1234:	20000074 	.word	0x20000074
 80a1238:	080ac6bc 	.word	0x080ac6bc
 80a123c:	00000000 	.word	0x00000000

080a1240 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff>:
/* ================================================================== *
 * Function: decay
 * Description: slowly fades out matrix values
 * Parameters: [float] factor - decay factor to be multiplied by
 * ================================================================== */
void Bar_Matrix::visualizer_plasma(audio_bins* bins, float in_factor, float out_factor) {
 80a1240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1244:	4680      	mov	r8, r0
 80a1246:	b08b      	sub	sp, #44	; 0x2c
    decay(out_factor);
 80a1248:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_plasma(audio_bins* bins, float in_factor, float out_factor) {
 80a124a:	4691      	mov	r9, r2
 80a124c:	460d      	mov	r5, r1
    decay(out_factor);
 80a124e:	f00a f965 	bl	80ab51c <__aeabi_f2d>
 80a1252:	4602      	mov	r2, r0
 80a1254:	460b      	mov	r3, r1
 80a1256:	4640      	mov	r0, r8
 80a1258:	f7fe ff38 	bl	80a00cc <_ZN10Bar_Matrix5decayEd>
 80a125c:	2300      	movs	r3, #0
 80a125e:	9305      	str	r3, [sp, #20]

    for (char i = 0; i < disp_width; i++) {
 80a1260:	4b69      	ldr	r3, [pc, #420]	; (80a1408 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1c8>)
 80a1262:	f89d 7014 	ldrb.w	r7, [sp, #20]
 80a1266:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a126a:	429f      	cmp	r7, r3
 80a126c:	f280 80b8 	bge.w	80a13e0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1a0>
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a1270:	4b66      	ldr	r3, [pc, #408]	; (80a140c <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1cc>)
            // Move wave up
            unsigned int color = bars[i]->getPixelColor(j-1);
 80a1272:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 80a1418 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1d8>
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a1276:	881c      	ldrh	r4, [r3, #0]
            unsigned int color = bars[i]->getPixelColor(j-1);
 80a1278:	00bb      	lsls	r3, r7, #2
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a127a:	3c01      	subs	r4, #1
 80a127c:	b224      	sxth	r4, r4
            unsigned int color = bars[i]->getPixelColor(j-1);
 80a127e:	9308      	str	r3, [sp, #32]
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a1280:	2c00      	cmp	r4, #0
 80a1282:	dd25      	ble.n	80a12d0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x90>
            unsigned int color = bars[i]->getPixelColor(j-1);
 80a1284:	b2a4      	uxth	r4, r4
 80a1286:	f8db 3000 	ldr.w	r3, [fp]
 80a128a:	9a08      	ldr	r2, [sp, #32]
 80a128c:	1e61      	subs	r1, r4, #1
 80a128e:	5898      	ldr	r0, [r3, r2]
 80a1290:	b289      	uxth	r1, r1
 80a1292:	f002 fa64 	bl	80a375e <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
            mix_pixel(i, j, in_factor, (char)(color >> 16), (char)(color >> 8), (char)(color));
 80a1296:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80a129a:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80a129e:	b2c6      	uxtb	r6, r0
 80a12a0:	4622      	mov	r2, r4
 80a12a2:	4639      	mov	r1, r7
 80a12a4:	4640      	mov	r0, r8
 80a12a6:	9306      	str	r3, [sp, #24]
 80a12a8:	9300      	str	r3, [sp, #0]
 80a12aa:	e9cd a601 	strd	sl, r6, [sp, #4]
 80a12ae:	464b      	mov	r3, r9
 80a12b0:	f7ff f836 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
            mix_pixel(i, j+1, in_factor, (char)(color >> 16), (char)(color >> 8), (char)(color));
 80a12b4:	9b06      	ldr	r3, [sp, #24]
 80a12b6:	1c62      	adds	r2, r4, #1
 80a12b8:	9300      	str	r3, [sp, #0]
 80a12ba:	4639      	mov	r1, r7
 80a12bc:	464b      	mov	r3, r9
 80a12be:	4640      	mov	r0, r8
 80a12c0:	e9cd a601 	strd	sl, r6, [sp, #4]
 80a12c4:	b292      	uxth	r2, r2
 80a12c6:	3c02      	subs	r4, #2
 80a12c8:	f7ff f82a 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a12cc:	b224      	sxth	r4, r4
 80a12ce:	e7d7      	b.n	80a1280 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x40>
        }

        // Set bar levels
        int level = 0;
        switch(i) {
 80a12d0:	2f07      	cmp	r7, #7
 80a12d2:	f200 8083 	bhi.w	80a13dc <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x19c>
 80a12d6:	e8df f007 	tbb	[pc, r7]
 80a12da:	7304      	.short	0x7304
 80a12dc:	7b797775 	.word	0x7b797775
 80a12e0:	7f7d      	.short	0x7f7d
            case 0: level = bins->left[LEFT_160];       break;
 80a12e2:	6868      	ldr	r0, [r5, #4]
            case 5: level = bins->right[RIGHT_6250];    break;
            case 6: level = bins->right[RIGHT_1000];    break;
            case 7: level = bins->right[RIGHT_160];     break;
        }

        level *= FREQ_GAIN;
 80a12e4:	f00a fd74 	bl	80abdd0 <__aeabi_i2f>
 80a12e8:	f00a ffa2 	bl	80ac230 <__aeabi_f2iz>
 80a12ec:	4604      	mov	r4, r0
        // set bar
        float val = level*2*PI/BINS_MAX;
 80a12ee:	0040      	lsls	r0, r0, #1
 80a12f0:	f00a f902 	bl	80ab4f8 <__aeabi_i2d>
 80a12f4:	a33c      	add	r3, pc, #240	; (adr r3, 80a13e8 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1a8>)
 80a12f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a12fa:	f00a f967 	bl	80ab5cc <__aeabi_dmul>
 80a12fe:	a33c      	add	r3, pc, #240	; (adr r3, 80a13f0 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1b0>)
 80a1300:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1304:	f00a fa8c 	bl	80ab820 <__aeabi_ddiv>
 80a1308:	f00a fc58 	bl	80abbbc <__aeabi_d2f>
 80a130c:	4606      	mov	r6, r0
        //float intensity = (pow((float)(level)/(float)(BINS_MAX), 2))*255;
        float intensity = (level)/(BINS_MAX)*255.0f;
 80a130e:	4620      	mov	r0, r4
 80a1310:	f00a fd5e 	bl	80abdd0 <__aeabi_i2f>
 80a1314:	493e      	ldr	r1, [pc, #248]	; (80a1410 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1d0>)
 80a1316:	f00a fe63 	bl	80abfe0 <__aeabi_fdiv>
 80a131a:	493e      	ldr	r1, [pc, #248]	; (80a1414 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1d4>)
 80a131c:	f00a fdac 	bl	80abe78 <__aeabi_fmul>
 80a1320:	4601      	mov	r1, r0
        intensity *= intensity;
 80a1322:	f00a fda9 	bl	80abe78 <__aeabi_fmul>
        if (intensity > 255) intensity = 255.0;
 80a1326:	493b      	ldr	r1, [pc, #236]	; (80a1414 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1d4>)
        intensity *= intensity;
 80a1328:	4604      	mov	r4, r0
        if (intensity > 255) intensity = 255.0;
 80a132a:	f00a ff61 	bl	80ac1f0 <__aeabi_fcmpgt>
 80a132e:	b100      	cbz	r0, 80a1332 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xf2>
 80a1330:	4c38      	ldr	r4, [pc, #224]	; (80a1414 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1d4>)
        mix_pixel(i, 0, in_factor, cos(val - 4*PI/3)*intensity, cos(val - 2*PI/3)*intensity, cos(val)*intensity);
 80a1332:	4630      	mov	r0, r6
 80a1334:	f00a f8f2 	bl	80ab51c <__aeabi_f2d>
 80a1338:	a32f      	add	r3, pc, #188	; (adr r3, 80a13f8 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1b8>)
 80a133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a133e:	4682      	mov	sl, r0
 80a1340:	468b      	mov	fp, r1
 80a1342:	f009 ff8b 	bl	80ab25c <__aeabi_dsub>
 80a1346:	f006 fbd1 	bl	80a7aec <cos>
 80a134a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a134e:	4620      	mov	r0, r4
 80a1350:	f00a f8e4 	bl	80ab51c <__aeabi_f2d>
 80a1354:	a32a      	add	r3, pc, #168	; (adr r3, 80a1400 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x1c0>)
 80a1356:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a135a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a135e:	4650      	mov	r0, sl
 80a1360:	4659      	mov	r1, fp
 80a1362:	f009 ff7b 	bl	80ab25c <__aeabi_dsub>
 80a1366:	f006 fbc1 	bl	80a7aec <cos>
 80a136a:	4682      	mov	sl, r0
 80a136c:	4630      	mov	r0, r6
 80a136e:	468b      	mov	fp, r1
 80a1370:	f006 fc12 	bl	80a7b98 <cosf>
 80a1374:	4601      	mov	r1, r0
 80a1376:	4620      	mov	r0, r4
 80a1378:	f00a fd7e 	bl	80abe78 <__aeabi_fmul>
 80a137c:	f00a ff7e 	bl	80ac27c <__aeabi_f2uiz>
 80a1380:	b2c0      	uxtb	r0, r0
 80a1382:	4652      	mov	r2, sl
 80a1384:	465b      	mov	r3, fp
 80a1386:	9002      	str	r0, [sp, #8]
 80a1388:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a138c:	f00a f91e 	bl	80ab5cc <__aeabi_dmul>
 80a1390:	f00a fbf4 	bl	80abb7c <__aeabi_d2uiz>
 80a1394:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a1398:	b2c0      	uxtb	r0, r0
 80a139a:	9001      	str	r0, [sp, #4]
 80a139c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a13a0:	f00a f914 	bl	80ab5cc <__aeabi_dmul>
 80a13a4:	f00a fbea 	bl	80abb7c <__aeabi_d2uiz>
 80a13a8:	b2c0      	uxtb	r0, r0
 80a13aa:	464b      	mov	r3, r9
 80a13ac:	9000      	str	r0, [sp, #0]
 80a13ae:	2200      	movs	r2, #0
 80a13b0:	4639      	mov	r1, r7
 80a13b2:	4640      	mov	r0, r8
 80a13b4:	f7fe ffb4 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
    for (char i = 0; i < disp_width; i++) {
 80a13b8:	9b05      	ldr	r3, [sp, #20]
 80a13ba:	3301      	adds	r3, #1
 80a13bc:	9305      	str	r3, [sp, #20]
 80a13be:	e74f      	b.n	80a1260 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0x20>
            case 1: level = bins->left[LEFT_1000];      break;
 80a13c0:	68e8      	ldr	r0, [r5, #12]
 80a13c2:	e78f      	b.n	80a12e4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
            case 2: level = bins->left[LEFT_6250];      break;
 80a13c4:	6968      	ldr	r0, [r5, #20]
 80a13c6:	e78d      	b.n	80a12e4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
            case 3: level = bins->left[LEFT_16000];     break;
 80a13c8:	69a8      	ldr	r0, [r5, #24]
 80a13ca:	e78b      	b.n	80a12e4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
            case 4: level = bins->right[RIGHT_16000];   break;
 80a13cc:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80a13ce:	e789      	b.n	80a12e4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
            case 5: level = bins->right[RIGHT_6250];    break;
 80a13d0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80a13d2:	e787      	b.n	80a12e4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
            case 6: level = bins->right[RIGHT_1000];    break;
 80a13d4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80a13d6:	e785      	b.n	80a12e4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
            case 7: level = bins->right[RIGHT_160];     break;
 80a13d8:	6a28      	ldr	r0, [r5, #32]
 80a13da:	e783      	b.n	80a12e4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>
        for (short j = disp_height - 1; j > 0; j-=2) {
 80a13dc:	2000      	movs	r0, #0
 80a13de:	e781      	b.n	80a12e4 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff+0xa4>

        //bars[i]->setPixelColor(0, cos(val - 2*PI/3)*intensity, cos(val)*intensity, cos(val - 4*PI/3)*intensity);

    }
}
 80a13e0:	b00b      	add	sp, #44	; 0x2c
 80a13e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a13e6:	bf00      	nop
 80a13e8:	fc8b007a 	.word	0xfc8b007a
 80a13ec:	400921fa 	.word	0x400921fa
 80a13f0:	00000000 	.word	0x00000000
 80a13f4:	40affe00 	.word	0x40affe00
 80a13f8:	fdb20051 	.word	0xfdb20051
 80a13fc:	4010c151 	.word	0x4010c151
 80a1400:	fdb20051 	.word	0xfdb20051
 80a1404:	4000c151 	.word	0x4000c151
 80a1408:	2000007e 	.word	0x2000007e
 80a140c:	2000007c 	.word	0x2000007c
 80a1410:	457ff000 	.word	0x457ff000
 80a1414:	437f0000 	.word	0x437f0000
 80a1418:	20000070 	.word	0x20000070

080a141c <_ZN10Bar_Matrix15visualizer_pongEf>:

void Bar_Matrix::visualizer_pong(float in_factor) {
 80a141c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1420:	4604      	mov	r4, r0
    pongPaddles[0].tick(&pongBall);
 80a1422:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
 80a1426:	f500 7ab0 	add.w	sl, r0, #352	; 0x160
void Bar_Matrix::visualizer_pong(float in_factor) {
 80a142a:	b085      	sub	sp, #20
    pongPaddles[0].tick(&pongBall);
 80a142c:	4650      	mov	r0, sl
void Bar_Matrix::visualizer_pong(float in_factor) {
 80a142e:	460f      	mov	r7, r1
    pongPaddles[1].tick(&pongBall);
 80a1430:	f504 79c8 	add.w	r9, r4, #400	; 0x190
    pongPaddles[0].tick(&pongBall);
 80a1434:	4631      	mov	r1, r6
 80a1436:	f002 fa77 	bl	80a3928 <_ZN10PongPaddle4tickEP8PongBall>
    pongBall.tick();

    if (bd->num_beats() != last_beat_count) {
 80a143a:	4d51      	ldr	r5, [pc, #324]	; (80a1580 <_ZN10Bar_Matrix15visualizer_pongEf+0x164>)
    pongPaddles[1].tick(&pongBall);
 80a143c:	4631      	mov	r1, r6
 80a143e:	4648      	mov	r0, r9
 80a1440:	f002 fa72 	bl	80a3928 <_ZN10PongPaddle4tickEP8PongBall>
    pongBall.tick();
 80a1444:	4630      	mov	r0, r6
 80a1446:	f002 f9ed 	bl	80a3824 <_ZN8PongBall4tickEv>
    if (bd->num_beats() != last_beat_count) {
 80a144a:	6828      	ldr	r0, [r5, #0]
 80a144c:	f000 fe4f 	bl	80a20ee <_ZN14Beat_Detection9num_beatsEv>
 80a1450:	f8d4 31f0 	ldr.w	r3, [r4, #496]	; 0x1f0
 80a1454:	4298      	cmp	r0, r3
 80a1456:	d01b      	beq.n	80a1490 <_ZN10Bar_Matrix15visualizer_pongEf+0x74>
        last_beat_count = bd->num_beats();
 80a1458:	6828      	ldr	r0, [r5, #0]
 80a145a:	f000 fe48 	bl	80a20ee <_ZN14Beat_Detection9num_beatsEv>
        if (random(0, 3) == 0 ) {
 80a145e:	2103      	movs	r1, #3
        last_beat_count = bd->num_beats();
 80a1460:	f8c4 01f0 	str.w	r0, [r4, #496]	; 0x1f0
        if (random(0, 3) == 0 ) {
 80a1464:	2000      	movs	r0, #0
 80a1466:	f004 fde4 	bl	80a6032 <_Z6randomii>
 80a146a:	2800      	cmp	r0, #0
 80a146c:	d13a      	bne.n	80a14e4 <_ZN10Bar_Matrix15visualizer_pongEf+0xc8>
            pongPaddles[1].setColor(bd->r(), bd->g(), bd->b());
 80a146e:	6828      	ldr	r0, [r5, #0]
 80a1470:	f000 fe3f 	bl	80a20f2 <_ZN14Beat_Detection1rEv>
 80a1474:	4680      	mov	r8, r0
 80a1476:	6828      	ldr	r0, [r5, #0]
 80a1478:	f000 fe3d 	bl	80a20f6 <_ZN14Beat_Detection1gEv>
 80a147c:	4682      	mov	sl, r0
 80a147e:	6828      	ldr	r0, [r5, #0]
 80a1480:	f000 fe3b 	bl	80a20fa <_ZN14Beat_Detection1bEv>
 80a1484:	4652      	mov	r2, sl
 80a1486:	4603      	mov	r3, r0
 80a1488:	4641      	mov	r1, r8
 80a148a:	4648      	mov	r0, r9
 80a148c:	f002 faf8 	bl	80a3a80 <_ZN10PongPaddle8setColorEiii>
        } else {
            pongBall.setColor(bd->r(), bd->g(), bd->b());
        }
    }

    clear_matrix();
 80a1490:	4620      	mov	r0, r4
 80a1492:	f7fe ffb3 	bl	80a03fc <_ZN10Bar_Matrix12clear_matrixEv>

    // Draw paddles
    for (int i = 0; i < 2; i++) {
 80a1496:	4625      	mov	r5, r4
 80a1498:	f104 0b60 	add.w	fp, r4, #96	; 0x60
        for (int y = 0; y < pongPaddles[i].len; y++) {
 80a149c:	f04f 0800 	mov.w	r8, #0
 80a14a0:	f505 7ab0 	add.w	sl, r5, #352	; 0x160
 80a14a4:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
 80a14a8:	4543      	cmp	r3, r8
 80a14aa:	dd44      	ble.n	80a1536 <_ZN10Bar_Matrix15visualizer_pongEf+0x11a>
            mix_pixel(pongPaddles[i].xPos(), pongPaddles[i].yPos()+y, in_factor, pongPaddles[i].r, pongPaddles[i].g, pongPaddles[i].b);
 80a14ac:	4650      	mov	r0, sl
 80a14ae:	f002 fadd 	bl	80a3a6c <_ZN10PongPaddle4xPosEv>
 80a14b2:	4681      	mov	r9, r0
 80a14b4:	4650      	mov	r0, sl
 80a14b6:	f002 fade 	bl	80a3a76 <_ZN10PongPaddle4yPosEv>
 80a14ba:	f895 318c 	ldrb.w	r3, [r5, #396]	; 0x18c
 80a14be:	eb00 0208 	add.w	r2, r0, r8
 80a14c2:	9302      	str	r3, [sp, #8]
 80a14c4:	f895 3188 	ldrb.w	r3, [r5, #392]	; 0x188
 80a14c8:	4620      	mov	r0, r4
 80a14ca:	9301      	str	r3, [sp, #4]
 80a14cc:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
 80a14d0:	b292      	uxth	r2, r2
 80a14d2:	9300      	str	r3, [sp, #0]
 80a14d4:	fa5f f189 	uxtb.w	r1, r9
 80a14d8:	463b      	mov	r3, r7
 80a14da:	f7fe ff21 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (int y = 0; y < pongPaddles[i].len; y++) {
 80a14de:	f108 0801 	add.w	r8, r8, #1
 80a14e2:	e7df      	b.n	80a14a4 <_ZN10Bar_Matrix15visualizer_pongEf+0x88>
        } else if (random(0, 2) == 0) {
 80a14e4:	2102      	movs	r1, #2
 80a14e6:	2000      	movs	r0, #0
 80a14e8:	f004 fda3 	bl	80a6032 <_Z6randomii>
 80a14ec:	b988      	cbnz	r0, 80a1512 <_ZN10Bar_Matrix15visualizer_pongEf+0xf6>
            pongPaddles[0].setColor(bd->r(), bd->g(), bd->b());
 80a14ee:	6828      	ldr	r0, [r5, #0]
 80a14f0:	f000 fdff 	bl	80a20f2 <_ZN14Beat_Detection1rEv>
 80a14f4:	4680      	mov	r8, r0
 80a14f6:	6828      	ldr	r0, [r5, #0]
 80a14f8:	f000 fdfd 	bl	80a20f6 <_ZN14Beat_Detection1gEv>
 80a14fc:	4681      	mov	r9, r0
 80a14fe:	6828      	ldr	r0, [r5, #0]
 80a1500:	f000 fdfb 	bl	80a20fa <_ZN14Beat_Detection1bEv>
 80a1504:	464a      	mov	r2, r9
 80a1506:	4603      	mov	r3, r0
 80a1508:	4641      	mov	r1, r8
 80a150a:	4650      	mov	r0, sl
 80a150c:	f002 fab8 	bl	80a3a80 <_ZN10PongPaddle8setColorEiii>
 80a1510:	e7be      	b.n	80a1490 <_ZN10Bar_Matrix15visualizer_pongEf+0x74>
            pongBall.setColor(bd->r(), bd->g(), bd->b());
 80a1512:	6828      	ldr	r0, [r5, #0]
 80a1514:	f000 fded 	bl	80a20f2 <_ZN14Beat_Detection1rEv>
 80a1518:	4680      	mov	r8, r0
 80a151a:	6828      	ldr	r0, [r5, #0]
 80a151c:	f000 fdeb 	bl	80a20f6 <_ZN14Beat_Detection1gEv>
 80a1520:	4681      	mov	r9, r0
 80a1522:	6828      	ldr	r0, [r5, #0]
 80a1524:	f000 fde9 	bl	80a20fa <_ZN14Beat_Detection1bEv>
 80a1528:	464a      	mov	r2, r9
 80a152a:	4603      	mov	r3, r0
 80a152c:	4641      	mov	r1, r8
 80a152e:	4630      	mov	r0, r6
 80a1530:	f002 f9dc 	bl	80a38ec <_ZN8PongBall8setColorEiii>
 80a1534:	e7ac      	b.n	80a1490 <_ZN10Bar_Matrix15visualizer_pongEf+0x74>
    for (int i = 0; i < 2; i++) {
 80a1536:	3530      	adds	r5, #48	; 0x30
 80a1538:	455d      	cmp	r5, fp
 80a153a:	d1af      	bne.n	80a149c <_ZN10Bar_Matrix15visualizer_pongEf+0x80>
        }
    }

    // Draw Ball
    for (int i = 0; i < pongBall.len; i++) {
 80a153c:	2500      	movs	r5, #0
 80a153e:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 80a1542:	42ab      	cmp	r3, r5
 80a1544:	dd19      	ble.n	80a157a <_ZN10Bar_Matrix15visualizer_pongEf+0x15e>
        mix_pixel(pongBall.xPos(), pongBall.yPos()+i, in_factor, pongBall.r, pongBall.g, pongBall.b);
 80a1546:	4630      	mov	r0, r6
 80a1548:	f002 f9c6 	bl	80a38d8 <_ZN8PongBall4xPosEv>
 80a154c:	4680      	mov	r8, r0
 80a154e:	4630      	mov	r0, r6
 80a1550:	f002 f9c7 	bl	80a38e2 <_ZN8PongBall4yPosEv>
 80a1554:	f894 31ec 	ldrb.w	r3, [r4, #492]	; 0x1ec
 80a1558:	1942      	adds	r2, r0, r5
 80a155a:	9302      	str	r3, [sp, #8]
 80a155c:	f894 31e8 	ldrb.w	r3, [r4, #488]	; 0x1e8
 80a1560:	4620      	mov	r0, r4
 80a1562:	9301      	str	r3, [sp, #4]
 80a1564:	f894 31e4 	ldrb.w	r3, [r4, #484]	; 0x1e4
 80a1568:	b292      	uxth	r2, r2
 80a156a:	9300      	str	r3, [sp, #0]
 80a156c:	fa5f f188 	uxtb.w	r1, r8
 80a1570:	463b      	mov	r3, r7
 80a1572:	f7fe fed5 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
    for (int i = 0; i < pongBall.len; i++) {
 80a1576:	3501      	adds	r5, #1
 80a1578:	e7e1      	b.n	80a153e <_ZN10Bar_Matrix15visualizer_pongEf+0x122>
    }
}
 80a157a:	b005      	add	sp, #20
 80a157c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1580:	20000074 	.word	0x20000074

080a1584 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff>:
/* ================================================================== *
 * Function: visualizer_pulse
 * Description: Creates pulses where sound appears to be originating from
 * Parameters:  None
 * ================================================================== */
void Bar_Matrix::visualizer_pulse(audio_bins* bins, float in_factor, float out_factor, float distance_x, float distance_y) {
 80a1584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1588:	4605      	mov	r5, r0
 80a158a:	b099      	sub	sp, #100	; 0x64
    decay (out_factor);
 80a158c:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_pulse(audio_bins* bins, float in_factor, float out_factor, float distance_x, float distance_y) {
 80a158e:	460c      	mov	r4, r1
 80a1590:	9207      	str	r2, [sp, #28]
    decay (out_factor);
 80a1592:	f009 ffc3 	bl	80ab51c <__aeabi_f2d>
 80a1596:	1f26      	subs	r6, r4, #4
 80a1598:	4602      	mov	r2, r0
 80a159a:	460b      	mov	r3, r1
 80a159c:	4628      	mov	r0, r5
 80a159e:	f7fe fd95 	bl	80a00cc <_ZN10Bar_Matrix5decayEd>
 80a15a2:	4637      	mov	r7, r6
 80a15a4:	3418      	adds	r4, #24
 80a15a6:	f10d 0928 	add.w	r9, sp, #40	; 0x28

    // Calculate frequency pan and "fade"
    float pans[NUM_BINS]; // ratio left to right, 0-1
    float intensities[NUM_BINS]; // ratio low to high, 0-1
    for (char i = 0; i < NUM_BINS; i++)
    pans[i] = float(bins->left[i])/float(bins->right[i]);
 80a15aa:	f857 0f04 	ldr.w	r0, [r7, #4]!
 80a15ae:	f00a fc0f 	bl	80abdd0 <__aeabi_i2f>
 80a15b2:	4680      	mov	r8, r0
 80a15b4:	69f8      	ldr	r0, [r7, #28]
 80a15b6:	f00a fc0b 	bl	80abdd0 <__aeabi_i2f>
 80a15ba:	4601      	mov	r1, r0
 80a15bc:	4640      	mov	r0, r8
 80a15be:	f00a fd0f 	bl	80abfe0 <__aeabi_fdiv>
    for (char i = 0; i < NUM_BINS; i++)
 80a15c2:	42bc      	cmp	r4, r7
    pans[i] = float(bins->left[i])/float(bins->right[i]);
 80a15c4:	f849 0b04 	str.w	r0, [r9], #4
    for (char i = 0; i < NUM_BINS; i++)
 80a15c8:	d1ef      	bne.n	80a15aa <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x26>
    for (char i = 0; i < NUM_BINS; i++)
    intensities[i] = ((float(bins->left[i])+float(bins->right[i]))/2.0f)/BINS_MAX;
 80a15ca:	f04f 597c 	mov.w	r9, #1056964608	; 0x3f000000
 80a15ce:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80a16cc <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x148>
    for (char i = 0; i < NUM_BINS; i++)
 80a15d2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
    intensities[i] = ((float(bins->left[i])+float(bins->right[i]))/2.0f)/BINS_MAX;
 80a15d6:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80a15da:	f00a fbf9 	bl	80abdd0 <__aeabi_i2f>
 80a15de:	4607      	mov	r7, r0
 80a15e0:	69f0      	ldr	r0, [r6, #28]
 80a15e2:	f00a fbf5 	bl	80abdd0 <__aeabi_i2f>
 80a15e6:	4601      	mov	r1, r0
 80a15e8:	4638      	mov	r0, r7
 80a15ea:	f00a fb3d 	bl	80abc68 <__addsf3>
 80a15ee:	4649      	mov	r1, r9
 80a15f0:	f00a fc42 	bl	80abe78 <__aeabi_fmul>
 80a15f4:	4641      	mov	r1, r8
 80a15f6:	f00a fcf3 	bl	80abfe0 <__aeabi_fdiv>
    for (char i = 0; i < NUM_BINS; i++)
 80a15fa:	42b4      	cmp	r4, r6
    intensities[i] = ((float(bins->left[i])+float(bins->right[i]))/2.0f)/BINS_MAX;
 80a15fc:	f84a 0b04 	str.w	r0, [sl], #4
    for (char i = 0; i < NUM_BINS; i++)
 80a1600:	d1e9      	bne.n	80a15d6 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x52>
 80a1602:	2700      	movs	r7, #0

    for (char i = 0; i < disp_width; i++) {
 80a1604:	4b2e      	ldr	r3, [pc, #184]	; (80a16c0 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x13c>)
 80a1606:	fa5f f987 	uxtb.w	r9, r7
 80a160a:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a160e:	4599      	cmp	r9, r3
 80a1610:	da53      	bge.n	80a16ba <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x136>
 80a1612:	f04f 0800 	mov.w	r8, #0
        for (char j = 0; j < disp_height; j++) {
 80a1616:	4b2b      	ldr	r3, [pc, #172]	; (80a16c4 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x140>)
 80a1618:	fa5f fa88 	uxtb.w	sl, r8
 80a161c:	f9b3 4000 	ldrsh.w	r4, [r3]
 80a1620:	4b27      	ldr	r3, [pc, #156]	; (80a16c0 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x13c>)
 80a1622:	45a2      	cmp	sl, r4
 80a1624:	f9b3 0000 	ldrsh.w	r0, [r3]
 80a1628:	da45      	bge.n	80a16b6 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x132>
            float level = 0;

            // Calculate level intensity
            for (char x = 0; x < NUM_BINS; x++) {
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a162a:	fb99 f0f0 	sdiv	r0, r9, r0
 80a162e:	f00a fbcf 	bl	80abdd0 <__aeabi_i2f>
 80a1632:	4683      	mov	fp, r0
 80a1634:	fb9a f0f4 	sdiv	r0, sl, r4
 80a1638:	f00a fbca 	bl	80abdd0 <__aeabi_i2f>
 80a163c:	4601      	mov	r1, r0
 80a163e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80a1640:	f00a fcce 	bl	80abfe0 <__aeabi_fdiv>
            for (char x = 0; x < NUM_BINS; x++) {
 80a1644:	2400      	movs	r4, #0
            float level = 0;
 80a1646:	2600      	movs	r6, #0
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a1648:	aa0a      	add	r2, sp, #40	; 0x28
 80a164a:	9006      	str	r0, [sp, #24]
 80a164c:	ab11      	add	r3, sp, #68	; 0x44
 80a164e:	9205      	str	r2, [sp, #20]
                level += intensities[x] * distance;
 80a1650:	f853 2b04 	ldr.w	r2, [r3], #4
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a1654:	4659      	mov	r1, fp
                level += intensities[x] * distance;
 80a1656:	e9cd 2308 	strd	r2, r3, [sp, #32]
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a165a:	9b05      	ldr	r3, [sp, #20]
            for (char x = 0; x < NUM_BINS; x++) {
 80a165c:	3401      	adds	r4, #1
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a165e:	f853 0b04 	ldr.w	r0, [r3], #4
            for (char x = 0; x < NUM_BINS; x++) {
 80a1662:	b2e4      	uxtb	r4, r4
                float distance = distance_x * 1.0f/(abs(pans[x]-(i/disp_width))) + distance_y * 1.0f/(abs((x/NUM_BINS)-(j/disp_height)));
 80a1664:	9305      	str	r3, [sp, #20]
 80a1666:	f00a fafd 	bl	80abc64 <__aeabi_fsub>
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80a166a:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 80a166e:	9822      	ldr	r0, [sp, #136]	; 0x88
 80a1670:	f00a fcb6 	bl	80abfe0 <__aeabi_fdiv>
 80a1674:	9906      	ldr	r1, [sp, #24]
 80a1676:	f00a faf7 	bl	80abc68 <__addsf3>
                level += intensities[x] * distance;
 80a167a:	9a08      	ldr	r2, [sp, #32]
 80a167c:	4611      	mov	r1, r2
 80a167e:	f00a fbfb 	bl	80abe78 <__aeabi_fmul>
 80a1682:	4601      	mov	r1, r0
 80a1684:	4630      	mov	r0, r6
 80a1686:	f00a faef 	bl	80abc68 <__addsf3>
            for (char x = 0; x < NUM_BINS; x++) {
 80a168a:	2c07      	cmp	r4, #7
                level += intensities[x] * distance;
 80a168c:	4606      	mov	r6, r0
            for (char x = 0; x < NUM_BINS; x++) {
 80a168e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a1690:	d1de      	bne.n	80a1650 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0xcc>
            }

            //level *= 2*PI;
            //mix_pixel(i, j, in_factor, cos(level)*255*level, cos(level - 2*PI/3)*255*level, cos(level - 4*PI/3)*255*level);
            mix_pixel(i, j, in_factor, level*255, level*255, level*255);
 80a1692:	490d      	ldr	r1, [pc, #52]	; (80a16c8 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x144>)
 80a1694:	f00a fbf0 	bl	80abe78 <__aeabi_fmul>
 80a1698:	f00a fdf0 	bl	80ac27c <__aeabi_f2uiz>
 80a169c:	b2c0      	uxtb	r0, r0
 80a169e:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80a16a2:	9000      	str	r0, [sp, #0]
 80a16a4:	4652      	mov	r2, sl
 80a16a6:	4649      	mov	r1, r9
 80a16a8:	4628      	mov	r0, r5
 80a16aa:	9b07      	ldr	r3, [sp, #28]
 80a16ac:	f7fe fe38 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = 0; j < disp_height; j++) {
 80a16b0:	f108 0801 	add.w	r8, r8, #1
 80a16b4:	e7af      	b.n	80a1616 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x92>
    for (char i = 0; i < disp_width; i++) {
 80a16b6:	3701      	adds	r7, #1
 80a16b8:	e7a4      	b.n	80a1604 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff+0x80>
        }
    }
}
 80a16ba:	b019      	add	sp, #100	; 0x64
 80a16bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a16c0:	2000007e 	.word	0x2000007e
 80a16c4:	2000007c 	.word	0x2000007c
 80a16c8:	437f0000 	.word	0x437f0000
 80a16cc:	457ff000 	.word	0x457ff000

080a16d0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff>:

void Bar_Matrix::visualizer_rainbow(audio_bins* bins, float in_factor, float out_factor) {
 80a16d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a16d4:	b08d      	sub	sp, #52	; 0x34
 80a16d6:	9005      	str	r0, [sp, #20]
    decay(out_factor);
 80a16d8:	4618      	mov	r0, r3
void Bar_Matrix::visualizer_rainbow(audio_bins* bins, float in_factor, float out_factor) {
 80a16da:	920a      	str	r2, [sp, #40]	; 0x28
 80a16dc:	468a      	mov	sl, r1
    decay(out_factor);
 80a16de:	f009 ff1d 	bl	80ab51c <__aeabi_f2d>
 80a16e2:	4602      	mov	r2, r0
 80a16e4:	460b      	mov	r3, r1
 80a16e6:	9805      	ldr	r0, [sp, #20]
 80a16e8:	f7fe fcf0 	bl	80a00cc <_ZN10Bar_Matrix5decayEd>
 80a16ec:	f04f 0b00 	mov.w	fp, #0

    for (char i = 0; i < disp_width/2; i++) {
 80a16f0:	4bb4      	ldr	r3, [pc, #720]	; (80a19c4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
 80a16f2:	fa5f f78b 	uxtb.w	r7, fp
 80a16f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a16fa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80a16fe:	ebb7 0f63 	cmp.w	r7, r3, asr #1
 80a1702:	ea4f 0463 	mov.w	r4, r3, asr #1
 80a1706:	da6d      	bge.n	80a17e4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x114>
        int led_index = 0;
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a1708:	2400      	movs	r4, #0
            // get bin
            int level = bins->left[j/10];
 80a170a:	260a      	movs	r6, #10
        int led_index = 0;
 80a170c:	46a0      	mov	r8, r4
            int level = bins->left[j/10];
 80a170e:	fbb4 f3f6 	udiv	r3, r4, r6
            level *= FREQ_GAIN;
 80a1712:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 80a1716:	f00a fb5b 	bl	80abdd0 <__aeabi_i2f>
 80a171a:	f00a fd89 	bl	80ac230 <__aeabi_f2iz>
            // set bar
            if (i < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
 80a171e:	f00a fb57 	bl	80abdd0 <__aeabi_i2f>
 80a1722:	49a9      	ldr	r1, [pc, #676]	; (80a19c8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f8>)
 80a1724:	f00a fc5c 	bl	80abfe0 <__aeabi_fdiv>
 80a1728:	2102      	movs	r1, #2
 80a172a:	f7ff f92d 	bl	80a0988 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a172e:	4602      	mov	r2, r0
 80a1730:	460b      	mov	r3, r1
 80a1732:	4638      	mov	r0, r7
 80a1734:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a1738:	f009 fede 	bl	80ab4f8 <__aeabi_i2d>
 80a173c:	4ba1      	ldr	r3, [pc, #644]	; (80a19c4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
 80a173e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a1742:	f9b3 0000 	ldrsh.w	r0, [r3]
 80a1746:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80a174a:	1040      	asrs	r0, r0, #1
 80a174c:	f009 fed4 	bl	80ab4f8 <__aeabi_i2d>
 80a1750:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a1754:	f009 ff3a 	bl	80ab5cc <__aeabi_dmul>
 80a1758:	4602      	mov	r2, r0
 80a175a:	460b      	mov	r3, r1
 80a175c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a1760:	f00a f9a6 	bl	80abab0 <__aeabi_dcmplt>
 80a1764:	2800      	cmp	r0, #0
 80a1766:	d030      	beq.n	80a17ca <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0xfa>
 80a1768:	fa1f f588 	uxth.w	r5, r8
 80a176c:	f105 0350 	add.w	r3, r5, #80	; 0x50
 80a1770:	b29b      	uxth	r3, r3
 80a1772:	9306      	str	r3, [sp, #24]
                float val = level*PI/BINS_MAX;
                for (int x = 0; x < 10; x++) {
                    //mix_pixel((disp_width/2)-i-1, x*NUM_BARS+led_index, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                    mix_pixel((disp_width/2)-i-1, x*NUM_BARS+led_index, in_factor, bd->r(), bd->g(), bd->b());
 80a1774:	43f9      	mvns	r1, r7
 80a1776:	4b93      	ldr	r3, [pc, #588]	; (80a19c4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
 80a1778:	f9b3 9000 	ldrsh.w	r9, [r3]
 80a177c:	4b93      	ldr	r3, [pc, #588]	; (80a19cc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
 80a177e:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
 80a1782:	6818      	ldr	r0, [r3, #0]
 80a1784:	eb01 0969 	add.w	r9, r1, r9, asr #1
 80a1788:	f000 fcb3 	bl	80a20f2 <_ZN14Beat_Detection1rEv>
 80a178c:	4b8f      	ldr	r3, [pc, #572]	; (80a19cc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
 80a178e:	900b      	str	r0, [sp, #44]	; 0x2c
 80a1790:	6818      	ldr	r0, [r3, #0]
 80a1792:	f000 fcb0 	bl	80a20f6 <_ZN14Beat_Detection1gEv>
 80a1796:	4b8d      	ldr	r3, [pc, #564]	; (80a19cc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
 80a1798:	9008      	str	r0, [sp, #32]
 80a179a:	6818      	ldr	r0, [r3, #0]
 80a179c:	f000 fcad 	bl	80a20fa <_ZN14Beat_Detection1bEv>
 80a17a0:	9a08      	ldr	r2, [sp, #32]
 80a17a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a17a4:	b2c0      	uxtb	r0, r0
 80a17a6:	9002      	str	r0, [sp, #8]
 80a17a8:	b2d0      	uxtb	r0, r2
 80a17aa:	9001      	str	r0, [sp, #4]
 80a17ac:	fa5f f989 	uxtb.w	r9, r9
 80a17b0:	b2d8      	uxtb	r0, r3
 80a17b2:	462a      	mov	r2, r5
 80a17b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a17b6:	9000      	str	r0, [sp, #0]
 80a17b8:	4649      	mov	r1, r9
 80a17ba:	9805      	ldr	r0, [sp, #20]
 80a17bc:	f7fe fdb0 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
                for (int x = 0; x < 10; x++) {
 80a17c0:	3508      	adds	r5, #8
 80a17c2:	9b06      	ldr	r3, [sp, #24]
 80a17c4:	b2ad      	uxth	r5, r5
 80a17c6:	42ab      	cmp	r3, r5
 80a17c8:	d1d4      	bne.n	80a1774 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0xa4>
                }
            }

            led_index++;
 80a17ca:	f108 0301 	add.w	r3, r8, #1
            led_index = led_index%10;
 80a17ce:	fbb3 f2f6 	udiv	r2, r3, r6
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a17d2:	340a      	adds	r4, #10
 80a17d4:	b2e4      	uxtb	r4, r4
 80a17d6:	2c3c      	cmp	r4, #60	; 0x3c
            led_index = led_index%10;
 80a17d8:	fb06 3812 	mls	r8, r6, r2, r3
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a17dc:	d197      	bne.n	80a170e <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3e>
    for (char i = 0; i < disp_width/2; i++) {
 80a17de:	f10b 0b01 	add.w	fp, fp, #1
 80a17e2:	e785      	b.n	80a16f0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x20>
            // set bar
            if (i-disp_width/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
                float val = level*PI/BINS_MAX;
                for (int x = 0; x < 10; x++) {
                    //mix_pixel(i, x*NUM_BARS+led_index, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                    mix_pixel(i, x*NUM_BARS+led_index, in_factor, bd->r(), bd->g(), bd->b());
 80a17e4:	4f79      	ldr	r7, [pc, #484]	; (80a19cc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>)
    for (char i = disp_width/2; i < disp_width; i++) {
 80a17e6:	b2e4      	uxtb	r4, r4
 80a17e8:	4b76      	ldr	r3, [pc, #472]	; (80a19c4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
 80a17ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a17ee:	429c      	cmp	r4, r3
 80a17f0:	da69      	bge.n	80a18c6 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x1f6>
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a17f2:	2500      	movs	r5, #0
            int level = bins->right[j/10];
 80a17f4:	f04f 080a 	mov.w	r8, #10
        int led_index = 0;
 80a17f8:	462e      	mov	r6, r5
            int level = bins->right[j/10];
 80a17fa:	fbb5 f3f8 	udiv	r3, r5, r8
 80a17fe:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
            level *= FREQ_GAIN;
 80a1802:	69d8      	ldr	r0, [r3, #28]
 80a1804:	f00a fae4 	bl	80abdd0 <__aeabi_i2f>
            if (i-disp_width/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
 80a1808:	4b6e      	ldr	r3, [pc, #440]	; (80a19c4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
            level *= FREQ_GAIN;
 80a180a:	4681      	mov	r9, r0
            if (i-disp_width/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
 80a180c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a1810:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80a1814:	eba4 0063 	sub.w	r0, r4, r3, asr #1
 80a1818:	f009 fe6e 	bl	80ab4f8 <__aeabi_i2d>
 80a181c:	e9cd 0106 	strd	r0, r1, [sp, #24]
            level *= FREQ_GAIN;
 80a1820:	4648      	mov	r0, r9
 80a1822:	f00a fd05 	bl	80ac230 <__aeabi_f2iz>
            if (i-disp_width/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (disp_width/2)) {
 80a1826:	f00a fad3 	bl	80abdd0 <__aeabi_i2f>
 80a182a:	4967      	ldr	r1, [pc, #412]	; (80a19c8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f8>)
 80a182c:	f00a fbd8 	bl	80abfe0 <__aeabi_fdiv>
 80a1830:	2102      	movs	r1, #2
 80a1832:	f7ff f8a9 	bl	80a0988 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a1836:	4602      	mov	r2, r0
 80a1838:	460b      	mov	r3, r1
 80a183a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a183e:	4b61      	ldr	r3, [pc, #388]	; (80a19c4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
 80a1840:	f9b3 0000 	ldrsh.w	r0, [r3]
 80a1844:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80a1848:	1040      	asrs	r0, r0, #1
 80a184a:	f009 fe55 	bl	80ab4f8 <__aeabi_i2d>
 80a184e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a1852:	f009 febb 	bl	80ab5cc <__aeabi_dmul>
 80a1856:	4602      	mov	r2, r0
 80a1858:	460b      	mov	r3, r1
 80a185a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a185e:	f00a f927 	bl	80abab0 <__aeabi_dcmplt>
 80a1862:	b320      	cbz	r0, 80a18ae <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x1de>
 80a1864:	fa1f fb86 	uxth.w	fp, r6
 80a1868:	f10b 0950 	add.w	r9, fp, #80	; 0x50
 80a186c:	fa1f f989 	uxth.w	r9, r9
                    mix_pixel(i, x*NUM_BARS+led_index, in_factor, bd->r(), bd->g(), bd->b());
 80a1870:	6838      	ldr	r0, [r7, #0]
 80a1872:	f000 fc3e 	bl	80a20f2 <_ZN14Beat_Detection1rEv>
 80a1876:	9008      	str	r0, [sp, #32]
 80a1878:	6838      	ldr	r0, [r7, #0]
 80a187a:	f000 fc3c 	bl	80a20f6 <_ZN14Beat_Detection1gEv>
 80a187e:	9006      	str	r0, [sp, #24]
 80a1880:	6838      	ldr	r0, [r7, #0]
 80a1882:	f000 fc3a 	bl	80a20fa <_ZN14Beat_Detection1bEv>
 80a1886:	9a06      	ldr	r2, [sp, #24]
 80a1888:	9b08      	ldr	r3, [sp, #32]
 80a188a:	b2d2      	uxtb	r2, r2
 80a188c:	b2c0      	uxtb	r0, r0
 80a188e:	9201      	str	r2, [sp, #4]
 80a1890:	b2db      	uxtb	r3, r3
 80a1892:	465a      	mov	r2, fp
 80a1894:	f10b 0b08 	add.w	fp, fp, #8
 80a1898:	9002      	str	r0, [sp, #8]
 80a189a:	9300      	str	r3, [sp, #0]
 80a189c:	4621      	mov	r1, r4
 80a189e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a18a0:	9805      	ldr	r0, [sp, #20]
 80a18a2:	fa1f fb8b 	uxth.w	fp, fp
 80a18a6:	f7fe fd3b 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
                for (int x = 0; x < 10; x++) {
 80a18aa:	45d9      	cmp	r9, fp
 80a18ac:	d1e0      	bne.n	80a1870 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x1a0>
                }
            }

            led_index++;
 80a18ae:	3601      	adds	r6, #1
            led_index = led_index%10;
 80a18b0:	fbb6 f3f8 	udiv	r3, r6, r8
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a18b4:	350a      	adds	r5, #10
 80a18b6:	b2ed      	uxtb	r5, r5
 80a18b8:	2d3c      	cmp	r5, #60	; 0x3c
            led_index = led_index%10;
 80a18ba:	fb08 6613 	mls	r6, r8, r3, r6
        for (char j = 0; j < STRIP_LENGTH; j+=10) {
 80a18be:	d19c      	bne.n	80a17fa <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x12a>
    for (char i = disp_width/2; i < disp_width; i++) {
 80a18c0:	3401      	adds	r4, #1
 80a18c2:	b2e4      	uxtb	r4, r4
 80a18c4:	e790      	b.n	80a17e8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x118>
 80a18c6:	2300      	movs	r3, #0
                break;
            }
            level *= FREQ_GAIN;

            // set bar
            if (j < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
 80a18c8:	4d3f      	ldr	r5, [pc, #252]	; (80a19c8 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f8>)
 80a18ca:	930a      	str	r3, [sp, #40]	; 0x28
    for (char i = 0; i < disp_width; i++) {
 80a18cc:	4b3d      	ldr	r3, [pc, #244]	; (80a19c4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f4>)
 80a18ce:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 80a18d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80a18d6:	429c      	cmp	r4, r3
 80a18d8:	f280 80dc 	bge.w	80a1a94 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3c4>
 80a18dc:	f04f 0b00 	mov.w	fp, #0
            switch(i) {
 80a18e0:	2c07      	cmp	r4, #7
 80a18e2:	d86d      	bhi.n	80a19c0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2f0>
 80a18e4:	e8df f004 	tbb	[pc, r4]
 80a18e8:	605d5a04 	.word	0x605d5a04
 80a18ec:	69606663 	.word	0x69606663
                level = bins->left[LEFT_63]; //1kHz
 80a18f0:	f8da 0000 	ldr.w	r0, [sl]
            level *= FREQ_GAIN;
 80a18f4:	f00a fa6c 	bl	80abdd0 <__aeabi_i2f>
 80a18f8:	f00a fc9a 	bl	80ac230 <__aeabi_f2iz>
            if (j < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
 80a18fc:	f00a fa68 	bl	80abdd0 <__aeabi_i2f>
 80a1900:	4629      	mov	r1, r5
 80a1902:	f00a fb6d 	bl	80abfe0 <__aeabi_fdiv>
 80a1906:	2102      	movs	r1, #2
 80a1908:	f7ff f83e 	bl	80a0988 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a190c:	4680      	mov	r8, r0
 80a190e:	4658      	mov	r0, fp
 80a1910:	4689      	mov	r9, r1
 80a1912:	f009 fdf1 	bl	80ab4f8 <__aeabi_i2d>
 80a1916:	2200      	movs	r2, #0
 80a1918:	4606      	mov	r6, r0
 80a191a:	460f      	mov	r7, r1
 80a191c:	4b2c      	ldr	r3, [pc, #176]	; (80a19d0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x300>)
 80a191e:	4640      	mov	r0, r8
 80a1920:	4649      	mov	r1, r9
 80a1922:	f009 fe53 	bl	80ab5cc <__aeabi_dmul>
 80a1926:	4602      	mov	r2, r0
 80a1928:	460b      	mov	r3, r1
 80a192a:	4630      	mov	r0, r6
 80a192c:	4639      	mov	r1, r7
 80a192e:	f00a f8bf 	bl	80abab0 <__aeabi_dcmplt>
 80a1932:	b300      	cbz	r0, 80a1976 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2a6>
                float val = level*2*PI/BINS_MAX;
                mix_pixel(i, STRIP_LENGTH/2 - j, .95, 255-bd->r(), 255-bd->g(), 255-bd->b());
 80a1934:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80a19cc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2fc>
 80a1938:	f8d8 0000 	ldr.w	r0, [r8]
 80a193c:	f000 fbd9 	bl	80a20f2 <_ZN14Beat_Detection1rEv>
 80a1940:	4606      	mov	r6, r0
 80a1942:	f8d8 0000 	ldr.w	r0, [r8]
 80a1946:	f000 fbd6 	bl	80a20f6 <_ZN14Beat_Detection1gEv>
 80a194a:	4607      	mov	r7, r0
 80a194c:	f8d8 0000 	ldr.w	r0, [r8]
 80a1950:	f000 fbd3 	bl	80a20fa <_ZN14Beat_Detection1bEv>
 80a1954:	43ff      	mvns	r7, r7
 80a1956:	43c0      	mvns	r0, r0
 80a1958:	43f6      	mvns	r6, r6
 80a195a:	b2c0      	uxtb	r0, r0
 80a195c:	f1cb 021d 	rsb	r2, fp, #29
 80a1960:	b2ff      	uxtb	r7, r7
 80a1962:	b2f6      	uxtb	r6, r6
 80a1964:	9002      	str	r0, [sp, #8]
 80a1966:	4621      	mov	r1, r4
 80a1968:	4b1a      	ldr	r3, [pc, #104]	; (80a19d4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x304>)
 80a196a:	9805      	ldr	r0, [sp, #20]
 80a196c:	9701      	str	r7, [sp, #4]
 80a196e:	9600      	str	r6, [sp, #0]
 80a1970:	b292      	uxth	r2, r2
 80a1972:	f7fe fcd5 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = 0; j < STRIP_LENGTH/4; j++) {
 80a1976:	f10b 0b01 	add.w	fp, fp, #1
 80a197a:	f1bb 0f0e 	cmp.w	fp, #14
 80a197e:	d1af      	bne.n	80a18e0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x210>
 80a1980:	f04f 0b1d 	mov.w	fp, #29
            }
        }

        // Left bins, grow upwards
        for (char j = STRIP_LENGTH/2; j < STRIP_LENGTH*0.75f; j++) {
 80a1984:	f1bb 0f2c 	cmp.w	fp, #44	; 0x2c
 80a1988:	f000 8080 	beq.w	80a1a8c <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3bc>
            // get bin
            int level = 0;
            switch(i) {
 80a198c:	2c07      	cmp	r4, #7
 80a198e:	d87b      	bhi.n	80a1a88 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3b8>
 80a1990:	e8df f004 	tbb	[pc, r4]
 80a1994:	6e6b6822 	.word	0x6e6b6822
 80a1998:	776e7471 	.word	0x776e7471
                level = bins->left[LEFT_160]; //6.25kHz
 80a199c:	f8da 0004 	ldr.w	r0, [sl, #4]
                break;
 80a19a0:	e7a8      	b.n	80a18f4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
                level = bins->left[LEFT_400]; //63Hz
 80a19a2:	f8da 0008 	ldr.w	r0, [sl, #8]
                break;
 80a19a6:	e7a5      	b.n	80a18f4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
                level = bins->left[LEFT_1000]; //400Hz
 80a19a8:	f8da 000c 	ldr.w	r0, [sl, #12]
                break;
 80a19ac:	e7a2      	b.n	80a18f4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
                level = bins->left[LEFT_2500]; //400Hz
 80a19ae:	f8da 0010 	ldr.w	r0, [sl, #16]
                break;
 80a19b2:	e79f      	b.n	80a18f4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
                level = bins->left[LEFT_6250]; //63Hz
 80a19b4:	f8da 0014 	ldr.w	r0, [sl, #20]
                break;
 80a19b8:	e79c      	b.n	80a18f4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
                level = bins->left[LEFT_16000]; //1kHz
 80a19ba:	f8da 0018 	ldr.w	r0, [sl, #24]
                break;
 80a19be:	e799      	b.n	80a18f4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
 80a19c0:	2000      	movs	r0, #0
 80a19c2:	e797      	b.n	80a18f4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x224>
 80a19c4:	2000007e 	.word	0x2000007e
 80a19c8:	457ff000 	.word	0x457ff000
 80a19cc:	20000074 	.word	0x20000074
 80a19d0:	403d0000 	.word	0x403d0000
 80a19d4:	3f733333 	.word	0x3f733333
                case 0:
                level = bins->right[LEFT_63]; //1kHz
 80a19d8:	f8da 001c 	ldr.w	r0, [sl, #28]
                break;
                case 7:
                level = bins->right[LEFT_16000]; //1kHz
                break;
            }
            level *= FREQ_GAIN;
 80a19dc:	f00a f9f8 	bl	80abdd0 <__aeabi_i2f>
 80a19e0:	f00a fc26 	bl	80ac230 <__aeabi_f2iz>
            // set bar
            float p = (float)(level)/(float)(BINS_MAX);
 80a19e4:	f00a f9f4 	bl	80abdd0 <__aeabi_i2f>
 80a19e8:	4629      	mov	r1, r5
 80a19ea:	f00a faf9 	bl	80abfe0 <__aeabi_fdiv>
            if (j-STRIP_LENGTH/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
 80a19ee:	2102      	movs	r1, #2
 80a19f0:	f7fe ffca 	bl	80a0988 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80a19f4:	4606      	mov	r6, r0
 80a19f6:	f1ab 001d 	sub.w	r0, fp, #29
 80a19fa:	460f      	mov	r7, r1
 80a19fc:	f009 fd7c 	bl	80ab4f8 <__aeabi_i2d>
 80a1a00:	2200      	movs	r2, #0
 80a1a02:	4680      	mov	r8, r0
 80a1a04:	4689      	mov	r9, r1
 80a1a06:	4b25      	ldr	r3, [pc, #148]	; (80a1a9c <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3cc>)
 80a1a08:	4630      	mov	r0, r6
 80a1a0a:	4639      	mov	r1, r7
 80a1a0c:	f009 fdde 	bl	80ab5cc <__aeabi_dmul>
 80a1a10:	4602      	mov	r2, r0
 80a1a12:	460b      	mov	r3, r1
 80a1a14:	4640      	mov	r0, r8
 80a1a16:	4649      	mov	r1, r9
 80a1a18:	f00a f84a 	bl	80abab0 <__aeabi_dcmplt>
 80a1a1c:	b1f8      	cbz	r0, 80a1a5e <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x38e>
                //j-STRIP_LENGTH/2 < (pow((float)(level)/(float)(BINS_MAX), 2)) * (STRIP_LENGTH/2)) {
                float val = level*2*PI/BINS_MAX;
                //mix_pixel(i, j, in_factor, cos(val)*255, cos(val - 2*PI/3)*255, cos(val - 4*PI/3)*255);
                mix_pixel(i, j, .95, 255-bd->r(), 255-bd->g(), 255-bd->b());//reds[i], greens[i], blues[i]);
 80a1a1e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80a1aa4 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3d4>
 80a1a22:	f8d8 0000 	ldr.w	r0, [r8]
 80a1a26:	f000 fb64 	bl	80a20f2 <_ZN14Beat_Detection1rEv>
 80a1a2a:	4606      	mov	r6, r0
 80a1a2c:	f8d8 0000 	ldr.w	r0, [r8]
 80a1a30:	f000 fb61 	bl	80a20f6 <_ZN14Beat_Detection1gEv>
 80a1a34:	4607      	mov	r7, r0
 80a1a36:	f8d8 0000 	ldr.w	r0, [r8]
 80a1a3a:	f000 fb5e 	bl	80a20fa <_ZN14Beat_Detection1bEv>
 80a1a3e:	43ff      	mvns	r7, r7
 80a1a40:	43c0      	mvns	r0, r0
 80a1a42:	43f6      	mvns	r6, r6
 80a1a44:	b2c0      	uxtb	r0, r0
 80a1a46:	b2ff      	uxtb	r7, r7
 80a1a48:	b2f6      	uxtb	r6, r6
 80a1a4a:	9002      	str	r0, [sp, #8]
 80a1a4c:	4621      	mov	r1, r4
 80a1a4e:	4b14      	ldr	r3, [pc, #80]	; (80a1aa0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x3d0>)
 80a1a50:	9805      	ldr	r0, [sp, #20]
 80a1a52:	9701      	str	r7, [sp, #4]
 80a1a54:	9600      	str	r6, [sp, #0]
 80a1a56:	fa1f f28b 	uxth.w	r2, fp
 80a1a5a:	f7fe fc61 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (char j = STRIP_LENGTH/2; j < STRIP_LENGTH*0.75f; j++) {
 80a1a5e:	f10b 0b01 	add.w	fp, fp, #1
 80a1a62:	e78f      	b.n	80a1984 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x2b4>
                level = bins->right[LEFT_160]; //6.25kHz
 80a1a64:	f8da 0020 	ldr.w	r0, [sl, #32]
                break;
 80a1a68:	e7b8      	b.n	80a19dc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
                level = bins->right[LEFT_400]; //63Hz
 80a1a6a:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
                break;
 80a1a6e:	e7b5      	b.n	80a19dc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
                level = bins->right[LEFT_1000]; //400Hz
 80a1a70:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
                break;
 80a1a74:	e7b2      	b.n	80a19dc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
                level = bins->right[LEFT_2500]; //400Hz
 80a1a76:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
                break;
 80a1a7a:	e7af      	b.n	80a19dc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
                level = bins->right[LEFT_6250]; //63Hz
 80a1a7c:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
                break;
 80a1a80:	e7ac      	b.n	80a19dc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
                level = bins->right[LEFT_16000]; //1kHz
 80a1a82:	f8da 0034 	ldr.w	r0, [sl, #52]	; 0x34
                break;
 80a1a86:	e7a9      	b.n	80a19dc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
        for (char j = STRIP_LENGTH/2; j < STRIP_LENGTH*0.75f; j++) {
 80a1a88:	2000      	movs	r0, #0
 80a1a8a:	e7a7      	b.n	80a19dc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x30c>
    for (char i = 0; i < disp_width; i++) {
 80a1a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1a8e:	3301      	adds	r3, #1
 80a1a90:	930a      	str	r3, [sp, #40]	; 0x28
 80a1a92:	e71b      	b.n	80a18cc <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff+0x1fc>
            }
        }
    }
}
 80a1a94:	b00d      	add	sp, #52	; 0x34
 80a1a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1a9a:	bf00      	nop
 80a1a9c:	403d0000 	.word	0x403d0000
 80a1aa0:	3f733333 	.word	0x3f733333
 80a1aa4:	20000074 	.word	0x20000074

080a1aa8 <_ZN10Bar_Matrix11snake_linesEf>:
    unsigned char r, g, b;

    // TODO: add code to convert from HSV to RGB and vice versa in
    //       constructor.
    Color_Value(unsigned char red, unsigned char green, unsigned char blue) :
    c((red << 16) | (green << 8) | blue), r(red), g(green), b(blue) {}
 80a1aa8:	2300      	movs	r3, #0
/* ================================================================== *
 * Function: snake_lines
 * Description: Snake runs up and down each bar
 * Parameters: [float] speed - speed snake moves at
 * ================================================================== */
void Bar_Matrix::snake_lines(float speed) {
 80a1aaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1aae:	4605      	mov	r5, r0
 80a1ab0:	b086      	sub	sp, #24
 80a1ab2:	9304      	str	r3, [sp, #16]
 80a1ab4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80a1ab8:	f88d 3016 	strb.w	r3, [sp, #22]
    bool noChange = true;

    fill_matrix(Color_Value(0, 0, 0));
 80a1abc:	ab06      	add	r3, sp, #24
 80a1abe:	e913 0006 	ldmdb	r3, {r1, r2}
 80a1ac2:	f7fe fbe9 	bl	80a0298 <_ZN10Bar_Matrix11fill_matrixE11Color_Value>

    for (int x = 0; x < NUM_SNAKES; x++) {
 80a1ac6:	462c      	mov	r4, r5
    bool noChange = true;
 80a1ac8:	2601      	movs	r6, #1
        Snake *s = &snakes[x];

        for (int i = 0; i < s->len; i++) {
            int b = (s->pos + i) / STRIP_LENGTH; // bar
 80a1aca:	273a      	movs	r7, #58	; 0x3a

            if (b % 2 == 1) {
                p = 69-p;
            }

            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1acc:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80a1be4 <_ZN10Bar_Matrix11snake_linesEf+0x13c>
 80a1ad0:	f105 0880 	add.w	r8, r5, #128	; 0x80
        for (int i = 0; i < s->len; i++) {
 80a1ad4:	f04f 0a00 	mov.w	sl, #0
 80a1ad8:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 80a1adc:	4553      	cmp	r3, sl
 80a1ade:	dd21      	ble.n	80a1b24 <_ZN10Bar_Matrix11snake_linesEf+0x7c>
            int b = (s->pos + i) / STRIP_LENGTH; // bar
 80a1ae0:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1ae4:	4628      	mov	r0, r5
            int b = (s->pos + i) / STRIP_LENGTH; // bar
 80a1ae6:	4452      	add	r2, sl
 80a1ae8:	fb92 f1f7 	sdiv	r1, r2, r7
            if (b % 2 == 1) {
 80a1aec:	f001 0301 	and.w	r3, r1, #1
 80a1af0:	2900      	cmp	r1, #0
 80a1af2:	bfb8      	it	lt
 80a1af4:	425b      	neglt	r3, r3
 80a1af6:	2b01      	cmp	r3, #1
            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1af8:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
            int p = (s->pos + i) % STRIP_LENGTH; // pixel
 80a1afc:	fb07 2211 	mls	r2, r7, r1, r2
            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1b00:	9302      	str	r3, [sp, #8]
 80a1b02:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
                p = 69-p;
 80a1b06:	bf08      	it	eq
 80a1b08:	f1c2 0245 	rsbeq	r2, r2, #69	; 0x45
            mix_pixel(b, p, .95, s->r, s->g, s->b);
 80a1b0c:	9301      	str	r3, [sp, #4]
 80a1b0e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 80a1b12:	b292      	uxth	r2, r2
 80a1b14:	9300      	str	r3, [sp, #0]
 80a1b16:	b2c9      	uxtb	r1, r1
 80a1b18:	464b      	mov	r3, r9
 80a1b1a:	f7fe fc01 	bl	80a0320 <_ZN10Bar_Matrix9mix_pixelEhtfhhh>
        for (int i = 0; i < s->len; i++) {
 80a1b1e:	f10a 0a01 	add.w	sl, sl, #1
 80a1b22:	e7d9      	b.n	80a1ad8 <_ZN10Bar_Matrix11snake_linesEf+0x30>
        }

        if (noChange && random(0, 10) > 7) {
 80a1b24:	b1b6      	cbz	r6, 80a1b54 <_ZN10Bar_Matrix11snake_linesEf+0xac>
 80a1b26:	210a      	movs	r1, #10
 80a1b28:	2000      	movs	r0, #0
 80a1b2a:	f004 fa82 	bl	80a6032 <_Z6randomii>
 80a1b2e:	2807      	cmp	r0, #7
 80a1b30:	dd10      	ble.n	80a1b54 <_ZN10Bar_Matrix11snake_linesEf+0xac>
            s->r = bd->r();
 80a1b32:	4e2a      	ldr	r6, [pc, #168]	; (80a1bdc <_ZN10Bar_Matrix11snake_linesEf+0x134>)
 80a1b34:	6830      	ldr	r0, [r6, #0]
 80a1b36:	f000 fadc 	bl	80a20f2 <_ZN14Beat_Detection1rEv>
 80a1b3a:	f8c4 00f4 	str.w	r0, [r4, #244]	; 0xf4
            s->g = bd->g();
 80a1b3e:	6830      	ldr	r0, [r6, #0]
 80a1b40:	f000 fad9 	bl	80a20f6 <_ZN14Beat_Detection1gEv>
 80a1b44:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
            s->b = bd->b();
 80a1b48:	6830      	ldr	r0, [r6, #0]
 80a1b4a:	f000 fad6 	bl	80a20fa <_ZN14Beat_Detection1bEv>
            noChange = false;
 80a1b4e:	2600      	movs	r6, #0
            s->b = bd->b();
 80a1b50:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
        }

        s->posTicks++;
 80a1b54:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
        if (s->posTicks >= s->ticksNeeded) {
 80a1b58:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
        s->posTicks++;
 80a1b5c:	3301      	adds	r3, #1
        if (s->posTicks >= s->ticksNeeded) {
 80a1b5e:	4293      	cmp	r3, r2
        s->posTicks++;
 80a1b60:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        if (s->posTicks >= s->ticksNeeded) {
 80a1b64:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 80a1b68:	db07      	blt.n	80a1b7a <_ZN10Bar_Matrix11snake_linesEf+0xd2>
            s->posTicks = 0;
 80a1b6a:	2300      	movs	r3, #0
 80a1b6c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
            s->pos += s->dir;
 80a1b70:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80a1b74:	4413      	add	r3, r2
 80a1b76:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
        }
        if ((s->dir > 0 && s->pos > NUM_BARS * STRIP_LENGTH +s->len) ||
 80a1b7a:	2a00      	cmp	r2, #0
 80a1b7c:	dd0d      	ble.n	80a1b9a <_ZN10Bar_Matrix11snake_linesEf+0xf2>
 80a1b7e:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 80a1b82:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
 80a1b86:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80a1b8a:	429a      	cmp	r2, r3
 80a1b8c:	dc0d      	bgt.n	80a1baa <_ZN10Bar_Matrix11snake_linesEf+0x102>
    for (int x = 0; x < NUM_SNAKES; x++) {
 80a1b8e:	3420      	adds	r4, #32
 80a1b90:	45a0      	cmp	r8, r4
 80a1b92:	d19f      	bne.n	80a1ad4 <_ZN10Bar_Matrix11snake_linesEf+0x2c>
            color_table_idx = color_table_idx % 50;

            s->pos = s->dir > 0 ? -s->len : NUM_BARS * STRIP_LENGTH;
        }
    }
}
 80a1b94:	b006      	add	sp, #24
 80a1b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((s->dir > 0 && s->pos > NUM_BARS * STRIP_LENGTH +s->len) ||
 80a1b9a:	d0f8      	beq.n	80a1b8e <_ZN10Bar_Matrix11snake_linesEf+0xe6>
            (s->dir < 0 && s->pos < -s->len))
 80a1b9c:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 80a1ba0:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
 80a1ba4:	425b      	negs	r3, r3
 80a1ba6:	429a      	cmp	r2, r3
 80a1ba8:	daf1      	bge.n	80a1b8e <_ZN10Bar_Matrix11snake_linesEf+0xe6>
            color_table_idx += random(0, 10);
 80a1baa:	210a      	movs	r1, #10
 80a1bac:	2000      	movs	r0, #0
 80a1bae:	f004 fa40 	bl	80a6032 <_Z6randomii>
            color_table_idx = color_table_idx % 50;
 80a1bb2:	2132      	movs	r1, #50	; 0x32
 80a1bb4:	4a0a      	ldr	r2, [pc, #40]	; (80a1be0 <_ZN10Bar_Matrix11snake_linesEf+0x138>)
            color_table_idx += random(0, 10);
 80a1bb6:	6813      	ldr	r3, [r2, #0]
 80a1bb8:	4418      	add	r0, r3
            color_table_idx = color_table_idx % 50;
 80a1bba:	fb90 f3f1 	sdiv	r3, r0, r1
 80a1bbe:	fb01 0013 	mls	r0, r1, r3, r0
 80a1bc2:	6010      	str	r0, [r2, #0]
            s->pos = s->dir > 0 ? -s->len : NUM_BARS * STRIP_LENGTH;
 80a1bc4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80a1bc8:	2b00      	cmp	r3, #0
 80a1bca:	bfd2      	itee	le
 80a1bcc:	f44f 73e8 	movle.w	r3, #464	; 0x1d0
 80a1bd0:	f8d4 30e4 	ldrgt.w	r3, [r4, #228]	; 0xe4
 80a1bd4:	425b      	neggt	r3, r3
 80a1bd6:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 80a1bda:	e7d8      	b.n	80a1b8e <_ZN10Bar_Matrix11snake_linesEf+0xe6>
 80a1bdc:	20000074 	.word	0x20000074
 80a1be0:	20000078 	.word	0x20000078
 80a1be4:	3f733333 	.word	0x3f733333

080a1be8 <_ZN10Bar_Matrix16visualizer_wheelEff>:
 * Description: Sets all bars to a color while rotating through all
 *              hues in order of the rainbow
 * Parameters: [float] intensity - intensity of lights
 *             [float] speed - speed wheel rotates at
 * ================================================================== */
void Bar_Matrix::visualizer_wheel(float intensity, float speed) {
 80a1be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1bec:	460c      	mov	r4, r1
 80a1bee:	4683      	mov	fp, r0
 80a1bf0:	f003 fb16 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
    float val = fmod(millis()/10000.0f,1.0f)*2.0f*PI;
 80a1bf4:	f00a f8e8 	bl	80abdc8 <__aeabi_ui2f>
 80a1bf8:	493d      	ldr	r1, [pc, #244]	; (80a1cf0 <_ZN10Bar_Matrix16visualizer_wheelEff+0x108>)
 80a1bfa:	f00a f9f1 	bl	80abfe0 <__aeabi_fdiv>
  { return __builtin_fmodf(__x, __y); }
 80a1bfe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a1c02:	f006 f9a3 	bl	80a7f4c <fmodf>
 80a1c06:	4601      	mov	r1, r0
 80a1c08:	f00a f82e 	bl	80abc68 <__addsf3>
 80a1c0c:	f009 fc86 	bl	80ab51c <__aeabi_f2d>
 80a1c10:	a32f      	add	r3, pc, #188	; (adr r3, 80a1cd0 <_ZN10Bar_Matrix16visualizer_wheelEff+0xe8>)
 80a1c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c16:	f009 fcd9 	bl	80ab5cc <__aeabi_dmul>
 80a1c1a:	f009 ffcf 	bl	80abbbc <__aeabi_d2f>
 80a1c1e:	4605      	mov	r5, r0
  { return __builtin_cosf(__x); }
 80a1c20:	f005 ffba 	bl	80a7b98 <cosf>
    fill_matrix(Color_Value(cos(val)*255*intensity, cos(val - 2*PI/3)*255*intensity, cos(val - 4*PI/3)*255*intensity));
 80a1c24:	4933      	ldr	r1, [pc, #204]	; (80a1cf4 <_ZN10Bar_Matrix16visualizer_wheelEff+0x10c>)
 80a1c26:	f00a f927 	bl	80abe78 <__aeabi_fmul>
 80a1c2a:	4621      	mov	r1, r4
 80a1c2c:	f00a f924 	bl	80abe78 <__aeabi_fmul>
 80a1c30:	f00a fb24 	bl	80ac27c <__aeabi_f2uiz>
 80a1c34:	fa5f fa80 	uxtb.w	sl, r0
 80a1c38:	4628      	mov	r0, r5
 80a1c3a:	f009 fc6f 	bl	80ab51c <__aeabi_f2d>
 80a1c3e:	a326      	add	r3, pc, #152	; (adr r3, 80a1cd8 <_ZN10Bar_Matrix16visualizer_wheelEff+0xf0>)
 80a1c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c44:	4606      	mov	r6, r0
 80a1c46:	460f      	mov	r7, r1
 80a1c48:	f009 fb08 	bl	80ab25c <__aeabi_dsub>
 80a1c4c:	f005 ff4e 	bl	80a7aec <cos>
 80a1c50:	4680      	mov	r8, r0
 80a1c52:	4620      	mov	r0, r4
 80a1c54:	4689      	mov	r9, r1
 80a1c56:	f009 fc61 	bl	80ab51c <__aeabi_f2d>
 80a1c5a:	a321      	add	r3, pc, #132	; (adr r3, 80a1ce0 <_ZN10Bar_Matrix16visualizer_wheelEff+0xf8>)
 80a1c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c60:	4604      	mov	r4, r0
 80a1c62:	460d      	mov	r5, r1
 80a1c64:	4640      	mov	r0, r8
 80a1c66:	4649      	mov	r1, r9
 80a1c68:	f009 fcb0 	bl	80ab5cc <__aeabi_dmul>
 80a1c6c:	4622      	mov	r2, r4
 80a1c6e:	462b      	mov	r3, r5
 80a1c70:	f009 fcac 	bl	80ab5cc <__aeabi_dmul>
 80a1c74:	f009 ff82 	bl	80abb7c <__aeabi_d2uiz>
 80a1c78:	a31b      	add	r3, pc, #108	; (adr r3, 80a1ce8 <_ZN10Bar_Matrix16visualizer_wheelEff+0x100>)
 80a1c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c7e:	fa5f f880 	uxtb.w	r8, r0
 80a1c82:	4639      	mov	r1, r7
 80a1c84:	4630      	mov	r0, r6
 80a1c86:	f009 fae9 	bl	80ab25c <__aeabi_dsub>
 80a1c8a:	f005 ff2f 	bl	80a7aec <cos>
 80a1c8e:	a314      	add	r3, pc, #80	; (adr r3, 80a1ce0 <_ZN10Bar_Matrix16visualizer_wheelEff+0xf8>)
 80a1c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c94:	f009 fc9a 	bl	80ab5cc <__aeabi_dmul>
 80a1c98:	4622      	mov	r2, r4
 80a1c9a:	462b      	mov	r3, r5
 80a1c9c:	f009 fc96 	bl	80ab5cc <__aeabi_dmul>
 80a1ca0:	f009 ff6c 	bl	80abb7c <__aeabi_d2uiz>
 80a1ca4:	ea4f 2308 	mov.w	r3, r8, lsl #8
 80a1ca8:	b2c0      	uxtb	r0, r0
 80a1caa:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80a1cae:	4303      	orrs	r3, r0
 80a1cb0:	f88d 0006 	strb.w	r0, [sp, #6]
 80a1cb4:	4658      	mov	r0, fp
 80a1cb6:	9300      	str	r3, [sp, #0]
 80a1cb8:	f88d a004 	strb.w	sl, [sp, #4]
 80a1cbc:	f88d 8005 	strb.w	r8, [sp, #5]
 80a1cc0:	ab02      	add	r3, sp, #8
 80a1cc2:	e913 0006 	ldmdb	r3, {r1, r2}
}
 80a1cc6:	b003      	add	sp, #12
 80a1cc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fill_matrix(Color_Value(cos(val)*255*intensity, cos(val - 2*PI/3)*255*intensity, cos(val - 4*PI/3)*255*intensity));
 80a1ccc:	f7fe bae4 	b.w	80a0298 <_ZN10Bar_Matrix11fill_matrixE11Color_Value>
 80a1cd0:	fc8b007a 	.word	0xfc8b007a
 80a1cd4:	400921fa 	.word	0x400921fa
 80a1cd8:	fdb20051 	.word	0xfdb20051
 80a1cdc:	4000c151 	.word	0x4000c151
 80a1ce0:	00000000 	.word	0x00000000
 80a1ce4:	406fe000 	.word	0x406fe000
 80a1ce8:	fdb20051 	.word	0xfdb20051
 80a1cec:	4010c151 	.word	0x4010c151
 80a1cf0:	461c4000 	.word	0x461c4000
 80a1cf4:	437f0000 	.word	0x437f0000

080a1cf8 <_ZN10Bar_Matrix4tickEP10audio_binsi>:
    switch (visualizer_type) {
 80a1cf8:	2a09      	cmp	r2, #9
void Bar_Matrix::tick(audio_bins * bins, int visualizer_type) {
 80a1cfa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a1cfc:	4604      	mov	r4, r0
    switch (visualizer_type) {
 80a1cfe:	dc0b      	bgt.n	80a1d18 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x20>
 80a1d00:	2a00      	cmp	r2, #0
 80a1d02:	db10      	blt.n	80a1d26 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
 80a1d04:	3a01      	subs	r2, #1
 80a1d06:	2a08      	cmp	r2, #8
 80a1d08:	d81e      	bhi.n	80a1d48 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x50>
 80a1d0a:	e8df f002 	tbb	[pc, r2]
 80a1d0e:	3924      	.short	0x3924
 80a1d10:	34524d43 	.word	0x34524d43
 80a1d14:	293f      	.short	0x293f
 80a1d16:	2e          	.byte	0x2e
 80a1d17:	00          	.byte	0x00
 80a1d18:	2a4e      	cmp	r2, #78	; 0x4e
 80a1d1a:	d053      	beq.n	80a1dc4 <_ZN10Bar_Matrix4tickEP10audio_binsi+0xcc>
 80a1d1c:	dc0d      	bgt.n	80a1d3a <_ZN10Bar_Matrix4tickEP10audio_binsi+0x42>
 80a1d1e:	2a42      	cmp	r2, #66	; 0x42
 80a1d20:	d058      	beq.n	80a1dd4 <_ZN10Bar_Matrix4tickEP10audio_binsi+0xdc>
 80a1d22:	2a4d      	cmp	r2, #77	; 0x4d
 80a1d24:	d04b      	beq.n	80a1dbe <_ZN10Bar_Matrix4tickEP10audio_binsi+0xc6>
    bd->frame_ticked();
 80a1d26:	4b33      	ldr	r3, [pc, #204]	; (80a1df4 <_ZN10Bar_Matrix4tickEP10audio_binsi+0xfc>)
 80a1d28:	6818      	ldr	r0, [r3, #0]
 80a1d2a:	f000 f9d3 	bl	80a20d4 <_ZN14Beat_Detection12frame_tickedEv>
    show_all();
 80a1d2e:	4620      	mov	r0, r4
}
 80a1d30:	b004      	add	sp, #16
 80a1d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    show_all();
 80a1d36:	f7fe bcdb 	b.w	80a06f0 <_ZN10Bar_Matrix8show_allEv>
    switch (visualizer_type) {
 80a1d3a:	2a58      	cmp	r2, #88	; 0x58
 80a1d3c:	d047      	beq.n	80a1dce <_ZN10Bar_Matrix4tickEP10audio_binsi+0xd6>
 80a1d3e:	2a63      	cmp	r2, #99	; 0x63
 80a1d40:	d1f1      	bne.n	80a1d26 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          pixel_test();
 80a1d42:	f7fe fdfb 	bl	80a093c <_ZN10Bar_Matrix10pixel_testEv>
          break;
 80a1d46:	e7ee      	b.n	80a1d26 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_bars(bins, 0.15, 0.85, false);
 80a1d48:	2300      	movs	r3, #0
 80a1d4a:	4a2b      	ldr	r2, [pc, #172]	; (80a1df8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d4c:	9300      	str	r3, [sp, #0]
 80a1d4e:	4b2b      	ldr	r3, [pc, #172]	; (80a1dfc <_ZN10Bar_Matrix4tickEP10audio_binsi+0x104>)
 80a1d50:	f7fe fe2a 	bl	80a09a8 <_ZN10Bar_Matrix15visualizer_barsEP10audio_binsffb>
          break;
 80a1d54:	e7e7      	b.n	80a1d26 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_bars_middle(bins, 0.15, 0.85);
 80a1d56:	4b29      	ldr	r3, [pc, #164]	; (80a1dfc <_ZN10Bar_Matrix4tickEP10audio_binsi+0x104>)
 80a1d58:	4a27      	ldr	r2, [pc, #156]	; (80a1df8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d5a:	f7fe ffb5 	bl	80a0cc8 <_ZN10Bar_Matrix22visualizer_bars_middleEP10audio_binsff>
          break;
 80a1d5e:	e7e2      	b.n	80a1d26 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_bass_middle(bins, 0.15, 0.80);
 80a1d60:	4b27      	ldr	r3, [pc, #156]	; (80a1e00 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x108>)
 80a1d62:	4a25      	ldr	r2, [pc, #148]	; (80a1df8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d64:	f7ff f892 	bl	80a0e8c <_ZN10Bar_Matrix22visualizer_bass_middleEP10audio_binsff>
          break;
 80a1d68:	e7dd      	b.n	80a1d26 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_bass_slide(bins, 0.15, 0.75);
 80a1d6a:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80a1d6e:	4a22      	ldr	r2, [pc, #136]	; (80a1df8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d70:	f7ff f928 	bl	80a0fc4 <_ZN10Bar_Matrix21visualizer_bass_slideEP10audio_binsff>
          break;
 80a1d74:	e7d7      	b.n	80a1d26 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
            visualizer_classic(bins, 0.15, 0.9);
 80a1d76:	4b23      	ldr	r3, [pc, #140]	; (80a1e04 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x10c>)
 80a1d78:	4a1f      	ldr	r2, [pc, #124]	; (80a1df8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d7a:	f7ff fa11 	bl	80a11a0 <_ZN10Bar_Matrix18visualizer_classicEP10audio_binsff>
            break;
 80a1d7e:	e7d2      	b.n	80a1d26 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_plasma(bins, 0.5, 0.965);
 80a1d80:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80a1d84:	4b20      	ldr	r3, [pc, #128]	; (80a1e08 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x110>)
 80a1d86:	f7ff fa5b 	bl	80a1240 <_ZN10Bar_Matrix17visualizer_plasmaEP10audio_binsff>
          break;
 80a1d8a:	e7cc      	b.n	80a1d26 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_pong(0.965);
 80a1d8c:	491e      	ldr	r1, [pc, #120]	; (80a1e08 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x110>)
 80a1d8e:	f7ff fb45 	bl	80a141c <_ZN10Bar_Matrix15visualizer_pongEf>
          break;
 80a1d92:	e7c8      	b.n	80a1d26 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_pulse(bins, 0.15, 0.8, 1.0f, 20.0f);
 80a1d94:	4b1d      	ldr	r3, [pc, #116]	; (80a1e0c <_ZN10Bar_Matrix4tickEP10audio_binsi+0x114>)
 80a1d96:	4a18      	ldr	r2, [pc, #96]	; (80a1df8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1d98:	9301      	str	r3, [sp, #4]
 80a1d9a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80a1d9e:	9300      	str	r3, [sp, #0]
 80a1da0:	4b17      	ldr	r3, [pc, #92]	; (80a1e00 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x108>)
 80a1da2:	f7ff fbef 	bl	80a1584 <_ZN10Bar_Matrix16visualizer_pulseEP10audio_binsffff>
          break;
 80a1da6:	e7be      	b.n	80a1d26 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_rainbow(bins, 0.15, 0.8);
 80a1da8:	4b15      	ldr	r3, [pc, #84]	; (80a1e00 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x108>)
 80a1daa:	4a13      	ldr	r2, [pc, #76]	; (80a1df8 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x100>)
 80a1dac:	f7ff fc90 	bl	80a16d0 <_ZN10Bar_Matrix18visualizer_rainbowEP10audio_binsff>
          break;
 80a1db0:	e7b9      	b.n	80a1d26 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          visualizer_wheel(0.25, 10);
 80a1db2:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a1db6:	4a16      	ldr	r2, [pc, #88]	; (80a1e10 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x118>)
 80a1db8:	f7ff ff16 	bl	80a1be8 <_ZN10Bar_Matrix16visualizer_wheelEff>
          break;
 80a1dbc:	e7b3      	b.n	80a1d26 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          bouncing_lines();
 80a1dbe:	f7fe fccd 	bl	80a075c <_ZN10Bar_Matrix14bouncing_linesEv>
          break;
 80a1dc2:	e7b0      	b.n	80a1d26 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
            snake_lines(0.75);
 80a1dc4:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 80a1dc8:	f7ff fe6e 	bl	80a1aa8 <_ZN10Bar_Matrix11snake_linesEf>
            break;
 80a1dcc:	e7ab      	b.n	80a1d26 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
          bar_test();
 80a1dce:	f7fe fca5 	bl	80a071c <_ZN10Bar_Matrix8bar_testEv>
          break;
 80a1dd2:	e7a8      	b.n	80a1d26 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
    Color_Value(unsigned char red, unsigned char green, unsigned char blue) :
 80a1dd4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80a1dd8:	9302      	str	r3, [sp, #8]
 80a1dda:	23ff      	movs	r3, #255	; 0xff
 80a1ddc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80a1de0:	2300      	movs	r3, #0
 80a1de2:	f88d 300e 	strb.w	r3, [sp, #14]
    fill_matrix(c);
 80a1de6:	ab04      	add	r3, sp, #16
 80a1de8:	e913 0006 	ldmdb	r3, {r1, r2}
 80a1dec:	f7fe fa54 	bl	80a0298 <_ZN10Bar_Matrix11fill_matrixE11Color_Value>
          break;
 80a1df0:	e799      	b.n	80a1d26 <_ZN10Bar_Matrix4tickEP10audio_binsi+0x2e>
 80a1df2:	bf00      	nop
 80a1df4:	20000074 	.word	0x20000074
 80a1df8:	3e19999a 	.word	0x3e19999a
 80a1dfc:	3f59999a 	.word	0x3f59999a
 80a1e00:	3f4ccccd 	.word	0x3f4ccccd
 80a1e04:	3f666666 	.word	0x3f666666
 80a1e08:	3f770a3d 	.word	0x3f770a3d
 80a1e0c:	41a00000 	.word	0x41a00000
 80a1e10:	41200000 	.word	0x41200000

080a1e14 <_ZN14Beat_DetectionC1Ev>:

    red = 0;
    green = 0;
    blue = 0;
    beat_count = 0;
    beats_per_flip = 3;
 80a1e14:	2203      	movs	r2, #3
    beat_on = false;
 80a1e16:	2300      	movs	r3, #0
    beats_per_flip = 3;
 80a1e18:	6142      	str	r2, [r0, #20]
    sma_long_index = 0;
    sma_short_index = 0;

    bpm_long_total = 0.0;
 80a1e1a:	2200      	movs	r2, #0
    green = 0;
 80a1e1c:	e9c0 3301 	strd	r3, r3, [r0, #4]
    beat_count = 0;
 80a1e20:	e9c0 3303 	strd	r3, r3, [r0, #12]
    sma_short_index = 0;
 80a1e24:	e9c0 3307 	strd	r3, r3, [r0, #28]
Beat_Detection::Beat_Detection() {
 80a1e28:	b530      	push	{r4, r5, lr}
    beat_on = false;
 80a1e2a:	8003      	strh	r3, [r0, #0]
    flip_on = false;
 80a1e2c:	7083      	strb	r3, [r0, #2]
    bpm_long_total = 0.0;
 80a1e2e:	f8c0 2d8c 	str.w	r2, [r0, #3468]	; 0xd8c
    bpm_short_total = 0.0;
 80a1e32:	f8c0 2d90 	str.w	r2, [r0, #3472]	; 0xd90

    for (int i = 0; i < NUM_BINS; i++) {
 80a1e36:	f500 613a 	add.w	r1, r0, #2976	; 0xba0
 80a1e3a:	f600 34d8 	addw	r4, r0, #3032	; 0xbd8
 80a1e3e:	f600 35bc 	addw	r5, r0, #3004	; 0xbbc
        sma_long_totals[i] = 0.0;
 80a1e42:	f841 2b04 	str.w	r2, [r1], #4
        sma_short_totals[i] = 0.0;
 80a1e46:	618a      	str	r2, [r1, #24]
    for (int i = 0; i < NUM_BINS; i++) {
 80a1e48:	42a9      	cmp	r1, r5
        beat_on_bins[i] = false;
 80a1e4a:	f804 3b01 	strb.w	r3, [r4], #1
        beat_reporter_bins[i] = false;
 80a1e4e:	71a3      	strb	r3, [r4, #6]
    for (int i = 0; i < NUM_BINS; i++) {
 80a1e50:	d1f7      	bne.n	80a1e42 <_ZN14Beat_DetectionC1Ev+0x2e>
    }
}
 80a1e52:	bd30      	pop	{r4, r5, pc}
 80a1e54:	0000      	movs	r0, r0
	...

080a1e58 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi>:
    sma_long_index = sma_long_index % SMA_LONG_LENGTH;
    sma_short_index++;
    sma_short_index = sma_short_index % SMA_SHORT_LENGTH;
}

void Beat_Detection::tick_beat_detection(audio_bins * bins, int cur_bin) {
 80a1e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1e5c:	6a03      	ldr	r3, [r0, #32]
 80a1e5e:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 80a1e62:	441d      	add	r5, r3
 80a1e64:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 80a1e68:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80a1e6c:	4607      	mov	r7, r0
 80a1e6e:	460e      	mov	r6, r1
    sma_short_totals[cur_bin] -= sma_short_bins[cur_bin][sma_short_index];
 80a1e70:	f8d8 0bbc 	ldr.w	r0, [r8, #3004]	; 0xbbc
 80a1e74:	f8d5 1b14 	ldr.w	r1, [r5, #2836]	; 0xb14
void Beat_Detection::tick_beat_detection(audio_bins * bins, int cur_bin) {
 80a1e78:	4614      	mov	r4, r2
 80a1e7a:	ea4f 0a82 	mov.w	sl, r2, lsl #2
    sma_short_totals[cur_bin] -= sma_short_bins[cur_bin][sma_short_index];
 80a1e7e:	f009 fef1 	bl	80abc64 <__aeabi_fsub>
 80a1e82:	f8c8 0bbc 	str.w	r0, [r8, #3004]	; 0xbbc
 80a1e86:	4681      	mov	r9, r0
    sma_short_bins[cur_bin][sma_short_index]  = (bins->left[cur_bin]*bins->left[cur_bin])/2;
 80a1e88:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80a1e8c:	44b2      	add	sl, r6
 80a1e8e:	4340      	muls	r0, r0
 80a1e90:	1040      	asrs	r0, r0, #1
 80a1e92:	f009 ff9d 	bl	80abdd0 <__aeabi_i2f>
 80a1e96:	4606      	mov	r6, r0
 80a1e98:	f8c5 0b14 	str.w	r0, [r5, #2836]	; 0xb14
    sma_short_bins[cur_bin][sma_short_index] += (bins->right[cur_bin]*bins->right[cur_bin])/2;
 80a1e9c:	f8da 001c 	ldr.w	r0, [sl, #28]
 80a1ea0:	4340      	muls	r0, r0
 80a1ea2:	1040      	asrs	r0, r0, #1
 80a1ea4:	f009 ff94 	bl	80abdd0 <__aeabi_i2f>
 80a1ea8:	4631      	mov	r1, r6
 80a1eaa:	f009 fedd 	bl	80abc68 <__addsf3>
 80a1eae:	4606      	mov	r6, r0
    sma_short_totals[cur_bin] += sma_short_bins[cur_bin][sma_short_index];
 80a1eb0:	4601      	mov	r1, r0
    sma_short_bins[cur_bin][sma_short_index] += (bins->right[cur_bin]*bins->right[cur_bin])/2;
 80a1eb2:	f8c5 0b14 	str.w	r0, [r5, #2836]	; 0xb14
    sma_short_totals[cur_bin] += sma_short_bins[cur_bin][sma_short_index];
 80a1eb6:	4648      	mov	r0, r9
 80a1eb8:	f009 fed6 	bl	80abc68 <__addsf3>
 80a1ebc:	2564      	movs	r5, #100	; 0x64
    float sma_short = sma_short_totals[cur_bin] / SMA_SHORT_LENGTH;
 80a1ebe:	4924      	ldr	r1, [pc, #144]	; (80a1f50 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xf8>)
    sma_short_totals[cur_bin] += sma_short_bins[cur_bin][sma_short_index];
 80a1ec0:	f8c8 0bbc 	str.w	r0, [r8, #3004]	; 0xbbc
    float sma_short = sma_short_totals[cur_bin] / SMA_SHORT_LENGTH;
 80a1ec4:	f00a f88c 	bl	80abfe0 <__aeabi_fdiv>
 80a1ec8:	69fb      	ldr	r3, [r7, #28]
 80a1eca:	4681      	mov	r9, r0

    sma_long_totals[cur_bin] -= sma_long_bins[cur_bin][sma_long_index];
 80a1ecc:	fb05 3504 	mla	r5, r5, r4, r3
 80a1ed0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80a1ed4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80a1ed6:	f8d8 0ba0 	ldr.w	r0, [r8, #2976]	; 0xba0
 80a1eda:	f009 fec3 	bl	80abc64 <__aeabi_fsub>
    sma_long_bins[cur_bin][sma_long_index] = sma_short_bins[cur_bin][sma_short_index];
 80a1ede:	626e      	str	r6, [r5, #36]	; 0x24
    sma_long_totals[cur_bin] -= sma_long_bins[cur_bin][sma_long_index];
 80a1ee0:	4601      	mov	r1, r0
    sma_long_totals[cur_bin] += sma_long_bins[cur_bin][sma_long_index];
 80a1ee2:	4630      	mov	r0, r6
 80a1ee4:	f009 fec0 	bl	80abc68 <__addsf3>
    float sma_long = sma_long_totals[cur_bin] / SMA_LONG_LENGTH;
 80a1ee8:	491a      	ldr	r1, [pc, #104]	; (80a1f54 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xfc>)
    sma_long_totals[cur_bin] += sma_long_bins[cur_bin][sma_long_index];
 80a1eea:	f8c8 0ba0 	str.w	r0, [r8, #2976]	; 0xba0
    float sma_long = sma_long_totals[cur_bin] / SMA_LONG_LENGTH;
 80a1eee:	f00a f877 	bl	80abfe0 <__aeabi_fdiv>

    if (!beat_on_bins[cur_bin] && sma_short > 1.6*sma_long) {
 80a1ef2:	443c      	add	r4, r7
 80a1ef4:	f894 3bd8 	ldrb.w	r3, [r4, #3032]	; 0xbd8
    float sma_long = sma_long_totals[cur_bin] / SMA_LONG_LENGTH;
 80a1ef8:	4605      	mov	r5, r0
    if (!beat_on_bins[cur_bin] && sma_short > 1.6*sma_long) {
 80a1efa:	b9d3      	cbnz	r3, 80a1f32 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xda>
 80a1efc:	4648      	mov	r0, r9
 80a1efe:	f009 fb0d 	bl	80ab51c <__aeabi_f2d>
 80a1f02:	4606      	mov	r6, r0
 80a1f04:	4628      	mov	r0, r5
 80a1f06:	460f      	mov	r7, r1
 80a1f08:	f009 fb08 	bl	80ab51c <__aeabi_f2d>
 80a1f0c:	a30e      	add	r3, pc, #56	; (adr r3, 80a1f48 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xf0>)
 80a1f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1f12:	f009 fb5b 	bl	80ab5cc <__aeabi_dmul>
 80a1f16:	4602      	mov	r2, r0
 80a1f18:	460b      	mov	r3, r1
 80a1f1a:	4630      	mov	r0, r6
 80a1f1c:	4639      	mov	r1, r7
 80a1f1e:	f009 fde5 	bl	80abaec <__aeabi_dcmpgt>
 80a1f22:	b120      	cbz	r0, 80a1f2e <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xd6>
        //beat detected
        // beat_reporter is used by visualizers, it is cleared after every frame
        // beat_on is used by beat detection, it is cleared whenever a beat ends
        beat_on_bins[cur_bin] = true;
 80a1f24:	2301      	movs	r3, #1
 80a1f26:	f884 3bd8 	strb.w	r3, [r4, #3032]	; 0xbd8
        beat_reporter_bins[cur_bin] = true;
 80a1f2a:	f884 3bdf 	strb.w	r3, [r4, #3039]	; 0xbdf
    } else if (beat_on_bins[cur_bin] && sma_short < 1.0*sma_long) {
        //beat reset
        beat_on_bins[cur_bin] = false;
    }
}
 80a1f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (beat_on_bins[cur_bin] && sma_short < 1.0*sma_long) {
 80a1f32:	4601      	mov	r1, r0
 80a1f34:	4648      	mov	r0, r9
 80a1f36:	f00a f93d 	bl	80ac1b4 <__aeabi_fcmplt>
 80a1f3a:	2800      	cmp	r0, #0
 80a1f3c:	d0f7      	beq.n	80a1f2e <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xd6>
        beat_on_bins[cur_bin] = false;
 80a1f3e:	2300      	movs	r3, #0
 80a1f40:	f884 3bd8 	strb.w	r3, [r4, #3032]	; 0xbd8
}
 80a1f44:	e7f3      	b.n	80a1f2e <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi+0xd6>
 80a1f46:	bf00      	nop
 80a1f48:	9999999a 	.word	0x9999999a
 80a1f4c:	3ff99999 	.word	0x3ff99999
 80a1f50:	40a00000 	.word	0x40a00000
 80a1f54:	42c80000 	.word	0x42c80000

080a1f58 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins>:

void Beat_Detection::tick_bpm_detection(audio_bins * bins) {
 80a1f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1f5c:	6a06      	ldr	r6, [r0, #32]
 80a1f5e:	4604      	mov	r4, r0
 80a1f60:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80a1f64:	460d      	mov	r5, r1
    bpm_short_total -= bpm_short_values[sma_short_index];
 80a1f66:	f8d0 0d90 	ldr.w	r0, [r0, #3472]	; 0xd90
 80a1f6a:	f8d6 1d78 	ldr.w	r1, [r6, #3448]	; 0xd78
 80a1f6e:	f009 fe79 	bl	80abc64 <__aeabi_fsub>
 80a1f72:	f8c4 0d90 	str.w	r0, [r4, #3472]	; 0xd90
    bpm_short_values[sma_short_index] = (bins->left[0]*bins->left[0] + bins->right[0]*bins->right[0])/4;
 80a1f76:	69eb      	ldr	r3, [r5, #28]
    bpm_short_total -= bpm_short_values[sma_short_index];
 80a1f78:	4607      	mov	r7, r0
    bpm_short_values[sma_short_index] = (bins->left[0]*bins->left[0] + bins->right[0]*bins->right[0])/4;
 80a1f7a:	435b      	muls	r3, r3
 80a1f7c:	6828      	ldr	r0, [r5, #0]
 80a1f7e:	fb00 3000 	mla	r0, r0, r0, r3
 80a1f82:	1080      	asrs	r0, r0, #2
 80a1f84:	f009 ff24 	bl	80abdd0 <__aeabi_i2f>
 80a1f88:	4680      	mov	r8, r0
 80a1f8a:	f8c6 0d78 	str.w	r0, [r6, #3448]	; 0xd78
    bpm_short_values[sma_short_index] += (bins->left[1]*bins->left[1] + bins->right[1]*bins->right[1])/4;
 80a1f8e:	6a2b      	ldr	r3, [r5, #32]
 80a1f90:	6868      	ldr	r0, [r5, #4]
 80a1f92:	435b      	muls	r3, r3
 80a1f94:	fb00 3000 	mla	r0, r0, r0, r3
 80a1f98:	1080      	asrs	r0, r0, #2
 80a1f9a:	f009 ff19 	bl	80abdd0 <__aeabi_i2f>
 80a1f9e:	4641      	mov	r1, r8
 80a1fa0:	f009 fe62 	bl	80abc68 <__addsf3>
 80a1fa4:	4605      	mov	r5, r0
    //bpm_short_values[sma_short_index] = (bins->left[0]*bins->left[0] + bins->left[1]*bins->left[1])/2;
    bpm_short_total += bpm_short_values[sma_short_index];
 80a1fa6:	4601      	mov	r1, r0
    bpm_short_values[sma_short_index] += (bins->left[1]*bins->left[1] + bins->right[1]*bins->right[1])/4;
 80a1fa8:	f8c6 0d78 	str.w	r0, [r6, #3448]	; 0xd78
    bpm_short_total += bpm_short_values[sma_short_index];
 80a1fac:	4638      	mov	r0, r7
 80a1fae:	f009 fe5b 	bl	80abc68 <__addsf3>
 80a1fb2:	69e7      	ldr	r7, [r4, #28]
 80a1fb4:	f8c4 0d90 	str.w	r0, [r4, #3472]	; 0xd90
    float sma_short = bpm_short_total / SMA_SHORT_LENGTH;
 80a1fb8:	eb04 0787 	add.w	r7, r4, r7, lsl #2

    bpm_long_total -= bpm_long_values[sma_long_index];
 80a1fbc:	f8d7 1be8 	ldr.w	r1, [r7, #3048]	; 0xbe8
    bpm_short_total += bpm_short_values[sma_short_index];
 80a1fc0:	4606      	mov	r6, r0
    bpm_long_total -= bpm_long_values[sma_long_index];
 80a1fc2:	f8d4 0d8c 	ldr.w	r0, [r4, #3468]	; 0xd8c
 80a1fc6:	f009 fe4d 	bl	80abc64 <__aeabi_fsub>
    bpm_long_values[sma_long_index] = bpm_short_values[sma_short_index];
 80a1fca:	f8c7 5be8 	str.w	r5, [r7, #3048]	; 0xbe8
    bpm_long_total -= bpm_long_values[sma_long_index];
 80a1fce:	4601      	mov	r1, r0
    bpm_long_total += bpm_long_values[sma_long_index];
 80a1fd0:	4628      	mov	r0, r5
 80a1fd2:	f009 fe49 	bl	80abc68 <__addsf3>
    float sma_short = bpm_short_total / SMA_SHORT_LENGTH;
 80a1fd6:	492c      	ldr	r1, [pc, #176]	; (80a2088 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x130>)
    bpm_long_total += bpm_long_values[sma_long_index];
 80a1fd8:	4605      	mov	r5, r0
 80a1fda:	f8c4 0d8c 	str.w	r0, [r4, #3468]	; 0xd8c
    float sma_short = bpm_short_total / SMA_SHORT_LENGTH;
 80a1fde:	4630      	mov	r0, r6
 80a1fe0:	f009 fffe 	bl	80abfe0 <__aeabi_fdiv>
 80a1fe4:	f009 fa9a 	bl	80ab51c <__aeabi_f2d>
 80a1fe8:	4606      	mov	r6, r0
 80a1fea:	460f      	mov	r7, r1
    float sma_long = bpm_long_total / SMA_LONG_LENGTH;
 80a1fec:	4628      	mov	r0, r5
 80a1fee:	4927      	ldr	r1, [pc, #156]	; (80a208c <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x134>)
 80a1ff0:	f009 fff6 	bl	80abfe0 <__aeabi_fdiv>
 80a1ff4:	f009 fa92 	bl	80ab51c <__aeabi_f2d>

    if (!beat_on && sma_short > 1.40*sma_long) {
 80a1ff8:	7823      	ldrb	r3, [r4, #0]
 80a1ffa:	bb83      	cbnz	r3, 80a205e <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x106>
 80a1ffc:	a320      	add	r3, pc, #128	; (adr r3, 80a2080 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x128>)
 80a1ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2002:	f009 fae3 	bl	80ab5cc <__aeabi_dmul>
 80a2006:	4632      	mov	r2, r6
 80a2008:	463b      	mov	r3, r7
 80a200a:	f009 fd51 	bl	80abab0 <__aeabi_dcmplt>
 80a200e:	b320      	cbz	r0, 80a205a <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x102>
        //beat detected
        beat_count++;
 80a2010:	6923      	ldr	r3, [r4, #16]

        if (beat_count % beats_per_flip == 0) {
 80a2012:	6961      	ldr	r1, [r4, #20]
        beat_count++;
 80a2014:	3301      	adds	r3, #1
        if (beat_count % beats_per_flip == 0) {
 80a2016:	fb93 f2f1 	sdiv	r2, r3, r1
        beat_count++;
 80a201a:	6123      	str	r3, [r4, #16]
        if (beat_count % beats_per_flip == 0) {
 80a201c:	fb01 3312 	mls	r3, r1, r2, r3
 80a2020:	b91b      	cbnz	r3, 80a202a <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0xd2>
            flip_on = !flip_on;
 80a2022:	78a3      	ldrb	r3, [r4, #2]
 80a2024:	f083 0301 	eor.w	r3, r3, #1
 80a2028:	70a3      	strb	r3, [r4, #2]
        }

        blue = (green+red) % 255;
 80a202a:	26ff      	movs	r6, #255	; 0xff
 80a202c:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
 80a2030:	442b      	add	r3, r5
 80a2032:	fb93 f2f6 	sdiv	r2, r3, r6
 80a2036:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80a203a:	1a9b      	subs	r3, r3, r2
        green = red;
 80a203c:	e9c4 5302 	strd	r5, r3, [r4, #8]
        red = (red+random(255)) % 255;
 80a2040:	4630      	mov	r0, r6
 80a2042:	f003 ffeb 	bl	80a601c <_Z6randomi>
 80a2046:	4405      	add	r5, r0
 80a2048:	fb95 f6f6 	sdiv	r6, r5, r6

        // beat_reporter is used by visualizers, it is cleared after every frame
        // beat_on is used by beat detection, it is cleared whenever a beat ends
        beat_on = true;
 80a204c:	f240 1301 	movw	r3, #257	; 0x101
        red = (red+random(255)) % 255;
 80a2050:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 80a2054:	1bad      	subs	r5, r5, r6
 80a2056:	6065      	str	r5, [r4, #4]
        beat_on = true;
 80a2058:	8023      	strh	r3, [r4, #0]
        beat_reporter = true;
    } else if (beat_on && sma_short < 1.20*sma_long) {
        //beat reset
        beat_on = false;
    }
}
 80a205a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (beat_on && sma_short < 1.20*sma_long) {
 80a205e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80a2062:	4b0b      	ldr	r3, [pc, #44]	; (80a2090 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x138>)
 80a2064:	f009 fab2 	bl	80ab5cc <__aeabi_dmul>
 80a2068:	4632      	mov	r2, r6
 80a206a:	463b      	mov	r3, r7
 80a206c:	f009 fd3e 	bl	80abaec <__aeabi_dcmpgt>
 80a2070:	2800      	cmp	r0, #0
 80a2072:	d0f2      	beq.n	80a205a <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x102>
        beat_on = false;
 80a2074:	2300      	movs	r3, #0
 80a2076:	7023      	strb	r3, [r4, #0]
}
 80a2078:	e7ef      	b.n	80a205a <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins+0x102>
 80a207a:	bf00      	nop
 80a207c:	f3af 8000 	nop.w
 80a2080:	66666666 	.word	0x66666666
 80a2084:	3ff66666 	.word	0x3ff66666
 80a2088:	40a00000 	.word	0x40a00000
 80a208c:	42c80000 	.word	0x42c80000
 80a2090:	3ff33333 	.word	0x3ff33333

080a2094 <_ZN14Beat_Detection4tickEP10audio_bins>:
void Beat_Detection::tick(audio_bins* bins) {
 80a2094:	b570      	push	{r4, r5, r6, lr}
 80a2096:	4604      	mov	r4, r0
 80a2098:	460e      	mov	r6, r1
    for (int i = 0; i < NUM_BINS; i++) {
 80a209a:	2500      	movs	r5, #0
    tick_bpm_detection(bins);
 80a209c:	f7ff ff5c 	bl	80a1f58 <_ZN14Beat_Detection18tick_bpm_detectionEP10audio_bins>
        tick_beat_detection(bins, i);
 80a20a0:	462a      	mov	r2, r5
 80a20a2:	4631      	mov	r1, r6
 80a20a4:	4620      	mov	r0, r4
    for (int i = 0; i < NUM_BINS; i++) {
 80a20a6:	3501      	adds	r5, #1
        tick_beat_detection(bins, i);
 80a20a8:	f7ff fed6 	bl	80a1e58 <_ZN14Beat_Detection19tick_beat_detectionEP10audio_binsi>
    for (int i = 0; i < NUM_BINS; i++) {
 80a20ac:	2d07      	cmp	r5, #7
 80a20ae:	d1f7      	bne.n	80a20a0 <_ZN14Beat_Detection4tickEP10audio_bins+0xc>
    sma_long_index = sma_long_index % SMA_LONG_LENGTH;
 80a20b0:	2164      	movs	r1, #100	; 0x64
    sma_long_index++;
 80a20b2:	69e3      	ldr	r3, [r4, #28]
 80a20b4:	3301      	adds	r3, #1
    sma_long_index = sma_long_index % SMA_LONG_LENGTH;
 80a20b6:	fb93 f2f1 	sdiv	r2, r3, r1
 80a20ba:	fb01 3312 	mls	r3, r1, r2, r3
    sma_short_index = sma_short_index % SMA_SHORT_LENGTH;
 80a20be:	2205      	movs	r2, #5
    sma_long_index = sma_long_index % SMA_LONG_LENGTH;
 80a20c0:	61e3      	str	r3, [r4, #28]
    sma_short_index++;
 80a20c2:	6a23      	ldr	r3, [r4, #32]
 80a20c4:	3301      	adds	r3, #1
    sma_short_index = sma_short_index % SMA_SHORT_LENGTH;
 80a20c6:	fb93 f2f2 	sdiv	r2, r3, r2
 80a20ca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80a20ce:	1a9b      	subs	r3, r3, r2
 80a20d0:	6223      	str	r3, [r4, #32]
}
 80a20d2:	bd70      	pop	{r4, r5, r6, pc}

080a20d4 <_ZN14Beat_Detection12frame_tickedEv>:
 * Function: frame_ticked
 * Description: Clear all beat detection reporters
 * Parameters: none
 * ================================================================== */
void Beat_Detection::frame_ticked() {
    beat_reporter = false;
 80a20d4:	2300      	movs	r3, #0
 80a20d6:	7043      	strb	r3, [r0, #1]
    for (int i = 0; i < NUM_BINS; i++) {
        beat_reporter_bins[i] = false;
 80a20d8:	f880 3bdf 	strb.w	r3, [r0, #3039]	; 0xbdf
 80a20dc:	f8c0 3be0 	str.w	r3, [r0, #3040]	; 0xbe0
 80a20e0:	f8a0 3be4 	strh.w	r3, [r0, #3044]	; 0xbe4
    }
}
 80a20e4:	4770      	bx	lr

080a20e6 <_ZN14Beat_Detection11beat_on_binEi>:
 * Description: Returns the beat reporter for the given bin
 * Parameters: [int] bin - The bin to check
 * Returns: True if a beat was detected within the last frame, false otherwise.
 * ================================================================== */
bool Beat_Detection::beat_on_bin(int bin) {
    return beat_reporter_bins[bin];
 80a20e6:	4408      	add	r0, r1
}
 80a20e8:	f890 0bdf 	ldrb.w	r0, [r0, #3039]	; 0xbdf
 80a20ec:	4770      	bx	lr

080a20ee <_ZN14Beat_Detection9num_beatsEv>:
 * Description: Returns the current number of beats detected
 * Parameters: none
 * ================================================================== */
int Beat_Detection::num_beats() {
    return beat_count;
}
 80a20ee:	6900      	ldr	r0, [r0, #16]
 80a20f0:	4770      	bx	lr

080a20f2 <_ZN14Beat_Detection1rEv>:
 * Description: Returns the current red value
 * Parameters: none
 * ================================================================== */
int Beat_Detection::r() {
    return red;
}
 80a20f2:	6840      	ldr	r0, [r0, #4]
 80a20f4:	4770      	bx	lr

080a20f6 <_ZN14Beat_Detection1gEv>:
 * Description: Returns the current green value
 * Parameters: none
 * ================================================================== */
int Beat_Detection::g() {
    return green;
}
 80a20f6:	6880      	ldr	r0, [r0, #8]
 80a20f8:	4770      	bx	lr

080a20fa <_ZN14Beat_Detection1bEv>:
 * Description: Returns the current blue value
 * Parameters: none
 * ================================================================== */
int Beat_Detection::b() {
    return blue;
}
 80a20fa:	68c0      	ldr	r0, [r0, #12]
 80a20fc:	4770      	bx	lr

080a20fe <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a20fe:	b510      	push	{r4, lr}
 80a2100:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a2102:	6800      	ldr	r0, [r0, #0]
 80a2104:	b108      	cbz	r0, 80a210a <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80a2106:	f003 fb01 	bl	80a570c <free>
class SystemClass {
 80a210a:	4620      	mov	r0, r4
 80a210c:	bd10      	pop	{r4, pc}
	...

080a2110 <_ZN4MDNSC1Ev>:
#define MDNS_PORT 5353

#define BUFFER_SIZE 512
#define HOSTNAME ""

class MDNS {
 80a2110:	b530      	push	{r4, r5, lr}
 80a2112:	4604      	mov	r4, r0
 80a2114:	b085      	sub	sp, #20
 80a2116:	204c      	movs	r0, #76	; 0x4c
 80a2118:	f7fd ffbf 	bl	80a009a <_Znwj>
 80a211c:	4605      	mov	r5, r0
 80a211e:	b108      	cbz	r0, 80a2124 <_ZN4MDNSC1Ev+0x14>
 80a2120:	f004 febe 	bl	80a6ea0 <_ZN3UDPC1Ev>
 80a2124:	6025      	str	r5, [r4, #0]
 80a2126:	200c      	movs	r0, #12
 80a2128:	f7fd ffb7 	bl	80a009a <_Znwj>
 80a212c:	4605      	mov	r5, r0
 80a212e:	b118      	cbz	r0, 80a2138 <_ZN4MDNSC1Ev+0x28>
 80a2130:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a2134:	f001 fdda 	bl	80a3cec <_ZN6BufferC1Et>
 80a2138:	491e      	ldr	r1, [pc, #120]	; (80a21b4 <_ZN4MDNSC1Ev+0xa4>)
 80a213a:	6065      	str	r5, [r4, #4]
 80a213c:	4668      	mov	r0, sp
 80a213e:	f003 fff0 	bl	80a6122 <_ZN6StringC1EPKc>
 80a2142:	2018      	movs	r0, #24
 80a2144:	f7fd ffa9 	bl	80a009a <_Znwj>
 80a2148:	4605      	mov	r5, r0
 80a214a:	b120      	cbz	r0, 80a2156 <_ZN4MDNSC1Ev+0x46>
 80a214c:	2300      	movs	r3, #0
 80a214e:	4669      	mov	r1, sp
 80a2150:	461a      	mov	r2, r3
 80a2152:	f001 fe61 	bl	80a3e18 <_ZN5LabelC1E6StringPS_b>
 80a2156:	60a5      	str	r5, [r4, #8]
 80a2158:	4668      	mov	r0, sp
 80a215a:	f003 ff98 	bl	80a608e <_ZN6StringD1Ev>
 80a215e:	4916      	ldr	r1, [pc, #88]	; (80a21b8 <_ZN4MDNSC1Ev+0xa8>)
 80a2160:	4668      	mov	r0, sp
 80a2162:	f003 ffde 	bl	80a6122 <_ZN6StringC1EPKc>
 80a2166:	2018      	movs	r0, #24
 80a2168:	f7fd ff97 	bl	80a009a <_Znwj>
 80a216c:	4605      	mov	r5, r0
 80a216e:	b120      	cbz	r0, 80a217a <_ZN4MDNSC1Ev+0x6a>
 80a2170:	2300      	movs	r3, #0
 80a2172:	4669      	mov	r1, sp
 80a2174:	68a2      	ldr	r2, [r4, #8]
 80a2176:	f001 fe4f 	bl	80a3e18 <_ZN5LabelC1E6StringPS_b>
 80a217a:	4668      	mov	r0, sp
 80a217c:	60e5      	str	r5, [r4, #12]
 80a217e:	f003 ff86 	bl	80a608e <_ZN6StringD1Ev>
 80a2182:	2001      	movs	r0, #1
 80a2184:	f7fd ff89 	bl	80a009a <_Znwj>
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
    {
      _M_header._M_color = _S_red;
 80a2188:	2300      	movs	r3, #0

	  _Rb_tree_impl()
	    _GLIBCXX_NOEXCEPT_IF(
		is_nothrow_default_constructible<_Node_allocator>::value
		&& is_nothrow_default_constructible<_Base_key_compare>::value )
	  : _Node_allocator()
 80a218a:	f104 0220 	add.w	r2, r4, #32
 80a218e:	6120      	str	r0, [r4, #16]
      _M_header._M_left = &_M_header;
 80a2190:	e9c4 3209 	strd	r3, r2, [r4, #36]	; 0x24
      _M_node_count = 0;
 80a2194:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
 80a2198:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80a219c:	4907      	ldr	r1, [pc, #28]	; (80a21bc <_ZN4MDNSC1Ev+0xac>)
      _M_header._M_color = _S_red;
 80a219e:	f884 3020 	strb.w	r3, [r4, #32]
 80a21a2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a21a4:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80a21a8:	f003 ffbb 	bl	80a6122 <_ZN6StringC1EPKc>
 80a21ac:	4620      	mov	r0, r4
 80a21ae:	b005      	add	sp, #20
 80a21b0:	bd30      	pop	{r4, r5, pc}
 80a21b2:	bf00      	nop
 80a21b4:	080ad176 	.word	0x080ad176
 80a21b8:	080ac914 	.word	0x080ac914
 80a21bc:	080ac91a 	.word	0x080ac91a

080a21c0 <_Z7init_eqv>:
/* ================================================================== *
 *  Function: init_eq
 *  Description: Sends reset sequence to MSGEQ7's allowing for data
 *  reading to begin
 * ================================================================== */
void init_eq() {
 80a21c0:	b508      	push	{r3, lr}
     *
     *  rst     _|‾‾‾‾‾|__
     *
     *  strobe  _|‾‾|__|‾‾
     */
    digitalWrite(rst, HIGH);
 80a21c2:	2101      	movs	r1, #1
 80a21c4:	200f      	movs	r0, #15
 80a21c6:	f005 fa1e 	bl	80a7606 <digitalWrite>
    digitalWrite(strobe, HIGH);
 80a21ca:	2101      	movs	r1, #1
 80a21cc:	200c      	movs	r0, #12
 80a21ce:	f005 fa1a 	bl	80a7606 <digitalWrite>
    delay(1);
 80a21d2:	2001      	movs	r0, #1
 80a21d4:	f003 fad2 	bl	80a577c <delay>
    digitalWrite(strobe, LOW);
 80a21d8:	2100      	movs	r1, #0
 80a21da:	200c      	movs	r0, #12
 80a21dc:	f005 fa13 	bl	80a7606 <digitalWrite>
    delay(1);
 80a21e0:	2001      	movs	r0, #1
 80a21e2:	f003 facb 	bl	80a577c <delay>
    digitalWrite(rst, LOW);
 80a21e6:	2100      	movs	r1, #0
 80a21e8:	200f      	movs	r0, #15
 80a21ea:	f005 fa0c 	bl	80a7606 <digitalWrite>
    digitalWrite(strobe, HIGH);
 80a21ee:	200c      	movs	r0, #12
 80a21f0:	2101      	movs	r1, #1
 80a21f2:	f005 fa08 	bl	80a7606 <digitalWrite>
    delay(1);
}
 80a21f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(1);
 80a21fa:	2001      	movs	r0, #1
 80a21fc:	f003 babe 	b.w	80a577c <delay>

080a2200 <_Z11sample_freqP10audio_bins>:
/* ================================================================== *
 *  Function: sample_freq
 *  Description: Reads bins from MSGEQ7's and stores them to struct
 *  Parameters:  [audio_bins]* bins - frequency bins read from chip
 * ================================================================== */
void sample_freq(audio_bins* bins) {
 80a2200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (int i = 0; i < NUM_BINS; i++) {
        digitalWrite(strobe, LOW);
        delayMicroseconds(40); // allow for EQ mux to fully switch

        // Moving average bins with new sample
        bins->left[i]  = analogRead(audio_l) * 0.8 + bins->left[i]  * 0.2;
 80a2204:	f20f 09b8 	addw	r9, pc, #184	; 0xb8
 80a2208:	e9d9 8900 	ldrd	r8, r9, [r9]
 80a220c:	a72e      	add	r7, pc, #184	; (adr r7, 80a22c8 <_Z11sample_freqP10audio_bins+0xc8>)
 80a220e:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a2212:	f100 0318 	add.w	r3, r0, #24
 80a2216:	f1a0 0a04 	sub.w	sl, r0, #4
 80a221a:	9301      	str	r3, [sp, #4]
        digitalWrite(strobe, LOW);
 80a221c:	2100      	movs	r1, #0
 80a221e:	200c      	movs	r0, #12
 80a2220:	f005 f9f1 	bl	80a7606 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a2224:	2028      	movs	r0, #40	; 0x28
 80a2226:	f002 ffeb 	bl	80a5200 <HAL_Delay_Microseconds>
        bins->left[i]  = analogRead(audio_l) * 0.8 + bins->left[i]  * 0.2;
 80a222a:	200a      	movs	r0, #10
 80a222c:	f005 fa04 	bl	80a7638 <analogRead>
 80a2230:	4683      	mov	fp, r0
 80a2232:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80a2236:	f009 f95f 	bl	80ab4f8 <__aeabi_i2d>
 80a223a:	4642      	mov	r2, r8
 80a223c:	464b      	mov	r3, r9
 80a223e:	f009 f9c5 	bl	80ab5cc <__aeabi_dmul>
 80a2242:	4604      	mov	r4, r0
 80a2244:	4658      	mov	r0, fp
 80a2246:	460d      	mov	r5, r1
 80a2248:	f009 f956 	bl	80ab4f8 <__aeabi_i2d>
 80a224c:	4632      	mov	r2, r6
 80a224e:	463b      	mov	r3, r7
 80a2250:	f009 f9bc 	bl	80ab5cc <__aeabi_dmul>
 80a2254:	4602      	mov	r2, r0
 80a2256:	460b      	mov	r3, r1
 80a2258:	4620      	mov	r0, r4
 80a225a:	4629      	mov	r1, r5
 80a225c:	f009 f800 	bl	80ab260 <__adddf3>
 80a2260:	f009 fc64 	bl	80abb2c <__aeabi_d2iz>
 80a2264:	f8ca 0000 	str.w	r0, [sl]
        bins->right[i] = analogRead(audio_r) * 0.8 + bins->right[i] * 0.2;
 80a2268:	200b      	movs	r0, #11
 80a226a:	f005 f9e5 	bl	80a7638 <analogRead>
 80a226e:	4683      	mov	fp, r0
 80a2270:	f8da 001c 	ldr.w	r0, [sl, #28]
 80a2274:	f009 f940 	bl	80ab4f8 <__aeabi_i2d>
 80a2278:	4642      	mov	r2, r8
 80a227a:	464b      	mov	r3, r9
 80a227c:	f009 f9a6 	bl	80ab5cc <__aeabi_dmul>
 80a2280:	4604      	mov	r4, r0
 80a2282:	4658      	mov	r0, fp
 80a2284:	460d      	mov	r5, r1
 80a2286:	f009 f937 	bl	80ab4f8 <__aeabi_i2d>
 80a228a:	4632      	mov	r2, r6
 80a228c:	463b      	mov	r3, r7
 80a228e:	f009 f99d 	bl	80ab5cc <__aeabi_dmul>
 80a2292:	460b      	mov	r3, r1
 80a2294:	4602      	mov	r2, r0
 80a2296:	4629      	mov	r1, r5
 80a2298:	4620      	mov	r0, r4
 80a229a:	f008 ffe1 	bl	80ab260 <__adddf3>
 80a229e:	f009 fc45 	bl	80abb2c <__aeabi_d2iz>

        digitalWrite(strobe, HIGH);
 80a22a2:	2101      	movs	r1, #1
        bins->right[i] = analogRead(audio_r) * 0.8 + bins->right[i] * 0.2;
 80a22a4:	f8ca 001c 	str.w	r0, [sl, #28]
        digitalWrite(strobe, HIGH);
 80a22a8:	200c      	movs	r0, #12
 80a22aa:	f005 f9ac 	bl	80a7606 <digitalWrite>
 80a22ae:	2028      	movs	r0, #40	; 0x28
 80a22b0:	f002 ffa6 	bl	80a5200 <HAL_Delay_Microseconds>
    for (int i = 0; i < NUM_BINS; i++) {
 80a22b4:	9b01      	ldr	r3, [sp, #4]
 80a22b6:	459a      	cmp	sl, r3
 80a22b8:	d1b0      	bne.n	80a221c <_Z11sample_freqP10audio_bins+0x1c>
        delayMicroseconds(40); // allow for EQ mux to fully switch
    }
}
 80a22ba:	b003      	add	sp, #12
 80a22bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a22c0:	9999999a 	.word	0x9999999a
 80a22c4:	3fc99999 	.word	0x3fc99999
 80a22c8:	9999999a 	.word	0x9999999a
 80a22cc:	3fe99999 	.word	0x3fe99999

080a22d0 <_Z15powered_on_tickv>:
/* ================================================================== *
 *  Function: powered_on_tick
 *  Description: Samples/beat detects/updates frame as needed
 *  Parameters:  none
 * ================================================================== */
void powered_on_tick() {
 80a22d0:	b510      	push	{r4, lr}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a22d2:	f002 ffa5 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
    // #if ENABLE_PSU_CONTROL
    // if (!psu_is_on) { psu_startup(); }
    // #endif

    #if ENABLE_MSGEQ7
    if (millis() - last_sample_millis >= SAMPLE_UPDATE_INTERVAL) {
 80a22d6:	4c12      	ldr	r4, [pc, #72]	; (80a2320 <_Z15powered_on_tickv+0x50>)
 80a22d8:	6823      	ldr	r3, [r4, #0]
 80a22da:	1ac0      	subs	r0, r0, r3
 80a22dc:	2809      	cmp	r0, #9
 80a22de:	d909      	bls.n	80a22f4 <_Z15powered_on_tickv+0x24>
 80a22e0:	f002 ff9e 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
        last_sample_millis = millis();
 80a22e4:	6020      	str	r0, [r4, #0]
        sample_freq(&bins);
 80a22e6:	480f      	ldr	r0, [pc, #60]	; (80a2324 <_Z15powered_on_tickv+0x54>)
 80a22e8:	f7ff ff8a 	bl	80a2200 <_Z11sample_freqP10audio_bins>
        beat_detect.tick(&bins);
 80a22ec:	490d      	ldr	r1, [pc, #52]	; (80a2324 <_Z15powered_on_tickv+0x54>)
 80a22ee:	480e      	ldr	r0, [pc, #56]	; (80a2328 <_Z15powered_on_tickv+0x58>)
 80a22f0:	f7ff fed0 	bl	80a2094 <_ZN14Beat_Detection4tickEP10audio_bins>
 80a22f4:	f002 ff94 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
    }
    #endif

    #if ENABLE_BARS
    if (millis() - last_display_update >= DISPLAY_UPDATE_INTERVAL) {
 80a22f8:	4c0c      	ldr	r4, [pc, #48]	; (80a232c <_Z15powered_on_tickv+0x5c>)
 80a22fa:	6823      	ldr	r3, [r4, #0]
 80a22fc:	1ac0      	subs	r0, r0, r3
 80a22fe:	280e      	cmp	r0, #14
 80a2300:	d90c      	bls.n	80a231c <_Z15powered_on_tickv+0x4c>
 80a2302:	f002 ff8d 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
        last_display_update = millis();
        matrix->tick(&bins, STATIC_VISUALIZER);
 80a2306:	4b0a      	ldr	r3, [pc, #40]	; (80a2330 <_Z15powered_on_tickv+0x60>)
 80a2308:	2202      	movs	r2, #2
        last_display_update = millis();
 80a230a:	6020      	str	r0, [r4, #0]
        matrix->tick(&bins, STATIC_VISUALIZER);
 80a230c:	4905      	ldr	r1, [pc, #20]	; (80a2324 <_Z15powered_on_tickv+0x54>)
 80a230e:	6818      	ldr	r0, [r3, #0]
 80a2310:	f7ff fcf2 	bl	80a1cf8 <_ZN10Bar_Matrix4tickEP10audio_binsi>
        frame_count++;
 80a2314:	4a07      	ldr	r2, [pc, #28]	; (80a2334 <_Z15powered_on_tickv+0x64>)
 80a2316:	6813      	ldr	r3, [r2, #0]
 80a2318:	3301      	adds	r3, #1
 80a231a:	6013      	str	r3, [r2, #0]
    }
    #endif
}
 80a231c:	bd10      	pop	{r4, pc}
 80a231e:	bf00      	nop
 80a2320:	20000e78 	.word	0x20000e78
 80a2324:	20000094 	.word	0x20000094
 80a2328:	200000d4 	.word	0x200000d4
 80a232c:	20000e70 	.word	0x20000e70
 80a2330:	200000cc 	.word	0x200000cc
 80a2334:	20000e68 	.word	0x20000e68

080a2338 <_Z11psu_startupv>:
/* ================================================================== *
 *  Function: psu_startup
 *  Description: Turns the psu on
 *  Parameters:  none
 * ================================================================== */
void psu_startup() {
 80a2338:	b570      	push	{r4, r5, r6, lr}
    #if ENABLE_PSU_CONTROL
    if (!psu_is_on) {
 80a233a:	4c08      	ldr	r4, [pc, #32]	; (80a235c <_Z11psu_startupv+0x24>)
 80a233c:	7825      	ldrb	r5, [r4, #0]
 80a233e:	b955      	cbnz	r5, 80a2356 <_Z11psu_startupv+0x1e>
        matrix->clear_matrix();
 80a2340:	4e07      	ldr	r6, [pc, #28]	; (80a2360 <_Z11psu_startupv+0x28>)
 80a2342:	6830      	ldr	r0, [r6, #0]
 80a2344:	f7fe f85a 	bl	80a03fc <_ZN10Bar_Matrix12clear_matrixEv>
        matrix->show_all();
 80a2348:	6830      	ldr	r0, [r6, #0]
 80a234a:	f7fe f9d1 	bl	80a06f0 <_ZN10Bar_Matrix8show_allEv>
        digitalWrite(ps_on, LOW);
 80a234e:	4629      	mov	r1, r5
 80a2350:	200e      	movs	r0, #14
 80a2352:	f005 f958 	bl	80a7606 <digitalWrite>
    }
    psu_is_on = true;
 80a2356:	2301      	movs	r3, #1
 80a2358:	7023      	strb	r3, [r4, #0]
    #endif
}
 80a235a:	bd70      	pop	{r4, r5, r6, pc}
 80a235c:	200000d1 	.word	0x200000d1
 80a2360:	200000cc 	.word	0x200000cc

080a2364 <setup>:
void setup() {
 80a2364:	b530      	push	{r4, r5, lr}
    last_sample_millis = 0;
 80a2366:	2400      	movs	r4, #0
void setup() {
 80a2368:	b0a1      	sub	sp, #132	; 0x84
    pinMode(rst, OUTPUT);
 80a236a:	2101      	movs	r1, #1
 80a236c:	200f      	movs	r0, #15
 80a236e:	f005 f939 	bl	80a75e4 <pinMode>
    pinMode(strobe, OUTPUT);
 80a2372:	2101      	movs	r1, #1
 80a2374:	200c      	movs	r0, #12
 80a2376:	f005 f935 	bl	80a75e4 <pinMode>
    init_eq();
 80a237a:	f7ff ff21 	bl	80a21c0 <_Z7init_eqv>
    last_sample_millis = 0;
 80a237e:	4b5f      	ldr	r3, [pc, #380]	; (80a24fc <setup+0x198>)
    pinMode(ps_on, OUTPUT);
 80a2380:	2101      	movs	r1, #1
 80a2382:	200e      	movs	r0, #14
    last_sample_millis = 0;
 80a2384:	601c      	str	r4, [r3, #0]
    pinMode(ps_on, OUTPUT);
 80a2386:	f005 f92d 	bl	80a75e4 <pinMode>
    psu_is_on = false;
 80a238a:	4b5d      	ldr	r3, [pc, #372]	; (80a2500 <setup+0x19c>)
 80a238c:	701c      	strb	r4, [r3, #0]
    psu_startup();
 80a238e:	f7ff ffd3 	bl	80a2338 <_Z11psu_startupv>
    matrix = new Bar_Matrix(NUM_BARS, STRIP_LENGTH, LED_TYPE, matrix_pins, &beat_detect);
 80a2392:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80a2396:	f7fd fe80 	bl	80a009a <_Znwj>
 80a239a:	4604      	mov	r4, r0
 80a239c:	b140      	cbz	r0, 80a23b0 <setup+0x4c>
 80a239e:	4b59      	ldr	r3, [pc, #356]	; (80a2504 <setup+0x1a0>)
 80a23a0:	223a      	movs	r2, #58	; 0x3a
 80a23a2:	9301      	str	r3, [sp, #4]
 80a23a4:	4b58      	ldr	r3, [pc, #352]	; (80a2508 <setup+0x1a4>)
 80a23a6:	2108      	movs	r1, #8
 80a23a8:	9300      	str	r3, [sp, #0]
 80a23aa:	2302      	movs	r3, #2
 80a23ac:	f7fe f84c 	bl	80a0448 <_ZN10Bar_MatrixC1EsscPKcP14Beat_Detection>
 80a23b0:	4b56      	ldr	r3, [pc, #344]	; (80a250c <setup+0x1a8>)
    frame_count_publish = 0;
 80a23b2:	4d57      	ldr	r5, [pc, #348]	; (80a2510 <setup+0x1ac>)
    matrix = new Bar_Matrix(NUM_BARS, STRIP_LENGTH, LED_TYPE, matrix_pins, &beat_detect);
 80a23b4:	601c      	str	r4, [r3, #0]
    last_display_update = 0;
 80a23b6:	2400      	movs	r4, #0
 80a23b8:	4b56      	ldr	r3, [pc, #344]	; (80a2514 <setup+0x1b0>)
 80a23ba:	601c      	str	r4, [r3, #0]
    last_sound_seconds = Time.now();
 80a23bc:	f004 fbc0 	bl	80a6b40 <_ZN9TimeClass3nowEv>
 80a23c0:	4b55      	ldr	r3, [pc, #340]	; (80a2518 <setup+0x1b4>)
 80a23c2:	6018      	str	r0, [r3, #0]
    server.init();
 80a23c4:	4855      	ldr	r0, [pc, #340]	; (80a251c <setup+0x1b8>)
 80a23c6:	f001 fbe7 	bl	80a3b98 <_ZN6Server4initEv>
    last_server_update = 0;
 80a23ca:	4b55      	ldr	r3, [pc, #340]	; (80a2520 <setup+0x1bc>)
    mdns.setHostname("muse");
 80a23cc:	4955      	ldr	r1, [pc, #340]	; (80a2524 <setup+0x1c0>)
 80a23ce:	a81a      	add	r0, sp, #104	; 0x68
    last_server_update = 0;
 80a23d0:	601c      	str	r4, [r3, #0]
    mdns.setHostname("muse");
 80a23d2:	f003 fea6 	bl	80a6122 <_ZN6StringC1EPKc>
 80a23d6:	a91a      	add	r1, sp, #104	; 0x68
 80a23d8:	4853      	ldr	r0, [pc, #332]	; (80a2528 <setup+0x1c4>)
 80a23da:	f002 f8c7 	bl	80a456c <_ZN4MDNS11setHostnameE6String>
 80a23de:	a81a      	add	r0, sp, #104	; 0x68
 80a23e0:	f003 fe55 	bl	80a608e <_ZN6StringD1Ev>
    mdns.begin();
 80a23e4:	4850      	ldr	r0, [pc, #320]	; (80a2528 <setup+0x1c4>)
 80a23e6:	f001 fea5 	bl	80a4134 <_ZN4MDNS5beginEv>
    last_mdns_update = 0;
 80a23ea:	4b50      	ldr	r3, [pc, #320]	; (80a252c <setup+0x1c8>)
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a23ec:	2202      	movs	r2, #2
 80a23ee:	601c      	str	r4, [r3, #0]
    tick_count = 0;
 80a23f0:	4b4f      	ldr	r3, [pc, #316]	; (80a2530 <setup+0x1cc>)
 80a23f2:	4950      	ldr	r1, [pc, #320]	; (80a2534 <setup+0x1d0>)
 80a23f4:	601c      	str	r4, [r3, #0]
    last_tick_update = 0;
 80a23f6:	4b50      	ldr	r3, [pc, #320]	; (80a2538 <setup+0x1d4>)
 80a23f8:	4850      	ldr	r0, [pc, #320]	; (80a253c <setup+0x1d8>)
 80a23fa:	601c      	str	r4, [r3, #0]
    frame_count = 0;
 80a23fc:	4b50      	ldr	r3, [pc, #320]	; (80a2540 <setup+0x1dc>)
    frame_count_publish = 0;
 80a23fe:	602c      	str	r4, [r5, #0]
    frame_count = 0;
 80a2400:	601c      	str	r4, [r3, #0]
 80a2402:	4623      	mov	r3, r4
 80a2404:	f003 f8e2 	bl	80a55cc <spark_variable>
 80a2408:	4623      	mov	r3, r4
 80a240a:	2202      	movs	r2, #2
 80a240c:	4629      	mov	r1, r5
 80a240e:	484d      	ldr	r0, [pc, #308]	; (80a2544 <setup+0x1e0>)
 80a2410:	f003 f8dc 	bl	80a55cc <spark_variable>
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a2414:	4b4c      	ldr	r3, [pc, #304]	; (80a2548 <setup+0x1e4>)
 80a2416:	4622      	mov	r2, r4
 80a2418:	6858      	ldr	r0, [r3, #4]
 80a241a:	4621      	mov	r1, r4
 80a241c:	f003 f906 	bl	80a562c <network_config>
    }

#if !HAL_PLATFORM_WIFI_SCAN_ONLY

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a2420:	1c81      	adds	r1, r0, #2
 80a2422:	a81a      	add	r0, sp, #104	; 0x68
 80a2424:	f003 fcec 	bl	80a5e00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
  String ipStr = String(myIP[0])+"."+String(myIP[1])+"."+String(myIP[2])+"."+String(myIP[3]);
 80a2428:	220a      	movs	r2, #10
 80a242a:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80a242e:	a806      	add	r0, sp, #24
 80a2430:	f003 fee5 	bl	80a61fe <_ZN6StringC1Ehh>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a2434:	a906      	add	r1, sp, #24
 80a2436:	a80a      	add	r0, sp, #40	; 0x28
 80a2438:	f003 febd 	bl	80a61b6 <_ZN6StringC1ERKS_>
 80a243c:	4943      	ldr	r1, [pc, #268]	; (80a254c <setup+0x1e8>)
 80a243e:	a80a      	add	r0, sp, #40	; 0x28
 80a2440:	f003 ff12 	bl	80a6268 <_ZplRK15StringSumHelperPKc>
 80a2444:	4604      	mov	r4, r0
 80a2446:	220a      	movs	r2, #10
 80a2448:	f89d 106e 	ldrb.w	r1, [sp, #110]	; 0x6e
 80a244c:	a80e      	add	r0, sp, #56	; 0x38
 80a244e:	f003 fed6 	bl	80a61fe <_ZN6StringC1Ehh>
 80a2452:	4620      	mov	r0, r4
 80a2454:	a90e      	add	r1, sp, #56	; 0x38
 80a2456:	f003 fefb 	bl	80a6250 <_ZplRK15StringSumHelperRK6String>
 80a245a:	493c      	ldr	r1, [pc, #240]	; (80a254c <setup+0x1e8>)
 80a245c:	f003 ff04 	bl	80a6268 <_ZplRK15StringSumHelperPKc>
 80a2460:	4604      	mov	r4, r0
 80a2462:	220a      	movs	r2, #10
 80a2464:	f89d 106d 	ldrb.w	r1, [sp, #109]	; 0x6d
 80a2468:	a812      	add	r0, sp, #72	; 0x48
 80a246a:	f003 fec8 	bl	80a61fe <_ZN6StringC1Ehh>
 80a246e:	4620      	mov	r0, r4
 80a2470:	a912      	add	r1, sp, #72	; 0x48
 80a2472:	f003 feed 	bl	80a6250 <_ZplRK15StringSumHelperRK6String>
 80a2476:	4935      	ldr	r1, [pc, #212]	; (80a254c <setup+0x1e8>)
 80a2478:	f003 fef6 	bl	80a6268 <_ZplRK15StringSumHelperPKc>
 80a247c:	4604      	mov	r4, r0
 80a247e:	220a      	movs	r2, #10
 80a2480:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80a2484:	a816      	add	r0, sp, #88	; 0x58
 80a2486:	f003 feba 	bl	80a61fe <_ZN6StringC1Ehh>
 80a248a:	4620      	mov	r0, r4
 80a248c:	a916      	add	r1, sp, #88	; 0x58
 80a248e:	f003 fedf 	bl	80a6250 <_ZplRK15StringSumHelperRK6String>
 80a2492:	4601      	mov	r1, r0
 80a2494:	a802      	add	r0, sp, #8
 80a2496:	f003 fe8e 	bl	80a61b6 <_ZN6StringC1ERKS_>
 80a249a:	a816      	add	r0, sp, #88	; 0x58
 80a249c:	f003 fdf7 	bl	80a608e <_ZN6StringD1Ev>
 80a24a0:	a812      	add	r0, sp, #72	; 0x48
 80a24a2:	f003 fdf4 	bl	80a608e <_ZN6StringD1Ev>
 80a24a6:	a80e      	add	r0, sp, #56	; 0x38
 80a24a8:	f003 fdf1 	bl	80a608e <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a24ac:	a80a      	add	r0, sp, #40	; 0x28
 80a24ae:	f003 fdee 	bl	80a608e <_ZN6StringD1Ev>
 80a24b2:	a806      	add	r0, sp, #24
 80a24b4:	f003 fdeb 	bl	80a608e <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a24b8:	4b25      	ldr	r3, [pc, #148]	; (80a2550 <setup+0x1ec>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a24ba:	9a02      	ldr	r2, [sp, #8]
 80a24bc:	781b      	ldrb	r3, [r3, #0]
 80a24be:	4925      	ldr	r1, [pc, #148]	; (80a2554 <setup+0x1f0>)
 80a24c0:	f88d 3000 	strb.w	r3, [sp]
 80a24c4:	a816      	add	r0, sp, #88	; 0x58
 80a24c6:	233c      	movs	r3, #60	; 0x3c
 80a24c8:	f003 fab6 	bl	80a5a38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a24cc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80a24ce:	b17c      	cbz	r4, 80a24f0 <setup+0x18c>
      if (--_M_use_count == 0)
 80a24d0:	6863      	ldr	r3, [r4, #4]
 80a24d2:	3b01      	subs	r3, #1
 80a24d4:	6063      	str	r3, [r4, #4]
 80a24d6:	b95b      	cbnz	r3, 80a24f0 <setup+0x18c>
          _M_dispose();
 80a24d8:	6823      	ldr	r3, [r4, #0]
 80a24da:	4620      	mov	r0, r4
 80a24dc:	689b      	ldr	r3, [r3, #8]
 80a24de:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a24e0:	68a3      	ldr	r3, [r4, #8]
 80a24e2:	3b01      	subs	r3, #1
 80a24e4:	60a3      	str	r3, [r4, #8]
 80a24e6:	b91b      	cbnz	r3, 80a24f0 <setup+0x18c>
            _M_destroy();
 80a24e8:	6823      	ldr	r3, [r4, #0]
 80a24ea:	4620      	mov	r0, r4
 80a24ec:	68db      	ldr	r3, [r3, #12]
 80a24ee:	4798      	blx	r3
 80a24f0:	a802      	add	r0, sp, #8
 80a24f2:	f003 fdcc 	bl	80a608e <_ZN6StringD1Ev>
}
 80a24f6:	b021      	add	sp, #132	; 0x84
 80a24f8:	bd30      	pop	{r4, r5, pc}
 80a24fa:	bf00      	nop
 80a24fc:	20000e78 	.word	0x20000e78
 80a2500:	200000d1 	.word	0x200000d1
 80a2504:	200000d4 	.word	0x200000d4
 80a2508:	080ac93f 	.word	0x080ac93f
 80a250c:	200000cc 	.word	0x200000cc
 80a2510:	20000e6c 	.word	0x20000e6c
 80a2514:	20000e70 	.word	0x20000e70
 80a2518:	20000090 	.word	0x20000090
 80a251c:	20000ed4 	.word	0x20000ed4
 80a2520:	20000e7c 	.word	0x20000e7c
 80a2524:	080ac91d 	.word	0x080ac91d
 80a2528:	20000e84 	.word	0x20000e84
 80a252c:	20000e74 	.word	0x20000e74
 80a2530:	20000ef4 	.word	0x20000ef4
 80a2534:	20000ef8 	.word	0x20000ef8
 80a2538:	20000e80 	.word	0x20000e80
 80a253c:	080ac922 	.word	0x080ac922
 80a2540:	20000e68 	.word	0x20000e68
 80a2544:	080ac92b 	.word	0x080ac92b
 80a2548:	200014d0 	.word	0x200014d0
 80a254c:	080ac935 	.word	0x080ac935
 80a2550:	200000d0 	.word	0x200000d0
 80a2554:	080ac937 	.word	0x080ac937

080a2558 <_Z12psu_shutdownv>:
/* ================================================================== *
 *  Function: psu_shutdown
 *  Description: turns the psu off, sets psu_is_on to false
 *  Parameters:  none
 * ================================================================== */
void psu_shutdown() {
 80a2558:	b538      	push	{r3, r4, r5, lr}
    #if ENABLE_PSU_CONTROL
    if (psu_is_on) {
 80a255a:	4c08      	ldr	r4, [pc, #32]	; (80a257c <_Z12psu_shutdownv+0x24>)
 80a255c:	7822      	ldrb	r2, [r4, #0]
 80a255e:	b152      	cbz	r2, 80a2576 <_Z12psu_shutdownv+0x1e>
        digitalWrite(ps_on, HIGH);
        matrix->clear_matrix();
 80a2560:	4d07      	ldr	r5, [pc, #28]	; (80a2580 <_Z12psu_shutdownv+0x28>)
        digitalWrite(ps_on, HIGH);
 80a2562:	2101      	movs	r1, #1
 80a2564:	200e      	movs	r0, #14
 80a2566:	f005 f84e 	bl	80a7606 <digitalWrite>
        matrix->clear_matrix();
 80a256a:	6828      	ldr	r0, [r5, #0]
 80a256c:	f7fd ff46 	bl	80a03fc <_ZN10Bar_Matrix12clear_matrixEv>
        matrix->show_all();
 80a2570:	6828      	ldr	r0, [r5, #0]
 80a2572:	f7fe f8bd 	bl	80a06f0 <_ZN10Bar_Matrix8show_allEv>
    }
    psu_is_on = false;
 80a2576:	2300      	movs	r3, #0
 80a2578:	7023      	strb	r3, [r4, #0]
    #endif
}
 80a257a:	bd38      	pop	{r3, r4, r5, pc}
 80a257c:	200000d1 	.word	0x200000d1
 80a2580:	200000cc 	.word	0x200000cc

080a2584 <loop>:
void loop() {
 80a2584:	b538      	push	{r3, r4, r5, lr}
    powered_on_tick();
 80a2586:	f7ff fea3 	bl	80a22d0 <_Z15powered_on_tickv>
        for (int i = 0; i < NUM_BINS; i++) {
 80a258a:	2200      	movs	r2, #0
            if (bins.right[i] > SCREENSAVER_MINIMUM || bins.left[i] > SCREENSAVER_MINIMUM) {
 80a258c:	f240 5114 	movw	r1, #1300	; 0x514
 80a2590:	4b44      	ldr	r3, [pc, #272]	; (80a26a4 <loop+0x120>)
 80a2592:	69dc      	ldr	r4, [r3, #28]
 80a2594:	4618      	mov	r0, r3
 80a2596:	428c      	cmp	r4, r1
 80a2598:	dc03      	bgt.n	80a25a2 <loop+0x1e>
 80a259a:	6800      	ldr	r0, [r0, #0]
 80a259c:	3304      	adds	r3, #4
 80a259e:	4288      	cmp	r0, r1
 80a25a0:	dd6e      	ble.n	80a2680 <loop+0xfc>
                if (!psu_is_on) { psu_startup(); }
 80a25a2:	4b41      	ldr	r3, [pc, #260]	; (80a26a8 <loop+0x124>)
 80a25a4:	781b      	ldrb	r3, [r3, #0]
 80a25a6:	b90b      	cbnz	r3, 80a25ac <loop+0x28>
 80a25a8:	f7ff fec6 	bl	80a2338 <_Z11psu_startupv>
                last_sound_seconds = Time.now();
 80a25ac:	f004 fac8 	bl	80a6b40 <_ZN9TimeClass3nowEv>
 80a25b0:	4b3e      	ldr	r3, [pc, #248]	; (80a26ac <loop+0x128>)
 80a25b2:	6018      	str	r0, [r3, #0]
        if (Time.now()-last_sound_seconds > SCREENSAVER_SECS_TO_PSU_OFF) {
 80a25b4:	f004 fac4 	bl	80a6b40 <_ZN9TimeClass3nowEv>
 80a25b8:	4b3c      	ldr	r3, [pc, #240]	; (80a26ac <loop+0x128>)
 80a25ba:	681b      	ldr	r3, [r3, #0]
 80a25bc:	1ac0      	subs	r0, r0, r3
 80a25be:	281e      	cmp	r0, #30
 80a25c0:	d904      	bls.n	80a25cc <loop+0x48>
            if (psu_is_on) { psu_shutdown(); }
 80a25c2:	4b39      	ldr	r3, [pc, #228]	; (80a26a8 <loop+0x124>)
 80a25c4:	781b      	ldrb	r3, [r3, #0]
 80a25c6:	b10b      	cbz	r3, 80a25cc <loop+0x48>
 80a25c8:	f7ff ffc6 	bl	80a2558 <_Z12psu_shutdownv>
        if (server.powered_on() == SERVER_POWER_ON) {
 80a25cc:	4838      	ldr	r0, [pc, #224]	; (80a26b0 <loop+0x12c>)
 80a25ce:	f001 fb35 	bl	80a3c3c <_ZN6Server10powered_onEv>
 80a25d2:	2801      	cmp	r0, #1
 80a25d4:	d158      	bne.n	80a2688 <loop+0x104>
            if (!psu_is_on) { psu_startup(); }
 80a25d6:	4b34      	ldr	r3, [pc, #208]	; (80a26a8 <loop+0x124>)
 80a25d8:	781b      	ldrb	r3, [r3, #0]
 80a25da:	b90b      	cbnz	r3, 80a25e0 <loop+0x5c>
 80a25dc:	f7ff feac 	bl	80a2338 <_Z11psu_startupv>
 80a25e0:	f002 fe1e 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
            if (millis() - last_display_update >= DISPLAY_UPDATE_INTERVAL) {
 80a25e4:	4c33      	ldr	r4, [pc, #204]	; (80a26b4 <loop+0x130>)
 80a25e6:	6823      	ldr	r3, [r4, #0]
 80a25e8:	1ac0      	subs	r0, r0, r3
 80a25ea:	280e      	cmp	r0, #14
 80a25ec:	d913      	bls.n	80a2616 <loop+0x92>
 80a25ee:	f002 fe17 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
                last_display_update = millis();
 80a25f2:	6020      	str	r0, [r4, #0]
                sample_freq(&bins);
 80a25f4:	482b      	ldr	r0, [pc, #172]	; (80a26a4 <loop+0x120>)
 80a25f6:	f7ff fe03 	bl	80a2200 <_Z11sample_freqP10audio_bins>
                matrix->tick(&bins, server.visualizer());
 80a25fa:	4b2f      	ldr	r3, [pc, #188]	; (80a26b8 <loop+0x134>)
 80a25fc:	482c      	ldr	r0, [pc, #176]	; (80a26b0 <loop+0x12c>)
 80a25fe:	681c      	ldr	r4, [r3, #0]
 80a2600:	f001 fb1e 	bl	80a3c40 <_ZN6Server10visualizerEv>
 80a2604:	4927      	ldr	r1, [pc, #156]	; (80a26a4 <loop+0x120>)
 80a2606:	4602      	mov	r2, r0
 80a2608:	4620      	mov	r0, r4
 80a260a:	f7ff fb75 	bl	80a1cf8 <_ZN10Bar_Matrix4tickEP10audio_binsi>
                frame_count++;
 80a260e:	4a2b      	ldr	r2, [pc, #172]	; (80a26bc <loop+0x138>)
 80a2610:	6813      	ldr	r3, [r2, #0]
 80a2612:	3301      	adds	r3, #1
 80a2614:	6013      	str	r3, [r2, #0]
 80a2616:	f002 fe03 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - last_mdns_update > MDNS_UPDATE_INTERVAL ||
 80a261a:	4c29      	ldr	r4, [pc, #164]	; (80a26c0 <loop+0x13c>)
 80a261c:	6823      	ldr	r3, [r4, #0]
 80a261e:	1ac0      	subs	r0, r0, r3
 80a2620:	2830      	cmp	r0, #48	; 0x30
 80a2622:	d934      	bls.n	80a268e <loop+0x10a>
 80a2624:	f002 fdfc 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
            last_mdns_update = millis();
 80a2628:	6020      	str	r0, [r4, #0]
            mdns.processQueries();
 80a262a:	4826      	ldr	r0, [pc, #152]	; (80a26c4 <loop+0x140>)
 80a262c:	f002 f8e4 	bl	80a47f8 <_ZN4MDNS14processQueriesEv>
 80a2630:	f002 fdf6 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - last_server_update > SERVER_UPDATE_INTERVAL ||
 80a2634:	4c24      	ldr	r4, [pc, #144]	; (80a26c8 <loop+0x144>)
 80a2636:	6823      	ldr	r3, [r4, #0]
 80a2638:	1ac0      	subs	r0, r0, r3
 80a263a:	2830      	cmp	r0, #48	; 0x30
 80a263c:	d82a      	bhi.n	80a2694 <loop+0x110>
 80a263e:	f002 fdef 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
    tick_count++;
 80a2642:	4c22      	ldr	r4, [pc, #136]	; (80a26cc <loop+0x148>)
    if (millis() - last_tick_update >= 10000) {
 80a2644:	4d22      	ldr	r5, [pc, #136]	; (80a26d0 <loop+0x14c>)
    tick_count++;
 80a2646:	6823      	ldr	r3, [r4, #0]
 80a2648:	3301      	adds	r3, #1
 80a264a:	6023      	str	r3, [r4, #0]
 80a264c:	f002 fde8 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - last_tick_update >= 10000) {
 80a2650:	682b      	ldr	r3, [r5, #0]
 80a2652:	1ac0      	subs	r0, r0, r3
 80a2654:	f242 730f 	movw	r3, #9999	; 0x270f
 80a2658:	4298      	cmp	r0, r3
 80a265a:	d90c      	bls.n	80a2676 <loop+0xf2>
 80a265c:	f002 fde0 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
        tick_count_publish = tick_count;
 80a2660:	6822      	ldr	r2, [r4, #0]
 80a2662:	4b1c      	ldr	r3, [pc, #112]	; (80a26d4 <loop+0x150>)
        last_tick_update = millis();
 80a2664:	6028      	str	r0, [r5, #0]
        tick_count_publish = tick_count;
 80a2666:	601a      	str	r2, [r3, #0]
        frame_count_publish = frame_count;
 80a2668:	4b14      	ldr	r3, [pc, #80]	; (80a26bc <loop+0x138>)
 80a266a:	4a1b      	ldr	r2, [pc, #108]	; (80a26d8 <loop+0x154>)
 80a266c:	6819      	ldr	r1, [r3, #0]
 80a266e:	6011      	str	r1, [r2, #0]
        tick_count = 0;
 80a2670:	2200      	movs	r2, #0
 80a2672:	6022      	str	r2, [r4, #0]
        frame_count = 0;
 80a2674:	601a      	str	r2, [r3, #0]
    delay(1);
 80a2676:	2001      	movs	r0, #1
}
 80a2678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(1);
 80a267c:	f003 b87e 	b.w	80a577c <delay>
        for (int i = 0; i < NUM_BINS; i++) {
 80a2680:	3201      	adds	r2, #1
 80a2682:	2a07      	cmp	r2, #7
 80a2684:	d185      	bne.n	80a2592 <loop+0xe>
 80a2686:	e795      	b.n	80a25b4 <loop+0x30>
            psu_shutdown();
 80a2688:	f7ff ff66 	bl	80a2558 <_Z12psu_shutdownv>
 80a268c:	e7c3      	b.n	80a2616 <loop+0x92>
 80a268e:	f002 fdc7 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
 80a2692:	e7cd      	b.n	80a2630 <loop+0xac>
 80a2694:	f002 fdc4 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
            last_server_update = millis();
 80a2698:	6020      	str	r0, [r4, #0]
            server.tick();
 80a269a:	4805      	ldr	r0, [pc, #20]	; (80a26b0 <loop+0x12c>)
 80a269c:	f001 fabe 	bl	80a3c1c <_ZN6Server4tickEv>
 80a26a0:	e7cf      	b.n	80a2642 <loop+0xbe>
 80a26a2:	bf00      	nop
 80a26a4:	20000094 	.word	0x20000094
 80a26a8:	200000d1 	.word	0x200000d1
 80a26ac:	20000090 	.word	0x20000090
 80a26b0:	20000ed4 	.word	0x20000ed4
 80a26b4:	20000e70 	.word	0x20000e70
 80a26b8:	200000cc 	.word	0x200000cc
 80a26bc:	20000e68 	.word	0x20000e68
 80a26c0:	20000e74 	.word	0x20000e74
 80a26c4:	20000e84 	.word	0x20000e84
 80a26c8:	20000e7c 	.word	0x20000e7c
 80a26cc:	20000ef4 	.word	0x20000ef4
 80a26d0:	20000e80 	.word	0x20000e80
 80a26d4:	20000ef8 	.word	0x20000ef8
 80a26d8:	20000e6c 	.word	0x20000e6c

080a26dc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80a26dc:	b570      	push	{r4, r5, r6, lr}
 80a26de:	4605      	mov	r5, r0
 80a26e0:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 80a26e2:	b16c      	cbz	r4, 80a2700 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x24>
	{
	  _M_erase(_S_right(__x));
 80a26e4:	68e1      	ldr	r1, [r4, #12]
 80a26e6:	4628      	mov	r0, r5
 80a26e8:	f7ff fff8 	bl	80a26dc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 80a26ec:	68a6      	ldr	r6, [r4, #8]
   *
   *  @tparam _T1  Type of first object.
   *  @tparam _T2  Type of second object.
   */
  template<typename _T1, typename _T2>
    struct pair
 80a26ee:	f104 0010 	add.w	r0, r4, #16
 80a26f2:	f003 fccc 	bl	80a608e <_ZN6StringD1Ev>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a26f6:	4620      	mov	r0, r4
 80a26f8:	f7fd fcd3 	bl	80a00a2 <_ZdlPv>
	  _M_drop_node(__x);
	  __x = __y;
 80a26fc:	4634      	mov	r4, r6
      }
 80a26fe:	e7f0      	b.n	80a26e2 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x6>
	}
    }
 80a2700:	bd70      	pop	{r4, r5, r6, pc}

080a2702 <_ZN4MDNSD1Ev>:
 80a2702:	b510      	push	{r4, lr}
 80a2704:	4604      	mov	r4, r0
 80a2706:	3040      	adds	r0, #64	; 0x40
 80a2708:	f003 fcc1 	bl	80a608e <_ZN6StringD1Ev>
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
 80a270c:	6b60      	ldr	r0, [r4, #52]	; 0x34

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 80a270e:	b108      	cbz	r0, 80a2714 <_ZN4MDNSD1Ev+0x12>
 80a2710:	f7fd fcc7 	bl	80a00a2 <_ZdlPv>
      { _M_erase(_M_begin()); }
 80a2714:	f104 001c 	add.w	r0, r4, #28
 80a2718:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80a271a:	f7ff ffdf 	bl	80a26dc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 80a271e:	4620      	mov	r0, r4
 80a2720:	bd10      	pop	{r4, pc}
	...

080a2724 <_GLOBAL__sub_I_SystemMode>:
        val_(val) {
 80a2724:	2001      	movs	r0, #1
}
 80a2726:	b538      	push	{r3, r4, r5, lr}
 80a2728:	4b11      	ldr	r3, [pc, #68]	; (80a2770 <_GLOBAL__sub_I_SystemMode+0x4c>)
              error_(SYSTEM_ERROR_NONE) {
 80a272a:	4c12      	ldr	r4, [pc, #72]	; (80a2774 <_GLOBAL__sub_I_SystemMode+0x50>)
 80a272c:	7018      	strb	r0, [r3, #0]
 80a272e:	2300      	movs	r3, #0
SYSTEM_MODE(AUTOMATIC);
 80a2730:	4d11      	ldr	r5, [pc, #68]	; (80a2778 <_GLOBAL__sub_I_SystemMode+0x54>)
 80a2732:	6023      	str	r3, [r4, #0]
 80a2734:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
 80a2736:	71a3      	strb	r3, [r4, #6]
 80a2738:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80a273c:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a273e:	f002 ff09 	bl	80a5554 <set_system_mode>
 80a2742:	462a      	mov	r2, r5
 80a2744:	490d      	ldr	r1, [pc, #52]	; (80a277c <_GLOBAL__sub_I_SystemMode+0x58>)
 80a2746:	4620      	mov	r0, r4
 80a2748:	f004 ffe6 	bl	80a7718 <__aeabi_atexit>
MDNS mdns;
 80a274c:	4c0c      	ldr	r4, [pc, #48]	; (80a2780 <_GLOBAL__sub_I_SystemMode+0x5c>)
Beat_Detection beat_detect;
 80a274e:	480d      	ldr	r0, [pc, #52]	; (80a2784 <_GLOBAL__sub_I_SystemMode+0x60>)
 80a2750:	f7ff fb60 	bl	80a1e14 <_ZN14Beat_DetectionC1Ev>
Server server;
 80a2754:	480c      	ldr	r0, [pc, #48]	; (80a2788 <_GLOBAL__sub_I_SystemMode+0x64>)
 80a2756:	f001 fa1d 	bl	80a3b94 <_ZN6ServerC1Ev>
MDNS mdns;
 80a275a:	4620      	mov	r0, r4
 80a275c:	f7ff fcd8 	bl	80a2110 <_ZN4MDNSC1Ev>
 80a2760:	462a      	mov	r2, r5
 80a2762:	4620      	mov	r0, r4
}
 80a2764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
MDNS mdns;
 80a2768:	4908      	ldr	r1, [pc, #32]	; (80a278c <_GLOBAL__sub_I_SystemMode+0x68>)
 80a276a:	f004 bfd5 	b.w	80a7718 <__aeabi_atexit>
 80a276e:	bf00      	nop
 80a2770:	200000d0 	.word	0x200000d0
 80a2774:	20000084 	.word	0x20000084
 80a2778:	2000006c 	.word	0x2000006c
 80a277c:	080a20ff 	.word	0x080a20ff
 80a2780:	20000e84 	.word	0x20000e84
 80a2784:	200000d4 	.word	0x200000d4
 80a2788:	20000ed4 	.word	0x20000ed4
 80a278c:	080a2703 	.word	0x080a2703

080a2790 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Core or Photon ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) : 
 80a2790:	b538      	push	{r3, r4, r5, lr}
 80a2792:	4604      	mov	r4, r0
  numLEDs(n), numBytes(n*3), pin(p), brightness(0), pixels(NULL), type(t), endTime(0)
 80a2794:	2500      	movs	r5, #0
 80a2796:	8001      	strh	r1, [r0, #0]
 80a2798:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a279c:	b288      	uxth	r0, r1
 80a279e:	e9c4 5502 	strd	r5, r5, [r4, #8]
 80a27a2:	8060      	strh	r0, [r4, #2]
 80a27a4:	7123      	strb	r3, [r4, #4]
 80a27a6:	7162      	strb	r2, [r4, #5]
 80a27a8:	71a5      	strb	r5, [r4, #6]
{
  if((pixels = (uint8_t *)malloc(numBytes))) {
 80a27aa:	f002 ffa7 	bl	80a56fc <malloc>
 80a27ae:	60a0      	str	r0, [r4, #8]
 80a27b0:	b118      	cbz	r0, 80a27ba <_ZN17Adafruit_NeoPixelC1Ethh+0x2a>
    memset(pixels, 0, numBytes);
 80a27b2:	4629      	mov	r1, r5
 80a27b4:	8862      	ldrh	r2, [r4, #2]
 80a27b6:	f009 fdb7 	bl	80ac328 <memset>
  }
}
 80a27ba:	4620      	mov	r0, r4
 80a27bc:	bd38      	pop	{r3, r4, r5, pc}

080a27be <_ZN17Adafruit_NeoPixel5beginEv>:
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if(pixels) free(pixels);
  pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::begin(void) {
 80a27be:	b510      	push	{r4, lr}
 80a27c0:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a27c2:	2101      	movs	r1, #1
 80a27c4:	7940      	ldrb	r0, [r0, #5]
 80a27c6:	f004 ff0d 	bl	80a75e4 <pinMode>
  digitalWrite(pin, LOW);
 80a27ca:	7960      	ldrb	r0, [r4, #5]
 80a27cc:	2100      	movs	r1, #0
}
 80a27ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(pin, LOW);
 80a27d2:	f004 bf18 	b.w	80a7606 <digitalWrite>
	...

080a27d8 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a27d8:	6883      	ldr	r3, [r0, #8]
 80a27da:	2b00      	cmp	r3, #0
 80a27dc:	f000 856f 	beq.w	80a32be <_ZN17Adafruit_NeoPixel4showEv+0xae6>
void Adafruit_NeoPixel::show(void) {
 80a27e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a27e2:	7903      	ldrb	r3, [r0, #4]
 80a27e4:	4604      	mov	r4, r0
 80a27e6:	2b03      	cmp	r3, #3
void Adafruit_NeoPixel::show(void) {
 80a27e8:	b087      	sub	sp, #28
  switch(type) {
 80a27ea:	f000 8287 	beq.w	80a2cfc <_ZN17Adafruit_NeoPixel4showEv+0x524>
 80a27ee:	2b04      	cmp	r3, #4
 80a27f0:	bf14      	ite	ne
 80a27f2:	2532      	movne	r5, #50	; 0x32
 80a27f4:	f44f 75fa 	moveq.w	r5, #500	; 0x1f4
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a27f8:	f002 fd0a 	bl	80a5210 <HAL_Timer_Get_Micro_Seconds>
    case WS2811: // WS2811 = 50us reset pulse
    default:     // default = 50us reset pulse
      wait_time = 50L;
      break;
  }
  while((micros() - endTime) < wait_time);
 80a27fc:	68e3      	ldr	r3, [r4, #12]
 80a27fe:	1ac0      	subs	r0, r0, r3
 80a2800:	42a8      	cmp	r0, r5
 80a2802:	d3f9      	bcc.n	80a27f8 <_ZN17Adafruit_NeoPixel4showEv+0x20>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a2804:	b672      	cpsid	i
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit pixel color
    mask; // 8-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a2806:	8863      	ldrh	r3, [r4, #2]
   *ptr = pixels,   // Pointer to next byte
    g,              // Current green byte value
    r,              // Current red byte value
    b;              // Current blue byte value

  if(type == WS2812B) { // same as WS2812, 800 KHz bitstream
 80a2808:	7921      	ldrb	r1, [r4, #4]
  volatile uint16_t i = numBytes; // Output loop counter
 80a280a:	f8ad 300a 	strh.w	r3, [sp, #10]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a280e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  if(type == WS2812B) { // same as WS2812, 800 KHz bitstream
 80a2812:	2902      	cmp	r1, #2
   *ptr = pixels,   // Pointer to next byte
 80a2814:	68a5      	ldr	r5, [r4, #8]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2816:	b29b      	uxth	r3, r3
  if(type == WS2812B) { // same as WS2812, 800 KHz bitstream
 80a2818:	f000 813a 	beq.w	80a2a90 <_ZN17Adafruit_NeoPixel4showEv+0x2b8>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2) { // WS2812B with DWT timer
 80a281c:	2905      	cmp	r1, #5
 80a281e:	f000 826f 	beq.w	80a2d00 <_ZN17Adafruit_NeoPixel4showEv+0x528>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a2822:	2900      	cmp	r1, #0
 80a2824:	f000 82e5 	beq.w	80a2df2 <_ZN17Adafruit_NeoPixel4showEv+0x61a>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a2828:	2903      	cmp	r1, #3
 80a282a:	f000 8549 	beq.w	80a32c0 <_ZN17Adafruit_NeoPixel4showEv+0xae8>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a282e:	2b00      	cmp	r3, #0
 80a2830:	f000 8128 	beq.w	80a2a84 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a2834:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a2838:	2600      	movs	r6, #0
 80a283a:	4a18      	ldr	r2, [pc, #96]	; (80a289c <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
      mask = 0x800000; // reset the mask
 80a283c:	9104      	str	r1, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a283e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      pinSet(pin, LOW); // LOW
 80a2842:	7960      	ldrb	r0, [r4, #5]
      i = i-3;      // decrement bytes remaining
 80a2844:	3b03      	subs	r3, #3
 80a2846:	b29b      	uxth	r3, r3
 80a2848:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a284c:	782b      	ldrb	r3, [r5, #0]
      pinSet(pin, LOW); // LOW
 80a284e:	6817      	ldr	r7, [r2, #0]
      r = *ptr++;   // Next red byte value
 80a2850:	b2db      	uxtb	r3, r3
 80a2852:	f88d 3008 	strb.w	r3, [sp, #8]
      b = *ptr++;   // Next blue byte value
 80a2856:	786b      	ldrb	r3, [r5, #1]
      pinSet(pin, LOW); // LOW
 80a2858:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
      b = *ptr++;   // Next blue byte value
 80a285c:	b2db      	uxtb	r3, r3
 80a285e:	f88d 3009 	strb.w	r3, [sp, #9]
      g = *ptr++;   // Next green byte value
 80a2862:	78ab      	ldrb	r3, [r5, #2]
      pinSet(pin, LOW); // LOW
 80a2864:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
      g = *ptr++;   // Next green byte value
 80a2868:	b2db      	uxtb	r3, r3
 80a286a:	f88d 3007 	strb.w	r3, [sp, #7]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a286e:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a2872:	f89d 3009 	ldrb.w	r3, [sp, #9]
      pinSet(pin, LOW); // LOW
 80a2876:	f8bc c004 	ldrh.w	ip, [ip, #4]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a287a:	021b      	lsls	r3, r3, #8
 80a287c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80a2880:	f89d e007 	ldrb.w	lr, [sp, #7]
      pinSet(pin, LOW); // LOW
 80a2884:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a2888:	ea43 030e 	orr.w	r3, r3, lr
 80a288c:	9303      	str	r3, [sp, #12]
      g = *ptr++;   // Next green byte value
 80a288e:	3503      	adds	r5, #3
      j = 0;        // reset the 24-bit counter
 80a2890:	f88d 6006 	strb.w	r6, [sp, #6]
      pinSet(pin, LOW); // LOW
 80a2894:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a2898:	e07d      	b.n	80a2996 <_ZN17Adafruit_NeoPixel4showEv+0x1be>
 80a289a:	bf00      	nop
 80a289c:	20000efc 	.word	0x20000efc
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a28a0:	9b04      	ldr	r3, [sp, #16]
 80a28a2:	085b      	lsrs	r3, r3, #1
 80a28a4:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a28a6:	4600      	mov	r0, r0
 80a28a8:	bf00      	nop
 80a28aa:	bf00      	nop
 80a28ac:	bf00      	nop
 80a28ae:	bf00      	nop
 80a28b0:	bf00      	nop
 80a28b2:	bf00      	nop
 80a28b4:	bf00      	nop
 80a28b6:	bf00      	nop
 80a28b8:	bf00      	nop
 80a28ba:	bf00      	nop
 80a28bc:	bf00      	nop
 80a28be:	bf00      	nop
 80a28c0:	bf00      	nop
 80a28c2:	bf00      	nop
 80a28c4:	bf00      	nop
 80a28c6:	bf00      	nop
 80a28c8:	bf00      	nop
 80a28ca:	bf00      	nop
 80a28cc:	bf00      	nop
 80a28ce:	bf00      	nop
 80a28d0:	bf00      	nop
 80a28d2:	bf00      	nop
 80a28d4:	bf00      	nop
 80a28d6:	bf00      	nop
 80a28d8:	bf00      	nop
 80a28da:	bf00      	nop
 80a28dc:	bf00      	nop
 80a28de:	bf00      	nop
 80a28e0:	bf00      	nop
 80a28e2:	bf00      	nop
 80a28e4:	bf00      	nop
 80a28e6:	bf00      	nop
 80a28e8:	bf00      	nop
 80a28ea:	bf00      	nop
 80a28ec:	bf00      	nop
 80a28ee:	bf00      	nop
 80a28f0:	bf00      	nop
 80a28f2:	bf00      	nop
 80a28f4:	bf00      	nop
 80a28f6:	bf00      	nop
 80a28f8:	bf00      	nop
 80a28fa:	bf00      	nop
 80a28fc:	bf00      	nop
 80a28fe:	bf00      	nop
 80a2900:	bf00      	nop
 80a2902:	bf00      	nop
 80a2904:	bf00      	nop
 80a2906:	bf00      	nop
 80a2908:	bf00      	nop
 80a290a:	bf00      	nop
 80a290c:	bf00      	nop
 80a290e:	bf00      	nop
 80a2910:	bf00      	nop
 80a2912:	bf00      	nop
 80a2914:	bf00      	nop
 80a2916:	bf00      	nop
 80a2918:	bf00      	nop
 80a291a:	bf00      	nop
 80a291c:	bf00      	nop
 80a291e:	bf00      	nop
 80a2920:	bf00      	nop
 80a2922:	bf00      	nop
 80a2924:	bf00      	nop
 80a2926:	bf00      	nop
 80a2928:	bf00      	nop
 80a292a:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a292c:	7960      	ldrb	r0, [r4, #5]
 80a292e:	6817      	ldr	r7, [r2, #0]
          j++;
 80a2930:	f89d 3006 	ldrb.w	r3, [sp, #6]
          pinSet(pin, HIGH); // HIGH
 80a2934:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a2938:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
 80a293c:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a2940:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
          j++;
 80a2944:	3301      	adds	r3, #1
 80a2946:	b2db      	uxtb	r3, r3
 80a2948:	f88d 3006 	strb.w	r3, [sp, #6]
          pinSet(pin, HIGH); // HIGH
 80a294c:	f8a0 c018 	strh.w	ip, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a2950:	4600      	mov	r0, r0
 80a2952:	bf00      	nop
 80a2954:	bf00      	nop
 80a2956:	bf00      	nop
 80a2958:	bf00      	nop
 80a295a:	bf00      	nop
 80a295c:	bf00      	nop
 80a295e:	bf00      	nop
 80a2960:	bf00      	nop
 80a2962:	bf00      	nop
 80a2964:	bf00      	nop
 80a2966:	bf00      	nop
 80a2968:	bf00      	nop
 80a296a:	bf00      	nop
 80a296c:	bf00      	nop
 80a296e:	bf00      	nop
 80a2970:	bf00      	nop
 80a2972:	bf00      	nop
 80a2974:	bf00      	nop
 80a2976:	bf00      	nop
 80a2978:	bf00      	nop
          if(j==24) break;
 80a297a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a297e:	2b18      	cmp	r3, #24
 80a2980:	d07a      	beq.n	80a2a78 <_ZN17Adafruit_NeoPixel4showEv+0x2a0>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a2982:	7963      	ldrb	r3, [r4, #5]
 80a2984:	6810      	ldr	r0, [r2, #0]
 80a2986:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a298a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a298e:	88bf      	ldrh	r7, [r7, #4]
 80a2990:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2994:	835f      	strh	r7, [r3, #26]
        if (c & mask) { // if masked bit is high
 80a2996:	9803      	ldr	r0, [sp, #12]
 80a2998:	9b04      	ldr	r3, [sp, #16]
 80a299a:	4218      	tst	r0, r3
 80a299c:	d180      	bne.n	80a28a0 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            ::: "r0", "cc", "memory");
 80a299e:	4600      	mov	r0, r0
 80a29a0:	bf00      	nop
 80a29a2:	bf00      	nop
 80a29a4:	bf00      	nop
 80a29a6:	bf00      	nop
 80a29a8:	bf00      	nop
 80a29aa:	bf00      	nop
 80a29ac:	bf00      	nop
 80a29ae:	bf00      	nop
 80a29b0:	bf00      	nop
 80a29b2:	bf00      	nop
 80a29b4:	bf00      	nop
 80a29b6:	bf00      	nop
 80a29b8:	bf00      	nop
 80a29ba:	bf00      	nop
 80a29bc:	bf00      	nop
 80a29be:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a29c0:	7963      	ldrb	r3, [r4, #5]
 80a29c2:	6810      	ldr	r0, [r2, #0]
 80a29c4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a29c8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a29cc:	88bf      	ldrh	r7, [r7, #4]
 80a29ce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a29d2:	831f      	strh	r7, [r3, #24]
          j++;
 80a29d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a29d8:	3301      	adds	r3, #1
 80a29da:	b2db      	uxtb	r3, r3
 80a29dc:	f88d 3006 	strb.w	r3, [sp, #6]
          mask >>= 1; // Do this task during the long delay of this bit
 80a29e0:	9b04      	ldr	r3, [sp, #16]
 80a29e2:	085b      	lsrs	r3, r3, #1
 80a29e4:	9304      	str	r3, [sp, #16]
            ::: "r0", "cc", "memory");
 80a29e6:	4600      	mov	r0, r0
 80a29e8:	bf00      	nop
 80a29ea:	bf00      	nop
 80a29ec:	bf00      	nop
 80a29ee:	bf00      	nop
 80a29f0:	bf00      	nop
 80a29f2:	bf00      	nop
 80a29f4:	bf00      	nop
 80a29f6:	bf00      	nop
 80a29f8:	bf00      	nop
 80a29fa:	bf00      	nop
 80a29fc:	bf00      	nop
 80a29fe:	bf00      	nop
 80a2a00:	bf00      	nop
 80a2a02:	bf00      	nop
 80a2a04:	bf00      	nop
 80a2a06:	bf00      	nop
 80a2a08:	bf00      	nop
 80a2a0a:	bf00      	nop
 80a2a0c:	bf00      	nop
 80a2a0e:	bf00      	nop
 80a2a10:	bf00      	nop
 80a2a12:	bf00      	nop
 80a2a14:	bf00      	nop
 80a2a16:	bf00      	nop
 80a2a18:	bf00      	nop
 80a2a1a:	bf00      	nop
 80a2a1c:	bf00      	nop
 80a2a1e:	bf00      	nop
 80a2a20:	bf00      	nop
 80a2a22:	bf00      	nop
 80a2a24:	bf00      	nop
 80a2a26:	bf00      	nop
 80a2a28:	bf00      	nop
 80a2a2a:	bf00      	nop
 80a2a2c:	bf00      	nop
 80a2a2e:	bf00      	nop
 80a2a30:	bf00      	nop
 80a2a32:	bf00      	nop
 80a2a34:	bf00      	nop
 80a2a36:	bf00      	nop
 80a2a38:	bf00      	nop
 80a2a3a:	bf00      	nop
 80a2a3c:	bf00      	nop
 80a2a3e:	bf00      	nop
 80a2a40:	bf00      	nop
 80a2a42:	bf00      	nop
 80a2a44:	bf00      	nop
 80a2a46:	bf00      	nop
 80a2a48:	bf00      	nop
 80a2a4a:	bf00      	nop
 80a2a4c:	bf00      	nop
 80a2a4e:	bf00      	nop
 80a2a50:	bf00      	nop
 80a2a52:	bf00      	nop
 80a2a54:	bf00      	nop
 80a2a56:	bf00      	nop
 80a2a58:	bf00      	nop
 80a2a5a:	bf00      	nop
 80a2a5c:	bf00      	nop
 80a2a5e:	bf00      	nop
 80a2a60:	bf00      	nop
 80a2a62:	bf00      	nop
 80a2a64:	bf00      	nop
 80a2a66:	bf00      	nop
 80a2a68:	bf00      	nop
 80a2a6a:	bf00      	nop
 80a2a6c:	bf00      	nop
 80a2a6e:	bf00      	nop
          if(j==24) break;
 80a2a70:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a2a74:	2b18      	cmp	r3, #24
 80a2a76:	d184      	bne.n	80a2982 <_ZN17Adafruit_NeoPixel4showEv+0x1aa>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2a78:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a2a7c:	b29b      	uxth	r3, r3
 80a2a7e:	2b00      	cmp	r3, #0
 80a2a80:	f47f aedc 	bne.w	80a283c <_ZN17Adafruit_NeoPixel4showEv+0x64>
  __ASM volatile ("cpsie i");
 80a2a84:	b662      	cpsie	i
 80a2a86:	f002 fbc3 	bl	80a5210 <HAL_Timer_Get_Micro_Seconds>
      }
    } // end while(i) ... no more pixels
  }

  __enable_irq();
  endTime = micros(); // Save EOD time for latch on next call
 80a2a8a:	60e0      	str	r0, [r4, #12]
}
 80a2a8c:	b007      	add	sp, #28
 80a2a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2a90:	2b00      	cmp	r3, #0
 80a2a92:	d0f7      	beq.n	80a2a84 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a2a94:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a2a98:	2600      	movs	r6, #0
 80a2a9a:	4a13      	ldr	r2, [pc, #76]	; (80a2ae8 <_ZN17Adafruit_NeoPixel4showEv+0x310>)
      mask = 0x800000; // reset the mask
 80a2a9c:	9104      	str	r1, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a2a9e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a2aa2:	3503      	adds	r5, #3
      i = i-3;      // decrement bytes remaining
 80a2aa4:	3b03      	subs	r3, #3
 80a2aa6:	b29b      	uxth	r3, r3
 80a2aa8:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a2aac:	f815 3c03 	ldrb.w	r3, [r5, #-3]
 80a2ab0:	b2db      	uxtb	r3, r3
 80a2ab2:	f88d 3007 	strb.w	r3, [sp, #7]
      r = *ptr++;   // Next red byte value
 80a2ab6:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 80a2aba:	b2db      	uxtb	r3, r3
 80a2abc:	f88d 3008 	strb.w	r3, [sp, #8]
      b = *ptr++;   // Next blue byte value
 80a2ac0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80a2ac4:	b2db      	uxtb	r3, r3
 80a2ac6:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a2aca:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a2ace:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80a2ad2:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a2ad6:	021b      	lsls	r3, r3, #8
 80a2ad8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a2adc:	4303      	orrs	r3, r0
 80a2ade:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a2ae0:	f88d 6006 	strb.w	r6, [sp, #6]
 80a2ae4:	e080      	b.n	80a2be8 <_ZN17Adafruit_NeoPixel4showEv+0x410>
 80a2ae6:	bf00      	nop
 80a2ae8:	20000efc 	.word	0x20000efc
            ::: "r0", "cc", "memory");
 80a2aec:	4600      	mov	r0, r0
 80a2aee:	bf00      	nop
 80a2af0:	bf00      	nop
 80a2af2:	bf00      	nop
 80a2af4:	bf00      	nop
 80a2af6:	bf00      	nop
 80a2af8:	bf00      	nop
 80a2afa:	bf00      	nop
 80a2afc:	bf00      	nop
 80a2afe:	bf00      	nop
 80a2b00:	bf00      	nop
 80a2b02:	bf00      	nop
 80a2b04:	bf00      	nop
 80a2b06:	bf00      	nop
 80a2b08:	bf00      	nop
 80a2b0a:	bf00      	nop
 80a2b0c:	bf00      	nop
 80a2b0e:	bf00      	nop
 80a2b10:	bf00      	nop
 80a2b12:	bf00      	nop
 80a2b14:	bf00      	nop
 80a2b16:	bf00      	nop
 80a2b18:	bf00      	nop
 80a2b1a:	bf00      	nop
 80a2b1c:	bf00      	nop
 80a2b1e:	bf00      	nop
 80a2b20:	bf00      	nop
 80a2b22:	bf00      	nop
 80a2b24:	bf00      	nop
 80a2b26:	bf00      	nop
 80a2b28:	bf00      	nop
 80a2b2a:	bf00      	nop
 80a2b2c:	bf00      	nop
 80a2b2e:	bf00      	nop
 80a2b30:	bf00      	nop
 80a2b32:	bf00      	nop
 80a2b34:	bf00      	nop
 80a2b36:	bf00      	nop
 80a2b38:	bf00      	nop
 80a2b3a:	bf00      	nop
 80a2b3c:	bf00      	nop
 80a2b3e:	bf00      	nop
 80a2b40:	bf00      	nop
 80a2b42:	bf00      	nop
 80a2b44:	bf00      	nop
 80a2b46:	bf00      	nop
 80a2b48:	bf00      	nop
 80a2b4a:	bf00      	nop
 80a2b4c:	bf00      	nop
 80a2b4e:	bf00      	nop
 80a2b50:	bf00      	nop
 80a2b52:	bf00      	nop
 80a2b54:	bf00      	nop
 80a2b56:	bf00      	nop
 80a2b58:	bf00      	nop
 80a2b5a:	bf00      	nop
 80a2b5c:	bf00      	nop
 80a2b5e:	bf00      	nop
 80a2b60:	bf00      	nop
 80a2b62:	bf00      	nop
 80a2b64:	bf00      	nop
 80a2b66:	bf00      	nop
 80a2b68:	bf00      	nop
 80a2b6a:	bf00      	nop
 80a2b6c:	bf00      	nop
 80a2b6e:	bf00      	nop
 80a2b70:	bf00      	nop
 80a2b72:	bf00      	nop
 80a2b74:	bf00      	nop
 80a2b76:	bf00      	nop
 80a2b78:	bf00      	nop
 80a2b7a:	bf00      	nop
 80a2b7c:	bf00      	nop
 80a2b7e:	bf00      	nop
 80a2b80:	bf00      	nop
 80a2b82:	bf00      	nop
 80a2b84:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a2b86:	7963      	ldrb	r3, [r4, #5]
 80a2b88:	6810      	ldr	r0, [r2, #0]
 80a2b8a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2b8e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2b92:	88bf      	ldrh	r7, [r7, #4]
 80a2b94:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2b98:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a2b9a:	4600      	mov	r0, r0
 80a2b9c:	bf00      	nop
 80a2b9e:	bf00      	nop
 80a2ba0:	bf00      	nop
 80a2ba2:	bf00      	nop
 80a2ba4:	bf00      	nop
 80a2ba6:	bf00      	nop
 80a2ba8:	bf00      	nop
 80a2baa:	bf00      	nop
 80a2bac:	bf00      	nop
 80a2bae:	bf00      	nop
 80a2bb0:	bf00      	nop
 80a2bb2:	bf00      	nop
 80a2bb4:	bf00      	nop
 80a2bb6:	bf00      	nop
 80a2bb8:	bf00      	nop
 80a2bba:	bf00      	nop
 80a2bbc:	bf00      	nop
 80a2bbe:	bf00      	nop
 80a2bc0:	bf00      	nop
 80a2bc2:	bf00      	nop
 80a2bc4:	bf00      	nop
 80a2bc6:	bf00      	nop
 80a2bc8:	bf00      	nop
 80a2bca:	bf00      	nop
 80a2bcc:	bf00      	nop
 80a2bce:	bf00      	nop
        mask >>= 1;
 80a2bd0:	9b04      	ldr	r3, [sp, #16]
 80a2bd2:	085b      	lsrs	r3, r3, #1
 80a2bd4:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a2bd6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a2bda:	3301      	adds	r3, #1
 80a2bdc:	b2db      	uxtb	r3, r3
 80a2bde:	2b17      	cmp	r3, #23
 80a2be0:	f88d 3006 	strb.w	r3, [sp, #6]
 80a2be4:	f200 8083 	bhi.w	80a2cee <_ZN17Adafruit_NeoPixel4showEv+0x516>
        pinSet(pin, HIGH); // HIGH
 80a2be8:	7963      	ldrb	r3, [r4, #5]
 80a2bea:	6810      	ldr	r0, [r2, #0]
 80a2bec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2bf0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2bf4:	88bf      	ldrh	r7, [r7, #4]
 80a2bf6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2bfa:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a2bfc:	9803      	ldr	r0, [sp, #12]
 80a2bfe:	9b04      	ldr	r3, [sp, #16]
 80a2c00:	4218      	tst	r0, r3
 80a2c02:	f47f af73 	bne.w	80a2aec <_ZN17Adafruit_NeoPixel4showEv+0x314>
            ::: "r0", "cc", "memory");
 80a2c06:	4600      	mov	r0, r0
 80a2c08:	bf00      	nop
 80a2c0a:	bf00      	nop
 80a2c0c:	bf00      	nop
 80a2c0e:	bf00      	nop
 80a2c10:	bf00      	nop
 80a2c12:	bf00      	nop
 80a2c14:	bf00      	nop
 80a2c16:	bf00      	nop
 80a2c18:	bf00      	nop
 80a2c1a:	bf00      	nop
 80a2c1c:	bf00      	nop
 80a2c1e:	bf00      	nop
 80a2c20:	bf00      	nop
 80a2c22:	bf00      	nop
 80a2c24:	bf00      	nop
 80a2c26:	bf00      	nop
 80a2c28:	bf00      	nop
 80a2c2a:	bf00      	nop
 80a2c2c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a2c2e:	7963      	ldrb	r3, [r4, #5]
 80a2c30:	6810      	ldr	r0, [r2, #0]
 80a2c32:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2c36:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2c3a:	88bf      	ldrh	r7, [r7, #4]
 80a2c3c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2c40:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a2c42:	4600      	mov	r0, r0
 80a2c44:	bf00      	nop
 80a2c46:	bf00      	nop
 80a2c48:	bf00      	nop
 80a2c4a:	bf00      	nop
 80a2c4c:	bf00      	nop
 80a2c4e:	bf00      	nop
 80a2c50:	bf00      	nop
 80a2c52:	bf00      	nop
 80a2c54:	bf00      	nop
 80a2c56:	bf00      	nop
 80a2c58:	bf00      	nop
 80a2c5a:	bf00      	nop
 80a2c5c:	bf00      	nop
 80a2c5e:	bf00      	nop
 80a2c60:	bf00      	nop
 80a2c62:	bf00      	nop
 80a2c64:	bf00      	nop
 80a2c66:	bf00      	nop
 80a2c68:	bf00      	nop
 80a2c6a:	bf00      	nop
 80a2c6c:	bf00      	nop
 80a2c6e:	bf00      	nop
 80a2c70:	bf00      	nop
 80a2c72:	bf00      	nop
 80a2c74:	bf00      	nop
 80a2c76:	bf00      	nop
 80a2c78:	bf00      	nop
 80a2c7a:	bf00      	nop
 80a2c7c:	bf00      	nop
 80a2c7e:	bf00      	nop
 80a2c80:	bf00      	nop
 80a2c82:	bf00      	nop
 80a2c84:	bf00      	nop
 80a2c86:	bf00      	nop
 80a2c88:	bf00      	nop
 80a2c8a:	bf00      	nop
 80a2c8c:	bf00      	nop
 80a2c8e:	bf00      	nop
 80a2c90:	bf00      	nop
 80a2c92:	bf00      	nop
 80a2c94:	bf00      	nop
 80a2c96:	bf00      	nop
 80a2c98:	bf00      	nop
 80a2c9a:	bf00      	nop
 80a2c9c:	bf00      	nop
 80a2c9e:	bf00      	nop
 80a2ca0:	bf00      	nop
 80a2ca2:	bf00      	nop
 80a2ca4:	bf00      	nop
 80a2ca6:	bf00      	nop
 80a2ca8:	bf00      	nop
 80a2caa:	bf00      	nop
 80a2cac:	bf00      	nop
 80a2cae:	bf00      	nop
 80a2cb0:	bf00      	nop
 80a2cb2:	bf00      	nop
 80a2cb4:	bf00      	nop
 80a2cb6:	bf00      	nop
 80a2cb8:	bf00      	nop
 80a2cba:	bf00      	nop
 80a2cbc:	bf00      	nop
 80a2cbe:	bf00      	nop
 80a2cc0:	bf00      	nop
 80a2cc2:	bf00      	nop
 80a2cc4:	bf00      	nop
 80a2cc6:	bf00      	nop
 80a2cc8:	bf00      	nop
 80a2cca:	bf00      	nop
 80a2ccc:	bf00      	nop
 80a2cce:	bf00      	nop
 80a2cd0:	bf00      	nop
 80a2cd2:	bf00      	nop
 80a2cd4:	bf00      	nop
 80a2cd6:	bf00      	nop
 80a2cd8:	bf00      	nop
 80a2cda:	bf00      	nop
 80a2cdc:	bf00      	nop
 80a2cde:	bf00      	nop
 80a2ce0:	bf00      	nop
 80a2ce2:	bf00      	nop
 80a2ce4:	bf00      	nop
 80a2ce6:	bf00      	nop
 80a2ce8:	bf00      	nop
 80a2cea:	bf00      	nop
 80a2cec:	e770      	b.n	80a2bd0 <_ZN17Adafruit_NeoPixel4showEv+0x3f8>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2cee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a2cf2:	b29b      	uxth	r3, r3
 80a2cf4:	2b00      	cmp	r3, #0
 80a2cf6:	f47f aed1 	bne.w	80a2a9c <_ZN17Adafruit_NeoPixel4showEv+0x2c4>
 80a2cfa:	e6c3      	b.n	80a2a84 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      wait_time = 24L;
 80a2cfc:	2518      	movs	r5, #24
 80a2cfe:	e57b      	b.n	80a27f8 <_ZN17Adafruit_NeoPixel4showEv+0x20>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2d00:	2b00      	cmp	r3, #0
 80a2d02:	f43f aebf 	beq.w	80a2a84 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a2d06:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a2d0a:	2600      	movs	r6, #0
        pinSet(pin, HIGH); // HIGH
 80a2d0c:	4b4e      	ldr	r3, [pc, #312]	; (80a2e48 <_ZN17Adafruit_NeoPixel4showEv+0x670>)
 80a2d0e:	6819      	ldr	r1, [r3, #0]
        cyc = DWT->CYCCNT;
 80a2d10:	4b4e      	ldr	r3, [pc, #312]	; (80a2e4c <_ZN17Adafruit_NeoPixel4showEv+0x674>)
      mask = 0x800000; // reset the mask
 80a2d12:	f8cd e010 	str.w	lr, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a2d16:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a2d1a:	3503      	adds	r5, #3
      i = i-3;      // decrement bytes remaining
 80a2d1c:	3a03      	subs	r2, #3
 80a2d1e:	b292      	uxth	r2, r2
 80a2d20:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a2d24:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 80a2d28:	b2d2      	uxtb	r2, r2
 80a2d2a:	f88d 2007 	strb.w	r2, [sp, #7]
      r = *ptr++;   // Next red byte value
 80a2d2e:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80a2d32:	b2d2      	uxtb	r2, r2
 80a2d34:	f88d 2008 	strb.w	r2, [sp, #8]
      b = *ptr++;   // Next blue byte value
 80a2d38:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80a2d3c:	b2d2      	uxtb	r2, r2
 80a2d3e:	f88d 2009 	strb.w	r2, [sp, #9]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a2d42:	f89d c007 	ldrb.w	ip, [sp, #7]
 80a2d46:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80a2d4a:	f89d 7009 	ldrb.w	r7, [sp, #9]
 80a2d4e:	0212      	lsls	r2, r2, #8
 80a2d50:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80a2d54:	433a      	orrs	r2, r7
 80a2d56:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a2d58:	f88d 6006 	strb.w	r6, [sp, #6]
        pinSet(pin, HIGH); // HIGH
 80a2d5c:	7962      	ldrb	r2, [r4, #5]
        cyc = DWT->CYCCNT;
 80a2d5e:	6858      	ldr	r0, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a2d60:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a2d64:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 80a2d68:	88bf      	ldrh	r7, [r7, #4]
 80a2d6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
        cyc = DWT->CYCCNT;
 80a2d6e:	9005      	str	r0, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a2d70:	8317      	strh	r7, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a2d72:	9f03      	ldr	r7, [sp, #12]
 80a2d74:	9a04      	ldr	r2, [sp, #16]
 80a2d76:	4217      	tst	r7, r2
 80a2d78:	d025      	beq.n	80a2dc6 <_ZN17Adafruit_NeoPixel4showEv+0x5ee>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a2d7a:	685a      	ldr	r2, [r3, #4]
 80a2d7c:	9f05      	ldr	r7, [sp, #20]
 80a2d7e:	1bd2      	subs	r2, r2, r7
 80a2d80:	2a4f      	cmp	r2, #79	; 0x4f
 80a2d82:	d9fa      	bls.n	80a2d7a <_ZN17Adafruit_NeoPixel4showEv+0x5a2>
          pinSet(pin, LOW);
 80a2d84:	7962      	ldrb	r2, [r4, #5]
 80a2d86:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a2d8a:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 80a2d8e:	88bf      	ldrh	r7, [r7, #4]
 80a2d90:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a2d94:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a2d96:	685a      	ldr	r2, [r3, #4]
 80a2d98:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a2d9a:	685a      	ldr	r2, [r3, #4]
 80a2d9c:	9f05      	ldr	r7, [sp, #20]
 80a2d9e:	1bd2      	subs	r2, r2, r7
 80a2da0:	2a07      	cmp	r2, #7
 80a2da2:	d9fa      	bls.n	80a2d9a <_ZN17Adafruit_NeoPixel4showEv+0x5c2>
        mask >>= 1;
 80a2da4:	9a04      	ldr	r2, [sp, #16]
 80a2da6:	0852      	lsrs	r2, r2, #1
 80a2da8:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a2daa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a2dae:	3201      	adds	r2, #1
 80a2db0:	b2d2      	uxtb	r2, r2
 80a2db2:	2a17      	cmp	r2, #23
 80a2db4:	f88d 2006 	strb.w	r2, [sp, #6]
 80a2db8:	d9d0      	bls.n	80a2d5c <_ZN17Adafruit_NeoPixel4showEv+0x584>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2dba:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a2dbe:	b292      	uxth	r2, r2
 80a2dc0:	2a00      	cmp	r2, #0
 80a2dc2:	d1a6      	bne.n	80a2d12 <_ZN17Adafruit_NeoPixel4showEv+0x53a>
 80a2dc4:	e65e      	b.n	80a2a84 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a2dc6:	685a      	ldr	r2, [r3, #4]
 80a2dc8:	9f05      	ldr	r7, [sp, #20]
 80a2dca:	1bd2      	subs	r2, r2, r7
 80a2dcc:	2a18      	cmp	r2, #24
 80a2dce:	d9fa      	bls.n	80a2dc6 <_ZN17Adafruit_NeoPixel4showEv+0x5ee>
          pinSet(pin, LOW);
 80a2dd0:	7962      	ldrb	r2, [r4, #5]
 80a2dd2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a2dd6:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 80a2dda:	88bf      	ldrh	r7, [r7, #4]
 80a2ddc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a2de0:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a2de2:	685a      	ldr	r2, [r3, #4]
 80a2de4:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a2de6:	685a      	ldr	r2, [r3, #4]
 80a2de8:	9f05      	ldr	r7, [sp, #20]
 80a2dea:	1bd2      	subs	r2, r2, r7
 80a2dec:	2a45      	cmp	r2, #69	; 0x45
 80a2dee:	d9fa      	bls.n	80a2de6 <_ZN17Adafruit_NeoPixel4showEv+0x60e>
 80a2df0:	e7d8      	b.n	80a2da4 <_ZN17Adafruit_NeoPixel4showEv+0x5cc>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a2df2:	2b00      	cmp	r3, #0
 80a2df4:	f43f ae46 	beq.w	80a2a84 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a2df8:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 80a2dfc:	4a12      	ldr	r2, [pc, #72]	; (80a2e48 <_ZN17Adafruit_NeoPixel4showEv+0x670>)
 80a2dfe:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a2e00:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a2e04:	3503      	adds	r5, #3
      i = i-3;      // decrement bytes remaining
 80a2e06:	3b03      	subs	r3, #3
 80a2e08:	b29b      	uxth	r3, r3
 80a2e0a:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a2e0e:	f815 3c03 	ldrb.w	r3, [r5, #-3]
 80a2e12:	b2db      	uxtb	r3, r3
 80a2e14:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a2e18:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 80a2e1c:	b2db      	uxtb	r3, r3
 80a2e1e:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a2e22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80a2e26:	b2db      	uxtb	r3, r3
 80a2e28:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a2e2c:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a2e30:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a2e34:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a2e38:	021b      	lsls	r3, r3, #8
 80a2e3a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a2e3e:	4303      	orrs	r3, r0
 80a2e40:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a2e42:	f88d 1006 	strb.w	r1, [sp, #6]
 80a2e46:	e11a      	b.n	80a307e <_ZN17Adafruit_NeoPixel4showEv+0x8a6>
 80a2e48:	20000efc 	.word	0x20000efc
 80a2e4c:	e0001000 	.word	0xe0001000
            ::: "r0", "cc", "memory");
 80a2e50:	4600      	mov	r0, r0
 80a2e52:	bf00      	nop
 80a2e54:	bf00      	nop
 80a2e56:	bf00      	nop
 80a2e58:	bf00      	nop
 80a2e5a:	bf00      	nop
 80a2e5c:	bf00      	nop
 80a2e5e:	bf00      	nop
 80a2e60:	bf00      	nop
 80a2e62:	bf00      	nop
 80a2e64:	bf00      	nop
 80a2e66:	bf00      	nop
 80a2e68:	bf00      	nop
 80a2e6a:	bf00      	nop
 80a2e6c:	bf00      	nop
 80a2e6e:	bf00      	nop
 80a2e70:	bf00      	nop
 80a2e72:	bf00      	nop
 80a2e74:	bf00      	nop
 80a2e76:	bf00      	nop
 80a2e78:	bf00      	nop
 80a2e7a:	bf00      	nop
 80a2e7c:	bf00      	nop
 80a2e7e:	bf00      	nop
 80a2e80:	bf00      	nop
 80a2e82:	bf00      	nop
 80a2e84:	bf00      	nop
 80a2e86:	bf00      	nop
 80a2e88:	bf00      	nop
 80a2e8a:	bf00      	nop
 80a2e8c:	bf00      	nop
 80a2e8e:	bf00      	nop
 80a2e90:	bf00      	nop
 80a2e92:	bf00      	nop
 80a2e94:	bf00      	nop
 80a2e96:	bf00      	nop
 80a2e98:	bf00      	nop
 80a2e9a:	bf00      	nop
 80a2e9c:	bf00      	nop
 80a2e9e:	bf00      	nop
 80a2ea0:	bf00      	nop
 80a2ea2:	bf00      	nop
 80a2ea4:	bf00      	nop
 80a2ea6:	bf00      	nop
 80a2ea8:	bf00      	nop
 80a2eaa:	bf00      	nop
 80a2eac:	bf00      	nop
 80a2eae:	bf00      	nop
 80a2eb0:	bf00      	nop
 80a2eb2:	bf00      	nop
 80a2eb4:	bf00      	nop
 80a2eb6:	bf00      	nop
 80a2eb8:	bf00      	nop
 80a2eba:	bf00      	nop
 80a2ebc:	bf00      	nop
 80a2ebe:	bf00      	nop
 80a2ec0:	bf00      	nop
 80a2ec2:	bf00      	nop
 80a2ec4:	bf00      	nop
 80a2ec6:	bf00      	nop
 80a2ec8:	bf00      	nop
 80a2eca:	bf00      	nop
 80a2ecc:	bf00      	nop
 80a2ece:	bf00      	nop
 80a2ed0:	bf00      	nop
 80a2ed2:	bf00      	nop
 80a2ed4:	bf00      	nop
 80a2ed6:	bf00      	nop
 80a2ed8:	bf00      	nop
 80a2eda:	bf00      	nop
 80a2edc:	bf00      	nop
 80a2ede:	bf00      	nop
 80a2ee0:	bf00      	nop
 80a2ee2:	bf00      	nop
 80a2ee4:	bf00      	nop
 80a2ee6:	bf00      	nop
 80a2ee8:	bf00      	nop
 80a2eea:	bf00      	nop
 80a2eec:	bf00      	nop
 80a2eee:	bf00      	nop
 80a2ef0:	bf00      	nop
 80a2ef2:	bf00      	nop
 80a2ef4:	bf00      	nop
 80a2ef6:	bf00      	nop
 80a2ef8:	bf00      	nop
 80a2efa:	bf00      	nop
 80a2efc:	bf00      	nop
 80a2efe:	bf00      	nop
 80a2f00:	bf00      	nop
 80a2f02:	bf00      	nop
 80a2f04:	bf00      	nop
 80a2f06:	bf00      	nop
 80a2f08:	bf00      	nop
 80a2f0a:	bf00      	nop
 80a2f0c:	bf00      	nop
 80a2f0e:	bf00      	nop
 80a2f10:	bf00      	nop
 80a2f12:	bf00      	nop
 80a2f14:	bf00      	nop
 80a2f16:	bf00      	nop
 80a2f18:	bf00      	nop
 80a2f1a:	bf00      	nop
 80a2f1c:	bf00      	nop
 80a2f1e:	bf00      	nop
 80a2f20:	bf00      	nop
 80a2f22:	bf00      	nop
 80a2f24:	bf00      	nop
 80a2f26:	bf00      	nop
 80a2f28:	bf00      	nop
 80a2f2a:	bf00      	nop
 80a2f2c:	bf00      	nop
 80a2f2e:	bf00      	nop
 80a2f30:	bf00      	nop
 80a2f32:	bf00      	nop
 80a2f34:	bf00      	nop
 80a2f36:	bf00      	nop
 80a2f38:	bf00      	nop
 80a2f3a:	bf00      	nop
 80a2f3c:	bf00      	nop
 80a2f3e:	bf00      	nop
 80a2f40:	bf00      	nop
 80a2f42:	bf00      	nop
 80a2f44:	bf00      	nop
 80a2f46:	bf00      	nop
 80a2f48:	bf00      	nop
 80a2f4a:	bf00      	nop
 80a2f4c:	bf00      	nop
 80a2f4e:	bf00      	nop
 80a2f50:	bf00      	nop
 80a2f52:	bf00      	nop
 80a2f54:	bf00      	nop
 80a2f56:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a2f58:	7963      	ldrb	r3, [r4, #5]
 80a2f5a:	6810      	ldr	r0, [r2, #0]
 80a2f5c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2f60:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a2f64:	88bf      	ldrh	r7, [r7, #4]
 80a2f66:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a2f6a:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a2f6c:	4600      	mov	r0, r0
 80a2f6e:	bf00      	nop
 80a2f70:	bf00      	nop
 80a2f72:	bf00      	nop
 80a2f74:	bf00      	nop
 80a2f76:	bf00      	nop
 80a2f78:	bf00      	nop
 80a2f7a:	bf00      	nop
 80a2f7c:	bf00      	nop
 80a2f7e:	bf00      	nop
 80a2f80:	bf00      	nop
 80a2f82:	bf00      	nop
 80a2f84:	bf00      	nop
 80a2f86:	bf00      	nop
 80a2f88:	bf00      	nop
 80a2f8a:	bf00      	nop
 80a2f8c:	bf00      	nop
 80a2f8e:	bf00      	nop
 80a2f90:	bf00      	nop
 80a2f92:	bf00      	nop
 80a2f94:	bf00      	nop
 80a2f96:	bf00      	nop
 80a2f98:	bf00      	nop
 80a2f9a:	bf00      	nop
 80a2f9c:	bf00      	nop
 80a2f9e:	bf00      	nop
 80a2fa0:	bf00      	nop
 80a2fa2:	bf00      	nop
 80a2fa4:	bf00      	nop
 80a2fa6:	bf00      	nop
 80a2fa8:	bf00      	nop
 80a2faa:	bf00      	nop
 80a2fac:	bf00      	nop
 80a2fae:	bf00      	nop
 80a2fb0:	bf00      	nop
 80a2fb2:	bf00      	nop
 80a2fb4:	bf00      	nop
 80a2fb6:	bf00      	nop
 80a2fb8:	bf00      	nop
 80a2fba:	bf00      	nop
 80a2fbc:	bf00      	nop
 80a2fbe:	bf00      	nop
 80a2fc0:	bf00      	nop
 80a2fc2:	bf00      	nop
 80a2fc4:	bf00      	nop
 80a2fc6:	bf00      	nop
 80a2fc8:	bf00      	nop
 80a2fca:	bf00      	nop
 80a2fcc:	bf00      	nop
 80a2fce:	bf00      	nop
 80a2fd0:	bf00      	nop
 80a2fd2:	bf00      	nop
 80a2fd4:	bf00      	nop
 80a2fd6:	bf00      	nop
 80a2fd8:	bf00      	nop
 80a2fda:	bf00      	nop
 80a2fdc:	bf00      	nop
 80a2fde:	bf00      	nop
 80a2fe0:	bf00      	nop
 80a2fe2:	bf00      	nop
 80a2fe4:	bf00      	nop
 80a2fe6:	bf00      	nop
 80a2fe8:	bf00      	nop
 80a2fea:	bf00      	nop
 80a2fec:	bf00      	nop
 80a2fee:	bf00      	nop
 80a2ff0:	bf00      	nop
 80a2ff2:	bf00      	nop
 80a2ff4:	bf00      	nop
 80a2ff6:	bf00      	nop
 80a2ff8:	bf00      	nop
 80a2ffa:	bf00      	nop
 80a2ffc:	bf00      	nop
 80a2ffe:	bf00      	nop
 80a3000:	bf00      	nop
 80a3002:	bf00      	nop
 80a3004:	bf00      	nop
 80a3006:	bf00      	nop
 80a3008:	bf00      	nop
 80a300a:	bf00      	nop
 80a300c:	bf00      	nop
 80a300e:	bf00      	nop
 80a3010:	bf00      	nop
 80a3012:	bf00      	nop
 80a3014:	bf00      	nop
 80a3016:	bf00      	nop
 80a3018:	bf00      	nop
 80a301a:	bf00      	nop
 80a301c:	bf00      	nop
 80a301e:	bf00      	nop
 80a3020:	bf00      	nop
 80a3022:	bf00      	nop
 80a3024:	bf00      	nop
 80a3026:	bf00      	nop
 80a3028:	bf00      	nop
 80a302a:	bf00      	nop
 80a302c:	bf00      	nop
 80a302e:	bf00      	nop
 80a3030:	bf00      	nop
 80a3032:	bf00      	nop
 80a3034:	bf00      	nop
 80a3036:	bf00      	nop
 80a3038:	bf00      	nop
 80a303a:	bf00      	nop
 80a303c:	bf00      	nop
 80a303e:	bf00      	nop
 80a3040:	bf00      	nop
 80a3042:	bf00      	nop
 80a3044:	bf00      	nop
 80a3046:	bf00      	nop
 80a3048:	bf00      	nop
 80a304a:	bf00      	nop
 80a304c:	bf00      	nop
 80a304e:	bf00      	nop
 80a3050:	bf00      	nop
 80a3052:	bf00      	nop
 80a3054:	bf00      	nop
 80a3056:	bf00      	nop
 80a3058:	bf00      	nop
 80a305a:	bf00      	nop
 80a305c:	bf00      	nop
 80a305e:	bf00      	nop
 80a3060:	bf00      	nop
 80a3062:	bf00      	nop
 80a3064:	bf00      	nop
        mask >>= 1;
 80a3066:	9b04      	ldr	r3, [sp, #16]
 80a3068:	085b      	lsrs	r3, r3, #1
 80a306a:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a306c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a3070:	3301      	adds	r3, #1
 80a3072:	b2db      	uxtb	r3, r3
 80a3074:	2b17      	cmp	r3, #23
 80a3076:	f88d 3006 	strb.w	r3, [sp, #6]
 80a307a:	f200 8118 	bhi.w	80a32ae <_ZN17Adafruit_NeoPixel4showEv+0xad6>
        pinSet(pin, HIGH); // HIGH
 80a307e:	7963      	ldrb	r3, [r4, #5]
 80a3080:	6810      	ldr	r0, [r2, #0]
 80a3082:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3086:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a308a:	88bf      	ldrh	r7, [r7, #4]
 80a308c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3090:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a3092:	9803      	ldr	r0, [sp, #12]
 80a3094:	9b04      	ldr	r3, [sp, #16]
 80a3096:	4218      	tst	r0, r3
 80a3098:	f47f aeda 	bne.w	80a2e50 <_ZN17Adafruit_NeoPixel4showEv+0x678>
            ::: "r0", "cc", "memory");
 80a309c:	4600      	mov	r0, r0
 80a309e:	bf00      	nop
 80a30a0:	bf00      	nop
 80a30a2:	bf00      	nop
 80a30a4:	bf00      	nop
 80a30a6:	bf00      	nop
 80a30a8:	bf00      	nop
 80a30aa:	bf00      	nop
 80a30ac:	bf00      	nop
 80a30ae:	bf00      	nop
 80a30b0:	bf00      	nop
 80a30b2:	bf00      	nop
 80a30b4:	bf00      	nop
 80a30b6:	bf00      	nop
 80a30b8:	bf00      	nop
 80a30ba:	bf00      	nop
 80a30bc:	bf00      	nop
 80a30be:	bf00      	nop
 80a30c0:	bf00      	nop
 80a30c2:	bf00      	nop
 80a30c4:	bf00      	nop
 80a30c6:	bf00      	nop
 80a30c8:	bf00      	nop
 80a30ca:	bf00      	nop
 80a30cc:	bf00      	nop
 80a30ce:	bf00      	nop
 80a30d0:	bf00      	nop
 80a30d2:	bf00      	nop
 80a30d4:	bf00      	nop
 80a30d6:	bf00      	nop
 80a30d8:	bf00      	nop
 80a30da:	bf00      	nop
 80a30dc:	bf00      	nop
 80a30de:	bf00      	nop
 80a30e0:	bf00      	nop
 80a30e2:	bf00      	nop
 80a30e4:	bf00      	nop
 80a30e6:	bf00      	nop
 80a30e8:	bf00      	nop
 80a30ea:	bf00      	nop
 80a30ec:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a30ee:	7963      	ldrb	r3, [r4, #5]
 80a30f0:	6810      	ldr	r0, [r2, #0]
 80a30f2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a30f6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a30fa:	88bf      	ldrh	r7, [r7, #4]
 80a30fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3100:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a3102:	4600      	mov	r0, r0
 80a3104:	bf00      	nop
 80a3106:	bf00      	nop
 80a3108:	bf00      	nop
 80a310a:	bf00      	nop
 80a310c:	bf00      	nop
 80a310e:	bf00      	nop
 80a3110:	bf00      	nop
 80a3112:	bf00      	nop
 80a3114:	bf00      	nop
 80a3116:	bf00      	nop
 80a3118:	bf00      	nop
 80a311a:	bf00      	nop
 80a311c:	bf00      	nop
 80a311e:	bf00      	nop
 80a3120:	bf00      	nop
 80a3122:	bf00      	nop
 80a3124:	bf00      	nop
 80a3126:	bf00      	nop
 80a3128:	bf00      	nop
 80a312a:	bf00      	nop
 80a312c:	bf00      	nop
 80a312e:	bf00      	nop
 80a3130:	bf00      	nop
 80a3132:	bf00      	nop
 80a3134:	bf00      	nop
 80a3136:	bf00      	nop
 80a3138:	bf00      	nop
 80a313a:	bf00      	nop
 80a313c:	bf00      	nop
 80a313e:	bf00      	nop
 80a3140:	bf00      	nop
 80a3142:	bf00      	nop
 80a3144:	bf00      	nop
 80a3146:	bf00      	nop
 80a3148:	bf00      	nop
 80a314a:	bf00      	nop
 80a314c:	bf00      	nop
 80a314e:	bf00      	nop
 80a3150:	bf00      	nop
 80a3152:	bf00      	nop
 80a3154:	bf00      	nop
 80a3156:	bf00      	nop
 80a3158:	bf00      	nop
 80a315a:	bf00      	nop
 80a315c:	bf00      	nop
 80a315e:	bf00      	nop
 80a3160:	bf00      	nop
 80a3162:	bf00      	nop
 80a3164:	bf00      	nop
 80a3166:	bf00      	nop
 80a3168:	bf00      	nop
 80a316a:	bf00      	nop
 80a316c:	bf00      	nop
 80a316e:	bf00      	nop
 80a3170:	bf00      	nop
 80a3172:	bf00      	nop
 80a3174:	bf00      	nop
 80a3176:	bf00      	nop
 80a3178:	bf00      	nop
 80a317a:	bf00      	nop
 80a317c:	bf00      	nop
 80a317e:	bf00      	nop
 80a3180:	bf00      	nop
 80a3182:	bf00      	nop
 80a3184:	bf00      	nop
 80a3186:	bf00      	nop
 80a3188:	bf00      	nop
 80a318a:	bf00      	nop
 80a318c:	bf00      	nop
 80a318e:	bf00      	nop
 80a3190:	bf00      	nop
 80a3192:	bf00      	nop
 80a3194:	bf00      	nop
 80a3196:	bf00      	nop
 80a3198:	bf00      	nop
 80a319a:	bf00      	nop
 80a319c:	bf00      	nop
 80a319e:	bf00      	nop
 80a31a0:	bf00      	nop
 80a31a2:	bf00      	nop
 80a31a4:	bf00      	nop
 80a31a6:	bf00      	nop
 80a31a8:	bf00      	nop
 80a31aa:	bf00      	nop
 80a31ac:	bf00      	nop
 80a31ae:	bf00      	nop
 80a31b0:	bf00      	nop
 80a31b2:	bf00      	nop
 80a31b4:	bf00      	nop
 80a31b6:	bf00      	nop
 80a31b8:	bf00      	nop
 80a31ba:	bf00      	nop
 80a31bc:	bf00      	nop
 80a31be:	bf00      	nop
 80a31c0:	bf00      	nop
 80a31c2:	bf00      	nop
 80a31c4:	bf00      	nop
 80a31c6:	bf00      	nop
 80a31c8:	bf00      	nop
 80a31ca:	bf00      	nop
 80a31cc:	bf00      	nop
 80a31ce:	bf00      	nop
 80a31d0:	bf00      	nop
 80a31d2:	bf00      	nop
 80a31d4:	bf00      	nop
 80a31d6:	bf00      	nop
 80a31d8:	bf00      	nop
 80a31da:	bf00      	nop
 80a31dc:	bf00      	nop
 80a31de:	bf00      	nop
 80a31e0:	bf00      	nop
 80a31e2:	bf00      	nop
 80a31e4:	bf00      	nop
 80a31e6:	bf00      	nop
 80a31e8:	bf00      	nop
 80a31ea:	bf00      	nop
 80a31ec:	bf00      	nop
 80a31ee:	bf00      	nop
 80a31f0:	bf00      	nop
 80a31f2:	bf00      	nop
 80a31f4:	bf00      	nop
 80a31f6:	bf00      	nop
 80a31f8:	bf00      	nop
 80a31fa:	bf00      	nop
 80a31fc:	bf00      	nop
 80a31fe:	bf00      	nop
 80a3200:	bf00      	nop
 80a3202:	bf00      	nop
 80a3204:	bf00      	nop
 80a3206:	bf00      	nop
 80a3208:	bf00      	nop
 80a320a:	bf00      	nop
 80a320c:	bf00      	nop
 80a320e:	bf00      	nop
 80a3210:	bf00      	nop
 80a3212:	bf00      	nop
 80a3214:	bf00      	nop
 80a3216:	bf00      	nop
 80a3218:	bf00      	nop
 80a321a:	bf00      	nop
 80a321c:	bf00      	nop
 80a321e:	bf00      	nop
 80a3220:	bf00      	nop
 80a3222:	bf00      	nop
 80a3224:	bf00      	nop
 80a3226:	bf00      	nop
 80a3228:	bf00      	nop
 80a322a:	bf00      	nop
 80a322c:	bf00      	nop
 80a322e:	bf00      	nop
 80a3230:	bf00      	nop
 80a3232:	bf00      	nop
 80a3234:	bf00      	nop
 80a3236:	bf00      	nop
 80a3238:	bf00      	nop
 80a323a:	bf00      	nop
 80a323c:	bf00      	nop
 80a323e:	bf00      	nop
 80a3240:	bf00      	nop
 80a3242:	bf00      	nop
 80a3244:	bf00      	nop
 80a3246:	bf00      	nop
 80a3248:	bf00      	nop
 80a324a:	bf00      	nop
 80a324c:	bf00      	nop
 80a324e:	bf00      	nop
 80a3250:	bf00      	nop
 80a3252:	bf00      	nop
 80a3254:	bf00      	nop
 80a3256:	bf00      	nop
 80a3258:	bf00      	nop
 80a325a:	bf00      	nop
 80a325c:	bf00      	nop
 80a325e:	bf00      	nop
 80a3260:	bf00      	nop
 80a3262:	bf00      	nop
 80a3264:	bf00      	nop
 80a3266:	bf00      	nop
 80a3268:	bf00      	nop
 80a326a:	bf00      	nop
 80a326c:	bf00      	nop
 80a326e:	bf00      	nop
 80a3270:	bf00      	nop
 80a3272:	bf00      	nop
 80a3274:	bf00      	nop
 80a3276:	bf00      	nop
 80a3278:	bf00      	nop
 80a327a:	bf00      	nop
 80a327c:	bf00      	nop
 80a327e:	bf00      	nop
 80a3280:	bf00      	nop
 80a3282:	bf00      	nop
 80a3284:	bf00      	nop
 80a3286:	bf00      	nop
 80a3288:	bf00      	nop
 80a328a:	bf00      	nop
 80a328c:	bf00      	nop
 80a328e:	bf00      	nop
 80a3290:	bf00      	nop
 80a3292:	bf00      	nop
 80a3294:	bf00      	nop
 80a3296:	bf00      	nop
 80a3298:	bf00      	nop
 80a329a:	bf00      	nop
 80a329c:	bf00      	nop
 80a329e:	bf00      	nop
 80a32a0:	bf00      	nop
 80a32a2:	bf00      	nop
 80a32a4:	bf00      	nop
 80a32a6:	bf00      	nop
 80a32a8:	bf00      	nop
 80a32aa:	bf00      	nop
 80a32ac:	e6db      	b.n	80a3066 <_ZN17Adafruit_NeoPixel4showEv+0x88e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a32ae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a32b2:	b29b      	uxth	r3, r3
 80a32b4:	2b00      	cmp	r3, #0
 80a32b6:	f47f ada2 	bne.w	80a2dfe <_ZN17Adafruit_NeoPixel4showEv+0x626>
 80a32ba:	f7ff bbe3 	b.w	80a2a84 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
 80a32be:	4770      	bx	lr
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a32c0:	2b00      	cmp	r3, #0
 80a32c2:	f43f abdf 	beq.w	80a2a84 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>
      mask = 0x800000; // reset the mask
 80a32c6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a32ca:	2600      	movs	r6, #0
 80a32cc:	4a12      	ldr	r2, [pc, #72]	; (80a3318 <_ZN17Adafruit_NeoPixel4showEv+0xb40>)
      mask = 0x800000; // reset the mask
 80a32ce:	9104      	str	r1, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a32d0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next green byte value
 80a32d4:	3503      	adds	r5, #3
      i = i-3;      // decrement bytes remaining
 80a32d6:	3b03      	subs	r3, #3
 80a32d8:	b29b      	uxth	r3, r3
 80a32da:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a32de:	f815 3c03 	ldrb.w	r3, [r5, #-3]
 80a32e2:	b2db      	uxtb	r3, r3
 80a32e4:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next blue byte value
 80a32e8:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 80a32ec:	b2db      	uxtb	r3, r3
 80a32ee:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next green byte value
 80a32f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80a32f6:	b2db      	uxtb	r3, r3
 80a32f8:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a32fc:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a3300:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a3304:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a3308:	021b      	lsls	r3, r3, #8
 80a330a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a330e:	4303      	orrs	r3, r0
 80a3310:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a3312:	f88d 6006 	strb.w	r6, [sp, #6]
 80a3316:	e0e0      	b.n	80a34da <_ZN17Adafruit_NeoPixel4showEv+0xd02>
 80a3318:	20000efc 	.word	0x20000efc
            ::: "r0", "cc", "memory");
 80a331c:	4600      	mov	r0, r0
 80a331e:	bf00      	nop
 80a3320:	bf00      	nop
 80a3322:	bf00      	nop
 80a3324:	bf00      	nop
 80a3326:	bf00      	nop
 80a3328:	bf00      	nop
 80a332a:	bf00      	nop
 80a332c:	bf00      	nop
 80a332e:	bf00      	nop
 80a3330:	bf00      	nop
 80a3332:	bf00      	nop
 80a3334:	bf00      	nop
 80a3336:	bf00      	nop
 80a3338:	bf00      	nop
 80a333a:	bf00      	nop
 80a333c:	bf00      	nop
 80a333e:	bf00      	nop
 80a3340:	bf00      	nop
 80a3342:	bf00      	nop
 80a3344:	bf00      	nop
 80a3346:	bf00      	nop
 80a3348:	bf00      	nop
 80a334a:	bf00      	nop
 80a334c:	bf00      	nop
 80a334e:	bf00      	nop
 80a3350:	bf00      	nop
 80a3352:	bf00      	nop
 80a3354:	bf00      	nop
 80a3356:	bf00      	nop
 80a3358:	bf00      	nop
 80a335a:	bf00      	nop
 80a335c:	bf00      	nop
 80a335e:	bf00      	nop
 80a3360:	bf00      	nop
 80a3362:	bf00      	nop
 80a3364:	bf00      	nop
 80a3366:	bf00      	nop
 80a3368:	bf00      	nop
 80a336a:	bf00      	nop
 80a336c:	bf00      	nop
 80a336e:	bf00      	nop
 80a3370:	bf00      	nop
 80a3372:	bf00      	nop
 80a3374:	bf00      	nop
 80a3376:	bf00      	nop
 80a3378:	bf00      	nop
 80a337a:	bf00      	nop
 80a337c:	bf00      	nop
 80a337e:	bf00      	nop
 80a3380:	bf00      	nop
 80a3382:	bf00      	nop
 80a3384:	bf00      	nop
 80a3386:	bf00      	nop
 80a3388:	bf00      	nop
 80a338a:	bf00      	nop
 80a338c:	bf00      	nop
 80a338e:	bf00      	nop
 80a3390:	bf00      	nop
 80a3392:	bf00      	nop
 80a3394:	bf00      	nop
 80a3396:	bf00      	nop
 80a3398:	bf00      	nop
 80a339a:	bf00      	nop
 80a339c:	bf00      	nop
 80a339e:	bf00      	nop
 80a33a0:	bf00      	nop
 80a33a2:	bf00      	nop
 80a33a4:	bf00      	nop
 80a33a6:	bf00      	nop
 80a33a8:	bf00      	nop
 80a33aa:	bf00      	nop
 80a33ac:	bf00      	nop
 80a33ae:	bf00      	nop
 80a33b0:	bf00      	nop
 80a33b2:	bf00      	nop
 80a33b4:	bf00      	nop
 80a33b6:	bf00      	nop
 80a33b8:	bf00      	nop
 80a33ba:	bf00      	nop
 80a33bc:	bf00      	nop
 80a33be:	bf00      	nop
 80a33c0:	bf00      	nop
 80a33c2:	bf00      	nop
 80a33c4:	bf00      	nop
 80a33c6:	bf00      	nop
 80a33c8:	bf00      	nop
 80a33ca:	bf00      	nop
 80a33cc:	bf00      	nop
 80a33ce:	bf00      	nop
 80a33d0:	bf00      	nop
 80a33d2:	bf00      	nop
 80a33d4:	bf00      	nop
 80a33d6:	bf00      	nop
 80a33d8:	bf00      	nop
 80a33da:	bf00      	nop
 80a33dc:	bf00      	nop
 80a33de:	bf00      	nop
 80a33e0:	bf00      	nop
 80a33e2:	bf00      	nop
 80a33e4:	bf00      	nop
 80a33e6:	bf00      	nop
 80a33e8:	bf00      	nop
 80a33ea:	bf00      	nop
 80a33ec:	bf00      	nop
 80a33ee:	bf00      	nop
 80a33f0:	bf00      	nop
 80a33f2:	bf00      	nop
 80a33f4:	bf00      	nop
 80a33f6:	bf00      	nop
 80a33f8:	bf00      	nop
 80a33fa:	bf00      	nop
 80a33fc:	bf00      	nop
 80a33fe:	bf00      	nop
 80a3400:	bf00      	nop
 80a3402:	bf00      	nop
 80a3404:	bf00      	nop
 80a3406:	bf00      	nop
 80a3408:	bf00      	nop
 80a340a:	bf00      	nop
 80a340c:	bf00      	nop
 80a340e:	bf00      	nop
 80a3410:	bf00      	nop
 80a3412:	bf00      	nop
 80a3414:	bf00      	nop
 80a3416:	bf00      	nop
 80a3418:	bf00      	nop
 80a341a:	bf00      	nop
 80a341c:	bf00      	nop
 80a341e:	bf00      	nop
 80a3420:	bf00      	nop
 80a3422:	bf00      	nop
 80a3424:	bf00      	nop
 80a3426:	bf00      	nop
 80a3428:	bf00      	nop
 80a342a:	bf00      	nop
 80a342c:	bf00      	nop
 80a342e:	bf00      	nop
 80a3430:	bf00      	nop
 80a3432:	bf00      	nop
 80a3434:	bf00      	nop
 80a3436:	bf00      	nop
 80a3438:	bf00      	nop
 80a343a:	bf00      	nop
 80a343c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a343e:	7963      	ldrb	r3, [r4, #5]
 80a3440:	6810      	ldr	r0, [r2, #0]
 80a3442:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3446:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a344a:	88bf      	ldrh	r7, [r7, #4]
 80a344c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a3450:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a3452:	4600      	mov	r0, r0
 80a3454:	bf00      	nop
 80a3456:	bf00      	nop
 80a3458:	bf00      	nop
 80a345a:	bf00      	nop
 80a345c:	bf00      	nop
 80a345e:	bf00      	nop
 80a3460:	bf00      	nop
 80a3462:	bf00      	nop
 80a3464:	bf00      	nop
 80a3466:	bf00      	nop
 80a3468:	bf00      	nop
 80a346a:	bf00      	nop
 80a346c:	bf00      	nop
 80a346e:	bf00      	nop
 80a3470:	bf00      	nop
 80a3472:	bf00      	nop
 80a3474:	bf00      	nop
 80a3476:	bf00      	nop
 80a3478:	bf00      	nop
 80a347a:	bf00      	nop
 80a347c:	bf00      	nop
 80a347e:	bf00      	nop
 80a3480:	bf00      	nop
 80a3482:	bf00      	nop
 80a3484:	bf00      	nop
 80a3486:	bf00      	nop
 80a3488:	bf00      	nop
 80a348a:	bf00      	nop
 80a348c:	bf00      	nop
 80a348e:	bf00      	nop
 80a3490:	bf00      	nop
 80a3492:	bf00      	nop
 80a3494:	bf00      	nop
 80a3496:	bf00      	nop
 80a3498:	bf00      	nop
 80a349a:	bf00      	nop
 80a349c:	bf00      	nop
 80a349e:	bf00      	nop
 80a34a0:	bf00      	nop
 80a34a2:	bf00      	nop
 80a34a4:	bf00      	nop
 80a34a6:	bf00      	nop
 80a34a8:	bf00      	nop
 80a34aa:	bf00      	nop
 80a34ac:	bf00      	nop
 80a34ae:	bf00      	nop
 80a34b0:	bf00      	nop
 80a34b2:	bf00      	nop
 80a34b4:	bf00      	nop
 80a34b6:	bf00      	nop
 80a34b8:	bf00      	nop
 80a34ba:	bf00      	nop
 80a34bc:	bf00      	nop
 80a34be:	bf00      	nop
 80a34c0:	bf00      	nop
        mask >>= 1;
 80a34c2:	9b04      	ldr	r3, [sp, #16]
 80a34c4:	085b      	lsrs	r3, r3, #1
 80a34c6:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a34c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a34cc:	3301      	adds	r3, #1
 80a34ce:	b2db      	uxtb	r3, r3
 80a34d0:	2b17      	cmp	r3, #23
 80a34d2:	f88d 3006 	strb.w	r3, [sp, #6]
 80a34d6:	f200 80e3 	bhi.w	80a36a0 <_ZN17Adafruit_NeoPixel4showEv+0xec8>
        pinSet(pin, HIGH); // HIGH
 80a34da:	7963      	ldrb	r3, [r4, #5]
 80a34dc:	6810      	ldr	r0, [r2, #0]
 80a34de:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a34e2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a34e6:	88bf      	ldrh	r7, [r7, #4]
 80a34e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a34ec:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a34ee:	9803      	ldr	r0, [sp, #12]
 80a34f0:	9b04      	ldr	r3, [sp, #16]
 80a34f2:	4218      	tst	r0, r3
 80a34f4:	f47f af12 	bne.w	80a331c <_ZN17Adafruit_NeoPixel4showEv+0xb44>
            ::: "r0", "cc", "memory");
 80a34f8:	4600      	mov	r0, r0
 80a34fa:	bf00      	nop
 80a34fc:	bf00      	nop
 80a34fe:	bf00      	nop
 80a3500:	bf00      	nop
 80a3502:	bf00      	nop
 80a3504:	bf00      	nop
 80a3506:	bf00      	nop
 80a3508:	bf00      	nop
 80a350a:	bf00      	nop
 80a350c:	bf00      	nop
 80a350e:	bf00      	nop
 80a3510:	bf00      	nop
 80a3512:	bf00      	nop
 80a3514:	bf00      	nop
 80a3516:	bf00      	nop
 80a3518:	bf00      	nop
 80a351a:	bf00      	nop
 80a351c:	bf00      	nop
 80a351e:	bf00      	nop
 80a3520:	bf00      	nop
 80a3522:	bf00      	nop
 80a3524:	bf00      	nop
 80a3526:	bf00      	nop
 80a3528:	bf00      	nop
 80a352a:	bf00      	nop
 80a352c:	bf00      	nop
 80a352e:	bf00      	nop
 80a3530:	bf00      	nop
 80a3532:	bf00      	nop
 80a3534:	bf00      	nop
 80a3536:	bf00      	nop
 80a3538:	bf00      	nop
 80a353a:	bf00      	nop
 80a353c:	bf00      	nop
 80a353e:	bf00      	nop
 80a3540:	bf00      	nop
 80a3542:	bf00      	nop
 80a3544:	bf00      	nop
 80a3546:	bf00      	nop
 80a3548:	bf00      	nop
 80a354a:	bf00      	nop
 80a354c:	bf00      	nop
 80a354e:	bf00      	nop
 80a3550:	bf00      	nop
 80a3552:	bf00      	nop
 80a3554:	bf00      	nop
 80a3556:	bf00      	nop
 80a3558:	bf00      	nop
 80a355a:	bf00      	nop
 80a355c:	bf00      	nop
 80a355e:	bf00      	nop
 80a3560:	bf00      	nop
 80a3562:	bf00      	nop
 80a3564:	bf00      	nop
 80a3566:	bf00      	nop
 80a3568:	bf00      	nop
 80a356a:	bf00      	nop
 80a356c:	bf00      	nop
 80a356e:	bf00      	nop
 80a3570:	bf00      	nop
 80a3572:	bf00      	nop
 80a3574:	bf00      	nop
 80a3576:	bf00      	nop
 80a3578:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a357a:	7963      	ldrb	r3, [r4, #5]
 80a357c:	6810      	ldr	r0, [r2, #0]
 80a357e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3582:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a3586:	88bf      	ldrh	r7, [r7, #4]
 80a3588:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a358c:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a358e:	4600      	mov	r0, r0
 80a3590:	bf00      	nop
 80a3592:	bf00      	nop
 80a3594:	bf00      	nop
 80a3596:	bf00      	nop
 80a3598:	bf00      	nop
 80a359a:	bf00      	nop
 80a359c:	bf00      	nop
 80a359e:	bf00      	nop
 80a35a0:	bf00      	nop
 80a35a2:	bf00      	nop
 80a35a4:	bf00      	nop
 80a35a6:	bf00      	nop
 80a35a8:	bf00      	nop
 80a35aa:	bf00      	nop
 80a35ac:	bf00      	nop
 80a35ae:	bf00      	nop
 80a35b0:	bf00      	nop
 80a35b2:	bf00      	nop
 80a35b4:	bf00      	nop
 80a35b6:	bf00      	nop
 80a35b8:	bf00      	nop
 80a35ba:	bf00      	nop
 80a35bc:	bf00      	nop
 80a35be:	bf00      	nop
 80a35c0:	bf00      	nop
 80a35c2:	bf00      	nop
 80a35c4:	bf00      	nop
 80a35c6:	bf00      	nop
 80a35c8:	bf00      	nop
 80a35ca:	bf00      	nop
 80a35cc:	bf00      	nop
 80a35ce:	bf00      	nop
 80a35d0:	bf00      	nop
 80a35d2:	bf00      	nop
 80a35d4:	bf00      	nop
 80a35d6:	bf00      	nop
 80a35d8:	bf00      	nop
 80a35da:	bf00      	nop
 80a35dc:	bf00      	nop
 80a35de:	bf00      	nop
 80a35e0:	bf00      	nop
 80a35e2:	bf00      	nop
 80a35e4:	bf00      	nop
 80a35e6:	bf00      	nop
 80a35e8:	bf00      	nop
 80a35ea:	bf00      	nop
 80a35ec:	bf00      	nop
 80a35ee:	bf00      	nop
 80a35f0:	bf00      	nop
 80a35f2:	bf00      	nop
 80a35f4:	bf00      	nop
 80a35f6:	bf00      	nop
 80a35f8:	bf00      	nop
 80a35fa:	bf00      	nop
 80a35fc:	bf00      	nop
 80a35fe:	bf00      	nop
 80a3600:	bf00      	nop
 80a3602:	bf00      	nop
 80a3604:	bf00      	nop
 80a3606:	bf00      	nop
 80a3608:	bf00      	nop
 80a360a:	bf00      	nop
 80a360c:	bf00      	nop
 80a360e:	bf00      	nop
 80a3610:	bf00      	nop
 80a3612:	bf00      	nop
 80a3614:	bf00      	nop
 80a3616:	bf00      	nop
 80a3618:	bf00      	nop
 80a361a:	bf00      	nop
 80a361c:	bf00      	nop
 80a361e:	bf00      	nop
 80a3620:	bf00      	nop
 80a3622:	bf00      	nop
 80a3624:	bf00      	nop
 80a3626:	bf00      	nop
 80a3628:	bf00      	nop
 80a362a:	bf00      	nop
 80a362c:	bf00      	nop
 80a362e:	bf00      	nop
 80a3630:	bf00      	nop
 80a3632:	bf00      	nop
 80a3634:	bf00      	nop
 80a3636:	bf00      	nop
 80a3638:	bf00      	nop
 80a363a:	bf00      	nop
 80a363c:	bf00      	nop
 80a363e:	bf00      	nop
 80a3640:	bf00      	nop
 80a3642:	bf00      	nop
 80a3644:	bf00      	nop
 80a3646:	bf00      	nop
 80a3648:	bf00      	nop
 80a364a:	bf00      	nop
 80a364c:	bf00      	nop
 80a364e:	bf00      	nop
 80a3650:	bf00      	nop
 80a3652:	bf00      	nop
 80a3654:	bf00      	nop
 80a3656:	bf00      	nop
 80a3658:	bf00      	nop
 80a365a:	bf00      	nop
 80a365c:	bf00      	nop
 80a365e:	bf00      	nop
 80a3660:	bf00      	nop
 80a3662:	bf00      	nop
 80a3664:	bf00      	nop
 80a3666:	bf00      	nop
 80a3668:	bf00      	nop
 80a366a:	bf00      	nop
 80a366c:	bf00      	nop
 80a366e:	bf00      	nop
 80a3670:	bf00      	nop
 80a3672:	bf00      	nop
 80a3674:	bf00      	nop
 80a3676:	bf00      	nop
 80a3678:	bf00      	nop
 80a367a:	bf00      	nop
 80a367c:	bf00      	nop
 80a367e:	bf00      	nop
 80a3680:	bf00      	nop
 80a3682:	bf00      	nop
 80a3684:	bf00      	nop
 80a3686:	bf00      	nop
 80a3688:	bf00      	nop
 80a368a:	bf00      	nop
 80a368c:	bf00      	nop
 80a368e:	bf00      	nop
 80a3690:	bf00      	nop
 80a3692:	bf00      	nop
 80a3694:	bf00      	nop
 80a3696:	bf00      	nop
 80a3698:	bf00      	nop
 80a369a:	bf00      	nop
 80a369c:	bf00      	nop
 80a369e:	e710      	b.n	80a34c2 <_ZN17Adafruit_NeoPixel4showEv+0xcea>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a36a0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a36a4:	b29b      	uxth	r3, r3
 80a36a6:	2b00      	cmp	r3, #0
 80a36a8:	f47f ae11 	bne.w	80a32ce <_ZN17Adafruit_NeoPixel4showEv+0xaf6>
 80a36ac:	f7ff b9ea 	b.w	80a2a84 <_ZN17Adafruit_NeoPixel4showEv+0x2ac>

080a36b0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  digitalWrite(p, LOW);
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a36b0:	b570      	push	{r4, r5, r6, lr}
  if(n < numLEDs) {
 80a36b2:	8805      	ldrh	r5, [r0, #0]
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a36b4:	f89d 4010 	ldrb.w	r4, [sp, #16]
  if(n < numLEDs) {
 80a36b8:	428d      	cmp	r5, r1
 80a36ba:	d916      	bls.n	80a36ea <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3a>
    if(brightness) { // See notes in setBrightness()
 80a36bc:	7985      	ldrb	r5, [r0, #6]
 80a36be:	b12d      	cbz	r5, 80a36cc <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x1c>
      r = (r * brightness) >> 8;
 80a36c0:	436a      	muls	r2, r5
      g = (g * brightness) >> 8;
 80a36c2:	436b      	muls	r3, r5
      b = (b * brightness) >> 8;
 80a36c4:	436c      	muls	r4, r5
      r = (r * brightness) >> 8;
 80a36c6:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
 80a36c8:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
 80a36ca:	0a24      	lsrs	r4, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
 80a36cc:	6886      	ldr	r6, [r0, #8]
    switch(type) {
 80a36ce:	7900      	ldrb	r0, [r0, #4]
    uint8_t *p = &pixels[n * 3];
 80a36d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    switch(type) {
 80a36d4:	2804      	cmp	r0, #4
    uint8_t *p = &pixels[n * 3];
 80a36d6:	eb06 0501 	add.w	r5, r6, r1
    switch(type) {
 80a36da:	d007      	beq.n	80a36ec <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3c>
 80a36dc:	2805      	cmp	r0, #5
 80a36de:	d001      	beq.n	80a36e4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x34>
 80a36e0:	2802      	cmp	r0, #2
 80a36e2:	d10a      	bne.n	80a36fa <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4a>
      case WS2812B: // WS2812 & WS2812B is GRB order.
      case WS2812B2:
        *p++ = g;
 80a36e4:	5473      	strb	r3, [r6, r1]
        *p++ = r;
 80a36e6:	706a      	strb	r2, [r5, #1]
        *p = b;
 80a36e8:	70ac      	strb	r4, [r5, #2]
        *p++ = g;
        *p = b;
        break;
    }
  }
}
 80a36ea:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = r;
 80a36ec:	2afe      	cmp	r2, #254	; 0xfe
 80a36ee:	bf28      	it	cs
 80a36f0:	22fe      	movcs	r2, #254	; 0xfe
 80a36f2:	5472      	strb	r2, [r6, r1]
        *p++ = b;
 80a36f4:	706c      	strb	r4, [r5, #1]
        *p = g;
 80a36f6:	70ab      	strb	r3, [r5, #2]
        break;
 80a36f8:	e7f7      	b.n	80a36ea <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3a>
        *p++ = r;
 80a36fa:	5472      	strb	r2, [r6, r1]
        *p++ = g;
 80a36fc:	706b      	strb	r3, [r5, #1]
        *p = b;
 80a36fe:	70ac      	strb	r4, [r5, #2]
}
 80a3700:	e7f3      	b.n	80a36ea <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x3a>

080a3702 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a3702:	b570      	push	{r4, r5, r6, lr}
  if(n < numLEDs) {
 80a3704:	8803      	ldrh	r3, [r0, #0]
 80a3706:	428b      	cmp	r3, r1
 80a3708:	d91d      	bls.n	80a3746 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x44>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a370a:	7985      	ldrb	r5, [r0, #6]
 80a370c:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a3710:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a3714:	b2d2      	uxtb	r2, r2
 80a3716:	b13d      	cbz	r5, 80a3728 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
 80a3718:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a371a:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a371c:	436a      	muls	r2, r5
      r = (r * brightness) >> 8;
 80a371e:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a3722:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a3726:	0a12      	lsrs	r2, r2, #8
    }
    uint8_t *p = &pixels[n * 3];
 80a3728:	6886      	ldr	r6, [r0, #8]
    switch(type) {
 80a372a:	7900      	ldrb	r0, [r0, #4]
    uint8_t *p = &pixels[n * 3];
 80a372c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    switch(type) {
 80a3730:	2804      	cmp	r0, #4
    uint8_t *p = &pixels[n * 3];
 80a3732:	eb06 0501 	add.w	r5, r6, r1
    switch(type) {
 80a3736:	d007      	beq.n	80a3748 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x46>
 80a3738:	2805      	cmp	r0, #5
 80a373a:	d001      	beq.n	80a3740 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x3e>
 80a373c:	2802      	cmp	r0, #2
 80a373e:	d10a      	bne.n	80a3756 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>
      case WS2812B: // WS2812 & WS2812B is GRB order.
      case WS2812B2:
        *p++ = g;
 80a3740:	5474      	strb	r4, [r6, r1]
        *p++ = r;
 80a3742:	706b      	strb	r3, [r5, #1]
        *p = b;
 80a3744:	70aa      	strb	r2, [r5, #2]
        *p++ = g;
        *p = b;
        break;
    }
  }
}
 80a3746:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = r;
 80a3748:	2bfe      	cmp	r3, #254	; 0xfe
 80a374a:	bf28      	it	cs
 80a374c:	23fe      	movcs	r3, #254	; 0xfe
 80a374e:	5473      	strb	r3, [r6, r1]
        *p++ = b;
 80a3750:	706a      	strb	r2, [r5, #1]
        *p = g;
 80a3752:	70ac      	strb	r4, [r5, #2]
        break;
 80a3754:	e7f7      	b.n	80a3746 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x44>
        *p++ = r;
 80a3756:	5473      	strb	r3, [r6, r1]
        *p++ = g;
 80a3758:	706c      	strb	r4, [r5, #1]
        *p = b;
 80a375a:	70aa      	strb	r2, [r5, #2]
}
 80a375c:	e7f3      	b.n	80a3746 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x44>

080a375e <_ZNK17Adafruit_NeoPixel13getPixelColorEt>:
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
 80a375e:	b513      	push	{r0, r1, r4, lr}
  if(n >= numLEDs) {
 80a3760:	8803      	ldrh	r3, [r0, #0]
 80a3762:	428b      	cmp	r3, r1
 80a3764:	d938      	bls.n	80a37d8 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x7a>
    // Out of bounds, return no color.
    return 0;
  }
  uint8_t *p = &pixels[n * 3];
 80a3766:	6882      	ldr	r2, [r0, #8]
  uint32_t c;

  switch(type) {
 80a3768:	7904      	ldrb	r4, [r0, #4]
  uint8_t *p = &pixels[n * 3];
 80a376a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a376e:	1853      	adds	r3, r2, r1
  switch(type) {
 80a3770:	2c04      	cmp	r4, #4
 80a3772:	5c51      	ldrb	r1, [r2, r1]
 80a3774:	789a      	ldrb	r2, [r3, #2]
 80a3776:	785b      	ldrb	r3, [r3, #1]
 80a3778:	d022      	beq.n	80a37c0 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x62>
 80a377a:	2c05      	cmp	r4, #5
 80a377c:	d001      	beq.n	80a3782 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x24>
 80a377e:	2c02      	cmp	r4, #2
 80a3780:	d124      	bne.n	80a37cc <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x6e>
    case WS2812B: // WS2812 & WS2812B is GRB order.
    case WS2812B2:
      c = ((uint32_t)p[1] << 16) | ((uint32_t)p[0] <<  8) | (uint32_t)p[2];
 80a3782:	0209      	lsls	r1, r1, #8
 80a3784:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80a3788:	4313      	orrs	r3, r2
 80a378a:	9301      	str	r3, [sp, #4]
      break;
  }

  // Adjust this back up to the true color, as setting a pixel color will
  // scale it back down again.
  if(brightness) { // See notes in setBrightness()
 80a378c:	7981      	ldrb	r1, [r0, #6]
 80a378e:	b1a1      	cbz	r1, 80a37ba <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x5c>
    //Cast the color to a byte array
    uint8_t * c_ptr =reinterpret_cast<uint8_t*>(&c);
    c_ptr[0] = (c_ptr[0] << 8)/brightness;
 80a3790:	f89d 2004 	ldrb.w	r2, [sp, #4]
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
 80a3794:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c_ptr[0] = (c_ptr[0] << 8)/brightness;
 80a3798:	0212      	lsls	r2, r2, #8
 80a379a:	fbb2 f2f1 	udiv	r2, r2, r1
 80a379e:	f88d 2004 	strb.w	r2, [sp, #4]
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
 80a37a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
 80a37a6:	021b      	lsls	r3, r3, #8
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
 80a37a8:	0212      	lsls	r2, r2, #8
 80a37aa:	fbb2 f2f1 	udiv	r2, r2, r1
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
 80a37ae:	fbb3 f3f1 	udiv	r3, r3, r1
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
 80a37b2:	f88d 2005 	strb.w	r2, [sp, #5]
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
 80a37b6:	f88d 3006 	strb.w	r3, [sp, #6]
  }
  return c; // Pixel # is out of bounds
 80a37ba:	9801      	ldr	r0, [sp, #4]
}
 80a37bc:	b002      	add	sp, #8
 80a37be:	bd10      	pop	{r4, pc}
      c = ((uint32_t)p[0] << 16) | ((uint32_t)p[2] <<  8) | (uint32_t)p[1];
 80a37c0:	0212      	lsls	r2, r2, #8
 80a37c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80a37c6:	4313      	orrs	r3, r2
 80a37c8:	9301      	str	r3, [sp, #4]
      break;
 80a37ca:	e7df      	b.n	80a378c <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x2e>
      c = ((uint32_t)p[0] << 16) | ((uint32_t)p[1] <<  8) | (uint32_t)p[2];
 80a37cc:	021b      	lsls	r3, r3, #8
 80a37ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80a37d2:	4313      	orrs	r3, r2
 80a37d4:	9301      	str	r3, [sp, #4]
      break;
 80a37d6:	e7d9      	b.n	80a378c <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x2e>
    return 0;
 80a37d8:	2000      	movs	r0, #0
 80a37da:	e7ef      	b.n	80a37bc <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x5e>

080a37dc <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a37dc:	b508      	push	{r3, lr}
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a37de:	f001 fd37 	bl	80a5250 <HAL_Pin_Map>
 80a37e2:	4b01      	ldr	r3, [pc, #4]	; (80a37e8 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
 80a37e4:	6018      	str	r0, [r3, #0]
}
 80a37e6:	bd08      	pop	{r3, pc}
 80a37e8:	20000efc 	.word	0x20000efc

080a37ec <_ZN8PongBallC1Ev>:
#include "pong_ball.h"
#include "muse.h"

PongBall::PongBall() {}
 80a37ec:	4770      	bx	lr
	...

080a37f0 <_ZN8PongBallC1Eiffjiii>:

PongBall::PongBall(int len, float velX, float velY, unsigned int tickTime, int r, int g, int b) {
 80a37f0:	b510      	push	{r4, lr}
    this->len = len;
    xVel = velX;
    yVel = velY;
 80a37f2:	60c3      	str	r3, [r0, #12]
    x = NUM_BARS / 2;
 80a37f4:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80a37f8:	6103      	str	r3, [r0, #16]
    y = STRIP_LENGTH / 2;
 80a37fa:	4b09      	ldr	r3, [pc, #36]	; (80a3820 <_ZN8PongBallC1Eiffjiii+0x30>)
PongBall::PongBall(int len, float velX, float velY, unsigned int tickTime, int r, int g, int b) {
 80a37fc:	4604      	mov	r4, r0
    y = STRIP_LENGTH / 2;
 80a37fe:	6143      	str	r3, [r0, #20]

    tick_time = tickTime;
 80a3800:	9b02      	ldr	r3, [sp, #8]
    this->len = len;
 80a3802:	6181      	str	r1, [r0, #24]
    xVel = velX;
 80a3804:	6082      	str	r2, [r0, #8]
    tick_time = tickTime;
 80a3806:	6203      	str	r3, [r0, #32]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a3808:	f001 fd0a 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>

int PongBall::xPos() { return (int) x; }
int PongBall::yPos() { return (int) y; }

void PongBall::setColor(int r, int g, int b) {
    this->r = r;
 80a380c:	9b03      	ldr	r3, [sp, #12]
    last_tick = millis();
 80a380e:	61e0      	str	r0, [r4, #28]
    this->r = r;
 80a3810:	6263      	str	r3, [r4, #36]	; 0x24
    this->g = g;
 80a3812:	9b04      	ldr	r3, [sp, #16]
}
 80a3814:	4620      	mov	r0, r4
    this->g = g;
 80a3816:	62a3      	str	r3, [r4, #40]	; 0x28
    this->b = b;
 80a3818:	9b05      	ldr	r3, [sp, #20]
 80a381a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80a381c:	bd10      	pop	{r4, pc}
 80a381e:	bf00      	nop
 80a3820:	41e80000 	.word	0x41e80000

080a3824 <_ZN8PongBall4tickEv>:
void PongBall::tick() {
 80a3824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3828:	4604      	mov	r4, r0
 80a382a:	f001 fcf9 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - last_tick > tick_time) {
 80a382e:	69e3      	ldr	r3, [r4, #28]
 80a3830:	1ac0      	subs	r0, r0, r3
 80a3832:	6a23      	ldr	r3, [r4, #32]
 80a3834:	4298      	cmp	r0, r3
 80a3836:	d926      	bls.n	80a3886 <_ZN8PongBall4tickEv+0x62>
 80a3838:	f001 fcf2 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
        x += xVel;
 80a383c:	68a6      	ldr	r6, [r4, #8]
 80a383e:	6921      	ldr	r1, [r4, #16]
        last_tick = millis();
 80a3840:	61e0      	str	r0, [r4, #28]
        x += xVel;
 80a3842:	4630      	mov	r0, r6
 80a3844:	f008 fa10 	bl	80abc68 <__addsf3>
        y += yVel;
 80a3848:	68e5      	ldr	r5, [r4, #12]
 80a384a:	6961      	ldr	r1, [r4, #20]
        x += xVel;
 80a384c:	4681      	mov	r9, r0
 80a384e:	6120      	str	r0, [r4, #16]
        y += yVel;
 80a3850:	4628      	mov	r0, r5
 80a3852:	f008 fa09 	bl	80abc68 <__addsf3>
        if (x <= 0) {
 80a3856:	f04f 0800 	mov.w	r8, #0
        y += yVel;
 80a385a:	4607      	mov	r7, r0
 80a385c:	6160      	str	r0, [r4, #20]
        if (x <= 0) {
 80a385e:	4641      	mov	r1, r8
 80a3860:	4648      	mov	r0, r9
 80a3862:	f008 fcb1 	bl	80ac1c8 <__aeabi_fcmple>
 80a3866:	b180      	cbz	r0, 80a388a <_ZN8PongBall4tickEv+0x66>
            xVel = -xVel;
 80a3868:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
            x = 0;
 80a386c:	f8c4 8010 	str.w	r8, [r4, #16]
            xVel = -xVel;
 80a3870:	60a6      	str	r6, [r4, #8]
        if (y <= 0) {
 80a3872:	2100      	movs	r1, #0
 80a3874:	4638      	mov	r0, r7
 80a3876:	f008 fca7 	bl	80ac1c8 <__aeabi_fcmple>
 80a387a:	b198      	cbz	r0, 80a38a4 <_ZN8PongBall4tickEv+0x80>
            yVel = -yVel;
 80a387c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
            y = 0;
 80a3880:	f8c4 8014 	str.w	r8, [r4, #20]
            yVel = -yVel;
 80a3884:	60e5      	str	r5, [r4, #12]
}
 80a3886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        } else if (x >= NUM_BARS) {
 80a388a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80a388e:	4648      	mov	r0, r9
 80a3890:	f008 fca4 	bl	80ac1dc <__aeabi_fcmpge>
 80a3894:	2800      	cmp	r0, #0
 80a3896:	d0ec      	beq.n	80a3872 <_ZN8PongBall4tickEv+0x4e>
            x = NUM_BARS-1;
 80a3898:	4b0d      	ldr	r3, [pc, #52]	; (80a38d0 <_ZN8PongBall4tickEv+0xac>)
            xVel = -xVel;
 80a389a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
            x = NUM_BARS-1;
 80a389e:	6123      	str	r3, [r4, #16]
            xVel = -xVel;
 80a38a0:	60a6      	str	r6, [r4, #8]
 80a38a2:	e7e6      	b.n	80a3872 <_ZN8PongBall4tickEv+0x4e>
        } else if (y+len >= STRIP_LENGTH) {
 80a38a4:	69a6      	ldr	r6, [r4, #24]
 80a38a6:	4630      	mov	r0, r6
 80a38a8:	f008 fa92 	bl	80abdd0 <__aeabi_i2f>
 80a38ac:	4639      	mov	r1, r7
 80a38ae:	f008 f9db 	bl	80abc68 <__addsf3>
 80a38b2:	4908      	ldr	r1, [pc, #32]	; (80a38d4 <_ZN8PongBall4tickEv+0xb0>)
 80a38b4:	f008 fc92 	bl	80ac1dc <__aeabi_fcmpge>
 80a38b8:	2800      	cmp	r0, #0
 80a38ba:	d0e4      	beq.n	80a3886 <_ZN8PongBall4tickEv+0x62>
            y = STRIP_LENGTH-len;
 80a38bc:	f1c6 003a 	rsb	r0, r6, #58	; 0x3a
 80a38c0:	f008 fa86 	bl	80abdd0 <__aeabi_i2f>
            yVel = -yVel;
 80a38c4:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
            y = STRIP_LENGTH-len;
 80a38c8:	6160      	str	r0, [r4, #20]
            yVel = -yVel;
 80a38ca:	60e5      	str	r5, [r4, #12]
}
 80a38cc:	e7db      	b.n	80a3886 <_ZN8PongBall4tickEv+0x62>
 80a38ce:	bf00      	nop
 80a38d0:	40e00000 	.word	0x40e00000
 80a38d4:	42680000 	.word	0x42680000

080a38d8 <_ZN8PongBall4xPosEv>:
int PongBall::xPos() { return (int) x; }
 80a38d8:	b508      	push	{r3, lr}
 80a38da:	6900      	ldr	r0, [r0, #16]
 80a38dc:	f008 fca8 	bl	80ac230 <__aeabi_f2iz>
 80a38e0:	bd08      	pop	{r3, pc}

080a38e2 <_ZN8PongBall4yPosEv>:
int PongBall::yPos() { return (int) y; }
 80a38e2:	b508      	push	{r3, lr}
 80a38e4:	6940      	ldr	r0, [r0, #20]
 80a38e6:	f008 fca3 	bl	80ac230 <__aeabi_f2iz>
 80a38ea:	bd08      	pop	{r3, pc}

080a38ec <_ZN8PongBall8setColorEiii>:
    this->g = g;
 80a38ec:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
    this->b = b;
 80a38f0:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80a38f2:	4770      	bx	lr

080a38f4 <_ZN10PongPaddleC1Ev>:
#include "pong_paddle.h"

#include "muse.h"

PongPaddle::PongPaddle() {}
 80a38f4:	4770      	bx	lr

080a38f6 <_ZN10PongPaddleC1Eiffffjiii>:

PongPaddle::PongPaddle(int len, float x, float y, float maxXVel, float maxYVel, unsigned int tickTime, int r, int g, int b) {
 80a38f6:	b538      	push	{r3, r4, r5, lr}
 80a38f8:	4604      	mov	r4, r0
    this->len = len;
    this->x = x;
    this->y = y;
 80a38fa:	60a3      	str	r3, [r4, #8]

int PongPaddle::xPos() { return (int) x; }
int PongPaddle::yPos() { return (int) y; }

void PongPaddle::setColor(int r, int g, int b) {
    this->r = r;
 80a38fc:	9b07      	ldr	r3, [sp, #28]
PongPaddle::PongPaddle(int len, float x, float y, float maxXVel, float maxYVel, unsigned int tickTime, int r, int g, int b) {
 80a38fe:	9d04      	ldr	r5, [sp, #16]
    this->r = r;
 80a3900:	6263      	str	r3, [r4, #36]	; 0x24
    this->g = g;
 80a3902:	9b08      	ldr	r3, [sp, #32]
PongPaddle::PongPaddle(int len, float x, float y, float maxXVel, float maxYVel, unsigned int tickTime, int r, int g, int b) {
 80a3904:	9805      	ldr	r0, [sp, #20]
    this->g = g;
 80a3906:	62a3      	str	r3, [r4, #40]	; 0x28
    this->b = b;
 80a3908:	9b09      	ldr	r3, [sp, #36]	; 0x24
    this->len = len;
 80a390a:	6021      	str	r1, [r4, #0]
    this->b = b;
 80a390c:	62e3      	str	r3, [r4, #44]	; 0x2c
    this->x = x;
 80a390e:	6062      	str	r2, [r4, #4]
    this->maxXVel = maxXVel;
 80a3910:	6165      	str	r5, [r4, #20]
    this->maxYVel = maxYVel;
 80a3912:	61a0      	str	r0, [r4, #24]
    this->xVel = maxXVel;
 80a3914:	60e5      	str	r5, [r4, #12]
    this->yVel = maxYVel;
 80a3916:	6120      	str	r0, [r4, #16]
 80a3918:	f001 fc82 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
    tick_time = tickTime;
 80a391c:	9b06      	ldr	r3, [sp, #24]
    last_tick = millis();
 80a391e:	61e0      	str	r0, [r4, #28]
    tick_time = tickTime;
 80a3920:	6223      	str	r3, [r4, #32]
}
 80a3922:	4620      	mov	r0, r4
 80a3924:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3928 <_ZN10PongPaddle4tickEP8PongBall>:
void PongPaddle::tick(PongBall * pb) {
 80a3928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a392c:	4604      	mov	r4, r0
 80a392e:	460d      	mov	r5, r1
 80a3930:	f001 fc76 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - last_tick > tick_time) {
 80a3934:	69e3      	ldr	r3, [r4, #28]
 80a3936:	1ac0      	subs	r0, r0, r3
 80a3938:	6a23      	ldr	r3, [r4, #32]
 80a393a:	4298      	cmp	r0, r3
 80a393c:	d944      	bls.n	80a39c8 <_ZN10PongPaddle4tickEP8PongBall+0xa0>
 80a393e:	f001 fc6f 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
        last_tick = millis();
 80a3942:	61e0      	str	r0, [r4, #28]
        if ((x < pb->x && pb->xVel < 0) || (x > pb->x && pb->xVel > 0)) {
 80a3944:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80a3948:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80a394c:	4640      	mov	r0, r8
 80a394e:	4649      	mov	r1, r9
 80a3950:	f008 fc30 	bl	80ac1b4 <__aeabi_fcmplt>
 80a3954:	2700      	movs	r7, #0
 80a3956:	6826      	ldr	r6, [r4, #0]
 80a3958:	b120      	cbz	r0, 80a3964 <_ZN10PongPaddle4tickEP8PongBall+0x3c>
 80a395a:	4639      	mov	r1, r7
 80a395c:	68a8      	ldr	r0, [r5, #8]
 80a395e:	f008 fc29 	bl	80ac1b4 <__aeabi_fcmplt>
 80a3962:	b958      	cbnz	r0, 80a397c <_ZN10PongPaddle4tickEP8PongBall+0x54>
 80a3964:	4649      	mov	r1, r9
 80a3966:	4640      	mov	r0, r8
 80a3968:	f008 fc42 	bl	80ac1f0 <__aeabi_fcmpgt>
 80a396c:	2800      	cmp	r0, #0
 80a396e:	d038      	beq.n	80a39e2 <_ZN10PongPaddle4tickEP8PongBall+0xba>
 80a3970:	2100      	movs	r1, #0
 80a3972:	68a8      	ldr	r0, [r5, #8]
 80a3974:	f008 fc3c 	bl	80ac1f0 <__aeabi_fcmpgt>
 80a3978:	2800      	cmp	r0, #0
 80a397a:	d032      	beq.n	80a39e2 <_ZN10PongPaddle4tickEP8PongBall+0xba>
            if (y+len < pb->y) { yVel = maxYVel; }
 80a397c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80a3980:	696d      	ldr	r5, [r5, #20]
 80a3982:	6820      	ldr	r0, [r4, #0]
 80a3984:	f008 fa24 	bl	80abdd0 <__aeabi_i2f>
 80a3988:	4641      	mov	r1, r8
 80a398a:	f008 f96d 	bl	80abc68 <__addsf3>
 80a398e:	4629      	mov	r1, r5
 80a3990:	f008 fc10 	bl	80ac1b4 <__aeabi_fcmplt>
 80a3994:	b1d0      	cbz	r0, 80a39cc <_ZN10PongPaddle4tickEP8PongBall+0xa4>
 80a3996:	69a3      	ldr	r3, [r4, #24]
 80a3998:	6123      	str	r3, [r4, #16]
        y += yVel;
 80a399a:	6921      	ldr	r1, [r4, #16]
 80a399c:	68a0      	ldr	r0, [r4, #8]
 80a399e:	f008 f963 	bl	80abc68 <__addsf3>
 80a39a2:	4605      	mov	r5, r0
 80a39a4:	60a0      	str	r0, [r4, #8]
        if ((y+len) >= STRIP_LENGTH) {
 80a39a6:	4630      	mov	r0, r6
 80a39a8:	f008 fa12 	bl	80abdd0 <__aeabi_i2f>
 80a39ac:	4629      	mov	r1, r5
 80a39ae:	f008 f95b 	bl	80abc68 <__addsf3>
 80a39b2:	492b      	ldr	r1, [pc, #172]	; (80a3a60 <_ZN10PongPaddle4tickEP8PongBall+0x138>)
 80a39b4:	f008 fc12 	bl	80ac1dc <__aeabi_fcmpge>
 80a39b8:	2800      	cmp	r0, #0
 80a39ba:	d048      	beq.n	80a3a4e <_ZN10PongPaddle4tickEP8PongBall+0x126>
            y = STRIP_LENGTH-len;
 80a39bc:	f1c6 003a 	rsb	r0, r6, #58	; 0x3a
 80a39c0:	f008 fa06 	bl	80abdd0 <__aeabi_i2f>
            yVel = 0;
 80a39c4:	6127      	str	r7, [r4, #16]
            y = STRIP_LENGTH-len;
 80a39c6:	60a0      	str	r0, [r4, #8]
}
 80a39c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            else if (y > pb->y) { yVel = -maxYVel; }
 80a39cc:	4629      	mov	r1, r5
 80a39ce:	4640      	mov	r0, r8
 80a39d0:	f008 fc0e 	bl	80ac1f0 <__aeabi_fcmpgt>
 80a39d4:	2800      	cmp	r0, #0
 80a39d6:	d0e0      	beq.n	80a399a <_ZN10PongPaddle4tickEP8PongBall+0x72>
 80a39d8:	69a3      	ldr	r3, [r4, #24]
 80a39da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a39de:	6123      	str	r3, [r4, #16]
 80a39e0:	e7db      	b.n	80a399a <_ZN10PongPaddle4tickEP8PongBall+0x72>
            if (abs(y+len/2 - STRIP_LENGTH/2) > len/4) {
 80a39e2:	eb06 70d6 	add.w	r0, r6, r6, lsr #31
 80a39e6:	1040      	asrs	r0, r0, #1
 80a39e8:	f008 f9f2 	bl	80abdd0 <__aeabi_i2f>
 80a39ec:	68a1      	ldr	r1, [r4, #8]
 80a39ee:	f008 f93b 	bl	80abc68 <__addsf3>
 80a39f2:	491c      	ldr	r1, [pc, #112]	; (80a3a64 <_ZN10PongPaddle4tickEP8PongBall+0x13c>)
 80a39f4:	4680      	mov	r8, r0
 80a39f6:	f008 f935 	bl	80abc64 <__aeabi_fsub>
 80a39fa:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80a39fe:	4630      	mov	r0, r6
 80a3a00:	2e00      	cmp	r6, #0
 80a3a02:	bfb8      	it	lt
 80a3a04:	1cf0      	addlt	r0, r6, #3
 80a3a06:	1080      	asrs	r0, r0, #2
 80a3a08:	f008 f9e2 	bl	80abdd0 <__aeabi_i2f>
 80a3a0c:	4601      	mov	r1, r0
 80a3a0e:	4628      	mov	r0, r5
 80a3a10:	f008 fbee 	bl	80ac1f0 <__aeabi_fcmpgt>
 80a3a14:	b1c8      	cbz	r0, 80a3a4a <_ZN10PongPaddle4tickEP8PongBall+0x122>
                if (y+len/2 > STRIP_LENGTH/2) { yVel = 1.0 < maxYVel ? -1.0 : -maxYVel; }
 80a3a16:	4913      	ldr	r1, [pc, #76]	; (80a3a64 <_ZN10PongPaddle4tickEP8PongBall+0x13c>)
 80a3a18:	4640      	mov	r0, r8
 80a3a1a:	f008 fbe9 	bl	80ac1f0 <__aeabi_fcmpgt>
 80a3a1e:	69a5      	ldr	r5, [r4, #24]
 80a3a20:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a3a24:	b148      	cbz	r0, 80a3a3a <_ZN10PongPaddle4tickEP8PongBall+0x112>
 80a3a26:	4628      	mov	r0, r5
 80a3a28:	f008 fbe2 	bl	80ac1f0 <__aeabi_fcmpgt>
 80a3a2c:	b918      	cbnz	r0, 80a3a36 <_ZN10PongPaddle4tickEP8PongBall+0x10e>
 80a3a2e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
                else { yVel = 1.0 < maxYVel ? 1.0 : maxYVel; }
 80a3a32:	6125      	str	r5, [r4, #16]
 80a3a34:	e7b1      	b.n	80a399a <_ZN10PongPaddle4tickEP8PongBall+0x72>
                if (y+len/2 > STRIP_LENGTH/2) { yVel = 1.0 < maxYVel ? -1.0 : -maxYVel; }
 80a3a36:	4d0c      	ldr	r5, [pc, #48]	; (80a3a68 <_ZN10PongPaddle4tickEP8PongBall+0x140>)
 80a3a38:	e7fb      	b.n	80a3a32 <_ZN10PongPaddle4tickEP8PongBall+0x10a>
                else { yVel = 1.0 < maxYVel ? 1.0 : maxYVel; }
 80a3a3a:	4628      	mov	r0, r5
 80a3a3c:	f008 fbd8 	bl	80ac1f0 <__aeabi_fcmpgt>
 80a3a40:	2800      	cmp	r0, #0
 80a3a42:	d0f6      	beq.n	80a3a32 <_ZN10PongPaddle4tickEP8PongBall+0x10a>
 80a3a44:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 80a3a48:	e7f3      	b.n	80a3a32 <_ZN10PongPaddle4tickEP8PongBall+0x10a>
                yVel = 0;
 80a3a4a:	6127      	str	r7, [r4, #16]
 80a3a4c:	e7a5      	b.n	80a399a <_ZN10PongPaddle4tickEP8PongBall+0x72>
        } else if (y <= 0) {
 80a3a4e:	2100      	movs	r1, #0
 80a3a50:	4628      	mov	r0, r5
 80a3a52:	f008 fbb9 	bl	80ac1c8 <__aeabi_fcmple>
 80a3a56:	2800      	cmp	r0, #0
 80a3a58:	d0b6      	beq.n	80a39c8 <_ZN10PongPaddle4tickEP8PongBall+0xa0>
            y = 0;
 80a3a5a:	60a7      	str	r7, [r4, #8]
            yVel = 0;
 80a3a5c:	6127      	str	r7, [r4, #16]
}
 80a3a5e:	e7b3      	b.n	80a39c8 <_ZN10PongPaddle4tickEP8PongBall+0xa0>
 80a3a60:	42680000 	.word	0x42680000
 80a3a64:	41e80000 	.word	0x41e80000
 80a3a68:	bf800000 	.word	0xbf800000

080a3a6c <_ZN10PongPaddle4xPosEv>:
int PongPaddle::xPos() { return (int) x; }
 80a3a6c:	b508      	push	{r3, lr}
 80a3a6e:	6840      	ldr	r0, [r0, #4]
 80a3a70:	f008 fbde 	bl	80ac230 <__aeabi_f2iz>
 80a3a74:	bd08      	pop	{r3, pc}

080a3a76 <_ZN10PongPaddle4yPosEv>:
int PongPaddle::yPos() { return (int) y; }
 80a3a76:	b508      	push	{r3, lr}
 80a3a78:	6880      	ldr	r0, [r0, #8]
 80a3a7a:	f008 fbd9 	bl	80ac230 <__aeabi_f2iz>
 80a3a7e:	bd08      	pop	{r3, pc}

080a3a80 <_ZN10PongPaddle8setColorEiii>:
    this->g = g;
 80a3a80:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
    this->b = b;
 80a3a84:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80a3a86:	4770      	bx	lr

080a3a88 <_Z9web_indexR9WebServerNS_14ConnectionTypeEPcbPv>:
 * Function: web_index
 * Description: Static callback function to display the homepage of the web server
 * Parameters: See Webduino documentation
 *             obj is a pointer to the instance of Server that added the callback
 * ================================================================== */
void web_index(WebServer &server, WebServer::ConnectionType type, char * c, bool b, void * obj) {
 80a3a88:	b538      	push	{r3, r4, r5, lr}
 80a3a8a:	460d      	mov	r5, r1
    server.httpSuccess();
 80a3a8c:	2200      	movs	r2, #0
 80a3a8e:	4906      	ldr	r1, [pc, #24]	; (80a3aa8 <_Z9web_indexR9WebServerNS_14ConnectionTypeEPcbPv+0x20>)
void web_index(WebServer &server, WebServer::ConnectionType type, char * c, bool b, void * obj) {
 80a3a90:	4604      	mov	r4, r0
    server.httpSuccess();
 80a3a92:	f001 f8d9 	bl	80a4c48 <_ZN9WebServer11httpSuccessEPKcS1_>

    if (type != WebServer::HEAD) {
 80a3a96:	2d02      	cmp	r5, #2
 80a3a98:	d005      	beq.n	80a3aa6 <_Z9web_indexR9WebServerNS_14ConnectionTypeEPcbPv+0x1e>
      server.printP(control_panel);
 80a3a9a:	4620      	mov	r0, r4
    }
}
 80a3a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      server.printP(control_panel);
 80a3aa0:	4902      	ldr	r1, [pc, #8]	; (80a3aac <_Z9web_indexR9WebServerNS_14ConnectionTypeEPcbPv+0x24>)
 80a3aa2:	f001 b80f 	b.w	80a4ac4 <_ZN9WebServer6printPEPKh>
}
 80a3aa6:	bd38      	pop	{r3, r4, r5, pc}
 80a3aa8:	080ac949 	.word	0x080ac949
 80a3aac:	080ac99a 	.word	0x080ac99a

080a3ab0 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv>:
 * Function: web_input
 * Description: Static callback function to handle input to the server
 * Parameters: See Webduino documentation
 *             obj is a pointer to the instance of Server that added the callback
 * ================================================================== */
void web_input(WebServer &server, WebServer::ConnectionType type, char * c, bool b, void * obj) {
 80a3ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (type == WebServer::POST) {
 80a3ab4:	2903      	cmp	r1, #3
void web_input(WebServer &server, WebServer::ConnectionType type, char * c, bool b, void * obj) {
 80a3ab6:	b08a      	sub	sp, #40	; 0x28
 80a3ab8:	4604      	mov	r4, r0
 80a3aba:	460d      	mov	r5, r1
 80a3abc:	9e12      	ldr	r6, [sp, #72]	; 0x48
    if (type == WebServer::POST) {
 80a3abe:	d150      	bne.n	80a3b62 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0xb2>
        char name[16], value[16];
        do {
            // Read all POST params, returns false when no more params
            repeat = server.readPOSTparam(name, 16, value, 16);

            if (strcmp(name, "visualizer") == 0) {
 80a3ac0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80a3b88 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0xd8>
                    case VISUALIZER_WHEEL:
                        s->set_visualizer(type); break;
                    default:
                        s->set_visualizer(VISUALIZER_BARS); break;
                }
            } else if (strcmp(name, "other") == 0) {
 80a3ac4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80a3b8c <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0xdc>
                    case AMBIENT_LIGHTING:
                        s->set_visualizer(type); break;
                    default:
                        s->set_visualizer(BOUNCING_LINES); break;
                }
            } else if (strcmp(name, "power") == 0) {
 80a3ac8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80a3b90 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0xe0>
            repeat = server.readPOSTparam(name, 16, value, 16);
 80a3acc:	2210      	movs	r2, #16
 80a3ace:	ab06      	add	r3, sp, #24
 80a3ad0:	9200      	str	r2, [sp, #0]
 80a3ad2:	a902      	add	r1, sp, #8
 80a3ad4:	4620      	mov	r0, r4
 80a3ad6:	f001 f9f8 	bl	80a4eca <_ZN9WebServer13readPOSTparamEPciS0_i>
            if (strcmp(name, "visualizer") == 0) {
 80a3ada:	4641      	mov	r1, r8
            repeat = server.readPOSTparam(name, 16, value, 16);
 80a3adc:	4607      	mov	r7, r0
            if (strcmp(name, "visualizer") == 0) {
 80a3ade:	a802      	add	r0, sp, #8
 80a3ae0:	f008 fc8f 	bl	80ac402 <strcmp>
 80a3ae4:	4605      	mov	r5, r0
 80a3ae6:	b988      	cbnz	r0, 80a3b0c <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x5c>
                int type = strtol(value, NULL, 10);
 80a3ae8:	4601      	mov	r1, r0
 80a3aea:	220a      	movs	r2, #10
 80a3aec:	a806      	add	r0, sp, #24
 80a3aee:	f008 fd4b 	bl	80ac588 <strtol>
    visualizer_type = type;
 80a3af2:	2805      	cmp	r0, #5
 80a3af4:	bf88      	it	hi
 80a3af6:	4628      	movhi	r0, r5
 80a3af8:	61f0      	str	r0, [r6, #28]
        do {
 80a3afa:	2f00      	cmp	r7, #0
 80a3afc:	d1e6      	bne.n	80a3acc <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x1c>
                s->set_power(strtol(value, NULL, 10));
            }
        } while (repeat);
            // after procesing the POST data, tell the web browser to reload
            // the page using a GET method.
            server.httpSeeOther("/web_input");
 80a3afe:	4620      	mov	r0, r4
 80a3b00:	491d      	ldr	r1, [pc, #116]	; (80a3b78 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0xc8>)
 80a3b02:	f001 f8f3 	bl	80a4cec <_ZN9WebServer12httpSeeOtherEPKc>

        /* we don't output the body for a HEAD request */
        if (type == WebServer::GET) {
            server.printP(control_panel);
        }
}
 80a3b06:	b00a      	add	sp, #40	; 0x28
 80a3b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            } else if (strcmp(name, "other") == 0) {
 80a3b0c:	4649      	mov	r1, r9
 80a3b0e:	a802      	add	r0, sp, #8
 80a3b10:	f008 fc77 	bl	80ac402 <strcmp>
 80a3b14:	4601      	mov	r1, r0
 80a3b16:	b998      	cbnz	r0, 80a3b40 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x90>
                int type = strtol(value, NULL, 10);
 80a3b18:	220a      	movs	r2, #10
 80a3b1a:	a806      	add	r0, sp, #24
 80a3b1c:	f008 fd34 	bl	80ac588 <strtol>
                switch (type) {
 80a3b20:	2842      	cmp	r0, #66	; 0x42
 80a3b22:	d008      	beq.n	80a3b36 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x86>
 80a3b24:	f1a0 024d 	sub.w	r2, r0, #77	; 0x4d
 80a3b28:	2a16      	cmp	r2, #22
 80a3b2a:	d806      	bhi.n	80a3b3a <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x8a>
 80a3b2c:	2301      	movs	r3, #1
 80a3b2e:	4093      	lsls	r3, r2
 80a3b30:	4a12      	ldr	r2, [pc, #72]	; (80a3b7c <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0xcc>)
 80a3b32:	4213      	tst	r3, r2
 80a3b34:	d001      	beq.n	80a3b3a <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x8a>
    visualizer_type = type;
 80a3b36:	61f0      	str	r0, [r6, #28]
}
 80a3b38:	e7df      	b.n	80a3afa <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x4a>
    visualizer_type = type;
 80a3b3a:	234d      	movs	r3, #77	; 0x4d
 80a3b3c:	61f3      	str	r3, [r6, #28]
}
 80a3b3e:	e7dc      	b.n	80a3afa <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x4a>
            } else if (strcmp(name, "power") == 0) {
 80a3b40:	4651      	mov	r1, sl
 80a3b42:	a802      	add	r0, sp, #8
 80a3b44:	f008 fc5d 	bl	80ac402 <strcmp>
 80a3b48:	4605      	mov	r5, r0
 80a3b4a:	2800      	cmp	r0, #0
 80a3b4c:	d1d5      	bne.n	80a3afa <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x4a>
                s->set_power(strtol(value, NULL, 10));
 80a3b4e:	4601      	mov	r1, r0
 80a3b50:	220a      	movs	r2, #10
 80a3b52:	a806      	add	r0, sp, #24
 80a3b54:	f008 fd18 	bl	80ac588 <strtol>
        power_status = onOff;
 80a3b58:	2801      	cmp	r0, #1
 80a3b5a:	bf88      	it	hi
 80a3b5c:	4628      	movhi	r0, r5
 80a3b5e:	61b0      	str	r0, [r6, #24]
 80a3b60:	e7cb      	b.n	80a3afa <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x4a>
        server.httpSuccess();
 80a3b62:	2200      	movs	r2, #0
 80a3b64:	4906      	ldr	r1, [pc, #24]	; (80a3b80 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0xd0>)
 80a3b66:	f001 f86f 	bl	80a4c48 <_ZN9WebServer11httpSuccessEPKcS1_>
        if (type == WebServer::GET) {
 80a3b6a:	2d01      	cmp	r5, #1
 80a3b6c:	d1cb      	bne.n	80a3b06 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x56>
            server.printP(control_panel);
 80a3b6e:	4620      	mov	r0, r4
 80a3b70:	4904      	ldr	r1, [pc, #16]	; (80a3b84 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0xd4>)
 80a3b72:	f000 ffa7 	bl	80a4ac4 <_ZN9WebServer6printPEPKh>
 80a3b76:	e7c6      	b.n	80a3b06 <_Z9web_inputR9WebServerNS_14ConnectionTypeEPcbPv+0x56>
 80a3b78:	080ac979 	.word	0x080ac979
 80a3b7c:	00400801 	.word	0x00400801
 80a3b80:	080ac949 	.word	0x080ac949
 80a3b84:	080ac99a 	.word	0x080ac99a
 80a3b88:	080ac962 	.word	0x080ac962
 80a3b8c:	080ac96d 	.word	0x080ac96d
 80a3b90:	080ac973 	.word	0x080ac973

080a3b94 <_ZN6ServerC1Ev>:
Server::Server() {}
 80a3b94:	4770      	bx	lr
	...

080a3b98 <_ZN6Server4initEv>:
void Server::init() {
 80a3b98:	b530      	push	{r4, r5, lr}
 80a3b9a:	4604      	mov	r4, r0
    webserver.setDefaultCommand(&web_index);
 80a3b9c:	4d18      	ldr	r5, [pc, #96]	; (80a3c00 <_ZN6Server4initEv+0x68>)
void Server::init() {
 80a3b9e:	b089      	sub	sp, #36	; 0x24
    webserver.setDefaultCommand(&web_index);
 80a3ba0:	4628      	mov	r0, r5
 80a3ba2:	4918      	ldr	r1, [pc, #96]	; (80a3c04 <_ZN6Server4initEv+0x6c>)
 80a3ba4:	f000 ff51 	bl	80a4a4a <_ZN9WebServer17setDefaultCommandEPFvRS_NS_14ConnectionTypeEPcbPvE>
    webserver.addCommand("web_input", &web_input, this);
 80a3ba8:	4623      	mov	r3, r4
 80a3baa:	4628      	mov	r0, r5
 80a3bac:	4a16      	ldr	r2, [pc, #88]	; (80a3c08 <_ZN6Server4initEv+0x70>)
 80a3bae:	4917      	ldr	r1, [pc, #92]	; (80a3c0c <_ZN6Server4initEv+0x74>)
 80a3bb0:	f000 ff4e 	bl	80a4a50 <_ZN9WebServer10addCommandEPKcPFvRS_NS_14ConnectionTypeEPcbPvES5_>
    webserver.begin();
 80a3bb4:	4628      	mov	r0, r5
 80a3bb6:	f000 ff45 	bl	80a4a44 <_ZN9WebServer5beginEv>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a3bba:	4621      	mov	r1, r4
 80a3bbc:	2300      	movs	r3, #0
 80a3bbe:	2204      	movs	r2, #4
 80a3bc0:	4813      	ldr	r0, [pc, #76]	; (80a3c10 <_ZN6Server4initEv+0x78>)
 80a3bc2:	f001 fd03 	bl	80a55cc <spark_variable>
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a3bc6:	2200      	movs	r2, #0
 80a3bc8:	4b12      	ldr	r3, [pc, #72]	; (80a3c14 <_ZN6Server4initEv+0x7c>)
 80a3bca:	4611      	mov	r1, r2
 80a3bcc:	6858      	ldr	r0, [r3, #4]
 80a3bce:	f001 fd2d 	bl	80a562c <network_config>
        return IPAddress(wifi_config()->nw.aucIP);
 80a3bd2:	1c81      	adds	r1, r0, #2
 80a3bd4:	a802      	add	r0, sp, #8
 80a3bd6:	f002 f913 	bl	80a5e00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    sprintf(myIpAddress, "%d.%d.%d.%d", myIp[0], myIp[1], myIp[2], myIp[3]);
 80a3bda:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80a3bde:	4620      	mov	r0, r4
 80a3be0:	9301      	str	r3, [sp, #4]
 80a3be2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80a3be6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a3bea:	9300      	str	r3, [sp, #0]
 80a3bec:	490a      	ldr	r1, [pc, #40]	; (80a3c18 <_ZN6Server4initEv+0x80>)
 80a3bee:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80a3bf2:	f001 fd9b 	bl	80a572c <sprintf>
    power_status = SERVER_POWER_ON;
 80a3bf6:	2301      	movs	r3, #1
 80a3bf8:	61a3      	str	r3, [r4, #24]
}
 80a3bfa:	b009      	add	sp, #36	; 0x24
 80a3bfc:	bd30      	pop	{r4, r5, pc}
 80a3bfe:	bf00      	nop
 80a3c00:	20000f00 	.word	0x20000f00
 80a3c04:	080a3a89 	.word	0x080a3a89
 80a3c08:	080a3ab1 	.word	0x080a3ab1
 80a3c0c:	080ac97a 	.word	0x080ac97a
 80a3c10:	080ac984 	.word	0x080ac984
 80a3c14:	200014d0 	.word	0x200014d0
 80a3c18:	080ac98e 	.word	0x080ac98e

080a3c1c <_ZN6Server4tickEv>:
    int len = 256;
 80a3c1c:	f44f 7380 	mov.w	r3, #256	; 0x100
void Server::tick() {
 80a3c20:	b500      	push	{lr}
 80a3c22:	b0c3      	sub	sp, #268	; 0x10c
    webserver.processConnection(buff, &len);
 80a3c24:	4804      	ldr	r0, [pc, #16]	; (80a3c38 <_ZN6Server4tickEv+0x1c>)
 80a3c26:	aa01      	add	r2, sp, #4
 80a3c28:	a902      	add	r1, sp, #8
    int len = 256;
 80a3c2a:	9301      	str	r3, [sp, #4]
    webserver.processConnection(buff, &len);
 80a3c2c:	f001 fa30 	bl	80a5090 <_ZN9WebServer17processConnectionEPcPi>
}
 80a3c30:	b043      	add	sp, #268	; 0x10c
 80a3c32:	f85d fb04 	ldr.w	pc, [sp], #4
 80a3c36:	bf00      	nop
 80a3c38:	20000f00 	.word	0x20000f00

080a3c3c <_ZN6Server10powered_onEv>:
}
 80a3c3c:	6980      	ldr	r0, [r0, #24]
 80a3c3e:	4770      	bx	lr

080a3c40 <_ZN6Server10visualizerEv>:
}
 80a3c40:	69c0      	ldr	r0, [r0, #28]
 80a3c42:	4770      	bx	lr

080a3c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a3c44:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a3c46:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a3c48:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a3c4a:	b17c      	cbz	r4, 80a3c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a3c4c:	6863      	ldr	r3, [r4, #4]
 80a3c4e:	3b01      	subs	r3, #1
 80a3c50:	6063      	str	r3, [r4, #4]
 80a3c52:	b95b      	cbnz	r3, 80a3c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a3c54:	6823      	ldr	r3, [r4, #0]
 80a3c56:	4620      	mov	r0, r4
 80a3c58:	689b      	ldr	r3, [r3, #8]
 80a3c5a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a3c5c:	68a3      	ldr	r3, [r4, #8]
 80a3c5e:	3b01      	subs	r3, #1
 80a3c60:	60a3      	str	r3, [r4, #8]
 80a3c62:	b91b      	cbnz	r3, 80a3c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a3c64:	6823      	ldr	r3, [r4, #0]
 80a3c66:	4620      	mov	r0, r4
 80a3c68:	68db      	ldr	r3, [r3, #12]
 80a3c6a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a3c6c:	4628      	mov	r0, r5
 80a3c6e:	bd38      	pop	{r3, r4, r5, pc}

080a3c70 <_ZN9WebServerD1Ev>:
                       URLPARAM_VALUE_OFLO,
                       URLPARAM_BOTH_OFLO,
                       URLPARAM_EOS         // No params left
};

class WebServer: public Print
 80a3c70:	b538      	push	{r3, r4, r5, lr}
 80a3c72:	4604      	mov	r4, r0
 80a3c74:	4b09      	ldr	r3, [pc, #36]	; (80a3c9c <_ZN9WebServerD1Ev+0x2c>)
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a3c76:	4d0a      	ldr	r5, [pc, #40]	; (80a3ca0 <_ZN9WebServerD1Ev+0x30>)
 80a3c78:	6003      	str	r3, [r0, #0]
 80a3c7a:	6385      	str	r5, [r0, #56]	; 0x38
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a3c7c:	3050      	adds	r0, #80	; 0x50
 80a3c7e:	f7ff ffe1 	bl	80a3c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    sock_handle_t _sock;
    TCPClient _client;

public:
    TCPServer(uint16_t, network_interface_t nif=0);
    ~TCPServer() { stop(); }
 80a3c82:	4620      	mov	r0, r4
 80a3c84:	4b07      	ldr	r3, [pc, #28]	; (80a3ca4 <_ZN9WebServerD1Ev+0x34>)
 80a3c86:	f840 3f08 	str.w	r3, [r0, #8]!
 80a3c8a:	f002 fe4b 	bl	80a6924 <_ZN9TCPServer4stopEv>
 80a3c8e:	61e5      	str	r5, [r4, #28]
 80a3c90:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80a3c94:	f7ff ffd6 	bl	80a3c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3c98:	4620      	mov	r0, r4
 80a3c9a:	bd38      	pop	{r3, r4, r5, pc}
 80a3c9c:	080ad1b0 	.word	0x080ad1b0
 80a3ca0:	080ad434 	.word	0x080ad434
 80a3ca4:	080ad4f4 	.word	0x080ad4f4

080a3ca8 <_ZN9WebServerD0Ev>:
 80a3ca8:	b510      	push	{r4, lr}
 80a3caa:	4604      	mov	r4, r0
 80a3cac:	f7ff ffe0 	bl	80a3c70 <_ZN9WebServerD1Ev>
 80a3cb0:	4620      	mov	r0, r4
 80a3cb2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80a3cb6:	f003 fd34 	bl	80a7722 <_ZdlPvj>
 80a3cba:	4620      	mov	r0, r4
 80a3cbc:	bd10      	pop	{r4, pc}
	...

080a3cc0 <_GLOBAL__sub_I_webserver>:
}
 80a3cc0:	b510      	push	{r4, lr}
WebServer webserver(PREFIX, 80);
 80a3cc2:	4c06      	ldr	r4, [pc, #24]	; (80a3cdc <_GLOBAL__sub_I_webserver+0x1c>)
 80a3cc4:	2250      	movs	r2, #80	; 0x50
 80a3cc6:	4620      	mov	r0, r4
 80a3cc8:	4905      	ldr	r1, [pc, #20]	; (80a3ce0 <_GLOBAL__sub_I_webserver+0x20>)
 80a3cca:	f000 fe97 	bl	80a49fc <_ZN9WebServerC1EPKct>
 80a3cce:	4620      	mov	r0, r4
}
 80a3cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
WebServer webserver(PREFIX, 80);
 80a3cd4:	4a03      	ldr	r2, [pc, #12]	; (80a3ce4 <_GLOBAL__sub_I_webserver+0x24>)
 80a3cd6:	4904      	ldr	r1, [pc, #16]	; (80a3ce8 <_GLOBAL__sub_I_webserver+0x28>)
 80a3cd8:	f003 bd1e 	b.w	80a7718 <__aeabi_atexit>
 80a3cdc:	20000f00 	.word	0x20000f00
 80a3ce0:	080ad176 	.word	0x080ad176
 80a3ce4:	2000006c 	.word	0x2000006c
 80a3ce8:	080a3c71 	.word	0x080a3c71

080a3cec <_ZN6BufferC1Et>:
#include "Buffer.h"

Buffer::Buffer(uint16_t size) {
 80a3cec:	b538      	push	{r3, r4, r5, lr}
 80a3cee:	2300      	movs	r3, #0
 80a3cf0:	80c3      	strh	r3, [r0, #6]
 80a3cf2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80a3cf6:	4604      	mov	r4, r0
 80a3cf8:	6083      	str	r3, [r0, #8]
  this->data = (uint8_t *) malloc(size);
 80a3cfa:	4608      	mov	r0, r1
Buffer::Buffer(uint16_t size) {
 80a3cfc:	460d      	mov	r5, r1
  this->data = (uint8_t *) malloc(size);
 80a3cfe:	f001 fcfd 	bl	80a56fc <malloc>
  this->size = data != NULL? size : 0;
 80a3d02:	2800      	cmp	r0, #0
 80a3d04:	bf08      	it	eq
 80a3d06:	2500      	moveq	r5, #0
  this->data = (uint8_t *) malloc(size);
 80a3d08:	6020      	str	r0, [r4, #0]
  this->size = data != NULL? size : 0;
 80a3d0a:	80a5      	strh	r5, [r4, #4]
}
 80a3d0c:	4620      	mov	r0, r4
 80a3d0e:	bd38      	pop	{r3, r4, r5, pc}

080a3d10 <_ZN6Buffer9availableEv>:

uint16_t Buffer::available() {
  return offset < limit? limit - offset : offset - limit;
 80a3d10:	8903      	ldrh	r3, [r0, #8]
 80a3d12:	88c0      	ldrh	r0, [r0, #6]
 80a3d14:	4283      	cmp	r3, r0
 80a3d16:	bf34      	ite	cc
 80a3d18:	1ac3      	subcc	r3, r0, r3
 80a3d1a:	1a1b      	subcs	r3, r3, r0
 80a3d1c:	b298      	uxth	r0, r3
}
 80a3d1e:	4770      	bx	lr

080a3d20 <_ZN6Buffer4markEv>:

void Buffer::mark() {
  if (markOffset == INVALID_MARK_OFFSET) {
 80a3d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a3d24:	8942      	ldrh	r2, [r0, #10]
 80a3d26:	429a      	cmp	r2, r3
    markOffset = offset;
 80a3d28:	bf04      	itt	eq
 80a3d2a:	8903      	ldrheq	r3, [r0, #8]
 80a3d2c:	8143      	strheq	r3, [r0, #10]
  }
}
 80a3d2e:	4770      	bx	lr

080a3d30 <_ZN6Buffer5resetEv>:

void Buffer::reset() {
  if (markOffset != INVALID_MARK_OFFSET) {
 80a3d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a3d34:	8942      	ldrh	r2, [r0, #10]
 80a3d36:	429a      	cmp	r2, r3
    offset = markOffset;
 80a3d38:	bf1c      	itt	ne
 80a3d3a:	8102      	strhne	r2, [r0, #8]
    markOffset = INVALID_MARK_OFFSET;
 80a3d3c:	8143      	strhne	r3, [r0, #10]
  }
}
 80a3d3e:	4770      	bx	lr

080a3d40 <_ZN6Buffer9setOffsetEt>:

void Buffer::setOffset(uint16_t offset) {
  this->offset = offset;
 80a3d40:	8101      	strh	r1, [r0, #8]
}
 80a3d42:	4770      	bx	lr

080a3d44 <_ZN6Buffer9getOffsetEv>:

uint16_t Buffer::getOffset() {
  return offset;
}
 80a3d44:	8900      	ldrh	r0, [r0, #8]
 80a3d46:	4770      	bx	lr

080a3d48 <_ZN6Buffer4readEP3UDP>:

void Buffer::read(UDP * udp) {
 80a3d48:	b510      	push	{r4, lr}
  offset = 0;
 80a3d4a:	2300      	movs	r3, #0
void Buffer::read(UDP * udp) {
 80a3d4c:	4604      	mov	r4, r0
  offset = 0;
 80a3d4e:	8123      	strh	r3, [r4, #8]
  limit = udp->read(data, size);
 80a3d50:	680b      	ldr	r3, [r1, #0]
void Buffer::read(UDP * udp) {
 80a3d52:	4608      	mov	r0, r1
  limit = udp->read(data, size);
 80a3d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3d56:	88a2      	ldrh	r2, [r4, #4]
 80a3d58:	6821      	ldr	r1, [r4, #0]
 80a3d5a:	4798      	blx	r3
 80a3d5c:	80e0      	strh	r0, [r4, #6]
}
 80a3d5e:	bd10      	pop	{r4, pc}

080a3d60 <_ZN6Buffer9readUInt8Ev>:

uint8_t Buffer::readUInt8() {
  return data[offset++];
 80a3d60:	8903      	ldrh	r3, [r0, #8]
 80a3d62:	6802      	ldr	r2, [r0, #0]
 80a3d64:	1c59      	adds	r1, r3, #1
 80a3d66:	8101      	strh	r1, [r0, #8]
}
 80a3d68:	5cd0      	ldrb	r0, [r2, r3]
 80a3d6a:	4770      	bx	lr

080a3d6c <_ZN6Buffer10readUInt16Ev>:

uint16_t Buffer::readUInt16() {
 80a3d6c:	b538      	push	{r3, r4, r5, lr}
 80a3d6e:	4605      	mov	r5, r0
  return readUInt8() << 8 | readUInt8();
 80a3d70:	f7ff fff6 	bl	80a3d60 <_ZN6Buffer9readUInt8Ev>
 80a3d74:	4604      	mov	r4, r0
 80a3d76:	4628      	mov	r0, r5
 80a3d78:	f7ff fff2 	bl	80a3d60 <_ZN6Buffer9readUInt8Ev>
 80a3d7c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 80a3d80:	b280      	uxth	r0, r0
 80a3d82:	bd38      	pop	{r3, r4, r5, pc}

080a3d84 <_ZN6Buffer10writeUInt8Eh>:

void Buffer::writeUInt8(uint8_t value) {
  if (offset < size) {
 80a3d84:	8903      	ldrh	r3, [r0, #8]
 80a3d86:	8882      	ldrh	r2, [r0, #4]
void Buffer::writeUInt8(uint8_t value) {
 80a3d88:	b510      	push	{r4, lr}
  if (offset < size) {
 80a3d8a:	429a      	cmp	r2, r3
    data[offset++] = value;
 80a3d8c:	bf81      	itttt	hi
 80a3d8e:	6802      	ldrhi	r2, [r0, #0]
 80a3d90:	1c5c      	addhi	r4, r3, #1
 80a3d92:	8104      	strhhi	r4, [r0, #8]
 80a3d94:	54d1      	strbhi	r1, [r2, r3]
  }
}
 80a3d96:	bd10      	pop	{r4, pc}

080a3d98 <_ZN6Buffer11writeUInt16Et>:

void Buffer::writeUInt16(uint16_t value) {
 80a3d98:	b538      	push	{r3, r4, r5, lr}
 80a3d9a:	460c      	mov	r4, r1
  writeUInt8(value >> 8);
 80a3d9c:	0a09      	lsrs	r1, r1, #8
 80a3d9e:	f7ff fff1 	bl	80a3d84 <_ZN6Buffer10writeUInt8Eh>
  writeUInt8(value);
 80a3da2:	b2e1      	uxtb	r1, r4
}
 80a3da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeUInt8(value);
 80a3da8:	f7ff bfec 	b.w	80a3d84 <_ZN6Buffer10writeUInt8Eh>

080a3dac <_ZN6Buffer11writeUInt32Em>:

void Buffer::writeUInt32(uint32_t value) {
 80a3dac:	b538      	push	{r3, r4, r5, lr}
 80a3dae:	460c      	mov	r4, r1
  writeUInt8(value >> 24);
 80a3db0:	0e09      	lsrs	r1, r1, #24
 80a3db2:	f7ff ffe7 	bl	80a3d84 <_ZN6Buffer10writeUInt8Eh>
  writeUInt8(value >> 16);
 80a3db6:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80a3dba:	f7ff ffe3 	bl	80a3d84 <_ZN6Buffer10writeUInt8Eh>
  writeUInt8(value >> 8);
 80a3dbe:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80a3dc2:	f7ff ffdf 	bl	80a3d84 <_ZN6Buffer10writeUInt8Eh>
  writeUInt8(value);
 80a3dc6:	b2e1      	uxtb	r1, r4
}
 80a3dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeUInt8(value);
 80a3dcc:	f7ff bfda 	b.w	80a3d84 <_ZN6Buffer10writeUInt8Eh>

080a3dd0 <_ZN6Buffer5writeEP3UDP>:

void Buffer::write(UDP * udp) {
 80a3dd0:	b510      	push	{r4, lr}
 80a3dd2:	4604      	mov	r4, r0
  udp->write(data, offset);
 80a3dd4:	680b      	ldr	r3, [r1, #0]
void Buffer::write(UDP * udp) {
 80a3dd6:	4608      	mov	r0, r1
  udp->write(data, offset);
 80a3dd8:	68db      	ldr	r3, [r3, #12]
 80a3dda:	8922      	ldrh	r2, [r4, #8]
 80a3ddc:	6821      	ldr	r1, [r4, #0]
 80a3dde:	4798      	blx	r3

  offset = 0;
 80a3de0:	2300      	movs	r3, #0
 80a3de2:	8123      	strh	r3, [r4, #8]
}
 80a3de4:	bd10      	pop	{r4, pc}

080a3de6 <_ZN6Buffer5clearEv>:

void Buffer::clear() {
  offset = 0;
 80a3de6:	2300      	movs	r3, #0
 80a3de8:	8103      	strh	r3, [r0, #8]
  limit = 0;
 80a3dea:	80c3      	strh	r3, [r0, #6]
}
 80a3dec:	4770      	bx	lr

080a3dee <_ZN5Label7matchedEtt>:

  return label;
}

void Label::matched(uint16_t type, uint16_t cls) {
}
 80a3dee:	4770      	bx	lr

080a3df0 <_ZN9HostLabel7matchedEtt>:
  this->aRecord = aRecord;
  this->nsecRecord = nsecRecord;
}

void HostLabel::matched(uint16_t type, uint16_t cls) {
  switch(type) {
 80a3df0:	2901      	cmp	r1, #1
void HostLabel::matched(uint16_t type, uint16_t cls) {
 80a3df2:	b510      	push	{r4, lr}
 80a3df4:	4604      	mov	r4, r0
  switch(type) {
 80a3df6:	d001      	beq.n	80a3dfc <_ZN9HostLabel7matchedEtt+0xc>
 80a3df8:	29ff      	cmp	r1, #255	; 0xff
 80a3dfa:	d107      	bne.n	80a3e0c <_ZN9HostLabel7matchedEtt+0x1c>
    case A_TYPE:
    case ANY_TYPE:
    aRecord->setAnswerRecord();
 80a3dfc:	69a0      	ldr	r0, [r4, #24]
 80a3dfe:	f000 fd7d 	bl	80a48fc <_ZN6Record15setAnswerRecordEv>
    nsecRecord->setAdditionalRecord();
 80a3e02:	69e0      	ldr	r0, [r4, #28]
    break;

    default:
    nsecRecord->setAnswerRecord();
  }
}
 80a3e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nsecRecord->setAdditionalRecord();
 80a3e08:	f000 bd82 	b.w	80a4910 <_ZN6Record19setAdditionalRecordEv>
    nsecRecord->setAnswerRecord();
 80a3e0c:	69c0      	ldr	r0, [r0, #28]
}
 80a3e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nsecRecord->setAnswerRecord();
 80a3e12:	f000 bd73 	b.w	80a48fc <_ZN6Record15setAnswerRecordEv>
	...

080a3e18 <_ZN5LabelC1E6StringPS_b>:
Label::Label(String name, Label * nextLabel, bool caseSensitive) {
 80a3e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3e1c:	461f      	mov	r7, r3
 80a3e1e:	4b15      	ldr	r3, [pc, #84]	; (80a3e74 <_ZN5LabelC1E6StringPS_b+0x5c>)
 80a3e20:	2600      	movs	r6, #0
 80a3e22:	6003      	str	r3, [r0, #0]
 80a3e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a3e28:	4604      	mov	r4, r0
 80a3e2a:	6046      	str	r6, [r0, #4]
 80a3e2c:	8283      	strh	r3, [r0, #20]
  data = (uint8_t *) malloc(name.length() + 1);
 80a3e2e:	6888      	ldr	r0, [r1, #8]
Label::Label(String name, Label * nextLabel, bool caseSensitive) {
 80a3e30:	460d      	mov	r5, r1
  data = (uint8_t *) malloc(name.length() + 1);
 80a3e32:	3001      	adds	r0, #1
Label::Label(String name, Label * nextLabel, bool caseSensitive) {
 80a3e34:	4690      	mov	r8, r2
  data = (uint8_t *) malloc(name.length() + 1);
 80a3e36:	f001 fc61 	bl	80a56fc <malloc>
 80a3e3a:	60a0      	str	r0, [r4, #8]
  if (data) {
 80a3e3c:	b188      	cbz	r0, 80a3e62 <_ZN5LabelC1E6StringPS_b+0x4a>
    data[0] = name.length();
 80a3e3e:	68ab      	ldr	r3, [r5, #8]
 80a3e40:	7003      	strb	r3, [r0, #0]
    for (uint8_t i = 0; i < name.length(); i++) {
 80a3e42:	68ab      	ldr	r3, [r5, #8]
 80a3e44:	b2f1      	uxtb	r1, r6
 80a3e46:	428b      	cmp	r3, r1
 80a3e48:	f106 0601 	add.w	r6, r6, #1
 80a3e4c:	d90b      	bls.n	80a3e66 <_ZN5LabelC1E6StringPS_b+0x4e>
      data[i + 1] = name.charAt(i);
 80a3e4e:	4628      	mov	r0, r5
 80a3e50:	f8d4 a008 	ldr.w	sl, [r4, #8]
 80a3e54:	f101 0901 	add.w	r9, r1, #1
 80a3e58:	f002 fa3d 	bl	80a62d6 <_ZNK6String6charAtEj>
 80a3e5c:	f80a 0009 	strb.w	r0, [sl, r9]
    for (uint8_t i = 0; i < name.length(); i++) {
 80a3e60:	e7ef      	b.n	80a3e42 <_ZN5LabelC1E6StringPS_b+0x2a>
    data = EMPTY_DATA;
 80a3e62:	6863      	ldr	r3, [r4, #4]
 80a3e64:	60a3      	str	r3, [r4, #8]
}
 80a3e66:	4620      	mov	r0, r4
  this->nextLabel = nextLabel;
 80a3e68:	f8c4 8010 	str.w	r8, [r4, #16]
  this->caseSensitive = caseSensitive;
 80a3e6c:	7327      	strb	r7, [r4, #12]
}
 80a3e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3e72:	bf00      	nop
 80a3e74:	080ad064 	.word	0x080ad064

080a3e78 <_ZN5Label5writeEP6Buffer>:
void Label::write(Buffer * buffer) {
 80a3e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3e7a:	4604      	mov	r4, r0
 80a3e7c:	460d      	mov	r5, r1
    if (label->writeOffset == INVALID_OFFSET) {
 80a3e7e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80a3e82:	1c5a      	adds	r2, r3, #1
 80a3e84:	d116      	bne.n	80a3eb4 <_ZN5Label5writeEP6Buffer+0x3c>
      label->writeOffset = buffer->getOffset();
 80a3e86:	4628      	mov	r0, r5
 80a3e88:	f7ff ff5c 	bl	80a3d44 <_ZN6Buffer9getOffsetEv>
      uint8_t size = label->data[0] + 1;
 80a3e8c:	2700      	movs	r7, #0
 80a3e8e:	68a3      	ldr	r3, [r4, #8]
      label->writeOffset = buffer->getOffset();
 80a3e90:	82a0      	strh	r0, [r4, #20]
      uint8_t size = label->data[0] + 1;
 80a3e92:	781e      	ldrb	r6, [r3, #0]
 80a3e94:	3601      	adds	r6, #1
 80a3e96:	b2f6      	uxtb	r6, r6
      for (uint8_t i = 0; i < size; i++) {
 80a3e98:	b2fb      	uxtb	r3, r7
 80a3e9a:	42b3      	cmp	r3, r6
 80a3e9c:	d206      	bcs.n	80a3eac <_ZN5Label5writeEP6Buffer+0x34>
        buffer->writeUInt8(label->data[i]);
 80a3e9e:	68a3      	ldr	r3, [r4, #8]
 80a3ea0:	4628      	mov	r0, r5
 80a3ea2:	5dd9      	ldrb	r1, [r3, r7]
 80a3ea4:	f7ff ff6e 	bl	80a3d84 <_ZN6Buffer10writeUInt8Eh>
      for (uint8_t i = 0; i < size; i++) {
 80a3ea8:	3701      	adds	r7, #1
 80a3eaa:	e7f5      	b.n	80a3e98 <_ZN5Label5writeEP6Buffer+0x20>
      label = label->nextLabel;
 80a3eac:	6924      	ldr	r4, [r4, #16]
  while (label) {
 80a3eae:	2c00      	cmp	r4, #0
 80a3eb0:	d1e5      	bne.n	80a3e7e <_ZN5Label5writeEP6Buffer+0x6>
}
 80a3eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      buffer->writeUInt16((LABEL_POINTER << 8) | label->writeOffset);
 80a3eb4:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80a3eb8:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80a3ebc:	4628      	mov	r0, r5
 80a3ebe:	b299      	uxth	r1, r3
}
 80a3ec0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      buffer->writeUInt16((LABEL_POINTER << 8) | label->writeOffset);
 80a3ec4:	f7ff bf68 	b.w	80a3d98 <_ZN6Buffer11writeUInt16Et>

080a3ec8 <_ZN5Label5resetEv>:
    label->writeOffset = INVALID_OFFSET;
 80a3ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a3ecc:	8283      	strh	r3, [r0, #20]
    label = label->nextLabel;
 80a3ece:	6900      	ldr	r0, [r0, #16]
  while (label != NULL) {
 80a3ed0:	2800      	cmp	r0, #0
 80a3ed2:	d1fb      	bne.n	80a3ecc <_ZN5Label5resetEv+0x4>
}
 80a3ed4:	4770      	bx	lr

080a3ed6 <_ZN5Label6Reader7hasNextEv>:
bool Label::Reader::hasNext() {
 80a3ed6:	b508      	push	{r3, lr}
 80a3ed8:	4603      	mov	r3, r0
  return c != END_OF_NAME && buffer->available() > 0;
 80a3eda:	7900      	ldrb	r0, [r0, #4]
 80a3edc:	b128      	cbz	r0, 80a3eea <_ZN5Label6Reader7hasNextEv+0x14>
 80a3ede:	6818      	ldr	r0, [r3, #0]
 80a3ee0:	f7ff ff16 	bl	80a3d10 <_ZN6Buffer9availableEv>
 80a3ee4:	3800      	subs	r0, #0
 80a3ee6:	bf18      	it	ne
 80a3ee8:	2001      	movne	r0, #1
}
 80a3eea:	bd08      	pop	{r3, pc}

080a3eec <_ZN5Label6Reader4nextEv>:
uint8_t Label::Reader::next() {
 80a3eec:	b538      	push	{r3, r4, r5, lr}
 80a3eee:	4604      	mov	r4, r0
  c = buffer->readUInt8();
 80a3ef0:	6820      	ldr	r0, [r4, #0]
 80a3ef2:	f7ff ff35 	bl	80a3d60 <_ZN6Buffer9readUInt8Ev>
 80a3ef6:	7120      	strb	r0, [r4, #4]
  while ((c & LABEL_POINTER) == LABEL_POINTER) {
 80a3ef8:	7920      	ldrb	r0, [r4, #4]
 80a3efa:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
 80a3efe:	2bc0      	cmp	r3, #192	; 0xc0
 80a3f00:	d115      	bne.n	80a3f2e <_ZN5Label6Reader4nextEv+0x42>
    if (buffer->available() > 0) {
 80a3f02:	6820      	ldr	r0, [r4, #0]
 80a3f04:	f7ff ff04 	bl	80a3d10 <_ZN6Buffer9availableEv>
 80a3f08:	2800      	cmp	r0, #0
 80a3f0a:	d0f5      	beq.n	80a3ef8 <_ZN5Label6Reader4nextEv+0xc>
      uint8_t c2 = buffer->readUInt8();
 80a3f0c:	6820      	ldr	r0, [r4, #0]
 80a3f0e:	f7ff ff27 	bl	80a3d60 <_ZN6Buffer9readUInt8Ev>
      uint16_t pointerOffset = ((c & ~LABEL_POINTER) << 8) | c2;
 80a3f12:	7925      	ldrb	r5, [r4, #4]
 80a3f14:	022d      	lsls	r5, r5, #8
 80a3f16:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
 80a3f1a:	4305      	orrs	r5, r0
 80a3f1c:	b2ad      	uxth	r5, r5
      buffer->mark();
 80a3f1e:	6820      	ldr	r0, [r4, #0]
 80a3f20:	f7ff fefe 	bl	80a3d20 <_ZN6Buffer4markEv>
      buffer->setOffset(pointerOffset);
 80a3f24:	4629      	mov	r1, r5
 80a3f26:	6820      	ldr	r0, [r4, #0]
 80a3f28:	f7ff ff0a 	bl	80a3d40 <_ZN6Buffer9setOffsetEt>
      c = buffer->readUInt8();
 80a3f2c:	e7e0      	b.n	80a3ef0 <_ZN5Label6Reader4nextEv+0x4>
}
 80a3f2e:	bd38      	pop	{r3, r4, r5, pc}

080a3f30 <_ZN5Label8IteratorC1EPS_>:
Label::Iterator::Iterator(Label * label) {
 80a3f30:	2200      	movs	r2, #0
 80a3f32:	7242      	strb	r2, [r0, #9]
 80a3f34:	2201      	movs	r2, #1
  this->startLabel = label;
 80a3f36:	e9c0 1100 	strd	r1, r1, [r0]
Label::Iterator::Iterator(Label * label) {
 80a3f3a:	7282      	strb	r2, [r0, #10]
  this->size = label->data[0];
 80a3f3c:	688a      	ldr	r2, [r1, #8]
 80a3f3e:	7812      	ldrb	r2, [r2, #0]
 80a3f40:	7202      	strb	r2, [r0, #8]
}
 80a3f42:	4770      	bx	lr

080a3f44 <_ZN5Label8Iterator16equalsIgnoreCaseEh>:
  return (c >= 'a' && c <= 'z' && label->data[offset] == c - 32) || (c >= 'A' && c <= 'Z' && label->data[offset] == c + 32);
 80a3f44:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 80a3f48:	2b19      	cmp	r3, #25
 80a3f4a:	d808      	bhi.n	80a3f5e <_ZN5Label8Iterator16equalsIgnoreCaseEh+0x1a>
 80a3f4c:	6842      	ldr	r2, [r0, #4]
 80a3f4e:	7a43      	ldrb	r3, [r0, #9]
 80a3f50:	6892      	ldr	r2, [r2, #8]
 80a3f52:	3920      	subs	r1, #32
 80a3f54:	5cd0      	ldrb	r0, [r2, r3]
 80a3f56:	1a43      	subs	r3, r0, r1
 80a3f58:	4258      	negs	r0, r3
 80a3f5a:	4158      	adcs	r0, r3
 80a3f5c:	4770      	bx	lr
 80a3f5e:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 80a3f62:	2b19      	cmp	r3, #25
 80a3f64:	d805      	bhi.n	80a3f72 <_ZN5Label8Iterator16equalsIgnoreCaseEh+0x2e>
 80a3f66:	6842      	ldr	r2, [r0, #4]
 80a3f68:	7a43      	ldrb	r3, [r0, #9]
 80a3f6a:	6892      	ldr	r2, [r2, #8]
 80a3f6c:	3120      	adds	r1, #32
 80a3f6e:	5cd0      	ldrb	r0, [r2, r3]
 80a3f70:	e7f1      	b.n	80a3f56 <_ZN5Label8Iterator16equalsIgnoreCaseEh+0x12>
 80a3f72:	2000      	movs	r0, #0
}
 80a3f74:	4770      	bx	lr

080a3f76 <_ZN5Label8Iterator5matchEh>:
bool Label::Iterator::match(uint8_t c) {
 80a3f76:	b570      	push	{r4, r5, r6, lr}
 80a3f78:	4604      	mov	r4, r0
  if (matches) {
 80a3f7a:	7a80      	ldrb	r0, [r0, #10]
 80a3f7c:	b1c8      	cbz	r0, 80a3fb2 <_ZN5Label8Iterator5matchEh+0x3c>
      offset = 0;
 80a3f7e:	2200      	movs	r2, #0
    while (offset > size && label) {
 80a3f80:	7a65      	ldrb	r5, [r4, #9]
 80a3f82:	7a26      	ldrb	r6, [r4, #8]
 80a3f84:	6863      	ldr	r3, [r4, #4]
 80a3f86:	42ae      	cmp	r6, r5
 80a3f88:	d215      	bcs.n	80a3fb6 <_ZN5Label8Iterator5matchEh+0x40>
 80a3f8a:	b1b3      	cbz	r3, 80a3fba <_ZN5Label8Iterator5matchEh+0x44>
      label = label->nextLabel;
 80a3f8c:	691b      	ldr	r3, [r3, #16]
 80a3f8e:	6063      	str	r3, [r4, #4]
      size = label->data[0];
 80a3f90:	689b      	ldr	r3, [r3, #8]
 80a3f92:	781b      	ldrb	r3, [r3, #0]
      offset = 0;
 80a3f94:	7262      	strb	r2, [r4, #9]
      size = label->data[0];
 80a3f96:	7223      	strb	r3, [r4, #8]
    while (offset > size && label) {
 80a3f98:	e7f2      	b.n	80a3f80 <_ZN5Label8Iterator5matchEh+0xa>
    matches = offset <= size && label && (label->data[offset] == c || (!label->caseSensitive && equalsIgnoreCase(c)));
 80a3f9a:	689a      	ldr	r2, [r3, #8]
 80a3f9c:	5d52      	ldrb	r2, [r2, r5]
 80a3f9e:	428a      	cmp	r2, r1
 80a3fa0:	d004      	beq.n	80a3fac <_ZN5Label8Iterator5matchEh+0x36>
 80a3fa2:	7b1b      	ldrb	r3, [r3, #12]
 80a3fa4:	b94b      	cbnz	r3, 80a3fba <_ZN5Label8Iterator5matchEh+0x44>
 80a3fa6:	4620      	mov	r0, r4
 80a3fa8:	f7ff ffcc 	bl	80a3f44 <_ZN5Label8Iterator16equalsIgnoreCaseEh>
    offset++;
 80a3fac:	3501      	adds	r5, #1
    matches = offset <= size && label && (label->data[offset] == c || (!label->caseSensitive && equalsIgnoreCase(c)));
 80a3fae:	72a0      	strb	r0, [r4, #10]
    offset++;
 80a3fb0:	7265      	strb	r5, [r4, #9]
  return matches;
 80a3fb2:	7aa0      	ldrb	r0, [r4, #10]
}
 80a3fb4:	bd70      	pop	{r4, r5, r6, pc}
    matches = offset <= size && label && (label->data[offset] == c || (!label->caseSensitive && equalsIgnoreCase(c)));
 80a3fb6:	2b00      	cmp	r3, #0
 80a3fb8:	d1ef      	bne.n	80a3f9a <_ZN5Label8Iterator5matchEh+0x24>
 80a3fba:	2000      	movs	r0, #0
 80a3fbc:	e7f6      	b.n	80a3fac <_ZN5Label8Iterator5matchEh+0x36>

080a3fbe <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer>:
Label * Label::Matcher::match(std::map<String, Label *> labels, Buffer * buffer) {
 80a3fbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3fc2:	b083      	sub	sp, #12
  Iterator * iterators[labels.size()];
 80a3fc4:	694b      	ldr	r3, [r1, #20]
Label * Label::Matcher::match(std::map<String, Label *> labels, Buffer * buffer) {
 80a3fc6:	af00      	add	r7, sp, #0
  Iterator * iterators[labels.size()];
 80a3fc8:	009b      	lsls	r3, r3, #2
 80a3fca:	3307      	adds	r3, #7
 80a3fcc:	f023 0307 	bic.w	r3, r3, #7
 80a3fd0:	ebad 0d03 	sub.w	sp, sp, r3
Label * Label::Matcher::match(std::map<String, Label *> labels, Buffer * buffer) {
 80a3fd4:	460e      	mov	r6, r1
 80a3fd6:	4615      	mov	r5, r2
  Iterator * iterators[labels.size()];
 80a3fd8:	46e8      	mov	r8, sp
       *  %map.
       *  Iteration is done in ascending order according to the keys.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
      { return _M_t.begin(); }
 80a3fda:	f04f 0900 	mov.w	r9, #0
 80a3fde:	68cc      	ldr	r4, [r1, #12]
      { return iterator(&this->_M_impl._M_header); }
 80a3fe0:	f101 0a04 	add.w	sl, r1, #4
  for (i = labels.begin(); i != labels.end(); ++i) {
 80a3fe4:	4554      	cmp	r4, sl
 80a3fe6:	d014      	beq.n	80a4012 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x54>
    iterators[idx++] = new Iterator(i->second);
 80a3fe8:	200c      	movs	r0, #12
 80a3fea:	f8d4 b020 	ldr.w	fp, [r4, #32]
 80a3fee:	f7fc f854 	bl	80a009a <_Znwj>
 80a3ff2:	4603      	mov	r3, r0
 80a3ff4:	b110      	cbz	r0, 80a3ffc <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x3e>
 80a3ff6:	4659      	mov	r1, fp
 80a3ff8:	f7ff ff9a 	bl	80a3f30 <_ZN5Label8IteratorC1EPS_>
 80a3ffc:	fa5f f289 	uxtb.w	r2, r9
	_M_node = _Rb_tree_increment(_M_node);
 80a4000:	4620      	mov	r0, r4
 80a4002:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
 80a4006:	f003 fbe5 	bl	80a77d4 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
 80a400a:	f109 0901 	add.w	r9, r9, #1
 80a400e:	4604      	mov	r4, r0
	return *this;
 80a4010:	e7e8      	b.n	80a3fe4 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x26>
  Reader * reader = new Reader(buffer);
 80a4012:	2008      	movs	r0, #8
 80a4014:	f7fc f841 	bl	80a009a <_Znwj>
 80a4018:	4604      	mov	r4, r0
 80a401a:	b110      	cbz	r0, 80a4022 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x64>
Label::Reader::Reader(Buffer * buffer) {
 80a401c:	2301      	movs	r3, #1
  this->buffer = buffer;
 80a401e:	6005      	str	r5, [r0, #0]
Label::Reader::Reader(Buffer * buffer) {
 80a4020:	7103      	strb	r3, [r0, #4]
  while (reader->hasNext()) {
 80a4022:	4620      	mov	r0, r4
 80a4024:	f7ff ff57 	bl	80a3ed6 <_ZN5Label6Reader7hasNextEv>
 80a4028:	b390      	cbz	r0, 80a4090 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0xd2>
    uint8_t size = reader->next();
 80a402a:	4620      	mov	r0, r4
 80a402c:	f7ff ff5e 	bl	80a3eec <_ZN5Label6Reader4nextEv>
 80a4030:	2300      	movs	r3, #0
 80a4032:	4681      	mov	r9, r0
    for (uint8_t i = 0; i < labels.size(); i++) {
 80a4034:	6972      	ldr	r2, [r6, #20]
 80a4036:	f103 0a01 	add.w	sl, r3, #1
 80a403a:	b2db      	uxtb	r3, r3
 80a403c:	429a      	cmp	r2, r3
 80a403e:	d906      	bls.n	80a404e <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x90>
      iterators[i]->match(size);
 80a4040:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80a4044:	4649      	mov	r1, r9
 80a4046:	f7ff ff96 	bl	80a3f76 <_ZN5Label8Iterator5matchEh>
    for (uint8_t i = 0; i < labels.size(); i++) {
 80a404a:	4653      	mov	r3, sl
 80a404c:	e7f2      	b.n	80a4034 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x76>
 80a404e:	f04f 0a00 	mov.w	sl, #0
    while(idx < size && reader->hasNext()) {
 80a4052:	fa5f f38a 	uxtb.w	r3, sl
 80a4056:	4599      	cmp	r9, r3
 80a4058:	d9e3      	bls.n	80a4022 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x64>
 80a405a:	4620      	mov	r0, r4
 80a405c:	f7ff ff3b 	bl	80a3ed6 <_ZN5Label6Reader7hasNextEv>
 80a4060:	2800      	cmp	r0, #0
 80a4062:	d0de      	beq.n	80a4022 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x64>
      uint8_t c = reader->next();
 80a4064:	4620      	mov	r0, r4
 80a4066:	f7ff ff41 	bl	80a3eec <_ZN5Label6Reader4nextEv>
 80a406a:	2300      	movs	r3, #0
 80a406c:	4601      	mov	r1, r0
      for (uint8_t i = 0; i < labels.size(); i++) {
 80a406e:	6972      	ldr	r2, [r6, #20]
 80a4070:	f103 0b01 	add.w	fp, r3, #1
 80a4074:	b2db      	uxtb	r3, r3
 80a4076:	429a      	cmp	r2, r3
 80a4078:	d907      	bls.n	80a408a <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0xcc>
        iterators[i]->match(c);
 80a407a:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80a407e:	6079      	str	r1, [r7, #4]
 80a4080:	f7ff ff79 	bl	80a3f76 <_ZN5Label8Iterator5matchEh>
      for (uint8_t i = 0; i < labels.size(); i++) {
 80a4084:	465b      	mov	r3, fp
 80a4086:	6879      	ldr	r1, [r7, #4]
 80a4088:	e7f1      	b.n	80a406e <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0xb0>
      idx++;
 80a408a:	f10a 0a01 	add.w	sl, sl, #1
    while(idx < size && reader->hasNext()) {
 80a408e:	e7e0      	b.n	80a4052 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x94>
  buffer->reset();
 80a4090:	4628      	mov	r0, r5
 80a4092:	f7ff fe4d 	bl	80a3d30 <_ZN6Buffer5resetEv>
  return c == END_OF_NAME;
 80a4096:	7923      	ldrb	r3, [r4, #4]
  if (reader->endOfName()) {
 80a4098:	b9e3      	cbnz	r3, 80a40d4 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x116>
      { return _M_t.empty(); }

      /** Returns the size of the %map.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return _M_t.size(); }
 80a409a:	6971      	ldr	r1, [r6, #20]
    while (label == NULL && idx < labels.size()) {
 80a409c:	428b      	cmp	r3, r1
 80a409e:	d219      	bcs.n	80a40d4 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x116>
      if (iterators[idx]->matched()) {
 80a40a0:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
  return matches;
 80a40a4:	3301      	adds	r3, #1
      if (iterators[idx]->matched()) {
 80a40a6:	7a90      	ldrb	r0, [r2, #10]
 80a40a8:	b2db      	uxtb	r3, r3
 80a40aa:	2800      	cmp	r0, #0
 80a40ac:	d0f6      	beq.n	80a409c <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0xde>
  return startLabel;
 80a40ae:	6815      	ldr	r5, [r2, #0]
    while (label == NULL && idx < labels.size()) {
 80a40b0:	2d00      	cmp	r5, #0
 80a40b2:	d0f3      	beq.n	80a409c <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0xde>
  Label * label = NULL;
 80a40b4:	f04f 0900 	mov.w	r9, #0
  for (uint8_t i = 0; i < labels.size(); i++) {
 80a40b8:	6972      	ldr	r2, [r6, #20]
 80a40ba:	fa5f f389 	uxtb.w	r3, r9
 80a40be:	4293      	cmp	r3, r2
 80a40c0:	d20a      	bcs.n	80a40d8 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x11a>
    delete iterators[i];
 80a40c2:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80a40c6:	b110      	cbz	r0, 80a40ce <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0x110>
 80a40c8:	210c      	movs	r1, #12
 80a40ca:	f003 fb2a 	bl	80a7722 <_ZdlPvj>
  for (uint8_t i = 0; i < labels.size(); i++) {
 80a40ce:	f109 0901 	add.w	r9, r9, #1
 80a40d2:	e7f1      	b.n	80a40b8 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0xfa>
  Label * label = NULL;
 80a40d4:	2500      	movs	r5, #0
 80a40d6:	e7ed      	b.n	80a40b4 <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer+0xf6>
  delete reader;
 80a40d8:	4620      	mov	r0, r4
 80a40da:	2108      	movs	r1, #8
 80a40dc:	f003 fb21 	bl	80a7722 <_ZdlPvj>
}
 80a40e0:	4628      	mov	r0, r5
 80a40e2:	370c      	adds	r7, #12
 80a40e4:	46bd      	mov	sp, r7
 80a40e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a40ec <_ZN9HostLabelC1EP6RecordS1_6StringP5Labelb>:
HostLabel::HostLabel(Record * aRecord, Record * nsecRecord, String name, Label * nextLabel, bool caseSensitive):Label(name, nextLabel, caseSensitive) {
 80a40ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a40ee:	4604      	mov	r4, r0
 80a40f0:	460e      	mov	r6, r1
 80a40f2:	4668      	mov	r0, sp
 80a40f4:	4619      	mov	r1, r3
 80a40f6:	4615      	mov	r5, r2
 80a40f8:	f002 f85d 	bl	80a61b6 <_ZN6StringC1ERKS_>
 80a40fc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80a4100:	4669      	mov	r1, sp
 80a4102:	9a08      	ldr	r2, [sp, #32]
 80a4104:	4620      	mov	r0, r4
 80a4106:	f7ff fe87 	bl	80a3e18 <_ZN5LabelC1E6StringPS_b>
 80a410a:	4668      	mov	r0, sp
 80a410c:	f001 ffbf 	bl	80a608e <_ZN6StringD1Ev>
}
 80a4110:	4620      	mov	r0, r4
HostLabel::HostLabel(Record * aRecord, Record * nsecRecord, String name, Label * nextLabel, bool caseSensitive):Label(name, nextLabel, caseSensitive) {
 80a4112:	4b03      	ldr	r3, [pc, #12]	; (80a4120 <_ZN9HostLabelC1EP6RecordS1_6StringP5Labelb+0x34>)
  this->nsecRecord = nsecRecord;
 80a4114:	e9c4 6506 	strd	r6, r5, [r4, #24]
HostLabel::HostLabel(Record * aRecord, Record * nsecRecord, String name, Label * nextLabel, bool caseSensitive):Label(name, nextLabel, caseSensitive) {
 80a4118:	6023      	str	r3, [r4, #0]
}
 80a411a:	b004      	add	sp, #16
 80a411c:	bd70      	pop	{r4, r5, r6, pc}
 80a411e:	bf00      	nop
 80a4120:	080ad070 	.word	0x080ad070

080a4124 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 80a4124:	b508      	push	{r3, lr}
      { return __x < __y; }
 80a4126:	f002 f8c8 	bl	80a62ba <_ZNK6StringltERKS_>
 80a412a:	3800      	subs	r0, #0
 80a412c:	bf18      	it	ne
 80a412e:	2001      	movne	r0, #1
 80a4130:	bd08      	pop	{r3, pc}
	...

080a4134 <_ZN4MDNS5beginEv>:

void MDNS::addTXTEntry(String key, String value) {
  txtRecord->addEntry(key, value);
}

bool MDNS::begin() {
 80a4134:	b530      	push	{r4, r5, lr}
 80a4136:	4604      	mov	r4, r0
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a4138:	4d0f      	ldr	r5, [pc, #60]	; (80a4178 <_ZN4MDNS5beginEv+0x44>)
 80a413a:	b089      	sub	sp, #36	; 0x24
 80a413c:	2200      	movs	r2, #0
 80a413e:	6868      	ldr	r0, [r5, #4]
 80a4140:	4611      	mov	r1, r2
 80a4142:	f001 fa93 	bl	80a566c <network_ready>
  // Wait for WiFi to connect
  while (!WiFi.ready()) {
 80a4146:	2800      	cmp	r0, #0
 80a4148:	d0f8      	beq.n	80a413c <_ZN4MDNS5beginEv+0x8>
  }

  udp->begin(MDNS_PORT);
 80a414a:	6820      	ldr	r0, [r4, #0]
 80a414c:	2200      	movs	r2, #0
 80a414e:	6803      	ldr	r3, [r0, #0]
 80a4150:	f241 41e9 	movw	r1, #5353	; 0x14e9
 80a4154:	6a1b      	ldr	r3, [r3, #32]
 80a4156:	4798      	blx	r3
  udp->joinMulticast(IPAddress(224, 0, 0, 251));
 80a4158:	23fb      	movs	r3, #251	; 0xfb
 80a415a:	6824      	ldr	r4, [r4, #0]
 80a415c:	9300      	str	r3, [sp, #0]
 80a415e:	2300      	movs	r3, #0
 80a4160:	21e0      	movs	r1, #224	; 0xe0
 80a4162:	461a      	mov	r2, r3
 80a4164:	a802      	add	r0, sp, #8
 80a4166:	f001 fe73 	bl	80a5e50 <_ZN9IPAddressC1Ehhhh>
 80a416a:	4620      	mov	r0, r4
 80a416c:	a902      	add	r1, sp, #8
 80a416e:	f002 ff39 	bl	80a6fe4 <_ZN3UDP13joinMulticastERK9IPAddress>

  // TODO: Probing + announcing

  return true;
}
 80a4172:	2001      	movs	r0, #1
 80a4174:	b009      	add	sp, #36	; 0x24
 80a4176:	bd30      	pop	{r4, r5, pc}
 80a4178:	200014d0 	.word	0x200014d0

080a417c <_ZN4MDNS10readHeaderEP6Buffer>:
      }
    }
  }
}

MDNS::QueryHeader MDNS::readHeader(Buffer * buffer) {
 80a417c:	b538      	push	{r3, r4, r5, lr}
 80a417e:	4604      	mov	r4, r0
  QueryHeader header;

  if (buffer->available() >= 12) {
 80a4180:	4610      	mov	r0, r2
MDNS::QueryHeader MDNS::readHeader(Buffer * buffer) {
 80a4182:	4615      	mov	r5, r2
  if (buffer->available() >= 12) {
 80a4184:	f7ff fdc4 	bl	80a3d10 <_ZN6Buffer9availableEv>
 80a4188:	280b      	cmp	r0, #11
 80a418a:	d917      	bls.n	80a41bc <_ZN4MDNS10readHeaderEP6Buffer+0x40>
    header.id = buffer->readUInt16();
 80a418c:	4628      	mov	r0, r5
 80a418e:	f7ff fded 	bl	80a3d6c <_ZN6Buffer10readUInt16Ev>
 80a4192:	8020      	strh	r0, [r4, #0]
    header.flags = buffer->readUInt16();
 80a4194:	4628      	mov	r0, r5
 80a4196:	f7ff fde9 	bl	80a3d6c <_ZN6Buffer10readUInt16Ev>
 80a419a:	8060      	strh	r0, [r4, #2]
    header.qdcount = buffer->readUInt16();
 80a419c:	4628      	mov	r0, r5
 80a419e:	f7ff fde5 	bl	80a3d6c <_ZN6Buffer10readUInt16Ev>
 80a41a2:	80a0      	strh	r0, [r4, #4]
    header.ancount = buffer->readUInt16();
 80a41a4:	4628      	mov	r0, r5
 80a41a6:	f7ff fde1 	bl	80a3d6c <_ZN6Buffer10readUInt16Ev>
 80a41aa:	80e0      	strh	r0, [r4, #6]
    header.nscount = buffer->readUInt16();
 80a41ac:	4628      	mov	r0, r5
 80a41ae:	f7ff fddd 	bl	80a3d6c <_ZN6Buffer10readUInt16Ev>
 80a41b2:	8120      	strh	r0, [r4, #8]
    header.arcount = buffer->readUInt16();
 80a41b4:	4628      	mov	r0, r5
 80a41b6:	f7ff fdd9 	bl	80a3d6c <_ZN6Buffer10readUInt16Ev>
 80a41ba:	8160      	strh	r0, [r4, #10]
  }

  return header;
}
 80a41bc:	4620      	mov	r0, r4
 80a41be:	bd38      	pop	{r3, r4, r5, pc}

080a41c0 <_ZN4MDNS14writeResponsesEv>:

void MDNS::writeResponses() {
 80a41c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  uint8_t answerCount = 0;
  uint8_t additionalCount = 0;
 80a41c4:	2500      	movs	r5, #0
void MDNS::writeResponses() {
 80a41c6:	4604      	mov	r4, r0
  uint8_t answerCount = 0;
 80a41c8:	462f      	mov	r7, r5
 80a41ca:	6b46      	ldr	r6, [r0, #52]	; 0x34

  for (std::vector<Record *>::const_iterator i = records.begin(); i != records.end(); ++i) {
 80a41cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a41ce:	46b0      	mov	r8, r6
 80a41d0:	42b3      	cmp	r3, r6
 80a41d2:	d00f      	beq.n	80a41f4 <_ZN4MDNS14writeResponsesEv+0x34>
    if ((*i)->isAnswerRecord()) {
 80a41d4:	6830      	ldr	r0, [r6, #0]
 80a41d6:	f000 fb94 	bl	80a4902 <_ZN6Record14isAnswerRecordEv>
 80a41da:	b108      	cbz	r0, 80a41e0 <_ZN4MDNS14writeResponsesEv+0x20>
      answerCount++;
 80a41dc:	3701      	adds	r7, #1
 80a41de:	b2ff      	uxtb	r7, r7
    }
    if ((*i)->isAdditionalRecord()) {
 80a41e0:	f8d8 0000 	ldr.w	r0, [r8]
 80a41e4:	3604      	adds	r6, #4
 80a41e6:	f000 fb96 	bl	80a4916 <_ZN6Record18isAdditionalRecordEv>
 80a41ea:	2800      	cmp	r0, #0
 80a41ec:	d0ee      	beq.n	80a41cc <_ZN4MDNS14writeResponsesEv+0xc>
      additionalCount++;
 80a41ee:	3501      	adds	r5, #1
 80a41f0:	b2ed      	uxtb	r5, r5

      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
      {
	++_M_current;
	return *this;
 80a41f2:	e7eb      	b.n	80a41cc <_ZN4MDNS14writeResponsesEv+0xc>
    }
  }

  if (answerCount > 0) {
 80a41f4:	2f00      	cmp	r7, #0
 80a41f6:	d034      	beq.n	80a4262 <_ZN4MDNS14writeResponsesEv+0xa2>
    buffer->writeUInt16(0x0);
 80a41f8:	2100      	movs	r1, #0
 80a41fa:	6860      	ldr	r0, [r4, #4]
 80a41fc:	f7ff fdcc 	bl	80a3d98 <_ZN6Buffer11writeUInt16Et>
    buffer->writeUInt16(0x8400);
 80a4200:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 80a4204:	6860      	ldr	r0, [r4, #4]
 80a4206:	f7ff fdc7 	bl	80a3d98 <_ZN6Buffer11writeUInt16Et>
    buffer->writeUInt16(0x0);
 80a420a:	2100      	movs	r1, #0
 80a420c:	6860      	ldr	r0, [r4, #4]
 80a420e:	f7ff fdc3 	bl	80a3d98 <_ZN6Buffer11writeUInt16Et>
    buffer->writeUInt16(answerCount);
 80a4212:	4639      	mov	r1, r7
 80a4214:	6860      	ldr	r0, [r4, #4]
 80a4216:	f7ff fdbf 	bl	80a3d98 <_ZN6Buffer11writeUInt16Et>
    buffer->writeUInt16(0x0);
 80a421a:	2100      	movs	r1, #0
 80a421c:	6860      	ldr	r0, [r4, #4]
 80a421e:	f7ff fdbb 	bl	80a3d98 <_ZN6Buffer11writeUInt16Et>
    buffer->writeUInt16(additionalCount);
 80a4222:	4629      	mov	r1, r5
 80a4224:	6860      	ldr	r0, [r4, #4]
 80a4226:	f7ff fdb7 	bl	80a3d98 <_ZN6Buffer11writeUInt16Et>
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 80a422a:	6b65      	ldr	r5, [r4, #52]	; 0x34

    for (std::vector<Record *>::const_iterator i = records.begin(); i != records.end(); ++i) {
 80a422c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a422e:	42ab      	cmp	r3, r5
 80a4230:	d009      	beq.n	80a4246 <_ZN4MDNS14writeResponsesEv+0x86>
      if ((*i)->isAnswerRecord()) {
 80a4232:	6828      	ldr	r0, [r5, #0]
 80a4234:	f000 fb65 	bl	80a4902 <_ZN6Record14isAnswerRecordEv>
 80a4238:	b118      	cbz	r0, 80a4242 <_ZN4MDNS14writeResponsesEv+0x82>
        (*i)->write(buffer);
 80a423a:	6861      	ldr	r1, [r4, #4]
 80a423c:	6828      	ldr	r0, [r5, #0]
 80a423e:	f000 fb75 	bl	80a492c <_ZN6Record5writeEP6Buffer>
      operator++() _GLIBCXX_NOEXCEPT
 80a4242:	3504      	adds	r5, #4
	return *this;
 80a4244:	e7f2      	b.n	80a422c <_ZN4MDNS14writeResponsesEv+0x6c>
      base() const _GLIBCXX_NOEXCEPT
 80a4246:	6b65      	ldr	r5, [r4, #52]	; 0x34
      }
    }

    for (std::vector<Record *>::const_iterator i = records.begin(); i != records.end(); ++i) {
 80a4248:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a424a:	42ab      	cmp	r3, r5
 80a424c:	d009      	beq.n	80a4262 <_ZN4MDNS14writeResponsesEv+0xa2>
      if ((*i)->isAdditionalRecord()) {
 80a424e:	6828      	ldr	r0, [r5, #0]
 80a4250:	f000 fb61 	bl	80a4916 <_ZN6Record18isAdditionalRecordEv>
 80a4254:	b118      	cbz	r0, 80a425e <_ZN4MDNS14writeResponsesEv+0x9e>
        (*i)->write(buffer);
 80a4256:	6861      	ldr	r1, [r4, #4]
 80a4258:	6828      	ldr	r0, [r5, #0]
 80a425a:	f000 fb67 	bl	80a492c <_ZN6Record5writeEP6Buffer>
      operator++() _GLIBCXX_NOEXCEPT
 80a425e:	3504      	adds	r5, #4
	return *this;
 80a4260:	e7f2      	b.n	80a4248 <_ZN4MDNS14writeResponsesEv+0x88>
      { return _M_t.begin(); }
 80a4262:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      { return iterator(&this->_M_impl._M_header); }
 80a4264:	f104 0620 	add.w	r6, r4, #32
      }
    }
  }

  for (std::map<String, Label *>::const_iterator i = labels.begin(); i != labels.end(); ++i) {
 80a4268:	42b5      	cmp	r5, r6
 80a426a:	d007      	beq.n	80a427c <_ZN4MDNS14writeResponsesEv+0xbc>
    i->second->reset();
 80a426c:	6a28      	ldr	r0, [r5, #32]
 80a426e:	f7ff fe2b 	bl	80a3ec8 <_ZN5Label5resetEv>
	_M_node = _Rb_tree_increment(_M_node);
 80a4272:	4628      	mov	r0, r5
 80a4274:	f003 faae 	bl	80a77d4 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
 80a4278:	4605      	mov	r5, r0
	return *this;
 80a427a:	e7f5      	b.n	80a4268 <_ZN4MDNS14writeResponsesEv+0xa8>
      : _M_current(__i) { }
 80a427c:	6b65      	ldr	r5, [r4, #52]	; 0x34
  }

  for (std::vector<Record *>::const_iterator i = records.begin(); i != records.end(); ++i) {
 80a427e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4280:	429d      	cmp	r5, r3
 80a4282:	d004      	beq.n	80a428e <_ZN4MDNS14writeResponsesEv+0xce>
    (*i)->reset();
 80a4284:	f855 0b04 	ldr.w	r0, [r5], #4
 80a4288:	f000 fb69 	bl	80a495e <_ZN6Record5resetEv>
	return *this;
 80a428c:	e7f7      	b.n	80a427e <_ZN4MDNS14writeResponsesEv+0xbe>
  }
}
 80a428e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a4292 <_ZN4MDNS18isAlphaDigitHyphenE6String>:

bool MDNS::isAlphaDigitHyphen(String string) {
 80a4292:	b538      	push	{r3, r4, r5, lr}
 80a4294:	460c      	mov	r4, r1
 80a4296:	2500      	movs	r5, #0
  bool result = true;

  uint8_t idx = 0;

  while (result && idx < string.length()) {
 80a4298:	68a3      	ldr	r3, [r4, #8]
 80a429a:	b2e9      	uxtb	r1, r5
 80a429c:	428b      	cmp	r3, r1
 80a429e:	d913      	bls.n	80a42c8 <_ZN4MDNS18isAlphaDigitHyphenE6String+0x36>
    uint8_t c = string.charAt(idx++);
 80a42a0:	4620      	mov	r0, r4
 80a42a2:	f002 f818 	bl	80a62d6 <_ZNK6String6charAtEj>

    result = (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '-';
 80a42a6:	f020 0320 	bic.w	r3, r0, #32
 80a42aa:	3b41      	subs	r3, #65	; 0x41
 80a42ac:	b2db      	uxtb	r3, r3
 80a42ae:	2b19      	cmp	r3, #25
 80a42b0:	d908      	bls.n	80a42c4 <_ZN4MDNS18isAlphaDigitHyphenE6String+0x32>
 80a42b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a42b6:	b2db      	uxtb	r3, r3
 80a42b8:	2b09      	cmp	r3, #9
 80a42ba:	d903      	bls.n	80a42c4 <_ZN4MDNS18isAlphaDigitHyphenE6String+0x32>
 80a42bc:	282d      	cmp	r0, #45	; 0x2d
 80a42be:	d001      	beq.n	80a42c4 <_ZN4MDNS18isAlphaDigitHyphenE6String+0x32>
 80a42c0:	2000      	movs	r0, #0
  }

  return result;
 80a42c2:	e002      	b.n	80a42ca <_ZN4MDNS18isAlphaDigitHyphenE6String+0x38>
 80a42c4:	3501      	adds	r5, #1
 80a42c6:	e7e7      	b.n	80a4298 <_ZN4MDNS18isAlphaDigitHyphenE6String+0x6>
 80a42c8:	2001      	movs	r0, #1
}
 80a42ca:	bd38      	pop	{r3, r4, r5, pc}

080a42cc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>:

#if __cplusplus >= 201103L
  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80a42cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a42ce:	4605      	mov	r5, r0
 80a42d0:	4616      	mov	r6, r2
 80a42d2:	461c      	mov	r4, r3
 80a42d4:	1d07      	adds	r7, r0, #4
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
			    || _M_impl._M_key_compare(_S_key(__z),
 80a42d6:	b989      	cbnz	r1, 80a42fc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x30>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80a42d8:	42ba      	cmp	r2, r7
 80a42da:	d00f      	beq.n	80a42fc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x30>
			    || _M_impl._M_key_compare(_S_key(__z),
 80a42dc:	f102 0110 	add.w	r1, r2, #16
 80a42e0:	f103 0010 	add.w	r0, r3, #16
 80a42e4:	f7ff ff1e 	bl	80a4124 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
						      _S_key(__p)));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80a42e8:	463b      	mov	r3, r7
 80a42ea:	4632      	mov	r2, r6
 80a42ec:	4621      	mov	r1, r4
 80a42ee:	f003 fa86 	bl	80a77fe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
				    this->_M_impl._M_header);
      ++_M_impl._M_node_count;
 80a42f2:	696b      	ldr	r3, [r5, #20]
      return iterator(__z);
    }
 80a42f4:	4620      	mov	r0, r4
      ++_M_impl._M_node_count;
 80a42f6:	3301      	adds	r3, #1
 80a42f8:	616b      	str	r3, [r5, #20]
    }
 80a42fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			    || _M_impl._M_key_compare(_S_key(__z),
 80a42fc:	2001      	movs	r0, #1
 80a42fe:	e7f3      	b.n	80a42e8 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x1c>

080a4300 <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80a4300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 80a4304:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a4308:	e9d0 9800 	ldrd	r9, r8, [r0]
 80a430c:	4693      	mov	fp, r2
 80a430e:	eba8 0209 	sub.w	r2, r8, r9
	if (max_size() - size() < __n)
 80a4312:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
 80a4316:	4607      	mov	r7, r0
 80a4318:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80a431a:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 80a431e:	d102      	bne.n	80a4326 <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80a4320:	481e      	ldr	r0, [pc, #120]	; (80a439c <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9c>)
 80a4322:	f003 fac8 	bl	80a78b6 <_ZSt20__throw_length_errorPKc>
 80a4326:	2c01      	cmp	r4, #1
 80a4328:	4622      	mov	r2, r4
 80a432a:	bf38      	it	cc
 80a432c:	2201      	movcc	r2, #1
 80a432e:	18a4      	adds	r4, r4, r2
 80a4330:	eba1 0509 	sub.w	r5, r1, r9

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80a4334:	d22f      	bcs.n	80a4396 <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80a4336:	b13c      	cbz	r4, 80a4348 <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x48>
 80a4338:	429c      	cmp	r4, r3
 80a433a:	bf28      	it	cs
 80a433c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a433e:	00a0      	lsls	r0, r4, #2
 80a4340:	f7fb feab 	bl	80a009a <_Znwj>
 80a4344:	4606      	mov	r6, r0
 80a4346:	e000      	b.n	80a434a <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x4a>
 80a4348:	4626      	mov	r6, r4
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a434a:	42ee      	cmn	r6, r5
 80a434c:	bf1c      	itt	ne
 80a434e:	f8db 3000 	ldrne.w	r3, [fp]
 80a4352:	5173      	strne	r3, [r6, r5]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 80a4354:	2d00      	cmp	r5, #0
 80a4356:	dd04      	ble.n	80a4362 <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x62>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80a4358:	462a      	mov	r2, r5
 80a435a:	4649      	mov	r1, r9
 80a435c:	4630      	mov	r0, r6
 80a435e:	f007 ffc9 	bl	80ac2f4 <memmove>
      ptrdiff_t __count = __last - __first;
 80a4362:	eba8 080a 	sub.w	r8, r8, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 80a4366:	3504      	adds	r5, #4
      if (__count > 0)
 80a4368:	f1b8 0f00 	cmp.w	r8, #0
 80a436c:	4435      	add	r5, r6
 80a436e:	dd04      	ble.n	80a437a <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80a4370:	4642      	mov	r2, r8
 80a4372:	4651      	mov	r1, sl
 80a4374:	4628      	mov	r0, r5
 80a4376:	f007 ffaf 	bl	80ac2d8 <memcpy>
      return __result + __count;
 80a437a:	4445      	add	r5, r8
	if (__p)
 80a437c:	f1b9 0f00 	cmp.w	r9, #0
 80a4380:	d002      	beq.n	80a4388 <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x88>
	::operator delete(__p);
 80a4382:	4648      	mov	r0, r9
 80a4384:	f7fb fe8d 	bl	80a00a2 <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80a4388:	eb06 0484 	add.w	r4, r6, r4, lsl #2
      this->_M_impl._M_finish = __new_finish;
 80a438c:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80a4390:	60bc      	str	r4, [r7, #8]
    }
 80a4392:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80a4396:	461c      	mov	r4, r3
 80a4398:	e7d1      	b.n	80a433e <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
 80a439a:	bf00      	nop
 80a439c:	080ad074 	.word	0x080ad074

080a43a0 <_ZNSt6vectorIP6RecordSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 80a43a0:	460a      	mov	r2, r1
 80a43a2:	b510      	push	{r4, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80a43a4:	e9d0 1401 	ldrd	r1, r4, [r0, #4]
 80a43a8:	42a1      	cmp	r1, r4
      vector<_Tp, _Alloc>::
 80a43aa:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80a43ac:	d006      	beq.n	80a43bc <_ZNSt6vectorIP6RecordSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a43ae:	b109      	cbz	r1, 80a43b4 <_ZNSt6vectorIP6RecordSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x14>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80a43b0:	6812      	ldr	r2, [r2, #0]
 80a43b2:	600a      	str	r2, [r1, #0]
	    ++this->_M_impl._M_finish;
 80a43b4:	685a      	ldr	r2, [r3, #4]
 80a43b6:	3204      	adds	r2, #4
 80a43b8:	605a      	str	r2, [r3, #4]
      }
 80a43ba:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80a43bc:	f7ff ffa0 	bl	80a4300 <_ZNSt6vectorIP6RecordSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80a43c0:	e7fb      	b.n	80a43ba <_ZNSt6vectorIP6RecordSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x1a>

080a43c2 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80a43c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a43c6:	4604      	mov	r4, r0
 80a43c8:	460f      	mov	r7, r1
 80a43ca:	4690      	mov	r8, r2
      bool __comp = true;
 80a43cc:	2001      	movs	r0, #1
      _Link_type __x = _M_begin();
 80a43ce:	688d      	ldr	r5, [r1, #8]
      { return &this->_M_impl._M_header; }
 80a43d0:	1d0e      	adds	r6, r1, #4
      while (__x != 0)
 80a43d2:	b15d      	cbz	r5, 80a43ec <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x2a>
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80a43d4:	4640      	mov	r0, r8
 80a43d6:	f105 0110 	add.w	r1, r5, #16
 80a43da:	f7ff fea3 	bl	80a4124 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80a43de:	b118      	cbz	r0, 80a43e8 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x26>
 80a43e0:	68ab      	ldr	r3, [r5, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80a43e2:	462e      	mov	r6, r5
 80a43e4:	461d      	mov	r5, r3
 80a43e6:	e7f4      	b.n	80a43d2 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x10>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80a43e8:	68eb      	ldr	r3, [r5, #12]
 80a43ea:	e7fa      	b.n	80a43e2 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x20>
      if (__comp)
 80a43ec:	b1a0      	cbz	r0, 80a4418 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x56>
	  if (__j == begin())
 80a43ee:	68fb      	ldr	r3, [r7, #12]
 80a43f0:	42b3      	cmp	r3, r6
 80a43f2:	d104      	bne.n	80a43fe <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x3c>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80a43f4:	6025      	str	r5, [r4, #0]
 80a43f6:	6066      	str	r6, [r4, #4]
    }
 80a43f8:	4620      	mov	r0, r4
 80a43fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_M_node = _Rb_tree_decrement(_M_node);
 80a43fe:	4630      	mov	r0, r6
 80a4400:	f003 f9fb 	bl	80a77fa <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80a4404:	4605      	mov	r5, r0
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80a4406:	4641      	mov	r1, r8
 80a4408:	f105 0010 	add.w	r0, r5, #16
 80a440c:	f7ff fe8a 	bl	80a4124 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
 80a4410:	b120      	cbz	r0, 80a441c <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x5a>
 80a4412:	2300      	movs	r3, #0
 80a4414:	6023      	str	r3, [r4, #0]
 80a4416:	e7ee      	b.n	80a43f6 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x34>
 80a4418:	4635      	mov	r5, r6
 80a441a:	e7f4      	b.n	80a4406 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x44>
       : first(std::forward<_U1>(__x)), second(__y) { }
 80a441c:	e9c4 5000 	strd	r5, r0, [r4]
 80a4420:	e7ea      	b.n	80a43f8 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x36>

080a4422 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80a4422:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a4426:	461f      	mov	r7, r3
      { return &this->_M_impl._M_header; }
 80a4428:	1d0b      	adds	r3, r1, #4
      if (__pos._M_node == _M_end())
 80a442a:	429a      	cmp	r2, r3
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80a442c:	4604      	mov	r4, r0
 80a442e:	460e      	mov	r6, r1
 80a4430:	4615      	mov	r5, r2
      if (__pos._M_node == _M_end())
 80a4432:	d110      	bne.n	80a4456 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x34>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80a4434:	694b      	ldr	r3, [r1, #20]
 80a4436:	2b00      	cmp	r3, #0
 80a4438:	d049      	beq.n	80a44ce <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xac>
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
 80a443a:	6908      	ldr	r0, [r1, #16]
 80a443c:	4639      	mov	r1, r7
 80a443e:	3010      	adds	r0, #16
 80a4440:	f7ff fe70 	bl	80a4124 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
 80a4444:	2800      	cmp	r0, #0
 80a4446:	d042      	beq.n	80a44ce <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xac>
       : first(__x), second(std::forward<_U2>(__y)) { }
 80a4448:	2300      	movs	r3, #0
 80a444a:	6023      	str	r3, [r4, #0]
 80a444c:	6933      	ldr	r3, [r6, #16]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80a444e:	6063      	str	r3, [r4, #4]
    }
 80a4450:	4620      	mov	r0, r4
 80a4452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a4456:	f102 0910 	add.w	r9, r2, #16
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80a445a:	4649      	mov	r1, r9
 80a445c:	4638      	mov	r0, r7
 80a445e:	f7ff fe61 	bl	80a4124 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
 80a4462:	4680      	mov	r8, r0
 80a4464:	b1b8      	cbz	r0, 80a4496 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x74>
	  if (__pos._M_node == _M_leftmost()) // begin()
 80a4466:	68f3      	ldr	r3, [r6, #12]
 80a4468:	42ab      	cmp	r3, r5
 80a446a:	d101      	bne.n	80a4470 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x4e>
 80a446c:	6023      	str	r3, [r4, #0]
 80a446e:	e7ee      	b.n	80a444e <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x2c>
	_M_node = _Rb_tree_decrement(_M_node);
 80a4470:	4628      	mov	r0, r5
 80a4472:	f003 f9c2 	bl	80a77fa <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80a4476:	4639      	mov	r1, r7
	_M_node = _Rb_tree_decrement(_M_node);
 80a4478:	4680      	mov	r8, r0
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80a447a:	3010      	adds	r0, #16
 80a447c:	f7ff fe52 	bl	80a4124 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
 80a4480:	b328      	cbz	r0, 80a44ce <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xac>
	      if (_S_right(__before._M_node) == 0)
 80a4482:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a4486:	b91b      	cbnz	r3, 80a4490 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x6e>
       : first(__x), second(std::forward<_U2>(__y)) { }
 80a4488:	6023      	str	r3, [r4, #0]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80a448a:	f8c4 8004 	str.w	r8, [r4, #4]
 80a448e:	e7df      	b.n	80a4450 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x2e>
 80a4490:	6025      	str	r5, [r4, #0]
       : first(__x), second(std::forward<_U2>(__y)) { }
 80a4492:	6065      	str	r5, [r4, #4]
 80a4494:	e7dc      	b.n	80a4450 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x2e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80a4496:	4639      	mov	r1, r7
 80a4498:	4648      	mov	r0, r9
 80a449a:	f7ff fe43 	bl	80a4124 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
 80a449e:	b1e0      	cbz	r0, 80a44da <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xb8>
	  if (__pos._M_node == _M_rightmost())
 80a44a0:	6933      	ldr	r3, [r6, #16]
 80a44a2:	42ab      	cmp	r3, r5
 80a44a4:	d102      	bne.n	80a44ac <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x8a>
 80a44a6:	f8c4 8000 	str.w	r8, [r4]
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80a44aa:	e7d0      	b.n	80a444e <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x2c>
	_M_node = _Rb_tree_increment(_M_node);
 80a44ac:	4628      	mov	r0, r5
 80a44ae:	f003 f97e 	bl	80a77ae <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80a44b2:	4680      	mov	r8, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80a44b4:	f100 0110 	add.w	r1, r0, #16
 80a44b8:	4638      	mov	r0, r7
 80a44ba:	f7ff fe33 	bl	80a4124 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
 80a44be:	b130      	cbz	r0, 80a44ce <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xac>
	      if (_S_right(__pos._M_node) == 0)
 80a44c0:	68eb      	ldr	r3, [r5, #12]
 80a44c2:	b90b      	cbnz	r3, 80a44c8 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xa6>
 80a44c4:	6023      	str	r3, [r4, #0]
 80a44c6:	e7e4      	b.n	80a4492 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x70>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80a44c8:	f8c4 8000 	str.w	r8, [r4]
 80a44cc:	e7dd      	b.n	80a448a <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x68>
	    return _M_get_insert_unique_pos(__k);
 80a44ce:	463a      	mov	r2, r7
 80a44d0:	4631      	mov	r1, r6
 80a44d2:	4620      	mov	r0, r4
 80a44d4:	f7ff ff75 	bl	80a43c2 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 80a44d8:	e7ba      	b.n	80a4450 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x2e>
       : first(std::forward<_U1>(__x)), second(__y) { }
 80a44da:	e9c4 5000 	strd	r5, r0, [r4]
 80a44de:	e7b7      	b.n	80a4450 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x2e>

080a44e0 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
 80a44e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
      { return &this->_M_impl._M_header; }
 80a44e4:	f100 0804 	add.w	r8, r0, #4
 80a44e8:	4606      	mov	r6, r0
 80a44ea:	460f      	mov	r7, r1
 80a44ec:	4644      	mov	r4, r8
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80a44ee:	6885      	ldr	r5, [r0, #8]
      while (__x != 0)
 80a44f0:	b155      	cbz	r5, 80a4508 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_+0x28>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80a44f2:	4639      	mov	r1, r7
 80a44f4:	f105 0010 	add.w	r0, r5, #16
 80a44f8:	f7ff fe14 	bl	80a4124 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
 80a44fc:	b910      	cbnz	r0, 80a4504 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_+0x24>
 80a44fe:	462c      	mov	r4, r5
	  __y = __x, __x = _S_left(__x);
 80a4500:	68ad      	ldr	r5, [r5, #8]
 80a4502:	e7f5      	b.n	80a44f0 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_+0x10>
	  __x = _S_right(__x);
 80a4504:	68ed      	ldr	r5, [r5, #12]
 80a4506:	e7f3      	b.n	80a44f0 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_+0x10>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 80a4508:	45a0      	cmp	r8, r4
 80a450a:	d11b      	bne.n	80a4544 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_+0x64>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a450c:	2024      	movs	r0, #36	; 0x24
 80a450e:	f7fb fdc4 	bl	80a009a <_Znwj>
      // Can be used to avoid value-initialization zeroing _M_storage.
      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }
 80a4512:	f100 0810 	add.w	r8, r0, #16
 80a4516:	4605      	mov	r5, r0
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80a4518:	4639      	mov	r1, r7
 80a451a:	4640      	mov	r0, r8
 80a451c:	f001 fe31 	bl	80a6182 <_ZN6StringC1EOS_>
 80a4520:	2300      	movs	r3, #0
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80a4522:	4622      	mov	r2, r4
 80a4524:	622b      	str	r3, [r5, #32]
 80a4526:	4631      	mov	r1, r6
 80a4528:	4643      	mov	r3, r8
 80a452a:	4668      	mov	r0, sp
 80a452c:	f7ff ff79 	bl	80a4422 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
 80a4530:	e9dd 4200 	ldrd	r4, r2, [sp]

	    if (__res.second)
 80a4534:	b992      	cbnz	r2, 80a455c <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_+0x7c>
    struct pair
 80a4536:	4640      	mov	r0, r8
 80a4538:	f001 fda9 	bl	80a608e <_ZN6StringD1Ev>
	::operator delete(__p);
 80a453c:	4628      	mov	r0, r5
 80a453e:	f7fb fdb0 	bl	80a00a2 <_ZdlPv>
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80a4542:	e006      	b.n	80a4552 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_+0x72>
 80a4544:	4638      	mov	r0, r7
 80a4546:	f104 0110 	add.w	r1, r4, #16
 80a454a:	f7ff fdeb 	bl	80a4124 <_ZNKSt4lessI6StringEclERKS0_S3_.isra.0>
 80a454e:	2800      	cmp	r0, #0
 80a4550:	d1dc      	bne.n	80a450c <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_+0x2c>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
      }
 80a4552:	f104 0020 	add.w	r0, r4, #32
 80a4556:	b002      	add	sp, #8
 80a4558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	      return _M_insert_node(__res.first, __res.second, __z);
 80a455c:	4621      	mov	r1, r4
 80a455e:	462b      	mov	r3, r5
 80a4560:	4630      	mov	r0, r6
 80a4562:	f7ff feb3 	bl	80a42cc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
 80a4566:	4604      	mov	r4, r0
 80a4568:	e7f3      	b.n	80a4552 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_+0x72>
	...

080a456c <_ZN4MDNS11setHostnameE6String>:
bool MDNS::setHostname(String hostname) {
 80a456c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a4570:	4604      	mov	r4, r0
 80a4572:	b08b      	sub	sp, #44	; 0x2c
 80a4574:	460e      	mov	r6, r1
  String status = "Ok";
 80a4576:	a802      	add	r0, sp, #8
 80a4578:	4942      	ldr	r1, [pc, #264]	; (80a4684 <_ZN4MDNS11setHostnameE6String+0x118>)
 80a457a:	f001 fdd2 	bl	80a6122 <_ZN6StringC1EPKc>
  if (labels[HOSTNAME]) {
 80a457e:	f104 091c 	add.w	r9, r4, #28
 80a4582:	4941      	ldr	r1, [pc, #260]	; (80a4688 <_ZN4MDNS11setHostnameE6String+0x11c>)
 80a4584:	a806      	add	r0, sp, #24
 80a4586:	f001 fdcc 	bl	80a6122 <_ZN6StringC1EPKc>
 80a458a:	4648      	mov	r0, r9
 80a458c:	a906      	add	r1, sp, #24
 80a458e:	f7ff ffa7 	bl	80a44e0 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_>
 80a4592:	6805      	ldr	r5, [r0, #0]
 80a4594:	a806      	add	r0, sp, #24
 80a4596:	f001 fd7a 	bl	80a608e <_ZN6StringD1Ev>
 80a459a:	2d00      	cmp	r5, #0
 80a459c:	d15c      	bne.n	80a4658 <_ZN4MDNS11setHostnameE6String+0xec>
  if (success && hostname.length() < MAX_LABEL_SIZE && isAlphaDigitHyphen(hostname)) {
 80a459e:	68b3      	ldr	r3, [r6, #8]
 80a45a0:	2b3e      	cmp	r3, #62	; 0x3e
 80a45a2:	d86a      	bhi.n	80a467a <_ZN4MDNS11setHostnameE6String+0x10e>
 80a45a4:	4631      	mov	r1, r6
 80a45a6:	a806      	add	r0, sp, #24
 80a45a8:	f001 fe05 	bl	80a61b6 <_ZN6StringC1ERKS_>
 80a45ac:	4620      	mov	r0, r4
 80a45ae:	a906      	add	r1, sp, #24
 80a45b0:	f7ff fe6f 	bl	80a4292 <_ZN4MDNS18isAlphaDigitHyphenE6String>
 80a45b4:	4607      	mov	r7, r0
 80a45b6:	a806      	add	r0, sp, #24
 80a45b8:	f001 fd69 	bl	80a608e <_ZN6StringD1Ev>
 80a45bc:	2f00      	cmp	r7, #0
 80a45be:	d05c      	beq.n	80a467a <_ZN4MDNS11setHostnameE6String+0x10e>
    aRecord = new ARecord();
 80a45c0:	2014      	movs	r0, #20
 80a45c2:	f7fb fd6a 	bl	80a009a <_Znwj>
 80a45c6:	4605      	mov	r5, r0
 80a45c8:	b108      	cbz	r0, 80a45ce <_ZN4MDNS11setHostnameE6String+0x62>
 80a45ca:	f000 f9cd 	bl	80a4968 <_ZN7ARecordC1Ev>
 80a45ce:	6165      	str	r5, [r4, #20]
    HostNSECRecord * hostNSECRecord = new HostNSECRecord();
 80a45d0:	2014      	movs	r0, #20
 80a45d2:	f7fb fd62 	bl	80a009a <_Znwj>
 80a45d6:	4605      	mov	r5, r0
 80a45d8:	b108      	cbz	r0, 80a45de <_ZN4MDNS11setHostnameE6String+0x72>
 80a45da:	f000 f9dd 	bl	80a4998 <_ZN14HostNSECRecordC1Ev>
    records.push_back(aRecord);
 80a45de:	6963      	ldr	r3, [r4, #20]
 80a45e0:	f104 0834 	add.w	r8, r4, #52	; 0x34
      { emplace_back(std::move(__x)); }
 80a45e4:	4640      	mov	r0, r8
 80a45e6:	a906      	add	r1, sp, #24
 80a45e8:	9306      	str	r3, [sp, #24]
 80a45ea:	f7ff fed9 	bl	80a43a0 <_ZNSt6vectorIP6RecordSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 80a45ee:	4640      	mov	r0, r8
 80a45f0:	a906      	add	r1, sp, #24
    records.push_back(hostNSECRecord);
 80a45f2:	9506      	str	r5, [sp, #24]
 80a45f4:	f7ff fed4 	bl	80a43a0 <_ZNSt6vectorIP6RecordSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
    Label * label = new HostLabel(aRecord, hostNSECRecord, hostname, LOCAL);
 80a45f8:	4631      	mov	r1, r6
 80a45fa:	a806      	add	r0, sp, #24
 80a45fc:	f001 fddb 	bl	80a61b6 <_ZN6StringC1ERKS_>
 80a4600:	2020      	movs	r0, #32
 80a4602:	f7fb fd4a 	bl	80a009a <_Znwj>
 80a4606:	4606      	mov	r6, r0
 80a4608:	b140      	cbz	r0, 80a461c <_ZN4MDNS11setHostnameE6String+0xb0>
 80a460a:	2300      	movs	r3, #0
 80a460c:	9301      	str	r3, [sp, #4]
 80a460e:	68e3      	ldr	r3, [r4, #12]
 80a4610:	462a      	mov	r2, r5
 80a4612:	9300      	str	r3, [sp, #0]
 80a4614:	6961      	ldr	r1, [r4, #20]
 80a4616:	ab06      	add	r3, sp, #24
 80a4618:	f7ff fd68 	bl	80a40ec <_ZN9HostLabelC1EP6RecordS1_6StringP5Labelb>
 80a461c:	a806      	add	r0, sp, #24
 80a461e:	f001 fd36 	bl	80a608e <_ZN6StringD1Ev>
    labels[HOSTNAME] = label;
 80a4622:	4919      	ldr	r1, [pc, #100]	; (80a4688 <_ZN4MDNS11setHostnameE6String+0x11c>)
 80a4624:	a806      	add	r0, sp, #24
 80a4626:	f001 fd7c 	bl	80a6122 <_ZN6StringC1EPKc>
 80a462a:	a906      	add	r1, sp, #24
 80a462c:	4648      	mov	r0, r9
 80a462e:	f7ff ff57 	bl	80a44e0 <_ZNSt3mapI6StringP5LabelSt4lessIS0_ESaISt4pairIKS0_S2_EEEixEOS0_>
 80a4632:	6006      	str	r6, [r0, #0]
 80a4634:	a806      	add	r0, sp, #24
 80a4636:	f001 fd2a 	bl	80a608e <_ZN6StringD1Ev>
    aRecord->setLabel(label);
 80a463a:	4631      	mov	r1, r6
 80a463c:	6960      	ldr	r0, [r4, #20]
 80a463e:	f000 f95b 	bl	80a48f8 <_ZN6Record8setLabelEP5Label>
    hostNSECRecord->setLabel(label);
 80a4642:	4631      	mov	r1, r6
 80a4644:	4628      	mov	r0, r5
 80a4646:	f000 f957 	bl	80a48f8 <_ZN6Record8setLabelEP5Label>
  String status = "Ok";
 80a464a:	a802      	add	r0, sp, #8
 80a464c:	f001 fd1f 	bl	80a608e <_ZN6StringD1Ev>
}
 80a4650:	4638      	mov	r0, r7
 80a4652:	b00b      	add	sp, #44	; 0x2c
 80a4654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = "Hostname already set";
 80a4658:	490c      	ldr	r1, [pc, #48]	; (80a468c <_ZN4MDNS11setHostnameE6String+0x120>)
 80a465a:	a802      	add	r0, sp, #8
 80a465c:	f001 fdbe 	bl	80a61dc <_ZN6StringaSEPKc>
    status = success? "Invalid hostname" : status;
 80a4660:	a902      	add	r1, sp, #8
 80a4662:	a806      	add	r0, sp, #24
 80a4664:	f001 fda7 	bl	80a61b6 <_ZN6StringC1ERKS_>
 80a4668:	a906      	add	r1, sp, #24
 80a466a:	a802      	add	r0, sp, #8
 80a466c:	f001 fdae 	bl	80a61cc <_ZN6StringaSEOS_>
 80a4670:	a806      	add	r0, sp, #24
 80a4672:	f001 fd0c 	bl	80a608e <_ZN6StringD1Ev>
    success = false;
 80a4676:	2700      	movs	r7, #0
 80a4678:	e7e7      	b.n	80a464a <_ZN4MDNS11setHostnameE6String+0xde>
    status = success? "Invalid hostname" : status;
 80a467a:	4905      	ldr	r1, [pc, #20]	; (80a4690 <_ZN4MDNS11setHostnameE6String+0x124>)
 80a467c:	a806      	add	r0, sp, #24
 80a467e:	f001 fd50 	bl	80a6122 <_ZN6StringC1EPKc>
 80a4682:	e7f1      	b.n	80a4668 <_ZN4MDNS11setHostnameE6String+0xfc>
 80a4684:	080ac91a 	.word	0x080ac91a
 80a4688:	080ad176 	.word	0x080ad176
 80a468c:	080ad08e 	.word	0x080ad08e
 80a4690:	080ad0a3 	.word	0x080ad0a3

080a4694 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_copyINSB_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS5_EPKSF_PSt18_Rb_tree_node_baseRT_>:
      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
 80a4694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4698:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a469a:	2024      	movs	r0, #36	; 0x24
 80a469c:	460d      	mov	r5, r1
 80a469e:	4616      	mov	r6, r2
 80a46a0:	4698      	mov	r8, r3
 80a46a2:	f7fb fcfa 	bl	80a009a <_Znwj>
 80a46a6:	4604      	mov	r4, r0
      constexpr pair(const pair&) = default;
 80a46a8:	f105 0110 	add.w	r1, r5, #16
 80a46ac:	3010      	adds	r0, #16
 80a46ae:	f001 fd82 	bl	80a61b6 <_ZN6StringC1ERKS_>
 80a46b2:	6a2b      	ldr	r3, [r5, #32]
	    if (__x->_M_right)
 80a46b4:	68e9      	ldr	r1, [r5, #12]
 80a46b6:	6223      	str	r3, [r4, #32]
	  __tmp->_M_color = __x->_M_color;
 80a46b8:	782b      	ldrb	r3, [r5, #0]
	__top->_M_parent = __p;
 80a46ba:	6066      	str	r6, [r4, #4]
	  __tmp->_M_color = __x->_M_color;
 80a46bc:	7023      	strb	r3, [r4, #0]
	  __tmp->_M_left = 0;
 80a46be:	2300      	movs	r3, #0
	  __tmp->_M_right = 0;
 80a46c0:	e9c4 3302 	strd	r3, r3, [r4, #8]
	    if (__x->_M_right)
 80a46c4:	b129      	cbz	r1, 80a46d2 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_copyINSB_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS5_EPKSF_PSt18_Rb_tree_node_baseRT_+0x3e>
	      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
 80a46c6:	4643      	mov	r3, r8
 80a46c8:	4622      	mov	r2, r4
 80a46ca:	4638      	mov	r0, r7
 80a46cc:	f7ff ffe2 	bl	80a4694 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_copyINSB_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS5_EPKSF_PSt18_Rb_tree_node_baseRT_>
 80a46d0:	60e0      	str	r0, [r4, #12]
	    __x = _S_left(__x);
 80a46d2:	46a1      	mov	r9, r4
	  __tmp->_M_left = 0;
 80a46d4:	f04f 0a00 	mov.w	sl, #0
	    __x = _S_left(__x);
 80a46d8:	68ae      	ldr	r6, [r5, #8]
	    while (__x != 0)
 80a46da:	b1ee      	cbz	r6, 80a4718 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_copyINSB_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS5_EPKSF_PSt18_Rb_tree_node_baseRT_+0x84>
 80a46dc:	2024      	movs	r0, #36	; 0x24
 80a46de:	f7fb fcdc 	bl	80a009a <_Znwj>
 80a46e2:	4605      	mov	r5, r0
 80a46e4:	f106 0110 	add.w	r1, r6, #16
 80a46e8:	3010      	adds	r0, #16
 80a46ea:	f001 fd64 	bl	80a61b6 <_ZN6StringC1ERKS_>
 80a46ee:	6a33      	ldr	r3, [r6, #32]
 80a46f0:	622b      	str	r3, [r5, #32]
	  __tmp->_M_color = __x->_M_color;
 80a46f2:	7833      	ldrb	r3, [r6, #0]
	  __tmp->_M_right = 0;
 80a46f4:	e9c5 aa02 	strd	sl, sl, [r5, #8]
	  __tmp->_M_color = __x->_M_color;
 80a46f8:	702b      	strb	r3, [r5, #0]
		__p->_M_left = __y;
 80a46fa:	f8c9 5008 	str.w	r5, [r9, #8]
		__y->_M_parent = __p;
 80a46fe:	f8c5 9004 	str.w	r9, [r5, #4]
		if (__x->_M_right)
 80a4702:	68f1      	ldr	r1, [r6, #12]
 80a4704:	b129      	cbz	r1, 80a4712 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_copyINSB_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS5_EPKSF_PSt18_Rb_tree_node_baseRT_+0x7e>
		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
 80a4706:	4643      	mov	r3, r8
 80a4708:	462a      	mov	r2, r5
 80a470a:	4638      	mov	r0, r7
 80a470c:	f7ff ffc2 	bl	80a4694 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_copyINSB_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS5_EPKSF_PSt18_Rb_tree_node_baseRT_>
 80a4710:	60e8      	str	r0, [r5, #12]
	    while (__x != 0)
 80a4712:	46a9      	mov	r9, r5
		__x = _S_left(__x);
 80a4714:	68b6      	ldr	r6, [r6, #8]
	    while (__x != 0)
 80a4716:	e7e0      	b.n	80a46da <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_copyINSB_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS5_EPKSF_PSt18_Rb_tree_node_baseRT_+0x46>
      }
 80a4718:	4620      	mov	r0, r4
 80a471a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080a4720 <_ZN4MDNS12getResponsesEv>:
void MDNS::getResponses() {
 80a4720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4724:	b08a      	sub	sp, #40	; 0x28
  QueryHeader header = readHeader(buffer);
 80a4726:	4601      	mov	r1, r0
 80a4728:	6842      	ldr	r2, [r0, #4]
void MDNS::getResponses() {
 80a472a:	4604      	mov	r4, r0
  QueryHeader header = readHeader(buffer);
 80a472c:	a801      	add	r0, sp, #4
 80a472e:	f7ff fd25 	bl	80a417c <_ZN4MDNS10readHeaderEP6Buffer>
  if ((header.flags & 0x8000) == 0 && header.qdcount > 0) {
 80a4732:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80a4736:	2b00      	cmp	r3, #0
 80a4738:	db04      	blt.n	80a4744 <_ZN4MDNS12getResponsesEv+0x24>
  QueryHeader header = readHeader(buffer);
 80a473a:	f8bd 8008 	ldrh.w	r8, [sp, #8]
  if ((header.flags & 0x8000) == 0 && header.qdcount > 0) {
 80a473e:	f1b8 0f00 	cmp.w	r8, #0
 80a4742:	d102      	bne.n	80a474a <_ZN4MDNS12getResponsesEv+0x2a>
}
 80a4744:	b00a      	add	sp, #40	; 0x28
 80a4746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a474a:	2700      	movs	r7, #0
        status = "Buffer underflow at index " + buffer->getOffset();
 80a474c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80a47f4 <_ZN4MDNS12getResponsesEv+0xd4>
      _M_header._M_left = &_M_header;
 80a4750:	ae04      	add	r6, sp, #16
 80a4752:	e008      	b.n	80a4766 <_ZN4MDNS12getResponsesEv+0x46>
 80a4754:	f7ff faf6 	bl	80a3d44 <_ZN6Buffer9getOffsetEv>
 80a4758:	eb09 0100 	add.w	r1, r9, r0
 80a475c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80a4760:	f001 fd3c 	bl	80a61dc <_ZN6StringaSEPKc>
 80a4764:	3701      	adds	r7, #1
    while (count++ < header.qdcount && buffer->available() > 0) {
 80a4766:	b2fb      	uxtb	r3, r7
 80a4768:	4543      	cmp	r3, r8
 80a476a:	daeb      	bge.n	80a4744 <_ZN4MDNS12getResponsesEv+0x24>
 80a476c:	6860      	ldr	r0, [r4, #4]
 80a476e:	f7ff facf 	bl	80a3d10 <_ZN6Buffer9availableEv>
 80a4772:	2800      	cmp	r0, #0
 80a4774:	d0e6      	beq.n	80a4744 <_ZN4MDNS12getResponsesEv+0x24>
      _M_header._M_color = _S_red;
 80a4776:	2300      	movs	r3, #0
	if (__x._M_root() != 0)
 80a4778:	6a61      	ldr	r1, [r4, #36]	; 0x24
      _M_header._M_left = &_M_header;
 80a477a:	aa05      	add	r2, sp, #20
      _M_header._M_right = &_M_header;
 80a477c:	e9cd 2207 	strd	r2, r2, [sp, #28]
      Label * label = matcher->match(labels, buffer);
 80a4780:	6925      	ldr	r5, [r4, #16]
      _M_header._M_color = _S_red;
 80a4782:	f88d 3014 	strb.w	r3, [sp, #20]
      _M_header._M_parent = 0;
 80a4786:	9306      	str	r3, [sp, #24]
      _M_node_count = 0;
 80a4788:	9309      	str	r3, [sp, #36]	; 0x24
	if (__x._M_root() != 0)
 80a478a:	b199      	cbz	r1, 80a47b4 <_ZN4MDNS12getResponsesEv+0x94>
	  _Link_type __root = _M_copy(__x._M_begin(), _M_end(), __gen);
 80a478c:	466b      	mov	r3, sp
 80a478e:	4630      	mov	r0, r6
	: _M_t(__t) { }
 80a4790:	9600      	str	r6, [sp, #0]
	  _Link_type __root = _M_copy(__x._M_begin(), _M_end(), __gen);
 80a4792:	f7ff ff7f 	bl	80a4694 <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_M_copyINSB_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS5_EPKSF_PSt18_Rb_tree_node_baseRT_>
 80a4796:	4603      	mov	r3, r0
      while (__x->_M_left != 0) __x = __x->_M_left;
 80a4798:	461a      	mov	r2, r3
 80a479a:	689b      	ldr	r3, [r3, #8]
 80a479c:	2b00      	cmp	r3, #0
 80a479e:	d1fb      	bne.n	80a4798 <_ZN4MDNS12getResponsesEv+0x78>
	  _M_leftmost() = _S_minimum(__root);
 80a47a0:	4603      	mov	r3, r0
 80a47a2:	9207      	str	r2, [sp, #28]
      while (__x->_M_right != 0) __x = __x->_M_right;
 80a47a4:	461a      	mov	r2, r3
 80a47a6:	68db      	ldr	r3, [r3, #12]
 80a47a8:	2b00      	cmp	r3, #0
 80a47aa:	d1fb      	bne.n	80a47a4 <_ZN4MDNS12getResponsesEv+0x84>
	  _M_impl._M_node_count = __x._M_impl._M_node_count;
 80a47ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
	  _M_rightmost() = _S_maximum(__root);
 80a47ae:	9208      	str	r2, [sp, #32]
	  _M_impl._M_node_count = __x._M_impl._M_node_count;
 80a47b0:	9309      	str	r3, [sp, #36]	; 0x24
	  _M_root() = _M_copy(__x);
 80a47b2:	9006      	str	r0, [sp, #24]
 80a47b4:	6862      	ldr	r2, [r4, #4]
 80a47b6:	4631      	mov	r1, r6
 80a47b8:	4628      	mov	r0, r5
 80a47ba:	f7ff fc00 	bl	80a3fbe <_ZN5Label7Matcher5matchESt3mapI6StringPS_St4lessIS2_ESaISt4pairIKS2_S3_EEEP6Buffer>
      { _M_erase(_M_begin()); }
 80a47be:	9906      	ldr	r1, [sp, #24]
 80a47c0:	4605      	mov	r5, r0
 80a47c2:	4630      	mov	r0, r6
 80a47c4:	f7fd ff8a 	bl	80a26dc <_ZNSt8_Rb_treeI6StringSt4pairIKS0_P5LabelESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
      if (buffer->available() >= 4) {
 80a47c8:	6860      	ldr	r0, [r4, #4]
 80a47ca:	f7ff faa1 	bl	80a3d10 <_ZN6Buffer9availableEv>
 80a47ce:	2803      	cmp	r0, #3
        uint16_t type = buffer->readUInt16();
 80a47d0:	6860      	ldr	r0, [r4, #4]
      if (buffer->available() >= 4) {
 80a47d2:	d9bf      	bls.n	80a4754 <_ZN4MDNS12getResponsesEv+0x34>
        uint16_t type = buffer->readUInt16();
 80a47d4:	f7ff faca 	bl	80a3d6c <_ZN6Buffer10readUInt16Ev>
 80a47d8:	4682      	mov	sl, r0
        uint16_t cls = buffer->readUInt16();
 80a47da:	6860      	ldr	r0, [r4, #4]
 80a47dc:	f7ff fac6 	bl	80a3d6c <_ZN6Buffer10readUInt16Ev>
 80a47e0:	4602      	mov	r2, r0
        if (label != NULL) {
 80a47e2:	2d00      	cmp	r5, #0
 80a47e4:	d0be      	beq.n	80a4764 <_ZN4MDNS12getResponsesEv+0x44>
          label->matched(type, cls);
 80a47e6:	682b      	ldr	r3, [r5, #0]
 80a47e8:	4651      	mov	r1, sl
 80a47ea:	4628      	mov	r0, r5
 80a47ec:	681b      	ldr	r3, [r3, #0]
 80a47ee:	4798      	blx	r3
 80a47f0:	e7b8      	b.n	80a4764 <_ZN4MDNS12getResponsesEv+0x44>
 80a47f2:	bf00      	nop
 80a47f4:	080ad0b4 	.word	0x080ad0b4

080a47f8 <_ZN4MDNS14processQueriesEv>:
bool MDNS::processQueries() {
 80a47f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a47fa:	4604      	mov	r4, r0
  uint16_t n = udp->parsePacket();
 80a47fc:	6800      	ldr	r0, [r0, #0]
 80a47fe:	2100      	movs	r1, #0
 80a4800:	6803      	ldr	r3, [r0, #0]
bool MDNS::processQueries() {
 80a4802:	b089      	sub	sp, #36	; 0x24
  uint16_t n = udp->parsePacket();
 80a4804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a4806:	4798      	blx	r3
 80a4808:	b285      	uxth	r5, r0
  if (n > 0) {
 80a480a:	b365      	cbz	r5, 80a4866 <_ZN4MDNS14processQueriesEv+0x6e>
    buffer->read(udp);
 80a480c:	e9d4 1000 	ldrd	r1, r0, [r4]
 80a4810:	f7ff fa9a 	bl	80a3d48 <_ZN6Buffer4readEP3UDP>
    udp->flush();
 80a4814:	6820      	ldr	r0, [r4, #0]
 80a4816:	6803      	ldr	r3, [r0, #0]
 80a4818:	69db      	ldr	r3, [r3, #28]
 80a481a:	4798      	blx	r3
    getResponses();
 80a481c:	4620      	mov	r0, r4
 80a481e:	f7ff ff7f 	bl	80a4720 <_ZN4MDNS12getResponsesEv>
    buffer->clear();
 80a4822:	6860      	ldr	r0, [r4, #4]
 80a4824:	f7ff fadf 	bl	80a3de6 <_ZN6Buffer5clearEv>
    writeResponses();
 80a4828:	4620      	mov	r0, r4
 80a482a:	f7ff fcc9 	bl	80a41c0 <_ZN4MDNS14writeResponsesEv>
    if (buffer->available() > 0) {
 80a482e:	6860      	ldr	r0, [r4, #4]
 80a4830:	f7ff fa6e 	bl	80a3d10 <_ZN6Buffer9availableEv>
 80a4834:	b1b8      	cbz	r0, 80a4866 <_ZN4MDNS14processQueriesEv+0x6e>
      udp->beginPacket(IPAddress(224, 0, 0, 251), MDNS_PORT);
 80a4836:	6826      	ldr	r6, [r4, #0]
 80a4838:	21e0      	movs	r1, #224	; 0xe0
 80a483a:	6833      	ldr	r3, [r6, #0]
 80a483c:	a802      	add	r0, sp, #8
 80a483e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80a4840:	23fb      	movs	r3, #251	; 0xfb
 80a4842:	9300      	str	r3, [sp, #0]
 80a4844:	2300      	movs	r3, #0
 80a4846:	461a      	mov	r2, r3
 80a4848:	f001 fb02 	bl	80a5e50 <_ZN9IPAddressC1Ehhhh>
 80a484c:	f241 42e9 	movw	r2, #5353	; 0x14e9
 80a4850:	a902      	add	r1, sp, #8
 80a4852:	4630      	mov	r0, r6
 80a4854:	47b8      	blx	r7
      buffer->write(udp);
 80a4856:	e9d4 1000 	ldrd	r1, r0, [r4]
 80a485a:	f7ff fab9 	bl	80a3dd0 <_ZN6Buffer5writeEP3UDP>
      udp->endPacket();
 80a485e:	6820      	ldr	r0, [r4, #0]
 80a4860:	6803      	ldr	r3, [r0, #0]
 80a4862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a4864:	4798      	blx	r3
}
 80a4866:	1e28      	subs	r0, r5, #0
 80a4868:	bf18      	it	ne
 80a486a:	2001      	movne	r0, #1
 80a486c:	b009      	add	sp, #36	; 0x24
 80a486e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a4870 <_ZN14HostNSECRecord13writeSpecificEP6Buffer>:
}

HostNSECRecord::HostNSECRecord():NSECRecord() {
}

void HostNSECRecord::writeSpecific(Buffer * buffer) {
 80a4870:	b538      	push	{r3, r4, r5, lr}
 80a4872:	460c      	mov	r4, r1
 80a4874:	4605      	mov	r5, r0
  buffer->writeUInt16(5);
 80a4876:	2105      	movs	r1, #5
 80a4878:	4620      	mov	r0, r4
 80a487a:	f7ff fa8d 	bl	80a3d98 <_ZN6Buffer11writeUInt16Et>
  getLabel()->write(buffer);
 80a487e:	4621      	mov	r1, r4
 80a4880:	6868      	ldr	r0, [r5, #4]
 80a4882:	f7ff faf9 	bl	80a3e78 <_ZN5Label5writeEP6Buffer>
  buffer->writeUInt8(0);
 80a4886:	4620      	mov	r0, r4
 80a4888:	2100      	movs	r1, #0
 80a488a:	f7ff fa7b 	bl	80a3d84 <_ZN6Buffer10writeUInt8Eh>
  buffer->writeUInt8(1);
 80a488e:	4620      	mov	r0, r4
 80a4890:	2101      	movs	r1, #1
 80a4892:	f7ff fa77 	bl	80a3d84 <_ZN6Buffer10writeUInt8Eh>
  buffer->writeUInt8(0x40);
 80a4896:	4620      	mov	r0, r4
}
 80a4898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  buffer->writeUInt8(0x40);
 80a489c:	2140      	movs	r1, #64	; 0x40
 80a489e:	f7ff ba71 	b.w	80a3d84 <_ZN6Buffer10writeUInt8Eh>
	...

080a48a4 <_ZN7ARecord13writeSpecificEP6Buffer>:
void ARecord::writeSpecific(Buffer * buffer) {
 80a48a4:	b510      	push	{r4, lr}
 80a48a6:	460c      	mov	r4, r1
 80a48a8:	b086      	sub	sp, #24
  buffer->writeUInt16(4);
 80a48aa:	4620      	mov	r0, r4
 80a48ac:	2104      	movs	r1, #4
 80a48ae:	f7ff fa73 	bl	80a3d98 <_ZN6Buffer11writeUInt16Et>
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a48b2:	2200      	movs	r2, #0
 80a48b4:	4b0f      	ldr	r3, [pc, #60]	; (80a48f4 <_ZN7ARecord13writeSpecificEP6Buffer+0x50>)
 80a48b6:	4611      	mov	r1, r2
 80a48b8:	6858      	ldr	r0, [r3, #4]
 80a48ba:	f000 feb7 	bl	80a562c <network_config>
        return IPAddress(wifi_config()->nw.aucIP);
 80a48be:	1c81      	adds	r1, r0, #2
 80a48c0:	4668      	mov	r0, sp
 80a48c2:	f001 fa9d 	bl	80a5e00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    buffer->writeUInt8(ip[i]);
 80a48c6:	4620      	mov	r0, r4
 80a48c8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a48cc:	f7ff fa5a 	bl	80a3d84 <_ZN6Buffer10writeUInt8Eh>
 80a48d0:	4620      	mov	r0, r4
 80a48d2:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80a48d6:	f7ff fa55 	bl	80a3d84 <_ZN6Buffer10writeUInt8Eh>
 80a48da:	4620      	mov	r0, r4
 80a48dc:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80a48e0:	f7ff fa50 	bl	80a3d84 <_ZN6Buffer10writeUInt8Eh>
 80a48e4:	4620      	mov	r0, r4
 80a48e6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80a48ea:	f7ff fa4b 	bl	80a3d84 <_ZN6Buffer10writeUInt8Eh>
}
 80a48ee:	b006      	add	sp, #24
 80a48f0:	bd10      	pop	{r4, pc}
 80a48f2:	bf00      	nop
 80a48f4:	200014d0 	.word	0x200014d0

080a48f8 <_ZN6Record8setLabelEP5Label>:
  this->label = label;
 80a48f8:	6041      	str	r1, [r0, #4]
}
 80a48fa:	4770      	bx	lr

080a48fc <_ZN6Record15setAnswerRecordEv>:
  this->answerRecord = true;
 80a48fc:	2301      	movs	r3, #1
 80a48fe:	7403      	strb	r3, [r0, #16]
}
 80a4900:	4770      	bx	lr

080a4902 <_ZN6Record14isAnswerRecordEv>:
bool Record::isAnswerRecord() {
 80a4902:	4603      	mov	r3, r0
  return answerRecord && !knownRecord;
 80a4904:	7c00      	ldrb	r0, [r0, #16]
 80a4906:	b110      	cbz	r0, 80a490e <_ZN6Record14isAnswerRecordEv+0xc>
 80a4908:	7c98      	ldrb	r0, [r3, #18]
 80a490a:	f080 0001 	eor.w	r0, r0, #1
}
 80a490e:	4770      	bx	lr

080a4910 <_ZN6Record19setAdditionalRecordEv>:
  this->additionalRecord = true;
 80a4910:	2301      	movs	r3, #1
 80a4912:	7443      	strb	r3, [r0, #17]
}
 80a4914:	4770      	bx	lr

080a4916 <_ZN6Record18isAdditionalRecordEv>:
bool Record::isAdditionalRecord() {
 80a4916:	4603      	mov	r3, r0
  return additionalRecord && !answerRecord && !knownRecord;
 80a4918:	7c40      	ldrb	r0, [r0, #17]
 80a491a:	b130      	cbz	r0, 80a492a <_ZN6Record18isAdditionalRecordEv+0x14>
 80a491c:	7c1a      	ldrb	r2, [r3, #16]
 80a491e:	b91a      	cbnz	r2, 80a4928 <_ZN6Record18isAdditionalRecordEv+0x12>
 80a4920:	7c98      	ldrb	r0, [r3, #18]
 80a4922:	f080 0001 	eor.w	r0, r0, #1
 80a4926:	4770      	bx	lr
 80a4928:	2000      	movs	r0, #0
}
 80a492a:	4770      	bx	lr

080a492c <_ZN6Record5writeEP6Buffer>:
void Record::write(Buffer * buffer) {
 80a492c:	b570      	push	{r4, r5, r6, lr}
 80a492e:	460d      	mov	r5, r1
 80a4930:	4604      	mov	r4, r0
  label->write(buffer);
 80a4932:	6840      	ldr	r0, [r0, #4]
 80a4934:	f7ff faa0 	bl	80a3e78 <_ZN5Label5writeEP6Buffer>
  buffer->writeUInt16(type);
 80a4938:	4628      	mov	r0, r5
 80a493a:	8921      	ldrh	r1, [r4, #8]
 80a493c:	f7ff fa2c 	bl	80a3d98 <_ZN6Buffer11writeUInt16Et>
  buffer->writeUInt16(IN_CLASS);
 80a4940:	4628      	mov	r0, r5
 80a4942:	2101      	movs	r1, #1
 80a4944:	f7ff fa28 	bl	80a3d98 <_ZN6Buffer11writeUInt16Et>
  buffer->writeUInt32(ttl);
 80a4948:	4628      	mov	r0, r5
 80a494a:	68e1      	ldr	r1, [r4, #12]
 80a494c:	f7ff fa2e 	bl	80a3dac <_ZN6Buffer11writeUInt32Em>
  writeSpecific(buffer);
 80a4950:	6823      	ldr	r3, [r4, #0]
 80a4952:	4629      	mov	r1, r5
 80a4954:	4620      	mov	r0, r4
}
 80a4956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  writeSpecific(buffer);
 80a495a:	681b      	ldr	r3, [r3, #0]
 80a495c:	4718      	bx	r3

080a495e <_ZN6Record5resetEv>:
  this->answerRecord = false;
 80a495e:	2300      	movs	r3, #0
 80a4960:	8203      	strh	r3, [r0, #16]
  this->knownRecord = false;
 80a4962:	7483      	strb	r3, [r0, #18]
}
 80a4964:	4770      	bx	lr
	...

080a4968 <_ZN7ARecordC1Ev>:
  this->type = type;
 80a4968:	2201      	movs	r2, #1
 80a496a:	8102      	strh	r2, [r0, #8]
  this->ttl = ttl;
 80a496c:	2278      	movs	r2, #120	; 0x78
 80a496e:	60c2      	str	r2, [r0, #12]
Record::Record(uint16_t type, uint32_t ttl) {
 80a4970:	2200      	movs	r2, #0
 80a4972:	8202      	strh	r2, [r0, #16]
 80a4974:	7482      	strb	r2, [r0, #18]
ARecord::ARecord():Record(A_TYPE, TTL_2MIN) {
 80a4976:	4a01      	ldr	r2, [pc, #4]	; (80a497c <_ZN7ARecordC1Ev+0x14>)
 80a4978:	6002      	str	r2, [r0, #0]
}
 80a497a:	4770      	bx	lr
 80a497c:	080ad0f0 	.word	0x080ad0f0

080a4980 <_ZN10NSECRecordC1Ev>:
  this->type = type;
 80a4980:	222f      	movs	r2, #47	; 0x2f
 80a4982:	8102      	strh	r2, [r0, #8]
  this->ttl = ttl;
 80a4984:	2278      	movs	r2, #120	; 0x78
 80a4986:	60c2      	str	r2, [r0, #12]
Record::Record(uint16_t type, uint32_t ttl) {
 80a4988:	2200      	movs	r2, #0
 80a498a:	8202      	strh	r2, [r0, #16]
 80a498c:	7482      	strb	r2, [r0, #18]
NSECRecord::NSECRecord():Record(NSEC_TYPE, TTL_2MIN) {
 80a498e:	4a01      	ldr	r2, [pc, #4]	; (80a4994 <_ZN10NSECRecordC1Ev+0x14>)
 80a4990:	6002      	str	r2, [r0, #0]
}
 80a4992:	4770      	bx	lr
 80a4994:	080ad0d8 	.word	0x080ad0d8

080a4998 <_ZN14HostNSECRecordC1Ev>:
HostNSECRecord::HostNSECRecord():NSECRecord() {
 80a4998:	b508      	push	{r3, lr}
 80a499a:	4603      	mov	r3, r0
 80a499c:	f7ff fff0 	bl	80a4980 <_ZN10NSECRecordC1Ev>
 80a49a0:	4a01      	ldr	r2, [pc, #4]	; (80a49a8 <_ZN14HostNSECRecordC1Ev+0x10>)
}
 80a49a2:	4618      	mov	r0, r3
HostNSECRecord::HostNSECRecord():NSECRecord() {
 80a49a4:	601a      	str	r2, [r3, #0]
}
 80a49a6:	bd08      	pop	{r3, pc}
 80a49a8:	080ad0e4 	.word	0x080ad0e4

080a49ac <_ZN9WebServer5writeEh>:
{
  m_urlPathCmd = cmd;
}

size_t WebServer::write(uint8_t ch)
{
 80a49ac:	b510      	push	{r4, lr}
  m_buffer[m_bufFill++] = ch;
 80a49ae:	f890 3144 	ldrb.w	r3, [r0, #324]	; 0x144
{
 80a49b2:	4604      	mov	r4, r0
  m_buffer[m_bufFill++] = ch;
 80a49b4:	1c5a      	adds	r2, r3, #1
 80a49b6:	b2d2      	uxtb	r2, r2
 80a49b8:	4403      	add	r3, r0

  if(m_bufFill == sizeof(m_buffer))
 80a49ba:	2a20      	cmp	r2, #32
  m_buffer[m_bufFill++] = ch;
 80a49bc:	f880 2144 	strb.w	r2, [r0, #324]	; 0x144
 80a49c0:	f883 1124 	strb.w	r1, [r3, #292]	; 0x124
  if(m_bufFill == sizeof(m_buffer))
 80a49c4:	d107      	bne.n	80a49d6 <_ZN9WebServer5writeEh+0x2a>
  {
    m_client.write(m_buffer, sizeof(m_buffer));
 80a49c6:	f500 7192 	add.w	r1, r0, #292	; 0x124
 80a49ca:	3038      	adds	r0, #56	; 0x38
 80a49cc:	f001 fcb1 	bl	80a6332 <_ZN9TCPClient5writeEPKhj>
    m_bufFill = 0;
 80a49d0:	2300      	movs	r3, #0
 80a49d2:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
  }

  return sizeof(ch);
}
 80a49d6:	2001      	movs	r0, #1
 80a49d8:	bd10      	pop	{r4, pc}

080a49da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a49da:	b510      	push	{r4, lr}
 80a49dc:	4604      	mov	r4, r0
          _M_dispose();
 80a49de:	6803      	ldr	r3, [r0, #0]
 80a49e0:	689b      	ldr	r3, [r3, #8]
 80a49e2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a49e4:	68a3      	ldr	r3, [r4, #8]
 80a49e6:	3b01      	subs	r3, #1
 80a49e8:	60a3      	str	r3, [r4, #8]
 80a49ea:	b92b      	cbnz	r3, 80a49f8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80a49ec:	6823      	ldr	r3, [r4, #0]
 80a49ee:	4620      	mov	r0, r4
    }
 80a49f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80a49f4:	68db      	ldr	r3, [r3, #12]
 80a49f6:	4718      	bx	r3
    }
 80a49f8:	bd10      	pop	{r4, pc}
	...

080a49fc <_ZN9WebServerC1EPKct>:
WebServer::WebServer(const char *urlPrefix, uint16_t port) :
 80a49fc:	b570      	push	{r4, r5, r6, lr}
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
 80a49fe:	2500      	movs	r5, #0
 80a4a00:	4604      	mov	r4, r0
 80a4a02:	460e      	mov	r6, r1
  m_bufFill(0)
 80a4a04:	4b0d      	ldr	r3, [pc, #52]	; (80a4a3c <_ZN9WebServerC1EPKct+0x40>)
WebServer::WebServer(const char *urlPrefix, uint16_t port) :
 80a4a06:	4611      	mov	r1, r2
 80a4a08:	6045      	str	r5, [r0, #4]
  m_bufFill(0)
 80a4a0a:	462a      	mov	r2, r5
 80a4a0c:	f840 3b08 	str.w	r3, [r0], #8
 80a4a10:	f001 ff58 	bl	80a68c4 <_ZN9TCPServerC1Etm>
 80a4a14:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a4a18:	f001 feb0 	bl	80a677c <_ZN9TCPClientC1Ev>
 80a4a1c:	4b08      	ldr	r3, [pc, #32]	; (80a4a40 <_ZN9WebServerC1EPKct+0x44>)
}
 80a4a1e:	4620      	mov	r0, r4
  m_bufFill(0)
 80a4a20:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
 80a4a24:	6566      	str	r6, [r4, #84]	; 0x54
 80a4a26:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80a4a2a:	67e5      	str	r5, [r4, #124]	; 0x7c
 80a4a2c:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
 80a4a30:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
 80a4a34:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
}
 80a4a38:	bd70      	pop	{r4, r5, r6, pc}
 80a4a3a:	bf00      	nop
 80a4a3c:	080ad1b0 	.word	0x080ad1b0
 80a4a40:	080a4c45 	.word	0x080a4c45

080a4a44 <_ZN9WebServer5beginEv>:
  m_server.begin();
 80a4a44:	3008      	adds	r0, #8
 80a4a46:	f001 bf79 	b.w	80a693c <_ZN9TCPServer5beginEv>

080a4a4a <_ZN9WebServer17setDefaultCommandEPFvRS_NS_14ConnectionTypeEPcbPvE>:
  m_defaultCmd = cmd;
 80a4a4a:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
}
 80a4a4e:	4770      	bx	lr

080a4a50 <_ZN9WebServer10addCommandEPKcPFvRS_NS_14ConnectionTypeEPcbPvES5_>:
{
 80a4a50:	b530      	push	{r4, r5, lr}
  if (m_cmdCount < SIZE(m_commands))
 80a4a52:	f890 511c 	ldrb.w	r5, [r0, #284]	; 0x11c
 80a4a56:	2d07      	cmp	r5, #7
 80a4a58:	d809      	bhi.n	80a4a6e <_ZN9WebServer10addCommandEPKcPFvRS_NS_14ConnectionTypeEPcbPvES5_+0x1e>
    m_commands[m_cmdCount].verb = verb;
 80a4a5a:	240c      	movs	r4, #12
 80a4a5c:	fb04 0405 	mla	r4, r4, r5, r0
    m_commands[m_cmdCount++].obj = callback_obj;
 80a4a60:	3501      	adds	r5, #1
    m_commands[m_cmdCount].cmd = cmd;
 80a4a62:	e9c4 122f 	strd	r1, r2, [r4, #188]	; 0xbc
    m_commands[m_cmdCount++].obj = callback_obj;
 80a4a66:	f880 511c 	strb.w	r5, [r0, #284]	; 0x11c
 80a4a6a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
}
 80a4a6e:	bd30      	pop	{r4, r5, pc}

080a4a70 <_ZN9WebServer8flushBufEv>:
  flushBuf(); //Flush any buffered output
  return m_client.write(buffer, size);
}

void WebServer::flushBuf()
{
 80a4a70:	b510      	push	{r4, lr}
  if(m_bufFill > 0)
 80a4a72:	f890 2144 	ldrb.w	r2, [r0, #324]	; 0x144
{
 80a4a76:	4604      	mov	r4, r0
  if(m_bufFill > 0)
 80a4a78:	b13a      	cbz	r2, 80a4a8a <_ZN9WebServer8flushBufEv+0x1a>
  {
    m_client.write(m_buffer, m_bufFill);
 80a4a7a:	f500 7192 	add.w	r1, r0, #292	; 0x124
 80a4a7e:	3038      	adds	r0, #56	; 0x38
 80a4a80:	f001 fc57 	bl	80a6332 <_ZN9TCPClient5writeEPKhj>
    m_bufFill = 0;
 80a4a84:	2300      	movs	r3, #0
 80a4a86:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
  }
}
 80a4a8a:	bd10      	pop	{r4, pc}

080a4a8c <_ZN9WebServer5writeEPKhj>:
{
 80a4a8c:	b570      	push	{r4, r5, r6, lr}
 80a4a8e:	4604      	mov	r4, r0
 80a4a90:	460d      	mov	r5, r1
 80a4a92:	4616      	mov	r6, r2
  flushBuf(); //Flush any buffered output
 80a4a94:	f7ff ffec 	bl	80a4a70 <_ZN9WebServer8flushBufEv>
  return m_client.write(buffer, size);
 80a4a98:	4632      	mov	r2, r6
 80a4a9a:	4629      	mov	r1, r5
 80a4a9c:	f104 0038 	add.w	r0, r4, #56	; 0x38
}
 80a4aa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return m_client.write(buffer, size);
 80a4aa4:	f001 bc45 	b.w	80a6332 <_ZN9TCPClient5writeEPKhj>

080a4aa8 <_ZN9WebServer6writePEPKhj>:

void WebServer::writeP(const unsigned char *data, size_t length)
{
 80a4aa8:	b570      	push	{r4, r5, r6, lr}
 80a4aaa:	4605      	mov	r5, r0
 80a4aac:	460c      	mov	r4, r1
 80a4aae:	188e      	adds	r6, r1, r2
  // copy data out of program memory into local storage

  while (length--)
 80a4ab0:	42b4      	cmp	r4, r6
 80a4ab2:	d006      	beq.n	80a4ac2 <_ZN9WebServer6writePEPKhj+0x1a>
  {
    write(pgm_read_byte(data++));
 80a4ab4:	682b      	ldr	r3, [r5, #0]
 80a4ab6:	4628      	mov	r0, r5
 80a4ab8:	689b      	ldr	r3, [r3, #8]
 80a4aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a4abe:	4798      	blx	r3
  while (length--)
 80a4ac0:	e7f6      	b.n	80a4ab0 <_ZN9WebServer6writePEPKhj+0x8>
  }
}
 80a4ac2:	bd70      	pop	{r4, r5, r6, pc}

080a4ac4 <_ZN9WebServer6printPEPKh>:

void WebServer::printP(const unsigned char *str)
{
 80a4ac4:	b538      	push	{r3, r4, r5, lr}
 80a4ac6:	4604      	mov	r4, r0
 80a4ac8:	460d      	mov	r5, r1
  // copy data out of program memory into local storage

  while (uint8_t value = pgm_read_byte(str++))
 80a4aca:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a4ace:	b121      	cbz	r1, 80a4ada <_ZN9WebServer6printPEPKh+0x16>
  {
    write(value);
 80a4ad0:	6823      	ldr	r3, [r4, #0]
 80a4ad2:	4620      	mov	r0, r4
 80a4ad4:	689b      	ldr	r3, [r3, #8]
 80a4ad6:	4798      	blx	r3
  }
 80a4ad8:	e7f7      	b.n	80a4aca <_ZN9WebServer6printPEPKh+0x6>
}
 80a4ada:	bd38      	pop	{r3, r4, r5, pc}

080a4adc <_ZN9WebServer9printCRLFEv>:

void WebServer::printCRLF()
{
  print(CRLF);
 80a4adc:	4901      	ldr	r1, [pc, #4]	; (80a4ae4 <_ZN9WebServer9printCRLFEv+0x8>)
 80a4ade:	f001 ba79 	b.w	80a5fd4 <_ZN5Print5printEPKc>
 80a4ae2:	bf00      	nop
 80a4ae4:	080ad174 	.word	0x080ad174

080a4ae8 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb>:
}
#endif

bool WebServer::dispatchCommand(ConnectionType requestType, char *verb,
        bool tail_complete)
{
 80a4ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // if there is no URL, i.e. we have a prefix and it's requested without a
  // trailing slash or if the URL is just the slash
  if ((verb[0] == 0) || ((verb[0] == '/') && (verb[1] == 0)))
 80a4aec:	7814      	ldrb	r4, [r2, #0]
{
 80a4aee:	4606      	mov	r6, r0
 80a4af0:	4688      	mov	r8, r1
 80a4af2:	4699      	mov	r9, r3
 80a4af4:	b08f      	sub	sp, #60	; 0x3c
  if ((verb[0] == 0) || ((verb[0] == '/') && (verb[1] == 0)))
 80a4af6:	b124      	cbz	r4, 80a4b02 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x1a>
 80a4af8:	2c2f      	cmp	r4, #47	; 0x2f
 80a4afa:	f040 8088 	bne.w	80a4c0e <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x126>
 80a4afe:	7854      	ldrb	r4, [r2, #1]
 80a4b00:	b964      	cbnz	r4, 80a4b1c <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x34>
  {
    m_defaultCmd(*this, requestType, (char*)"", tail_complete, NULL);
 80a4b02:	2300      	movs	r3, #0
 80a4b04:	4641      	mov	r1, r8
 80a4b06:	9300      	str	r3, [sp, #0]
 80a4b08:	4630      	mov	r0, r6
 80a4b0a:	464b      	mov	r3, r9
 80a4b0c:	f8d6 40b8 	ldr.w	r4, [r6, #184]	; 0xb8
 80a4b10:	4a40      	ldr	r2, [pc, #256]	; (80a4c14 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x12c>)
  // if the URL is just a slash followed by a question mark
  // we're looking at the default command with GET parameters passed
  if ((verb[0] == '/') && (verb[1] == '?'))
  {
    verb+=2; // skip over the "/?" part of the url
    m_defaultCmd(*this, requestType, verb, tail_complete, NULL);
 80a4b12:	47a0      	blx	r4
          if (part == WEBDUINO_URL_PATH_COMMAND_LENGTH) break;
        }
      }
      m_urlPathCmd(*this, requestType, url_path,
                   verb + verb_len + qm_offset, tail_complete);
      return true;
 80a4b14:	2001      	movs	r0, #1
    }
  }
  return false;
}
 80a4b16:	b00f      	add	sp, #60	; 0x3c
 80a4b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((verb[0] == '/') && (verb[1] == '?'))
 80a4b1c:	2c3f      	cmp	r4, #63	; 0x3f
 80a4b1e:	d105      	bne.n	80a4b2c <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x44>
    m_defaultCmd(*this, requestType, verb, tail_complete, NULL);
 80a4b20:	2400      	movs	r4, #0
 80a4b22:	9400      	str	r4, [sp, #0]
 80a4b24:	f8d0 40b8 	ldr.w	r4, [r0, #184]	; 0xb8
 80a4b28:	3202      	adds	r2, #2
 80a4b2a:	e7f2      	b.n	80a4b12 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x2a>
    verb++;
 80a4b2c:	1c54      	adds	r4, r2, #1
    qm_loc = strchr(verb, '?');
 80a4b2e:	213f      	movs	r1, #63	; 0x3f
 80a4b30:	4620      	mov	r0, r4
 80a4b32:	f007 fc59 	bl	80ac3e8 <strchr>
    verb_len = (qm_loc == NULL) ? strlen(verb) : (qm_loc - verb);
 80a4b36:	4607      	mov	r7, r0
 80a4b38:	bb90      	cbnz	r0, 80a4ba0 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0xb8>
 80a4b3a:	4620      	mov	r0, r4
 80a4b3c:	f007 fc8f 	bl	80ac45e <strlen>
 80a4b40:	b285      	uxth	r5, r0
    qm_offset = (qm_loc == NULL) ? 0 : 1;
 80a4b42:	3f00      	subs	r7, #0
 80a4b44:	bf18      	it	ne
 80a4b46:	2701      	movne	r7, #1
    for (i = 0; i < m_cmdCount; ++i)
 80a4b48:	f04f 0b00 	mov.w	fp, #0
 80a4b4c:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 80a4b50:	9303      	str	r3, [sp, #12]
      if ((verb_len == strlen(m_commands[i].verb))
 80a4b52:	f106 03bc 	add.w	r3, r6, #188	; 0xbc
 80a4b56:	9304      	str	r3, [sp, #16]
    for (i = 0; i < m_cmdCount; ++i)
 80a4b58:	9b03      	ldr	r3, [sp, #12]
 80a4b5a:	fa5f f28b 	uxtb.w	r2, fp
 80a4b5e:	4293      	cmp	r3, r2
 80a4b60:	d924      	bls.n	80a4bac <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0xc4>
      if ((verb_len == strlen(m_commands[i].verb))
 80a4b62:	230c      	movs	r3, #12
 80a4b64:	fb03 fa0b 	mul.w	sl, r3, fp
 80a4b68:	9b04      	ldr	r3, [sp, #16]
 80a4b6a:	f853 100a 	ldr.w	r1, [r3, sl]
 80a4b6e:	4608      	mov	r0, r1
 80a4b70:	9105      	str	r1, [sp, #20]
 80a4b72:	f007 fc74 	bl	80ac45e <strlen>
 80a4b76:	4285      	cmp	r5, r0
 80a4b78:	9905      	ldr	r1, [sp, #20]
 80a4b7a:	d114      	bne.n	80a4ba6 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0xbe>
          && (strncmp(verb, m_commands[i].verb, verb_len) == 0))
 80a4b7c:	462a      	mov	r2, r5
 80a4b7e:	4620      	mov	r0, r4
 80a4b80:	f007 fc75 	bl	80ac46e <strncmp>
 80a4b84:	b978      	cbnz	r0, 80a4ba6 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0xbe>
        m_commands[i].cmd(*this, requestType,
 80a4b86:	44b2      	add	sl, r6
 80a4b88:	f8da 30c4 	ldr.w	r3, [sl, #196]	; 0xc4
        verb + verb_len + qm_offset,
 80a4b8c:	197a      	adds	r2, r7, r5
        m_commands[i].cmd(*this, requestType,
 80a4b8e:	9300      	str	r3, [sp, #0]
 80a4b90:	4641      	mov	r1, r8
 80a4b92:	464b      	mov	r3, r9
 80a4b94:	4630      	mov	r0, r6
 80a4b96:	f8da 70c0 	ldr.w	r7, [sl, #192]	; 0xc0
 80a4b9a:	4422      	add	r2, r4
 80a4b9c:	47b8      	blx	r7
        return true;
 80a4b9e:	e7b9      	b.n	80a4b14 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x2c>
    verb_len = (qm_loc == NULL) ? strlen(verb) : (qm_loc - verb);
 80a4ba0:	1b05      	subs	r5, r0, r4
 80a4ba2:	b2ad      	uxth	r5, r5
 80a4ba4:	e7cd      	b.n	80a4b42 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x5a>
    for (i = 0; i < m_cmdCount; ++i)
 80a4ba6:	f10b 0b01 	add.w	fp, fp, #1
 80a4baa:	e7d5      	b.n	80a4b58 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x70>
    if (m_urlPathCmd != NULL)
 80a4bac:	f8d6 0120 	ldr.w	r0, [r6, #288]	; 0x120
 80a4bb0:	2800      	cmp	r0, #0
 80a4bb2:	d0b0      	beq.n	80a4b16 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x2e>
      char *url_path[WEBDUINO_URL_PATH_COMMAND_LENGTH] = {0};
 80a4bb4:	221c      	movs	r2, #28
 80a4bb6:	2100      	movs	r1, #0
 80a4bb8:	eb0d 0002 	add.w	r0, sp, r2
 80a4bbc:	f007 fbb4 	bl	80ac328 <memset>
      *(verb + verb_len) = 0;
 80a4bc0:	2100      	movs	r1, #0
      url_path[part++] = verb;
 80a4bc2:	4622      	mov	r2, r4
 80a4bc4:	2301      	movs	r3, #1
          *p = 0;
 80a4bc6:	4608      	mov	r0, r1
      *(verb + verb_len) = 0;
 80a4bc8:	eb04 0c05 	add.w	ip, r4, r5
 80a4bcc:	5561      	strb	r1, [r4, r5]
      url_path[part++] = verb;
 80a4bce:	9406      	str	r4, [sp, #24]
      for (char * p = verb; p < verb + verb_len; p++)
 80a4bd0:	4594      	cmp	ip, r2
 80a4bd2:	d911      	bls.n	80a4bf8 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x110>
        if (*p == '/')
 80a4bd4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80a4bd8:	292f      	cmp	r1, #47	; 0x2f
 80a4bda:	d1f9      	bne.n	80a4bd0 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0xe8>
          url_path[part++] = p + 1;
 80a4bdc:	1c59      	adds	r1, r3, #1
 80a4bde:	b2c9      	uxtb	r1, r1
 80a4be0:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 80a4be4:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
          if (part == WEBDUINO_URL_PATH_COMMAND_LENGTH) break;
 80a4be8:	2908      	cmp	r1, #8
          *p = 0;
 80a4bea:	f802 0c01 	strb.w	r0, [r2, #-1]
          url_path[part++] = p + 1;
 80a4bee:	f843 2c20 	str.w	r2, [r3, #-32]
          if (part == WEBDUINO_URL_PATH_COMMAND_LENGTH) break;
 80a4bf2:	d001      	beq.n	80a4bf8 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x110>
 80a4bf4:	460b      	mov	r3, r1
      for (char * p = verb; p < verb + verb_len; p++)
 80a4bf6:	e7eb      	b.n	80a4bd0 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0xe8>
                   verb + verb_len + qm_offset, tail_complete);
 80a4bf8:	443d      	add	r5, r7
      m_urlPathCmd(*this, requestType, url_path,
 80a4bfa:	4641      	mov	r1, r8
 80a4bfc:	4630      	mov	r0, r6
 80a4bfe:	f8d6 7120 	ldr.w	r7, [r6, #288]	; 0x120
 80a4c02:	f8cd 9000 	str.w	r9, [sp]
 80a4c06:	1963      	adds	r3, r4, r5
 80a4c08:	aa06      	add	r2, sp, #24
 80a4c0a:	47b8      	blx	r7
 80a4c0c:	e782      	b.n	80a4b14 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x2c>
  return false;
 80a4c0e:	2000      	movs	r0, #0
 80a4c10:	e781      	b.n	80a4b16 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb+0x2e>
 80a4c12:	bf00      	nop
 80a4c14:	080ad176 	.word	0x080ad176

080a4c18 <_ZN9WebServer8httpFailEv>:
     (0 == strcmp(authCredentials, m_authCredentials + 6))) return true;
  return false;
}

void WebServer::httpFail()
{
 80a4c18:	b510      	push	{r4, lr}
 80a4c1a:	4604      	mov	r4, r0
  P(failMsg1) = "HTTP/1.0 400 Bad Request" CRLF;
  printP(failMsg1);
 80a4c1c:	4906      	ldr	r1, [pc, #24]	; (80a4c38 <_ZN9WebServer8httpFailEv+0x20>)
 80a4c1e:	f7ff ff51 	bl	80a4ac4 <_ZN9WebServer6printPEPKh>

#ifndef WEBDUINO_SUPRESS_SERVER_HEADER
  printP(webServerHeader);
 80a4c22:	4620      	mov	r0, r4
 80a4c24:	4905      	ldr	r1, [pc, #20]	; (80a4c3c <_ZN9WebServer8httpFailEv+0x24>)
 80a4c26:	f7ff ff4d 	bl	80a4ac4 <_ZN9WebServer6printPEPKh>
  P(failMsg2) =
    "Content-Type: text/html" CRLF
    CRLF
    WEBDUINO_FAIL_MESSAGE;

  printP(failMsg2);
 80a4c2a:	4620      	mov	r0, r4
}
 80a4c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  printP(failMsg2);
 80a4c30:	4903      	ldr	r1, [pc, #12]	; (80a4c40 <_ZN9WebServer8httpFailEv+0x28>)
 80a4c32:	f7ff bf47 	b.w	80a4ac4 <_ZN9WebServer6printPEPKh>
 80a4c36:	bf00      	nop
 80a4c38:	080ad2eb 	.word	0x080ad2eb
 80a4c3c:	080ad190 	.word	0x080ad190
 80a4c40:	080ad306 	.word	0x080ad306

080a4c44 <_ZN9WebServer14defaultFailCmdERS_NS_14ConnectionTypeEPcbPv>:
                               WebServer::ConnectionType type,
                               char *url_tail,
                               bool tail_complete,
                               void * obj)
{
  server.httpFail();
 80a4c44:	f7ff bfe8 	b.w	80a4c18 <_ZN9WebServer8httpFailEv>

080a4c48 <_ZN9WebServer11httpSuccessEPKcS1_>:
  printP(noContentMsg2);
}

void WebServer::httpSuccess(const char *contentType,
                            const char *extraHeaders)
{
 80a4c48:	b570      	push	{r4, r5, r6, lr}
 80a4c4a:	4604      	mov	r4, r0
 80a4c4c:	460e      	mov	r6, r1
 80a4c4e:	4615      	mov	r5, r2
  P(successMsg1) = "HTTP/1.0 200 OK" CRLF;
  printP(successMsg1);
 80a4c50:	490d      	ldr	r1, [pc, #52]	; (80a4c88 <_ZN9WebServer11httpSuccessEPKcS1_+0x40>)
 80a4c52:	f7ff ff37 	bl	80a4ac4 <_ZN9WebServer6printPEPKh>

#ifndef WEBDUINO_SUPRESS_SERVER_HEADER
  printP(webServerHeader);
 80a4c56:	4620      	mov	r0, r4
 80a4c58:	490c      	ldr	r1, [pc, #48]	; (80a4c8c <_ZN9WebServer11httpSuccessEPKcS1_+0x44>)
 80a4c5a:	f7ff ff33 	bl	80a4ac4 <_ZN9WebServer6printPEPKh>

  P(successMsg2) =
    "Access-Control-Allow-Origin: *" CRLF
    "Content-Type: ";

  printP(successMsg2);
 80a4c5e:	4620      	mov	r0, r4
 80a4c60:	490b      	ldr	r1, [pc, #44]	; (80a4c90 <_ZN9WebServer11httpSuccessEPKcS1_+0x48>)
 80a4c62:	f7ff ff2f 	bl	80a4ac4 <_ZN9WebServer6printPEPKh>
  print(contentType);
 80a4c66:	4631      	mov	r1, r6
 80a4c68:	4620      	mov	r0, r4
 80a4c6a:	f001 f9b3 	bl	80a5fd4 <_ZN5Print5printEPKc>
  printCRLF();
 80a4c6e:	4620      	mov	r0, r4
 80a4c70:	f7ff ff34 	bl	80a4adc <_ZN9WebServer9printCRLFEv>
  if (extraHeaders)
 80a4c74:	b11d      	cbz	r5, 80a4c7e <_ZN9WebServer11httpSuccessEPKcS1_+0x36>
    print(extraHeaders);
 80a4c76:	4629      	mov	r1, r5
 80a4c78:	4620      	mov	r0, r4
 80a4c7a:	f001 f9ab 	bl	80a5fd4 <_ZN5Print5printEPKc>
  printCRLF();
 80a4c7e:	4620      	mov	r0, r4
}
 80a4c80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  printCRLF();
 80a4c84:	f7ff bf2a 	b.w	80a4adc <_ZN9WebServer9printCRLFEv>
 80a4c88:	080ad1c0 	.word	0x080ad1c0
 80a4c8c:	080ad190 	.word	0x080ad190
 80a4c90:	080ad1d2 	.word	0x080ad1d2

080a4c94 <_ZN9WebServer8noRobotsENS_14ConnectionTypeE>:
{
 80a4c94:	b538      	push	{r3, r4, r5, lr}
 80a4c96:	460d      	mov	r5, r1
  httpSuccess("text/plain");
 80a4c98:	2200      	movs	r2, #0
 80a4c9a:	4906      	ldr	r1, [pc, #24]	; (80a4cb4 <_ZN9WebServer8noRobotsENS_14ConnectionTypeE+0x20>)
{
 80a4c9c:	4604      	mov	r4, r0
  httpSuccess("text/plain");
 80a4c9e:	f7ff ffd3 	bl	80a4c48 <_ZN9WebServer11httpSuccessEPKcS1_>
  if (type != HEAD)
 80a4ca2:	2d02      	cmp	r5, #2
 80a4ca4:	d005      	beq.n	80a4cb2 <_ZN9WebServer8noRobotsENS_14ConnectionTypeE+0x1e>
    printP(allowNoneMsg);
 80a4ca6:	4620      	mov	r0, r4
}
 80a4ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printP(allowNoneMsg);
 80a4cac:	4902      	ldr	r1, [pc, #8]	; (80a4cb8 <_ZN9WebServer8noRobotsENS_14ConnectionTypeE+0x24>)
 80a4cae:	f7ff bf09 	b.w	80a4ac4 <_ZN9WebServer6printPEPKh>
}
 80a4cb2:	bd38      	pop	{r3, r4, r5, pc}
 80a4cb4:	080ad0f4 	.word	0x080ad0f4
 80a4cb8:	080ad334 	.word	0x080ad334

080a4cbc <_ZN9WebServer7faviconENS_14ConnectionTypeE>:
{
 80a4cbc:	b538      	push	{r3, r4, r5, lr}
 80a4cbe:	460d      	mov	r5, r1
  httpSuccess("image/x-icon","Cache-Control: max-age=31536000\r\n");
 80a4cc0:	4a07      	ldr	r2, [pc, #28]	; (80a4ce0 <_ZN9WebServer7faviconENS_14ConnectionTypeE+0x24>)
 80a4cc2:	4908      	ldr	r1, [pc, #32]	; (80a4ce4 <_ZN9WebServer7faviconENS_14ConnectionTypeE+0x28>)
{
 80a4cc4:	4604      	mov	r4, r0
  httpSuccess("image/x-icon","Cache-Control: max-age=31536000\r\n");
 80a4cc6:	f7ff ffbf 	bl	80a4c48 <_ZN9WebServer11httpSuccessEPKcS1_>
  if (type != HEAD)
 80a4cca:	2d02      	cmp	r5, #2
 80a4ccc:	d006      	beq.n	80a4cdc <_ZN9WebServer7faviconENS_14ConnectionTypeE+0x20>
    writeP(faviconIco, sizeof(faviconIco));
 80a4cce:	4620      	mov	r0, r4
}
 80a4cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    writeP(faviconIco, sizeof(faviconIco));
 80a4cd4:	22c6      	movs	r2, #198	; 0xc6
 80a4cd6:	4904      	ldr	r1, [pc, #16]	; (80a4ce8 <_ZN9WebServer7faviconENS_14ConnectionTypeE+0x2c>)
 80a4cd8:	f7ff bee6 	b.w	80a4aa8 <_ZN9WebServer6writePEPKhj>
}
 80a4cdc:	bd38      	pop	{r3, r4, r5, pc}
 80a4cde:	bf00      	nop
 80a4ce0:	080ad0ff 	.word	0x080ad0ff
 80a4ce4:	080ad121 	.word	0x080ad121
 80a4ce8:	080ad225 	.word	0x080ad225

080a4cec <_ZN9WebServer12httpSeeOtherEPKc>:

void WebServer::httpSeeOther(const char *otherURL)
{
 80a4cec:	b538      	push	{r3, r4, r5, lr}
 80a4cee:	4604      	mov	r4, r0
 80a4cf0:	460d      	mov	r5, r1
  P(seeOtherMsg1) = "HTTP/1.0 303 See Other" CRLF;
  printP(seeOtherMsg1);
 80a4cf2:	490b      	ldr	r1, [pc, #44]	; (80a4d20 <_ZN9WebServer12httpSeeOtherEPKc+0x34>)
 80a4cf4:	f7ff fee6 	bl	80a4ac4 <_ZN9WebServer6printPEPKh>

#ifndef WEBDUINO_SUPRESS_SERVER_HEADER
  printP(webServerHeader);
 80a4cf8:	4620      	mov	r0, r4
 80a4cfa:	490a      	ldr	r1, [pc, #40]	; (80a4d24 <_ZN9WebServer12httpSeeOtherEPKc+0x38>)
 80a4cfc:	f7ff fee2 	bl	80a4ac4 <_ZN9WebServer6printPEPKh>
#endif

  P(seeOtherMsg2) = "Location: ";
  printP(seeOtherMsg2);
 80a4d00:	4620      	mov	r0, r4
 80a4d02:	4909      	ldr	r1, [pc, #36]	; (80a4d28 <_ZN9WebServer12httpSeeOtherEPKc+0x3c>)
 80a4d04:	f7ff fede 	bl	80a4ac4 <_ZN9WebServer6printPEPKh>
  print(otherURL);
 80a4d08:	4629      	mov	r1, r5
 80a4d0a:	4620      	mov	r0, r4
 80a4d0c:	f001 f962 	bl	80a5fd4 <_ZN5Print5printEPKc>
  printCRLF();
 80a4d10:	4620      	mov	r0, r4
 80a4d12:	f7ff fee3 	bl	80a4adc <_ZN9WebServer9printCRLFEv>
  printCRLF();
 80a4d16:	4620      	mov	r0, r4
}
 80a4d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  printCRLF();
 80a4d1c:	f7ff bede 	b.w	80a4adc <_ZN9WebServer9printCRLFEv>
 80a4d20:	080ad201 	.word	0x080ad201
 80a4d24:	080ad190 	.word	0x080ad190
 80a4d28:	080ad21a 	.word	0x080ad21a

080a4d2c <_ZN9WebServer4pushEi>:
}

void WebServer::push(int ch)
{
  // don't allow pushing EOF
  if (ch == -1)
 80a4d2c:	1c4b      	adds	r3, r1, #1
 80a4d2e:	d00e      	beq.n	80a4d4e <_ZN9WebServer4pushEi+0x22>
    return;

  m_pushback[m_pushbackDepth++] = ch;
 80a4d30:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 80a4d34:	1c53      	adds	r3, r2, #1
 80a4d36:	b2db      	uxtb	r3, r3
  // can't raise error here, so just replace last char over and over
  if (m_pushbackDepth == SIZE(m_pushback))
 80a4d38:	2b20      	cmp	r3, #32
  m_pushback[m_pushbackDepth++] = ch;
 80a4d3a:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    m_pushbackDepth = SIZE(m_pushback) - 1;
 80a4d3e:	bf08      	it	eq
 80a4d40:	231f      	moveq	r3, #31
  m_pushback[m_pushbackDepth++] = ch;
 80a4d42:	4402      	add	r2, r0
 80a4d44:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
    m_pushbackDepth = SIZE(m_pushback) - 1;
 80a4d48:	bf08      	it	eq
 80a4d4a:	f880 3078 	strbeq.w	r3, [r0, #120]	; 0x78
}
 80a4d4e:	4770      	bx	lr

080a4d50 <_ZN9WebServer5resetEv>:

void WebServer::reset()
{
  m_pushbackDepth = 0;
 80a4d50:	2300      	movs	r3, #0
{
 80a4d52:	b510      	push	{r4, lr}
  m_client.flush();
 80a4d54:	f100 0438 	add.w	r4, r0, #56	; 0x38
  m_pushbackDepth = 0;
 80a4d58:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
  m_client.flush();
 80a4d5c:	4620      	mov	r0, r4
 80a4d5e:	f001 fafc 	bl	80a635a <_ZN9TCPClient5flushEv>
  m_client.stop();
 80a4d62:	4620      	mov	r0, r4
}
 80a4d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  m_client.stop();
 80a4d68:	f001 bc58 	b.w	80a661c <_ZN9TCPClient4stopEv>

080a4d6c <_ZN9WebServer4readEv>:
{
 80a4d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_client)
 80a4d6e:	f100 0738 	add.w	r7, r0, #56	; 0x38
{
 80a4d72:	4604      	mov	r4, r0
  if (!m_client)
 80a4d74:	4638      	mov	r0, r7
 80a4d76:	f001 fc84 	bl	80a6682 <_ZN9TCPClientcvbEv>
 80a4d7a:	b918      	cbnz	r0, 80a4d84 <_ZN9WebServer4readEv+0x18>
    return -1;
 80a4d7c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
 80a4d80:	4628      	mov	r0, r5
 80a4d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_pushbackDepth == 0)
 80a4d84:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
 80a4d88:	bb20      	cbnz	r0, 80a4dd4 <_ZN9WebServer4readEv+0x68>
 80a4d8a:	f000 fa49 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
    unsigned long timeoutTime = millis() + WEBDUINO_READ_TIMEOUT_IN_MS;
 80a4d8e:	f500 767a 	add.w	r6, r0, #1000	; 0x3e8
    while (m_client.connected())
 80a4d92:	4638      	mov	r0, r7
 80a4d94:	f001 fc99 	bl	80a66ca <_ZN9TCPClient9connectedEv>
 80a4d98:	2800      	cmp	r0, #0
 80a4d9a:	d0ef      	beq.n	80a4d7c <_ZN9WebServer4readEv+0x10>
      if (m_readingContent)
 80a4d9c:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
 80a4da0:	b113      	cbz	r3, 80a4da8 <_ZN9WebServer4readEv+0x3c>
        if (m_contentLength == 0)
 80a4da2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80a4da4:	2b00      	cmp	r3, #0
 80a4da6:	d0e9      	beq.n	80a4d7c <_ZN9WebServer4readEv+0x10>
      int ch = m_client.read();
 80a4da8:	4638      	mov	r0, r7
 80a4daa:	f001 fb40 	bl	80a642e <_ZN9TCPClient4readEv>
      if (ch != -1)
 80a4dae:	1c43      	adds	r3, r0, #1
      int ch = m_client.read();
 80a4db0:	4605      	mov	r5, r0
      if (ch != -1)
 80a4db2:	d007      	beq.n	80a4dc4 <_ZN9WebServer4readEv+0x58>
        if (m_readingContent)
 80a4db4:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
 80a4db8:	2b00      	cmp	r3, #0
 80a4dba:	d0e1      	beq.n	80a4d80 <_ZN9WebServer4readEv+0x14>
          --m_contentLength;
 80a4dbc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80a4dbe:	3b01      	subs	r3, #1
 80a4dc0:	67e3      	str	r3, [r4, #124]	; 0x7c
 80a4dc2:	e7dd      	b.n	80a4d80 <_ZN9WebServer4readEv+0x14>
 80a4dc4:	f000 fa2c 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
        if (now > timeoutTime)
 80a4dc8:	4286      	cmp	r6, r0
 80a4dca:	d2e2      	bcs.n	80a4d92 <_ZN9WebServer4readEv+0x26>
          reset();
 80a4dcc:	4620      	mov	r0, r4
 80a4dce:	f7ff ffbf 	bl	80a4d50 <_ZN9WebServer5resetEv>
          return -1;
 80a4dd2:	e7d5      	b.n	80a4d80 <_ZN9WebServer4readEv+0x14>
    return m_pushback[--m_pushbackDepth];
 80a4dd4:	3801      	subs	r0, #1
 80a4dd6:	b2c0      	uxtb	r0, r0
 80a4dd8:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
 80a4ddc:	4404      	add	r4, r0
 80a4dde:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 80a4de2:	e7cd      	b.n	80a4d80 <_ZN9WebServer4readEv+0x14>

080a4de4 <_ZN9WebServer6expectEPKc>:

bool WebServer::expect(const char *str)
{
 80a4de4:	b570      	push	{r4, r5, r6, lr}
 80a4de6:	4605      	mov	r5, r0
 80a4de8:	460e      	mov	r6, r1
 80a4dea:	460c      	mov	r4, r1
  const char *curr = str;
  while (*curr != 0)
 80a4dec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a4df0:	b19b      	cbz	r3, 80a4e1a <_ZN9WebServer6expectEPKc+0x36>
  {
    int ch = read();
 80a4df2:	4628      	mov	r0, r5
 80a4df4:	f7ff ffba 	bl	80a4d6c <_ZN9WebServer4readEv>
    if (ch != *curr++)
 80a4df8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    int ch = read();
 80a4dfc:	4601      	mov	r1, r0
    if (ch != *curr++)
 80a4dfe:	4283      	cmp	r3, r0
 80a4e00:	d0f4      	beq.n	80a4dec <_ZN9WebServer6expectEPKc+0x8>
    {
      // push back ch and the characters we accepted
      push(ch);
 80a4e02:	4628      	mov	r0, r5
 80a4e04:	f7ff ff92 	bl	80a4d2c <_ZN9WebServer4pushEi>
 80a4e08:	3c01      	subs	r4, #1
      while (--curr != str)
 80a4e0a:	42b4      	cmp	r4, r6
 80a4e0c:	d007      	beq.n	80a4e1e <_ZN9WebServer6expectEPKc+0x3a>
        push(curr[-1]);
 80a4e0e:	4628      	mov	r0, r5
 80a4e10:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 80a4e14:	f7ff ff8a 	bl	80a4d2c <_ZN9WebServer4pushEi>
      while (--curr != str)
 80a4e18:	e7f7      	b.n	80a4e0a <_ZN9WebServer6expectEPKc+0x26>
      return false;
    }
  }
  return true;
 80a4e1a:	2001      	movs	r0, #1
}
 80a4e1c:	bd70      	pop	{r4, r5, r6, pc}
      return false;
 80a4e1e:	2000      	movs	r0, #0
 80a4e20:	e7fc      	b.n	80a4e1c <_ZN9WebServer6expectEPKc+0x38>

080a4e22 <_ZN9WebServer7readIntERi>:
bool WebServer::readInt(int &number)
{
  bool negate = false;
  bool gotNumber = false;
  int ch;
  number = 0;
 80a4e22:	2300      	movs	r3, #0
{
 80a4e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4e28:	4605      	mov	r5, r0
 80a4e2a:	460c      	mov	r4, r1
  number = 0;
 80a4e2c:	600b      	str	r3, [r1, #0]

  // absorb whitespace
  do
  {
    ch = read();
 80a4e2e:	4628      	mov	r0, r5
 80a4e30:	f7ff ff9c 	bl	80a4d6c <_ZN9WebServer4readEv>
  } while (ch == ' ' || ch == '\t');
 80a4e34:	2820      	cmp	r0, #32
 80a4e36:	d0fa      	beq.n	80a4e2e <_ZN9WebServer7readIntERi+0xc>
 80a4e38:	2809      	cmp	r0, #9
 80a4e3a:	d0f8      	beq.n	80a4e2e <_ZN9WebServer7readIntERi+0xc>

  // check for leading minus sign
  if (ch == '-')
 80a4e3c:	282d      	cmp	r0, #45	; 0x2d
 80a4e3e:	d114      	bne.n	80a4e6a <_ZN9WebServer7readIntERi+0x48>
  {
    negate = true;
    ch = read();
 80a4e40:	4628      	mov	r0, r5
 80a4e42:	f7ff ff93 	bl	80a4d6c <_ZN9WebServer4readEv>
    negate = true;
 80a4e46:	2601      	movs	r6, #1
  bool negate = false;
 80a4e48:	2700      	movs	r7, #0

  // read digits to update number, exit when we find non-digit
  while (ch >= '0' && ch <= '9')
  {
    gotNumber = true;
    number = number * 10 + ch - '0';
 80a4e4a:	f04f 080a 	mov.w	r8, #10
  while (ch >= '0' && ch <= '9')
 80a4e4e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a4e52:	2b09      	cmp	r3, #9
 80a4e54:	d80b      	bhi.n	80a4e6e <_ZN9WebServer7readIntERi+0x4c>
    number = number * 10 + ch - '0';
 80a4e56:	6823      	ldr	r3, [r4, #0]
    gotNumber = true;
 80a4e58:	2701      	movs	r7, #1
    number = number * 10 + ch - '0';
 80a4e5a:	fb08 0103 	mla	r1, r8, r3, r0
 80a4e5e:	3930      	subs	r1, #48	; 0x30
    ch = read();
 80a4e60:	4628      	mov	r0, r5
    number = number * 10 + ch - '0';
 80a4e62:	6021      	str	r1, [r4, #0]
    ch = read();
 80a4e64:	f7ff ff82 	bl	80a4d6c <_ZN9WebServer4readEv>
  while (ch >= '0' && ch <= '9')
 80a4e68:	e7f1      	b.n	80a4e4e <_ZN9WebServer7readIntERi+0x2c>
  bool negate = false;
 80a4e6a:	2600      	movs	r6, #0
 80a4e6c:	e7ec      	b.n	80a4e48 <_ZN9WebServer7readIntERi+0x26>
  }

  push(ch);
 80a4e6e:	4601      	mov	r1, r0
 80a4e70:	4628      	mov	r0, r5
 80a4e72:	f7ff ff5b 	bl	80a4d2c <_ZN9WebServer4pushEi>
  if (negate)
 80a4e76:	b116      	cbz	r6, 80a4e7e <_ZN9WebServer7readIntERi+0x5c>
    number = -number;
 80a4e78:	6823      	ldr	r3, [r4, #0]
 80a4e7a:	425b      	negs	r3, r3
 80a4e7c:	6023      	str	r3, [r4, #0]
  return gotNumber;
}
 80a4e7e:	4638      	mov	r0, r7
 80a4e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a4e84 <_ZN9WebServer10readHeaderEPci>:

void WebServer::readHeader(char *value, int valueLen)
{
 80a4e84:	b570      	push	{r4, r5, r6, lr}
 80a4e86:	460c      	mov	r4, r1
 80a4e88:	4615      	mov	r5, r2
 80a4e8a:	4606      	mov	r6, r0
  int ch;
  memset(value, 0, valueLen);
 80a4e8c:	2100      	movs	r1, #0
 80a4e8e:	4620      	mov	r0, r4
 80a4e90:	f007 fa4a 	bl	80ac328 <memset>
  --valueLen;
 80a4e94:	3d01      	subs	r5, #1

  // absorb whitespace
  do
  {
    ch = read();
 80a4e96:	4630      	mov	r0, r6
 80a4e98:	f7ff ff68 	bl	80a4d6c <_ZN9WebServer4readEv>
  } while (ch == ' ' || ch == '\t');
 80a4e9c:	2820      	cmp	r0, #32
    ch = read();
 80a4e9e:	4601      	mov	r1, r0
  } while (ch == ' ' || ch == '\t');
 80a4ea0:	d0f9      	beq.n	80a4e96 <_ZN9WebServer10readHeaderEPci+0x12>
 80a4ea2:	2809      	cmp	r0, #9
 80a4ea4:	d0f7      	beq.n	80a4e96 <_ZN9WebServer10readHeaderEPci+0x12>

  // read rest of line
  do
  {
    if (valueLen > 1)
 80a4ea6:	2d01      	cmp	r5, #1
    {
      *value++=ch;
 80a4ea8:	bfc8      	it	gt
 80a4eaa:	f804 1b01 	strbgt.w	r1, [r4], #1
      --valueLen;
    }
    ch = read();
 80a4eae:	4630      	mov	r0, r6
      --valueLen;
 80a4eb0:	bfc8      	it	gt
 80a4eb2:	f105 35ff 	addgt.w	r5, r5, #4294967295	; 0xffffffff
    ch = read();
 80a4eb6:	f7ff ff59 	bl	80a4d6c <_ZN9WebServer4readEv>
  } while (ch != '\r');
 80a4eba:	280d      	cmp	r0, #13
    ch = read();
 80a4ebc:	4601      	mov	r1, r0
  } while (ch != '\r');
 80a4ebe:	d1f2      	bne.n	80a4ea6 <_ZN9WebServer10readHeaderEPci+0x22>
  push(ch);
 80a4ec0:	4630      	mov	r0, r6
}
 80a4ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  push(ch);
 80a4ec6:	f7ff bf31 	b.w	80a4d2c <_ZN9WebServer4pushEi>

080a4eca <_ZN9WebServer13readPOSTparamEPciS0_i>:

bool WebServer::readPOSTparam(char *name, int nameLen,
                              char *value, int valueLen)
{
 80a4eca:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a4ece:	460d      	mov	r5, r1
 80a4ed0:	461c      	mov	r4, r3
  // assume name is at current place in stream
  int ch;
  // to not to miss the last parameter
  bool foundSomething = false;
 80a4ed2:	f04f 0a00 	mov.w	sl, #0
{
 80a4ed6:	9f0a      	ldr	r7, [sp, #40]	; 0x28

  // clear out name and value so they'll be NUL terminated
  memset(name, 0, nameLen);
 80a4ed8:	2100      	movs	r1, #0
{
 80a4eda:	4680      	mov	r8, r0
  memset(name, 0, nameLen);
 80a4edc:	4628      	mov	r0, r5
{
 80a4ede:	4616      	mov	r6, r2
  memset(name, 0, nameLen);
 80a4ee0:	f007 fa22 	bl	80ac328 <memset>
  memset(value, 0, valueLen);
 80a4ee4:	463a      	mov	r2, r7
 80a4ee6:	2100      	movs	r1, #0
 80a4ee8:	4620      	mov	r0, r4
 80a4eea:	f007 fa1d 	bl	80ac328 <memset>

  // decrement length so we don't write into NUL terminator
  --nameLen;
 80a4eee:	46d1      	mov	r9, sl
 80a4ef0:	3e01      	subs	r6, #1
  --valueLen;
 80a4ef2:	3f01      	subs	r7, #1

  while ((ch = read()) != -1)
 80a4ef4:	4640      	mov	r0, r8
 80a4ef6:	f7ff ff39 	bl	80a4d6c <_ZN9WebServer4readEv>
 80a4efa:	1c42      	adds	r2, r0, #1
 80a4efc:	d015      	beq.n	80a4f2a <_ZN9WebServer13readPOSTparamEPciS0_i+0x60>
  {
    foundSomething = true;
    if (ch == '+')
 80a4efe:	282b      	cmp	r0, #43	; 0x2b
 80a4f00:	d02c      	beq.n	80a4f5c <_ZN9WebServer13readPOSTparamEPciS0_i+0x92>
    {
      ch = ' ';
    }
    else if (ch == '=')
 80a4f02:	283d      	cmp	r0, #61	; 0x3d
 80a4f04:	d015      	beq.n	80a4f32 <_ZN9WebServer13readPOSTparamEPciS0_i+0x68>
    {
      /* that's end of name, so switch to storing in value */
      nameLen = 0;
      continue;
    }
    else if (ch == '&')
 80a4f06:	2826      	cmp	r0, #38	; 0x26
 80a4f08:	d030      	beq.n	80a4f6c <_ZN9WebServer13readPOSTparamEPciS0_i+0xa2>
    {
      /* that's end of pair, go away */
      return true;
    }
    else if (ch == '%')
 80a4f0a:	2825      	cmp	r0, #37	; 0x25
 80a4f0c:	d120      	bne.n	80a4f50 <_ZN9WebServer13readPOSTparamEPciS0_i+0x86>
    {
      /* handle URL encoded characters by converting back to original form */
      int ch1 = read();
 80a4f0e:	4640      	mov	r0, r8
 80a4f10:	f7ff ff2c 	bl	80a4d6c <_ZN9WebServer4readEv>
 80a4f14:	4682      	mov	sl, r0
      int ch2 = read();
 80a4f16:	4640      	mov	r0, r8
 80a4f18:	f7ff ff28 	bl	80a4d6c <_ZN9WebServer4readEv>
      if (ch1 == -1 || ch2 == -1)
 80a4f1c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80a4f20:	d001      	beq.n	80a4f26 <_ZN9WebServer13readPOSTparamEPciS0_i+0x5c>
 80a4f22:	1c43      	adds	r3, r0, #1
 80a4f24:	d109      	bne.n	80a4f3a <_ZN9WebServer13readPOSTparamEPciS0_i+0x70>
        return false;
 80a4f26:	f04f 0a00 	mov.w	sl, #0
  {
    // if we get here, we hit the end-of-file, so POST is over and there
    // are no more parameters
    return false;
  }
}
 80a4f2a:	4650      	mov	r0, sl
 80a4f2c:	b002      	add	sp, #8
 80a4f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      nameLen = 0;
 80a4f32:	2600      	movs	r6, #0
 80a4f34:	f04f 0a01 	mov.w	sl, #1
 80a4f38:	e7dc      	b.n	80a4ef4 <_ZN9WebServer13readPOSTparamEPciS0_i+0x2a>
      char hex[3] = { (char)ch1, (char)ch2, '\0' };
 80a4f3a:	f88d 0005 	strb.w	r0, [sp, #5]
      ch = strtoul(hex, NULL, 16);
 80a4f3e:	2210      	movs	r2, #16
 80a4f40:	2100      	movs	r1, #0
 80a4f42:	a801      	add	r0, sp, #4
      char hex[3] = { (char)ch1, (char)ch2, '\0' };
 80a4f44:	f88d 9006 	strb.w	r9, [sp, #6]
 80a4f48:	f88d a004 	strb.w	sl, [sp, #4]
      ch = strtoul(hex, NULL, 16);
 80a4f4c:	f007 fba2 	bl	80ac694 <strtoul>
    if (nameLen > 0)
 80a4f50:	2e00      	cmp	r6, #0
 80a4f52:	dd05      	ble.n	80a4f60 <_ZN9WebServer13readPOSTparamEPciS0_i+0x96>
      *name++ = ch;
 80a4f54:	f805 0b01 	strb.w	r0, [r5], #1
      --nameLen;
 80a4f58:	3e01      	subs	r6, #1
 80a4f5a:	e7eb      	b.n	80a4f34 <_ZN9WebServer13readPOSTparamEPciS0_i+0x6a>
      ch = ' ';
 80a4f5c:	2020      	movs	r0, #32
 80a4f5e:	e7f7      	b.n	80a4f50 <_ZN9WebServer13readPOSTparamEPciS0_i+0x86>
    else if (valueLen > 0)
 80a4f60:	2f00      	cmp	r7, #0
 80a4f62:	dde7      	ble.n	80a4f34 <_ZN9WebServer13readPOSTparamEPciS0_i+0x6a>
      *value++ = ch;
 80a4f64:	f804 0b01 	strb.w	r0, [r4], #1
      --valueLen;
 80a4f68:	3f01      	subs	r7, #1
 80a4f6a:	e7e3      	b.n	80a4f34 <_ZN9WebServer13readPOSTparamEPciS0_i+0x6a>
      return true;
 80a4f6c:	f04f 0a01 	mov.w	sl, #1
 80a4f70:	e7db      	b.n	80a4f2a <_ZN9WebServer13readPOSTparamEPciS0_i+0x60>
	...

080a4f74 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi>:
// less than 0,  the URL was longer than the buffer,  and part of it had to
// be discarded.

void WebServer::getRequest(WebServer::ConnectionType &type,
                           char *request, int *length)
{
 80a4f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4f76:	461e      	mov	r6, r3
  --*length; // save room for NUL
 80a4f78:	681b      	ldr	r3, [r3, #0]
{
 80a4f7a:	460c      	mov	r4, r1
  --*length; // save room for NUL
 80a4f7c:	3b01      	subs	r3, #1
 80a4f7e:	6033      	str	r3, [r6, #0]

  type = INVALID;
 80a4f80:	2300      	movs	r3, #0
 80a4f82:	700b      	strb	r3, [r1, #0]

  // store the HTTP method line of the request
  if (expect("GET "))
 80a4f84:	4922      	ldr	r1, [pc, #136]	; (80a5010 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x9c>)
{
 80a4f86:	4605      	mov	r5, r0
 80a4f88:	4617      	mov	r7, r2
  if (expect("GET "))
 80a4f8a:	f7ff ff2b 	bl	80a4de4 <_ZN9WebServer6expectEPKc>
 80a4f8e:	b170      	cbz	r0, 80a4fae <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x3a>
    type = GET;
 80a4f90:	2301      	movs	r3, #1
  else if (expect("HEAD "))
    type = HEAD;
 80a4f92:	7023      	strb	r3, [r4, #0]
  // so just get out of here
  else
    return;

  int ch;
  while ((ch = read()) != -1)
 80a4f94:	f644 0401 	movw	r4, #18433	; 0x4801
 80a4f98:	4628      	mov	r0, r5
 80a4f9a:	f7ff fee7 	bl	80a4d6c <_ZN9WebServer4readEv>
 80a4f9e:	1c43      	adds	r3, r0, #1
 80a4fa0:	2b0e      	cmp	r3, #14
 80a4fa2:	d928      	bls.n	80a4ff6 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x82>
  {
    // stop storing at first space or end of line
    if (ch == ' ' || ch == '\n' || ch == '\r')
 80a4fa4:	2820      	cmp	r0, #32
 80a4fa6:	d12a      	bne.n	80a4ffe <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x8a>
      ++request;
    }
    --*length;
  }
  // NUL terminate
  *request = 0;
 80a4fa8:	2300      	movs	r3, #0
 80a4faa:	703b      	strb	r3, [r7, #0]
}
 80a4fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (expect("HEAD "))
 80a4fae:	4628      	mov	r0, r5
 80a4fb0:	4918      	ldr	r1, [pc, #96]	; (80a5014 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0xa0>)
 80a4fb2:	f7ff ff17 	bl	80a4de4 <_ZN9WebServer6expectEPKc>
 80a4fb6:	b108      	cbz	r0, 80a4fbc <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x48>
    type = HEAD;
 80a4fb8:	2302      	movs	r3, #2
 80a4fba:	e7ea      	b.n	80a4f92 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x1e>
  else if (expect("POST "))
 80a4fbc:	4628      	mov	r0, r5
 80a4fbe:	4916      	ldr	r1, [pc, #88]	; (80a5018 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0xa4>)
 80a4fc0:	f7ff ff10 	bl	80a4de4 <_ZN9WebServer6expectEPKc>
 80a4fc4:	b108      	cbz	r0, 80a4fca <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x56>
    type = POST;
 80a4fc6:	2303      	movs	r3, #3
 80a4fc8:	e7e3      	b.n	80a4f92 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x1e>
  else if (expect("PUT "))
 80a4fca:	4628      	mov	r0, r5
 80a4fcc:	4913      	ldr	r1, [pc, #76]	; (80a501c <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0xa8>)
 80a4fce:	f7ff ff09 	bl	80a4de4 <_ZN9WebServer6expectEPKc>
 80a4fd2:	b108      	cbz	r0, 80a4fd8 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x64>
    type = PUT;
 80a4fd4:	2304      	movs	r3, #4
 80a4fd6:	e7dc      	b.n	80a4f92 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x1e>
  else if (expect("DELETE "))
 80a4fd8:	4628      	mov	r0, r5
 80a4fda:	4911      	ldr	r1, [pc, #68]	; (80a5020 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0xac>)
 80a4fdc:	f7ff ff02 	bl	80a4de4 <_ZN9WebServer6expectEPKc>
 80a4fe0:	b108      	cbz	r0, 80a4fe6 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x72>
    type = DELETE;
 80a4fe2:	2305      	movs	r3, #5
 80a4fe4:	e7d5      	b.n	80a4f92 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x1e>
  else if (expect("PATCH "))
 80a4fe6:	4628      	mov	r0, r5
 80a4fe8:	490e      	ldr	r1, [pc, #56]	; (80a5024 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0xb0>)
 80a4fea:	f7ff fefb 	bl	80a4de4 <_ZN9WebServer6expectEPKc>
 80a4fee:	2800      	cmp	r0, #0
 80a4ff0:	d0dc      	beq.n	80a4fac <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x38>
    type = PATCH;
 80a4ff2:	2306      	movs	r3, #6
 80a4ff4:	e7cd      	b.n	80a4f92 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x1e>
  while ((ch = read()) != -1)
 80a4ff6:	fa24 f303 	lsr.w	r3, r4, r3
 80a4ffa:	07db      	lsls	r3, r3, #31
 80a4ffc:	d4d4      	bmi.n	80a4fa8 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x34>
    if (*length > 0)
 80a4ffe:	6833      	ldr	r3, [r6, #0]
 80a5000:	2b00      	cmp	r3, #0
      *request = ch;
 80a5002:	bfc8      	it	gt
 80a5004:	f807 0b01 	strbgt.w	r0, [r7], #1
    --*length;
 80a5008:	6833      	ldr	r3, [r6, #0]
 80a500a:	3b01      	subs	r3, #1
 80a500c:	6033      	str	r3, [r6, #0]
  while ((ch = read()) != -1)
 80a500e:	e7c3      	b.n	80a4f98 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi+0x24>
 80a5010:	080ad12e 	.word	0x080ad12e
 80a5014:	080ad133 	.word	0x080ad133
 80a5018:	080ad139 	.word	0x080ad139
 80a501c:	080ad13f 	.word	0x080ad13f
 80a5020:	080ad144 	.word	0x080ad144
 80a5024:	080ad14c 	.word	0x080ad14c

080a5028 <_ZN9WebServer14processHeadersEv>:

void WebServer::processHeaders()
{
 80a5028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // header, and the double-CRLF that ends the headers.

  // empty the m_authCredentials before every run of this function.
  // otherwise users who don't send an Authorization header would be treated
  // like the last user who tried to authenticate (possibly successful)
  m_authCredentials[0]=0;
 80a502a:	2300      	movs	r3, #0
{
 80a502c:	4604      	mov	r4, r0

  while (1)
  {
    if (expect("Content-Length:"))
 80a502e:	4d15      	ldr	r5, [pc, #84]	; (80a5084 <_ZN9WebServer14processHeadersEv+0x5c>)
      Serial.print(" ***");
#endif
      continue;
    }

    if (expect("Authorization:"))
 80a5030:	4e15      	ldr	r6, [pc, #84]	; (80a5088 <_ZN9WebServer14processHeadersEv+0x60>)
      Serial.print(" ***");
#endif
      continue;
    }

    if (expect(CRLF CRLF))
 80a5032:	4f16      	ldr	r7, [pc, #88]	; (80a508c <_ZN9WebServer14processHeadersEv+0x64>)
  m_authCredentials[0]=0;
 80a5034:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (expect("Content-Length:"))
 80a5038:	4629      	mov	r1, r5
 80a503a:	4620      	mov	r0, r4
 80a503c:	f7ff fed2 	bl	80a4de4 <_ZN9WebServer6expectEPKc>
 80a5040:	b128      	cbz	r0, 80a504e <_ZN9WebServer14processHeadersEv+0x26>
      readInt(m_contentLength);
 80a5042:	4620      	mov	r0, r4
 80a5044:	f104 017c 	add.w	r1, r4, #124	; 0x7c
 80a5048:	f7ff feeb 	bl	80a4e22 <_ZN9WebServer7readIntERi>
      continue;
 80a504c:	e7f4      	b.n	80a5038 <_ZN9WebServer14processHeadersEv+0x10>
    if (expect("Authorization:"))
 80a504e:	4631      	mov	r1, r6
 80a5050:	4620      	mov	r0, r4
 80a5052:	f7ff fec7 	bl	80a4de4 <_ZN9WebServer6expectEPKc>
 80a5056:	b130      	cbz	r0, 80a5066 <_ZN9WebServer14processHeadersEv+0x3e>
      readHeader(m_authCredentials,51);
 80a5058:	2233      	movs	r2, #51	; 0x33
 80a505a:	4620      	mov	r0, r4
 80a505c:	f104 0180 	add.w	r1, r4, #128	; 0x80
 80a5060:	f7ff ff10 	bl	80a4e84 <_ZN9WebServer10readHeaderEPci>
      continue;
 80a5064:	e7e8      	b.n	80a5038 <_ZN9WebServer14processHeadersEv+0x10>
    if (expect(CRLF CRLF))
 80a5066:	4639      	mov	r1, r7
 80a5068:	4620      	mov	r0, r4
 80a506a:	f7ff febb 	bl	80a4de4 <_ZN9WebServer6expectEPKc>
 80a506e:	b118      	cbz	r0, 80a5078 <_ZN9WebServer14processHeadersEv+0x50>
    {
      m_readingContent = true;
 80a5070:	2301      	movs	r3, #1
 80a5072:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
    if (read() == -1)
    {
      return;
    }
  }
}
 80a5076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (read() == -1)
 80a5078:	4620      	mov	r0, r4
 80a507a:	f7ff fe77 	bl	80a4d6c <_ZN9WebServer4readEv>
 80a507e:	3001      	adds	r0, #1
 80a5080:	d1da      	bne.n	80a5038 <_ZN9WebServer14processHeadersEv+0x10>
 80a5082:	e7f8      	b.n	80a5076 <_ZN9WebServer14processHeadersEv+0x4e>
 80a5084:	080ad153 	.word	0x080ad153
 80a5088:	080ad163 	.word	0x080ad163
 80a508c:	080ad172 	.word	0x080ad172

080a5090 <_ZN9WebServer17processConnectionEPcPi>:
{
 80a5090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a5094:	4604      	mov	r4, r0
 80a5096:	b08b      	sub	sp, #44	; 0x2c
  int urlPrefixLen = strlen(m_urlPrefix);
 80a5098:	6d40      	ldr	r0, [r0, #84]	; 0x54
{
 80a509a:	460d      	mov	r5, r1
 80a509c:	4616      	mov	r6, r2
  int urlPrefixLen = strlen(m_urlPrefix);
 80a509e:	f007 f9de 	bl	80ac45e <strlen>
  m_client = m_server.available();
 80a50a2:	f104 0108 	add.w	r1, r4, #8
  int urlPrefixLen = strlen(m_urlPrefix);
 80a50a6:	4680      	mov	r8, r0
  m_client = m_server.available();
 80a50a8:	a803      	add	r0, sp, #12
 80a50aa:	f001 fcb7 	bl	80a6a1c <_ZN9TCPServer9availableEv>
class Print
 80a50ae:	9b04      	ldr	r3, [sp, #16]
    class __shared_ptr
 80a50b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80a50b2:	63e3      	str	r3, [r4, #60]	; 0x3c
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 80a50b4:	9b05      	ldr	r3, [sp, #20]
 80a50b6:	f104 0938 	add.w	r9, r4, #56	; 0x38
 80a50ba:	6423      	str	r3, [r4, #64]	; 0x40
 80a50bc:	9b06      	ldr	r3, [sp, #24]
 80a50be:	6463      	str	r3, [r4, #68]	; 0x44
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a50c0:	9b07      	ldr	r3, [sp, #28]
 80a50c2:	64a3      	str	r3, [r4, #72]	; 0x48
 80a50c4:	9b08      	ldr	r3, [sp, #32]
 80a50c6:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (__tmp != _M_pi)
 80a50c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a50ca:	429f      	cmp	r7, r3
 80a50cc:	d00c      	beq.n	80a50e8 <_ZN9WebServer17processConnectionEPcPi+0x58>
	    if (__tmp != 0)
 80a50ce:	b117      	cbz	r7, 80a50d6 <_ZN9WebServer17processConnectionEPcPi+0x46>
    { ++_M_use_count; }
 80a50d0:	687b      	ldr	r3, [r7, #4]
 80a50d2:	3301      	adds	r3, #1
 80a50d4:	607b      	str	r3, [r7, #4]
	    if (_M_pi != 0)
 80a50d6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a50d8:	b128      	cbz	r0, 80a50e6 <_ZN9WebServer17processConnectionEPcPi+0x56>
      if (--_M_use_count == 0)
 80a50da:	6843      	ldr	r3, [r0, #4]
 80a50dc:	3b01      	subs	r3, #1
 80a50de:	6043      	str	r3, [r0, #4]
 80a50e0:	b90b      	cbnz	r3, 80a50e6 <_ZN9WebServer17processConnectionEPcPi+0x56>
 80a50e2:	f7ff fc7a 	bl	80a49da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 80a50e6:	6527      	str	r7, [r4, #80]	; 0x50
 80a50e8:	4b32      	ldr	r3, [pc, #200]	; (80a51b4 <_ZN9WebServer17processConnectionEPcPi+0x124>)
      ~__shared_ptr() = default;
 80a50ea:	a809      	add	r0, sp, #36	; 0x24
 80a50ec:	9303      	str	r3, [sp, #12]
 80a50ee:	f7fe fda9 	bl	80a3c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  if (m_client) {
 80a50f2:	4648      	mov	r0, r9
 80a50f4:	f001 fac5 	bl	80a6682 <_ZN9TCPClientcvbEv>
 80a50f8:	2800      	cmp	r0, #0
 80a50fa:	d039      	beq.n	80a5170 <_ZN9WebServer17processConnectionEPcPi+0xe0>
    m_readingContent = false;
 80a50fc:	2300      	movs	r3, #0
    getRequest(requestType, buff, bufflen);
 80a50fe:	462a      	mov	r2, r5
    m_readingContent = false;
 80a5100:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
    ConnectionType requestType = INVALID;
 80a5104:	f88d 300c 	strb.w	r3, [sp, #12]
    buff[0] = 0;
 80a5108:	702b      	strb	r3, [r5, #0]
    getRequest(requestType, buff, bufflen);
 80a510a:	4620      	mov	r0, r4
 80a510c:	4633      	mov	r3, r6
 80a510e:	a903      	add	r1, sp, #12
 80a5110:	f7ff ff30 	bl	80a4f74 <_ZN9WebServer10getRequestERNS_14ConnectionTypeEPcPi>
    if (requestType != INVALID)
 80a5114:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80a5118:	b16b      	cbz	r3, 80a5136 <_ZN9WebServer17processConnectionEPcPi+0xa6>
      processHeaders();
 80a511a:	4620      	mov	r0, r4
 80a511c:	f7ff ff84 	bl	80a5028 <_ZN9WebServer14processHeadersEv>
      if (strcmp(buff, "/robots.txt") == 0)
 80a5120:	4628      	mov	r0, r5
 80a5122:	4925      	ldr	r1, [pc, #148]	; (80a51b8 <_ZN9WebServer17processConnectionEPcPi+0x128>)
 80a5124:	f007 f96d 	bl	80ac402 <strcmp>
 80a5128:	f89d 700c 	ldrb.w	r7, [sp, #12]
 80a512c:	bb18      	cbnz	r0, 80a5176 <_ZN9WebServer17processConnectionEPcPi+0xe6>
        noRobots(requestType);
 80a512e:	4639      	mov	r1, r7
 80a5130:	4620      	mov	r0, r4
 80a5132:	f7ff fdaf 	bl	80a4c94 <_ZN9WebServer8noRobotsENS_14ConnectionTypeE>
    if (requestType == INVALID ||
 80a5136:	6837      	ldr	r7, [r6, #0]
 80a5138:	f89d 900c 	ldrb.w	r9, [sp, #12]
 80a513c:	43ff      	mvns	r7, r7
 80a513e:	0fff      	lsrs	r7, r7, #31
 80a5140:	f1b9 0f00 	cmp.w	r9, #0
 80a5144:	d005      	beq.n	80a5152 <_ZN9WebServer17processConnectionEPcPi+0xc2>
        strncmp(buff, m_urlPrefix, urlPrefixLen) != 0)
 80a5146:	4642      	mov	r2, r8
 80a5148:	4628      	mov	r0, r5
 80a514a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80a514c:	f007 f98f 	bl	80ac46e <strncmp>
    if (requestType == INVALID ||
 80a5150:	b1e0      	cbz	r0, 80a518c <_ZN9WebServer17processConnectionEPcPi+0xfc>
      m_failureCmd(*this, requestType, buff, (*bufflen) >= 0, NULL);
 80a5152:	2300      	movs	r3, #0
 80a5154:	462a      	mov	r2, r5
 80a5156:	9300      	str	r3, [sp, #0]
 80a5158:	4649      	mov	r1, r9
 80a515a:	463b      	mov	r3, r7
 80a515c:	f8d4 60b4 	ldr.w	r6, [r4, #180]	; 0xb4
      m_failureCmd(*this, requestType, buff, (*bufflen) >= 0, NULL);
 80a5160:	4620      	mov	r0, r4
 80a5162:	47b0      	blx	r6
    flushBuf();
 80a5164:	4620      	mov	r0, r4
 80a5166:	f7ff fc83 	bl	80a4a70 <_ZN9WebServer8flushBufEv>
    reset();
 80a516a:	4620      	mov	r0, r4
 80a516c:	f7ff fdf0 	bl	80a4d50 <_ZN9WebServer5resetEv>
}
 80a5170:	b00b      	add	sp, #44	; 0x2c
 80a5172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (strcmp(buff, "/favicon.ico") == 0)
 80a5176:	4628      	mov	r0, r5
 80a5178:	4910      	ldr	r1, [pc, #64]	; (80a51bc <_ZN9WebServer17processConnectionEPcPi+0x12c>)
 80a517a:	f007 f942 	bl	80ac402 <strcmp>
 80a517e:	2800      	cmp	r0, #0
 80a5180:	d1d9      	bne.n	80a5136 <_ZN9WebServer17processConnectionEPcPi+0xa6>
        favicon(requestType);
 80a5182:	4639      	mov	r1, r7
 80a5184:	4620      	mov	r0, r4
 80a5186:	f7ff fd99 	bl	80a4cbc <_ZN9WebServer7faviconENS_14ConnectionTypeE>
 80a518a:	e7d4      	b.n	80a5136 <_ZN9WebServer17processConnectionEPcPi+0xa6>
    else if (!dispatchCommand(requestType, buff + urlPrefixLen,
 80a518c:	463b      	mov	r3, r7
 80a518e:	4649      	mov	r1, r9
 80a5190:	4620      	mov	r0, r4
 80a5192:	eb05 0208 	add.w	r2, r5, r8
 80a5196:	f7ff fca7 	bl	80a4ae8 <_ZN9WebServer15dispatchCommandENS_14ConnectionTypeEPcb>
 80a519a:	2800      	cmp	r0, #0
 80a519c:	d1e2      	bne.n	80a5164 <_ZN9WebServer17processConnectionEPcPi+0xd4>
      m_failureCmd(*this, requestType, buff, (*bufflen) >= 0, NULL);
 80a519e:	6833      	ldr	r3, [r6, #0]
 80a51a0:	462a      	mov	r2, r5
 80a51a2:	43db      	mvns	r3, r3
 80a51a4:	f8d4 60b4 	ldr.w	r6, [r4, #180]	; 0xb4
 80a51a8:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80a51ac:	9000      	str	r0, [sp, #0]
 80a51ae:	0fdb      	lsrs	r3, r3, #31
 80a51b0:	e7d6      	b.n	80a5160 <_ZN9WebServer17processConnectionEPcPi+0xd0>
 80a51b2:	bf00      	nop
 80a51b4:	080ad434 	.word	0x080ad434
 80a51b8:	080ad177 	.word	0x080ad177
 80a51bc:	080ad183 	.word	0x080ad183

080a51c0 <os_thread_scheduling>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 80a51c0:	b508      	push	{r3, lr}
 80a51c2:	4b02      	ldr	r3, [pc, #8]	; (80a51cc <os_thread_scheduling+0xc>)
 80a51c4:	681b      	ldr	r3, [r3, #0]
 80a51c6:	69db      	ldr	r3, [r3, #28]
 80a51c8:	9301      	str	r3, [sp, #4]
 80a51ca:	bd08      	pop	{r3, pc}
 80a51cc:	080601d0 	.word	0x080601d0

080a51d0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a51d0:	b508      	push	{r3, lr}
 80a51d2:	4b02      	ldr	r3, [pc, #8]	; (80a51dc <os_mutex_recursive_create+0xc>)
 80a51d4:	681b      	ldr	r3, [r3, #0]
 80a51d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a51d8:	9301      	str	r3, [sp, #4]
 80a51da:	bd08      	pop	{r3, pc}
 80a51dc:	080601d0 	.word	0x080601d0

080a51e0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a51e0:	b508      	push	{r3, lr}
 80a51e2:	4b02      	ldr	r3, [pc, #8]	; (80a51ec <os_mutex_recursive_destroy+0xc>)
 80a51e4:	681b      	ldr	r3, [r3, #0]
 80a51e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a51e8:	9301      	str	r3, [sp, #4]
 80a51ea:	bd08      	pop	{r3, pc}
 80a51ec:	080601d0 	.word	0x080601d0

080a51f0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a51f0:	b508      	push	{r3, lr}
 80a51f2:	4b02      	ldr	r3, [pc, #8]	; (80a51fc <HAL_RNG_GetRandomNumber+0xc>)
 80a51f4:	681b      	ldr	r3, [r3, #0]
 80a51f6:	685b      	ldr	r3, [r3, #4]
 80a51f8:	9301      	str	r3, [sp, #4]
 80a51fa:	bd08      	pop	{r3, pc}
 80a51fc:	0806019c 	.word	0x0806019c

080a5200 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a5200:	b508      	push	{r3, lr}
 80a5202:	4b02      	ldr	r3, [pc, #8]	; (80a520c <HAL_Delay_Microseconds+0xc>)
 80a5204:	681b      	ldr	r3, [r3, #0]
 80a5206:	68db      	ldr	r3, [r3, #12]
 80a5208:	9301      	str	r3, [sp, #4]
 80a520a:	bd08      	pop	{r3, pc}
 80a520c:	0806019c 	.word	0x0806019c

080a5210 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a5210:	b508      	push	{r3, lr}
 80a5212:	4b02      	ldr	r3, [pc, #8]	; (80a521c <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a5214:	681b      	ldr	r3, [r3, #0]
 80a5216:	691b      	ldr	r3, [r3, #16]
 80a5218:	9301      	str	r3, [sp, #4]
 80a521a:	bd08      	pop	{r3, pc}
 80a521c:	0806019c 	.word	0x0806019c

080a5220 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a5220:	b508      	push	{r3, lr}
 80a5222:	4b02      	ldr	r3, [pc, #8]	; (80a522c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a5224:	681b      	ldr	r3, [r3, #0]
 80a5226:	695b      	ldr	r3, [r3, #20]
 80a5228:	9301      	str	r3, [sp, #4]
 80a522a:	bd08      	pop	{r3, pc}
 80a522c:	0806019c 	.word	0x0806019c

080a5230 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a5230:	b508      	push	{r3, lr}
 80a5232:	4b02      	ldr	r3, [pc, #8]	; (80a523c <hal_rtc_time_is_valid+0xc>)
 80a5234:	681b      	ldr	r3, [r3, #0]
 80a5236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a5238:	9301      	str	r3, [sp, #4]
 80a523a:	bd08      	pop	{r3, pc}
 80a523c:	0806019c 	.word	0x0806019c

080a5240 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a5240:	b508      	push	{r3, lr}
 80a5242:	4b02      	ldr	r3, [pc, #8]	; (80a524c <hal_rtc_get_time+0xc>)
 80a5244:	681b      	ldr	r3, [r3, #0]
 80a5246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a5248:	9301      	str	r3, [sp, #4]
 80a524a:	bd08      	pop	{r3, pc}
 80a524c:	0806019c 	.word	0x0806019c

080a5250 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a5250:	b508      	push	{r3, lr}
 80a5252:	4b02      	ldr	r3, [pc, #8]	; (80a525c <HAL_Pin_Map+0xc>)
 80a5254:	681b      	ldr	r3, [r3, #0]
 80a5256:	681b      	ldr	r3, [r3, #0]
 80a5258:	9301      	str	r3, [sp, #4]
 80a525a:	bd08      	pop	{r3, pc}
 80a525c:	080601b0 	.word	0x080601b0

080a5260 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a5260:	b508      	push	{r3, lr}
 80a5262:	4b02      	ldr	r3, [pc, #8]	; (80a526c <HAL_Validate_Pin_Function+0xc>)
 80a5264:	681b      	ldr	r3, [r3, #0]
 80a5266:	685b      	ldr	r3, [r3, #4]
 80a5268:	9301      	str	r3, [sp, #4]
 80a526a:	bd08      	pop	{r3, pc}
 80a526c:	080601b0 	.word	0x080601b0

080a5270 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a5270:	b508      	push	{r3, lr}
 80a5272:	4b02      	ldr	r3, [pc, #8]	; (80a527c <HAL_Pin_Mode+0xc>)
 80a5274:	681b      	ldr	r3, [r3, #0]
 80a5276:	689b      	ldr	r3, [r3, #8]
 80a5278:	9301      	str	r3, [sp, #4]
 80a527a:	bd08      	pop	{r3, pc}
 80a527c:	080601b0 	.word	0x080601b0

080a5280 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a5280:	b508      	push	{r3, lr}
 80a5282:	4b02      	ldr	r3, [pc, #8]	; (80a528c <HAL_Get_Pin_Mode+0xc>)
 80a5284:	681b      	ldr	r3, [r3, #0]
 80a5286:	68db      	ldr	r3, [r3, #12]
 80a5288:	9301      	str	r3, [sp, #4]
 80a528a:	bd08      	pop	{r3, pc}
 80a528c:	080601b0 	.word	0x080601b0

080a5290 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a5290:	b508      	push	{r3, lr}
 80a5292:	4b02      	ldr	r3, [pc, #8]	; (80a529c <HAL_GPIO_Write+0xc>)
 80a5294:	681b      	ldr	r3, [r3, #0]
 80a5296:	691b      	ldr	r3, [r3, #16]
 80a5298:	9301      	str	r3, [sp, #4]
 80a529a:	bd08      	pop	{r3, pc}
 80a529c:	080601b0 	.word	0x080601b0

080a52a0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a52a0:	b508      	push	{r3, lr}
 80a52a2:	4b02      	ldr	r3, [pc, #8]	; (80a52ac <hal_adc_read+0xc>)
 80a52a4:	681b      	ldr	r3, [r3, #0]
 80a52a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a52a8:	9301      	str	r3, [sp, #4]
 80a52aa:	bd08      	pop	{r3, pc}
 80a52ac:	080601b0 	.word	0x080601b0

080a52b0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a52b0:	b508      	push	{r3, lr}
 80a52b2:	4b02      	ldr	r3, [pc, #8]	; (80a52bc <hal_i2c_write+0xc>)
 80a52b4:	681b      	ldr	r3, [r3, #0]
 80a52b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a52b8:	9301      	str	r3, [sp, #4]
 80a52ba:	bd08      	pop	{r3, pc}
 80a52bc:	080601ac 	.word	0x080601ac

080a52c0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a52c0:	b508      	push	{r3, lr}
 80a52c2:	4b02      	ldr	r3, [pc, #8]	; (80a52cc <hal_i2c_available+0xc>)
 80a52c4:	681b      	ldr	r3, [r3, #0]
 80a52c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a52c8:	9301      	str	r3, [sp, #4]
 80a52ca:	bd08      	pop	{r3, pc}
 80a52cc:	080601ac 	.word	0x080601ac

080a52d0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a52d0:	b508      	push	{r3, lr}
 80a52d2:	4b02      	ldr	r3, [pc, #8]	; (80a52dc <hal_i2c_read+0xc>)
 80a52d4:	681b      	ldr	r3, [r3, #0]
 80a52d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a52d8:	9301      	str	r3, [sp, #4]
 80a52da:	bd08      	pop	{r3, pc}
 80a52dc:	080601ac 	.word	0x080601ac

080a52e0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a52e0:	b508      	push	{r3, lr}
 80a52e2:	4b02      	ldr	r3, [pc, #8]	; (80a52ec <hal_i2c_peek+0xc>)
 80a52e4:	681b      	ldr	r3, [r3, #0]
 80a52e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a52e8:	9301      	str	r3, [sp, #4]
 80a52ea:	bd08      	pop	{r3, pc}
 80a52ec:	080601ac 	.word	0x080601ac

080a52f0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a52f0:	b508      	push	{r3, lr}
 80a52f2:	4b02      	ldr	r3, [pc, #8]	; (80a52fc <hal_i2c_flush+0xc>)
 80a52f4:	681b      	ldr	r3, [r3, #0]
 80a52f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a52f8:	9301      	str	r3, [sp, #4]
 80a52fa:	bd08      	pop	{r3, pc}
 80a52fc:	080601ac 	.word	0x080601ac

080a5300 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a5300:	b508      	push	{r3, lr}
 80a5302:	4b02      	ldr	r3, [pc, #8]	; (80a530c <hal_i2c_is_enabled+0xc>)
 80a5304:	681b      	ldr	r3, [r3, #0]
 80a5306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a5308:	9301      	str	r3, [sp, #4]
 80a530a:	bd08      	pop	{r3, pc}
 80a530c:	080601ac 	.word	0x080601ac

080a5310 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a5310:	b508      	push	{r3, lr}
 80a5312:	4b03      	ldr	r3, [pc, #12]	; (80a5320 <hal_i2c_init+0x10>)
 80a5314:	681b      	ldr	r3, [r3, #0]
 80a5316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a531a:	9301      	str	r3, [sp, #4]
 80a531c:	bd08      	pop	{r3, pc}
 80a531e:	0000      	.short	0x0000
 80a5320:	080601ac 	.word	0x080601ac

080a5324 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a5324:	b508      	push	{r3, lr}
 80a5326:	4b02      	ldr	r3, [pc, #8]	; (80a5330 <socket_active_status+0xc>)
 80a5328:	681b      	ldr	r3, [r3, #0]
 80a532a:	681b      	ldr	r3, [r3, #0]
 80a532c:	9301      	str	r3, [sp, #4]
 80a532e:	bd08      	pop	{r3, pc}
 80a5330:	080601bc 	.word	0x080601bc

080a5334 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a5334:	b508      	push	{r3, lr}
 80a5336:	4b02      	ldr	r3, [pc, #8]	; (80a5340 <socket_handle_valid+0xc>)
 80a5338:	681b      	ldr	r3, [r3, #0]
 80a533a:	685b      	ldr	r3, [r3, #4]
 80a533c:	9301      	str	r3, [sp, #4]
 80a533e:	bd08      	pop	{r3, pc}
 80a5340:	080601bc 	.word	0x080601bc

080a5344 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a5344:	b508      	push	{r3, lr}
 80a5346:	4b02      	ldr	r3, [pc, #8]	; (80a5350 <socket_create+0xc>)
 80a5348:	681b      	ldr	r3, [r3, #0]
 80a534a:	689b      	ldr	r3, [r3, #8]
 80a534c:	9301      	str	r3, [sp, #4]
 80a534e:	bd08      	pop	{r3, pc}
 80a5350:	080601bc 	.word	0x080601bc

080a5354 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a5354:	b508      	push	{r3, lr}
 80a5356:	4b02      	ldr	r3, [pc, #8]	; (80a5360 <socket_connect+0xc>)
 80a5358:	681b      	ldr	r3, [r3, #0]
 80a535a:	68db      	ldr	r3, [r3, #12]
 80a535c:	9301      	str	r3, [sp, #4]
 80a535e:	bd08      	pop	{r3, pc}
 80a5360:	080601bc 	.word	0x080601bc

080a5364 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a5364:	b508      	push	{r3, lr}
 80a5366:	4b02      	ldr	r3, [pc, #8]	; (80a5370 <socket_receive+0xc>)
 80a5368:	681b      	ldr	r3, [r3, #0]
 80a536a:	691b      	ldr	r3, [r3, #16]
 80a536c:	9301      	str	r3, [sp, #4]
 80a536e:	bd08      	pop	{r3, pc}
 80a5370:	080601bc 	.word	0x080601bc

080a5374 <socket_sendto>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a5374:	b508      	push	{r3, lr}
 80a5376:	4b02      	ldr	r3, [pc, #8]	; (80a5380 <socket_sendto+0xc>)
 80a5378:	681b      	ldr	r3, [r3, #0]
 80a537a:	69db      	ldr	r3, [r3, #28]
 80a537c:	9301      	str	r3, [sp, #4]
 80a537e:	bd08      	pop	{r3, pc}
 80a5380:	080601bc 	.word	0x080601bc

080a5384 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a5384:	b508      	push	{r3, lr}
 80a5386:	4b02      	ldr	r3, [pc, #8]	; (80a5390 <socket_close+0xc>)
 80a5388:	681b      	ldr	r3, [r3, #0]
 80a538a:	6a1b      	ldr	r3, [r3, #32]
 80a538c:	9301      	str	r3, [sp, #4]
 80a538e:	bd08      	pop	{r3, pc}
 80a5390:	080601bc 	.word	0x080601bc

080a5394 <socket_create_tcp_server>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
 80a5394:	b508      	push	{r3, lr}
 80a5396:	4b02      	ldr	r3, [pc, #8]	; (80a53a0 <socket_create_tcp_server+0xc>)
 80a5398:	681b      	ldr	r3, [r3, #0]
 80a539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a539c:	9301      	str	r3, [sp, #4]
 80a539e:	bd08      	pop	{r3, pc}
 80a53a0:	080601bc 	.word	0x080601bc

080a53a4 <socket_accept>:
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
 80a53a4:	b508      	push	{r3, lr}
 80a53a6:	4b02      	ldr	r3, [pc, #8]	; (80a53b0 <socket_accept+0xc>)
 80a53a8:	681b      	ldr	r3, [r3, #0]
 80a53aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a53ac:	9301      	str	r3, [sp, #4]
 80a53ae:	bd08      	pop	{r3, pc}
 80a53b0:	080601bc 	.word	0x080601bc

080a53b4 <socket_handle_invalid>:
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a53b4:	b508      	push	{r3, lr}
 80a53b6:	4b02      	ldr	r3, [pc, #8]	; (80a53c0 <socket_handle_invalid+0xc>)
 80a53b8:	681b      	ldr	r3, [r3, #0]
 80a53ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a53bc:	9301      	str	r3, [sp, #4]
 80a53be:	bd08      	pop	{r3, pc}
 80a53c0:	080601bc 	.word	0x080601bc

080a53c4 <socket_join_multicast>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
 80a53c4:	b508      	push	{r3, lr}
 80a53c6:	4b02      	ldr	r3, [pc, #8]	; (80a53d0 <socket_join_multicast+0xc>)
 80a53c8:	681b      	ldr	r3, [r3, #0]
 80a53ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a53cc:	9301      	str	r3, [sp, #4]
 80a53ce:	bd08      	pop	{r3, pc}
 80a53d0:	080601bc 	.word	0x080601bc

080a53d4 <socket_peer>:
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
 80a53d4:	b508      	push	{r3, lr}
 80a53d6:	4b02      	ldr	r3, [pc, #8]	; (80a53e0 <socket_peer+0xc>)
 80a53d8:	681b      	ldr	r3, [r3, #0]
 80a53da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a53dc:	9301      	str	r3, [sp, #4]
 80a53de:	bd08      	pop	{r3, pc}
 80a53e0:	080601bc 	.word	0x080601bc

080a53e4 <socket_send_ex>:
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a53e4:	b508      	push	{r3, lr}
 80a53e6:	4b02      	ldr	r3, [pc, #8]	; (80a53f0 <socket_send_ex+0xc>)
 80a53e8:	681b      	ldr	r3, [r3, #0]
 80a53ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a53ec:	9301      	str	r3, [sp, #4]
 80a53ee:	bd08      	pop	{r3, pc}
 80a53f0:	080601bc 	.word	0x080601bc

080a53f4 <socket_receivefrom_ex>:
DYNALIB_FN(18, hal_socket, socket_receivefrom_ex, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*, system_tick_t, void*))
 80a53f4:	b508      	push	{r3, lr}
 80a53f6:	4b02      	ldr	r3, [pc, #8]	; (80a5400 <socket_receivefrom_ex+0xc>)
 80a53f8:	681b      	ldr	r3, [r3, #0]
 80a53fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a53fc:	9301      	str	r3, [sp, #4]
 80a53fe:	bd08      	pop	{r3, pc}
 80a5400:	080601bc 	.word	0x080601bc

080a5404 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a5404:	b508      	push	{r3, lr}
 80a5406:	4b02      	ldr	r3, [pc, #8]	; (80a5410 <hal_spi_init+0xc>)
 80a5408:	681b      	ldr	r3, [r3, #0]
 80a540a:	69db      	ldr	r3, [r3, #28]
 80a540c:	9301      	str	r3, [sp, #4]
 80a540e:	bd08      	pop	{r3, pc}
 80a5410:	080601b4 	.word	0x080601b4

080a5414 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a5414:	b508      	push	{r3, lr}
 80a5416:	4b02      	ldr	r3, [pc, #8]	; (80a5420 <hal_spi_is_enabled+0xc>)
 80a5418:	681b      	ldr	r3, [r3, #0]
 80a541a:	6a1b      	ldr	r3, [r3, #32]
 80a541c:	9301      	str	r3, [sp, #4]
 80a541e:	bd08      	pop	{r3, pc}
 80a5420:	080601b4 	.word	0x080601b4

080a5424 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a5424:	b508      	push	{r3, lr}
 80a5426:	4b02      	ldr	r3, [pc, #8]	; (80a5430 <hal_usart_init+0xc>)
 80a5428:	681b      	ldr	r3, [r3, #0]
 80a542a:	699b      	ldr	r3, [r3, #24]
 80a542c:	9301      	str	r3, [sp, #4]
 80a542e:	bd08      	pop	{r3, pc}
 80a5430:	080601c4 	.word	0x080601c4

080a5434 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a5434:	b508      	push	{r3, lr}
 80a5436:	4b02      	ldr	r3, [pc, #8]	; (80a5440 <hal_usart_write+0xc>)
 80a5438:	681b      	ldr	r3, [r3, #0]
 80a543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a543c:	9301      	str	r3, [sp, #4]
 80a543e:	bd08      	pop	{r3, pc}
 80a5440:	080601c4 	.word	0x080601c4

080a5444 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a5444:	b508      	push	{r3, lr}
 80a5446:	4b02      	ldr	r3, [pc, #8]	; (80a5450 <hal_usart_available+0xc>)
 80a5448:	681b      	ldr	r3, [r3, #0]
 80a544a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a544c:	9301      	str	r3, [sp, #4]
 80a544e:	bd08      	pop	{r3, pc}
 80a5450:	080601c4 	.word	0x080601c4

080a5454 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a5454:	b508      	push	{r3, lr}
 80a5456:	4b02      	ldr	r3, [pc, #8]	; (80a5460 <hal_usart_read+0xc>)
 80a5458:	681b      	ldr	r3, [r3, #0]
 80a545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a545c:	9301      	str	r3, [sp, #4]
 80a545e:	bd08      	pop	{r3, pc}
 80a5460:	080601c4 	.word	0x080601c4

080a5464 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a5464:	b508      	push	{r3, lr}
 80a5466:	4b02      	ldr	r3, [pc, #8]	; (80a5470 <hal_usart_peek+0xc>)
 80a5468:	681b      	ldr	r3, [r3, #0]
 80a546a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a546c:	9301      	str	r3, [sp, #4]
 80a546e:	bd08      	pop	{r3, pc}
 80a5470:	080601c4 	.word	0x080601c4

080a5474 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a5474:	b508      	push	{r3, lr}
 80a5476:	4b02      	ldr	r3, [pc, #8]	; (80a5480 <hal_usart_flush+0xc>)
 80a5478:	681b      	ldr	r3, [r3, #0]
 80a547a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a547c:	9301      	str	r3, [sp, #4]
 80a547e:	bd08      	pop	{r3, pc}
 80a5480:	080601c4 	.word	0x080601c4

080a5484 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a5484:	b508      	push	{r3, lr}
 80a5486:	4b02      	ldr	r3, [pc, #8]	; (80a5490 <hal_usart_is_enabled+0xc>)
 80a5488:	681b      	ldr	r3, [r3, #0]
 80a548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a548c:	9301      	str	r3, [sp, #4]
 80a548e:	bd08      	pop	{r3, pc}
 80a5490:	080601c4 	.word	0x080601c4

080a5494 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a5494:	b508      	push	{r3, lr}
 80a5496:	4b02      	ldr	r3, [pc, #8]	; (80a54a0 <hal_usart_available_data_for_write+0xc>)
 80a5498:	681b      	ldr	r3, [r3, #0]
 80a549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a549c:	9301      	str	r3, [sp, #4]
 80a549e:	bd08      	pop	{r3, pc}
 80a54a0:	080601c4 	.word	0x080601c4

080a54a4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a54a4:	b508      	push	{r3, lr}
 80a54a6:	4b02      	ldr	r3, [pc, #8]	; (80a54b0 <HAL_USB_USART_Init+0xc>)
 80a54a8:	681b      	ldr	r3, [r3, #0]
 80a54aa:	681b      	ldr	r3, [r3, #0]
 80a54ac:	9301      	str	r3, [sp, #4]
 80a54ae:	bd08      	pop	{r3, pc}
 80a54b0:	080601d8 	.word	0x080601d8

080a54b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a54b4:	b508      	push	{r3, lr}
 80a54b6:	4b02      	ldr	r3, [pc, #8]	; (80a54c0 <HAL_USB_USART_Available_Data+0xc>)
 80a54b8:	681b      	ldr	r3, [r3, #0]
 80a54ba:	691b      	ldr	r3, [r3, #16]
 80a54bc:	9301      	str	r3, [sp, #4]
 80a54be:	bd08      	pop	{r3, pc}
 80a54c0:	080601d8 	.word	0x080601d8

080a54c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a54c4:	b508      	push	{r3, lr}
 80a54c6:	4b02      	ldr	r3, [pc, #8]	; (80a54d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a54c8:	681b      	ldr	r3, [r3, #0]
 80a54ca:	695b      	ldr	r3, [r3, #20]
 80a54cc:	9301      	str	r3, [sp, #4]
 80a54ce:	bd08      	pop	{r3, pc}
 80a54d0:	080601d8 	.word	0x080601d8

080a54d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a54d4:	b508      	push	{r3, lr}
 80a54d6:	4b02      	ldr	r3, [pc, #8]	; (80a54e0 <HAL_USB_USART_Receive_Data+0xc>)
 80a54d8:	681b      	ldr	r3, [r3, #0]
 80a54da:	699b      	ldr	r3, [r3, #24]
 80a54dc:	9301      	str	r3, [sp, #4]
 80a54de:	bd08      	pop	{r3, pc}
 80a54e0:	080601d8 	.word	0x080601d8

080a54e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a54e4:	b508      	push	{r3, lr}
 80a54e6:	4b02      	ldr	r3, [pc, #8]	; (80a54f0 <HAL_USB_USART_Send_Data+0xc>)
 80a54e8:	681b      	ldr	r3, [r3, #0]
 80a54ea:	69db      	ldr	r3, [r3, #28]
 80a54ec:	9301      	str	r3, [sp, #4]
 80a54ee:	bd08      	pop	{r3, pc}
 80a54f0:	080601d8 	.word	0x080601d8

080a54f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a54f4:	b508      	push	{r3, lr}
 80a54f6:	4b02      	ldr	r3, [pc, #8]	; (80a5500 <HAL_USB_USART_Flush_Data+0xc>)
 80a54f8:	681b      	ldr	r3, [r3, #0]
 80a54fa:	6a1b      	ldr	r3, [r3, #32]
 80a54fc:	9301      	str	r3, [sp, #4]
 80a54fe:	bd08      	pop	{r3, pc}
 80a5500:	080601d8 	.word	0x080601d8

080a5504 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a5504:	b508      	push	{r3, lr}
 80a5506:	4b02      	ldr	r3, [pc, #8]	; (80a5510 <HAL_NET_SetNetWatchDog+0xc>)
 80a5508:	681b      	ldr	r3, [r3, #0]
 80a550a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a550c:	9301      	str	r3, [sp, #4]
 80a550e:	bd08      	pop	{r3, pc}
 80a5510:	080601c0 	.word	0x080601c0

080a5514 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a5514:	b508      	push	{r3, lr}
 80a5516:	4b02      	ldr	r3, [pc, #8]	; (80a5520 <inet_gethostbyname+0xc>)
 80a5518:	681b      	ldr	r3, [r3, #0]
 80a551a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a551c:	9301      	str	r3, [sp, #4]
 80a551e:	bd08      	pop	{r3, pc}
 80a5520:	080601c0 	.word	0x080601c0

080a5524 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a5524:	b508      	push	{r3, lr}
 80a5526:	4b02      	ldr	r3, [pc, #8]	; (80a5530 <panic_+0xc>)
 80a5528:	681b      	ldr	r3, [r3, #0]
 80a552a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a552c:	9301      	str	r3, [sp, #4]
 80a552e:	bd08      	pop	{r3, pc}
 80a5530:	080201a8 	.word	0x080201a8

080a5534 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a5534:	b508      	push	{r3, lr}
 80a5536:	4b02      	ldr	r3, [pc, #8]	; (80a5540 <log_message+0xc>)
 80a5538:	681b      	ldr	r3, [r3, #0]
 80a553a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a553c:	9301      	str	r3, [sp, #4]
 80a553e:	bd08      	pop	{r3, pc}
 80a5540:	080201a8 	.word	0x080201a8

080a5544 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a5544:	b508      	push	{r3, lr}
 80a5546:	4b02      	ldr	r3, [pc, #8]	; (80a5550 <system_mode+0xc>)
 80a5548:	681b      	ldr	r3, [r3, #0]
 80a554a:	681b      	ldr	r3, [r3, #0]
 80a554c:	9301      	str	r3, [sp, #4]
 80a554e:	bd08      	pop	{r3, pc}
 80a5550:	080601a4 	.word	0x080601a4

080a5554 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a5554:	b508      	push	{r3, lr}
 80a5556:	4b02      	ldr	r3, [pc, #8]	; (80a5560 <set_system_mode+0xc>)
 80a5558:	681b      	ldr	r3, [r3, #0]
 80a555a:	685b      	ldr	r3, [r3, #4]
 80a555c:	9301      	str	r3, [sp, #4]
 80a555e:	bd08      	pop	{r3, pc}
 80a5560:	080601a4 	.word	0x080601a4

080a5564 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a5564:	b508      	push	{r3, lr}
 80a5566:	4b02      	ldr	r3, [pc, #8]	; (80a5570 <system_delay_ms+0xc>)
 80a5568:	681b      	ldr	r3, [r3, #0]
 80a556a:	695b      	ldr	r3, [r3, #20]
 80a556c:	9301      	str	r3, [sp, #4]
 80a556e:	bd08      	pop	{r3, pc}
 80a5570:	080601a4 	.word	0x080601a4

080a5574 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a5574:	b508      	push	{r3, lr}
 80a5576:	4b02      	ldr	r3, [pc, #8]	; (80a5580 <application_thread_current+0xc>)
 80a5578:	681b      	ldr	r3, [r3, #0]
 80a557a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a557c:	9301      	str	r3, [sp, #4]
 80a557e:	bd08      	pop	{r3, pc}
 80a5580:	080601a4 	.word	0x080601a4

080a5584 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a5584:	b508      	push	{r3, lr}
 80a5586:	4b02      	ldr	r3, [pc, #8]	; (80a5590 <application_thread_invoke+0xc>)
 80a5588:	681b      	ldr	r3, [r3, #0]
 80a558a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a558c:	9301      	str	r3, [sp, #4]
 80a558e:	bd08      	pop	{r3, pc}
 80a5590:	080601a4 	.word	0x080601a4

080a5594 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a5594:	b508      	push	{r3, lr}
 80a5596:	4b02      	ldr	r3, [pc, #8]	; (80a55a0 <system_thread_get_state+0xc>)
 80a5598:	681b      	ldr	r3, [r3, #0]
 80a559a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a559c:	9301      	str	r3, [sp, #4]
 80a559e:	bd08      	pop	{r3, pc}
 80a55a0:	080601a4 	.word	0x080601a4

080a55a4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a55a4:	b508      	push	{r3, lr}
 80a55a6:	4b03      	ldr	r3, [pc, #12]	; (80a55b4 <system_ctrl_set_app_request_handler+0x10>)
 80a55a8:	681b      	ldr	r3, [r3, #0]
 80a55aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a55ae:	9301      	str	r3, [sp, #4]
 80a55b0:	bd08      	pop	{r3, pc}
 80a55b2:	0000      	.short	0x0000
 80a55b4:	080601a4 	.word	0x080601a4

080a55b8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a55b8:	b508      	push	{r3, lr}
 80a55ba:	4b03      	ldr	r3, [pc, #12]	; (80a55c8 <system_ctrl_set_result+0x10>)
 80a55bc:	681b      	ldr	r3, [r3, #0]
 80a55be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a55c2:	9301      	str	r3, [sp, #4]
 80a55c4:	bd08      	pop	{r3, pc}
 80a55c6:	0000      	.short	0x0000
 80a55c8:	080601a4 	.word	0x080601a4

080a55cc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a55cc:	b508      	push	{r3, lr}
 80a55ce:	4b02      	ldr	r3, [pc, #8]	; (80a55d8 <spark_variable+0xc>)
 80a55d0:	681b      	ldr	r3, [r3, #0]
 80a55d2:	681b      	ldr	r3, [r3, #0]
 80a55d4:	9301      	str	r3, [sp, #4]
 80a55d6:	bd08      	pop	{r3, pc}
 80a55d8:	080601cc 	.word	0x080601cc

080a55dc <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a55dc:	b508      	push	{r3, lr}
 80a55de:	4b02      	ldr	r3, [pc, #8]	; (80a55e8 <spark_process+0xc>)
 80a55e0:	681b      	ldr	r3, [r3, #0]
 80a55e2:	689b      	ldr	r3, [r3, #8]
 80a55e4:	9301      	str	r3, [sp, #4]
 80a55e6:	bd08      	pop	{r3, pc}
 80a55e8:	080601cc 	.word	0x080601cc

080a55ec <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a55ec:	b508      	push	{r3, lr}
 80a55ee:	4b02      	ldr	r3, [pc, #8]	; (80a55f8 <spark_cloud_flag_connected+0xc>)
 80a55f0:	681b      	ldr	r3, [r3, #0]
 80a55f2:	695b      	ldr	r3, [r3, #20]
 80a55f4:	9301      	str	r3, [sp, #4]
 80a55f6:	bd08      	pop	{r3, pc}
 80a55f8:	080601cc 	.word	0x080601cc

080a55fc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a55fc:	b508      	push	{r3, lr}
 80a55fe:	4b02      	ldr	r3, [pc, #8]	; (80a5608 <spark_send_event+0xc>)
 80a5600:	681b      	ldr	r3, [r3, #0]
 80a5602:	6a1b      	ldr	r3, [r3, #32]
 80a5604:	9301      	str	r3, [sp, #4]
 80a5606:	bd08      	pop	{r3, pc}
 80a5608:	080601cc 	.word	0x080601cc

080a560c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a560c:	b508      	push	{r3, lr}
 80a560e:	4b02      	ldr	r3, [pc, #8]	; (80a5618 <spark_sync_time_pending+0xc>)
 80a5610:	681b      	ldr	r3, [r3, #0]
 80a5612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a5614:	9301      	str	r3, [sp, #4]
 80a5616:	bd08      	pop	{r3, pc}
 80a5618:	080601cc 	.word	0x080601cc

080a561c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a561c:	b508      	push	{r3, lr}
 80a561e:	4b02      	ldr	r3, [pc, #8]	; (80a5628 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a5620:	681b      	ldr	r3, [r3, #0]
 80a5622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a5624:	9301      	str	r3, [sp, #4]
 80a5626:	bd08      	pop	{r3, pc}
 80a5628:	080601cc 	.word	0x080601cc

080a562c <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a562c:	b508      	push	{r3, lr}
 80a562e:	4b02      	ldr	r3, [pc, #8]	; (80a5638 <network_config+0xc>)
 80a5630:	681b      	ldr	r3, [r3, #0]
 80a5632:	681b      	ldr	r3, [r3, #0]
 80a5634:	9301      	str	r3, [sp, #4]
 80a5636:	bd08      	pop	{r3, pc}
 80a5638:	080601c8 	.word	0x080601c8

080a563c <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a563c:	b508      	push	{r3, lr}
 80a563e:	4b02      	ldr	r3, [pc, #8]	; (80a5648 <network_connect+0xc>)
 80a5640:	681b      	ldr	r3, [r3, #0]
 80a5642:	685b      	ldr	r3, [r3, #4]
 80a5644:	9301      	str	r3, [sp, #4]
 80a5646:	bd08      	pop	{r3, pc}
 80a5648:	080601c8 	.word	0x080601c8

080a564c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a564c:	b508      	push	{r3, lr}
 80a564e:	4b02      	ldr	r3, [pc, #8]	; (80a5658 <network_connecting+0xc>)
 80a5650:	681b      	ldr	r3, [r3, #0]
 80a5652:	689b      	ldr	r3, [r3, #8]
 80a5654:	9301      	str	r3, [sp, #4]
 80a5656:	bd08      	pop	{r3, pc}
 80a5658:	080601c8 	.word	0x080601c8

080a565c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a565c:	b508      	push	{r3, lr}
 80a565e:	4b02      	ldr	r3, [pc, #8]	; (80a5668 <network_disconnect+0xc>)
 80a5660:	681b      	ldr	r3, [r3, #0]
 80a5662:	68db      	ldr	r3, [r3, #12]
 80a5664:	9301      	str	r3, [sp, #4]
 80a5666:	bd08      	pop	{r3, pc}
 80a5668:	080601c8 	.word	0x080601c8

080a566c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a566c:	b508      	push	{r3, lr}
 80a566e:	4b02      	ldr	r3, [pc, #8]	; (80a5678 <network_ready+0xc>)
 80a5670:	681b      	ldr	r3, [r3, #0]
 80a5672:	691b      	ldr	r3, [r3, #16]
 80a5674:	9301      	str	r3, [sp, #4]
 80a5676:	bd08      	pop	{r3, pc}
 80a5678:	080601c8 	.word	0x080601c8

080a567c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a567c:	b508      	push	{r3, lr}
 80a567e:	4b02      	ldr	r3, [pc, #8]	; (80a5688 <network_on+0xc>)
 80a5680:	681b      	ldr	r3, [r3, #0]
 80a5682:	695b      	ldr	r3, [r3, #20]
 80a5684:	9301      	str	r3, [sp, #4]
 80a5686:	bd08      	pop	{r3, pc}
 80a5688:	080601c8 	.word	0x080601c8

080a568c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a568c:	b508      	push	{r3, lr}
 80a568e:	4b02      	ldr	r3, [pc, #8]	; (80a5698 <network_off+0xc>)
 80a5690:	681b      	ldr	r3, [r3, #0]
 80a5692:	699b      	ldr	r3, [r3, #24]
 80a5694:	9301      	str	r3, [sp, #4]
 80a5696:	bd08      	pop	{r3, pc}
 80a5698:	080601c8 	.word	0x080601c8

080a569c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a569c:	b508      	push	{r3, lr}
 80a569e:	4b02      	ldr	r3, [pc, #8]	; (80a56a8 <network_listen+0xc>)
 80a56a0:	681b      	ldr	r3, [r3, #0]
 80a56a2:	69db      	ldr	r3, [r3, #28]
 80a56a4:	9301      	str	r3, [sp, #4]
 80a56a6:	bd08      	pop	{r3, pc}
 80a56a8:	080601c8 	.word	0x080601c8

080a56ac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a56ac:	b508      	push	{r3, lr}
 80a56ae:	4b02      	ldr	r3, [pc, #8]	; (80a56b8 <network_listening+0xc>)
 80a56b0:	681b      	ldr	r3, [r3, #0]
 80a56b2:	6a1b      	ldr	r3, [r3, #32]
 80a56b4:	9301      	str	r3, [sp, #4]
 80a56b6:	bd08      	pop	{r3, pc}
 80a56b8:	080601c8 	.word	0x080601c8

080a56bc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a56bc:	b508      	push	{r3, lr}
 80a56be:	4b02      	ldr	r3, [pc, #8]	; (80a56c8 <network_set_listen_timeout+0xc>)
 80a56c0:	681b      	ldr	r3, [r3, #0]
 80a56c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a56c4:	9301      	str	r3, [sp, #4]
 80a56c6:	bd08      	pop	{r3, pc}
 80a56c8:	080601c8 	.word	0x080601c8

080a56cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a56cc:	b508      	push	{r3, lr}
 80a56ce:	4b02      	ldr	r3, [pc, #8]	; (80a56d8 <network_get_listen_timeout+0xc>)
 80a56d0:	681b      	ldr	r3, [r3, #0]
 80a56d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a56d4:	9301      	str	r3, [sp, #4]
 80a56d6:	bd08      	pop	{r3, pc}
 80a56d8:	080601c8 	.word	0x080601c8

080a56dc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a56dc:	b508      	push	{r3, lr}
 80a56de:	4b02      	ldr	r3, [pc, #8]	; (80a56e8 <network_is_on+0xc>)
 80a56e0:	681b      	ldr	r3, [r3, #0]
 80a56e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a56e4:	9301      	str	r3, [sp, #4]
 80a56e6:	bd08      	pop	{r3, pc}
 80a56e8:	080601c8 	.word	0x080601c8

080a56ec <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a56ec:	b508      	push	{r3, lr}
 80a56ee:	4b02      	ldr	r3, [pc, #8]	; (80a56f8 <network_is_off+0xc>)
 80a56f0:	681b      	ldr	r3, [r3, #0]
 80a56f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a56f4:	9301      	str	r3, [sp, #4]
 80a56f6:	bd08      	pop	{r3, pc}
 80a56f8:	080601c8 	.word	0x080601c8

080a56fc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a56fc:	b508      	push	{r3, lr}
 80a56fe:	4b02      	ldr	r3, [pc, #8]	; (80a5708 <malloc+0xc>)
 80a5700:	681b      	ldr	r3, [r3, #0]
 80a5702:	681b      	ldr	r3, [r3, #0]
 80a5704:	9301      	str	r3, [sp, #4]
 80a5706:	bd08      	pop	{r3, pc}
 80a5708:	080601a0 	.word	0x080601a0

080a570c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a570c:	b508      	push	{r3, lr}
 80a570e:	4b02      	ldr	r3, [pc, #8]	; (80a5718 <free+0xc>)
 80a5710:	681b      	ldr	r3, [r3, #0]
 80a5712:	685b      	ldr	r3, [r3, #4]
 80a5714:	9301      	str	r3, [sp, #4]
 80a5716:	bd08      	pop	{r3, pc}
 80a5718:	080601a0 	.word	0x080601a0

080a571c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a571c:	b508      	push	{r3, lr}
 80a571e:	4b02      	ldr	r3, [pc, #8]	; (80a5728 <realloc+0xc>)
 80a5720:	681b      	ldr	r3, [r3, #0]
 80a5722:	689b      	ldr	r3, [r3, #8]
 80a5724:	9301      	str	r3, [sp, #4]
 80a5726:	bd08      	pop	{r3, pc}
 80a5728:	080601a0 	.word	0x080601a0

080a572c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a572c:	b508      	push	{r3, lr}
 80a572e:	4b02      	ldr	r3, [pc, #8]	; (80a5738 <sprintf+0xc>)
 80a5730:	681b      	ldr	r3, [r3, #0]
 80a5732:	68db      	ldr	r3, [r3, #12]
 80a5734:	9301      	str	r3, [sp, #4]
 80a5736:	bd08      	pop	{r3, pc}
 80a5738:	080601a0 	.word	0x080601a0

080a573c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a573c:	b508      	push	{r3, lr}
 80a573e:	4b02      	ldr	r3, [pc, #8]	; (80a5748 <abort+0xc>)
 80a5740:	681b      	ldr	r3, [r3, #0]
 80a5742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a5744:	9301      	str	r3, [sp, #4]
 80a5746:	bd08      	pop	{r3, pc}
 80a5748:	080601a0 	.word	0x080601a0

080a574c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a574c:	b508      	push	{r3, lr}
 80a574e:	4b02      	ldr	r3, [pc, #8]	; (80a5758 <_malloc_r+0xc>)
 80a5750:	681b      	ldr	r3, [r3, #0]
 80a5752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a5754:	9301      	str	r3, [sp, #4]
 80a5756:	bd08      	pop	{r3, pc}
 80a5758:	080601a0 	.word	0x080601a0

080a575c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a575c:	b508      	push	{r3, lr}
 80a575e:	4b02      	ldr	r3, [pc, #8]	; (80a5768 <__errno+0xc>)
 80a5760:	681b      	ldr	r3, [r3, #0]
 80a5762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a5764:	9301      	str	r3, [sp, #4]
 80a5766:	bd08      	pop	{r3, pc}
 80a5768:	080601a0 	.word	0x080601a0

080a576c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a576c:	b508      	push	{r3, lr}
 80a576e:	4b02      	ldr	r3, [pc, #8]	; (80a5778 <newlib_impure_ptr_callback+0xc>)
 80a5770:	681b      	ldr	r3, [r3, #0]
 80a5772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a5774:	9301      	str	r3, [sp, #4]
 80a5776:	bd08      	pop	{r3, pc}
 80a5778:	080601a0 	.word	0x080601a0

080a577c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a577c:	2100      	movs	r1, #0
 80a577e:	f7ff bef1 	b.w	80a5564 <system_delay_ms>

080a5782 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a5782:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a5784:	6883      	ldr	r3, [r0, #8]
 80a5786:	4604      	mov	r4, r0
 80a5788:	b90b      	cbnz	r3, 80a578e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a578a:	f002 f897 	bl	80a78bc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a578e:	68c3      	ldr	r3, [r0, #12]
 80a5790:	4798      	blx	r3
      if (_M_manager)
 80a5792:	68a3      	ldr	r3, [r4, #8]
 80a5794:	b11b      	cbz	r3, 80a579e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a5796:	2203      	movs	r2, #3
 80a5798:	4621      	mov	r1, r4
 80a579a:	4620      	mov	r0, r4
 80a579c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a579e:	4620      	mov	r0, r4
}
 80a57a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a57a4:	2110      	movs	r1, #16
 80a57a6:	f001 bfbc 	b.w	80a7722 <_ZdlPvj>

080a57aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a57aa:	4770      	bx	lr

080a57ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a57ac:	2000      	movs	r0, #0
 80a57ae:	4770      	bx	lr

080a57b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a57b0:	b510      	push	{r4, lr}
 80a57b2:	4604      	mov	r4, r0
 80a57b4:	2110      	movs	r1, #16
 80a57b6:	f001 ffb4 	bl	80a7722 <_ZdlPvj>
 80a57ba:	4620      	mov	r0, r4
 80a57bc:	bd10      	pop	{r4, pc}

080a57be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a57be:	b508      	push	{r3, lr}
      { delete this; }
 80a57c0:	f7ff fff6 	bl	80a57b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a57c4:	bd08      	pop	{r3, pc}

080a57c6 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a57c6:	b510      	push	{r4, lr}
      if (_M_manager)
 80a57c8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a57ca:	4604      	mov	r4, r0
      if (_M_manager)
 80a57cc:	b113      	cbz	r3, 80a57d4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a57ce:	2203      	movs	r2, #3
 80a57d0:	4601      	mov	r1, r0
 80a57d2:	4798      	blx	r3
    }
 80a57d4:	4620      	mov	r0, r4
 80a57d6:	bd10      	pop	{r4, pc}

080a57d8 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a57d8:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a57da:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a57dc:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a57e0:	6002      	str	r2, [r0, #0]
 80a57e2:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a57e4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a57e6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a57e8:	680c      	ldr	r4, [r1, #0]
 80a57ea:	8085      	strh	r5, [r0, #4]
 80a57ec:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a57ee:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a57f0:	bd30      	pop	{r4, r5, pc}

080a57f2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a57f2:	b510      	push	{r4, lr}
 80a57f4:	4604      	mov	r4, r0
    free((void*)msg_);
 80a57f6:	6800      	ldr	r0, [r0, #0]
 80a57f8:	f7ff ff88 	bl	80a570c <free>
}
 80a57fc:	4620      	mov	r0, r4
 80a57fe:	bd10      	pop	{r4, pc}

080a5800 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a5800:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a5802:	68c4      	ldr	r4, [r0, #12]
 80a5804:	b1f4      	cbz	r4, 80a5844 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a5806:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a5808:	2b02      	cmp	r3, #2
 80a580a:	d103      	bne.n	80a5814 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a580c:	f104 000c 	add.w	r0, r4, #12
 80a5810:	f7ff ffef 	bl	80a57f2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a5814:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a5816:	b135      	cbz	r5, 80a5826 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a5818:	4628      	mov	r0, r5
 80a581a:	f7ff ffd4 	bl	80a57c6 <_ZNSt14_Function_baseD1Ev>
 80a581e:	2110      	movs	r1, #16
 80a5820:	4628      	mov	r0, r5
 80a5822:	f001 ff7e 	bl	80a7722 <_ZdlPvj>
 80a5826:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a5828:	b135      	cbz	r5, 80a5838 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a582a:	4628      	mov	r0, r5
 80a582c:	f7ff ffcb 	bl	80a57c6 <_ZNSt14_Function_baseD1Ev>
 80a5830:	2110      	movs	r1, #16
 80a5832:	4628      	mov	r0, r5
 80a5834:	f001 ff75 	bl	80a7722 <_ZdlPvj>
 80a5838:	4620      	mov	r0, r4
 80a583a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a583e:	2114      	movs	r1, #20
 80a5840:	f001 bf6f 	b.w	80a7722 <_ZdlPvj>
 80a5844:	bd38      	pop	{r3, r4, r5, pc}

080a5846 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a5846:	680b      	ldr	r3, [r1, #0]
 80a5848:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a584a:	b113      	cbz	r3, 80a5852 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a584c:	685a      	ldr	r2, [r3, #4]
 80a584e:	3201      	adds	r2, #1
 80a5850:	605a      	str	r2, [r3, #4]
      }
 80a5852:	4770      	bx	lr

080a5854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a5854:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a5856:	460e      	mov	r6, r1
 80a5858:	4604      	mov	r4, r0
 80a585a:	f856 3b04 	ldr.w	r3, [r6], #4
 80a585e:	460d      	mov	r5, r1
 80a5860:	a801      	add	r0, sp, #4
 80a5862:	4631      	mov	r1, r6
 80a5864:	9300      	str	r3, [sp, #0]
 80a5866:	f7ff ffee 	bl	80a5846 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a586a:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a586c:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a586e:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a5870:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a5872:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a5874:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a5876:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a5878:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a587a:	f7fe f9e3 	bl	80a3c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a587e:	4630      	mov	r0, r6
 80a5880:	f7fe f9e0 	bl	80a3c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a5884:	4628      	mov	r0, r5
 80a5886:	2108      	movs	r1, #8
 80a5888:	f001 ff4b 	bl	80a7722 <_ZdlPvj>
        return p;
    }
 80a588c:	4620      	mov	r0, r4
 80a588e:	b002      	add	sp, #8
 80a5890:	bd70      	pop	{r4, r5, r6, pc}

080a5892 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a5892:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a5894:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a5896:	460b      	mov	r3, r1
 80a5898:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a589a:	c803      	ldmia	r0, {r0, r1}
 80a589c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a58a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a58a4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a58a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a58ac:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a58b0:	b002      	add	sp, #8
 80a58b2:	bd10      	pop	{r4, pc}

080a58b4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a58b4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a58b6:	b510      	push	{r4, lr}
      if (_M_empty())
 80a58b8:	b90a      	cbnz	r2, 80a58be <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a58ba:	f001 ffff 	bl	80a78bc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a58be:	68c3      	ldr	r3, [r0, #12]
    }
 80a58c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a58c4:	4718      	bx	r3

080a58c6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a58c6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a58c8:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a58ca:	f100 0110 	add.w	r1, r0, #16
 80a58ce:	f7ff fff1 	bl	80a58b4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a58d2:	bd08      	pop	{r3, pc}

080a58d4 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a58d4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a58d6:	b510      	push	{r4, lr}
      if (_M_empty())
 80a58d8:	b90a      	cbnz	r2, 80a58de <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a58da:	f001 ffef 	bl	80a78bc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a58de:	68c3      	ldr	r3, [r0, #12]
    }
 80a58e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a58e4:	4718      	bx	r3

080a58e6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a58e6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a58e8:	6800      	ldr	r0, [r0, #0]
 80a58ea:	f100 0110 	add.w	r1, r0, #16
 80a58ee:	f7ff fff1 	bl	80a58d4 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a58f2:	bd08      	pop	{r3, pc}

080a58f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a58f4:	b538      	push	{r3, r4, r5, lr}
 80a58f6:	2300      	movs	r3, #0
 80a58f8:	4604      	mov	r4, r0
 80a58fa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a58fc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a58fe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a5900:	f7fa fbcb 	bl	80a009a <_Znwj>
 80a5904:	b128      	cbz	r0, 80a5912 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a5906:	2301      	movs	r3, #1
 80a5908:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a590c:	4b02      	ldr	r3, [pc, #8]	; (80a5918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a590e:	60c5      	str	r5, [r0, #12]
 80a5910:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a5912:	6020      	str	r0, [r4, #0]
	}
 80a5914:	4620      	mov	r0, r4
 80a5916:	bd38      	pop	{r3, r4, r5, pc}
 80a5918:	080ad35c 	.word	0x080ad35c

080a591c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a591c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a591e:	2300      	movs	r3, #0
 80a5920:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a5922:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a5924:	4604      	mov	r4, r0
 80a5926:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a5928:	b12b      	cbz	r3, 80a5936 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a592a:	2202      	movs	r2, #2
 80a592c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a592e:	68eb      	ldr	r3, [r5, #12]
 80a5930:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a5932:	68ab      	ldr	r3, [r5, #8]
 80a5934:	60a3      	str	r3, [r4, #8]
    }
 80a5936:	4620      	mov	r0, r4
 80a5938:	bd38      	pop	{r3, r4, r5, pc}
	...

080a593c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a593c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a593e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a5940:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a5942:	4668      	mov	r0, sp
 80a5944:	f7ff ff48 	bl	80a57d8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a5948:	f04f 0302 	mov.w	r3, #2
 80a594c:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a5950:	2a00      	cmp	r2, #0
 80a5952:	d103      	bne.n	80a595c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a5954:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a5958:	2900      	cmp	r1, #0
 80a595a:	d1f7      	bne.n	80a594c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a595c:	d125      	bne.n	80a59aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a595e:	f104 050c 	add.w	r5, r4, #12
 80a5962:	4669      	mov	r1, sp
 80a5964:	4628      	mov	r0, r5
 80a5966:	f7ff ff37 	bl	80a57d8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a596a:	2301      	movs	r3, #1
 80a596c:	f3bf 8f5b 	dmb	ish
 80a5970:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a5972:	2000      	movs	r0, #0
 80a5974:	f3bf 8f5b 	dmb	ish
 80a5978:	f104 0308 	add.w	r3, r4, #8
 80a597c:	e853 6f00 	ldrex	r6, [r3]
 80a5980:	e843 0200 	strex	r2, r0, [r3]
 80a5984:	2a00      	cmp	r2, #0
 80a5986:	d1f9      	bne.n	80a597c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a5988:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a598c:	b16e      	cbz	r6, 80a59aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a598e:	f7ff fdf1 	bl	80a5574 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a5992:	b178      	cbz	r0, 80a59b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a5994:	4629      	mov	r1, r5
 80a5996:	4630      	mov	r0, r6
 80a5998:	f7ff ff8c 	bl	80a58b4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a599c:	4630      	mov	r0, r6
 80a599e:	f7ff ff12 	bl	80a57c6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a59a2:	2110      	movs	r1, #16
 80a59a4:	4630      	mov	r0, r6
 80a59a6:	f001 febc 	bl	80a7722 <_ZdlPvj>
        p_->setError(std::move(error));
 80a59aa:	4668      	mov	r0, sp
 80a59ac:	f7ff ff21 	bl	80a57f2 <_ZN8particle5ErrorD1Ev>
    }
 80a59b0:	b009      	add	sp, #36	; 0x24
 80a59b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a59b4:	4631      	mov	r1, r6
 80a59b6:	a802      	add	r0, sp, #8
 80a59b8:	f7ff ffb0 	bl	80a591c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a59bc:	68e0      	ldr	r0, [r4, #12]
 80a59be:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a59c2:	b108      	cbz	r0, 80a59c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a59c4:	f006 fd30 	bl	80ac428 <strdup>
        type_(type) {
 80a59c8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a59ca:	2010      	movs	r0, #16
 80a59cc:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a59d0:	f7fa fb63 	bl	80a009a <_Znwj>
 80a59d4:	4605      	mov	r5, r0
 80a59d6:	b1e8      	cbz	r0, 80a5a14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a59d8:	2700      	movs	r7, #0
 80a59da:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a59dc:	2018      	movs	r0, #24
 80a59de:	f7fa fb5c 	bl	80a009a <_Znwj>
 80a59e2:	4604      	mov	r4, r0
 80a59e4:	b188      	cbz	r0, 80a5a0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a59e6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a59e8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a59ea:	a802      	add	r0, sp, #8
 80a59ec:	f7ff ff51 	bl	80a5892 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a59f0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a59f2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a59f4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a59f6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a59f8:	9204      	str	r2, [sp, #16]
 80a59fa:	68e2      	ldr	r2, [r4, #12]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a59fc:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a59fe:	60e3      	str	r3, [r4, #12]
 80a5a00:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a5a04:	9205      	str	r2, [sp, #20]
 80a5a06:	f7ff fee7 	bl	80a57d8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a5a0a:	4b08      	ldr	r3, [pc, #32]	; (80a5a2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a5a0c:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a5a0e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a5a10:	4b07      	ldr	r3, [pc, #28]	; (80a5a30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a5a12:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a5a14:	a806      	add	r0, sp, #24
 80a5a16:	f7ff feec 	bl	80a57f2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a5a1a:	a802      	add	r0, sp, #8
 80a5a1c:	f7ff fed3 	bl	80a57c6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a5a20:	2200      	movs	r2, #0
 80a5a22:	4629      	mov	r1, r5
 80a5a24:	4803      	ldr	r0, [pc, #12]	; (80a5a34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a5a26:	f7ff fdad 	bl	80a5584 <application_thread_invoke>
 80a5a2a:	e7b7      	b.n	80a599c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a5a2c:	080a58c7 	.word	0x080a58c7
 80a5a30:	080a5b5d 	.word	0x080a5b5d
 80a5a34:	080a5783 	.word	0x080a5783

080a5a38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a5a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a5a3c:	b08a      	sub	sp, #40	; 0x28
 80a5a3e:	4605      	mov	r5, r0
 80a5a40:	460c      	mov	r4, r1
 80a5a42:	4617      	mov	r7, r2
 80a5a44:	4698      	mov	r8, r3
 80a5a46:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a5a4a:	f7ff fdcf 	bl	80a55ec <spark_cloud_flag_connected>
 80a5a4e:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a5a50:	4682      	mov	sl, r0
 80a5a52:	bb38      	cbnz	r0, 80a5aa4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a5a54:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a5a58:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a5a5a:	a905      	add	r1, sp, #20
 80a5a5c:	4630      	mov	r0, r6
 80a5a5e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a5a62:	f7ff feb9 	bl	80a57d8 <_ZN8particle5ErrorC1EOS0_>
 80a5a66:	2014      	movs	r0, #20
 80a5a68:	f7fa fb17 	bl	80a009a <_Znwj>
 80a5a6c:	4604      	mov	r4, r0
 80a5a6e:	b148      	cbz	r0, 80a5a84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a5a70:	2302      	movs	r3, #2
 80a5a72:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a5a74:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a5a76:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a5a7a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a5a7c:	4631      	mov	r1, r6
 80a5a7e:	300c      	adds	r0, #12
 80a5a80:	f7ff feaa 	bl	80a57d8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a5a84:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a5a86:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a5a88:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a5a8c:	f7ff ff32 	bl	80a58f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a5a90:	4630      	mov	r0, r6
 80a5a92:	f7ff feae 	bl	80a57f2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a5a96:	a805      	add	r0, sp, #20
 80a5a98:	f7ff feab 	bl	80a57f2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a5a9c:	4628      	mov	r0, r5
 80a5a9e:	b00a      	add	sp, #40	; 0x28
 80a5aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a5aa4:	230c      	movs	r3, #12
 80a5aa6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a5aaa:	2014      	movs	r0, #20
 80a5aac:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a5ab0:	9307      	str	r3, [sp, #28]
 80a5ab2:	f7fa faf2 	bl	80a009a <_Znwj>
 80a5ab6:	4601      	mov	r1, r0
 80a5ab8:	b128      	cbz	r0, 80a5ac6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a5aba:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a5abe:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a5ac2:	f880 a001 	strb.w	sl, [r0, #1]
 80a5ac6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a5ac8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a5aca:	f7ff ff13 	bl	80a58f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a5ace:	4b22      	ldr	r3, [pc, #136]	; (80a5b58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a5ad0:	2008      	movs	r0, #8
 80a5ad2:	9308      	str	r3, [sp, #32]
 80a5ad4:	f7fa fae1 	bl	80a009a <_Znwj>
 80a5ad8:	4682      	mov	sl, r0
 80a5ada:	b128      	cbz	r0, 80a5ae8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a5adc:	9b03      	ldr	r3, [sp, #12]
 80a5ade:	a904      	add	r1, sp, #16
 80a5ae0:	f840 3b04 	str.w	r3, [r0], #4
 80a5ae4:	f7ff feaf 	bl	80a5846 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a5ae8:	4642      	mov	r2, r8
 80a5aea:	4639      	mov	r1, r7
 80a5aec:	4620      	mov	r0, r4
 80a5aee:	9600      	str	r6, [sp, #0]
 80a5af0:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a5af4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a5af8:	f7ff fd80 	bl	80a55fc <spark_send_event>
 80a5afc:	b9b8      	cbnz	r0, 80a5b2e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a5afe:	9b03      	ldr	r3, [sp, #12]
 80a5b00:	785b      	ldrb	r3, [r3, #1]
 80a5b02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a5b06:	b993      	cbnz	r3, 80a5b2e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a5b08:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a5b0c:	a905      	add	r1, sp, #20
 80a5b0e:	a803      	add	r0, sp, #12
 80a5b10:	9205      	str	r2, [sp, #20]
 80a5b12:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a5b16:	f7ff ff11 	bl	80a593c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a5b1a:	a805      	add	r0, sp, #20
 80a5b1c:	f7ff fe69 	bl	80a57f2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a5b20:	a805      	add	r0, sp, #20
 80a5b22:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a5b24:	f7ff fe96 	bl	80a5854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a5b28:	a806      	add	r0, sp, #24
 80a5b2a:	f7fe f88b 	bl	80a3c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a5b2e:	9b03      	ldr	r3, [sp, #12]
 80a5b30:	a904      	add	r1, sp, #16
 80a5b32:	a806      	add	r0, sp, #24
 80a5b34:	9305      	str	r3, [sp, #20]
 80a5b36:	f7ff fe86 	bl	80a5846 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a5b3a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a5b3c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a5b3e:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a5b40:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a5b42:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a5b44:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a5b46:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a5b48:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a5b4a:	f7fe f87b 	bl	80a3c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a5b4e:	a804      	add	r0, sp, #16
 80a5b50:	f7fe f878 	bl	80a3c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a5b54:	e7a2      	b.n	80a5a9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a5b56:	bf00      	nop
 80a5b58:	080a5c21 	.word	0x080a5c21

080a5b5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a5b5c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a5b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a5b60:	4605      	mov	r5, r0
	  switch (__op)
 80a5b62:	d007      	beq.n	80a5b74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a5b64:	2a03      	cmp	r2, #3
 80a5b66:	d018      	beq.n	80a5b9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a5b68:	2a01      	cmp	r2, #1
 80a5b6a:	d101      	bne.n	80a5b70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a5b6c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a5b6e:	6003      	str	r3, [r0, #0]
	}
 80a5b70:	2000      	movs	r0, #0
 80a5b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a5b74:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a5b76:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a5b78:	f7fa fa8f 	bl	80a009a <_Znwj>
 80a5b7c:	4604      	mov	r4, r0
 80a5b7e:	b150      	cbz	r0, 80a5b96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a5b80:	4631      	mov	r1, r6
 80a5b82:	f7ff fecb 	bl	80a591c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a5b86:	6930      	ldr	r0, [r6, #16]
 80a5b88:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a5b8c:	b108      	cbz	r0, 80a5b92 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a5b8e:	f006 fc4b 	bl	80ac428 <strdup>
        type_(type) {
 80a5b92:	6120      	str	r0, [r4, #16]
 80a5b94:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a5b96:	602c      	str	r4, [r5, #0]
	}
 80a5b98:	e7ea      	b.n	80a5b70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a5b9a:	6804      	ldr	r4, [r0, #0]
 80a5b9c:	2c00      	cmp	r4, #0
 80a5b9e:	d0e7      	beq.n	80a5b70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a5ba0:	f104 0010 	add.w	r0, r4, #16
 80a5ba4:	f7ff fe25 	bl	80a57f2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a5ba8:	4620      	mov	r0, r4
 80a5baa:	f7ff fe0c 	bl	80a57c6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a5bae:	2118      	movs	r1, #24
 80a5bb0:	4620      	mov	r0, r4
 80a5bb2:	f001 fdb6 	bl	80a7722 <_ZdlPvj>
 80a5bb6:	e7db      	b.n	80a5b70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a5bb8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a5bb8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a5bba:	2300      	movs	r3, #0
 80a5bbc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a5bbe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a5bc0:	4604      	mov	r4, r0
 80a5bc2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a5bc4:	b12b      	cbz	r3, 80a5bd2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a5bc6:	2202      	movs	r2, #2
 80a5bc8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a5bca:	68eb      	ldr	r3, [r5, #12]
 80a5bcc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a5bce:	68ab      	ldr	r3, [r5, #8]
 80a5bd0:	60a3      	str	r3, [r4, #8]
    }
 80a5bd2:	4620      	mov	r0, r4
 80a5bd4:	bd38      	pop	{r3, r4, r5, pc}

080a5bd6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a5bd6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a5bd8:	b570      	push	{r4, r5, r6, lr}
 80a5bda:	4604      	mov	r4, r0
	  switch (__op)
 80a5bdc:	d007      	beq.n	80a5bee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a5bde:	2a03      	cmp	r2, #3
 80a5be0:	d012      	beq.n	80a5c08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a5be2:	2a01      	cmp	r2, #1
 80a5be4:	d101      	bne.n	80a5bea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a5be6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a5be8:	6003      	str	r3, [r0, #0]
	}
 80a5bea:	2000      	movs	r0, #0
 80a5bec:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a5bee:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a5bf0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a5bf2:	f7fa fa52 	bl	80a009a <_Znwj>
 80a5bf6:	4605      	mov	r5, r0
 80a5bf8:	b120      	cbz	r0, 80a5c04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a5bfa:	4631      	mov	r1, r6
 80a5bfc:	f7ff ffdc 	bl	80a5bb8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a5c00:	7c33      	ldrb	r3, [r6, #16]
 80a5c02:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a5c04:	6025      	str	r5, [r4, #0]
	}
 80a5c06:	e7f0      	b.n	80a5bea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a5c08:	6804      	ldr	r4, [r0, #0]
 80a5c0a:	2c00      	cmp	r4, #0
 80a5c0c:	d0ed      	beq.n	80a5bea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a5c0e:	4620      	mov	r0, r4
 80a5c10:	f7ff fdd9 	bl	80a57c6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a5c14:	2114      	movs	r1, #20
 80a5c16:	4620      	mov	r0, r4
 80a5c18:	f001 fd83 	bl	80a7722 <_ZdlPvj>
 80a5c1c:	e7e5      	b.n	80a5bea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a5c20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a5c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a5c22:	4604      	mov	r4, r0
 80a5c24:	b089      	sub	sp, #36	; 0x24
 80a5c26:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a5c28:	a801      	add	r0, sp, #4
 80a5c2a:	4611      	mov	r1, r2
 80a5c2c:	f7ff fe12 	bl	80a5854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a5c30:	b1a4      	cbz	r4, 80a5c5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a5c32:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a5c34:	b11d      	cbz	r5, 80a5c3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a5c36:	4628      	mov	r0, r5
 80a5c38:	f006 fbf6 	bl	80ac428 <strdup>
 80a5c3c:	4605      	mov	r5, r0
 80a5c3e:	a801      	add	r0, sp, #4
 80a5c40:	a903      	add	r1, sp, #12
        type_(type) {
 80a5c42:	9503      	str	r5, [sp, #12]
 80a5c44:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a5c48:	f7ff fe78 	bl	80a593c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a5c4c:	a803      	add	r0, sp, #12
 80a5c4e:	f7ff fdd0 	bl	80a57f2 <_ZN8particle5ErrorD1Ev>
 80a5c52:	a802      	add	r0, sp, #8
 80a5c54:	f7fd fff6 	bl	80a3c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a5c58:	b009      	add	sp, #36	; 0x24
 80a5c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a5c5c:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a5c5e:	9d01      	ldr	r5, [sp, #4]
 80a5c60:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a5c64:	2a00      	cmp	r2, #0
 80a5c66:	d103      	bne.n	80a5c70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a5c68:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a5c6c:	2900      	cmp	r1, #0
 80a5c6e:	d1f7      	bne.n	80a5c60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a5c70:	d1ef      	bne.n	80a5c52 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a5c72:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a5c74:	f3bf 8f5b 	dmb	ish
 80a5c78:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a5c7a:	f3bf 8f5b 	dmb	ish
 80a5c7e:	1d2b      	adds	r3, r5, #4
 80a5c80:	e853 6f00 	ldrex	r6, [r3]
 80a5c84:	e843 4200 	strex	r2, r4, [r3]
 80a5c88:	2a00      	cmp	r2, #0
 80a5c8a:	d1f9      	bne.n	80a5c80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a5c8c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a5c90:	2e00      	cmp	r6, #0
 80a5c92:	d0de      	beq.n	80a5c52 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a5c94:	4620      	mov	r0, r4
 80a5c96:	f7ff fc6d 	bl	80a5574 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a5c9a:	4607      	mov	r7, r0
 80a5c9c:	b160      	cbz	r0, 80a5cb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a5c9e:	4630      	mov	r0, r6
 80a5ca0:	f105 010c 	add.w	r1, r5, #12
 80a5ca4:	f7ff fe16 	bl	80a58d4 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a5ca8:	4630      	mov	r0, r6
 80a5caa:	f7ff fd8c 	bl	80a57c6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a5cae:	2110      	movs	r1, #16
 80a5cb0:	4630      	mov	r0, r6
 80a5cb2:	f001 fd36 	bl	80a7722 <_ZdlPvj>
 80a5cb6:	e7cc      	b.n	80a5c52 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a5cb8:	4631      	mov	r1, r6
 80a5cba:	a803      	add	r0, sp, #12
 80a5cbc:	f7ff ff7c 	bl	80a5bb8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a5cc0:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a5cc2:	2010      	movs	r0, #16
 80a5cc4:	f88d 301c 	strb.w	r3, [sp, #28]
 80a5cc8:	f7fa f9e7 	bl	80a009a <_Znwj>
 80a5ccc:	4605      	mov	r5, r0
 80a5cce:	b1d0      	cbz	r0, 80a5d06 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a5cd0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a5cd2:	2014      	movs	r0, #20
 80a5cd4:	f7fa f9e1 	bl	80a009a <_Znwj>
 80a5cd8:	4604      	mov	r4, r0
 80a5cda:	b178      	cbz	r0, 80a5cfc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a5cdc:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a5cde:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a5ce0:	a803      	add	r0, sp, #12
 80a5ce2:	f7ff fdd6 	bl	80a5892 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a5ce6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a5ce8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a5cea:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a5cec:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a5cee:	9205      	str	r2, [sp, #20]
 80a5cf0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a5cf2:	60e3      	str	r3, [r4, #12]
 80a5cf4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a5cf8:	9206      	str	r2, [sp, #24]
 80a5cfa:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a5cfc:	4b06      	ldr	r3, [pc, #24]	; (80a5d18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a5cfe:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a5d00:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a5d02:	4b06      	ldr	r3, [pc, #24]	; (80a5d1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a5d04:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a5d06:	a803      	add	r0, sp, #12
 80a5d08:	f7ff fd5d 	bl	80a57c6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a5d0c:	2200      	movs	r2, #0
 80a5d0e:	4629      	mov	r1, r5
 80a5d10:	4803      	ldr	r0, [pc, #12]	; (80a5d20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a5d12:	f7ff fc37 	bl	80a5584 <application_thread_invoke>
 80a5d16:	e7c7      	b.n	80a5ca8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a5d18:	080a58e7 	.word	0x080a58e7
 80a5d1c:	080a5bd7 	.word	0x080a5bd7
 80a5d20:	080a5783 	.word	0x080a5783

080a5d24 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a5d24:	4770      	bx	lr

080a5d26 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a5d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a5d28:	4606      	mov	r6, r0
 80a5d2a:	4615      	mov	r5, r2
 80a5d2c:	460c      	mov	r4, r1
 80a5d2e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a5d30:	42bc      	cmp	r4, r7
 80a5d32:	d006      	beq.n	80a5d42 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a5d34:	6833      	ldr	r3, [r6, #0]
 80a5d36:	4630      	mov	r0, r6
 80a5d38:	689b      	ldr	r3, [r3, #8]
 80a5d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a5d3e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a5d40:	e7f6      	b.n	80a5d30 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a5d42:	4628      	mov	r0, r5
 80a5d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a5d46 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a5d46:	2200      	movs	r2, #0
 80a5d48:	7c00      	ldrb	r0, [r0, #16]
 80a5d4a:	f7ff bab1 	b.w	80a52b0 <hal_i2c_write>

080a5d4e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a5d4e:	2100      	movs	r1, #0
 80a5d50:	7c00      	ldrb	r0, [r0, #16]
 80a5d52:	f7ff bab5 	b.w	80a52c0 <hal_i2c_available>

080a5d56 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a5d56:	2100      	movs	r1, #0
 80a5d58:	7c00      	ldrb	r0, [r0, #16]
 80a5d5a:	f7ff bab9 	b.w	80a52d0 <hal_i2c_read>

080a5d5e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a5d5e:	2100      	movs	r1, #0
 80a5d60:	7c00      	ldrb	r0, [r0, #16]
 80a5d62:	f7ff babd 	b.w	80a52e0 <hal_i2c_peek>

080a5d66 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a5d66:	2100      	movs	r1, #0
 80a5d68:	7c00      	ldrb	r0, [r0, #16]
 80a5d6a:	f7ff bac1 	b.w	80a52f0 <hal_i2c_flush>

080a5d6e <_ZN7TwoWireD0Ev>:
 80a5d6e:	b510      	push	{r4, lr}
 80a5d70:	4604      	mov	r4, r0
 80a5d72:	2114      	movs	r1, #20
 80a5d74:	f001 fcd5 	bl	80a7722 <_ZdlPvj>
 80a5d78:	4620      	mov	r0, r4
 80a5d7a:	bd10      	pop	{r4, pc}

080a5d7c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a5d7c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a5d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a5d82:	4604      	mov	r4, r0
 80a5d84:	4608      	mov	r0, r1
 80a5d86:	2100      	movs	r1, #0
 80a5d88:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a5d8c:	4b03      	ldr	r3, [pc, #12]	; (80a5d9c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a5d8e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a5d90:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a5d92:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a5d94:	f7ff fabc 	bl	80a5310 <hal_i2c_init>
}
 80a5d98:	4620      	mov	r0, r4
 80a5d9a:	bd10      	pop	{r4, pc}
 80a5d9c:	080ad378 	.word	0x080ad378

080a5da0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a5da0:	4770      	bx	lr

080a5da2 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a5da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a5da4:	460e      	mov	r6, r1
 80a5da6:	2400      	movs	r4, #0
 80a5da8:	f100 0708 	add.w	r7, r0, #8
 80a5dac:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a5dae:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a5db2:	220a      	movs	r2, #10
 80a5db4:	4630      	mov	r0, r6
 80a5db6:	f000 f914 	bl	80a5fe2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a5dba:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a5dbc:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a5dbe:	d101      	bne.n	80a5dc4 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a5dc0:	4620      	mov	r0, r4
 80a5dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a5dc4:	2c00      	cmp	r4, #0
 80a5dc6:	d0f2      	beq.n	80a5dae <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a5dc8:	212e      	movs	r1, #46	; 0x2e
 80a5dca:	4630      	mov	r0, r6
 80a5dcc:	f000 f906 	bl	80a5fdc <_ZN5Print5printEc>
 80a5dd0:	4404      	add	r4, r0
 80a5dd2:	e7ec      	b.n	80a5dae <_ZNK9IPAddress7printToER5Print+0xc>

080a5dd4 <_ZN9IPAddressD0Ev>:
 80a5dd4:	b510      	push	{r4, lr}
 80a5dd6:	4604      	mov	r4, r0
 80a5dd8:	2118      	movs	r1, #24
 80a5dda:	f001 fca2 	bl	80a7722 <_ZdlPvj>
 80a5dde:	4620      	mov	r0, r4
 80a5de0:	bd10      	pop	{r4, pc}
	...

080a5de4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a5de4:	b510      	push	{r4, lr}
 80a5de6:	4604      	mov	r4, r0
 80a5de8:	4b04      	ldr	r3, [pc, #16]	; (80a5dfc <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a5dea:	2211      	movs	r2, #17
 80a5dec:	2100      	movs	r1, #0
 80a5dee:	f840 3b04 	str.w	r3, [r0], #4
 80a5df2:	f006 fa99 	bl	80ac328 <memset>
}
 80a5df6:	4620      	mov	r0, r4
 80a5df8:	bd10      	pop	{r4, pc}
 80a5dfa:	bf00      	nop
 80a5dfc:	080ad3a0 	.word	0x080ad3a0

080a5e00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a5e00:	4603      	mov	r3, r0
 80a5e02:	4a07      	ldr	r2, [pc, #28]	; (80a5e20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a5e04:	b510      	push	{r4, lr}
 80a5e06:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a5e0a:	f101 0210 	add.w	r2, r1, #16
 80a5e0e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a5e12:	4291      	cmp	r1, r2
 80a5e14:	f843 4b04 	str.w	r4, [r3], #4
 80a5e18:	d1f9      	bne.n	80a5e0e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a5e1a:	780a      	ldrb	r2, [r1, #0]
 80a5e1c:	701a      	strb	r2, [r3, #0]
}
 80a5e1e:	bd10      	pop	{r4, pc}
 80a5e20:	080ad3a0 	.word	0x080ad3a0

080a5e24 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a5e24:	4a02      	ldr	r2, [pc, #8]	; (80a5e30 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a5e26:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a5e2a:	2204      	movs	r2, #4
 80a5e2c:	7502      	strb	r2, [r0, #20]
}
 80a5e2e:	4770      	bx	lr
 80a5e30:	080ad3a0 	.word	0x080ad3a0

080a5e34 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a5e34:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a5e36:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a5e3a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a5e3e:	2304      	movs	r3, #4
 80a5e40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a5e44:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a5e48:	6044      	str	r4, [r0, #4]
 80a5e4a:	7503      	strb	r3, [r0, #20]
}
 80a5e4c:	bd10      	pop	{r4, pc}
	...

080a5e50 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a5e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a5e52:	4d04      	ldr	r5, [pc, #16]	; (80a5e64 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a5e54:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a5e56:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a5e5a:	9500      	str	r5, [sp, #0]
 80a5e5c:	f7ff ffea 	bl	80a5e34 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a5e60:	b003      	add	sp, #12
 80a5e62:	bd30      	pop	{r4, r5, pc}
 80a5e64:	080ad3a0 	.word	0x080ad3a0

080a5e68 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 80a5e68:	b513      	push	{r0, r1, r4, lr}
 80a5e6a:	4b05      	ldr	r3, [pc, #20]	; (80a5e80 <_ZN9IPAddressC1EPKh+0x18>)
 80a5e6c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 80a5e6e:	78cb      	ldrb	r3, [r1, #3]
 80a5e70:	9300      	str	r3, [sp, #0]
 80a5e72:	788b      	ldrb	r3, [r1, #2]
 80a5e74:	784a      	ldrb	r2, [r1, #1]
 80a5e76:	7809      	ldrb	r1, [r1, #0]
 80a5e78:	f7ff ffdc 	bl	80a5e34 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a5e7c:	b002      	add	sp, #8
 80a5e7e:	bd10      	pop	{r4, pc}
 80a5e80:	080ad3a0 	.word	0x080ad3a0

080a5e84 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a5e84:	4b01      	ldr	r3, [pc, #4]	; (80a5e8c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a5e86:	4a02      	ldr	r2, [pc, #8]	; (80a5e90 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a5e88:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a5e8a:	4770      	bx	lr
 80a5e8c:	20001048 	.word	0x20001048
 80a5e90:	080ad3ac 	.word	0x080ad3ac

080a5e94 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a5e94:	2300      	movs	r3, #0
 80a5e96:	6840      	ldr	r0, [r0, #4]
 80a5e98:	461a      	mov	r2, r3
 80a5e9a:	f7ff bbcf 	b.w	80a563c <network_connect>

080a5e9e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a5e9e:	2200      	movs	r2, #0
 80a5ea0:	2102      	movs	r1, #2
 80a5ea2:	6840      	ldr	r0, [r0, #4]
 80a5ea4:	f7ff bbda 	b.w	80a565c <network_disconnect>

080a5ea8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a5ea8:	2200      	movs	r2, #0
 80a5eaa:	6840      	ldr	r0, [r0, #4]
 80a5eac:	4611      	mov	r1, r2
 80a5eae:	f7ff bbcd 	b.w	80a564c <network_connecting>

080a5eb2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a5eb2:	2200      	movs	r2, #0
 80a5eb4:	6840      	ldr	r0, [r0, #4]
 80a5eb6:	4611      	mov	r1, r2
 80a5eb8:	f7ff bbd8 	b.w	80a566c <network_ready>

080a5ebc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a5ebc:	2300      	movs	r3, #0
 80a5ebe:	6840      	ldr	r0, [r0, #4]
 80a5ec0:	461a      	mov	r2, r3
 80a5ec2:	4619      	mov	r1, r3
 80a5ec4:	f7ff bbda 	b.w	80a567c <network_on>

080a5ec8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a5ec8:	2300      	movs	r3, #0
 80a5eca:	6840      	ldr	r0, [r0, #4]
 80a5ecc:	461a      	mov	r2, r3
 80a5ece:	4619      	mov	r1, r3
 80a5ed0:	f7ff bbdc 	b.w	80a568c <network_off>

080a5ed4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a5ed4:	2100      	movs	r1, #0
 80a5ed6:	6840      	ldr	r0, [r0, #4]
 80a5ed8:	f7ff bc00 	b.w	80a56dc <network_is_on>

080a5edc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a5edc:	2100      	movs	r1, #0
 80a5ede:	6840      	ldr	r0, [r0, #4]
 80a5ee0:	f7ff bc04 	b.w	80a56ec <network_is_off>

080a5ee4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a5ee4:	2200      	movs	r2, #0
 80a5ee6:	6840      	ldr	r0, [r0, #4]
 80a5ee8:	f081 0101 	eor.w	r1, r1, #1
 80a5eec:	f7ff bbd6 	b.w	80a569c <network_listen>

080a5ef0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a5ef0:	2200      	movs	r2, #0
 80a5ef2:	6840      	ldr	r0, [r0, #4]
 80a5ef4:	f7ff bbe2 	b.w	80a56bc <network_set_listen_timeout>

080a5ef8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a5ef8:	2200      	movs	r2, #0
 80a5efa:	6840      	ldr	r0, [r0, #4]
 80a5efc:	4611      	mov	r1, r2
 80a5efe:	f7ff bbe5 	b.w	80a56cc <network_get_listen_timeout>

080a5f02 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a5f02:	2200      	movs	r2, #0
 80a5f04:	6840      	ldr	r0, [r0, #4]
 80a5f06:	4611      	mov	r1, r2
 80a5f08:	f7ff bbd0 	b.w	80a56ac <network_listening>

080a5f0c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a5f0c:	b570      	push	{r4, r5, r6, lr}
 80a5f0e:	4615      	mov	r5, r2
 80a5f10:	b08e      	sub	sp, #56	; 0x38
 80a5f12:	4604      	mov	r4, r0
    IPAddress addr;
 80a5f14:	a808      	add	r0, sp, #32
 80a5f16:	f7ff ff65 	bl	80a5de4 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a5f1a:	2211      	movs	r2, #17
 80a5f1c:	2100      	movs	r1, #0
 80a5f1e:	a803      	add	r0, sp, #12
 80a5f20:	f006 fa02 	bl	80ac328 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a5f24:	2600      	movs	r6, #0
 80a5f26:	4628      	mov	r0, r5
 80a5f28:	f006 fa99 	bl	80ac45e <strlen>
 80a5f2c:	4b0a      	ldr	r3, [pc, #40]	; (80a5f58 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a5f2e:	9600      	str	r6, [sp, #0]
 80a5f30:	b281      	uxth	r1, r0
 80a5f32:	685b      	ldr	r3, [r3, #4]
 80a5f34:	4628      	mov	r0, r5
 80a5f36:	aa03      	add	r2, sp, #12
 80a5f38:	f7ff faec 	bl	80a5514 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a5f3c:	b130      	cbz	r0, 80a5f4c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a5f3e:	4631      	mov	r1, r6
 80a5f40:	4620      	mov	r0, r4
 80a5f42:	f7ff ff6f 	bl	80a5e24 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a5f46:	4620      	mov	r0, r4
 80a5f48:	b00e      	add	sp, #56	; 0x38
 80a5f4a:	bd70      	pop	{r4, r5, r6, pc}
 80a5f4c:	4620      	mov	r0, r4
 80a5f4e:	a903      	add	r1, sp, #12
 80a5f50:	f7ff ff56 	bl	80a5e00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a5f54:	e7f7      	b.n	80a5f46 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a5f56:	bf00      	nop
 80a5f58:	200014d0 	.word	0x200014d0

080a5f5c <_ZN5spark12NetworkClass4fromEm>:
}
 80a5f5c:	4a03      	ldr	r2, [pc, #12]	; (80a5f6c <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a5f5e:	4b04      	ldr	r3, [pc, #16]	; (80a5f70 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a5f60:	2804      	cmp	r0, #4
 80a5f62:	bf14      	ite	ne
 80a5f64:	4610      	movne	r0, r2
 80a5f66:	4618      	moveq	r0, r3
 80a5f68:	4770      	bx	lr
 80a5f6a:	bf00      	nop
 80a5f6c:	2000104c 	.word	0x2000104c
 80a5f70:	200014d0 	.word	0x200014d0

080a5f74 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a5f74:	4b02      	ldr	r3, [pc, #8]	; (80a5f80 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a5f76:	4a03      	ldr	r2, [pc, #12]	; (80a5f84 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a5f78:	601a      	str	r2, [r3, #0]
 80a5f7a:	2200      	movs	r2, #0
 80a5f7c:	605a      	str	r2, [r3, #4]

} // spark
 80a5f7e:	4770      	bx	lr
 80a5f80:	2000104c 	.word	0x2000104c
 80a5f84:	080ad3b8 	.word	0x080ad3b8

080a5f88 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a5f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a5f8a:	4606      	mov	r6, r0
 80a5f8c:	460d      	mov	r5, r1
  size_t n = 0;
 80a5f8e:	2400      	movs	r4, #0
 80a5f90:	188f      	adds	r7, r1, r2
  while (size--) {
 80a5f92:	42bd      	cmp	r5, r7
 80a5f94:	d00c      	beq.n	80a5fb0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a5f96:	6833      	ldr	r3, [r6, #0]
 80a5f98:	4630      	mov	r0, r6
 80a5f9a:	689b      	ldr	r3, [r3, #8]
 80a5f9c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a5fa0:	4798      	blx	r3
     if (chunk>=0)
 80a5fa2:	1e03      	subs	r3, r0, #0
 80a5fa4:	db01      	blt.n	80a5faa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a5fa6:	441c      	add	r4, r3
  while (size--) {
 80a5fa8:	e7f3      	b.n	80a5f92 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a5faa:	2c00      	cmp	r4, #0
 80a5fac:	bf08      	it	eq
 80a5fae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a5fb0:	4620      	mov	r0, r4
 80a5fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a5fb4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a5fb4:	b570      	push	{r4, r5, r6, lr}
 80a5fb6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a5fb8:	460c      	mov	r4, r1
    }
 80a5fba:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a5fbc:	b149      	cbz	r1, 80a5fd2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a5fbe:	f006 fa4e 	bl	80ac45e <strlen>
 80a5fc2:	682b      	ldr	r3, [r5, #0]
 80a5fc4:	4602      	mov	r2, r0
 80a5fc6:	4621      	mov	r1, r4
 80a5fc8:	4628      	mov	r0, r5
    }
 80a5fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a5fce:	68db      	ldr	r3, [r3, #12]
 80a5fd0:	4718      	bx	r3
    }
 80a5fd2:	bd70      	pop	{r4, r5, r6, pc}

080a5fd4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a5fd4:	b508      	push	{r3, lr}
  return write(str);
 80a5fd6:	f7ff ffed 	bl	80a5fb4 <_ZN5Print5writeEPKc>
}
 80a5fda:	bd08      	pop	{r3, pc}

080a5fdc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a5fdc:	6803      	ldr	r3, [r0, #0]
 80a5fde:	689b      	ldr	r3, [r3, #8]
 80a5fe0:	4718      	bx	r3

080a5fe2 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a5fe2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a5fe4:	2a01      	cmp	r2, #1
 80a5fe6:	bf98      	it	ls
 80a5fe8:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a5fea:	b530      	push	{r4, r5, lr}
 80a5fec:	b08b      	sub	sp, #44	; 0x2c
 80a5fee:	460c      	mov	r4, r1
  *str = '\0';
 80a5ff0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a5ff4:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a5ff6:	4625      	mov	r5, r4
 80a5ff8:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a5ffc:	fb04 5312 	mls	r3, r4, r2, r5
 80a6000:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a6002:	2b09      	cmp	r3, #9
 80a6004:	bf94      	ite	ls
 80a6006:	3330      	addls	r3, #48	; 0x30
 80a6008:	3337      	addhi	r3, #55	; 0x37
 80a600a:	b2db      	uxtb	r3, r3
  } while(n);
 80a600c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a600e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a6012:	d9f0      	bls.n	80a5ff6 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a6014:	f7ff ffce 	bl	80a5fb4 <_ZN5Print5writeEPKc>
}
 80a6018:	b00b      	add	sp, #44	; 0x2c
 80a601a:	bd30      	pop	{r4, r5, pc}

080a601c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
 80a601c:	b510      	push	{r4, lr}
  if (0 == max) {
 80a601e:	4604      	mov	r4, r0
 80a6020:	b128      	cbz	r0, 80a602e <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
 80a6022:	f006 f9ad 	bl	80ac380 <rand>
 80a6026:	fb90 f3f4 	sdiv	r3, r0, r4
 80a602a:	fb03 0414 	mls	r4, r3, r4, r0
}
 80a602e:	4620      	mov	r0, r4
 80a6030:	bd10      	pop	{r4, pc}

080a6032 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
 80a6032:	4288      	cmp	r0, r1
{
 80a6034:	b510      	push	{r4, lr}
 80a6036:	4604      	mov	r4, r0
  if (min >= max) {
 80a6038:	da03      	bge.n	80a6042 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
 80a603a:	1a08      	subs	r0, r1, r0
 80a603c:	f7ff ffee 	bl	80a601c <_Z6randomi>
 80a6040:	4404      	add	r4, r0
}
 80a6042:	4620      	mov	r0, r4
 80a6044:	bd10      	pop	{r4, pc}

080a6046 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a6046:	b510      	push	{r4, lr}
 80a6048:	4604      	mov	r4, r0
 80a604a:	f7ff fbbc 	bl	80a57c6 <_ZNSt14_Function_baseD1Ev>
 80a604e:	4620      	mov	r0, r4
 80a6050:	bd10      	pop	{r4, pc}
	...

080a6054 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a6054:	2300      	movs	r3, #0
 80a6056:	4803      	ldr	r0, [pc, #12]	; (80a6064 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a6058:	4a03      	ldr	r2, [pc, #12]	; (80a6068 <_GLOBAL__sub_I_RGB+0x14>)
 80a605a:	4904      	ldr	r1, [pc, #16]	; (80a606c <_GLOBAL__sub_I_RGB+0x18>)
 80a605c:	6083      	str	r3, [r0, #8]
 80a605e:	f001 bb5b 	b.w	80a7718 <__aeabi_atexit>
 80a6062:	bf00      	nop
 80a6064:	20001054 	.word	0x20001054
 80a6068:	2000006c 	.word	0x2000006c
 80a606c:	080a6047 	.word	0x080a6047

080a6070 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a6070:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a6072:	2600      	movs	r6, #0
 80a6074:	4604      	mov	r4, r0
 80a6076:	460d      	mov	r5, r1
 80a6078:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a607c:	f7ff f8a8 	bl	80a51d0 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a6080:	4628      	mov	r0, r5
    _spi = spi;
 80a6082:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a6084:	f7ff f9be 	bl	80a5404 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a6088:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a608a:	6066      	str	r6, [r4, #4]
}
 80a608c:	bd70      	pop	{r4, r5, r6, pc}

080a608e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a608e:	b510      	push	{r4, lr}
 80a6090:	4604      	mov	r4, r0
{
	free(buffer);
 80a6092:	6800      	ldr	r0, [r0, #0]
 80a6094:	f7ff fb3a 	bl	80a570c <free>
}
 80a6098:	4620      	mov	r0, r4
 80a609a:	bd10      	pop	{r4, pc}

080a609c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a609c:	b510      	push	{r4, lr}
 80a609e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a60a0:	6800      	ldr	r0, [r0, #0]
 80a60a2:	b108      	cbz	r0, 80a60a8 <_ZN6String10invalidateEv+0xc>
 80a60a4:	f7ff fb32 	bl	80a570c <free>
	buffer = NULL;
 80a60a8:	2300      	movs	r3, #0
	capacity = len = 0;
 80a60aa:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a60ae:	6023      	str	r3, [r4, #0]
}
 80a60b0:	bd10      	pop	{r4, pc}

080a60b2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a60b2:	b538      	push	{r3, r4, r5, lr}
 80a60b4:	4604      	mov	r4, r0
 80a60b6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a60b8:	6800      	ldr	r0, [r0, #0]
 80a60ba:	3101      	adds	r1, #1
 80a60bc:	f7ff fb2e 	bl	80a571c <realloc>
	if (newbuffer) {
 80a60c0:	b110      	cbz	r0, 80a60c8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a60c2:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a60c6:	2001      	movs	r0, #1
	}
	return 0;
}
 80a60c8:	bd38      	pop	{r3, r4, r5, pc}

080a60ca <_ZN6String7reserveEj>:
{
 80a60ca:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a60cc:	6803      	ldr	r3, [r0, #0]
{
 80a60ce:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a60d0:	b123      	cbz	r3, 80a60dc <_ZN6String7reserveEj+0x12>
 80a60d2:	6843      	ldr	r3, [r0, #4]
 80a60d4:	428b      	cmp	r3, r1
 80a60d6:	d301      	bcc.n	80a60dc <_ZN6String7reserveEj+0x12>
 80a60d8:	2001      	movs	r0, #1
}
 80a60da:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a60dc:	4620      	mov	r0, r4
 80a60de:	f7ff ffe8 	bl	80a60b2 <_ZN6String12changeBufferEj>
 80a60e2:	2800      	cmp	r0, #0
 80a60e4:	d0f9      	beq.n	80a60da <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a60e6:	68a3      	ldr	r3, [r4, #8]
 80a60e8:	2b00      	cmp	r3, #0
 80a60ea:	d1f5      	bne.n	80a60d8 <_ZN6String7reserveEj+0xe>
 80a60ec:	6822      	ldr	r2, [r4, #0]
 80a60ee:	7013      	strb	r3, [r2, #0]
 80a60f0:	e7f2      	b.n	80a60d8 <_ZN6String7reserveEj+0xe>

080a60f2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a60f2:	b570      	push	{r4, r5, r6, lr}
 80a60f4:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a60f6:	4611      	mov	r1, r2
{
 80a60f8:	4604      	mov	r4, r0
 80a60fa:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a60fc:	f7ff ffe5 	bl	80a60ca <_ZN6String7reserveEj>
 80a6100:	b920      	cbnz	r0, 80a610c <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a6102:	4620      	mov	r0, r4
 80a6104:	f7ff ffca 	bl	80a609c <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a6108:	4620      	mov	r0, r4
 80a610a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a610c:	462a      	mov	r2, r5
 80a610e:	4631      	mov	r1, r6
 80a6110:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a6112:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a6114:	f006 f8e0 	bl	80ac2d8 <memcpy>
	buffer[len] = 0;
 80a6118:	2100      	movs	r1, #0
 80a611a:	6822      	ldr	r2, [r4, #0]
 80a611c:	68a3      	ldr	r3, [r4, #8]
 80a611e:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a6120:	e7f2      	b.n	80a6108 <_ZN6String4copyEPKcj+0x16>

080a6122 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a6122:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a6124:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a6126:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a6128:	460d      	mov	r5, r1
	capacity = 0;
 80a612a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a612e:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a6130:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a6132:	b139      	cbz	r1, 80a6144 <_ZN6StringC1EPKc+0x22>
 80a6134:	4608      	mov	r0, r1
 80a6136:	f006 f992 	bl	80ac45e <strlen>
 80a613a:	4629      	mov	r1, r5
 80a613c:	4602      	mov	r2, r0
 80a613e:	4620      	mov	r0, r4
 80a6140:	f7ff ffd7 	bl	80a60f2 <_ZN6String4copyEPKcj>
}
 80a6144:	4620      	mov	r0, r4
 80a6146:	bd38      	pop	{r3, r4, r5, pc}

080a6148 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a6148:	b538      	push	{r3, r4, r5, lr}
 80a614a:	4605      	mov	r5, r0
	if (buffer) {
 80a614c:	6800      	ldr	r0, [r0, #0]
{
 80a614e:	460c      	mov	r4, r1
	if (buffer) {
 80a6150:	b168      	cbz	r0, 80a616e <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a6152:	686a      	ldr	r2, [r5, #4]
 80a6154:	688b      	ldr	r3, [r1, #8]
 80a6156:	429a      	cmp	r2, r3
 80a6158:	d307      	bcc.n	80a616a <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a615a:	6809      	ldr	r1, [r1, #0]
 80a615c:	f006 f95b 	bl	80ac416 <strcpy>
			len = rhs.len;
 80a6160:	68a3      	ldr	r3, [r4, #8]
 80a6162:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a6164:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a6166:	60a3      	str	r3, [r4, #8]
}
 80a6168:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a616a:	f7ff facf 	bl	80a570c <free>
	buffer = rhs.buffer;
 80a616e:	6823      	ldr	r3, [r4, #0]
 80a6170:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a6172:	6863      	ldr	r3, [r4, #4]
 80a6174:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a6176:	68a3      	ldr	r3, [r4, #8]
 80a6178:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a617a:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a617c:	e9c4 3300 	strd	r3, r3, [r4]
 80a6180:	e7f1      	b.n	80a6166 <_ZN6String4moveERS_+0x1e>

080a6182 <_ZN6StringC1EOS_>:
	buffer = NULL;
 80a6182:	2300      	movs	r3, #0
String::String(String &&rval)
 80a6184:	b510      	push	{r4, lr}
 80a6186:	4604      	mov	r4, r0
	capacity = 0;
 80a6188:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a618c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a618e:	7303      	strb	r3, [r0, #12]
	move(rval);
 80a6190:	f7ff ffda 	bl	80a6148 <_ZN6String4moveERS_>
}
 80a6194:	4620      	mov	r0, r4
 80a6196:	bd10      	pop	{r4, pc}

080a6198 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a6198:	4288      	cmp	r0, r1
{
 80a619a:	b510      	push	{r4, lr}
 80a619c:	460b      	mov	r3, r1
 80a619e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a61a0:	d004      	beq.n	80a61ac <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a61a2:	6809      	ldr	r1, [r1, #0]
 80a61a4:	b121      	cbz	r1, 80a61b0 <_ZN6StringaSERKS_+0x18>
 80a61a6:	689a      	ldr	r2, [r3, #8]
 80a61a8:	f7ff ffa3 	bl	80a60f2 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a61ac:	4620      	mov	r0, r4
 80a61ae:	bd10      	pop	{r4, pc}
	else invalidate();
 80a61b0:	f7ff ff74 	bl	80a609c <_ZN6String10invalidateEv>
 80a61b4:	e7fa      	b.n	80a61ac <_ZN6StringaSERKS_+0x14>

080a61b6 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a61b6:	2300      	movs	r3, #0
String::String(const String &value)
 80a61b8:	b510      	push	{r4, lr}
 80a61ba:	4604      	mov	r4, r0
	capacity = 0;
 80a61bc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a61c0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a61c2:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a61c4:	f7ff ffe8 	bl	80a6198 <_ZN6StringaSERKS_>
}
 80a61c8:	4620      	mov	r0, r4
 80a61ca:	bd10      	pop	{r4, pc}

080a61cc <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a61cc:	4288      	cmp	r0, r1
{
 80a61ce:	b510      	push	{r4, lr}
 80a61d0:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a61d2:	d001      	beq.n	80a61d8 <_ZN6StringaSEOS_+0xc>
 80a61d4:	f7ff ffb8 	bl	80a6148 <_ZN6String4moveERS_>
	return *this;
}
 80a61d8:	4620      	mov	r0, r4
 80a61da:	bd10      	pop	{r4, pc}

080a61dc <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a61dc:	b538      	push	{r3, r4, r5, lr}
 80a61de:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a61e0:	460c      	mov	r4, r1
 80a61e2:	b149      	cbz	r1, 80a61f8 <_ZN6StringaSEPKc+0x1c>
 80a61e4:	4608      	mov	r0, r1
 80a61e6:	f006 f93a 	bl	80ac45e <strlen>
 80a61ea:	4621      	mov	r1, r4
 80a61ec:	4602      	mov	r2, r0
 80a61ee:	4628      	mov	r0, r5
 80a61f0:	f7ff ff7f 	bl	80a60f2 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a61f4:	4628      	mov	r0, r5
 80a61f6:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a61f8:	f7ff ff50 	bl	80a609c <_ZN6String10invalidateEv>
 80a61fc:	e7fa      	b.n	80a61f4 <_ZN6StringaSEPKc+0x18>

080a61fe <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
 80a61fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a6200:	4604      	mov	r4, r0
	buffer = NULL;
 80a6202:	2300      	movs	r3, #0
String::String(unsigned char value, unsigned char base)
 80a6204:	4608      	mov	r0, r1
	capacity = 0;
 80a6206:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a620a:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a620c:	7323      	strb	r3, [r4, #12]
	utoa(value, buf, base);
 80a620e:	a901      	add	r1, sp, #4
 80a6210:	f001 f8ef 	bl	80a73f2 <utoa>
	*this = buf;
 80a6214:	4620      	mov	r0, r4
 80a6216:	a901      	add	r1, sp, #4
 80a6218:	f7ff ffe0 	bl	80a61dc <_ZN6StringaSEPKc>
}
 80a621c:	4620      	mov	r0, r4
 80a621e:	b004      	add	sp, #16
 80a6220:	bd10      	pop	{r4, pc}

080a6222 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a6222:	b570      	push	{r4, r5, r6, lr}
 80a6224:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a6226:	460e      	mov	r6, r1
 80a6228:	b909      	cbnz	r1, 80a622e <_ZN6String6concatEPKcj+0xc>
 80a622a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a622c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a622e:	b16a      	cbz	r2, 80a624c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a6230:	6884      	ldr	r4, [r0, #8]
 80a6232:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a6234:	4621      	mov	r1, r4
 80a6236:	f7ff ff48 	bl	80a60ca <_ZN6String7reserveEj>
 80a623a:	2800      	cmp	r0, #0
 80a623c:	d0f5      	beq.n	80a622a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a623e:	6828      	ldr	r0, [r5, #0]
 80a6240:	68ab      	ldr	r3, [r5, #8]
 80a6242:	4631      	mov	r1, r6
 80a6244:	4418      	add	r0, r3
 80a6246:	f006 f8e6 	bl	80ac416 <strcpy>
	len = newlen;
 80a624a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a624c:	2001      	movs	r0, #1
 80a624e:	e7ed      	b.n	80a622c <_ZN6String6concatEPKcj+0xa>

080a6250 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a6250:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a6252:	688a      	ldr	r2, [r1, #8]
 80a6254:	6809      	ldr	r1, [r1, #0]
{
 80a6256:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a6258:	f7ff ffe3 	bl	80a6222 <_ZN6String6concatEPKcj>
 80a625c:	b910      	cbnz	r0, 80a6264 <_ZplRK15StringSumHelperRK6String+0x14>
 80a625e:	4620      	mov	r0, r4
 80a6260:	f7ff ff1c 	bl	80a609c <_ZN6String10invalidateEv>
	return a;
}
 80a6264:	4620      	mov	r0, r4
 80a6266:	bd10      	pop	{r4, pc}

080a6268 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a6268:	b538      	push	{r3, r4, r5, lr}
 80a626a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a626c:	460d      	mov	r5, r1
 80a626e:	b921      	cbnz	r1, 80a627a <_ZplRK15StringSumHelperPKc+0x12>
 80a6270:	4620      	mov	r0, r4
 80a6272:	f7ff ff13 	bl	80a609c <_ZN6String10invalidateEv>
	return a;
}
 80a6276:	4620      	mov	r0, r4
 80a6278:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a627a:	4608      	mov	r0, r1
 80a627c:	f006 f8ef 	bl	80ac45e <strlen>
 80a6280:	4629      	mov	r1, r5
 80a6282:	4602      	mov	r2, r0
 80a6284:	4620      	mov	r0, r4
 80a6286:	f7ff ffcc 	bl	80a6222 <_ZN6String6concatEPKcj>
 80a628a:	2800      	cmp	r0, #0
 80a628c:	d0f0      	beq.n	80a6270 <_ZplRK15StringSumHelperPKc+0x8>
 80a628e:	e7f2      	b.n	80a6276 <_ZplRK15StringSumHelperPKc+0xe>

080a6290 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
 80a6290:	4602      	mov	r2, r0
	if (!buffer || !s.buffer) {
 80a6292:	6800      	ldr	r0, [r0, #0]
{
 80a6294:	460b      	mov	r3, r1
 80a6296:	6809      	ldr	r1, [r1, #0]
	if (!buffer || !s.buffer) {
 80a6298:	b158      	cbz	r0, 80a62b2 <_ZNK6String9compareToERKS_+0x22>
 80a629a:	b941      	cbnz	r1, 80a62ae <_ZNK6String9compareToERKS_+0x1e>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
 80a629c:	6891      	ldr	r1, [r2, #8]
 80a629e:	b151      	cbz	r1, 80a62b6 <_ZNK6String9compareToERKS_+0x26>
 80a62a0:	7800      	ldrb	r0, [r0, #0]
 80a62a2:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 80a62a4:	6898      	ldr	r0, [r3, #8]
 80a62a6:	b138      	cbz	r0, 80a62b8 <_ZNK6String9compareToERKS_+0x28>
 80a62a8:	7809      	ldrb	r1, [r1, #0]
 80a62aa:	4248      	negs	r0, r1
 80a62ac:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
 80a62ae:	f006 b8a8 	b.w	80ac402 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 80a62b2:	2900      	cmp	r1, #0
 80a62b4:	d1f6      	bne.n	80a62a4 <_ZNK6String9compareToERKS_+0x14>
		return 0;
 80a62b6:	4608      	mov	r0, r1
}
 80a62b8:	4770      	bx	lr

080a62ba <_ZNK6StringltERKS_>:
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
}

unsigned char String::operator<(const String &rhs) const
{
 80a62ba:	b508      	push	{r3, lr}
	return compareTo(rhs) < 0;
 80a62bc:	f7ff ffe8 	bl	80a6290 <_ZNK6String9compareToERKS_>
}
 80a62c0:	0fc0      	lsrs	r0, r0, #31
 80a62c2:	bd08      	pop	{r3, pc}

080a62c4 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 80a62c4:	6883      	ldr	r3, [r0, #8]
 80a62c6:	428b      	cmp	r3, r1
 80a62c8:	d903      	bls.n	80a62d2 <_ZNK6StringixEj+0xe>
 80a62ca:	6800      	ldr	r0, [r0, #0]
 80a62cc:	b110      	cbz	r0, 80a62d4 <_ZNK6StringixEj+0x10>
	return buffer[index];
 80a62ce:	5c40      	ldrb	r0, [r0, r1]
 80a62d0:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
 80a62d2:	2000      	movs	r0, #0
}
 80a62d4:	4770      	bx	lr

080a62d6 <_ZNK6String6charAtEj>:
	return operator[](loc);
 80a62d6:	f7ff bff5 	b.w	80a62c4 <_ZNK6StringixEj>
	...

080a62dc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a62dc:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a62de:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a62e0:	b510      	push	{r4, lr}
 80a62e2:	4b08      	ldr	r3, [pc, #32]	; (80a6304 <_GLOBAL__sub_I_System+0x28>)
 80a62e4:	4c08      	ldr	r4, [pc, #32]	; (80a6308 <_GLOBAL__sub_I_System+0x2c>)
 80a62e6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a62e8:	4b08      	ldr	r3, [pc, #32]	; (80a630c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a62ea:	6020      	str	r0, [r4, #0]
 80a62ec:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a62ee:	71a0      	strb	r0, [r4, #6]
 80a62f0:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a62f2:	f7ff f92f 	bl	80a5554 <set_system_mode>
SystemClass System;
 80a62f6:	4620      	mov	r0, r4
 80a62f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a62fc:	4a04      	ldr	r2, [pc, #16]	; (80a6310 <_GLOBAL__sub_I_System+0x34>)
 80a62fe:	4905      	ldr	r1, [pc, #20]	; (80a6314 <_GLOBAL__sub_I_System+0x38>)
 80a6300:	f001 ba0a 	b.w	80a7718 <__aeabi_atexit>
 80a6304:	20001070 	.word	0x20001070
 80a6308:	20001064 	.word	0x20001064
 80a630c:	ffff0000 	.word	0xffff0000
 80a6310:	2000006c 	.word	0x2000006c
 80a6314:	080a20ff 	.word	0x080a20ff

080a6318 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a6318:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a631a:	6803      	ldr	r3, [r0, #0]
{
 80a631c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a6320:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a6322:	2201      	movs	r2, #1
 80a6324:	f247 5330 	movw	r3, #30000	; 0x7530
 80a6328:	f10d 0107 	add.w	r1, sp, #7
 80a632c:	47a0      	blx	r4
}
 80a632e:	b002      	add	sp, #8
 80a6330:	bd10      	pop	{r4, pc}

080a6332 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a6332:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a6334:	6803      	ldr	r3, [r0, #0]
 80a6336:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a6338:	f247 5330 	movw	r3, #30000	; 0x7530
 80a633c:	46a4      	mov	ip, r4
}
 80a633e:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a6340:	4760      	bx	ip

080a6342 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a6342:	b513      	push	{r0, r1, r4, lr}
 80a6344:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a6346:	6802      	ldr	r2, [r0, #0]
{
 80a6348:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a634c:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a634e:	f10d 0107 	add.w	r1, sp, #7
 80a6352:	2201      	movs	r2, #1
 80a6354:	47a0      	blx	r4
}
 80a6356:	b002      	add	sp, #8
 80a6358:	bd10      	pop	{r4, pc}

080a635a <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a635a:	4770      	bx	lr

080a635c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a635c:	4770      	bx	lr
	...

080a6360 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a6360:	b510      	push	{r4, lr}
 80a6362:	4604      	mov	r4, r0
	    ||
 80a6364:	4b06      	ldr	r3, [pc, #24]	; (80a6380 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a6366:	4608      	mov	r0, r1
	    ||
 80a6368:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a636a:	f104 040c 	add.w	r4, r4, #12
 80a636e:	d004      	beq.n	80a637a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a6370:	f001 faa8 	bl	80a78c4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a6374:	2800      	cmp	r0, #0
	return nullptr;
 80a6376:	bf08      	it	eq
 80a6378:	2400      	moveq	r4, #0
      }
 80a637a:	4620      	mov	r0, r4
 80a637c:	bd10      	pop	{r4, pc}
 80a637e:	bf00      	nop
 80a6380:	080ad424 	.word	0x080ad424

080a6384 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a6384:	b510      	push	{r4, lr}
 80a6386:	4604      	mov	r4, r0
 80a6388:	21ac      	movs	r1, #172	; 0xac
 80a638a:	f001 f9ca 	bl	80a7722 <_ZdlPvj>
 80a638e:	4620      	mov	r0, r4
 80a6390:	bd10      	pop	{r4, pc}

080a6392 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p);
 80a6392:	f7f9 be86 	b.w	80a00a2 <_ZdlPv>
	...

080a6398 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a6398:	b538      	push	{r3, r4, r5, lr}
 80a639a:	4b0b      	ldr	r3, [pc, #44]	; (80a63c8 <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a639c:	6984      	ldr	r4, [r0, #24]
 80a639e:	4605      	mov	r5, r0
 80a63a0:	6003      	str	r3, [r0, #0]
 80a63a2:	b17c      	cbz	r4, 80a63c4 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a63a4:	6863      	ldr	r3, [r4, #4]
 80a63a6:	3b01      	subs	r3, #1
 80a63a8:	6063      	str	r3, [r4, #4]
 80a63aa:	b95b      	cbnz	r3, 80a63c4 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a63ac:	6823      	ldr	r3, [r4, #0]
 80a63ae:	4620      	mov	r0, r4
 80a63b0:	689b      	ldr	r3, [r3, #8]
 80a63b2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a63b4:	68a3      	ldr	r3, [r4, #8]
 80a63b6:	3b01      	subs	r3, #1
 80a63b8:	60a3      	str	r3, [r4, #8]
 80a63ba:	b91b      	cbnz	r3, 80a63c4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a63bc:	6823      	ldr	r3, [r4, #0]
 80a63be:	4620      	mov	r0, r4
 80a63c0:	68db      	ldr	r3, [r3, #12]
 80a63c2:	4798      	blx	r3
 80a63c4:	4628      	mov	r0, r5
 80a63c6:	bd38      	pop	{r3, r4, r5, pc}
 80a63c8:	080ad434 	.word	0x080ad434

080a63cc <_ZN9TCPClientD0Ev>:
 80a63cc:	b510      	push	{r4, lr}
 80a63ce:	4604      	mov	r4, r0
 80a63d0:	f7ff ffe2 	bl	80a6398 <_ZN9TCPClientD1Ev>
 80a63d4:	4620      	mov	r0, r4
 80a63d6:	211c      	movs	r1, #28
 80a63d8:	f001 f9a3 	bl	80a7722 <_ZdlPvj>
 80a63dc:	4620      	mov	r0, r4
 80a63de:	bd10      	pop	{r4, pc}

080a63e0 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a63e0:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 80a63e2:	4604      	mov	r4, r0
 80a63e4:	4606      	mov	r6, r0
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a63e6:	694d      	ldr	r5, [r1, #20]
 80a63e8:	4b04      	ldr	r3, [pc, #16]	; (80a63fc <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a63ea:	358c      	adds	r5, #140	; 0x8c
 80a63ec:	f844 3b04 	str.w	r3, [r4], #4
 80a63f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a63f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a63f4:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a63f6:	4630      	mov	r0, r6
 80a63f8:	7023      	strb	r3, [r4, #0]
 80a63fa:	bd70      	pop	{r4, r5, r6, pc}
 80a63fc:	080ad3a0 	.word	0x080ad3a0

080a6400 <_ZN9TCPClient4peekEv>:
{
 80a6400:	b510      	push	{r4, lr}
 80a6402:	6943      	ldr	r3, [r0, #20]
 80a6404:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a6406:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a640a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a640e:	429a      	cmp	r2, r3
 80a6410:	d005      	beq.n	80a641e <_ZN9TCPClient4peekEv+0x1e>
 80a6412:	6963      	ldr	r3, [r4, #20]
 80a6414:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a6418:	4413      	add	r3, r2
 80a641a:	7918      	ldrb	r0, [r3, #4]
}
 80a641c:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a641e:	6803      	ldr	r3, [r0, #0]
 80a6420:	691b      	ldr	r3, [r3, #16]
 80a6422:	4798      	blx	r3
 80a6424:	2800      	cmp	r0, #0
 80a6426:	d1f4      	bne.n	80a6412 <_ZN9TCPClient4peekEv+0x12>
 80a6428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a642c:	e7f6      	b.n	80a641c <_ZN9TCPClient4peekEv+0x1c>

080a642e <_ZN9TCPClient4readEv>:
{
 80a642e:	b510      	push	{r4, lr}
 80a6430:	6943      	ldr	r3, [r0, #20]
 80a6432:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a6434:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a6438:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a643c:	429a      	cmp	r2, r3
 80a643e:	d008      	beq.n	80a6452 <_ZN9TCPClient4readEv+0x24>
 80a6440:	6963      	ldr	r3, [r4, #20]
 80a6442:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a6446:	1c51      	adds	r1, r2, #1
 80a6448:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a644c:	4413      	add	r3, r2
 80a644e:	7918      	ldrb	r0, [r3, #4]
}
 80a6450:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a6452:	6803      	ldr	r3, [r0, #0]
 80a6454:	691b      	ldr	r3, [r3, #16]
 80a6456:	4798      	blx	r3
 80a6458:	2800      	cmp	r0, #0
 80a645a:	d1f1      	bne.n	80a6440 <_ZN9TCPClient4readEv+0x12>
 80a645c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a6460:	e7f6      	b.n	80a6450 <_ZN9TCPClient4readEv+0x22>

080a6462 <_ZN9TCPClient4readEPhj>:
{
 80a6462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a6464:	6943      	ldr	r3, [r0, #20]
 80a6466:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a6468:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a646c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a6470:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a6472:	429a      	cmp	r2, r3
{
 80a6474:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a6476:	d016      	beq.n	80a64a6 <_ZN9TCPClient4readEPhj+0x44>
 80a6478:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a647a:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a647c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a6480:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a6484:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a6486:	42bc      	cmp	r4, r7
 80a6488:	bf28      	it	cs
 80a648a:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a648c:	3304      	adds	r3, #4
 80a648e:	4622      	mov	r2, r4
 80a6490:	4419      	add	r1, r3
 80a6492:	f005 ff21 	bl	80ac2d8 <memcpy>
 80a6496:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a6498:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a649c:	4423      	add	r3, r4
 80a649e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a64a2:	4620      	mov	r0, r4
 80a64a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a64a6:	6803      	ldr	r3, [r0, #0]
 80a64a8:	691b      	ldr	r3, [r3, #16]
 80a64aa:	4798      	blx	r3
 80a64ac:	2800      	cmp	r0, #0
 80a64ae:	d1e3      	bne.n	80a6478 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a64b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a64b4:	e7f5      	b.n	80a64a2 <_ZN9TCPClient4readEPhj+0x40>

080a64b6 <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a64b6:	2300      	movs	r3, #0
 80a64b8:	6942      	ldr	r2, [r0, #20]
 80a64ba:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a64be:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a64c0:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a64c4:	4770      	bx	lr
	...

080a64c8 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a64c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a64cc:	461f      	mov	r7, r3
    stop();
 80a64ce:	6803      	ldr	r3, [r0, #0]
{
 80a64d0:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a64d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a64d4:	4605      	mov	r5, r0
 80a64d6:	460c      	mov	r4, r1
 80a64d8:	4616      	mov	r6, r2
    stop();
 80a64da:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a64dc:	4638      	mov	r0, r7
 80a64de:	f7ff fd3d 	bl	80a5f5c <_ZN5spark12NetworkClass4fromEm>
 80a64e2:	6803      	ldr	r3, [r0, #0]
 80a64e4:	68db      	ldr	r3, [r3, #12]
 80a64e6:	4798      	blx	r3
 80a64e8:	2800      	cmp	r0, #0
 80a64ea:	d054      	beq.n	80a6596 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a64ec:	4633      	mov	r3, r6
 80a64ee:	2206      	movs	r2, #6
 80a64f0:	2101      	movs	r1, #1
 80a64f2:	2002      	movs	r0, #2
 80a64f4:	9700      	str	r7, [sp, #0]
 80a64f6:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a64fa:	f7fe ff23 	bl	80a5344 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a64fe:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a6500:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a6504:	f04f 0800 	mov.w	r8, #0
 80a6508:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a650c:	696b      	ldr	r3, [r5, #20]
 80a650e:	2001      	movs	r0, #1
 80a6510:	681b      	ldr	r3, [r3, #0]
 80a6512:	4923      	ldr	r1, [pc, #140]	; (80a65a0 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a6514:	9301      	str	r3, [sp, #4]
 80a6516:	4b23      	ldr	r3, [pc, #140]	; (80a65a4 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a6518:	aa02      	add	r2, sp, #8
 80a651a:	9300      	str	r3, [sp, #0]
 80a651c:	4643      	mov	r3, r8
 80a651e:	f7ff f809 	bl	80a5534 <log_message>
          if (socket_handle_valid(d_->sock))
 80a6522:	696b      	ldr	r3, [r5, #20]
 80a6524:	6818      	ldr	r0, [r3, #0]
 80a6526:	f7fe ff05 	bl	80a5334 <socket_handle_valid>
 80a652a:	2800      	cmp	r0, #0
 80a652c:	d033      	beq.n	80a6596 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a652e:	4628      	mov	r0, r5
 80a6530:	f7ff ffc1 	bl	80a64b6 <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a6534:	2302      	movs	r3, #2
 80a6536:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a653a:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a653c:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a653e:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a6542:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a6544:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a6548:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a654c:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a654e:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a6552:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a6556:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a655a:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a655e:	f7fe ffd1 	bl	80a5504 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a6562:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a6564:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a6566:	2210      	movs	r2, #16
 80a6568:	6818      	ldr	r0, [r3, #0]
 80a656a:	a902      	add	r1, sp, #8
 80a656c:	f7fe fef2 	bl	80a5354 <socket_connect>
 80a6570:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a6572:	4630      	mov	r0, r6
 80a6574:	f7fe ffc6 	bl	80a5504 <HAL_NET_SetNetWatchDog>
 80a6578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a657a:	696e      	ldr	r6, [r5, #20]
 80a657c:	368c      	adds	r6, #140	; 0x8c
 80a657e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a6580:	6823      	ldr	r3, [r4, #0]
 80a6582:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a6584:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a6586:	f1b9 0f00 	cmp.w	r9, #0
 80a658a:	d007      	beq.n	80a659c <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a658c:	682b      	ldr	r3, [r5, #0]
 80a658e:	4628      	mov	r0, r5
 80a6590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a6592:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a6594:	4640      	mov	r0, r8
}
 80a6596:	b00b      	add	sp, #44	; 0x2c
 80a6598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a659c:	2001      	movs	r0, #1
        return connected;
 80a659e:	e7fa      	b.n	80a6596 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a65a0:	080ad3ec 	.word	0x080ad3ec
 80a65a4:	080ad3f3 	.word	0x080ad3f3

080a65a8 <_ZN9TCPClient9availableEv>:
{
 80a65a8:	b538      	push	{r3, r4, r5, lr}
 80a65aa:	6942      	ldr	r2, [r0, #20]
 80a65ac:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a65ae:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a65b2:	b12b      	cbz	r3, 80a65c0 <_ZN9TCPClient9availableEv+0x18>
 80a65b4:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a65b8:	429a      	cmp	r2, r3
 80a65ba:	d101      	bne.n	80a65c0 <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a65bc:	f7ff ff7b 	bl	80a64b6 <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a65c0:	6920      	ldr	r0, [r4, #16]
 80a65c2:	f7ff fccb 	bl	80a5f5c <_ZN5spark12NetworkClass4fromEm>
 80a65c6:	6803      	ldr	r3, [r0, #0]
 80a65c8:	68db      	ldr	r3, [r3, #12]
 80a65ca:	4798      	blx	r3
 80a65cc:	b1f8      	cbz	r0, 80a660e <_ZN9TCPClient9availableEv+0x66>
 80a65ce:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a65d0:	6818      	ldr	r0, [r3, #0]
 80a65d2:	f7fe feaf 	bl	80a5334 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a65d6:	b1d0      	cbz	r0, 80a660e <_ZN9TCPClient9availableEv+0x66>
 80a65d8:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a65da:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a65de:	297f      	cmp	r1, #127	; 0x7f
 80a65e0:	d815      	bhi.n	80a660e <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a65e2:	1d05      	adds	r5, r0, #4
 80a65e4:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a65e8:	2300      	movs	r3, #0
 80a65ea:	6800      	ldr	r0, [r0, #0]
 80a65ec:	4429      	add	r1, r5
 80a65ee:	f7fe feb9 	bl	80a5364 <socket_receive>
            if (ret > 0)
 80a65f2:	2800      	cmp	r0, #0
 80a65f4:	dd0b      	ble.n	80a660e <_ZN9TCPClient9availableEv+0x66>
 80a65f6:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a65f8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a65fc:	b90a      	cbnz	r2, 80a6602 <_ZN9TCPClient9availableEv+0x5a>
 80a65fe:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a6602:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a6604:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a6608:	4410      	add	r0, r2
 80a660a:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a660e:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a6610:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a6614:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a6618:	1ac0      	subs	r0, r0, r3
 80a661a:	bd38      	pop	{r3, r4, r5, pc}

080a661c <_ZN9TCPClient4stopEv>:
{
 80a661c:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a661e:	6943      	ldr	r3, [r0, #20]
{
 80a6620:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a6622:	6818      	ldr	r0, [r3, #0]
 80a6624:	f7fe fe86 	bl	80a5334 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a6628:	b118      	cbz	r0, 80a6632 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a662a:	6963      	ldr	r3, [r4, #20]
 80a662c:	6818      	ldr	r0, [r3, #0]
 80a662e:	f7fe fea9 	bl	80a5384 <socket_close>
 80a6632:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a6634:	f7fe febe 	bl	80a53b4 <socket_handle_invalid>
 80a6638:	6028      	str	r0, [r5, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
 80a663a:	6960      	ldr	r0, [r4, #20]
 80a663c:	2211      	movs	r2, #17
 80a663e:	2100      	movs	r1, #0
 80a6640:	308c      	adds	r0, #140	; 0x8c
 80a6642:	f005 fe71 	bl	80ac328 <memset>
  flush_buffer();
 80a6646:	4620      	mov	r0, r4
}
 80a6648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a664c:	f7ff bf33 	b.w	80a64b6 <_ZN9TCPClient12flush_bufferEv>

080a6650 <_ZN9TCPClient6statusEv>:
{
 80a6650:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a6652:	6943      	ldr	r3, [r0, #20]
{
 80a6654:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a6656:	6818      	ldr	r0, [r3, #0]
 80a6658:	f7fe fe6c 	bl	80a5334 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a665c:	b908      	cbnz	r0, 80a6662 <_ZN9TCPClient6statusEv+0x12>
 80a665e:	2000      	movs	r0, #0
}
 80a6660:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a6662:	6920      	ldr	r0, [r4, #16]
 80a6664:	f7ff fc7a 	bl	80a5f5c <_ZN5spark12NetworkClass4fromEm>
 80a6668:	6803      	ldr	r3, [r0, #0]
 80a666a:	68db      	ldr	r3, [r3, #12]
 80a666c:	4798      	blx	r3
 80a666e:	2800      	cmp	r0, #0
 80a6670:	d0f5      	beq.n	80a665e <_ZN9TCPClient6statusEv+0xe>
 80a6672:	6963      	ldr	r3, [r4, #20]
 80a6674:	6818      	ldr	r0, [r3, #0]
 80a6676:	f7fe fe55 	bl	80a5324 <socket_active_status>
 80a667a:	fab0 f080 	clz	r0, r0
 80a667e:	0940      	lsrs	r0, r0, #5
 80a6680:	e7ee      	b.n	80a6660 <_ZN9TCPClient6statusEv+0x10>

080a6682 <_ZN9TCPClientcvbEv>:
{
 80a6682:	b508      	push	{r3, lr}
   return (status()!=0);
 80a6684:	f7ff ffe4 	bl	80a6650 <_ZN9TCPClient6statusEv>
}
 80a6688:	3800      	subs	r0, #0
 80a668a:	bf18      	it	ne
 80a668c:	2001      	movne	r0, #1
 80a668e:	bd08      	pop	{r3, pc}

080a6690 <_ZN9TCPClient5writeEPKhjm>:
{
 80a6690:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 80a6694:	2700      	movs	r7, #0
 80a6696:	6047      	str	r7, [r0, #4]
 80a6698:	4604      	mov	r4, r0
 80a669a:	460d      	mov	r5, r1
 80a669c:	4616      	mov	r6, r2
 80a669e:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a66a0:	f7ff ffd6 	bl	80a6650 <_ZN9TCPClient6statusEv>
 80a66a4:	b170      	cbz	r0, 80a66c4 <_ZN9TCPClient5writeEPKhjm+0x34>
 80a66a6:	e9cd 8700 	strd	r8, r7, [sp]
 80a66aa:	6960      	ldr	r0, [r4, #20]
 80a66ac:	463b      	mov	r3, r7
 80a66ae:	4632      	mov	r2, r6
 80a66b0:	4629      	mov	r1, r5
 80a66b2:	6800      	ldr	r0, [r0, #0]
 80a66b4:	f7fe fe96 	bl	80a53e4 <socket_send_ex>
    if (ret < 0) {
 80a66b8:	2800      	cmp	r0, #0
 80a66ba:	da00      	bge.n	80a66be <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a66bc:	6060      	str	r0, [r4, #4]
}
 80a66be:	b002      	add	sp, #8
 80a66c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a66c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a66c8:	e7f8      	b.n	80a66bc <_ZN9TCPClient5writeEPKhjm+0x2c>

080a66ca <_ZN9TCPClient9connectedEv>:
{
 80a66ca:	b570      	push	{r4, r5, r6, lr}
 80a66cc:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a66ce:	f7ff ffbf 	bl	80a6650 <_ZN9TCPClient6statusEv>
 80a66d2:	b9e8      	cbnz	r0, 80a6710 <_ZN9TCPClient9connectedEv+0x46>
 80a66d4:	696b      	ldr	r3, [r5, #20]
 80a66d6:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a66da:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a66de:	4291      	cmp	r1, r2
 80a66e0:	d116      	bne.n	80a6710 <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a66e2:	6818      	ldr	r0, [r3, #0]
 80a66e4:	f7fe fe26 	bl	80a5334 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a66e8:	b908      	cbnz	r0, 80a66ee <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a66ea:	2000      	movs	r0, #0
}
 80a66ec:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a66ee:	696b      	ldr	r3, [r5, #20]
 80a66f0:	6818      	ldr	r0, [r3, #0]
 80a66f2:	f7fe fe17 	bl	80a5324 <socket_active_status>
 80a66f6:	2801      	cmp	r0, #1
 80a66f8:	4604      	mov	r4, r0
 80a66fa:	d1f6      	bne.n	80a66ea <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a66fc:	682b      	ldr	r3, [r5, #0]
 80a66fe:	4628      	mov	r0, r5
 80a6700:	691b      	ldr	r3, [r3, #16]
 80a6702:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a6704:	b930      	cbnz	r0, 80a6714 <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a6706:	682b      	ldr	r3, [r5, #0]
 80a6708:	4628      	mov	r0, r5
 80a670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a670c:	4798      	blx	r3
 80a670e:	e7ec      	b.n	80a66ea <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a6710:	2001      	movs	r0, #1
 80a6712:	e7eb      	b.n	80a66ec <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a6714:	4620      	mov	r0, r4
 80a6716:	e7e9      	b.n	80a66ec <_ZN9TCPClient9connectedEv+0x22>

080a6718 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a6718:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a671a:	b510      	push	{r4, lr}
 80a671c:	4604      	mov	r4, r0
          total(0) {
 80a671e:	6001      	str	r1, [r0, #0]
 80a6720:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a6724:	3088      	adds	r0, #136	; 0x88
 80a6726:	f7ff fb5d 	bl	80a5de4 <_ZN9IPAddressC1Ev>
}
 80a672a:	4620      	mov	r0, r4
 80a672c:	bd10      	pop	{r4, pc}
	...

080a6730 <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a6730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a6732:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a6736:	2300      	movs	r3, #0
 80a6738:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a673c:	4a0d      	ldr	r2, [pc, #52]	; (80a6774 <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a673e:	6103      	str	r3, [r0, #16]
 80a6740:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a6742:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a6744:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a6746:	20ac      	movs	r0, #172	; 0xac
 80a6748:	460e      	mov	r6, r1
 80a674a:	f7f9 fca6 	bl	80a009a <_Znwj>
	  auto __pi = ::new (__mem)
 80a674e:	1e05      	subs	r5, r0, #0
 80a6750:	f105 070c 	add.w	r7, r5, #12
 80a6754:	d008      	beq.n	80a6768 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a6756:	2301      	movs	r3, #1
 80a6758:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a675c:	4b06      	ldr	r3, [pc, #24]	; (80a6778 <_ZN9TCPClientC1Em+0x48>)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a675e:	4631      	mov	r1, r6
 80a6760:	4638      	mov	r0, r7
 80a6762:	602b      	str	r3, [r5, #0]
 80a6764:	f7ff ffd8 	bl	80a6718 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a6768:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a676a:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a676e:	f7ff fea2 	bl	80a64b6 <_ZN9TCPClient12flush_bufferEv>
}
 80a6772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a6774:	080ad434 	.word	0x080ad434
 80a6778:	080ad410 	.word	0x080ad410

080a677c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a677c:	b510      	push	{r4, lr}
 80a677e:	4604      	mov	r4, r0
 80a6780:	f7fe fe18 	bl	80a53b4 <socket_handle_invalid>
 80a6784:	4601      	mov	r1, r0
 80a6786:	4620      	mov	r0, r4
 80a6788:	f7ff ffd2 	bl	80a6730 <_ZN9TCPClientC1Em>
}
 80a678c:	4620      	mov	r0, r4
 80a678e:	bd10      	pop	{r4, pc}

080a6790 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a6790:	b510      	push	{r4, lr}
 80a6792:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a6794:	6800      	ldr	r0, [r0, #0]
 80a6796:	f7fe fdcd 	bl	80a5334 <socket_handle_valid>
 80a679a:	b110      	cbz	r0, 80a67a2 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a679c:	6820      	ldr	r0, [r4, #0]
 80a679e:	f7fe fdf1 	bl	80a5384 <socket_close>
    }
}
 80a67a2:	4620      	mov	r0, r4
 80a67a4:	bd10      	pop	{r4, pc}

080a67a6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80a67a6:	300c      	adds	r0, #12
 80a67a8:	f7ff bff2 	b.w	80a6790 <_ZN9TCPClient4DataD1Ev>

080a67ac <_ZN9TCPClient7connectEPKctm>:
{
 80a67ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a67b0:	461f      	mov	r7, r3
    stop();
 80a67b2:	6803      	ldr	r3, [r0, #0]
{
 80a67b4:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a67b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a67b8:	4606      	mov	r6, r0
 80a67ba:	460d      	mov	r5, r1
 80a67bc:	4690      	mov	r8, r2
    stop();
 80a67be:	4798      	blx	r3
    if (Network.ready())
 80a67c0:	4813      	ldr	r0, [pc, #76]	; (80a6810 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a67c2:	f7ff fb76 	bl	80a5eb2 <_ZN5spark12NetworkClass5readyEv>
 80a67c6:	b1f0      	cbz	r0, 80a6806 <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a67c8:	a802      	add	r0, sp, #8
 80a67ca:	f7ff fb0b 	bl	80a5de4 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a67ce:	4628      	mov	r0, r5
 80a67d0:	f005 fe45 	bl	80ac45e <strlen>
 80a67d4:	2400      	movs	r4, #0
 80a67d6:	b281      	uxth	r1, r0
 80a67d8:	463b      	mov	r3, r7
 80a67da:	4628      	mov	r0, r5
 80a67dc:	9400      	str	r4, [sp, #0]
 80a67de:	aa03      	add	r2, sp, #12
 80a67e0:	f7fe fe98 	bl	80a5514 <inet_gethostbyname>
 80a67e4:	b990      	cbnz	r0, 80a680c <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a67e6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a67e8:	ad09      	add	r5, sp, #36	; 0x24
 80a67ea:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a67ee:	4b09      	ldr	r3, [pc, #36]	; (80a6814 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a67f0:	ac03      	add	r4, sp, #12
 80a67f2:	9308      	str	r3, [sp, #32]
 80a67f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a67f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a67f8:	6823      	ldr	r3, [r4, #0]
 80a67fa:	4642      	mov	r2, r8
 80a67fc:	702b      	strb	r3, [r5, #0]
 80a67fe:	4630      	mov	r0, r6
 80a6800:	463b      	mov	r3, r7
 80a6802:	a908      	add	r1, sp, #32
 80a6804:	47c8      	blx	r9
}
 80a6806:	b00f      	add	sp, #60	; 0x3c
 80a6808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a680c:	4620      	mov	r0, r4
 80a680e:	e7fa      	b.n	80a6806 <_ZN9TCPClient7connectEPKctm+0x5a>
 80a6810:	2000104c 	.word	0x2000104c
 80a6814:	080ad3a0 	.word	0x080ad3a0

080a6818 <_ZN9TCPServer5writeEhm>:

    return _client;
}

size_t TCPServer::write(uint8_t b, system_tick_t timeout)
{
 80a6818:	b513      	push	{r0, r1, r4, lr}
 80a681a:	4613      	mov	r3, r2
    return write(&b, sizeof(b), timeout);
 80a681c:	6802      	ldr	r2, [r0, #0]
{
 80a681e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, sizeof(b), timeout);
 80a6822:	6994      	ldr	r4, [r2, #24]
 80a6824:	f10d 0107 	add.w	r1, sp, #7
 80a6828:	2201      	movs	r2, #1
 80a682a:	47a0      	blx	r4
}
 80a682c:	b002      	add	sp, #8
 80a682e:	bd10      	pop	{r4, pc}

080a6830 <_ZN9TCPServer5writeEh>:
    setWriteError(_client.getWriteError());
    return ret;
}

size_t TCPServer::write(uint8_t b)
{
 80a6830:	b507      	push	{r0, r1, r2, lr}
    return write(&b, 1);
 80a6832:	6803      	ldr	r3, [r0, #0]
{
 80a6834:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1);
 80a6838:	2201      	movs	r2, #1
 80a683a:	68db      	ldr	r3, [r3, #12]
 80a683c:	f10d 0107 	add.w	r1, sp, #7
 80a6840:	4798      	blx	r3
}
 80a6842:	b003      	add	sp, #12
 80a6844:	f85d fb04 	ldr.w	pc, [sp], #4

080a6848 <_ZN9TCPServer5writeEPKhj>:

size_t TCPServer::write(const uint8_t *buffer, size_t size)
{
 80a6848:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a684a:	6803      	ldr	r3, [r0, #0]
 80a684c:	699c      	ldr	r4, [r3, #24]
 80a684e:	f247 5330 	movw	r3, #30000	; 0x7530
 80a6852:	46a4      	mov	ip, r4
}
 80a6854:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a6856:	4760      	bx	ip

080a6858 <_ZN9TCPServer5writeEPKhjm>:
{
 80a6858:	b510      	push	{r4, lr}
 80a685a:	4604      	mov	r4, r0
 80a685c:	2000      	movs	r0, #0
 80a685e:	61a0      	str	r0, [r4, #24]
    size_t ret = _client.write(buf, size, timeout);
 80a6860:	f104 0014 	add.w	r0, r4, #20
 80a6864:	f7ff ff14 	bl	80a6690 <_ZN9TCPClient5writeEPKhjm>
 80a6868:	69a3      	ldr	r3, [r4, #24]
 80a686a:	6063      	str	r3, [r4, #4]
}
 80a686c:	bd10      	pop	{r4, pc}

080a686e <_ZN15TCPServerClient8remoteIPEv>:
    virtual IPAddress remoteIP() override
 80a686e:	b570      	push	{r4, r5, r6, lr}
        memset(&peer, 0, sizeof(peer));
 80a6870:	2616      	movs	r6, #22
    virtual IPAddress remoteIP() override
 80a6872:	460d      	mov	r5, r1
 80a6874:	4604      	mov	r4, r0
 80a6876:	b086      	sub	sp, #24
        memset(&peer, 0, sizeof(peer));
 80a6878:	4632      	mov	r2, r6
 80a687a:	2100      	movs	r1, #0
 80a687c:	4668      	mov	r0, sp
 80a687e:	f005 fd53 	bl	80ac328 <memset>
    friend class TCPServer;

    using Print::write;

protected:
    inline sock_handle_t sock_handle() { return d_->sock; }
 80a6882:	696b      	ldr	r3, [r5, #20]
        peer.size = sizeof(peer);
 80a6884:	f8ad 6000 	strh.w	r6, [sp]
        socket_peer(sock_handle(), &peer, NULL);
 80a6888:	2200      	movs	r2, #0
 80a688a:	4669      	mov	r1, sp
 80a688c:	6818      	ldr	r0, [r3, #0]
 80a688e:	f7fe fda1 	bl	80a53d4 <socket_peer>
        return peer.address;
 80a6892:	4620      	mov	r0, r4
 80a6894:	f10d 0102 	add.w	r1, sp, #2
 80a6898:	f7ff fab2 	bl	80a5e00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a689c:	4620      	mov	r0, r4
 80a689e:	b006      	add	sp, #24
 80a68a0:	bd70      	pop	{r4, r5, r6, pc}

080a68a2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a68a2:	b510      	push	{r4, lr}
 80a68a4:	4604      	mov	r4, r0
          _M_dispose();
 80a68a6:	6803      	ldr	r3, [r0, #0]
 80a68a8:	689b      	ldr	r3, [r3, #8]
 80a68aa:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a68ac:	68a3      	ldr	r3, [r4, #8]
 80a68ae:	3b01      	subs	r3, #1
 80a68b0:	60a3      	str	r3, [r4, #8]
 80a68b2:	b92b      	cbnz	r3, 80a68c0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80a68b4:	6823      	ldr	r3, [r4, #0]
 80a68b6:	4620      	mov	r0, r4
    }
 80a68b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80a68bc:	68db      	ldr	r3, [r3, #12]
 80a68be:	4718      	bx	r3
    }
 80a68c0:	bd10      	pop	{r4, pc}
	...

080a68c4 <_ZN9TCPServerC1Etm>:
TCPServer::TCPServer(uint16_t port, network_interface_t nif) : _port(port), _nif(nif), _sock(socket_handle_invalid()), _client(socket_handle_invalid())
 80a68c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Print() : write_error(0) {}
 80a68c6:	2500      	movs	r5, #0
 80a68c8:	4b14      	ldr	r3, [pc, #80]	; (80a691c <_ZN9TCPServerC1Etm+0x58>)
 80a68ca:	60c2      	str	r2, [r0, #12]
 80a68cc:	6003      	str	r3, [r0, #0]
 80a68ce:	8101      	strh	r1, [r0, #8]
 80a68d0:	6045      	str	r5, [r0, #4]
 80a68d2:	4604      	mov	r4, r0
 80a68d4:	f7fe fd6e 	bl	80a53b4 <socket_handle_invalid>
 80a68d8:	6120      	str	r0, [r4, #16]
 80a68da:	f7fe fd6b 	bl	80a53b4 <socket_handle_invalid>
 80a68de:	4601      	mov	r1, r0
 80a68e0:	f104 0014 	add.w	r0, r4, #20
 80a68e4:	f7ff ff24 	bl	80a6730 <_ZN9TCPClientC1Em>
        os_thread_scheduling(false, NULL);
 80a68e8:	4629      	mov	r1, r5
 80a68ea:	4628      	mov	r0, r5
        if (!s_invalid_client) {
 80a68ec:	4d0c      	ldr	r5, [pc, #48]	; (80a6920 <_ZN9TCPServerC1Etm+0x5c>)
 80a68ee:	f7fe fc67 	bl	80a51c0 <os_thread_scheduling>
 80a68f2:	682a      	ldr	r2, [r5, #0]
 80a68f4:	b95a      	cbnz	r2, 80a690e <_ZN9TCPServerC1Etm+0x4a>
            s_invalid_client = new TCPClient(socket_handle_invalid());
 80a68f6:	f7fe fd5d 	bl	80a53b4 <socket_handle_invalid>
 80a68fa:	4607      	mov	r7, r0
 80a68fc:	201c      	movs	r0, #28
 80a68fe:	f7f9 fbcc 	bl	80a009a <_Znwj>
 80a6902:	4606      	mov	r6, r0
 80a6904:	b110      	cbz	r0, 80a690c <_ZN9TCPServerC1Etm+0x48>
 80a6906:	4639      	mov	r1, r7
 80a6908:	f7ff ff12 	bl	80a6730 <_ZN9TCPClientC1Em>
 80a690c:	602e      	str	r6, [r5, #0]
        os_thread_scheduling(true, NULL);
 80a690e:	2100      	movs	r1, #0
 80a6910:	2001      	movs	r0, #1
 80a6912:	f7fe fc55 	bl	80a51c0 <os_thread_scheduling>
}
 80a6916:	4620      	mov	r0, r4
 80a6918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a691a:	bf00      	nop
 80a691c:	080ad4f4 	.word	0x080ad4f4
 80a6920:	20001074 	.word	0x20001074

080a6924 <_ZN9TCPServer4stopEv>:
{
 80a6924:	b510      	push	{r4, lr}
 80a6926:	4604      	mov	r4, r0
    _client.stop();
 80a6928:	3014      	adds	r0, #20
 80a692a:	f7ff fe77 	bl	80a661c <_ZN9TCPClient4stopEv>
    socket_close(_sock);
 80a692e:	6920      	ldr	r0, [r4, #16]
 80a6930:	f7fe fd28 	bl	80a5384 <socket_close>
    _sock = socket_handle_invalid();
 80a6934:	f7fe fd3e 	bl	80a53b4 <socket_handle_invalid>
 80a6938:	6120      	str	r0, [r4, #16]
}
 80a693a:	bd10      	pop	{r4, pc}

080a693c <_ZN9TCPServer5beginEv>:
{
 80a693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a693e:	4604      	mov	r4, r0
    stop();
 80a6940:	f7ff fff0 	bl	80a6924 <_ZN9TCPServer4stopEv>
    if(!Network.from(_nif).ready())
 80a6944:	68e0      	ldr	r0, [r4, #12]
 80a6946:	f7ff fb09 	bl	80a5f5c <_ZN5spark12NetworkClass4fromEm>
 80a694a:	6803      	ldr	r3, [r0, #0]
 80a694c:	68db      	ldr	r3, [r3, #12]
 80a694e:	4798      	blx	r3
 80a6950:	4605      	mov	r5, r0
 80a6952:	b168      	cbz	r0, 80a6970 <_ZN9TCPServer5beginEv+0x34>
    if (socket_handle_valid(_sock)) {
 80a6954:	6920      	ldr	r0, [r4, #16]
 80a6956:	f7fe fced 	bl	80a5334 <socket_handle_valid>
 80a695a:	b948      	cbnz	r0, 80a6970 <_ZN9TCPServer5beginEv+0x34>
    sock_result_t result = socket_create_tcp_server(_port, _nif);
 80a695c:	68e1      	ldr	r1, [r4, #12]
 80a695e:	8920      	ldrh	r0, [r4, #8]
 80a6960:	f7fe fd18 	bl	80a5394 <socket_create_tcp_server>
 80a6964:	4607      	mov	r7, r0
    if (socket_handle_valid(result)) {
 80a6966:	f7fe fce5 	bl	80a5334 <socket_handle_valid>
 80a696a:	4606      	mov	r6, r0
 80a696c:	b110      	cbz	r0, 80a6974 <_ZN9TCPServer5beginEv+0x38>
        _sock = result;
 80a696e:	6127      	str	r7, [r4, #16]
}
 80a6970:	4628      	mov	r0, r5
 80a6972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    stop();
 80a6974:	4620      	mov	r0, r4
 80a6976:	f7ff ffd5 	bl	80a6924 <_ZN9TCPServer4stopEv>
    return false;
 80a697a:	4635      	mov	r5, r6
 80a697c:	e7f8      	b.n	80a6970 <_ZN9TCPServer5beginEv+0x34>

080a697e <_ZN9TCPClientaSERKS_>:
class TCPClient : public Client {
 80a697e:	b538      	push	{r3, r4, r5, lr}
class Stream : public Print
 80a6980:	684b      	ldr	r3, [r1, #4]
 80a6982:	4604      	mov	r4, r0
class Print
 80a6984:	6043      	str	r3, [r0, #4]
 80a6986:	688b      	ldr	r3, [r1, #8]
 80a6988:	6083      	str	r3, [r0, #8]
 80a698a:	68cb      	ldr	r3, [r1, #12]
 80a698c:	60c3      	str	r3, [r0, #12]
 80a698e:	690b      	ldr	r3, [r1, #16]
 80a6990:	6103      	str	r3, [r0, #16]
    class __shared_ptr
 80a6992:	694b      	ldr	r3, [r1, #20]
 80a6994:	6143      	str	r3, [r0, #20]
 80a6996:	698d      	ldr	r5, [r1, #24]
	if (__tmp != _M_pi)
 80a6998:	6983      	ldr	r3, [r0, #24]
 80a699a:	429d      	cmp	r5, r3
 80a699c:	d00c      	beq.n	80a69b8 <_ZN9TCPClientaSERKS_+0x3a>
	    if (__tmp != 0)
 80a699e:	b115      	cbz	r5, 80a69a6 <_ZN9TCPClientaSERKS_+0x28>
    { ++_M_use_count; }
 80a69a0:	686b      	ldr	r3, [r5, #4]
 80a69a2:	3301      	adds	r3, #1
 80a69a4:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 80a69a6:	69a0      	ldr	r0, [r4, #24]
 80a69a8:	b128      	cbz	r0, 80a69b6 <_ZN9TCPClientaSERKS_+0x38>
      if (--_M_use_count == 0)
 80a69aa:	6843      	ldr	r3, [r0, #4]
 80a69ac:	3b01      	subs	r3, #1
 80a69ae:	6043      	str	r3, [r0, #4]
 80a69b0:	b90b      	cbnz	r3, 80a69b6 <_ZN9TCPClientaSERKS_+0x38>
 80a69b2:	f7ff ff76 	bl	80a68a2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 80a69b6:	61a5      	str	r5, [r4, #24]
 80a69b8:	4620      	mov	r0, r4
 80a69ba:	bd38      	pop	{r3, r4, r5, pc}

080a69bc <_ZN9TCPClientC1ERKS_>:
 80a69bc:	684b      	ldr	r3, [r1, #4]
 80a69be:	6043      	str	r3, [r0, #4]
 80a69c0:	4b09      	ldr	r3, [pc, #36]	; (80a69e8 <_ZN9TCPClientC1ERKS_+0x2c>)
 80a69c2:	6003      	str	r3, [r0, #0]
 80a69c4:	688b      	ldr	r3, [r1, #8]
 80a69c6:	6083      	str	r3, [r0, #8]
 80a69c8:	68cb      	ldr	r3, [r1, #12]
 80a69ca:	60c3      	str	r3, [r0, #12]
 80a69cc:	690b      	ldr	r3, [r1, #16]
 80a69ce:	6103      	str	r3, [r0, #16]
 80a69d0:	4b06      	ldr	r3, [pc, #24]	; (80a69ec <_ZN9TCPClientC1ERKS_+0x30>)
 80a69d2:	6003      	str	r3, [r0, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a69d4:	694b      	ldr	r3, [r1, #20]
 80a69d6:	6143      	str	r3, [r0, #20]
      : _M_pi(__r._M_pi)
 80a69d8:	698b      	ldr	r3, [r1, #24]
 80a69da:	6183      	str	r3, [r0, #24]
	if (_M_pi != 0)
 80a69dc:	b113      	cbz	r3, 80a69e4 <_ZN9TCPClientC1ERKS_+0x28>
    { ++_M_use_count; }
 80a69de:	685a      	ldr	r2, [r3, #4]
 80a69e0:	3201      	adds	r2, #1
 80a69e2:	605a      	str	r2, [r3, #4]
 80a69e4:	4770      	bx	lr
 80a69e6:	bf00      	nop
 80a69e8:	080ad480 	.word	0x080ad480
 80a69ec:	080ad434 	.word	0x080ad434

080a69f0 <_ZN15TCPServerClientD1Ev>:
class TCPServerClient : public TCPClient
 80a69f0:	b510      	push	{r4, lr}
 80a69f2:	4604      	mov	r4, r0
    virtual ~TCPClient() {};
 80a69f4:	4b03      	ldr	r3, [pc, #12]	; (80a6a04 <_ZN15TCPServerClientD1Ev+0x14>)
 80a69f6:	f840 3b18 	str.w	r3, [r0], #24
      ~__shared_ptr() = default;
 80a69fa:	f7fd f923 	bl	80a3c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a69fe:	4620      	mov	r0, r4
 80a6a00:	bd10      	pop	{r4, pc}
 80a6a02:	bf00      	nop
 80a6a04:	080ad434 	.word	0x080ad434

080a6a08 <_ZN15TCPServerClientD0Ev>:
 80a6a08:	b510      	push	{r4, lr}
 80a6a0a:	4604      	mov	r4, r0
 80a6a0c:	f7ff fff0 	bl	80a69f0 <_ZN15TCPServerClientD1Ev>
 80a6a10:	4620      	mov	r0, r4
 80a6a12:	211c      	movs	r1, #28
 80a6a14:	f000 fe85 	bl	80a7722 <_ZdlPvj>
 80a6a18:	4620      	mov	r0, r4
 80a6a1a:	bd10      	pop	{r4, pc}

080a6a1c <_ZN9TCPServer9availableEv>:
{
 80a6a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a6a1e:	460c      	mov	r4, r1
 80a6a20:	b08f      	sub	sp, #60	; 0x3c
 80a6a22:	4606      	mov	r6, r0
    sock_handle_t SOCKET_INVALID = socket_handle_invalid();
 80a6a24:	f7fe fcc6 	bl	80a53b4 <socket_handle_invalid>
    if(_sock == SOCKET_INVALID)
 80a6a28:	6923      	ldr	r3, [r4, #16]
    sock_handle_t SOCKET_INVALID = socket_handle_invalid();
 80a6a2a:	4605      	mov	r5, r0
    if(_sock == SOCKET_INVALID)
 80a6a2c:	4283      	cmp	r3, r0
 80a6a2e:	d103      	bne.n	80a6a38 <_ZN9TCPServer9availableEv+0x1c>
        begin();
 80a6a30:	6823      	ldr	r3, [r4, #0]
 80a6a32:	4620      	mov	r0, r4
 80a6a34:	691b      	ldr	r3, [r3, #16]
 80a6a36:	4798      	blx	r3
    if((!Network.from(_nif).ready()) || (_sock == SOCKET_INVALID))
 80a6a38:	68e0      	ldr	r0, [r4, #12]
 80a6a3a:	f7ff fa8f 	bl	80a5f5c <_ZN5spark12NetworkClass4fromEm>
 80a6a3e:	6803      	ldr	r3, [r0, #0]
 80a6a40:	f104 0714 	add.w	r7, r4, #20
 80a6a44:	68db      	ldr	r3, [r3, #12]
 80a6a46:	4798      	blx	r3
 80a6a48:	b308      	cbz	r0, 80a6a8e <_ZN9TCPServer9availableEv+0x72>
 80a6a4a:	6920      	ldr	r0, [r4, #16]
 80a6a4c:	42a8      	cmp	r0, r5
 80a6a4e:	d01e      	beq.n	80a6a8e <_ZN9TCPServer9availableEv+0x72>
    int sock = socket_accept(_sock);
 80a6a50:	f7fe fca8 	bl	80a53a4 <socket_accept>
 80a6a54:	4604      	mov	r4, r0
    if (!socket_handle_valid(sock))
 80a6a56:	f7fe fc6d 	bl	80a5334 <socket_handle_valid>
 80a6a5a:	b1d8      	cbz	r0, 80a6a94 <_ZN9TCPServer9availableEv+0x78>
    TCPServerClient(sock_handle_t sock) : TCPClient(sock) {}
 80a6a5c:	4621      	mov	r1, r4
 80a6a5e:	a807      	add	r0, sp, #28
 80a6a60:	f7ff fe66 	bl	80a6730 <_ZN9TCPClientC1Em>
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a6a64:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a6a66:	4b11      	ldr	r3, [pc, #68]	; (80a6aac <_ZN9TCPServer9availableEv+0x90>)
        client.d_->remoteIP = client.remoteIP();      // fetch the peer IP ready for the copy operator
 80a6a68:	a907      	add	r1, sp, #28
 80a6a6a:	a801      	add	r0, sp, #4
 80a6a6c:	ad02      	add	r5, sp, #8
 80a6a6e:	348c      	adds	r4, #140	; 0x8c
    TCPServerClient(sock_handle_t sock) : TCPClient(sock) {}
 80a6a70:	9307      	str	r3, [sp, #28]
        client.d_->remoteIP = client.remoteIP();      // fetch the peer IP ready for the copy operator
 80a6a72:	f7ff fefc 	bl	80a686e <_ZN15TCPServerClient8remoteIPEv>
 80a6a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a6a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a6a7a:	682b      	ldr	r3, [r5, #0]
        _client = client;
 80a6a7c:	4638      	mov	r0, r7
 80a6a7e:	7023      	strb	r3, [r4, #0]
 80a6a80:	a907      	add	r1, sp, #28
 80a6a82:	f7ff ff7c 	bl	80a697e <_ZN9TCPClientaSERKS_>
        TCPServerClient client = TCPServerClient(sock);
 80a6a86:	a807      	add	r0, sp, #28
 80a6a88:	f7ff ffb2 	bl	80a69f0 <_ZN15TCPServerClientD1Ev>
 80a6a8c:	e007      	b.n	80a6a9e <_ZN9TCPServer9availableEv+0x82>
        stop();
 80a6a8e:	4620      	mov	r0, r4
 80a6a90:	f7ff ff48 	bl	80a6924 <_ZN9TCPServer4stopEv>
        _client = *s_invalid_client;
 80a6a94:	4b06      	ldr	r3, [pc, #24]	; (80a6ab0 <_ZN9TCPServer9availableEv+0x94>)
 80a6a96:	4638      	mov	r0, r7
 80a6a98:	6819      	ldr	r1, [r3, #0]
 80a6a9a:	f7ff ff70 	bl	80a697e <_ZN9TCPClientaSERKS_>
    return _client;
 80a6a9e:	4639      	mov	r1, r7
 80a6aa0:	4630      	mov	r0, r6
 80a6aa2:	f7ff ff8b 	bl	80a69bc <_ZN9TCPClientC1ERKS_>
}
 80a6aa6:	4630      	mov	r0, r6
 80a6aa8:	b00f      	add	sp, #60	; 0x3c
 80a6aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a6aac:	080ad4a8 	.word	0x080ad4a8
 80a6ab0:	20001074 	.word	0x20001074

080a6ab4 <_ZN9TCPServerD1Ev>:
    sock_handle_t _sock;
    TCPClient _client;

public:
    TCPServer(uint16_t, network_interface_t nif=0);
    ~TCPServer() { stop(); }
 80a6ab4:	b510      	push	{r4, lr}
 80a6ab6:	4604      	mov	r4, r0
 80a6ab8:	4b05      	ldr	r3, [pc, #20]	; (80a6ad0 <_ZN9TCPServerD1Ev+0x1c>)
 80a6aba:	6003      	str	r3, [r0, #0]
 80a6abc:	f7ff ff32 	bl	80a6924 <_ZN9TCPServer4stopEv>
 80a6ac0:	4b04      	ldr	r3, [pc, #16]	; (80a6ad4 <_ZN9TCPServerD1Ev+0x20>)
      ~__shared_ptr() = default;
 80a6ac2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a6ac6:	6163      	str	r3, [r4, #20]
 80a6ac8:	f7fd f8bc 	bl	80a3c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a6acc:	4620      	mov	r0, r4
 80a6ace:	bd10      	pop	{r4, pc}
 80a6ad0:	080ad4f4 	.word	0x080ad4f4
 80a6ad4:	080ad434 	.word	0x080ad434

080a6ad8 <_ZN9TCPServerD0Ev>:
 80a6ad8:	b510      	push	{r4, lr}
 80a6ada:	4604      	mov	r4, r0
 80a6adc:	f7ff ffea 	bl	80a6ab4 <_ZN9TCPServerD1Ev>
 80a6ae0:	4620      	mov	r0, r4
 80a6ae2:	2130      	movs	r1, #48	; 0x30
 80a6ae4:	f000 fe1d 	bl	80a7722 <_ZdlPvj>
 80a6ae8:	4620      	mov	r0, r4
 80a6aea:	bd10      	pop	{r4, pc}

080a6aec <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 80a6aec:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a6aee:	2000      	movs	r0, #0
 80a6af0:	f7fe fd8c 	bl	80a560c <spark_sync_time_pending>
 80a6af4:	b128      	cbz	r0, 80a6b02 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a6af6:	f7fe fd79 	bl	80a55ec <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a6afa:	f080 0001 	eor.w	r0, r0, #1
 80a6afe:	b2c0      	uxtb	r0, r0
    }
 80a6b00:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a6b02:	2001      	movs	r0, #1
 80a6b04:	e7fc      	b.n	80a6b00 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

080a6b06 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a6b06:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a6b08:	2000      	movs	r0, #0
 80a6b0a:	f7fe fb91 	bl	80a5230 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a6b0e:	4604      	mov	r4, r0
 80a6b10:	b9a0      	cbnz	r0, 80a6b3c <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a6b12:	f7fe fd17 	bl	80a5544 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a6b16:	2801      	cmp	r0, #1
 80a6b18:	d110      	bne.n	80a6b3c <_ZN9TimeClass7isValidEv+0x36>
 80a6b1a:	4620      	mov	r0, r4
 80a6b1c:	f7fe fd3a 	bl	80a5594 <system_thread_get_state>
 80a6b20:	b960      	cbnz	r0, 80a6b3c <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a6b22:	f7ff ffe3 	bl	80a6aec <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a6b26:	b910      	cbnz	r0, 80a6b2e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a6b28:	f7fe fd58 	bl	80a55dc <spark_process>
        while (_while() && !_condition()) {
 80a6b2c:	e7f9      	b.n	80a6b22 <_ZN9TimeClass7isValidEv+0x1c>
 80a6b2e:	f7ff ffdd 	bl	80a6aec <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a6b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a6b36:	2000      	movs	r0, #0
 80a6b38:	f7fe bb7a 	b.w	80a5230 <hal_rtc_time_is_valid>
}
 80a6b3c:	4620      	mov	r0, r4
 80a6b3e:	bd10      	pop	{r4, pc}

080a6b40 <_ZN9TimeClass3nowEv>:
{
 80a6b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a6b42:	f7ff ffe0 	bl	80a6b06 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a6b46:	2210      	movs	r2, #16
 80a6b48:	2100      	movs	r1, #0
 80a6b4a:	4668      	mov	r0, sp
 80a6b4c:	f005 fbec 	bl	80ac328 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a6b50:	2100      	movs	r1, #0
 80a6b52:	4668      	mov	r0, sp
 80a6b54:	f7fe fb74 	bl	80a5240 <hal_rtc_get_time>
}
 80a6b58:	9800      	ldr	r0, [sp, #0]
 80a6b5a:	b005      	add	sp, #20
 80a6b5c:	f85d fb04 	ldr.w	pc, [sp], #4

080a6b60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a6b60:	4b02      	ldr	r3, [pc, #8]	; (80a6b6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a6b62:	681a      	ldr	r2, [r3, #0]
 80a6b64:	4b02      	ldr	r3, [pc, #8]	; (80a6b70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a6b66:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a6b68:	4770      	bx	lr
 80a6b6a:	bf00      	nop
 80a6b6c:	20000000 	.word	0x20000000
 80a6b70:	20001078 	.word	0x20001078

080a6b74 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
 80a6b74:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a6b76:	6804      	ldr	r4, [r0, #0]
 80a6b78:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80a6b7a:	46a4      	mov	ip, r4
    }
 80a6b7c:	bc10      	pop	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
 80a6b7e:	4760      	bx	ip

080a6b80 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a6b80:	6803      	ldr	r3, [r0, #0]
 80a6b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a6b84:	4718      	bx	r3

080a6b86 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
 80a6b86:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a6b88:	4770      	bx	lr

080a6b8a <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a6b8a:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a6b8c:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a6b8e:	1a10      	subs	r0, r2, r0
 80a6b90:	4770      	bx	lr

080a6b92 <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a6b92:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
 80a6b94:	6803      	ldr	r3, [r0, #0]
{
 80a6b96:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
 80a6b9a:	2201      	movs	r2, #1
 80a6b9c:	68db      	ldr	r3, [r3, #12]
 80a6b9e:	f10d 0107 	add.w	r1, sp, #7
 80a6ba2:	4798      	blx	r3
}
 80a6ba4:	b003      	add	sp, #12
 80a6ba6:	f85d fb04 	ldr.w	pc, [sp], #4

080a6baa <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a6baa:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a6bac:	6803      	ldr	r3, [r0, #0]
{
 80a6bae:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a6bb0:	691b      	ldr	r3, [r3, #16]
 80a6bb2:	4798      	blx	r3
 80a6bb4:	b128      	cbz	r0, 80a6bc2 <_ZN3UDP4readEv+0x18>
 80a6bb6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a6bb8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a6bba:	1c59      	adds	r1, r3, #1
 80a6bbc:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a6bbe:	5cd0      	ldrb	r0, [r2, r3]
}
 80a6bc0:	bd10      	pop	{r4, pc}
  return available() ? _buffer[_offset++] : -1;
 80a6bc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a6bc6:	e7fb      	b.n	80a6bc0 <_ZN3UDP4readEv+0x16>

080a6bc8 <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a6bc8:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a6bca:	6803      	ldr	r3, [r0, #0]
{
 80a6bcc:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a6bce:	691b      	ldr	r3, [r3, #16]
 80a6bd0:	4798      	blx	r3
 80a6bd2:	b118      	cbz	r0, 80a6bdc <_ZN3UDP4peekEv+0x14>
 80a6bd4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a6bd6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a6bd8:	5cd0      	ldrb	r0, [r2, r3]
}
 80a6bda:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
 80a6bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a6be0:	e7fb      	b.n	80a6bda <_ZN3UDP4peekEv+0x12>

080a6be2 <_ZN3UDP5flushEv>:

void UDP::flush()
{
}
 80a6be2:	4770      	bx	lr

080a6be4 <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a6be4:	4603      	mov	r3, r0
 80a6be6:	4608      	mov	r0, r1
 80a6be8:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a6bea:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a6bec:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
 80a6bee:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer+_offset, size);
 80a6bf0:	6803      	ldr	r3, [r0, #0]
 80a6bf2:	1a52      	subs	r2, r2, r1
 80a6bf4:	68db      	ldr	r3, [r3, #12]
 80a6bf6:	4421      	add	r1, r4
}
 80a6bf8:	bc10      	pop	{r4}
    return p.write(_buffer+_offset, size);
 80a6bfa:	4718      	bx	r3

080a6bfc <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
 80a6bfc:	f1a0 0010 	sub.w	r0, r0, #16
 80a6c00:	f7ff bff0 	b.w	80a6be4 <_ZNK3UDP7printToER5Print>

080a6c04 <_ZN3UDP5beginEtm>:
{
 80a6c04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a6c08:	4616      	mov	r6, r2
    stop();
 80a6c0a:	6803      	ldr	r3, [r0, #0]
{
 80a6c0c:	4688      	mov	r8, r1
    stop();
 80a6c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 80a6c10:	4604      	mov	r4, r0
    stop();
 80a6c12:	4798      	blx	r3
    if(Network.from(nif).ready())
 80a6c14:	4630      	mov	r0, r6
 80a6c16:	f7ff f9a1 	bl	80a5f5c <_ZN5spark12NetworkClass4fromEm>
 80a6c1a:	6803      	ldr	r3, [r0, #0]
 80a6c1c:	68db      	ldr	r3, [r3, #12]
 80a6c1e:	4798      	blx	r3
 80a6c20:	4605      	mov	r5, r0
 80a6c22:	b188      	cbz	r0, 80a6c48 <_ZN3UDP5beginEtm+0x44>
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a6c24:	2102      	movs	r1, #2
 80a6c26:	4643      	mov	r3, r8
 80a6c28:	2211      	movs	r2, #17
 80a6c2a:	4608      	mov	r0, r1
 80a6c2c:	9600      	str	r6, [sp, #0]
 80a6c2e:	f7fe fb89 	bl	80a5344 <socket_create>
 80a6c32:	6160      	str	r0, [r4, #20]
        if (socket_handle_valid(_sock))
 80a6c34:	f7fe fb7e 	bl	80a5334 <socket_handle_valid>
 80a6c38:	4607      	mov	r7, r0
 80a6c3a:	b148      	cbz	r0, 80a6c50 <_ZN3UDP5beginEtm+0x4c>
  _offset = 0;
 80a6c3c:	2300      	movs	r3, #0
            _port = port;
 80a6c3e:	f8a4 8018 	strh.w	r8, [r4, #24]
  _offset = 0;
 80a6c42:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a6c44:	8723      	strh	r3, [r4, #56]	; 0x38
            _nif = nif;
 80a6c46:	6466      	str	r6, [r4, #68]	; 0x44
}
 80a6c48:	4628      	mov	r0, r5
 80a6c4a:	b002      	add	sp, #8
 80a6c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            stop();
 80a6c50:	6823      	ldr	r3, [r4, #0]
 80a6c52:	4620      	mov	r0, r4
 80a6c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a6c56:	4798      	blx	r3
            bound = false;
 80a6c58:	463d      	mov	r5, r7
 80a6c5a:	e7f5      	b.n	80a6c48 <_ZN3UDP5beginEtm+0x44>

080a6c5c <_ZN3UDP4stopEv>:
{
 80a6c5c:	b538      	push	{r3, r4, r5, lr}
 80a6c5e:	4604      	mov	r4, r0
    if (isOpen(_sock))
 80a6c60:	6945      	ldr	r5, [r0, #20]
   return sd != socket_handle_invalid();
 80a6c62:	f7fe fba7 	bl	80a53b4 <socket_handle_invalid>
    if (isOpen(_sock))
 80a6c66:	4285      	cmp	r5, r0
 80a6c68:	d002      	beq.n	80a6c70 <_ZN3UDP4stopEv+0x14>
        socket_close(_sock);
 80a6c6a:	6960      	ldr	r0, [r4, #20]
 80a6c6c:	f7fe fb8a 	bl	80a5384 <socket_close>
    _sock = socket_handle_invalid();
 80a6c70:	f7fe fba0 	bl	80a53b4 <socket_handle_invalid>
  _offset = 0;
 80a6c74:	2300      	movs	r3, #0
    _sock = socket_handle_invalid();
 80a6c76:	6160      	str	r0, [r4, #20]
  _offset = 0;
 80a6c78:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a6c7a:	8723      	strh	r3, [r4, #56]	; 0x38
}
 80a6c7c:	bd38      	pop	{r3, r4, r5, pc}

080a6c7e <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
{
 80a6c7e:	b510      	push	{r4, lr}
    remoteSockAddr.sa_family = AF_INET;
 80a6c80:	2402      	movs	r4, #2
{
 80a6c82:	b086      	sub	sp, #24
    remoteSockAddr.sa_family = AF_INET;
 80a6c84:	f8ad 4008 	strh.w	r4, [sp, #8]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a6c88:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80a6c8c:	ba64      	rev16	r4, r4
 80a6c8e:	f8ad 400a 	strh.w	r4, [sp, #10]
    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a6c92:	79dc      	ldrb	r4, [r3, #7]
 80a6c94:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a6c98:	799c      	ldrb	r4, [r3, #6]
 80a6c9a:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a6c9e:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a6ca0:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a6ca2:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a6ca6:	f88d 300f 	strb.w	r3, [sp, #15]
    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a6caa:	2310      	movs	r3, #16
 80a6cac:	9301      	str	r3, [sp, #4]
 80a6cae:	ab02      	add	r3, sp, #8
 80a6cb0:	9300      	str	r3, [sp, #0]
 80a6cb2:	6940      	ldr	r0, [r0, #20]
 80a6cb4:	2300      	movs	r3, #0
 80a6cb6:	f7fe fb5d 	bl	80a5374 <socket_sendto>
}
 80a6cba:	b006      	add	sp, #24
 80a6cbc:	bd10      	pop	{r4, pc}

080a6cbe <_ZN3UDP5writeEPKhj>:
{
 80a6cbe:	b570      	push	{r4, r5, r6, lr}
 80a6cc0:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a6cc2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a6cc4:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80a6cc6:	b168      	cbz	r0, 80a6ce4 <_ZN3UDP5writeEPKhj+0x26>
 80a6cc8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80a6cca:	1b9c      	subs	r4, r3, r6
    if (size>available)
 80a6ccc:	4294      	cmp	r4, r2
 80a6cce:	bf28      	it	cs
 80a6cd0:	4614      	movcs	r4, r2
    memcpy(_buffer+_offset, buffer, size);
 80a6cd2:	4430      	add	r0, r6
 80a6cd4:	4622      	mov	r2, r4
 80a6cd6:	f005 faff 	bl	80ac2d8 <memcpy>
    _offset += size;
 80a6cda:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
}
 80a6cdc:	4620      	mov	r0, r4
    _offset += size;
 80a6cde:	4423      	add	r3, r4
 80a6ce0:	86eb      	strh	r3, [r5, #54]	; 0x36
}
 80a6ce2:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a6ce4:	4604      	mov	r4, r0
 80a6ce6:	e7f1      	b.n	80a6ccc <_ZN3UDP5writeEPKhj+0xe>

080a6ce8 <_ZN3UDP4readEPhj>:
{
 80a6ce8:	b570      	push	{r4, r5, r6, lr}
    if (available())
 80a6cea:	6803      	ldr	r3, [r0, #0]
{
 80a6cec:	4604      	mov	r4, r0
    if (available())
 80a6cee:	691b      	ldr	r3, [r3, #16]
{
 80a6cf0:	460e      	mov	r6, r1
 80a6cf2:	4615      	mov	r5, r2
    if (available())
 80a6cf4:	4798      	blx	r3
 80a6cf6:	b190      	cbz	r0, 80a6d1e <_ZN3UDP4readEPhj+0x36>
    read = min(int(len), available());
 80a6cf8:	6823      	ldr	r3, [r4, #0]
 80a6cfa:	4620      	mov	r0, r4
 80a6cfc:	691b      	ldr	r3, [r3, #16]
 80a6cfe:	4798      	blx	r3
 80a6d00:	4285      	cmp	r5, r0
 80a6d02:	bfa8      	it	ge
 80a6d04:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a6d06:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a6d08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a6d0a:	462a      	mov	r2, r5
 80a6d0c:	4419      	add	r1, r3
 80a6d0e:	4630      	mov	r0, r6
 80a6d10:	f005 fae2 	bl	80ac2d8 <memcpy>
      _offset += read;
 80a6d14:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a6d16:	442b      	add	r3, r5
 80a6d18:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 80a6d1a:	4628      	mov	r0, r5
 80a6d1c:	bd70      	pop	{r4, r5, r6, pc}
    int read = -1;
 80a6d1e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    return read;
 80a6d22:	e7fa      	b.n	80a6d1a <_ZN3UDP4readEPhj+0x32>

080a6d24 <_ZN3UDP13receivePacketEPhjm>:
{
 80a6d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6d28:	4604      	mov	r4, r0
 80a6d2a:	b090      	sub	sp, #64	; 0x40
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a6d2c:	6c40      	ldr	r0, [r0, #68]	; 0x44
{
 80a6d2e:	461f      	mov	r7, r3
 80a6d30:	460d      	mov	r5, r1
 80a6d32:	4616      	mov	r6, r2
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a6d34:	f7ff f912 	bl	80a5f5c <_ZN5spark12NetworkClass4fromEm>
 80a6d38:	6803      	ldr	r3, [r0, #0]
 80a6d3a:	68db      	ldr	r3, [r3, #12]
 80a6d3c:	4798      	blx	r3
 80a6d3e:	b928      	cbnz	r0, 80a6d4c <_ZN3UDP13receivePacketEPhjm+0x28>
    int ret = -1;
 80a6d40:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
}
 80a6d44:	4630      	mov	r0, r6
 80a6d46:	b010      	add	sp, #64	; 0x40
 80a6d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a6d4c:	f8d4 8014 	ldr.w	r8, [r4, #20]
   return sd != socket_handle_invalid();
 80a6d50:	f7fe fb30 	bl	80a53b4 <socket_handle_invalid>
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a6d54:	4580      	cmp	r8, r0
 80a6d56:	d0f3      	beq.n	80a6d40 <_ZN3UDP13receivePacketEPhjm+0x1c>
 80a6d58:	2d00      	cmp	r5, #0
 80a6d5a:	d0f1      	beq.n	80a6d40 <_ZN3UDP13receivePacketEPhjm+0x1c>
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a6d5c:	2310      	movs	r3, #16
 80a6d5e:	9305      	str	r3, [sp, #20]
        ret = socket_receivefrom_ex(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen, timeout, nullptr);
 80a6d60:	2300      	movs	r3, #0
 80a6d62:	aa05      	add	r2, sp, #20
 80a6d64:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80a6d68:	9201      	str	r2, [sp, #4]
 80a6d6a:	aa06      	add	r2, sp, #24
 80a6d6c:	9200      	str	r2, [sp, #0]
 80a6d6e:	4629      	mov	r1, r5
 80a6d70:	4632      	mov	r2, r6
 80a6d72:	6960      	ldr	r0, [r4, #20]
 80a6d74:	f7fe fb3e 	bl	80a53f4 <socket_receivefrom_ex>
        if (ret >= 0)
 80a6d78:	1e06      	subs	r6, r0, #0
 80a6d7a:	dbe3      	blt.n	80a6d44 <_ZN3UDP13receivePacketEPhjm+0x20>
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a6d7c:	f89d 201a 	ldrb.w	r2, [sp, #26]
 80a6d80:	f89d 301b 	ldrb.w	r3, [sp, #27]
        return *this = IPAddress(address);
 80a6d84:	a907      	add	r1, sp, #28
 80a6d86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a6d8a:	86a3      	strh	r3, [r4, #52]	; 0x34
 80a6d8c:	a80a      	add	r0, sp, #40	; 0x28
class IPAddress : public Printable {
 80a6d8e:	3420      	adds	r4, #32
 80a6d90:	ad0b      	add	r5, sp, #44	; 0x2c
        return *this = IPAddress(address);
 80a6d92:	f7ff f869 	bl	80a5e68 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 80a6d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a6d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a6d9a:	682b      	ldr	r3, [r5, #0]
 80a6d9c:	7023      	strb	r3, [r4, #0]
    return ret;
 80a6d9e:	e7d1      	b.n	80a6d44 <_ZN3UDP13receivePacketEPhjm+0x20>

080a6da0 <_ZN3UDP11beginPacketEPKct>:
{
 80a6da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6da4:	4606      	mov	r6, r0
 80a6da6:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a6da8:	6c40      	ldr	r0, [r0, #68]	; 0x44
{
 80a6daa:	460d      	mov	r5, r1
 80a6dac:	4617      	mov	r7, r2
    if(Network.from(_nif).ready())
 80a6dae:	f7ff f8d5 	bl	80a5f5c <_ZN5spark12NetworkClass4fromEm>
 80a6db2:	6803      	ldr	r3, [r0, #0]
 80a6db4:	68db      	ldr	r3, [r3, #12]
 80a6db6:	4798      	blx	r3
 80a6db8:	b1f0      	cbz	r0, 80a6df8 <_ZN3UDP11beginPacketEPKct+0x58>
        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a6dba:	4628      	mov	r0, r5
 80a6dbc:	f005 fb4f 	bl	80ac45e <strlen>
 80a6dc0:	2400      	movs	r4, #0
 80a6dc2:	b281      	uxth	r1, r0
 80a6dc4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a6dc6:	4628      	mov	r0, r5
 80a6dc8:	9400      	str	r4, [sp, #0]
 80a6dca:	aa03      	add	r2, sp, #12
 80a6dcc:	f7fe fba2 	bl	80a5514 <inet_gethostbyname>
 80a6dd0:	b9a8      	cbnz	r0, 80a6dfe <_ZN3UDP11beginPacketEPKct+0x5e>
            IPAddress remote_addr(ip_addr);
 80a6dd2:	a903      	add	r1, sp, #12
 80a6dd4:	a808      	add	r0, sp, #32
 80a6dd6:	f7ff f813 	bl	80a5e00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a6dda:	6833      	ldr	r3, [r6, #0]
 80a6ddc:	ac0f      	add	r4, sp, #60	; 0x3c
 80a6dde:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
 80a6de2:	4b08      	ldr	r3, [pc, #32]	; (80a6e04 <_ZN3UDP11beginPacketEPKct+0x64>)
 80a6de4:	ad09      	add	r5, sp, #36	; 0x24
 80a6de6:	930e      	str	r3, [sp, #56]	; 0x38
 80a6de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a6dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a6dec:	682b      	ldr	r3, [r5, #0]
 80a6dee:	463a      	mov	r2, r7
 80a6df0:	4630      	mov	r0, r6
 80a6df2:	7023      	strb	r3, [r4, #0]
 80a6df4:	a90e      	add	r1, sp, #56	; 0x38
 80a6df6:	47c0      	blx	r8
}
 80a6df8:	b014      	add	sp, #80	; 0x50
 80a6dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 0;
 80a6dfe:	4620      	mov	r0, r4
 80a6e00:	e7fa      	b.n	80a6df8 <_ZN3UDP11beginPacketEPKct+0x58>
 80a6e02:	bf00      	nop
 80a6e04:	080ad3a0 	.word	0x080ad3a0

080a6e08 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
 80a6e08:	b570      	push	{r4, r5, r6, lr}
 80a6e0a:	4604      	mov	r4, r0
 80a6e0c:	4606      	mov	r6, r0
 80a6e0e:	4b05      	ldr	r3, [pc, #20]	; (80a6e24 <_ZN3UDP8remoteIPEv+0x1c>)
 80a6e10:	f101 0520 	add.w	r5, r1, #32
 80a6e14:	f844 3b04 	str.w	r3, [r4], #4
 80a6e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a6e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a6e1c:	682b      	ldr	r3, [r5, #0]
 80a6e1e:	4630      	mov	r0, r6
 80a6e20:	7023      	strb	r3, [r4, #0]
 80a6e22:	bd70      	pop	{r4, r5, r6, pc}
 80a6e24:	080ad3a0 	.word	0x080ad3a0

080a6e28 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a6e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a6e2a:	468c      	mov	ip, r1
 80a6e2c:	4696      	mov	lr, r2
 80a6e2e:	4606      	mov	r6, r0
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a6e30:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a6e32:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a6e34:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a6e36:	4a09      	ldr	r2, [pc, #36]	; (80a6e5c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a6e38:	ad03      	add	r5, sp, #12
 80a6e3a:	1d1c      	adds	r4, r3, #4
 80a6e3c:	9202      	str	r2, [sp, #8]
 80a6e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a6e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a6e42:	6823      	ldr	r3, [r4, #0]
 80a6e44:	4672      	mov	r2, lr
 80a6e46:	702b      	strb	r3, [r5, #0]
 80a6e48:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a6e4c:	4661      	mov	r1, ip
 80a6e4e:	9300      	str	r3, [sp, #0]
 80a6e50:	4630      	mov	r0, r6
 80a6e52:	ab02      	add	r3, sp, #8
 80a6e54:	47b8      	blx	r7
    }
 80a6e56:	b009      	add	sp, #36	; 0x24
 80a6e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a6e5a:	bf00      	nop
 80a6e5c:	080ad3a0 	.word	0x080ad3a0

080a6e60 <_ZN3UDP9endPacketEv>:
{
 80a6e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a6e62:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a6e64:	6803      	ldr	r3, [r0, #0]
{
 80a6e66:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a6e68:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a6e6a:	4b0c      	ldr	r3, [pc, #48]	; (80a6e9c <_ZN3UDP9endPacketEv+0x3c>)
 80a6e6c:	ad03      	add	r5, sp, #12
 80a6e6e:	f100 0620 	add.w	r6, r0, #32
 80a6e72:	9302      	str	r3, [sp, #8]
 80a6e74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a6e76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a6e78:	6833      	ldr	r3, [r6, #0]
 80a6e7a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80a6e7c:	702b      	strb	r3, [r5, #0]
 80a6e7e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a6e80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a6e82:	9300      	str	r3, [sp, #0]
 80a6e84:	4620      	mov	r0, r4
 80a6e86:	ab02      	add	r3, sp, #8
 80a6e88:	47b8      	blx	r7
 80a6e8a:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a6e8c:	6823      	ldr	r3, [r4, #0]
 80a6e8e:	4620      	mov	r0, r4
 80a6e90:	69db      	ldr	r3, [r3, #28]
 80a6e92:	4798      	blx	r3
}
 80a6e94:	4628      	mov	r0, r5
 80a6e96:	b009      	add	sp, #36	; 0x24
 80a6e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a6e9a:	bf00      	nop
 80a6e9c:	080ad3a0 	.word	0x080ad3a0

080a6ea0 <_ZN3UDPC1Ev>:
UDP::UDP() :
 80a6ea0:	b538      	push	{r3, r4, r5, lr}
    Stream() {_timeout=1000;}
 80a6ea2:	2500      	movs	r5, #0
 80a6ea4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a6ea8:	e9c0 5301 	strd	r5, r3, [r0, #4]
        _buffer_allocated(false)
 80a6eac:	4b0c      	ldr	r3, [pc, #48]	; (80a6ee0 <_ZN3UDPC1Ev+0x40>)
UDP::UDP() :
 80a6eae:	4604      	mov	r4, r0
        _buffer_allocated(false)
 80a6eb0:	f103 0208 	add.w	r2, r3, #8
 80a6eb4:	336c      	adds	r3, #108	; 0x6c
 80a6eb6:	6002      	str	r2, [r0, #0]
 80a6eb8:	6103      	str	r3, [r0, #16]
        _sock(socket_handle_invalid()),
 80a6eba:	f7fe fa7b 	bl	80a53b4 <socket_handle_invalid>
        _buffer_allocated(false)
 80a6ebe:	6160      	str	r0, [r4, #20]
 80a6ec0:	f104 001c 	add.w	r0, r4, #28
 80a6ec4:	f7fe ff8e 	bl	80a5de4 <_ZN9IPAddressC1Ev>
 80a6ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
}
 80a6ecc:	4620      	mov	r0, r4
        _buffer_allocated(false)
 80a6ece:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
 80a6ed2:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a6ed4:	8725      	strh	r5, [r4, #56]	; 0x38
 80a6ed6:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a6ed8:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
 80a6edc:	bd38      	pop	{r3, r4, r5, pc}
 80a6ede:	bf00      	nop
 80a6ee0:	080ad52c 	.word	0x080ad52c

080a6ee4 <_ZN3UDP13releaseBufferEv>:
{
 80a6ee4:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a6ee6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 80a6eea:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a6eec:	b123      	cbz	r3, 80a6ef8 <_ZN3UDP13releaseBufferEv+0x14>
 80a6eee:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a6ef0:	b110      	cbz	r0, 80a6ef8 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
 80a6ef2:	2101      	movs	r1, #1
 80a6ef4:	f000 fc15 	bl	80a7722 <_ZdlPvj>
    _buffer = NULL;
 80a6ef8:	2300      	movs	r3, #0
 80a6efa:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a6efc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a6f00:	6423      	str	r3, [r4, #64]	; 0x40
  _offset = 0;
 80a6f02:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a6f04:	8723      	strh	r3, [r4, #56]	; 0x38
}
 80a6f06:	bd10      	pop	{r4, pc}

080a6f08 <_ZN3UDP9setBufferEjPh>:
{
 80a6f08:	b570      	push	{r4, r5, r6, lr}
 80a6f0a:	4604      	mov	r4, r0
 80a6f0c:	4616      	mov	r6, r2
 80a6f0e:	460d      	mov	r5, r1
    releaseBuffer();
 80a6f10:	f7ff ffe8 	bl	80a6ee4 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
 80a6f14:	2300      	movs	r3, #0
    _buffer = buffer;
 80a6f16:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a6f18:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a6f1a:	b12e      	cbz	r6, 80a6f28 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
 80a6f1c:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
 80a6f1e:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a6f20:	3800      	subs	r0, #0
 80a6f22:	bf18      	it	ne
 80a6f24:	2001      	movne	r0, #1
 80a6f26:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
 80a6f28:	2d00      	cmp	r5, #0
 80a6f2a:	d0f8      	beq.n	80a6f1e <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
 80a6f2c:	4628      	mov	r0, r5
 80a6f2e:	f7f9 f8b6 	bl	80a009e <_Znaj>
        _buffer_allocated = true;
 80a6f32:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
 80a6f34:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a6f36:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
 80a6f3a:	2800      	cmp	r0, #0
 80a6f3c:	d0ef      	beq.n	80a6f1e <_ZN3UDP9setBufferEjPh+0x16>
 80a6f3e:	e7ed      	b.n	80a6f1c <_ZN3UDP9setBufferEjPh+0x14>

080a6f40 <_ZN3UDP11beginPacketE9IPAddresst>:
{
 80a6f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a6f42:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
 80a6f44:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
{
 80a6f46:	4605      	mov	r5, r0
 80a6f48:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
 80a6f4a:	b91a      	cbnz	r2, 80a6f54 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a6f4c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a6f4e:	b109      	cbz	r1, 80a6f54 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a6f50:	f7ff ffda 	bl	80a6f08 <_ZN3UDP9setBufferEjPh>
 80a6f54:	f105 0620 	add.w	r6, r5, #32
 80a6f58:	3404      	adds	r4, #4
 80a6f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a6f5c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a6f5e:	6823      	ldr	r3, [r4, #0]
 80a6f60:	7033      	strb	r3, [r6, #0]
  _offset = 0;
 80a6f62:	2300      	movs	r3, #0
}
 80a6f64:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
 80a6f66:	86af      	strh	r7, [r5, #52]	; 0x34
  _offset = 0;
 80a6f68:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a6f6a:	872b      	strh	r3, [r5, #56]	; 0x38
}
 80a6f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a6f6e <_ZN3UDP11parsePacketEm>:
{
 80a6f6e:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
 80a6f70:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
{
 80a6f72:	4604      	mov	r4, r0
 80a6f74:	460d      	mov	r5, r1
    if (!_buffer && _buffer_size) {
 80a6f76:	b91a      	cbnz	r2, 80a6f80 <_ZN3UDP11parsePacketEm+0x12>
 80a6f78:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a6f7a:	b109      	cbz	r1, 80a6f80 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
 80a6f7c:	f7ff ffc4 	bl	80a6f08 <_ZN3UDP9setBufferEjPh>
  _offset = 0;
 80a6f80:	2300      	movs	r3, #0
    if (_buffer && _buffer_size) {
 80a6f82:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  _offset = 0;
 80a6f84:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a6f86:	8723      	strh	r3, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
 80a6f88:	b149      	cbz	r1, 80a6f9e <_ZN3UDP11parsePacketEm+0x30>
 80a6f8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a6f8c:	b13a      	cbz	r2, 80a6f9e <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
 80a6f8e:	6823      	ldr	r3, [r4, #0]
 80a6f90:	4620      	mov	r0, r4
 80a6f92:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80a6f94:	462b      	mov	r3, r5
 80a6f96:	47b0      	blx	r6
        if (result>0) {
 80a6f98:	2800      	cmp	r0, #0
            _total = result;
 80a6f9a:	bfc8      	it	gt
 80a6f9c:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
 80a6f9e:	6823      	ldr	r3, [r4, #0]
 80a6fa0:	4620      	mov	r0, r4
}
 80a6fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return available();
 80a6fa6:	691b      	ldr	r3, [r3, #16]
 80a6fa8:	4718      	bx	r3
	...

080a6fac <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
 80a6fac:	b510      	push	{r4, lr}
 80a6fae:	4604      	mov	r4, r0
 80a6fb0:	4b06      	ldr	r3, [pc, #24]	; (80a6fcc <_ZN3UDPD1Ev+0x20>)
 80a6fb2:	f103 0208 	add.w	r2, r3, #8
 80a6fb6:	336c      	adds	r3, #108	; 0x6c
 80a6fb8:	6002      	str	r2, [r0, #0]
 80a6fba:	6103      	str	r3, [r0, #16]
 80a6fbc:	f7ff fe4e 	bl	80a6c5c <_ZN3UDP4stopEv>
 80a6fc0:	4620      	mov	r0, r4
 80a6fc2:	f7ff ff8f 	bl	80a6ee4 <_ZN3UDP13releaseBufferEv>
 80a6fc6:	4620      	mov	r0, r4
 80a6fc8:	bd10      	pop	{r4, pc}
 80a6fca:	bf00      	nop
 80a6fcc:	080ad52c 	.word	0x080ad52c

080a6fd0 <_ZN3UDPD0Ev>:
 80a6fd0:	b510      	push	{r4, lr}
 80a6fd2:	4604      	mov	r4, r0
 80a6fd4:	f7ff ffea 	bl	80a6fac <_ZN3UDPD1Ev>
 80a6fd8:	4620      	mov	r0, r4
 80a6fda:	214c      	movs	r1, #76	; 0x4c
 80a6fdc:	f000 fba1 	bl	80a7722 <_ZdlPvj>
 80a6fe0:	4620      	mov	r0, r4
 80a6fe2:	bd10      	pop	{r4, pc}

080a6fe4 <_ZN3UDP13joinMulticastERK9IPAddress>:

int UDP::joinMulticast(const IPAddress& ip)
{
 80a6fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a6fe6:	b089      	sub	sp, #36	; 0x24
    if (_sock == socket_handle_invalid())
 80a6fe8:	6946      	ldr	r6, [r0, #20]
{
 80a6fea:	4605      	mov	r5, r0
 80a6fec:	460c      	mov	r4, r1
    if (_sock == socket_handle_invalid())
 80a6fee:	f7fe f9e1 	bl	80a53b4 <socket_handle_invalid>
 80a6ff2:	4286      	cmp	r6, r0
 80a6ff4:	d01a      	beq.n	80a702c <_ZN3UDP13joinMulticastERK9IPAddress+0x48>
        return -1;
    HAL_IPAddress address = ip.raw();
 80a6ff6:	aa03      	add	r2, sp, #12
 80a6ff8:	4617      	mov	r7, r2
 80a6ffa:	1d23      	adds	r3, r4, #4
 80a6ffc:	3414      	adds	r4, #20
 80a6ffe:	4616      	mov	r6, r2
 80a7000:	6818      	ldr	r0, [r3, #0]
 80a7002:	6859      	ldr	r1, [r3, #4]
 80a7004:	3308      	adds	r3, #8
 80a7006:	c603      	stmia	r6!, {r0, r1}
 80a7008:	42a3      	cmp	r3, r4
 80a700a:	4632      	mov	r2, r6
 80a700c:	d1f7      	bne.n	80a6ffe <_ZN3UDP13joinMulticastERK9IPAddress+0x1a>
 80a700e:	781b      	ldrb	r3, [r3, #0]
    socket_multicast_info_t info;
    info.size = sizeof(info);
    info.sock_handle = _sock;
    return socket_join_multicast(&address, _nif, &info);
 80a7010:	4638      	mov	r0, r7
    HAL_IPAddress address = ip.raw();
 80a7012:	7033      	strb	r3, [r6, #0]
    info.size = sizeof(info);
 80a7014:	2306      	movs	r3, #6
 80a7016:	f8ad 3004 	strh.w	r3, [sp, #4]
    info.sock_handle = _sock;
 80a701a:	696b      	ldr	r3, [r5, #20]
    return socket_join_multicast(&address, _nif, &info);
 80a701c:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80a701e:	aa01      	add	r2, sp, #4
    info.sock_handle = _sock;
 80a7020:	f8cd 3006 	str.w	r3, [sp, #6]
    return socket_join_multicast(&address, _nif, &info);
 80a7024:	f7fe f9ce 	bl	80a53c4 <socket_join_multicast>
}
 80a7028:	b009      	add	sp, #36	; 0x24
 80a702a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 80a702c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a7030:	e7fa      	b.n	80a7028 <_ZN3UDP13joinMulticastERK9IPAddress+0x44>

080a7032 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a7032:	4770      	bx	lr

080a7034 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a7034:	7441      	strb	r1, [r0, #17]
}
 80a7036:	4770      	bx	lr

080a7038 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a7038:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a703a:	7c00      	ldrb	r0, [r0, #16]
 80a703c:	f7fe fa2a 	bl	80a5494 <hal_usart_available_data_for_write>
}
 80a7040:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a7044:	bd08      	pop	{r3, pc}

080a7046 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a7046:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a7048:	7c00      	ldrb	r0, [r0, #16]
 80a704a:	f7fe f9fb 	bl	80a5444 <hal_usart_available>
}
 80a704e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a7052:	bd08      	pop	{r3, pc}

080a7054 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a7054:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a7056:	7c00      	ldrb	r0, [r0, #16]
 80a7058:	f7fe fa04 	bl	80a5464 <hal_usart_peek>
}
 80a705c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a7060:	bd08      	pop	{r3, pc}

080a7062 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a7062:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a7064:	7c00      	ldrb	r0, [r0, #16]
 80a7066:	f7fe f9f5 	bl	80a5454 <hal_usart_read>
}
 80a706a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a706e:	bd08      	pop	{r3, pc}

080a7070 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a7070:	7c00      	ldrb	r0, [r0, #16]
 80a7072:	f7fe b9ff 	b.w	80a5474 <hal_usart_flush>

080a7076 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a7076:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a7078:	7c46      	ldrb	r6, [r0, #17]
{
 80a707a:	4604      	mov	r4, r0
 80a707c:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a707e:	b12e      	cbz	r6, 80a708c <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a7080:	4629      	mov	r1, r5
 80a7082:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a7084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a7088:	f7fe b9d4 	b.w	80a5434 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a708c:	7c00      	ldrb	r0, [r0, #16]
 80a708e:	f7fe fa01 	bl	80a5494 <hal_usart_available_data_for_write>
 80a7092:	2800      	cmp	r0, #0
 80a7094:	dcf4      	bgt.n	80a7080 <_ZN11USARTSerial5writeEh+0xa>
}
 80a7096:	4630      	mov	r0, r6
 80a7098:	bd70      	pop	{r4, r5, r6, pc}

080a709a <_ZN11USARTSerialD0Ev>:
 80a709a:	b510      	push	{r4, lr}
 80a709c:	4604      	mov	r4, r0
 80a709e:	2114      	movs	r1, #20
 80a70a0:	f000 fb3f 	bl	80a7722 <_ZdlPvj>
 80a70a4:	4620      	mov	r0, r4
 80a70a6:	bd10      	pop	{r4, pc}

080a70a8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a70a8:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a70ac:	b510      	push	{r4, lr}
 80a70ae:	4604      	mov	r4, r0
 80a70b0:	4608      	mov	r0, r1
 80a70b2:	4611      	mov	r1, r2
 80a70b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a70b8:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a70bc:	4a04      	ldr	r2, [pc, #16]	; (80a70d0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a70be:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a70c0:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a70c2:	2201      	movs	r2, #1
 80a70c4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a70c6:	461a      	mov	r2, r3
 80a70c8:	f7fe f9ac 	bl	80a5424 <hal_usart_init>
}
 80a70cc:	4620      	mov	r0, r4
 80a70ce:	bd10      	pop	{r4, pc}
 80a70d0:	080ad5a4 	.word	0x080ad5a4

080a70d4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a70d4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a70d6:	4d0d      	ldr	r5, [pc, #52]	; (80a710c <_Z22__fetch_global_Serial1v+0x38>)
 80a70d8:	7829      	ldrb	r1, [r5, #0]
 80a70da:	f3bf 8f5b 	dmb	ish
 80a70de:	f011 0401 	ands.w	r4, r1, #1
 80a70e2:	d111      	bne.n	80a7108 <_Z22__fetch_global_Serial1v+0x34>
 80a70e4:	4628      	mov	r0, r5
 80a70e6:	f7f8 ffe9 	bl	80a00bc <__cxa_guard_acquire>
 80a70ea:	b168      	cbz	r0, 80a7108 <_Z22__fetch_global_Serial1v+0x34>
 80a70ec:	4621      	mov	r1, r4
 80a70ee:	4a08      	ldr	r2, [pc, #32]	; (80a7110 <_Z22__fetch_global_Serial1v+0x3c>)
 80a70f0:	4b08      	ldr	r3, [pc, #32]	; (80a7114 <_Z22__fetch_global_Serial1v+0x40>)
 80a70f2:	4809      	ldr	r0, [pc, #36]	; (80a7118 <_Z22__fetch_global_Serial1v+0x44>)
 80a70f4:	f7ff ffd8 	bl	80a70a8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a70f8:	4628      	mov	r0, r5
 80a70fa:	f7f8 ffe4 	bl	80a00c6 <__cxa_guard_release>
 80a70fe:	4a07      	ldr	r2, [pc, #28]	; (80a711c <_Z22__fetch_global_Serial1v+0x48>)
 80a7100:	4907      	ldr	r1, [pc, #28]	; (80a7120 <_Z22__fetch_global_Serial1v+0x4c>)
 80a7102:	4805      	ldr	r0, [pc, #20]	; (80a7118 <_Z22__fetch_global_Serial1v+0x44>)
 80a7104:	f000 fb08 	bl	80a7718 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a7108:	4803      	ldr	r0, [pc, #12]	; (80a7118 <_Z22__fetch_global_Serial1v+0x44>)
 80a710a:	bd38      	pop	{r3, r4, r5, pc}
 80a710c:	2000107c 	.word	0x2000107c
 80a7110:	20001080 	.word	0x20001080
 80a7114:	20001104 	.word	0x20001104
 80a7118:	20001188 	.word	0x20001188
 80a711c:	2000006c 	.word	0x2000006c
 80a7120:	080a7033 	.word	0x080a7033

080a7124 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a7124:	7441      	strb	r1, [r0, #17]
}
 80a7126:	4770      	bx	lr

080a7128 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a7128:	4770      	bx	lr

080a712a <_ZN9USBSerial4readEv>:
{
 80a712a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a712c:	2100      	movs	r1, #0
 80a712e:	7c00      	ldrb	r0, [r0, #16]
 80a7130:	f7fe f9d0 	bl	80a54d4 <HAL_USB_USART_Receive_Data>
}
 80a7134:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a7138:	bd08      	pop	{r3, pc}

080a713a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a713a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a713c:	2101      	movs	r1, #1
 80a713e:	7c00      	ldrb	r0, [r0, #16]
 80a7140:	f7fe f9c8 	bl	80a54d4 <HAL_USB_USART_Receive_Data>
}
 80a7144:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a7148:	bd08      	pop	{r3, pc}

080a714a <_ZN9USBSerial17availableForWriteEv>:
{
 80a714a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a714c:	7c00      	ldrb	r0, [r0, #16]
 80a714e:	f7fe f9b9 	bl	80a54c4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a7152:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a7156:	bd08      	pop	{r3, pc}

080a7158 <_ZN9USBSerial9availableEv>:
{
 80a7158:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a715a:	7c00      	ldrb	r0, [r0, #16]
 80a715c:	f7fe f9aa 	bl	80a54b4 <HAL_USB_USART_Available_Data>
}
 80a7160:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a7164:	bd08      	pop	{r3, pc}

080a7166 <_ZN9USBSerial5writeEh>:
{
 80a7166:	b538      	push	{r3, r4, r5, lr}
 80a7168:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a716a:	7c00      	ldrb	r0, [r0, #16]
{
 80a716c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a716e:	f7fe f9a9 	bl	80a54c4 <HAL_USB_USART_Available_Data_For_Write>
 80a7172:	2800      	cmp	r0, #0
 80a7174:	dc01      	bgt.n	80a717a <_ZN9USBSerial5writeEh+0x14>
 80a7176:	7c60      	ldrb	r0, [r4, #17]
 80a7178:	b128      	cbz	r0, 80a7186 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a717a:	4629      	mov	r1, r5
 80a717c:	7c20      	ldrb	r0, [r4, #16]
 80a717e:	f7fe f9b1 	bl	80a54e4 <HAL_USB_USART_Send_Data>
 80a7182:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a7186:	bd38      	pop	{r3, r4, r5, pc}

080a7188 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a7188:	7c00      	ldrb	r0, [r0, #16]
 80a718a:	f7fe b9b3 	b.w	80a54f4 <HAL_USB_USART_Flush_Data>

080a718e <_ZN9USBSerialD0Ev>:
 80a718e:	b510      	push	{r4, lr}
 80a7190:	4604      	mov	r4, r0
 80a7192:	2114      	movs	r1, #20
 80a7194:	f000 fac5 	bl	80a7722 <_ZdlPvj>
 80a7198:	4620      	mov	r0, r4
 80a719a:	bd10      	pop	{r4, pc}

080a719c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a719c:	b510      	push	{r4, lr}
 80a719e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a71a2:	4604      	mov	r4, r0
 80a71a4:	4608      	mov	r0, r1
 80a71a6:	2100      	movs	r1, #0
 80a71a8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a71ac:	4b04      	ldr	r3, [pc, #16]	; (80a71c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a71ae:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a71b0:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a71b2:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a71b4:	4611      	mov	r1, r2
  _blocking = true;
 80a71b6:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a71b8:	f7fe f974 	bl	80a54a4 <HAL_USB_USART_Init>
}
 80a71bc:	4620      	mov	r0, r4
 80a71be:	bd10      	pop	{r4, pc}
 80a71c0:	080ad5d4 	.word	0x080ad5d4

080a71c4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a71c4:	b510      	push	{r4, lr}
 80a71c6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a71c8:	2214      	movs	r2, #20
 80a71ca:	2100      	movs	r1, #0
 80a71cc:	f005 f8ac 	bl	80ac328 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a71d0:	4b05      	ldr	r3, [pc, #20]	; (80a71e8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a71d2:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a71d4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a71d6:	4b05      	ldr	r3, [pc, #20]	; (80a71ec <_Z19acquireSerialBufferv+0x28>)
 80a71d8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a71da:	f240 1301 	movw	r3, #257	; 0x101
 80a71de:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a71e0:	2381      	movs	r3, #129	; 0x81
 80a71e2:	8223      	strh	r3, [r4, #16]
}
 80a71e4:	bd10      	pop	{r4, pc}
 80a71e6:	bf00      	nop
 80a71e8:	200011cc 	.word	0x200011cc
 80a71ec:	200012cd 	.word	0x200012cd

080a71f0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a71f0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a71f2:	4d0f      	ldr	r5, [pc, #60]	; (80a7230 <_Z16_fetch_usbserialv+0x40>)
{
 80a71f4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a71f6:	a801      	add	r0, sp, #4
 80a71f8:	f7ff ffe4 	bl	80a71c4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a71fc:	7829      	ldrb	r1, [r5, #0]
 80a71fe:	f3bf 8f5b 	dmb	ish
 80a7202:	f011 0401 	ands.w	r4, r1, #1
 80a7206:	d110      	bne.n	80a722a <_Z16_fetch_usbserialv+0x3a>
 80a7208:	4628      	mov	r0, r5
 80a720a:	f7f8 ff57 	bl	80a00bc <__cxa_guard_acquire>
 80a720e:	b160      	cbz	r0, 80a722a <_Z16_fetch_usbserialv+0x3a>
 80a7210:	4621      	mov	r1, r4
 80a7212:	aa01      	add	r2, sp, #4
 80a7214:	4807      	ldr	r0, [pc, #28]	; (80a7234 <_Z16_fetch_usbserialv+0x44>)
 80a7216:	f7ff ffc1 	bl	80a719c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a721a:	4628      	mov	r0, r5
 80a721c:	f7f8 ff53 	bl	80a00c6 <__cxa_guard_release>
 80a7220:	4a05      	ldr	r2, [pc, #20]	; (80a7238 <_Z16_fetch_usbserialv+0x48>)
 80a7222:	4906      	ldr	r1, [pc, #24]	; (80a723c <_Z16_fetch_usbserialv+0x4c>)
 80a7224:	4803      	ldr	r0, [pc, #12]	; (80a7234 <_Z16_fetch_usbserialv+0x44>)
 80a7226:	f000 fa77 	bl	80a7718 <__aeabi_atexit>
	return _usbserial;
}
 80a722a:	4802      	ldr	r0, [pc, #8]	; (80a7234 <_Z16_fetch_usbserialv+0x44>)
 80a722c:	b007      	add	sp, #28
 80a722e:	bd30      	pop	{r4, r5, pc}
 80a7230:	2000119c 	.word	0x2000119c
 80a7234:	200011a4 	.word	0x200011a4
 80a7238:	2000006c 	.word	0x2000006c
 80a723c:	080a7129 	.word	0x080a7129

080a7240 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a7240:	b510      	push	{r4, lr}
 80a7242:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a7244:	2214      	movs	r2, #20
 80a7246:	2100      	movs	r1, #0
 80a7248:	f005 f86e 	bl	80ac328 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a724c:	4b05      	ldr	r3, [pc, #20]	; (80a7264 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a724e:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a7250:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a7252:	4b05      	ldr	r3, [pc, #20]	; (80a7268 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a7254:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a7256:	f240 1301 	movw	r3, #257	; 0x101
 80a725a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a725c:	2381      	movs	r3, #129	; 0x81
 80a725e:	8223      	strh	r3, [r4, #16]
}
 80a7260:	bd10      	pop	{r4, pc}
 80a7262:	bf00      	nop
 80a7264:	2000134e 	.word	0x2000134e
 80a7268:	2000144f 	.word	0x2000144f

080a726c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a726c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a726e:	4c0f      	ldr	r4, [pc, #60]	; (80a72ac <_Z17_fetch_usbserial1v+0x40>)
{
 80a7270:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a7272:	a801      	add	r0, sp, #4
 80a7274:	f7ff ffe4 	bl	80a7240 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a7278:	7823      	ldrb	r3, [r4, #0]
 80a727a:	f3bf 8f5b 	dmb	ish
 80a727e:	07db      	lsls	r3, r3, #31
 80a7280:	d410      	bmi.n	80a72a4 <_Z17_fetch_usbserial1v+0x38>
 80a7282:	4620      	mov	r0, r4
 80a7284:	f7f8 ff1a 	bl	80a00bc <__cxa_guard_acquire>
 80a7288:	b160      	cbz	r0, 80a72a4 <_Z17_fetch_usbserial1v+0x38>
 80a728a:	2101      	movs	r1, #1
 80a728c:	aa01      	add	r2, sp, #4
 80a728e:	4808      	ldr	r0, [pc, #32]	; (80a72b0 <_Z17_fetch_usbserial1v+0x44>)
 80a7290:	f7ff ff84 	bl	80a719c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a7294:	4620      	mov	r0, r4
 80a7296:	f7f8 ff16 	bl	80a00c6 <__cxa_guard_release>
 80a729a:	4a06      	ldr	r2, [pc, #24]	; (80a72b4 <_Z17_fetch_usbserial1v+0x48>)
 80a729c:	4906      	ldr	r1, [pc, #24]	; (80a72b8 <_Z17_fetch_usbserial1v+0x4c>)
 80a729e:	4804      	ldr	r0, [pc, #16]	; (80a72b0 <_Z17_fetch_usbserial1v+0x44>)
 80a72a0:	f000 fa3a 	bl	80a7718 <__aeabi_atexit>
  return _usbserial1;
}
 80a72a4:	4802      	ldr	r0, [pc, #8]	; (80a72b0 <_Z17_fetch_usbserial1v+0x44>)
 80a72a6:	b006      	add	sp, #24
 80a72a8:	bd10      	pop	{r4, pc}
 80a72aa:	bf00      	nop
 80a72ac:	200011a0 	.word	0x200011a0
 80a72b0:	200011b8 	.word	0x200011b8
 80a72b4:	2000006c 	.word	0x2000006c
 80a72b8:	080a7129 	.word	0x080a7129

080a72bc <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a72bc:	2200      	movs	r2, #0
 80a72be:	6840      	ldr	r0, [r0, #4]
 80a72c0:	4611      	mov	r1, r2
 80a72c2:	f7fe b9d3 	b.w	80a566c <network_ready>

080a72c6 <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a72c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a72c8:	4615      	mov	r5, r2
 80a72ca:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a72cc:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a72ce:	460e      	mov	r6, r1
 80a72d0:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a72d2:	2100      	movs	r1, #0
 80a72d4:	a803      	add	r0, sp, #12
 80a72d6:	f005 f827 	bl	80ac328 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a72da:	4628      	mov	r0, r5
 80a72dc:	f005 f8bf 	bl	80ac45e <strlen>
 80a72e0:	2700      	movs	r7, #0
 80a72e2:	b281      	uxth	r1, r0
 80a72e4:	6873      	ldr	r3, [r6, #4]
 80a72e6:	4628      	mov	r0, r5
 80a72e8:	9700      	str	r7, [sp, #0]
 80a72ea:	aa03      	add	r2, sp, #12
 80a72ec:	f7fe f912 	bl	80a5514 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a72f0:	b130      	cbz	r0, 80a7300 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a72f2:	4639      	mov	r1, r7
 80a72f4:	4620      	mov	r0, r4
 80a72f6:	f7fe fd95 	bl	80a5e24 <_ZN9IPAddressC1Em>
    }
 80a72fa:	4620      	mov	r0, r4
 80a72fc:	b009      	add	sp, #36	; 0x24
 80a72fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a7300:	4620      	mov	r0, r4
 80a7302:	a903      	add	r1, sp, #12
 80a7304:	f7fe fd7c 	bl	80a5e00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a7308:	e7f7      	b.n	80a72fa <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a730a <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a730a:	2200      	movs	r2, #0
 80a730c:	6840      	ldr	r0, [r0, #4]
 80a730e:	4611      	mov	r1, r2
 80a7310:	f7fe b9cc 	b.w	80a56ac <network_listening>

080a7314 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a7314:	2200      	movs	r2, #0
 80a7316:	6840      	ldr	r0, [r0, #4]
 80a7318:	4611      	mov	r1, r2
 80a731a:	f7fe b9d7 	b.w	80a56cc <network_get_listen_timeout>

080a731e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a731e:	2200      	movs	r2, #0
 80a7320:	6840      	ldr	r0, [r0, #4]
 80a7322:	f7fe b9cb 	b.w	80a56bc <network_set_listen_timeout>

080a7326 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a7326:	2200      	movs	r2, #0
 80a7328:	6840      	ldr	r0, [r0, #4]
 80a732a:	f081 0101 	eor.w	r1, r1, #1
 80a732e:	f7fe b9b5 	b.w	80a569c <network_listen>

080a7332 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a7332:	2300      	movs	r3, #0
 80a7334:	6840      	ldr	r0, [r0, #4]
 80a7336:	461a      	mov	r2, r3
 80a7338:	4619      	mov	r1, r3
 80a733a:	f7fe b9a7 	b.w	80a568c <network_off>

080a733e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a733e:	2300      	movs	r3, #0
 80a7340:	6840      	ldr	r0, [r0, #4]
 80a7342:	461a      	mov	r2, r3
 80a7344:	4619      	mov	r1, r3
 80a7346:	f7fe b999 	b.w	80a567c <network_on>

080a734a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a734a:	2200      	movs	r2, #0
 80a734c:	6840      	ldr	r0, [r0, #4]
 80a734e:	4611      	mov	r1, r2
 80a7350:	f7fe b97c 	b.w	80a564c <network_connecting>

080a7354 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a7354:	2200      	movs	r2, #0
 80a7356:	2102      	movs	r1, #2
 80a7358:	6840      	ldr	r0, [r0, #4]
 80a735a:	f7fe b97f 	b.w	80a565c <network_disconnect>

080a735e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a735e:	2300      	movs	r3, #0
 80a7360:	6840      	ldr	r0, [r0, #4]
 80a7362:	461a      	mov	r2, r3
 80a7364:	f7fe b96a 	b.w	80a563c <network_connect>

080a7368 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a7368:	2204      	movs	r2, #4
 80a736a:	4b02      	ldr	r3, [pc, #8]	; (80a7374 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a736c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a736e:	4a02      	ldr	r2, [pc, #8]	; (80a7378 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a7370:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a7372:	4770      	bx	lr
 80a7374:	200014d0 	.word	0x200014d0
 80a7378:	080ad604 	.word	0x080ad604

080a737c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a737c:	b510      	push	{r4, lr}
 80a737e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a7380:	f005 f86d 	bl	80ac45e <strlen>
 80a7384:	1e43      	subs	r3, r0, #1
 80a7386:	4620      	mov	r0, r4
 80a7388:	4423      	add	r3, r4
	while(i<j){
 80a738a:	4283      	cmp	r3, r0
 80a738c:	d906      	bls.n	80a739c <_Z11str_reversePc+0x20>
		c = *i;
 80a738e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a7390:	7819      	ldrb	r1, [r3, #0]
 80a7392:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a7396:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a739a:	e7f6      	b.n	80a738a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a739c:	bd10      	pop	{r4, pc}

080a739e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a739e:	b570      	push	{r4, r5, r6, lr}
 80a73a0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a73a2:	1e91      	subs	r1, r2, #2
 80a73a4:	2922      	cmp	r1, #34	; 0x22
 80a73a6:	d822      	bhi.n	80a73ee <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 80a73a8:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a73aa:	b168      	cbz	r0, 80a73c8 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a73ac:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a73b0:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a73b4:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a73b6:	2809      	cmp	r0, #9
                *ptr += '0';
 80a73b8:	bf94      	ite	ls
 80a73ba:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a73bc:	3157      	addhi	r1, #87	; 0x57
 80a73be:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 80a73c0:	4630      	mov	r0, r6
 80a73c2:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a73c6:	e7f0      	b.n	80a73aa <ultoa+0xc>
 80a73c8:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a73ca:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 80a73cc:	4423      	add	r3, r4
 80a73ce:	4293      	cmp	r3, r2
 80a73d0:	d902      	bls.n	80a73d8 <ultoa+0x3a>
            *ptr++ = '0';
 80a73d2:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80a73d6:	e7fa      	b.n	80a73ce <ultoa+0x30>
 80a73d8:	1b5a      	subs	r2, r3, r5
 80a73da:	42ab      	cmp	r3, r5
 80a73dc:	bf38      	it	cc
 80a73de:	2200      	movcc	r2, #0

	*ptr = '\0';
 80a73e0:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a73e2:	4620      	mov	r0, r4
	*ptr = '\0';
 80a73e4:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80a73e6:	f7ff ffc9 	bl	80a737c <_Z11str_reversePc>
	return buffer;
 80a73ea:	4620      	mov	r0, r4
}
 80a73ec:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a73ee:	2000      	movs	r0, #0
 80a73f0:	e7fc      	b.n	80a73ec <ultoa+0x4e>

080a73f2 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 80a73f2:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 80a73f4:	2301      	movs	r3, #1
 80a73f6:	f7ff ffd2 	bl	80a739e <ultoa>
}
 80a73fa:	bd08      	pop	{r3, pc}

080a73fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a73fc:	4b01      	ldr	r3, [pc, #4]	; (80a7404 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a73fe:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a7400:	4770      	bx	lr
 80a7402:	bf00      	nop
 80a7404:	20000008 	.word	0x20000008

080a7408 <serialEventRun>:
{
 80a7408:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a740a:	4b13      	ldr	r3, [pc, #76]	; (80a7458 <serialEventRun+0x50>)
 80a740c:	b143      	cbz	r3, 80a7420 <serialEventRun+0x18>
 80a740e:	f7ff feef 	bl	80a71f0 <_Z16_fetch_usbserialv>
 80a7412:	6803      	ldr	r3, [r0, #0]
 80a7414:	691b      	ldr	r3, [r3, #16]
 80a7416:	4798      	blx	r3
 80a7418:	2800      	cmp	r0, #0
 80a741a:	dd01      	ble.n	80a7420 <serialEventRun+0x18>
        serialEvent();
 80a741c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a7420:	4b0e      	ldr	r3, [pc, #56]	; (80a745c <serialEventRun+0x54>)
 80a7422:	b143      	cbz	r3, 80a7436 <serialEventRun+0x2e>
 80a7424:	f7ff fe56 	bl	80a70d4 <_Z22__fetch_global_Serial1v>
 80a7428:	6803      	ldr	r3, [r0, #0]
 80a742a:	691b      	ldr	r3, [r3, #16]
 80a742c:	4798      	blx	r3
 80a742e:	2800      	cmp	r0, #0
 80a7430:	dd01      	ble.n	80a7436 <serialEventRun+0x2e>
        serialEvent1();
 80a7432:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a7436:	4b0a      	ldr	r3, [pc, #40]	; (80a7460 <serialEventRun+0x58>)
 80a7438:	b10b      	cbz	r3, 80a743e <serialEventRun+0x36>
 80a743a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a743e:	4b09      	ldr	r3, [pc, #36]	; (80a7464 <serialEventRun+0x5c>)
 80a7440:	b143      	cbz	r3, 80a7454 <serialEventRun+0x4c>
 80a7442:	f7ff ff13 	bl	80a726c <_Z17_fetch_usbserial1v>
 80a7446:	6803      	ldr	r3, [r0, #0]
 80a7448:	691b      	ldr	r3, [r3, #16]
 80a744a:	4798      	blx	r3
 80a744c:	2800      	cmp	r0, #0
 80a744e:	dd01      	ble.n	80a7454 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a7450:	f3af 8000 	nop.w
}
 80a7454:	bd08      	pop	{r3, pc}
 80a7456:	bf00      	nop
	...

080a7468 <_post_loop>:
{
 80a7468:	b508      	push	{r3, lr}
	serialEventRun();
 80a746a:	f7ff ffcd 	bl	80a7408 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a746e:	f7fd fed7 	bl	80a5220 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a7472:	4b01      	ldr	r3, [pc, #4]	; (80a7478 <_post_loop+0x10>)
 80a7474:	6018      	str	r0, [r3, #0]
}
 80a7476:	bd08      	pop	{r3, pc}
 80a7478:	200014f0 	.word	0x200014f0

080a747c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a747c:	4802      	ldr	r0, [pc, #8]	; (80a7488 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a747e:	4a03      	ldr	r2, [pc, #12]	; (80a748c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a7480:	4903      	ldr	r1, [pc, #12]	; (80a7490 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a7482:	1a12      	subs	r2, r2, r0
 80a7484:	f004 bf28 	b.w	80ac2d8 <memcpy>
 80a7488:	40024000 	.word	0x40024000
 80a748c:	40024004 	.word	0x40024004
 80a7490:	080ade40 	.word	0x080ade40

080a7494 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a7494:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a7496:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a7498:	461a      	mov	r2, r3
 80a749a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a749e:	9300      	str	r3, [sp, #0]
 80a74a0:	f7fe f88a 	bl	80a55b8 <system_ctrl_set_result>
}
 80a74a4:	b003      	add	sp, #12
 80a74a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a74ac <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a74ac:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a74ae:	8843      	ldrh	r3, [r0, #2]
 80a74b0:	2b0a      	cmp	r3, #10
 80a74b2:	d008      	beq.n	80a74c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a74b4:	2b50      	cmp	r3, #80	; 0x50
 80a74b6:	d10b      	bne.n	80a74d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a74b8:	4b09      	ldr	r3, [pc, #36]	; (80a74e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a74ba:	681b      	ldr	r3, [r3, #0]
 80a74bc:	b14b      	cbz	r3, 80a74d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a74be:	b003      	add	sp, #12
 80a74c0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a74c4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a74c6:	f7ff ffe5 	bl	80a7494 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a74ca:	b003      	add	sp, #12
 80a74cc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a74d0:	2300      	movs	r3, #0
 80a74d2:	461a      	mov	r2, r3
 80a74d4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a74d8:	9300      	str	r3, [sp, #0]
 80a74da:	f7fe f86d 	bl	80a55b8 <system_ctrl_set_result>
}
 80a74de:	e7f4      	b.n	80a74ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a74e0:	200014dc 	.word	0x200014dc

080a74e4 <module_user_init_hook>:
{
 80a74e4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a74e6:	4c12      	ldr	r4, [pc, #72]	; (80a7530 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a74e8:	2100      	movs	r1, #0
 80a74ea:	4812      	ldr	r0, [pc, #72]	; (80a7534 <module_user_init_hook+0x50>)
 80a74ec:	f7fe f93e 	bl	80a576c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a74f0:	4d11      	ldr	r5, [pc, #68]	; (80a7538 <module_user_init_hook+0x54>)
 80a74f2:	6823      	ldr	r3, [r4, #0]
 80a74f4:	42ab      	cmp	r3, r5
 80a74f6:	bf0c      	ite	eq
 80a74f8:	2201      	moveq	r2, #1
 80a74fa:	2200      	movne	r2, #0
 80a74fc:	4b0f      	ldr	r3, [pc, #60]	; (80a753c <module_user_init_hook+0x58>)
 80a74fe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a7500:	d002      	beq.n	80a7508 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a7502:	f7ff ffbb 	bl	80a747c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a7506:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a7508:	f7fd fe72 	bl	80a51f0 <HAL_RNG_GetRandomNumber>
 80a750c:	4604      	mov	r4, r0
    srand(seed);
 80a750e:	f004 ff13 	bl	80ac338 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a7512:	4b0b      	ldr	r3, [pc, #44]	; (80a7540 <module_user_init_hook+0x5c>)
 80a7514:	b113      	cbz	r3, 80a751c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a7516:	4620      	mov	r0, r4
 80a7518:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a751c:	2100      	movs	r1, #0
 80a751e:	4808      	ldr	r0, [pc, #32]	; (80a7540 <module_user_init_hook+0x5c>)
 80a7520:	f7fe f87c 	bl	80a561c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a7524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a7528:	2100      	movs	r1, #0
 80a752a:	4806      	ldr	r0, [pc, #24]	; (80a7544 <module_user_init_hook+0x60>)
 80a752c:	f7fe b83a 	b.w	80a55a4 <system_ctrl_set_app_request_handler>
 80a7530:	40024000 	.word	0x40024000
 80a7534:	080a73fd 	.word	0x080a73fd
 80a7538:	9a271c1e 	.word	0x9a271c1e
 80a753c:	200014d8 	.word	0x200014d8
 80a7540:	00000000 	.word	0x00000000
 80a7544:	080a74ad 	.word	0x080a74ad

080a7548 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a7548:	b510      	push	{r4, lr}
 80a754a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a754c:	6880      	ldr	r0, [r0, #8]
 80a754e:	b108      	cbz	r0, 80a7554 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a7550:	f7fd fe46 	bl	80a51e0 <os_mutex_recursive_destroy>
 80a7554:	4620      	mov	r0, r4
 80a7556:	bd10      	pop	{r4, pc}

080a7558 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a7558:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a755a:	b570      	push	{r4, r5, r6, lr}
 80a755c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a755e:	d901      	bls.n	80a7564 <pinAvailable+0xc>
    return false;
 80a7560:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a7562:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a7564:	f1a0 030d 	sub.w	r3, r0, #13
 80a7568:	2b02      	cmp	r3, #2
 80a756a:	d90b      	bls.n	80a7584 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a756c:	2801      	cmp	r0, #1
 80a756e:	d826      	bhi.n	80a75be <pinAvailable+0x66>
 80a7570:	f000 f892 	bl	80a7698 <_Z19__fetch_global_Wirev>
 80a7574:	2100      	movs	r1, #0
 80a7576:	7c00      	ldrb	r0, [r0, #16]
 80a7578:	f7fd fec2 	bl	80a5300 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a757c:	f080 0001 	eor.w	r0, r0, #1
 80a7580:	b2c0      	uxtb	r0, r0
 80a7582:	e7ee      	b.n	80a7562 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a7584:	4e13      	ldr	r6, [pc, #76]	; (80a75d4 <pinAvailable+0x7c>)
 80a7586:	7831      	ldrb	r1, [r6, #0]
 80a7588:	f3bf 8f5b 	dmb	ish
 80a758c:	f011 0501 	ands.w	r5, r1, #1
 80a7590:	d10f      	bne.n	80a75b2 <pinAvailable+0x5a>
 80a7592:	4630      	mov	r0, r6
 80a7594:	f7f8 fd92 	bl	80a00bc <__cxa_guard_acquire>
 80a7598:	b158      	cbz	r0, 80a75b2 <pinAvailable+0x5a>
 80a759a:	4629      	mov	r1, r5
 80a759c:	480e      	ldr	r0, [pc, #56]	; (80a75d8 <pinAvailable+0x80>)
 80a759e:	f7fe fd67 	bl	80a6070 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a75a2:	4630      	mov	r0, r6
 80a75a4:	f7f8 fd8f 	bl	80a00c6 <__cxa_guard_release>
 80a75a8:	4a0c      	ldr	r2, [pc, #48]	; (80a75dc <pinAvailable+0x84>)
 80a75aa:	490d      	ldr	r1, [pc, #52]	; (80a75e0 <pinAvailable+0x88>)
 80a75ac:	480a      	ldr	r0, [pc, #40]	; (80a75d8 <pinAvailable+0x80>)
 80a75ae:	f000 f8b3 	bl	80a7718 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a75b2:	4b09      	ldr	r3, [pc, #36]	; (80a75d8 <pinAvailable+0x80>)
 80a75b4:	7818      	ldrb	r0, [r3, #0]
 80a75b6:	f7fd ff2d 	bl	80a5414 <hal_spi_is_enabled>
 80a75ba:	2800      	cmp	r0, #0
 80a75bc:	d1d0      	bne.n	80a7560 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a75be:	3c12      	subs	r4, #18
 80a75c0:	2c01      	cmp	r4, #1
 80a75c2:	d805      	bhi.n	80a75d0 <pinAvailable+0x78>
 80a75c4:	f7ff fd86 	bl	80a70d4 <_Z22__fetch_global_Serial1v>
 80a75c8:	7c00      	ldrb	r0, [r0, #16]
 80a75ca:	f7fd ff5b 	bl	80a5484 <hal_usart_is_enabled>
 80a75ce:	e7d5      	b.n	80a757c <pinAvailable+0x24>
  return true; // 'pin' is available
 80a75d0:	2001      	movs	r0, #1
 80a75d2:	e7c6      	b.n	80a7562 <pinAvailable+0xa>
 80a75d4:	200014e0 	.word	0x200014e0
 80a75d8:	200014e4 	.word	0x200014e4
 80a75dc:	2000006c 	.word	0x2000006c
 80a75e0:	080a7549 	.word	0x080a7549

080a75e4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a75e4:	2817      	cmp	r0, #23
{
 80a75e6:	b538      	push	{r3, r4, r5, lr}
 80a75e8:	4604      	mov	r4, r0
 80a75ea:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a75ec:	d80a      	bhi.n	80a7604 <pinMode+0x20>
 80a75ee:	29ff      	cmp	r1, #255	; 0xff
 80a75f0:	d008      	beq.n	80a7604 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a75f2:	f7ff ffb1 	bl	80a7558 <pinAvailable>
 80a75f6:	b128      	cbz	r0, 80a7604 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a75f8:	4629      	mov	r1, r5
 80a75fa:	4620      	mov	r0, r4
}
 80a75fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a7600:	f7fd be36 	b.w	80a5270 <HAL_Pin_Mode>
}
 80a7604:	bd38      	pop	{r3, r4, r5, pc}

080a7606 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a7606:	b538      	push	{r3, r4, r5, lr}
 80a7608:	4604      	mov	r4, r0
 80a760a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a760c:	f7fd fe38 	bl	80a5280 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a7610:	28ff      	cmp	r0, #255	; 0xff
 80a7612:	d010      	beq.n	80a7636 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a7614:	2806      	cmp	r0, #6
 80a7616:	d804      	bhi.n	80a7622 <digitalWrite+0x1c>
 80a7618:	234d      	movs	r3, #77	; 0x4d
 80a761a:	fa23 f000 	lsr.w	r0, r3, r0
 80a761e:	07c3      	lsls	r3, r0, #31
 80a7620:	d409      	bmi.n	80a7636 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a7622:	4620      	mov	r0, r4
 80a7624:	f7ff ff98 	bl	80a7558 <pinAvailable>
 80a7628:	b128      	cbz	r0, 80a7636 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a762a:	4629      	mov	r1, r5
 80a762c:	4620      	mov	r0, r4
}
 80a762e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a7632:	f7fd be2d 	b.w	80a5290 <HAL_GPIO_Write>
}
 80a7636:	bd38      	pop	{r3, r4, r5, pc}

080a7638 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a7638:	b510      	push	{r4, lr}
 80a763a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a763c:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a763e:	bf9c      	itt	ls
 80a7640:	340a      	addls	r4, #10
 80a7642:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a7644:	4620      	mov	r0, r4
 80a7646:	f7ff ff87 	bl	80a7558 <pinAvailable>
 80a764a:	b150      	cbz	r0, 80a7662 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a764c:	2103      	movs	r1, #3
 80a764e:	4620      	mov	r0, r4
 80a7650:	f7fd fe06 	bl	80a5260 <HAL_Validate_Pin_Function>
 80a7654:	2803      	cmp	r0, #3
 80a7656:	d104      	bne.n	80a7662 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a7658:	4620      	mov	r0, r4
}
 80a765a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a765e:	f7fd be1f 	b.w	80a52a0 <hal_adc_read>
}
 80a7662:	2000      	movs	r0, #0
 80a7664:	bd10      	pop	{r4, pc}
	...

080a7668 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a7668:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a766a:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a766c:	2520      	movs	r5, #32
 80a766e:	8043      	strh	r3, [r0, #2]
 80a7670:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a7672:	4e08      	ldr	r6, [pc, #32]	; (80a7694 <_Z17acquireWireBufferv+0x2c>)
{
 80a7674:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a7676:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a7678:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a767a:	6085      	str	r5, [r0, #8]
 80a767c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a767e:	4628      	mov	r0, r5
 80a7680:	f000 f851 	bl	80a7726 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a7684:	4631      	mov	r1, r6
	};
 80a7686:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a7688:	4628      	mov	r0, r5
 80a768a:	f000 f84c 	bl	80a7726 <_ZnajRKSt9nothrow_t>
	};
 80a768e:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a7690:	4620      	mov	r0, r4
 80a7692:	bd70      	pop	{r4, r5, r6, pc}
 80a7694:	080ad638 	.word	0x080ad638

080a7698 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a7698:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a769a:	4d0f      	ldr	r5, [pc, #60]	; (80a76d8 <_Z19__fetch_global_Wirev+0x40>)
{
 80a769c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a769e:	7829      	ldrb	r1, [r5, #0]
 80a76a0:	f3bf 8f5b 	dmb	ish
 80a76a4:	f011 0401 	ands.w	r4, r1, #1
 80a76a8:	d113      	bne.n	80a76d2 <_Z19__fetch_global_Wirev+0x3a>
 80a76aa:	4628      	mov	r0, r5
 80a76ac:	f7f8 fd06 	bl	80a00bc <__cxa_guard_acquire>
 80a76b0:	b178      	cbz	r0, 80a76d2 <_Z19__fetch_global_Wirev+0x3a>
 80a76b2:	a801      	add	r0, sp, #4
 80a76b4:	f7ff ffd8 	bl	80a7668 <_Z17acquireWireBufferv>
 80a76b8:	4621      	mov	r1, r4
 80a76ba:	aa01      	add	r2, sp, #4
 80a76bc:	4807      	ldr	r0, [pc, #28]	; (80a76dc <_Z19__fetch_global_Wirev+0x44>)
 80a76be:	f7fe fb5d 	bl	80a5d7c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a76c2:	4628      	mov	r0, r5
 80a76c4:	f7f8 fcff 	bl	80a00c6 <__cxa_guard_release>
 80a76c8:	4a05      	ldr	r2, [pc, #20]	; (80a76e0 <_Z19__fetch_global_Wirev+0x48>)
 80a76ca:	4906      	ldr	r1, [pc, #24]	; (80a76e4 <_Z19__fetch_global_Wirev+0x4c>)
 80a76cc:	4803      	ldr	r0, [pc, #12]	; (80a76dc <_Z19__fetch_global_Wirev+0x44>)
 80a76ce:	f000 f823 	bl	80a7718 <__aeabi_atexit>
	return wire;
}
 80a76d2:	4802      	ldr	r0, [pc, #8]	; (80a76dc <_Z19__fetch_global_Wirev+0x44>)
 80a76d4:	b007      	add	sp, #28
 80a76d6:	bd30      	pop	{r4, r5, pc}
 80a76d8:	200014f4 	.word	0x200014f4
 80a76dc:	200014f8 	.word	0x200014f8
 80a76e0:	2000006c 	.word	0x2000006c
 80a76e4:	080a5d25 	.word	0x080a5d25

080a76e8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a76e8:	2300      	movs	r3, #0
 80a76ea:	b513      	push	{r0, r1, r4, lr}
 80a76ec:	4c07      	ldr	r4, [pc, #28]	; (80a770c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a76ee:	461a      	mov	r2, r3
 80a76f0:	4619      	mov	r1, r3
 80a76f2:	4620      	mov	r0, r4
 80a76f4:	9300      	str	r3, [sp, #0]
 80a76f6:	f7fe fbab 	bl	80a5e50 <_ZN9IPAddressC1Ehhhh>
 80a76fa:	4620      	mov	r0, r4
 80a76fc:	4a04      	ldr	r2, [pc, #16]	; (80a7710 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a76fe:	4905      	ldr	r1, [pc, #20]	; (80a7714 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a7700:	b002      	add	sp, #8
 80a7702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a7706:	f000 b807 	b.w	80a7718 <__aeabi_atexit>
 80a770a:	bf00      	nop
 80a770c:	2000150c 	.word	0x2000150c
 80a7710:	2000006c 	.word	0x2000006c
 80a7714:	080a5da1 	.word	0x080a5da1

080a7718 <__aeabi_atexit>:
 80a7718:	460b      	mov	r3, r1
 80a771a:	4601      	mov	r1, r0
 80a771c:	4618      	mov	r0, r3
 80a771e:	f004 bdcd 	b.w	80ac2bc <__cxa_atexit>

080a7722 <_ZdlPvj>:
 80a7722:	f7f8 bcbe 	b.w	80a00a2 <_ZdlPv>

080a7726 <_ZnajRKSt9nothrow_t>:
 80a7726:	f7f8 bcba 	b.w	80a009e <_Znaj>

080a772a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 80a772a:	68c3      	ldr	r3, [r0, #12]
 80a772c:	b510      	push	{r4, lr}
 80a772e:	689a      	ldr	r2, [r3, #8]
 80a7730:	60c2      	str	r2, [r0, #12]
 80a7732:	b102      	cbz	r2, 80a7736 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 80a7734:	6050      	str	r0, [r2, #4]
 80a7736:	6842      	ldr	r2, [r0, #4]
 80a7738:	605a      	str	r2, [r3, #4]
 80a773a:	680c      	ldr	r4, [r1, #0]
 80a773c:	4284      	cmp	r4, r0
 80a773e:	d103      	bne.n	80a7748 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 80a7740:	600b      	str	r3, [r1, #0]
 80a7742:	6098      	str	r0, [r3, #8]
 80a7744:	6043      	str	r3, [r0, #4]
 80a7746:	bd10      	pop	{r4, pc}
 80a7748:	6891      	ldr	r1, [r2, #8]
 80a774a:	4281      	cmp	r1, r0
 80a774c:	bf0c      	ite	eq
 80a774e:	6093      	streq	r3, [r2, #8]
 80a7750:	60d3      	strne	r3, [r2, #12]
 80a7752:	e7f6      	b.n	80a7742 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

080a7754 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 80a7754:	6883      	ldr	r3, [r0, #8]
 80a7756:	b510      	push	{r4, lr}
 80a7758:	68da      	ldr	r2, [r3, #12]
 80a775a:	6082      	str	r2, [r0, #8]
 80a775c:	b102      	cbz	r2, 80a7760 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 80a775e:	6050      	str	r0, [r2, #4]
 80a7760:	6842      	ldr	r2, [r0, #4]
 80a7762:	605a      	str	r2, [r3, #4]
 80a7764:	680c      	ldr	r4, [r1, #0]
 80a7766:	4284      	cmp	r4, r0
 80a7768:	d103      	bne.n	80a7772 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 80a776a:	600b      	str	r3, [r1, #0]
 80a776c:	60d8      	str	r0, [r3, #12]
 80a776e:	6043      	str	r3, [r0, #4]
 80a7770:	bd10      	pop	{r4, pc}
 80a7772:	68d1      	ldr	r1, [r2, #12]
 80a7774:	4281      	cmp	r1, r0
 80a7776:	bf0c      	ite	eq
 80a7778:	60d3      	streq	r3, [r2, #12]
 80a777a:	6093      	strne	r3, [r2, #8]
 80a777c:	e7f6      	b.n	80a776c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

080a777e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80a777e:	7802      	ldrb	r2, [r0, #0]
 80a7780:	4603      	mov	r3, r0
 80a7782:	b92a      	cbnz	r2, 80a7790 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80a7784:	6842      	ldr	r2, [r0, #4]
 80a7786:	6852      	ldr	r2, [r2, #4]
 80a7788:	4282      	cmp	r2, r0
 80a778a:	d101      	bne.n	80a7790 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80a778c:	68d0      	ldr	r0, [r2, #12]
 80a778e:	4770      	bx	lr
 80a7790:	689a      	ldr	r2, [r3, #8]
 80a7792:	b122      	cbz	r2, 80a779e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 80a7794:	4610      	mov	r0, r2
 80a7796:	68d2      	ldr	r2, [r2, #12]
 80a7798:	2a00      	cmp	r2, #0
 80a779a:	d1fb      	bne.n	80a7794 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 80a779c:	4770      	bx	lr
 80a779e:	6858      	ldr	r0, [r3, #4]
 80a77a0:	6882      	ldr	r2, [r0, #8]
 80a77a2:	429a      	cmp	r2, r3
 80a77a4:	d102      	bne.n	80a77ac <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2e>
 80a77a6:	4603      	mov	r3, r0
 80a77a8:	6840      	ldr	r0, [r0, #4]
 80a77aa:	e7f9      	b.n	80a77a0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>
 80a77ac:	4770      	bx	lr

080a77ae <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80a77ae:	68c3      	ldr	r3, [r0, #12]
 80a77b0:	b123      	cbz	r3, 80a77bc <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 80a77b2:	4618      	mov	r0, r3
 80a77b4:	689b      	ldr	r3, [r3, #8]
 80a77b6:	2b00      	cmp	r3, #0
 80a77b8:	d1fb      	bne.n	80a77b2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 80a77ba:	4770      	bx	lr
 80a77bc:	6843      	ldr	r3, [r0, #4]
 80a77be:	68da      	ldr	r2, [r3, #12]
 80a77c0:	4282      	cmp	r2, r0
 80a77c2:	d102      	bne.n	80a77ca <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 80a77c4:	4618      	mov	r0, r3
 80a77c6:	685b      	ldr	r3, [r3, #4]
 80a77c8:	e7f9      	b.n	80a77be <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 80a77ca:	68c2      	ldr	r2, [r0, #12]
 80a77cc:	4293      	cmp	r3, r2
 80a77ce:	bf18      	it	ne
 80a77d0:	4618      	movne	r0, r3
 80a77d2:	4770      	bx	lr

080a77d4 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>:
 80a77d4:	68c3      	ldr	r3, [r0, #12]
 80a77d6:	b123      	cbz	r3, 80a77e2 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0xe>
 80a77d8:	4618      	mov	r0, r3
 80a77da:	689b      	ldr	r3, [r3, #8]
 80a77dc:	2b00      	cmp	r3, #0
 80a77de:	d1fb      	bne.n	80a77d8 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x4>
 80a77e0:	4770      	bx	lr
 80a77e2:	6843      	ldr	r3, [r0, #4]
 80a77e4:	68da      	ldr	r2, [r3, #12]
 80a77e6:	4282      	cmp	r2, r0
 80a77e8:	d102      	bne.n	80a77f0 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x1c>
 80a77ea:	4618      	mov	r0, r3
 80a77ec:	685b      	ldr	r3, [r3, #4]
 80a77ee:	e7f9      	b.n	80a77e4 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x10>
 80a77f0:	68c2      	ldr	r2, [r0, #12]
 80a77f2:	4293      	cmp	r3, r2
 80a77f4:	bf18      	it	ne
 80a77f6:	4618      	movne	r0, r3
 80a77f8:	4770      	bx	lr

080a77fa <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80a77fa:	f7ff bfc0 	b.w	80a777e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

080a77fe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 80a77fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a7802:	461e      	mov	r6, r3
 80a7804:	f103 0804 	add.w	r8, r3, #4
 80a7808:	2300      	movs	r3, #0
 80a780a:	460c      	mov	r4, r1
 80a780c:	e9c1 3302 	strd	r3, r3, [r1, #8]
 80a7810:	604a      	str	r2, [r1, #4]
 80a7812:	700b      	strb	r3, [r1, #0]
 80a7814:	b300      	cbz	r0, 80a7858 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 80a7816:	4296      	cmp	r6, r2
 80a7818:	6091      	str	r1, [r2, #8]
 80a781a:	d118      	bne.n	80a784e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 80a781c:	6071      	str	r1, [r6, #4]
 80a781e:	60f4      	str	r4, [r6, #12]
 80a7820:	2701      	movs	r7, #1
 80a7822:	f04f 0900 	mov.w	r9, #0
 80a7826:	6873      	ldr	r3, [r6, #4]
 80a7828:	42a3      	cmp	r3, r4
 80a782a:	d03f      	beq.n	80a78ac <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 80a782c:	6860      	ldr	r0, [r4, #4]
 80a782e:	7802      	ldrb	r2, [r0, #0]
 80a7830:	2a00      	cmp	r2, #0
 80a7832:	d13c      	bne.n	80a78ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
 80a7834:	6845      	ldr	r5, [r0, #4]
 80a7836:	68ab      	ldr	r3, [r5, #8]
 80a7838:	4298      	cmp	r0, r3
 80a783a:	d123      	bne.n	80a7884 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 80a783c:	68eb      	ldr	r3, [r5, #12]
 80a783e:	b183      	cbz	r3, 80a7862 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80a7840:	781a      	ldrb	r2, [r3, #0]
 80a7842:	b972      	cbnz	r2, 80a7862 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80a7844:	7007      	strb	r7, [r0, #0]
 80a7846:	701f      	strb	r7, [r3, #0]
 80a7848:	702a      	strb	r2, [r5, #0]
 80a784a:	462c      	mov	r4, r5
 80a784c:	e7eb      	b.n	80a7826 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 80a784e:	68b3      	ldr	r3, [r6, #8]
 80a7850:	4293      	cmp	r3, r2
 80a7852:	d1e5      	bne.n	80a7820 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80a7854:	60b1      	str	r1, [r6, #8]
 80a7856:	e7e3      	b.n	80a7820 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80a7858:	60d1      	str	r1, [r2, #12]
 80a785a:	68f3      	ldr	r3, [r6, #12]
 80a785c:	4293      	cmp	r3, r2
 80a785e:	d1df      	bne.n	80a7820 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80a7860:	e7dd      	b.n	80a781e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 80a7862:	68c3      	ldr	r3, [r0, #12]
 80a7864:	42a3      	cmp	r3, r4
 80a7866:	d103      	bne.n	80a7870 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 80a7868:	4641      	mov	r1, r8
 80a786a:	f7ff ff5e 	bl	80a772a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80a786e:	4604      	mov	r4, r0
 80a7870:	6863      	ldr	r3, [r4, #4]
 80a7872:	4641      	mov	r1, r8
 80a7874:	701f      	strb	r7, [r3, #0]
 80a7876:	4628      	mov	r0, r5
 80a7878:	f885 9000 	strb.w	r9, [r5]
 80a787c:	f7ff ff6a 	bl	80a7754 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80a7880:	4625      	mov	r5, r4
 80a7882:	e7e2      	b.n	80a784a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 80a7884:	b113      	cbz	r3, 80a788c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 80a7886:	781a      	ldrb	r2, [r3, #0]
 80a7888:	2a00      	cmp	r2, #0
 80a788a:	d0db      	beq.n	80a7844 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 80a788c:	6883      	ldr	r3, [r0, #8]
 80a788e:	42a3      	cmp	r3, r4
 80a7890:	d103      	bne.n	80a789a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 80a7892:	4641      	mov	r1, r8
 80a7894:	f7ff ff5e 	bl	80a7754 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80a7898:	4604      	mov	r4, r0
 80a789a:	6863      	ldr	r3, [r4, #4]
 80a789c:	4641      	mov	r1, r8
 80a789e:	701f      	strb	r7, [r3, #0]
 80a78a0:	4628      	mov	r0, r5
 80a78a2:	f885 9000 	strb.w	r9, [r5]
 80a78a6:	f7ff ff40 	bl	80a772a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80a78aa:	e7e9      	b.n	80a7880 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 80a78ac:	4623      	mov	r3, r4
 80a78ae:	2201      	movs	r2, #1
 80a78b0:	701a      	strb	r2, [r3, #0]
 80a78b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a78b6 <_ZSt20__throw_length_errorPKc>:
 80a78b6:	b508      	push	{r3, lr}
 80a78b8:	f7fd ff40 	bl	80a573c <abort>

080a78bc <_ZSt25__throw_bad_function_callv>:
 80a78bc:	b508      	push	{r3, lr}
 80a78be:	f7fd ff3d 	bl	80a573c <abort>
	...

080a78c4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a78c4:	4901      	ldr	r1, [pc, #4]	; (80a78cc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a78c6:	f000 b8fb 	b.w	80a7ac0 <_ZNKSt9type_infoeqERKS_>
 80a78ca:	bf00      	nop
 80a78cc:	080ad654 	.word	0x080ad654

080a78d0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a78d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a78d2:	2400      	movs	r4, #0
 80a78d4:	2310      	movs	r3, #16
 80a78d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a78da:	6803      	ldr	r3, [r0, #0]
 80a78dc:	4615      	mov	r5, r2
 80a78de:	699e      	ldr	r6, [r3, #24]
 80a78e0:	6812      	ldr	r2, [r2, #0]
 80a78e2:	466b      	mov	r3, sp
 80a78e4:	9400      	str	r4, [sp, #0]
 80a78e6:	f88d 4004 	strb.w	r4, [sp, #4]
 80a78ea:	47b0      	blx	r6
 80a78ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a78f0:	f003 0306 	and.w	r3, r3, #6
 80a78f4:	2b06      	cmp	r3, #6
 80a78f6:	bf09      	itett	eq
 80a78f8:	2001      	moveq	r0, #1
 80a78fa:	4620      	movne	r0, r4
 80a78fc:	9b00      	ldreq	r3, [sp, #0]
 80a78fe:	602b      	streq	r3, [r5, #0]
 80a7900:	b004      	add	sp, #16
 80a7902:	bd70      	pop	{r4, r5, r6, pc}

080a7904 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a7904:	9800      	ldr	r0, [sp, #0]
 80a7906:	4290      	cmp	r0, r2
 80a7908:	bf14      	ite	ne
 80a790a:	2001      	movne	r0, #1
 80a790c:	2006      	moveq	r0, #6
 80a790e:	4770      	bx	lr

080a7910 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a7910:	b510      	push	{r4, lr}
 80a7912:	4604      	mov	r4, r0
 80a7914:	4b02      	ldr	r3, [pc, #8]	; (80a7920 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a7916:	6003      	str	r3, [r0, #0]
 80a7918:	f000 f8cf 	bl	80a7aba <_ZNSt9type_infoD1Ev>
 80a791c:	4620      	mov	r0, r4
 80a791e:	bd10      	pop	{r4, pc}
 80a7920:	080ad694 	.word	0x080ad694

080a7924 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a7924:	b510      	push	{r4, lr}
 80a7926:	4604      	mov	r4, r0
 80a7928:	f7ff fff2 	bl	80a7910 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a792c:	4620      	mov	r0, r4
 80a792e:	2108      	movs	r1, #8
 80a7930:	f7ff fef7 	bl	80a7722 <_ZdlPvj>
 80a7934:	4620      	mov	r0, r4
 80a7936:	bd10      	pop	{r4, pc}

080a7938 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a7938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a793c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a7940:	461f      	mov	r7, r3
 80a7942:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a7946:	4598      	cmp	r8, r3
 80a7948:	4606      	mov	r6, r0
 80a794a:	4615      	mov	r5, r2
 80a794c:	d107      	bne.n	80a795e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a794e:	9907      	ldr	r1, [sp, #28]
 80a7950:	f000 f8b6 	bl	80a7ac0 <_ZNKSt9type_infoeqERKS_>
 80a7954:	b118      	cbz	r0, 80a795e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a7956:	7165      	strb	r5, [r4, #5]
 80a7958:	2000      	movs	r0, #0
 80a795a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a795e:	4639      	mov	r1, r7
 80a7960:	4630      	mov	r0, r6
 80a7962:	f000 f8ad 	bl	80a7ac0 <_ZNKSt9type_infoeqERKS_>
 80a7966:	2800      	cmp	r0, #0
 80a7968:	d0f6      	beq.n	80a7958 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a796a:	2301      	movs	r3, #1
 80a796c:	f8c4 8000 	str.w	r8, [r4]
 80a7970:	7125      	strb	r5, [r4, #4]
 80a7972:	71a3      	strb	r3, [r4, #6]
 80a7974:	e7f0      	b.n	80a7958 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a7976 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a7976:	b538      	push	{r3, r4, r5, lr}
 80a7978:	4615      	mov	r5, r2
 80a797a:	461c      	mov	r4, r3
 80a797c:	f000 f8a0 	bl	80a7ac0 <_ZNKSt9type_infoeqERKS_>
 80a7980:	b120      	cbz	r0, 80a798c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a7982:	2308      	movs	r3, #8
 80a7984:	60e3      	str	r3, [r4, #12]
 80a7986:	2306      	movs	r3, #6
 80a7988:	6025      	str	r5, [r4, #0]
 80a798a:	7123      	strb	r3, [r4, #4]
 80a798c:	bd38      	pop	{r3, r4, r5, pc}

080a798e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a798e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7992:	4605      	mov	r5, r0
 80a7994:	460c      	mov	r4, r1
 80a7996:	4616      	mov	r6, r2
 80a7998:	461f      	mov	r7, r3
 80a799a:	f000 f891 	bl	80a7ac0 <_ZNKSt9type_infoeqERKS_>
 80a799e:	b948      	cbnz	r0, 80a79b4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a79a0:	2f03      	cmp	r7, #3
 80a79a2:	d807      	bhi.n	80a79b4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a79a4:	6823      	ldr	r3, [r4, #0]
 80a79a6:	4632      	mov	r2, r6
 80a79a8:	4629      	mov	r1, r5
 80a79aa:	4620      	mov	r0, r4
 80a79ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a79b0:	695b      	ldr	r3, [r3, #20]
 80a79b2:	4718      	bx	r3
 80a79b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a79b8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a79b8:	b510      	push	{r4, lr}
 80a79ba:	4604      	mov	r4, r0
 80a79bc:	4b02      	ldr	r3, [pc, #8]	; (80a79c8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a79be:	6003      	str	r3, [r0, #0]
 80a79c0:	f7ff ffa6 	bl	80a7910 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a79c4:	4620      	mov	r0, r4
 80a79c6:	bd10      	pop	{r4, pc}
 80a79c8:	080ad6f4 	.word	0x080ad6f4

080a79cc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a79cc:	b510      	push	{r4, lr}
 80a79ce:	4604      	mov	r4, r0
 80a79d0:	f7ff fff2 	bl	80a79b8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a79d4:	4620      	mov	r0, r4
 80a79d6:	210c      	movs	r1, #12
 80a79d8:	f7ff fea3 	bl	80a7722 <_ZdlPvj>
 80a79dc:	4620      	mov	r0, r4
 80a79de:	bd10      	pop	{r4, pc}

080a79e0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a79e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a79e4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a79e8:	4606      	mov	r6, r0
 80a79ea:	4590      	cmp	r8, r2
 80a79ec:	460f      	mov	r7, r1
 80a79ee:	4615      	mov	r5, r2
 80a79f0:	461c      	mov	r4, r3
 80a79f2:	d00b      	beq.n	80a7a0c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a79f4:	68b0      	ldr	r0, [r6, #8]
 80a79f6:	462a      	mov	r2, r5
 80a79f8:	6803      	ldr	r3, [r0, #0]
 80a79fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80a79fe:	6a1e      	ldr	r6, [r3, #32]
 80a7a00:	4639      	mov	r1, r7
 80a7a02:	4623      	mov	r3, r4
 80a7a04:	46b4      	mov	ip, r6
 80a7a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a7a0a:	4760      	bx	ip
 80a7a0c:	4619      	mov	r1, r3
 80a7a0e:	f000 f857 	bl	80a7ac0 <_ZNKSt9type_infoeqERKS_>
 80a7a12:	2800      	cmp	r0, #0
 80a7a14:	d0ee      	beq.n	80a79f4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a7a16:	2006      	movs	r0, #6
 80a7a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a7a1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a7a1c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7a20:	460d      	mov	r5, r1
 80a7a22:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a7a26:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a7a2a:	4619      	mov	r1, r3
 80a7a2c:	4681      	mov	r9, r0
 80a7a2e:	4617      	mov	r7, r2
 80a7a30:	4698      	mov	r8, r3
 80a7a32:	f000 f845 	bl	80a7ac0 <_ZNKSt9type_infoeqERKS_>
 80a7a36:	b190      	cbz	r0, 80a7a5e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a7a38:	2d00      	cmp	r5, #0
 80a7a3a:	6034      	str	r4, [r6, #0]
 80a7a3c:	7137      	strb	r7, [r6, #4]
 80a7a3e:	db09      	blt.n	80a7a54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a7a40:	442c      	add	r4, r5
 80a7a42:	45a2      	cmp	sl, r4
 80a7a44:	bf0c      	ite	eq
 80a7a46:	2406      	moveq	r4, #6
 80a7a48:	2401      	movne	r4, #1
 80a7a4a:	71b4      	strb	r4, [r6, #6]
 80a7a4c:	2000      	movs	r0, #0
 80a7a4e:	b001      	add	sp, #4
 80a7a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7a54:	3502      	adds	r5, #2
 80a7a56:	d1f9      	bne.n	80a7a4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a7a58:	2301      	movs	r3, #1
 80a7a5a:	71b3      	strb	r3, [r6, #6]
 80a7a5c:	e7f6      	b.n	80a7a4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a7a5e:	4554      	cmp	r4, sl
 80a7a60:	d106      	bne.n	80a7a70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a7a62:	4659      	mov	r1, fp
 80a7a64:	4648      	mov	r0, r9
 80a7a66:	f000 f82b 	bl	80a7ac0 <_ZNKSt9type_infoeqERKS_>
 80a7a6a:	b108      	cbz	r0, 80a7a70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a7a6c:	7177      	strb	r7, [r6, #5]
 80a7a6e:	e7ed      	b.n	80a7a4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a7a70:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a7a74:	463a      	mov	r2, r7
 80a7a76:	6803      	ldr	r3, [r0, #0]
 80a7a78:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a7a7c:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a7a80:	69dc      	ldr	r4, [r3, #28]
 80a7a82:	4629      	mov	r1, r5
 80a7a84:	4643      	mov	r3, r8
 80a7a86:	46a4      	mov	ip, r4
 80a7a88:	b001      	add	sp, #4
 80a7a8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7a8e:	4760      	bx	ip

080a7a90 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a7a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7a94:	4607      	mov	r7, r0
 80a7a96:	460c      	mov	r4, r1
 80a7a98:	4615      	mov	r5, r2
 80a7a9a:	461e      	mov	r6, r3
 80a7a9c:	f7ff ff6b 	bl	80a7976 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a7aa0:	b948      	cbnz	r0, 80a7ab6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a7aa2:	68b8      	ldr	r0, [r7, #8]
 80a7aa4:	462a      	mov	r2, r5
 80a7aa6:	6803      	ldr	r3, [r0, #0]
 80a7aa8:	4621      	mov	r1, r4
 80a7aaa:	699f      	ldr	r7, [r3, #24]
 80a7aac:	4633      	mov	r3, r6
 80a7aae:	46bc      	mov	ip, r7
 80a7ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a7ab4:	4760      	bx	ip
 80a7ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a7aba <_ZNSt9type_infoD1Ev>:
 80a7aba:	4770      	bx	lr

080a7abc <_ZNKSt9type_info14__is_pointer_pEv>:
 80a7abc:	2000      	movs	r0, #0
 80a7abe:	4770      	bx	lr

080a7ac0 <_ZNKSt9type_infoeqERKS_>:
 80a7ac0:	4281      	cmp	r1, r0
 80a7ac2:	b508      	push	{r3, lr}
 80a7ac4:	d00e      	beq.n	80a7ae4 <_ZNKSt9type_infoeqERKS_+0x24>
 80a7ac6:	6840      	ldr	r0, [r0, #4]
 80a7ac8:	7803      	ldrb	r3, [r0, #0]
 80a7aca:	2b2a      	cmp	r3, #42	; 0x2a
 80a7acc:	d00c      	beq.n	80a7ae8 <_ZNKSt9type_infoeqERKS_+0x28>
 80a7ace:	6849      	ldr	r1, [r1, #4]
 80a7ad0:	780b      	ldrb	r3, [r1, #0]
 80a7ad2:	2b2a      	cmp	r3, #42	; 0x2a
 80a7ad4:	bf08      	it	eq
 80a7ad6:	3101      	addeq	r1, #1
 80a7ad8:	f004 fc93 	bl	80ac402 <strcmp>
 80a7adc:	fab0 f080 	clz	r0, r0
 80a7ae0:	0940      	lsrs	r0, r0, #5
 80a7ae2:	bd08      	pop	{r3, pc}
 80a7ae4:	2001      	movs	r0, #1
 80a7ae6:	e7fc      	b.n	80a7ae2 <_ZNKSt9type_infoeqERKS_+0x22>
 80a7ae8:	2000      	movs	r0, #0
 80a7aea:	e7fa      	b.n	80a7ae2 <_ZNKSt9type_infoeqERKS_+0x22>

080a7aec <cos>:
 80a7aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a7aee:	4d28      	ldr	r5, [pc, #160]	; (80a7b90 <cos+0xa4>)
 80a7af0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a7af4:	42ab      	cmp	r3, r5
 80a7af6:	b087      	sub	sp, #28
 80a7af8:	dd21      	ble.n	80a7b3e <cos+0x52>
 80a7afa:	4d26      	ldr	r5, [pc, #152]	; (80a7b94 <cos+0xa8>)
 80a7afc:	42ab      	cmp	r3, r5
 80a7afe:	dd09      	ble.n	80a7b14 <cos+0x28>
 80a7b00:	4602      	mov	r2, r0
 80a7b02:	460b      	mov	r3, r1
 80a7b04:	f003 fbaa 	bl	80ab25c <__aeabi_dsub>
 80a7b08:	4602      	mov	r2, r0
 80a7b0a:	460b      	mov	r3, r1
 80a7b0c:	4610      	mov	r0, r2
 80a7b0e:	4619      	mov	r1, r3
 80a7b10:	b007      	add	sp, #28
 80a7b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a7b14:	aa02      	add	r2, sp, #8
 80a7b16:	f001 f88f 	bl	80a8c38 <__ieee754_rem_pio2>
 80a7b1a:	f000 0003 	and.w	r0, r0, #3
 80a7b1e:	2801      	cmp	r0, #1
 80a7b20:	d017      	beq.n	80a7b52 <cos+0x66>
 80a7b22:	2802      	cmp	r0, #2
 80a7b24:	d029      	beq.n	80a7b7a <cos+0x8e>
 80a7b26:	b1f8      	cbz	r0, 80a7b68 <cos+0x7c>
 80a7b28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a7b2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a7b30:	2401      	movs	r4, #1
 80a7b32:	9400      	str	r4, [sp, #0]
 80a7b34:	f002 fbe8 	bl	80aa308 <__kernel_sin>
 80a7b38:	4602      	mov	r2, r0
 80a7b3a:	460b      	mov	r3, r1
 80a7b3c:	e7e6      	b.n	80a7b0c <cos+0x20>
 80a7b3e:	2200      	movs	r2, #0
 80a7b40:	2300      	movs	r3, #0
 80a7b42:	f001 fe95 	bl	80a9870 <__kernel_cos>
 80a7b46:	4602      	mov	r2, r0
 80a7b48:	460b      	mov	r3, r1
 80a7b4a:	4610      	mov	r0, r2
 80a7b4c:	4619      	mov	r1, r3
 80a7b4e:	b007      	add	sp, #28
 80a7b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a7b52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a7b56:	9000      	str	r0, [sp, #0]
 80a7b58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a7b5c:	f002 fbd4 	bl	80aa308 <__kernel_sin>
 80a7b60:	4602      	mov	r2, r0
 80a7b62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a7b66:	e7d1      	b.n	80a7b0c <cos+0x20>
 80a7b68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a7b6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a7b70:	f001 fe7e 	bl	80a9870 <__kernel_cos>
 80a7b74:	4602      	mov	r2, r0
 80a7b76:	460b      	mov	r3, r1
 80a7b78:	e7c8      	b.n	80a7b0c <cos+0x20>
 80a7b7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a7b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a7b82:	f001 fe75 	bl	80a9870 <__kernel_cos>
 80a7b86:	4602      	mov	r2, r0
 80a7b88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a7b8c:	e7be      	b.n	80a7b0c <cos+0x20>
 80a7b8e:	bf00      	nop
 80a7b90:	3fe921fb 	.word	0x3fe921fb
 80a7b94:	7fefffff 	.word	0x7fefffff

080a7b98 <cosf>:
 80a7b98:	b500      	push	{lr}
 80a7b9a:	4a1c      	ldr	r2, [pc, #112]	; (80a7c0c <cosf+0x74>)
 80a7b9c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80a7ba0:	4293      	cmp	r3, r2
 80a7ba2:	b083      	sub	sp, #12
 80a7ba4:	dd18      	ble.n	80a7bd8 <cosf+0x40>
 80a7ba6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80a7baa:	db05      	blt.n	80a7bb8 <cosf+0x20>
 80a7bac:	4601      	mov	r1, r0
 80a7bae:	f004 f859 	bl	80abc64 <__aeabi_fsub>
 80a7bb2:	b003      	add	sp, #12
 80a7bb4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a7bb8:	4669      	mov	r1, sp
 80a7bba:	f001 fce5 	bl	80a9588 <__ieee754_rem_pio2f>
 80a7bbe:	f000 0203 	and.w	r2, r0, #3
 80a7bc2:	2a01      	cmp	r2, #1
 80a7bc4:	d00e      	beq.n	80a7be4 <cosf+0x4c>
 80a7bc6:	2a02      	cmp	r2, #2
 80a7bc8:	d018      	beq.n	80a7bfc <cosf+0x64>
 80a7bca:	b192      	cbz	r2, 80a7bf2 <cosf+0x5a>
 80a7bcc:	2201      	movs	r2, #1
 80a7bce:	9901      	ldr	r1, [sp, #4]
 80a7bd0:	9800      	ldr	r0, [sp, #0]
 80a7bd2:	f003 f893 	bl	80aacfc <__kernel_sinf>
 80a7bd6:	e7ec      	b.n	80a7bb2 <cosf+0x1a>
 80a7bd8:	2100      	movs	r1, #0
 80a7bda:	f002 fc57 	bl	80aa48c <__kernel_cosf>
 80a7bde:	b003      	add	sp, #12
 80a7be0:	f85d fb04 	ldr.w	pc, [sp], #4
 80a7be4:	9901      	ldr	r1, [sp, #4]
 80a7be6:	9800      	ldr	r0, [sp, #0]
 80a7be8:	f003 f888 	bl	80aacfc <__kernel_sinf>
 80a7bec:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a7bf0:	e7df      	b.n	80a7bb2 <cosf+0x1a>
 80a7bf2:	9901      	ldr	r1, [sp, #4]
 80a7bf4:	9800      	ldr	r0, [sp, #0]
 80a7bf6:	f002 fc49 	bl	80aa48c <__kernel_cosf>
 80a7bfa:	e7da      	b.n	80a7bb2 <cosf+0x1a>
 80a7bfc:	9901      	ldr	r1, [sp, #4]
 80a7bfe:	9800      	ldr	r0, [sp, #0]
 80a7c00:	f002 fc44 	bl	80aa48c <__kernel_cosf>
 80a7c04:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a7c08:	e7d3      	b.n	80a7bb2 <cosf+0x1a>
 80a7c0a:	bf00      	nop
 80a7c0c:	3f490fd8 	.word	0x3f490fd8

080a7c10 <pow>:
 80a7c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7c14:	b08f      	sub	sp, #60	; 0x3c
 80a7c16:	461d      	mov	r5, r3
 80a7c18:	4606      	mov	r6, r0
 80a7c1a:	460f      	mov	r7, r1
 80a7c1c:	4614      	mov	r4, r2
 80a7c1e:	f000 fa73 	bl	80a8108 <__ieee754_pow>
 80a7c22:	4ba4      	ldr	r3, [pc, #656]	; (80a7eb4 <pow+0x2a4>)
 80a7c24:	e9cd 0100 	strd	r0, r1, [sp]
 80a7c28:	f993 9000 	ldrsb.w	r9, [r3]
 80a7c2c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80a7c30:	d038      	beq.n	80a7ca4 <pow+0x94>
 80a7c32:	4622      	mov	r2, r4
 80a7c34:	462b      	mov	r3, r5
 80a7c36:	4620      	mov	r0, r4
 80a7c38:	4629      	mov	r1, r5
 80a7c3a:	f003 ff61 	bl	80abb00 <__aeabi_dcmpun>
 80a7c3e:	4683      	mov	fp, r0
 80a7c40:	bb80      	cbnz	r0, 80a7ca4 <pow+0x94>
 80a7c42:	4632      	mov	r2, r6
 80a7c44:	463b      	mov	r3, r7
 80a7c46:	4630      	mov	r0, r6
 80a7c48:	4639      	mov	r1, r7
 80a7c4a:	f003 ff59 	bl	80abb00 <__aeabi_dcmpun>
 80a7c4e:	4680      	mov	r8, r0
 80a7c50:	2800      	cmp	r0, #0
 80a7c52:	f040 80d9 	bne.w	80a7e08 <pow+0x1f8>
 80a7c56:	f04f 0a00 	mov.w	sl, #0
 80a7c5a:	f04f 0b00 	mov.w	fp, #0
 80a7c5e:	4630      	mov	r0, r6
 80a7c60:	4639      	mov	r1, r7
 80a7c62:	4652      	mov	r2, sl
 80a7c64:	465b      	mov	r3, fp
 80a7c66:	f003 ff19 	bl	80aba9c <__aeabi_dcmpeq>
 80a7c6a:	b300      	cbz	r0, 80a7cae <pow+0x9e>
 80a7c6c:	4652      	mov	r2, sl
 80a7c6e:	465b      	mov	r3, fp
 80a7c70:	4620      	mov	r0, r4
 80a7c72:	4629      	mov	r1, r5
 80a7c74:	f003 ff12 	bl	80aba9c <__aeabi_dcmpeq>
 80a7c78:	9003      	str	r0, [sp, #12]
 80a7c7a:	2800      	cmp	r0, #0
 80a7c7c:	d048      	beq.n	80a7d10 <pow+0x100>
 80a7c7e:	2201      	movs	r2, #1
 80a7c80:	4b8d      	ldr	r3, [pc, #564]	; (80a7eb8 <pow+0x2a8>)
 80a7c82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a7c86:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a7c8a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80a7c8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a7c92:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80a7c96:	f1b9 0f00 	cmp.w	r9, #0
 80a7c9a:	d068      	beq.n	80a7d6e <pow+0x15e>
 80a7c9c:	2300      	movs	r3, #0
 80a7c9e:	4c87      	ldr	r4, [pc, #540]	; (80a7ebc <pow+0x2ac>)
 80a7ca0:	e9cd 3400 	strd	r3, r4, [sp]
 80a7ca4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a7ca8:	b00f      	add	sp, #60	; 0x3c
 80a7caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7cae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a7cb2:	f003 f89d 	bl	80aadf0 <finite>
 80a7cb6:	4680      	mov	r8, r0
 80a7cb8:	2800      	cmp	r0, #0
 80a7cba:	d069      	beq.n	80a7d90 <pow+0x180>
 80a7cbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a7cc0:	f04f 0800 	mov.w	r8, #0
 80a7cc4:	f04f 0900 	mov.w	r9, #0
 80a7cc8:	4642      	mov	r2, r8
 80a7cca:	464b      	mov	r3, r9
 80a7ccc:	f003 fee6 	bl	80aba9c <__aeabi_dcmpeq>
 80a7cd0:	2800      	cmp	r0, #0
 80a7cd2:	d0e7      	beq.n	80a7ca4 <pow+0x94>
 80a7cd4:	4630      	mov	r0, r6
 80a7cd6:	4639      	mov	r1, r7
 80a7cd8:	f003 f88a 	bl	80aadf0 <finite>
 80a7cdc:	2800      	cmp	r0, #0
 80a7cde:	d0e1      	beq.n	80a7ca4 <pow+0x94>
 80a7ce0:	4620      	mov	r0, r4
 80a7ce2:	4629      	mov	r1, r5
 80a7ce4:	f003 f884 	bl	80aadf0 <finite>
 80a7ce8:	2800      	cmp	r0, #0
 80a7cea:	d0db      	beq.n	80a7ca4 <pow+0x94>
 80a7cec:	2004      	movs	r0, #4
 80a7cee:	2100      	movs	r1, #0
 80a7cf0:	4b70      	ldr	r3, [pc, #448]	; (80a7eb4 <pow+0x2a4>)
 80a7cf2:	4a71      	ldr	r2, [pc, #452]	; (80a7eb8 <pow+0x2a8>)
 80a7cf4:	f993 3000 	ldrsb.w	r3, [r3]
 80a7cf8:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a7cfc:	2b02      	cmp	r3, #2
 80a7cfe:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a7d02:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a7d06:	9004      	str	r0, [sp, #16]
 80a7d08:	910c      	str	r1, [sp, #48]	; 0x30
 80a7d0a:	9205      	str	r2, [sp, #20]
 80a7d0c:	d172      	bne.n	80a7df4 <pow+0x1e4>
 80a7d0e:	e076      	b.n	80a7dfe <pow+0x1ee>
 80a7d10:	4620      	mov	r0, r4
 80a7d12:	4629      	mov	r1, r5
 80a7d14:	f003 f86c 	bl	80aadf0 <finite>
 80a7d18:	2800      	cmp	r0, #0
 80a7d1a:	d0c3      	beq.n	80a7ca4 <pow+0x94>
 80a7d1c:	4652      	mov	r2, sl
 80a7d1e:	465b      	mov	r3, fp
 80a7d20:	4620      	mov	r0, r4
 80a7d22:	4629      	mov	r1, r5
 80a7d24:	f003 fec4 	bl	80abab0 <__aeabi_dcmplt>
 80a7d28:	2800      	cmp	r0, #0
 80a7d2a:	d0bb      	beq.n	80a7ca4 <pow+0x94>
 80a7d2c:	2101      	movs	r1, #1
 80a7d2e:	9a03      	ldr	r2, [sp, #12]
 80a7d30:	4b60      	ldr	r3, [pc, #384]	; (80a7eb4 <pow+0x2a4>)
 80a7d32:	920c      	str	r2, [sp, #48]	; 0x30
 80a7d34:	f993 3000 	ldrsb.w	r3, [r3]
 80a7d38:	4a5f      	ldr	r2, [pc, #380]	; (80a7eb8 <pow+0x2a8>)
 80a7d3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a7d3e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a7d42:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80a7d46:	2b00      	cmp	r3, #0
 80a7d48:	d17b      	bne.n	80a7e42 <pow+0x232>
 80a7d4a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80a7d4e:	a804      	add	r0, sp, #16
 80a7d50:	f003 f8d2 	bl	80aaef8 <matherr>
 80a7d54:	2800      	cmp	r0, #0
 80a7d56:	d07b      	beq.n	80a7e50 <pow+0x240>
 80a7d58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a7d5a:	b11b      	cbz	r3, 80a7d64 <pow+0x154>
 80a7d5c:	f7fd fcfe 	bl	80a575c <__errno>
 80a7d60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a7d62:	6003      	str	r3, [r0, #0]
 80a7d64:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80a7d68:	e9cd 3400 	strd	r3, r4, [sp]
 80a7d6c:	e79a      	b.n	80a7ca4 <pow+0x94>
 80a7d6e:	a804      	add	r0, sp, #16
 80a7d70:	f003 f8c2 	bl	80aaef8 <matherr>
 80a7d74:	2800      	cmp	r0, #0
 80a7d76:	d070      	beq.n	80a7e5a <pow+0x24a>
 80a7d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a7d7a:	2b00      	cmp	r3, #0
 80a7d7c:	d0f2      	beq.n	80a7d64 <pow+0x154>
 80a7d7e:	f7fd fced 	bl	80a575c <__errno>
 80a7d82:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80a7d86:	e9cd 3400 	strd	r3, r4, [sp]
 80a7d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a7d8c:	6003      	str	r3, [r0, #0]
 80a7d8e:	e789      	b.n	80a7ca4 <pow+0x94>
 80a7d90:	4630      	mov	r0, r6
 80a7d92:	4639      	mov	r1, r7
 80a7d94:	f003 f82c 	bl	80aadf0 <finite>
 80a7d98:	2800      	cmp	r0, #0
 80a7d9a:	d08f      	beq.n	80a7cbc <pow+0xac>
 80a7d9c:	4620      	mov	r0, r4
 80a7d9e:	4629      	mov	r1, r5
 80a7da0:	f003 f826 	bl	80aadf0 <finite>
 80a7da4:	2800      	cmp	r0, #0
 80a7da6:	d089      	beq.n	80a7cbc <pow+0xac>
 80a7da8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a7dac:	4610      	mov	r0, r2
 80a7dae:	4619      	mov	r1, r3
 80a7db0:	f003 fea6 	bl	80abb00 <__aeabi_dcmpun>
 80a7db4:	2800      	cmp	r0, #0
 80a7db6:	f040 80a4 	bne.w	80a7f02 <pow+0x2f2>
 80a7dba:	2203      	movs	r2, #3
 80a7dbc:	9204      	str	r2, [sp, #16]
 80a7dbe:	4a3d      	ldr	r2, [pc, #244]	; (80a7eb4 <pow+0x2a4>)
 80a7dc0:	4b3d      	ldr	r3, [pc, #244]	; (80a7eb8 <pow+0x2a8>)
 80a7dc2:	f992 8000 	ldrsb.w	r8, [r2]
 80a7dc6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a7dca:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a7dce:	900c      	str	r0, [sp, #48]	; 0x30
 80a7dd0:	9305      	str	r3, [sp, #20]
 80a7dd2:	f1b8 0f00 	cmp.w	r8, #0
 80a7dd6:	d145      	bne.n	80a7e64 <pow+0x254>
 80a7dd8:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
 80a7ddc:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80a7ed0 <pow+0x2c0>
 80a7de0:	4652      	mov	r2, sl
 80a7de2:	465b      	mov	r3, fp
 80a7de4:	4630      	mov	r0, r6
 80a7de6:	4639      	mov	r1, r7
 80a7de8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a7dec:	f003 fe60 	bl	80abab0 <__aeabi_dcmplt>
 80a7df0:	2800      	cmp	r0, #0
 80a7df2:	d146      	bne.n	80a7e82 <pow+0x272>
 80a7df4:	a804      	add	r0, sp, #16
 80a7df6:	f003 f87f 	bl	80aaef8 <matherr>
 80a7dfa:	2800      	cmp	r0, #0
 80a7dfc:	d1ac      	bne.n	80a7d58 <pow+0x148>
 80a7dfe:	f7fd fcad 	bl	80a575c <__errno>
 80a7e02:	2322      	movs	r3, #34	; 0x22
 80a7e04:	6003      	str	r3, [r0, #0]
 80a7e06:	e7a7      	b.n	80a7d58 <pow+0x148>
 80a7e08:	2200      	movs	r2, #0
 80a7e0a:	2300      	movs	r3, #0
 80a7e0c:	4620      	mov	r0, r4
 80a7e0e:	4629      	mov	r1, r5
 80a7e10:	f003 fe44 	bl	80aba9c <__aeabi_dcmpeq>
 80a7e14:	2800      	cmp	r0, #0
 80a7e16:	f43f af45 	beq.w	80a7ca4 <pow+0x94>
 80a7e1a:	2201      	movs	r2, #1
 80a7e1c:	2000      	movs	r0, #0
 80a7e1e:	4927      	ldr	r1, [pc, #156]	; (80a7ebc <pow+0x2ac>)
 80a7e20:	4b25      	ldr	r3, [pc, #148]	; (80a7eb8 <pow+0x2a8>)
 80a7e22:	f1b9 0f02 	cmp.w	r9, #2
 80a7e26:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a7e2a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a7e2e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a7e32:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80a7e36:	9204      	str	r2, [sp, #16]
 80a7e38:	9305      	str	r3, [sp, #20]
 80a7e3a:	d198      	bne.n	80a7d6e <pow+0x15e>
 80a7e3c:	e9cd 0100 	strd	r0, r1, [sp]
 80a7e40:	e730      	b.n	80a7ca4 <pow+0x94>
 80a7e42:	2000      	movs	r0, #0
 80a7e44:	491e      	ldr	r1, [pc, #120]	; (80a7ec0 <pow+0x2b0>)
 80a7e46:	2b02      	cmp	r3, #2
 80a7e48:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a7e4c:	f47f af7f 	bne.w	80a7d4e <pow+0x13e>
 80a7e50:	f7fd fc84 	bl	80a575c <__errno>
 80a7e54:	2321      	movs	r3, #33	; 0x21
 80a7e56:	6003      	str	r3, [r0, #0]
 80a7e58:	e77e      	b.n	80a7d58 <pow+0x148>
 80a7e5a:	f7fd fc7f 	bl	80a575c <__errno>
 80a7e5e:	2321      	movs	r3, #33	; 0x21
 80a7e60:	6003      	str	r3, [r0, #0]
 80a7e62:	e789      	b.n	80a7d78 <pow+0x168>
 80a7e64:	4630      	mov	r0, r6
 80a7e66:	2600      	movs	r6, #0
 80a7e68:	4639      	mov	r1, r7
 80a7e6a:	4f16      	ldr	r7, [pc, #88]	; (80a7ec4 <pow+0x2b4>)
 80a7e6c:	4652      	mov	r2, sl
 80a7e6e:	465b      	mov	r3, fp
 80a7e70:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80a7e74:	f003 fe1c 	bl	80abab0 <__aeabi_dcmplt>
 80a7e78:	bb60      	cbnz	r0, 80a7ed4 <pow+0x2c4>
 80a7e7a:	f1b8 0f02 	cmp.w	r8, #2
 80a7e7e:	d0be      	beq.n	80a7dfe <pow+0x1ee>
 80a7e80:	e7b8      	b.n	80a7df4 <pow+0x1e4>
 80a7e82:	2200      	movs	r2, #0
 80a7e84:	4b10      	ldr	r3, [pc, #64]	; (80a7ec8 <pow+0x2b8>)
 80a7e86:	4620      	mov	r0, r4
 80a7e88:	4629      	mov	r1, r5
 80a7e8a:	f003 fb9f 	bl	80ab5cc <__aeabi_dmul>
 80a7e8e:	4604      	mov	r4, r0
 80a7e90:	460d      	mov	r5, r1
 80a7e92:	f003 f839 	bl	80aaf08 <rint>
 80a7e96:	4622      	mov	r2, r4
 80a7e98:	462b      	mov	r3, r5
 80a7e9a:	f003 fdff 	bl	80aba9c <__aeabi_dcmpeq>
 80a7e9e:	bb60      	cbnz	r0, 80a7efa <pow+0x2ea>
 80a7ea0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a7ea4:	4b09      	ldr	r3, [pc, #36]	; (80a7ecc <pow+0x2bc>)
 80a7ea6:	4903      	ldr	r1, [pc, #12]	; (80a7eb4 <pow+0x2a4>)
 80a7ea8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a7eac:	f991 8000 	ldrsb.w	r8, [r1]
 80a7eb0:	e7e3      	b.n	80a7e7a <pow+0x26a>
 80a7eb2:	bf00      	nop
 80a7eb4:	20000004 	.word	0x20000004
 80a7eb8:	080ad730 	.word	0x080ad730
 80a7ebc:	3ff00000 	.word	0x3ff00000
 80a7ec0:	fff00000 	.word	0xfff00000
 80a7ec4:	7ff00000 	.word	0x7ff00000
 80a7ec8:	3fe00000 	.word	0x3fe00000
 80a7ecc:	c7efffff 	.word	0xc7efffff
 80a7ed0:	47efffff 	.word	0x47efffff
 80a7ed4:	2200      	movs	r2, #0
 80a7ed6:	4b19      	ldr	r3, [pc, #100]	; (80a7f3c <pow+0x32c>)
 80a7ed8:	4620      	mov	r0, r4
 80a7eda:	4629      	mov	r1, r5
 80a7edc:	f003 fb76 	bl	80ab5cc <__aeabi_dmul>
 80a7ee0:	4604      	mov	r4, r0
 80a7ee2:	460d      	mov	r5, r1
 80a7ee4:	f003 f810 	bl	80aaf08 <rint>
 80a7ee8:	4622      	mov	r2, r4
 80a7eea:	462b      	mov	r3, r5
 80a7eec:	f003 fdd6 	bl	80aba9c <__aeabi_dcmpeq>
 80a7ef0:	b918      	cbnz	r0, 80a7efa <pow+0x2ea>
 80a7ef2:	2200      	movs	r2, #0
 80a7ef4:	4b12      	ldr	r3, [pc, #72]	; (80a7f40 <pow+0x330>)
 80a7ef6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a7efa:	4b12      	ldr	r3, [pc, #72]	; (80a7f44 <pow+0x334>)
 80a7efc:	f993 8000 	ldrsb.w	r8, [r3]
 80a7f00:	e7bb      	b.n	80a7e7a <pow+0x26a>
 80a7f02:	2201      	movs	r2, #1
 80a7f04:	4b0f      	ldr	r3, [pc, #60]	; (80a7f44 <pow+0x334>)
 80a7f06:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a7f0a:	f993 9000 	ldrsb.w	r9, [r3]
 80a7f0e:	4b0e      	ldr	r3, [pc, #56]	; (80a7f48 <pow+0x338>)
 80a7f10:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a7f14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a7f18:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80a7f1c:	f1b9 0f00 	cmp.w	r9, #0
 80a7f20:	f43f af13 	beq.w	80a7d4a <pow+0x13a>
 80a7f24:	4652      	mov	r2, sl
 80a7f26:	465b      	mov	r3, fp
 80a7f28:	4650      	mov	r0, sl
 80a7f2a:	4659      	mov	r1, fp
 80a7f2c:	f003 fc78 	bl	80ab820 <__aeabi_ddiv>
 80a7f30:	f1b9 0f02 	cmp.w	r9, #2
 80a7f34:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a7f38:	d08a      	beq.n	80a7e50 <pow+0x240>
 80a7f3a:	e708      	b.n	80a7d4e <pow+0x13e>
 80a7f3c:	3fe00000 	.word	0x3fe00000
 80a7f40:	fff00000 	.word	0xfff00000
 80a7f44:	20000004 	.word	0x20000004
 80a7f48:	080ad730 	.word	0x080ad730

080a7f4c <fmodf>:
 80a7f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7f50:	b08a      	sub	sp, #40	; 0x28
 80a7f52:	4607      	mov	r7, r0
 80a7f54:	460c      	mov	r4, r1
 80a7f56:	f001 f955 	bl	80a9204 <__ieee754_fmodf>
 80a7f5a:	4b2a      	ldr	r3, [pc, #168]	; (80a8004 <fmodf+0xb8>)
 80a7f5c:	4605      	mov	r5, r0
 80a7f5e:	f993 8000 	ldrsb.w	r8, [r3]
 80a7f62:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80a7f66:	d03a      	beq.n	80a7fde <fmodf+0x92>
 80a7f68:	4621      	mov	r1, r4
 80a7f6a:	4620      	mov	r0, r4
 80a7f6c:	f004 f94a 	bl	80ac204 <__aeabi_fcmpun>
 80a7f70:	2800      	cmp	r0, #0
 80a7f72:	d134      	bne.n	80a7fde <fmodf+0x92>
 80a7f74:	4639      	mov	r1, r7
 80a7f76:	4638      	mov	r0, r7
 80a7f78:	f004 f944 	bl	80ac204 <__aeabi_fcmpun>
 80a7f7c:	4606      	mov	r6, r0
 80a7f7e:	bb70      	cbnz	r0, 80a7fde <fmodf+0x92>
 80a7f80:	2100      	movs	r1, #0
 80a7f82:	4620      	mov	r0, r4
 80a7f84:	f004 f90c 	bl	80ac1a0 <__aeabi_fcmpeq>
 80a7f88:	b348      	cbz	r0, 80a7fde <fmodf+0x92>
 80a7f8a:	2201      	movs	r2, #1
 80a7f8c:	4b1e      	ldr	r3, [pc, #120]	; (80a8008 <fmodf+0xbc>)
 80a7f8e:	4638      	mov	r0, r7
 80a7f90:	e9cd 2300 	strd	r2, r3, [sp]
 80a7f94:	9608      	str	r6, [sp, #32]
 80a7f96:	f003 fac1 	bl	80ab51c <__aeabi_f2d>
 80a7f9a:	4606      	mov	r6, r0
 80a7f9c:	460f      	mov	r7, r1
 80a7f9e:	4620      	mov	r0, r4
 80a7fa0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80a7fa4:	f003 faba 	bl	80ab51c <__aeabi_f2d>
 80a7fa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a7fac:	f1b8 0f00 	cmp.w	r8, #0
 80a7fb0:	d019      	beq.n	80a7fe6 <fmodf+0x9a>
 80a7fb2:	2200      	movs	r2, #0
 80a7fb4:	2300      	movs	r3, #0
 80a7fb6:	4610      	mov	r0, r2
 80a7fb8:	4619      	mov	r1, r3
 80a7fba:	f003 fc31 	bl	80ab820 <__aeabi_ddiv>
 80a7fbe:	f1b8 0f02 	cmp.w	r8, #2
 80a7fc2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a7fc6:	d110      	bne.n	80a7fea <fmodf+0x9e>
 80a7fc8:	f7fd fbc8 	bl	80a575c <__errno>
 80a7fcc:	2321      	movs	r3, #33	; 0x21
 80a7fce:	6003      	str	r3, [r0, #0]
 80a7fd0:	9b08      	ldr	r3, [sp, #32]
 80a7fd2:	b993      	cbnz	r3, 80a7ffa <fmodf+0xae>
 80a7fd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a7fd8:	f003 fdf0 	bl	80abbbc <__aeabi_d2f>
 80a7fdc:	4605      	mov	r5, r0
 80a7fde:	4628      	mov	r0, r5
 80a7fe0:	b00a      	add	sp, #40	; 0x28
 80a7fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a7fe6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a7fea:	4668      	mov	r0, sp
 80a7fec:	f002 ff84 	bl	80aaef8 <matherr>
 80a7ff0:	2800      	cmp	r0, #0
 80a7ff2:	d0e9      	beq.n	80a7fc8 <fmodf+0x7c>
 80a7ff4:	9b08      	ldr	r3, [sp, #32]
 80a7ff6:	2b00      	cmp	r3, #0
 80a7ff8:	d0ec      	beq.n	80a7fd4 <fmodf+0x88>
 80a7ffa:	f7fd fbaf 	bl	80a575c <__errno>
 80a7ffe:	9b08      	ldr	r3, [sp, #32]
 80a8000:	6003      	str	r3, [r0, #0]
 80a8002:	e7e7      	b.n	80a7fd4 <fmodf+0x88>
 80a8004:	20000004 	.word	0x20000004
 80a8008:	080ad734 	.word	0x080ad734

080a800c <logf>:
 80a800c:	b570      	push	{r4, r5, r6, lr}
 80a800e:	b08a      	sub	sp, #40	; 0x28
 80a8010:	4604      	mov	r4, r0
 80a8012:	f001 f979 	bl	80a9308 <__ieee754_logf>
 80a8016:	4b37      	ldr	r3, [pc, #220]	; (80a80f4 <logf+0xe8>)
 80a8018:	4605      	mov	r5, r0
 80a801a:	f993 6000 	ldrsb.w	r6, [r3]
 80a801e:	1c73      	adds	r3, r6, #1
 80a8020:	d033      	beq.n	80a808a <logf+0x7e>
 80a8022:	4621      	mov	r1, r4
 80a8024:	4620      	mov	r0, r4
 80a8026:	f004 f8ed 	bl	80ac204 <__aeabi_fcmpun>
 80a802a:	2800      	cmp	r0, #0
 80a802c:	d12d      	bne.n	80a808a <logf+0x7e>
 80a802e:	2100      	movs	r1, #0
 80a8030:	4620      	mov	r0, r4
 80a8032:	f004 f8dd 	bl	80ac1f0 <__aeabi_fcmpgt>
 80a8036:	4603      	mov	r3, r0
 80a8038:	bb38      	cbnz	r0, 80a808a <logf+0x7e>
 80a803a:	4a2f      	ldr	r2, [pc, #188]	; (80a80f8 <logf+0xec>)
 80a803c:	4620      	mov	r0, r4
 80a803e:	9308      	str	r3, [sp, #32]
 80a8040:	9201      	str	r2, [sp, #4]
 80a8042:	f003 fa6b 	bl	80ab51c <__aeabi_f2d>
 80a8046:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a804a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a804e:	b1fe      	cbz	r6, 80a8090 <logf+0x84>
 80a8050:	2200      	movs	r2, #0
 80a8052:	4b2a      	ldr	r3, [pc, #168]	; (80a80fc <logf+0xf0>)
 80a8054:	4620      	mov	r0, r4
 80a8056:	2100      	movs	r1, #0
 80a8058:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a805c:	f004 f8a0 	bl	80ac1a0 <__aeabi_fcmpeq>
 80a8060:	2800      	cmp	r0, #0
 80a8062:	d03d      	beq.n	80a80e0 <logf+0xd4>
 80a8064:	2302      	movs	r3, #2
 80a8066:	429e      	cmp	r6, r3
 80a8068:	9300      	str	r3, [sp, #0]
 80a806a:	d133      	bne.n	80a80d4 <logf+0xc8>
 80a806c:	f7fd fb76 	bl	80a575c <__errno>
 80a8070:	2322      	movs	r3, #34	; 0x22
 80a8072:	6003      	str	r3, [r0, #0]
 80a8074:	9b08      	ldr	r3, [sp, #32]
 80a8076:	b31b      	cbz	r3, 80a80c0 <logf+0xb4>
 80a8078:	f7fd fb70 	bl	80a575c <__errno>
 80a807c:	9b08      	ldr	r3, [sp, #32]
 80a807e:	6003      	str	r3, [r0, #0]
 80a8080:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a8084:	f003 fd9a 	bl	80abbbc <__aeabi_d2f>
 80a8088:	4605      	mov	r5, r0
 80a808a:	4628      	mov	r0, r5
 80a808c:	b00a      	add	sp, #40	; 0x28
 80a808e:	bd70      	pop	{r4, r5, r6, pc}
 80a8090:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a8094:	4b1a      	ldr	r3, [pc, #104]	; (80a8100 <logf+0xf4>)
 80a8096:	4620      	mov	r0, r4
 80a8098:	2100      	movs	r1, #0
 80a809a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a809e:	f004 f87f 	bl	80ac1a0 <__aeabi_fcmpeq>
 80a80a2:	b9a8      	cbnz	r0, 80a80d0 <logf+0xc4>
 80a80a4:	2301      	movs	r3, #1
 80a80a6:	9300      	str	r3, [sp, #0]
 80a80a8:	4668      	mov	r0, sp
 80a80aa:	f002 ff25 	bl	80aaef8 <matherr>
 80a80ae:	b1d8      	cbz	r0, 80a80e8 <logf+0xdc>
 80a80b0:	4814      	ldr	r0, [pc, #80]	; (80a8104 <logf+0xf8>)
 80a80b2:	f002 ff23 	bl	80aaefc <nan>
 80a80b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a80ba:	9b08      	ldr	r3, [sp, #32]
 80a80bc:	2b00      	cmp	r3, #0
 80a80be:	d1db      	bne.n	80a8078 <logf+0x6c>
 80a80c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a80c4:	f003 fd7a 	bl	80abbbc <__aeabi_d2f>
 80a80c8:	4605      	mov	r5, r0
 80a80ca:	4628      	mov	r0, r5
 80a80cc:	b00a      	add	sp, #40	; 0x28
 80a80ce:	bd70      	pop	{r4, r5, r6, pc}
 80a80d0:	2302      	movs	r3, #2
 80a80d2:	9300      	str	r3, [sp, #0]
 80a80d4:	4668      	mov	r0, sp
 80a80d6:	f002 ff0f 	bl	80aaef8 <matherr>
 80a80da:	2800      	cmp	r0, #0
 80a80dc:	d1ed      	bne.n	80a80ba <logf+0xae>
 80a80de:	e7c5      	b.n	80a806c <logf+0x60>
 80a80e0:	2301      	movs	r3, #1
 80a80e2:	2e02      	cmp	r6, #2
 80a80e4:	9300      	str	r3, [sp, #0]
 80a80e6:	d1df      	bne.n	80a80a8 <logf+0x9c>
 80a80e8:	f7fd fb38 	bl	80a575c <__errno>
 80a80ec:	2321      	movs	r3, #33	; 0x21
 80a80ee:	6003      	str	r3, [r0, #0]
 80a80f0:	e7de      	b.n	80a80b0 <logf+0xa4>
 80a80f2:	bf00      	nop
 80a80f4:	20000004 	.word	0x20000004
 80a80f8:	080ad73c 	.word	0x080ad73c
 80a80fc:	fff00000 	.word	0xfff00000
 80a8100:	c7efffff 	.word	0xc7efffff
 80a8104:	080ad740 	.word	0x080ad740

080a8108 <__ieee754_pow>:
 80a8108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a810c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80a8110:	461f      	mov	r7, r3
 80a8112:	4698      	mov	r8, r3
 80a8114:	ea55 0302 	orrs.w	r3, r5, r2
 80a8118:	b095      	sub	sp, #84	; 0x54
 80a811a:	d037      	beq.n	80a818c <__ieee754_pow+0x84>
 80a811c:	468b      	mov	fp, r1
 80a811e:	4689      	mov	r9, r1
 80a8120:	496f      	ldr	r1, [pc, #444]	; (80a82e0 <__ieee754_pow+0x1d8>)
 80a8122:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
 80a8126:	428c      	cmp	r4, r1
 80a8128:	4682      	mov	sl, r0
 80a812a:	4603      	mov	r3, r0
 80a812c:	dc28      	bgt.n	80a8180 <__ieee754_pow+0x78>
 80a812e:	4616      	mov	r6, r2
 80a8130:	d035      	beq.n	80a819e <__ieee754_pow+0x96>
 80a8132:	428d      	cmp	r5, r1
 80a8134:	dc24      	bgt.n	80a8180 <__ieee754_pow+0x78>
 80a8136:	496a      	ldr	r1, [pc, #424]	; (80a82e0 <__ieee754_pow+0x1d8>)
 80a8138:	428d      	cmp	r5, r1
 80a813a:	d01f      	beq.n	80a817c <__ieee754_pow+0x74>
 80a813c:	f1b9 0f00 	cmp.w	r9, #0
 80a8140:	db36      	blt.n	80a81b0 <__ieee754_pow+0xa8>
 80a8142:	2100      	movs	r1, #0
 80a8144:	9102      	str	r1, [sp, #8]
 80a8146:	2a00      	cmp	r2, #0
 80a8148:	d14d      	bne.n	80a81e6 <__ieee754_pow+0xde>
 80a814a:	4a65      	ldr	r2, [pc, #404]	; (80a82e0 <__ieee754_pow+0x1d8>)
 80a814c:	4295      	cmp	r5, r2
 80a814e:	f000 809d 	beq.w	80a828c <__ieee754_pow+0x184>
 80a8152:	4a64      	ldr	r2, [pc, #400]	; (80a82e4 <__ieee754_pow+0x1dc>)
 80a8154:	4295      	cmp	r5, r2
 80a8156:	f000 80ab 	beq.w	80a82b0 <__ieee754_pow+0x1a8>
 80a815a:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
 80a815e:	f000 84d4 	beq.w	80a8b0a <__ieee754_pow+0xa02>
 80a8162:	4a61      	ldr	r2, [pc, #388]	; (80a82e8 <__ieee754_pow+0x1e0>)
 80a8164:	4590      	cmp	r8, r2
 80a8166:	d13e      	bne.n	80a81e6 <__ieee754_pow+0xde>
 80a8168:	f1b9 0f00 	cmp.w	r9, #0
 80a816c:	db3b      	blt.n	80a81e6 <__ieee754_pow+0xde>
 80a816e:	4650      	mov	r0, sl
 80a8170:	4659      	mov	r1, fp
 80a8172:	b015      	add	sp, #84	; 0x54
 80a8174:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8178:	f000 bf80 	b.w	80a907c <__ieee754_sqrt>
 80a817c:	2a00      	cmp	r2, #0
 80a817e:	d0dd      	beq.n	80a813c <__ieee754_pow+0x34>
 80a8180:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a8184:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a8188:	4323      	orrs	r3, r4
 80a818a:	d10b      	bne.n	80a81a4 <__ieee754_pow+0x9c>
 80a818c:	2300      	movs	r3, #0
 80a818e:	4c55      	ldr	r4, [pc, #340]	; (80a82e4 <__ieee754_pow+0x1dc>)
 80a8190:	e9cd 3400 	strd	r3, r4, [sp]
 80a8194:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a8198:	b015      	add	sp, #84	; 0x54
 80a819a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a819e:	b908      	cbnz	r0, 80a81a4 <__ieee754_pow+0x9c>
 80a81a0:	42a5      	cmp	r5, r4
 80a81a2:	ddc8      	ble.n	80a8136 <__ieee754_pow+0x2e>
 80a81a4:	4851      	ldr	r0, [pc, #324]	; (80a82ec <__ieee754_pow+0x1e4>)
 80a81a6:	b015      	add	sp, #84	; 0x54
 80a81a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a81ac:	f002 bea6 	b.w	80aaefc <nan>
 80a81b0:	494f      	ldr	r1, [pc, #316]	; (80a82f0 <__ieee754_pow+0x1e8>)
 80a81b2:	428d      	cmp	r5, r1
 80a81b4:	f300 8085 	bgt.w	80a82c2 <__ieee754_pow+0x1ba>
 80a81b8:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80a81bc:	428d      	cmp	r5, r1
 80a81be:	dd0e      	ble.n	80a81de <__ieee754_pow+0xd6>
 80a81c0:	1529      	asrs	r1, r5, #20
 80a81c2:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80a81c6:	2914      	cmp	r1, #20
 80a81c8:	f340 84a9 	ble.w	80a8b1e <__ieee754_pow+0xa16>
 80a81cc:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80a81d0:	fa22 f001 	lsr.w	r0, r2, r1
 80a81d4:	fa00 f101 	lsl.w	r1, r0, r1
 80a81d8:	4291      	cmp	r1, r2
 80a81da:	f000 84f6 	beq.w	80a8bca <__ieee754_pow+0xac2>
 80a81de:	2100      	movs	r1, #0
 80a81e0:	9102      	str	r1, [sp, #8]
 80a81e2:	2a00      	cmp	r2, #0
 80a81e4:	d0b5      	beq.n	80a8152 <__ieee754_pow+0x4a>
 80a81e6:	4650      	mov	r0, sl
 80a81e8:	4659      	mov	r1, fp
 80a81ea:	930c      	str	r3, [sp, #48]	; 0x30
 80a81ec:	f002 fdfc 	bl	80aade8 <fabs>
 80a81f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a81f2:	e9cd 0100 	strd	r0, r1, [sp]
 80a81f6:	bb43      	cbnz	r3, 80a824a <__ieee754_pow+0x142>
 80a81f8:	b124      	cbz	r4, 80a8204 <__ieee754_pow+0xfc>
 80a81fa:	4b3a      	ldr	r3, [pc, #232]	; (80a82e4 <__ieee754_pow+0x1dc>)
 80a81fc:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80a8200:	429a      	cmp	r2, r3
 80a8202:	d122      	bne.n	80a824a <__ieee754_pow+0x142>
 80a8204:	f1b8 0f00 	cmp.w	r8, #0
 80a8208:	da07      	bge.n	80a821a <__ieee754_pow+0x112>
 80a820a:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a820e:	2000      	movs	r0, #0
 80a8210:	4934      	ldr	r1, [pc, #208]	; (80a82e4 <__ieee754_pow+0x1dc>)
 80a8212:	f003 fb05 	bl	80ab820 <__aeabi_ddiv>
 80a8216:	e9cd 0100 	strd	r0, r1, [sp]
 80a821a:	f1b9 0f00 	cmp.w	r9, #0
 80a821e:	dab9      	bge.n	80a8194 <__ieee754_pow+0x8c>
 80a8220:	9b02      	ldr	r3, [sp, #8]
 80a8222:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a8226:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a822a:	4323      	orrs	r3, r4
 80a822c:	f040 849c 	bne.w	80a8b68 <__ieee754_pow+0xa60>
 80a8230:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a8234:	4610      	mov	r0, r2
 80a8236:	4619      	mov	r1, r3
 80a8238:	f003 f810 	bl	80ab25c <__aeabi_dsub>
 80a823c:	4602      	mov	r2, r0
 80a823e:	460b      	mov	r3, r1
 80a8240:	f003 faee 	bl	80ab820 <__aeabi_ddiv>
 80a8244:	e9cd 0100 	strd	r0, r1, [sp]
 80a8248:	e7a4      	b.n	80a8194 <__ieee754_pow+0x8c>
 80a824a:	9a02      	ldr	r2, [sp, #8]
 80a824c:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80a8250:	3b01      	subs	r3, #1
 80a8252:	930c      	str	r3, [sp, #48]	; 0x30
 80a8254:	4313      	orrs	r3, r2
 80a8256:	d037      	beq.n	80a82c8 <__ieee754_pow+0x1c0>
 80a8258:	4b26      	ldr	r3, [pc, #152]	; (80a82f4 <__ieee754_pow+0x1ec>)
 80a825a:	429d      	cmp	r5, r3
 80a825c:	dd4e      	ble.n	80a82fc <__ieee754_pow+0x1f4>
 80a825e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80a8262:	429d      	cmp	r5, r3
 80a8264:	4b24      	ldr	r3, [pc, #144]	; (80a82f8 <__ieee754_pow+0x1f0>)
 80a8266:	f340 83df 	ble.w	80a8a28 <__ieee754_pow+0x920>
 80a826a:	429c      	cmp	r4, r3
 80a826c:	f340 835e 	ble.w	80a892c <__ieee754_pow+0x824>
 80a8270:	f1b8 0f00 	cmp.w	r8, #0
 80a8274:	f340 835e 	ble.w	80a8934 <__ieee754_pow+0x82c>
 80a8278:	a317      	add	r3, pc, #92	; (adr r3, 80a82d8 <__ieee754_pow+0x1d0>)
 80a827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a827e:	4610      	mov	r0, r2
 80a8280:	4619      	mov	r1, r3
 80a8282:	f003 f9a3 	bl	80ab5cc <__aeabi_dmul>
 80a8286:	e9cd 0100 	strd	r0, r1, [sp]
 80a828a:	e783      	b.n	80a8194 <__ieee754_pow+0x8c>
 80a828c:	f104 4240 	add.w	r2, r4, #3221225472	; 0xc0000000
 80a8290:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80a8294:	4313      	orrs	r3, r2
 80a8296:	f43f af79 	beq.w	80a818c <__ieee754_pow+0x84>
 80a829a:	4b17      	ldr	r3, [pc, #92]	; (80a82f8 <__ieee754_pow+0x1f0>)
 80a829c:	429c      	cmp	r4, r3
 80a829e:	f340 8373 	ble.w	80a8988 <__ieee754_pow+0x880>
 80a82a2:	f1b8 0f00 	cmp.w	r8, #0
 80a82a6:	f2c0 8345 	blt.w	80a8934 <__ieee754_pow+0x82c>
 80a82aa:	e9cd 6700 	strd	r6, r7, [sp]
 80a82ae:	e771      	b.n	80a8194 <__ieee754_pow+0x8c>
 80a82b0:	f1b8 0f00 	cmp.w	r8, #0
 80a82b4:	f2c0 841f 	blt.w	80a8af6 <__ieee754_pow+0x9ee>
 80a82b8:	4650      	mov	r0, sl
 80a82ba:	4659      	mov	r1, fp
 80a82bc:	e9cd 0100 	strd	r0, r1, [sp]
 80a82c0:	e768      	b.n	80a8194 <__ieee754_pow+0x8c>
 80a82c2:	2102      	movs	r1, #2
 80a82c4:	9102      	str	r1, [sp, #8]
 80a82c6:	e73e      	b.n	80a8146 <__ieee754_pow+0x3e>
 80a82c8:	4652      	mov	r2, sl
 80a82ca:	4650      	mov	r0, sl
 80a82cc:	465b      	mov	r3, fp
 80a82ce:	4659      	mov	r1, fp
 80a82d0:	e7b2      	b.n	80a8238 <__ieee754_pow+0x130>
 80a82d2:	bf00      	nop
 80a82d4:	f3af 8000 	nop.w
 80a82d8:	8800759c 	.word	0x8800759c
 80a82dc:	7e37e43c 	.word	0x7e37e43c
 80a82e0:	7ff00000 	.word	0x7ff00000
 80a82e4:	3ff00000 	.word	0x3ff00000
 80a82e8:	3fe00000 	.word	0x3fe00000
 80a82ec:	080ad740 	.word	0x080ad740
 80a82f0:	433fffff 	.word	0x433fffff
 80a82f4:	41e00000 	.word	0x41e00000
 80a82f8:	3fefffff 	.word	0x3fefffff
 80a82fc:	4bd0      	ldr	r3, [pc, #832]	; (80a8640 <__ieee754_pow+0x538>)
 80a82fe:	ea09 0303 	and.w	r3, r9, r3
 80a8302:	2b00      	cmp	r3, #0
 80a8304:	f040 8356 	bne.w	80a89b4 <__ieee754_pow+0x8ac>
 80a8308:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a830c:	2200      	movs	r2, #0
 80a830e:	4bcd      	ldr	r3, [pc, #820]	; (80a8644 <__ieee754_pow+0x53c>)
 80a8310:	f003 f95c 	bl	80ab5cc <__aeabi_dmul>
 80a8314:	f06f 0c34 	mvn.w	ip, #52	; 0x34
 80a8318:	460c      	mov	r4, r1
 80a831a:	e9cd 0100 	strd	r0, r1, [sp]
 80a831e:	1523      	asrs	r3, r4, #20
 80a8320:	4ac9      	ldr	r2, [pc, #804]	; (80a8648 <__ieee754_pow+0x540>)
 80a8322:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80a8326:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a832a:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80a832e:	eb03 010c 	add.w	r1, r3, ip
 80a8332:	4294      	cmp	r4, r2
 80a8334:	910d      	str	r1, [sp, #52]	; 0x34
 80a8336:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80a833a:	f340 832e 	ble.w	80a899a <__ieee754_pow+0x892>
 80a833e:	4bc3      	ldr	r3, [pc, #780]	; (80a864c <__ieee754_pow+0x544>)
 80a8340:	429c      	cmp	r4, r3
 80a8342:	f340 841e 	ble.w	80a8b82 <__ieee754_pow+0xa7a>
 80a8346:	2300      	movs	r3, #0
 80a8348:	2400      	movs	r4, #0
 80a834a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a834e:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a8352:	2300      	movs	r3, #0
 80a8354:	f04f 0a00 	mov.w	sl, #0
 80a8358:	4cbd      	ldr	r4, [pc, #756]	; (80a8650 <__ieee754_pow+0x548>)
 80a835a:	3101      	adds	r1, #1
 80a835c:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a8360:	910d      	str	r1, [sp, #52]	; 0x34
 80a8362:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80a8366:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a836a:	4629      	mov	r1, r5
 80a836c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a8370:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a8374:	f002 ff72 	bl	80ab25c <__aeabi_dsub>
 80a8378:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a837c:	4680      	mov	r8, r0
 80a837e:	4689      	mov	r9, r1
 80a8380:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a8384:	f002 ff6c 	bl	80ab260 <__adddf3>
 80a8388:	4602      	mov	r2, r0
 80a838a:	460b      	mov	r3, r1
 80a838c:	2000      	movs	r0, #0
 80a838e:	49b0      	ldr	r1, [pc, #704]	; (80a8650 <__ieee754_pow+0x548>)
 80a8390:	f003 fa46 	bl	80ab820 <__aeabi_ddiv>
 80a8394:	4603      	mov	r3, r0
 80a8396:	460c      	mov	r4, r1
 80a8398:	461a      	mov	r2, r3
 80a839a:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 80a839e:	4640      	mov	r0, r8
 80a83a0:	4623      	mov	r3, r4
 80a83a2:	4649      	mov	r1, r9
 80a83a4:	f003 f912 	bl	80ab5cc <__aeabi_dmul>
 80a83a8:	460c      	mov	r4, r1
 80a83aa:	4603      	mov	r3, r0
 80a83ac:	4601      	mov	r1, r0
 80a83ae:	4622      	mov	r2, r4
 80a83b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80a83b4:	2400      	movs	r4, #0
 80a83b6:	2000      	movs	r0, #0
 80a83b8:	106b      	asrs	r3, r5, #1
 80a83ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80a83be:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80a83c2:	e9cd 1200 	strd	r1, r2, [sp]
 80a83c6:	eb03 010a 	add.w	r1, r3, sl
 80a83ca:	9400      	str	r4, [sp, #0]
 80a83cc:	e9dd ab00 	ldrd	sl, fp, [sp]
 80a83d0:	4604      	mov	r4, r0
 80a83d2:	460d      	mov	r5, r1
 80a83d4:	4602      	mov	r2, r0
 80a83d6:	460b      	mov	r3, r1
 80a83d8:	4650      	mov	r0, sl
 80a83da:	4659      	mov	r1, fp
 80a83dc:	f003 f8f6 	bl	80ab5cc <__aeabi_dmul>
 80a83e0:	4602      	mov	r2, r0
 80a83e2:	460b      	mov	r3, r1
 80a83e4:	4640      	mov	r0, r8
 80a83e6:	4649      	mov	r1, r9
 80a83e8:	f002 ff38 	bl	80ab25c <__aeabi_dsub>
 80a83ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a83f0:	4680      	mov	r8, r0
 80a83f2:	4689      	mov	r9, r1
 80a83f4:	4620      	mov	r0, r4
 80a83f6:	4629      	mov	r1, r5
 80a83f8:	f002 ff30 	bl	80ab25c <__aeabi_dsub>
 80a83fc:	4602      	mov	r2, r0
 80a83fe:	460b      	mov	r3, r1
 80a8400:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a8404:	f002 ff2a 	bl	80ab25c <__aeabi_dsub>
 80a8408:	4652      	mov	r2, sl
 80a840a:	465b      	mov	r3, fp
 80a840c:	f003 f8de 	bl	80ab5cc <__aeabi_dmul>
 80a8410:	4602      	mov	r2, r0
 80a8412:	460b      	mov	r3, r1
 80a8414:	4640      	mov	r0, r8
 80a8416:	4649      	mov	r1, r9
 80a8418:	f002 ff20 	bl	80ab25c <__aeabi_dsub>
 80a841c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a8420:	f003 f8d4 	bl	80ab5cc <__aeabi_dmul>
 80a8424:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80a8428:	4604      	mov	r4, r0
 80a842a:	460d      	mov	r5, r1
 80a842c:	4642      	mov	r2, r8
 80a842e:	464b      	mov	r3, r9
 80a8430:	4640      	mov	r0, r8
 80a8432:	4649      	mov	r1, r9
 80a8434:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a8438:	f003 f8c8 	bl	80ab5cc <__aeabi_dmul>
 80a843c:	a36e      	add	r3, pc, #440	; (adr r3, 80a85f8 <__ieee754_pow+0x4f0>)
 80a843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8442:	4604      	mov	r4, r0
 80a8444:	460d      	mov	r5, r1
 80a8446:	f003 f8c1 	bl	80ab5cc <__aeabi_dmul>
 80a844a:	a36d      	add	r3, pc, #436	; (adr r3, 80a8600 <__ieee754_pow+0x4f8>)
 80a844c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8450:	f002 ff06 	bl	80ab260 <__adddf3>
 80a8454:	4622      	mov	r2, r4
 80a8456:	462b      	mov	r3, r5
 80a8458:	f003 f8b8 	bl	80ab5cc <__aeabi_dmul>
 80a845c:	a36a      	add	r3, pc, #424	; (adr r3, 80a8608 <__ieee754_pow+0x500>)
 80a845e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8462:	f002 fefd 	bl	80ab260 <__adddf3>
 80a8466:	4622      	mov	r2, r4
 80a8468:	462b      	mov	r3, r5
 80a846a:	f003 f8af 	bl	80ab5cc <__aeabi_dmul>
 80a846e:	a368      	add	r3, pc, #416	; (adr r3, 80a8610 <__ieee754_pow+0x508>)
 80a8470:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8474:	f002 fef4 	bl	80ab260 <__adddf3>
 80a8478:	4622      	mov	r2, r4
 80a847a:	462b      	mov	r3, r5
 80a847c:	f003 f8a6 	bl	80ab5cc <__aeabi_dmul>
 80a8480:	a365      	add	r3, pc, #404	; (adr r3, 80a8618 <__ieee754_pow+0x510>)
 80a8482:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8486:	f002 feeb 	bl	80ab260 <__adddf3>
 80a848a:	4622      	mov	r2, r4
 80a848c:	462b      	mov	r3, r5
 80a848e:	f003 f89d 	bl	80ab5cc <__aeabi_dmul>
 80a8492:	a363      	add	r3, pc, #396	; (adr r3, 80a8620 <__ieee754_pow+0x518>)
 80a8494:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8498:	f002 fee2 	bl	80ab260 <__adddf3>
 80a849c:	4622      	mov	r2, r4
 80a849e:	462b      	mov	r3, r5
 80a84a0:	4604      	mov	r4, r0
 80a84a2:	460d      	mov	r5, r1
 80a84a4:	4610      	mov	r0, r2
 80a84a6:	4619      	mov	r1, r3
 80a84a8:	f003 f890 	bl	80ab5cc <__aeabi_dmul>
 80a84ac:	4602      	mov	r2, r0
 80a84ae:	460b      	mov	r3, r1
 80a84b0:	4620      	mov	r0, r4
 80a84b2:	4629      	mov	r1, r5
 80a84b4:	f003 f88a 	bl	80ab5cc <__aeabi_dmul>
 80a84b8:	4604      	mov	r4, r0
 80a84ba:	460d      	mov	r5, r1
 80a84bc:	4652      	mov	r2, sl
 80a84be:	465b      	mov	r3, fp
 80a84c0:	4640      	mov	r0, r8
 80a84c2:	4649      	mov	r1, r9
 80a84c4:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80a84c8:	f002 feca 	bl	80ab260 <__adddf3>
 80a84cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a84d0:	f003 f87c 	bl	80ab5cc <__aeabi_dmul>
 80a84d4:	4622      	mov	r2, r4
 80a84d6:	462b      	mov	r3, r5
 80a84d8:	f002 fec2 	bl	80ab260 <__adddf3>
 80a84dc:	4652      	mov	r2, sl
 80a84de:	4604      	mov	r4, r0
 80a84e0:	460d      	mov	r5, r1
 80a84e2:	465b      	mov	r3, fp
 80a84e4:	4650      	mov	r0, sl
 80a84e6:	4659      	mov	r1, fp
 80a84e8:	f003 f870 	bl	80ab5cc <__aeabi_dmul>
 80a84ec:	46a0      	mov	r8, r4
 80a84ee:	46a9      	mov	r9, r5
 80a84f0:	4604      	mov	r4, r0
 80a84f2:	460d      	mov	r5, r1
 80a84f4:	2200      	movs	r2, #0
 80a84f6:	4b57      	ldr	r3, [pc, #348]	; (80a8654 <__ieee754_pow+0x54c>)
 80a84f8:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80a84fc:	f002 feb0 	bl	80ab260 <__adddf3>
 80a8500:	4642      	mov	r2, r8
 80a8502:	464b      	mov	r3, r9
 80a8504:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80a8508:	f002 feaa 	bl	80ab260 <__adddf3>
 80a850c:	460d      	mov	r5, r1
 80a850e:	9c00      	ldr	r4, [sp, #0]
 80a8510:	462b      	mov	r3, r5
 80a8512:	4622      	mov	r2, r4
 80a8514:	4650      	mov	r0, sl
 80a8516:	4659      	mov	r1, fp
 80a8518:	f003 f858 	bl	80ab5cc <__aeabi_dmul>
 80a851c:	4680      	mov	r8, r0
 80a851e:	4689      	mov	r9, r1
 80a8520:	2200      	movs	r2, #0
 80a8522:	4620      	mov	r0, r4
 80a8524:	4629      	mov	r1, r5
 80a8526:	4b4b      	ldr	r3, [pc, #300]	; (80a8654 <__ieee754_pow+0x54c>)
 80a8528:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a852c:	f002 fe96 	bl	80ab25c <__aeabi_dsub>
 80a8530:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80a8534:	f002 fe92 	bl	80ab25c <__aeabi_dsub>
 80a8538:	4602      	mov	r2, r0
 80a853a:	460b      	mov	r3, r1
 80a853c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80a8540:	f002 fe8c 	bl	80ab25c <__aeabi_dsub>
 80a8544:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a8548:	f003 f840 	bl	80ab5cc <__aeabi_dmul>
 80a854c:	4622      	mov	r2, r4
 80a854e:	4680      	mov	r8, r0
 80a8550:	4689      	mov	r9, r1
 80a8552:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a8556:	462b      	mov	r3, r5
 80a8558:	f003 f838 	bl	80ab5cc <__aeabi_dmul>
 80a855c:	4602      	mov	r2, r0
 80a855e:	460b      	mov	r3, r1
 80a8560:	4640      	mov	r0, r8
 80a8562:	4649      	mov	r1, r9
 80a8564:	f002 fe7c 	bl	80ab260 <__adddf3>
 80a8568:	4682      	mov	sl, r0
 80a856a:	468b      	mov	fp, r1
 80a856c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a8570:	4652      	mov	r2, sl
 80a8572:	465b      	mov	r3, fp
 80a8574:	f002 fe74 	bl	80ab260 <__adddf3>
 80a8578:	a32b      	add	r3, pc, #172	; (adr r3, 80a8628 <__ieee754_pow+0x520>)
 80a857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a857e:	9c00      	ldr	r4, [sp, #0]
 80a8580:	460d      	mov	r5, r1
 80a8582:	4620      	mov	r0, r4
 80a8584:	f003 f822 	bl	80ab5cc <__aeabi_dmul>
 80a8588:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a858c:	4680      	mov	r8, r0
 80a858e:	4689      	mov	r9, r1
 80a8590:	4620      	mov	r0, r4
 80a8592:	4629      	mov	r1, r5
 80a8594:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80a8598:	f002 fe60 	bl	80ab25c <__aeabi_dsub>
 80a859c:	4602      	mov	r2, r0
 80a859e:	460b      	mov	r3, r1
 80a85a0:	4650      	mov	r0, sl
 80a85a2:	4659      	mov	r1, fp
 80a85a4:	f002 fe5a 	bl	80ab25c <__aeabi_dsub>
 80a85a8:	a321      	add	r3, pc, #132	; (adr r3, 80a8630 <__ieee754_pow+0x528>)
 80a85aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a85ae:	f003 f80d 	bl	80ab5cc <__aeabi_dmul>
 80a85b2:	a321      	add	r3, pc, #132	; (adr r3, 80a8638 <__ieee754_pow+0x530>)
 80a85b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a85b8:	4680      	mov	r8, r0
 80a85ba:	4689      	mov	r9, r1
 80a85bc:	4620      	mov	r0, r4
 80a85be:	4629      	mov	r1, r5
 80a85c0:	f003 f804 	bl	80ab5cc <__aeabi_dmul>
 80a85c4:	4602      	mov	r2, r0
 80a85c6:	460b      	mov	r3, r1
 80a85c8:	4640      	mov	r0, r8
 80a85ca:	4649      	mov	r1, r9
 80a85cc:	f002 fe48 	bl	80ab260 <__adddf3>
 80a85d0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80a85d4:	f002 fe44 	bl	80ab260 <__adddf3>
 80a85d8:	4682      	mov	sl, r0
 80a85da:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a85dc:	468b      	mov	fp, r1
 80a85de:	f002 ff8b 	bl	80ab4f8 <__aeabi_i2d>
 80a85e2:	4680      	mov	r8, r0
 80a85e4:	4689      	mov	r9, r1
 80a85e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a85ea:	4652      	mov	r2, sl
 80a85ec:	465b      	mov	r3, fp
 80a85ee:	f002 fe37 	bl	80ab260 <__adddf3>
 80a85f2:	e031      	b.n	80a8658 <__ieee754_pow+0x550>
 80a85f4:	f3af 8000 	nop.w
 80a85f8:	4a454eef 	.word	0x4a454eef
 80a85fc:	3fca7e28 	.word	0x3fca7e28
 80a8600:	93c9db65 	.word	0x93c9db65
 80a8604:	3fcd864a 	.word	0x3fcd864a
 80a8608:	a91d4101 	.word	0xa91d4101
 80a860c:	3fd17460 	.word	0x3fd17460
 80a8610:	518f264d 	.word	0x518f264d
 80a8614:	3fd55555 	.word	0x3fd55555
 80a8618:	db6fabff 	.word	0xdb6fabff
 80a861c:	3fdb6db6 	.word	0x3fdb6db6
 80a8620:	33333303 	.word	0x33333303
 80a8624:	3fe33333 	.word	0x3fe33333
 80a8628:	e0000000 	.word	0xe0000000
 80a862c:	3feec709 	.word	0x3feec709
 80a8630:	dc3a03fd 	.word	0xdc3a03fd
 80a8634:	3feec709 	.word	0x3feec709
 80a8638:	145b01f5 	.word	0x145b01f5
 80a863c:	be3e2fe0 	.word	0xbe3e2fe0
 80a8640:	7ff00000 	.word	0x7ff00000
 80a8644:	43400000 	.word	0x43400000
 80a8648:	0003988e 	.word	0x0003988e
 80a864c:	000bb679 	.word	0x000bb679
 80a8650:	3ff00000 	.word	0x3ff00000
 80a8654:	40080000 	.word	0x40080000
 80a8658:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a865c:	f002 fe00 	bl	80ab260 <__adddf3>
 80a8660:	4642      	mov	r2, r8
 80a8662:	464b      	mov	r3, r9
 80a8664:	f002 fdfc 	bl	80ab260 <__adddf3>
 80a8668:	9c00      	ldr	r4, [sp, #0]
 80a866a:	4642      	mov	r2, r8
 80a866c:	464b      	mov	r3, r9
 80a866e:	4620      	mov	r0, r4
 80a8670:	460d      	mov	r5, r1
 80a8672:	f002 fdf3 	bl	80ab25c <__aeabi_dsub>
 80a8676:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a867a:	f002 fdef 	bl	80ab25c <__aeabi_dsub>
 80a867e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a8682:	f002 fdeb 	bl	80ab25c <__aeabi_dsub>
 80a8686:	4602      	mov	r2, r0
 80a8688:	460b      	mov	r3, r1
 80a868a:	4650      	mov	r0, sl
 80a868c:	4659      	mov	r1, fp
 80a868e:	f002 fde5 	bl	80ab25c <__aeabi_dsub>
 80a8692:	4682      	mov	sl, r0
 80a8694:	468b      	mov	fp, r1
 80a8696:	9b02      	ldr	r3, [sp, #8]
 80a8698:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a869a:	3b01      	subs	r3, #1
 80a869c:	4313      	orrs	r3, r2
 80a869e:	f04f 0200 	mov.w	r2, #0
 80a86a2:	bf0c      	ite	eq
 80a86a4:	4bda      	ldreq	r3, [pc, #872]	; (80a8a10 <__ieee754_pow+0x908>)
 80a86a6:	4bdb      	ldrne	r3, [pc, #876]	; (80a8a14 <__ieee754_pow+0x90c>)
 80a86a8:	e9cd 6700 	strd	r6, r7, [sp]
 80a86ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a86b0:	2300      	movs	r3, #0
 80a86b2:	9300      	str	r3, [sp, #0]
 80a86b4:	e9dd 8900 	ldrd	r8, r9, [sp]
 80a86b8:	4630      	mov	r0, r6
 80a86ba:	4642      	mov	r2, r8
 80a86bc:	4639      	mov	r1, r7
 80a86be:	464b      	mov	r3, r9
 80a86c0:	f002 fdcc 	bl	80ab25c <__aeabi_dsub>
 80a86c4:	4622      	mov	r2, r4
 80a86c6:	462b      	mov	r3, r5
 80a86c8:	f002 ff80 	bl	80ab5cc <__aeabi_dmul>
 80a86cc:	4632      	mov	r2, r6
 80a86ce:	463b      	mov	r3, r7
 80a86d0:	4606      	mov	r6, r0
 80a86d2:	460f      	mov	r7, r1
 80a86d4:	4650      	mov	r0, sl
 80a86d6:	4659      	mov	r1, fp
 80a86d8:	f002 ff78 	bl	80ab5cc <__aeabi_dmul>
 80a86dc:	4602      	mov	r2, r0
 80a86de:	460b      	mov	r3, r1
 80a86e0:	4630      	mov	r0, r6
 80a86e2:	4639      	mov	r1, r7
 80a86e4:	f002 fdbc 	bl	80ab260 <__adddf3>
 80a86e8:	4642      	mov	r2, r8
 80a86ea:	4682      	mov	sl, r0
 80a86ec:	468b      	mov	fp, r1
 80a86ee:	464b      	mov	r3, r9
 80a86f0:	4620      	mov	r0, r4
 80a86f2:	4629      	mov	r1, r5
 80a86f4:	f002 ff6a 	bl	80ab5cc <__aeabi_dmul>
 80a86f8:	4606      	mov	r6, r0
 80a86fa:	460f      	mov	r7, r1
 80a86fc:	4650      	mov	r0, sl
 80a86fe:	463b      	mov	r3, r7
 80a8700:	4659      	mov	r1, fp
 80a8702:	4632      	mov	r2, r6
 80a8704:	f002 fdac 	bl	80ab260 <__adddf3>
 80a8708:	4bc3      	ldr	r3, [pc, #780]	; (80a8a18 <__ieee754_pow+0x910>)
 80a870a:	4604      	mov	r4, r0
 80a870c:	4299      	cmp	r1, r3
 80a870e:	460d      	mov	r5, r1
 80a8710:	4688      	mov	r8, r1
 80a8712:	f340 8114 	ble.w	80a893e <__ieee754_pow+0x836>
 80a8716:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80a871a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80a871e:	4303      	orrs	r3, r0
 80a8720:	f040 8212 	bne.w	80a8b48 <__ieee754_pow+0xa40>
 80a8724:	a3a6      	add	r3, pc, #664	; (adr r3, 80a89c0 <__ieee754_pow+0x8b8>)
 80a8726:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a872a:	4650      	mov	r0, sl
 80a872c:	4659      	mov	r1, fp
 80a872e:	f002 fd97 	bl	80ab260 <__adddf3>
 80a8732:	4632      	mov	r2, r6
 80a8734:	e9cd 0100 	strd	r0, r1, [sp]
 80a8738:	463b      	mov	r3, r7
 80a873a:	4620      	mov	r0, r4
 80a873c:	4629      	mov	r1, r5
 80a873e:	f002 fd8d 	bl	80ab25c <__aeabi_dsub>
 80a8742:	4602      	mov	r2, r0
 80a8744:	460b      	mov	r3, r1
 80a8746:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a874a:	f003 f9cf 	bl	80abaec <__aeabi_dcmpgt>
 80a874e:	2800      	cmp	r0, #0
 80a8750:	f040 81fa 	bne.w	80a8b48 <__ieee754_pow+0xa40>
 80a8754:	f3c8 530a 	ubfx	r3, r8, #20, #11
 80a8758:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80a875c:	2000      	movs	r0, #0
 80a875e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80a8762:	fa42 f303 	asr.w	r3, r2, r3
 80a8766:	4443      	add	r3, r8
 80a8768:	4cac      	ldr	r4, [pc, #688]	; (80a8a1c <__ieee754_pow+0x914>)
 80a876a:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80a876e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a8772:	fa44 fc02 	asr.w	ip, r4, r2
 80a8776:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80a877a:	ea23 010c 	bic.w	r1, r3, ip
 80a877e:	f1c2 0414 	rsb	r4, r2, #20
 80a8782:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 80a8786:	f1b8 0f00 	cmp.w	r8, #0
 80a878a:	460b      	mov	r3, r1
 80a878c:	fa45 f104 	asr.w	r1, r5, r4
 80a8790:	910c      	str	r1, [sp, #48]	; 0x30
 80a8792:	bfb8      	it	lt
 80a8794:	4249      	neglt	r1, r1
 80a8796:	4602      	mov	r2, r0
 80a8798:	bfb8      	it	lt
 80a879a:	910c      	strlt	r1, [sp, #48]	; 0x30
 80a879c:	4630      	mov	r0, r6
 80a879e:	4639      	mov	r1, r7
 80a87a0:	f002 fd5c 	bl	80ab25c <__aeabi_dsub>
 80a87a4:	4606      	mov	r6, r0
 80a87a6:	460f      	mov	r7, r1
 80a87a8:	4650      	mov	r0, sl
 80a87aa:	463b      	mov	r3, r7
 80a87ac:	4659      	mov	r1, fp
 80a87ae:	4632      	mov	r2, r6
 80a87b0:	f002 fd56 	bl	80ab260 <__adddf3>
 80a87b4:	460d      	mov	r5, r1
 80a87b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a87b8:	051b      	lsls	r3, r3, #20
 80a87ba:	9300      	str	r3, [sp, #0]
 80a87bc:	2400      	movs	r4, #0
 80a87be:	a382      	add	r3, pc, #520	; (adr r3, 80a89c8 <__ieee754_pow+0x8c0>)
 80a87c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a87c4:	4620      	mov	r0, r4
 80a87c6:	4629      	mov	r1, r5
 80a87c8:	f002 ff00 	bl	80ab5cc <__aeabi_dmul>
 80a87cc:	4632      	mov	r2, r6
 80a87ce:	4680      	mov	r8, r0
 80a87d0:	4689      	mov	r9, r1
 80a87d2:	463b      	mov	r3, r7
 80a87d4:	4620      	mov	r0, r4
 80a87d6:	4629      	mov	r1, r5
 80a87d8:	f002 fd40 	bl	80ab25c <__aeabi_dsub>
 80a87dc:	4602      	mov	r2, r0
 80a87de:	460b      	mov	r3, r1
 80a87e0:	4650      	mov	r0, sl
 80a87e2:	4659      	mov	r1, fp
 80a87e4:	f002 fd3a 	bl	80ab25c <__aeabi_dsub>
 80a87e8:	a379      	add	r3, pc, #484	; (adr r3, 80a89d0 <__ieee754_pow+0x8c8>)
 80a87ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a87ee:	f002 feed 	bl	80ab5cc <__aeabi_dmul>
 80a87f2:	a379      	add	r3, pc, #484	; (adr r3, 80a89d8 <__ieee754_pow+0x8d0>)
 80a87f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a87f8:	4606      	mov	r6, r0
 80a87fa:	460f      	mov	r7, r1
 80a87fc:	4620      	mov	r0, r4
 80a87fe:	4629      	mov	r1, r5
 80a8800:	f002 fee4 	bl	80ab5cc <__aeabi_dmul>
 80a8804:	4602      	mov	r2, r0
 80a8806:	460b      	mov	r3, r1
 80a8808:	4630      	mov	r0, r6
 80a880a:	4639      	mov	r1, r7
 80a880c:	f002 fd28 	bl	80ab260 <__adddf3>
 80a8810:	4606      	mov	r6, r0
 80a8812:	460f      	mov	r7, r1
 80a8814:	4632      	mov	r2, r6
 80a8816:	463b      	mov	r3, r7
 80a8818:	4640      	mov	r0, r8
 80a881a:	4649      	mov	r1, r9
 80a881c:	f002 fd20 	bl	80ab260 <__adddf3>
 80a8820:	4642      	mov	r2, r8
 80a8822:	464b      	mov	r3, r9
 80a8824:	460d      	mov	r5, r1
 80a8826:	4604      	mov	r4, r0
 80a8828:	f002 fd18 	bl	80ab25c <__aeabi_dsub>
 80a882c:	4602      	mov	r2, r0
 80a882e:	460b      	mov	r3, r1
 80a8830:	4630      	mov	r0, r6
 80a8832:	4639      	mov	r1, r7
 80a8834:	f002 fd12 	bl	80ab25c <__aeabi_dsub>
 80a8838:	462b      	mov	r3, r5
 80a883a:	4682      	mov	sl, r0
 80a883c:	468b      	mov	fp, r1
 80a883e:	4622      	mov	r2, r4
 80a8840:	4629      	mov	r1, r5
 80a8842:	4620      	mov	r0, r4
 80a8844:	f002 fec2 	bl	80ab5cc <__aeabi_dmul>
 80a8848:	a365      	add	r3, pc, #404	; (adr r3, 80a89e0 <__ieee754_pow+0x8d8>)
 80a884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a884e:	4606      	mov	r6, r0
 80a8850:	460f      	mov	r7, r1
 80a8852:	f002 febb 	bl	80ab5cc <__aeabi_dmul>
 80a8856:	a364      	add	r3, pc, #400	; (adr r3, 80a89e8 <__ieee754_pow+0x8e0>)
 80a8858:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a885c:	f002 fcfe 	bl	80ab25c <__aeabi_dsub>
 80a8860:	4632      	mov	r2, r6
 80a8862:	463b      	mov	r3, r7
 80a8864:	f002 feb2 	bl	80ab5cc <__aeabi_dmul>
 80a8868:	a361      	add	r3, pc, #388	; (adr r3, 80a89f0 <__ieee754_pow+0x8e8>)
 80a886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a886e:	f002 fcf7 	bl	80ab260 <__adddf3>
 80a8872:	4632      	mov	r2, r6
 80a8874:	463b      	mov	r3, r7
 80a8876:	f002 fea9 	bl	80ab5cc <__aeabi_dmul>
 80a887a:	a35f      	add	r3, pc, #380	; (adr r3, 80a89f8 <__ieee754_pow+0x8f0>)
 80a887c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8880:	f002 fcec 	bl	80ab25c <__aeabi_dsub>
 80a8884:	4632      	mov	r2, r6
 80a8886:	463b      	mov	r3, r7
 80a8888:	f002 fea0 	bl	80ab5cc <__aeabi_dmul>
 80a888c:	a35c      	add	r3, pc, #368	; (adr r3, 80a8a00 <__ieee754_pow+0x8f8>)
 80a888e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8892:	f002 fce5 	bl	80ab260 <__adddf3>
 80a8896:	4632      	mov	r2, r6
 80a8898:	463b      	mov	r3, r7
 80a889a:	f002 fe97 	bl	80ab5cc <__aeabi_dmul>
 80a889e:	4602      	mov	r2, r0
 80a88a0:	460b      	mov	r3, r1
 80a88a2:	4620      	mov	r0, r4
 80a88a4:	4629      	mov	r1, r5
 80a88a6:	f002 fcd9 	bl	80ab25c <__aeabi_dsub>
 80a88aa:	4606      	mov	r6, r0
 80a88ac:	460f      	mov	r7, r1
 80a88ae:	4632      	mov	r2, r6
 80a88b0:	463b      	mov	r3, r7
 80a88b2:	4629      	mov	r1, r5
 80a88b4:	4620      	mov	r0, r4
 80a88b6:	f002 fe89 	bl	80ab5cc <__aeabi_dmul>
 80a88ba:	2200      	movs	r2, #0
 80a88bc:	4680      	mov	r8, r0
 80a88be:	4689      	mov	r9, r1
 80a88c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a88c4:	4630      	mov	r0, r6
 80a88c6:	4639      	mov	r1, r7
 80a88c8:	f002 fcc8 	bl	80ab25c <__aeabi_dsub>
 80a88cc:	4602      	mov	r2, r0
 80a88ce:	460b      	mov	r3, r1
 80a88d0:	4640      	mov	r0, r8
 80a88d2:	4649      	mov	r1, r9
 80a88d4:	f002 ffa4 	bl	80ab820 <__aeabi_ddiv>
 80a88d8:	4652      	mov	r2, sl
 80a88da:	4606      	mov	r6, r0
 80a88dc:	460f      	mov	r7, r1
 80a88de:	465b      	mov	r3, fp
 80a88e0:	4629      	mov	r1, r5
 80a88e2:	4620      	mov	r0, r4
 80a88e4:	f002 fe72 	bl	80ab5cc <__aeabi_dmul>
 80a88e8:	4652      	mov	r2, sl
 80a88ea:	465b      	mov	r3, fp
 80a88ec:	f002 fcb8 	bl	80ab260 <__adddf3>
 80a88f0:	4602      	mov	r2, r0
 80a88f2:	460b      	mov	r3, r1
 80a88f4:	4630      	mov	r0, r6
 80a88f6:	4639      	mov	r1, r7
 80a88f8:	f002 fcb0 	bl	80ab25c <__aeabi_dsub>
 80a88fc:	462b      	mov	r3, r5
 80a88fe:	4622      	mov	r2, r4
 80a8900:	f002 fcac 	bl	80ab25c <__aeabi_dsub>
 80a8904:	4602      	mov	r2, r0
 80a8906:	460b      	mov	r3, r1
 80a8908:	2000      	movs	r0, #0
 80a890a:	4942      	ldr	r1, [pc, #264]	; (80a8a14 <__ieee754_pow+0x90c>)
 80a890c:	f002 fca6 	bl	80ab25c <__aeabi_dsub>
 80a8910:	9d00      	ldr	r5, [sp, #0]
 80a8912:	440d      	add	r5, r1
 80a8914:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80a8918:	f2c0 8153 	blt.w	80a8bc2 <__ieee754_pow+0xaba>
 80a891c:	4629      	mov	r1, r5
 80a891e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8922:	f002 fe53 	bl	80ab5cc <__aeabi_dmul>
 80a8926:	e9cd 0100 	strd	r0, r1, [sp]
 80a892a:	e433      	b.n	80a8194 <__ieee754_pow+0x8c>
 80a892c:	f1b8 0f00 	cmp.w	r8, #0
 80a8930:	f6ff aca2 	blt.w	80a8278 <__ieee754_pow+0x170>
 80a8934:	2300      	movs	r3, #0
 80a8936:	2400      	movs	r4, #0
 80a8938:	e9cd 3400 	strd	r3, r4, [sp]
 80a893c:	e42a      	b.n	80a8194 <__ieee754_pow+0x8c>
 80a893e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80a8a24 <__ieee754_pow+0x91c>
 80a8942:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a8946:	4563      	cmp	r3, ip
 80a8948:	f340 80f6 	ble.w	80a8b38 <__ieee754_pow+0xa30>
 80a894c:	4b34      	ldr	r3, [pc, #208]	; (80a8a20 <__ieee754_pow+0x918>)
 80a894e:	440b      	add	r3, r1
 80a8950:	4303      	orrs	r3, r0
 80a8952:	d10a      	bne.n	80a896a <__ieee754_pow+0x862>
 80a8954:	4632      	mov	r2, r6
 80a8956:	463b      	mov	r3, r7
 80a8958:	f002 fc80 	bl	80ab25c <__aeabi_dsub>
 80a895c:	4652      	mov	r2, sl
 80a895e:	465b      	mov	r3, fp
 80a8960:	f003 f8ba 	bl	80abad8 <__aeabi_dcmpge>
 80a8964:	2800      	cmp	r0, #0
 80a8966:	f43f aef5 	beq.w	80a8754 <__ieee754_pow+0x64c>
 80a896a:	a327      	add	r3, pc, #156	; (adr r3, 80a8a08 <__ieee754_pow+0x900>)
 80a896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a8974:	f002 fe2a 	bl	80ab5cc <__aeabi_dmul>
 80a8978:	a323      	add	r3, pc, #140	; (adr r3, 80a8a08 <__ieee754_pow+0x900>)
 80a897a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a897e:	f002 fe25 	bl	80ab5cc <__aeabi_dmul>
 80a8982:	e9cd 0100 	strd	r0, r1, [sp]
 80a8986:	e405      	b.n	80a8194 <__ieee754_pow+0x8c>
 80a8988:	f1b8 0f00 	cmp.w	r8, #0
 80a898c:	dad2      	bge.n	80a8934 <__ieee754_pow+0x82c>
 80a898e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80a8992:	9600      	str	r6, [sp, #0]
 80a8994:	9301      	str	r3, [sp, #4]
 80a8996:	f7ff bbfd 	b.w	80a8194 <__ieee754_pow+0x8c>
 80a899a:	2300      	movs	r3, #0
 80a899c:	2400      	movs	r4, #0
 80a899e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a89a2:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a89a6:	2300      	movs	r3, #0
 80a89a8:	4c1a      	ldr	r4, [pc, #104]	; (80a8a14 <__ieee754_pow+0x90c>)
 80a89aa:	f04f 0a00 	mov.w	sl, #0
 80a89ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a89b2:	e4d8      	b.n	80a8366 <__ieee754_pow+0x25e>
 80a89b4:	f04f 0c00 	mov.w	ip, #0
 80a89b8:	e4b1      	b.n	80a831e <__ieee754_pow+0x216>
 80a89ba:	bf00      	nop
 80a89bc:	f3af 8000 	nop.w
 80a89c0:	652b82fe 	.word	0x652b82fe
 80a89c4:	3c971547 	.word	0x3c971547
 80a89c8:	00000000 	.word	0x00000000
 80a89cc:	3fe62e43 	.word	0x3fe62e43
 80a89d0:	fefa39ef 	.word	0xfefa39ef
 80a89d4:	3fe62e42 	.word	0x3fe62e42
 80a89d8:	0ca86c39 	.word	0x0ca86c39
 80a89dc:	be205c61 	.word	0xbe205c61
 80a89e0:	72bea4d0 	.word	0x72bea4d0
 80a89e4:	3e663769 	.word	0x3e663769
 80a89e8:	c5d26bf1 	.word	0xc5d26bf1
 80a89ec:	3ebbbd41 	.word	0x3ebbbd41
 80a89f0:	af25de2c 	.word	0xaf25de2c
 80a89f4:	3f11566a 	.word	0x3f11566a
 80a89f8:	16bebd93 	.word	0x16bebd93
 80a89fc:	3f66c16c 	.word	0x3f66c16c
 80a8a00:	5555553e 	.word	0x5555553e
 80a8a04:	3fc55555 	.word	0x3fc55555
 80a8a08:	c2f8f359 	.word	0xc2f8f359
 80a8a0c:	01a56e1f 	.word	0x01a56e1f
 80a8a10:	bff00000 	.word	0xbff00000
 80a8a14:	3ff00000 	.word	0x3ff00000
 80a8a18:	408fffff 	.word	0x408fffff
 80a8a1c:	000fffff 	.word	0x000fffff
 80a8a20:	3f6f3400 	.word	0x3f6f3400
 80a8a24:	4090cbff 	.word	0x4090cbff
 80a8a28:	429c      	cmp	r4, r3
 80a8a2a:	f6ff af7f 	blt.w	80a892c <__ieee754_pow+0x824>
 80a8a2e:	4b7e      	ldr	r3, [pc, #504]	; (80a8c28 <__ieee754_pow+0xb20>)
 80a8a30:	429c      	cmp	r4, r3
 80a8a32:	f73f ac1d 	bgt.w	80a8270 <__ieee754_pow+0x168>
 80a8a36:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a8a3a:	2200      	movs	r2, #0
 80a8a3c:	4b7a      	ldr	r3, [pc, #488]	; (80a8c28 <__ieee754_pow+0xb20>)
 80a8a3e:	f002 fc0d 	bl	80ab25c <__aeabi_dsub>
 80a8a42:	a36b      	add	r3, pc, #428	; (adr r3, 80a8bf0 <__ieee754_pow+0xae8>)
 80a8a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8a48:	4604      	mov	r4, r0
 80a8a4a:	460d      	mov	r5, r1
 80a8a4c:	f002 fdbe 	bl	80ab5cc <__aeabi_dmul>
 80a8a50:	a369      	add	r3, pc, #420	; (adr r3, 80a8bf8 <__ieee754_pow+0xaf0>)
 80a8a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8a56:	4682      	mov	sl, r0
 80a8a58:	468b      	mov	fp, r1
 80a8a5a:	4620      	mov	r0, r4
 80a8a5c:	4629      	mov	r1, r5
 80a8a5e:	f002 fdb5 	bl	80ab5cc <__aeabi_dmul>
 80a8a62:	2200      	movs	r2, #0
 80a8a64:	4680      	mov	r8, r0
 80a8a66:	4689      	mov	r9, r1
 80a8a68:	4620      	mov	r0, r4
 80a8a6a:	4629      	mov	r1, r5
 80a8a6c:	4b6f      	ldr	r3, [pc, #444]	; (80a8c2c <__ieee754_pow+0xb24>)
 80a8a6e:	f002 fdad 	bl	80ab5cc <__aeabi_dmul>
 80a8a72:	4602      	mov	r2, r0
 80a8a74:	460b      	mov	r3, r1
 80a8a76:	a162      	add	r1, pc, #392	; (adr r1, 80a8c00 <__ieee754_pow+0xaf8>)
 80a8a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a8a7c:	f002 fbee 	bl	80ab25c <__aeabi_dsub>
 80a8a80:	4622      	mov	r2, r4
 80a8a82:	462b      	mov	r3, r5
 80a8a84:	f002 fda2 	bl	80ab5cc <__aeabi_dmul>
 80a8a88:	4602      	mov	r2, r0
 80a8a8a:	460b      	mov	r3, r1
 80a8a8c:	2000      	movs	r0, #0
 80a8a8e:	4968      	ldr	r1, [pc, #416]	; (80a8c30 <__ieee754_pow+0xb28>)
 80a8a90:	f002 fbe4 	bl	80ab25c <__aeabi_dsub>
 80a8a94:	4622      	mov	r2, r4
 80a8a96:	462b      	mov	r3, r5
 80a8a98:	4604      	mov	r4, r0
 80a8a9a:	460d      	mov	r5, r1
 80a8a9c:	4610      	mov	r0, r2
 80a8a9e:	4619      	mov	r1, r3
 80a8aa0:	f002 fd94 	bl	80ab5cc <__aeabi_dmul>
 80a8aa4:	4602      	mov	r2, r0
 80a8aa6:	460b      	mov	r3, r1
 80a8aa8:	4620      	mov	r0, r4
 80a8aaa:	4629      	mov	r1, r5
 80a8aac:	f002 fd8e 	bl	80ab5cc <__aeabi_dmul>
 80a8ab0:	a355      	add	r3, pc, #340	; (adr r3, 80a8c08 <__ieee754_pow+0xb00>)
 80a8ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8ab6:	f002 fd89 	bl	80ab5cc <__aeabi_dmul>
 80a8aba:	4602      	mov	r2, r0
 80a8abc:	460b      	mov	r3, r1
 80a8abe:	4640      	mov	r0, r8
 80a8ac0:	4649      	mov	r1, r9
 80a8ac2:	f002 fbcb 	bl	80ab25c <__aeabi_dsub>
 80a8ac6:	4680      	mov	r8, r0
 80a8ac8:	4689      	mov	r9, r1
 80a8aca:	4650      	mov	r0, sl
 80a8acc:	4659      	mov	r1, fp
 80a8ace:	4642      	mov	r2, r8
 80a8ad0:	464b      	mov	r3, r9
 80a8ad2:	2400      	movs	r4, #0
 80a8ad4:	f002 fbc4 	bl	80ab260 <__adddf3>
 80a8ad8:	4652      	mov	r2, sl
 80a8ada:	465b      	mov	r3, fp
 80a8adc:	4620      	mov	r0, r4
 80a8ade:	460d      	mov	r5, r1
 80a8ae0:	f002 fbbc 	bl	80ab25c <__aeabi_dsub>
 80a8ae4:	4602      	mov	r2, r0
 80a8ae6:	460b      	mov	r3, r1
 80a8ae8:	4640      	mov	r0, r8
 80a8aea:	4649      	mov	r1, r9
 80a8aec:	f002 fbb6 	bl	80ab25c <__aeabi_dsub>
 80a8af0:	4682      	mov	sl, r0
 80a8af2:	468b      	mov	fp, r1
 80a8af4:	e5cf      	b.n	80a8696 <__ieee754_pow+0x58e>
 80a8af6:	4652      	mov	r2, sl
 80a8af8:	465b      	mov	r3, fp
 80a8afa:	2000      	movs	r0, #0
 80a8afc:	494a      	ldr	r1, [pc, #296]	; (80a8c28 <__ieee754_pow+0xb20>)
 80a8afe:	f002 fe8f 	bl	80ab820 <__aeabi_ddiv>
 80a8b02:	e9cd 0100 	strd	r0, r1, [sp]
 80a8b06:	f7ff bb45 	b.w	80a8194 <__ieee754_pow+0x8c>
 80a8b0a:	4652      	mov	r2, sl
 80a8b0c:	4650      	mov	r0, sl
 80a8b0e:	465b      	mov	r3, fp
 80a8b10:	4659      	mov	r1, fp
 80a8b12:	f002 fd5b 	bl	80ab5cc <__aeabi_dmul>
 80a8b16:	e9cd 0100 	strd	r0, r1, [sp]
 80a8b1a:	f7ff bb3b 	b.w	80a8194 <__ieee754_pow+0x8c>
 80a8b1e:	2a00      	cmp	r2, #0
 80a8b20:	d141      	bne.n	80a8ba6 <__ieee754_pow+0xa9e>
 80a8b22:	f1c1 0114 	rsb	r1, r1, #20
 80a8b26:	fa45 f001 	asr.w	r0, r5, r1
 80a8b2a:	fa00 f101 	lsl.w	r1, r0, r1
 80a8b2e:	42a9      	cmp	r1, r5
 80a8b30:	d055      	beq.n	80a8bde <__ieee754_pow+0xad6>
 80a8b32:	9202      	str	r2, [sp, #8]
 80a8b34:	f7ff bb0d 	b.w	80a8152 <__ieee754_pow+0x4a>
 80a8b38:	4a3d      	ldr	r2, [pc, #244]	; (80a8c30 <__ieee754_pow+0xb28>)
 80a8b3a:	4293      	cmp	r3, r2
 80a8b3c:	dc56      	bgt.n	80a8bec <__ieee754_pow+0xae4>
 80a8b3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80a8b42:	9100      	str	r1, [sp, #0]
 80a8b44:	910c      	str	r1, [sp, #48]	; 0x30
 80a8b46:	e639      	b.n	80a87bc <__ieee754_pow+0x6b4>
 80a8b48:	a331      	add	r3, pc, #196	; (adr r3, 80a8c10 <__ieee754_pow+0xb08>)
 80a8b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a8b52:	f002 fd3b 	bl	80ab5cc <__aeabi_dmul>
 80a8b56:	a32e      	add	r3, pc, #184	; (adr r3, 80a8c10 <__ieee754_pow+0xb08>)
 80a8b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8b5c:	f002 fd36 	bl	80ab5cc <__aeabi_dmul>
 80a8b60:	e9cd 0100 	strd	r0, r1, [sp]
 80a8b64:	f7ff bb16 	b.w	80a8194 <__ieee754_pow+0x8c>
 80a8b68:	9b02      	ldr	r3, [sp, #8]
 80a8b6a:	2b01      	cmp	r3, #1
 80a8b6c:	f47f ab12 	bne.w	80a8194 <__ieee754_pow+0x8c>
 80a8b70:	e9dd 4500 	ldrd	r4, r5, [sp]
 80a8b74:	4622      	mov	r2, r4
 80a8b76:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a8b7a:	e9cd 2300 	strd	r2, r3, [sp]
 80a8b7e:	f7ff bb09 	b.w	80a8194 <__ieee754_pow+0x8c>
 80a8b82:	a425      	add	r4, pc, #148	; (adr r4, 80a8c18 <__ieee754_pow+0xb10>)
 80a8b84:	e9d4 3400 	ldrd	r3, r4, [r4]
 80a8b88:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a8b8c:	a424      	add	r4, pc, #144	; (adr r4, 80a8c20 <__ieee754_pow+0xb18>)
 80a8b8e:	e9d4 3400 	ldrd	r3, r4, [r4]
 80a8b92:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a8b96:	2300      	movs	r3, #0
 80a8b98:	4c26      	ldr	r4, [pc, #152]	; (80a8c34 <__ieee754_pow+0xb2c>)
 80a8b9a:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
 80a8b9e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a8ba2:	f7ff bbe0 	b.w	80a8366 <__ieee754_pow+0x25e>
 80a8ba6:	4650      	mov	r0, sl
 80a8ba8:	4659      	mov	r1, fp
 80a8baa:	9302      	str	r3, [sp, #8]
 80a8bac:	f002 f91c 	bl	80aade8 <fabs>
 80a8bb0:	9b02      	ldr	r3, [sp, #8]
 80a8bb2:	e9cd 0100 	strd	r0, r1, [sp]
 80a8bb6:	2b00      	cmp	r3, #0
 80a8bb8:	f47f ab86 	bne.w	80a82c8 <__ieee754_pow+0x1c0>
 80a8bbc:	9302      	str	r3, [sp, #8]
 80a8bbe:	f7ff bb1b 	b.w	80a81f8 <__ieee754_pow+0xf0>
 80a8bc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a8bc4:	f002 fa30 	bl	80ab028 <scalbn>
 80a8bc8:	e6a9      	b.n	80a891e <__ieee754_pow+0x816>
 80a8bca:	f000 0001 	and.w	r0, r0, #1
 80a8bce:	f1c0 0102 	rsb	r1, r0, #2
 80a8bd2:	9102      	str	r1, [sp, #8]
 80a8bd4:	2a00      	cmp	r2, #0
 80a8bd6:	f43f aabc 	beq.w	80a8152 <__ieee754_pow+0x4a>
 80a8bda:	f7ff bb04 	b.w	80a81e6 <__ieee754_pow+0xde>
 80a8bde:	f000 0001 	and.w	r0, r0, #1
 80a8be2:	f1c0 0202 	rsb	r2, r0, #2
 80a8be6:	9202      	str	r2, [sp, #8]
 80a8be8:	f7ff bab3 	b.w	80a8152 <__ieee754_pow+0x4a>
 80a8bec:	151b      	asrs	r3, r3, #20
 80a8bee:	e5b3      	b.n	80a8758 <__ieee754_pow+0x650>
 80a8bf0:	60000000 	.word	0x60000000
 80a8bf4:	3ff71547 	.word	0x3ff71547
 80a8bf8:	f85ddf44 	.word	0xf85ddf44
 80a8bfc:	3e54ae0b 	.word	0x3e54ae0b
 80a8c00:	55555555 	.word	0x55555555
 80a8c04:	3fd55555 	.word	0x3fd55555
 80a8c08:	652b82fe 	.word	0x652b82fe
 80a8c0c:	3ff71547 	.word	0x3ff71547
 80a8c10:	8800759c 	.word	0x8800759c
 80a8c14:	7e37e43c 	.word	0x7e37e43c
 80a8c18:	40000000 	.word	0x40000000
 80a8c1c:	3fe2b803 	.word	0x3fe2b803
 80a8c20:	43cfd006 	.word	0x43cfd006
 80a8c24:	3e4cfdeb 	.word	0x3e4cfdeb
 80a8c28:	3ff00000 	.word	0x3ff00000
 80a8c2c:	3fd00000 	.word	0x3fd00000
 80a8c30:	3fe00000 	.word	0x3fe00000
 80a8c34:	3ff80000 	.word	0x3ff80000

080a8c38 <__ieee754_rem_pio2>:
 80a8c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8c3c:	4f8c      	ldr	r7, [pc, #560]	; (80a8e70 <__ieee754_rem_pio2+0x238>)
 80a8c3e:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 80a8c42:	42bd      	cmp	r5, r7
 80a8c44:	4614      	mov	r4, r2
 80a8c46:	4606      	mov	r6, r0
 80a8c48:	b08d      	sub	sp, #52	; 0x34
 80a8c4a:	f340 8086 	ble.w	80a8d5a <__ieee754_rem_pio2+0x122>
 80a8c4e:	4a89      	ldr	r2, [pc, #548]	; (80a8e74 <__ieee754_rem_pio2+0x23c>)
 80a8c50:	468b      	mov	fp, r1
 80a8c52:	4295      	cmp	r5, r2
 80a8c54:	dc27      	bgt.n	80a8ca6 <__ieee754_rem_pio2+0x6e>
 80a8c56:	a37c      	add	r3, pc, #496	; (adr r3, 80a8e48 <__ieee754_rem_pio2+0x210>)
 80a8c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8c5c:	2900      	cmp	r1, #0
 80a8c5e:	f340 81b8 	ble.w	80a8fd2 <__ieee754_rem_pio2+0x39a>
 80a8c62:	f002 fafb 	bl	80ab25c <__aeabi_dsub>
 80a8c66:	4b84      	ldr	r3, [pc, #528]	; (80a8e78 <__ieee754_rem_pio2+0x240>)
 80a8c68:	4606      	mov	r6, r0
 80a8c6a:	429d      	cmp	r5, r3
 80a8c6c:	460f      	mov	r7, r1
 80a8c6e:	f000 808b 	beq.w	80a8d88 <__ieee754_rem_pio2+0x150>
 80a8c72:	a377      	add	r3, pc, #476	; (adr r3, 80a8e50 <__ieee754_rem_pio2+0x218>)
 80a8c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8c78:	f002 faf0 	bl	80ab25c <__aeabi_dsub>
 80a8c7c:	4602      	mov	r2, r0
 80a8c7e:	460b      	mov	r3, r1
 80a8c80:	4630      	mov	r0, r6
 80a8c82:	e9c4 2300 	strd	r2, r3, [r4]
 80a8c86:	4639      	mov	r1, r7
 80a8c88:	f002 fae8 	bl	80ab25c <__aeabi_dsub>
 80a8c8c:	a370      	add	r3, pc, #448	; (adr r3, 80a8e50 <__ieee754_rem_pio2+0x218>)
 80a8c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8c92:	f002 fae3 	bl	80ab25c <__aeabi_dsub>
 80a8c96:	f04f 0a01 	mov.w	sl, #1
 80a8c9a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a8c9e:	4650      	mov	r0, sl
 80a8ca0:	b00d      	add	sp, #52	; 0x34
 80a8ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8ca6:	4a75      	ldr	r2, [pc, #468]	; (80a8e7c <__ieee754_rem_pio2+0x244>)
 80a8ca8:	4295      	cmp	r5, r2
 80a8caa:	f340 808e 	ble.w	80a8dca <__ieee754_rem_pio2+0x192>
 80a8cae:	4a74      	ldr	r2, [pc, #464]	; (80a8e80 <__ieee754_rem_pio2+0x248>)
 80a8cb0:	4295      	cmp	r5, r2
 80a8cb2:	dc5e      	bgt.n	80a8d72 <__ieee754_rem_pio2+0x13a>
 80a8cb4:	ea4f 5a25 	mov.w	sl, r5, asr #20
 80a8cb8:	f2aa 4a16 	subw	sl, sl, #1046	; 0x416
 80a8cbc:	eba5 510a 	sub.w	r1, r5, sl, lsl #20
 80a8cc0:	460f      	mov	r7, r1
 80a8cc2:	f002 ff33 	bl	80abb2c <__aeabi_d2iz>
 80a8cc6:	f002 fc17 	bl	80ab4f8 <__aeabi_i2d>
 80a8cca:	4680      	mov	r8, r0
 80a8ccc:	4689      	mov	r9, r1
 80a8cce:	4630      	mov	r0, r6
 80a8cd0:	4639      	mov	r1, r7
 80a8cd2:	4642      	mov	r2, r8
 80a8cd4:	464b      	mov	r3, r9
 80a8cd6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80a8cda:	f002 fabf 	bl	80ab25c <__aeabi_dsub>
 80a8cde:	2200      	movs	r2, #0
 80a8ce0:	4b68      	ldr	r3, [pc, #416]	; (80a8e84 <__ieee754_rem_pio2+0x24c>)
 80a8ce2:	f002 fc73 	bl	80ab5cc <__aeabi_dmul>
 80a8ce6:	460f      	mov	r7, r1
 80a8ce8:	4606      	mov	r6, r0
 80a8cea:	f002 ff1f 	bl	80abb2c <__aeabi_d2iz>
 80a8cee:	4605      	mov	r5, r0
 80a8cf0:	f002 fc02 	bl	80ab4f8 <__aeabi_i2d>
 80a8cf4:	4602      	mov	r2, r0
 80a8cf6:	460b      	mov	r3, r1
 80a8cf8:	4630      	mov	r0, r6
 80a8cfa:	4639      	mov	r1, r7
 80a8cfc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a8d00:	f002 faac 	bl	80ab25c <__aeabi_dsub>
 80a8d04:	2200      	movs	r2, #0
 80a8d06:	4b5f      	ldr	r3, [pc, #380]	; (80a8e84 <__ieee754_rem_pio2+0x24c>)
 80a8d08:	f002 fc60 	bl	80ab5cc <__aeabi_dmul>
 80a8d0c:	4602      	mov	r2, r0
 80a8d0e:	460b      	mov	r3, r1
 80a8d10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a8d14:	2200      	movs	r2, #0
 80a8d16:	2300      	movs	r3, #0
 80a8d18:	f002 fec0 	bl	80aba9c <__aeabi_dcmpeq>
 80a8d1c:	2800      	cmp	r0, #0
 80a8d1e:	f000 8156 	beq.w	80a8fce <__ieee754_rem_pio2+0x396>
 80a8d22:	2d00      	cmp	r5, #0
 80a8d24:	bf0c      	ite	eq
 80a8d26:	2301      	moveq	r3, #1
 80a8d28:	2302      	movne	r3, #2
 80a8d2a:	2002      	movs	r0, #2
 80a8d2c:	4956      	ldr	r1, [pc, #344]	; (80a8e88 <__ieee754_rem_pio2+0x250>)
 80a8d2e:	4652      	mov	r2, sl
 80a8d30:	e9cd 0100 	strd	r0, r1, [sp]
 80a8d34:	4621      	mov	r1, r4
 80a8d36:	a806      	add	r0, sp, #24
 80a8d38:	f000 fec2 	bl	80a9ac0 <__kernel_rem_pio2>
 80a8d3c:	f1bb 0f00 	cmp.w	fp, #0
 80a8d40:	4682      	mov	sl, r0
 80a8d42:	daac      	bge.n	80a8c9e <__ieee754_rem_pio2+0x66>
 80a8d44:	6862      	ldr	r2, [r4, #4]
 80a8d46:	68e3      	ldr	r3, [r4, #12]
 80a8d48:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a8d4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a8d50:	f1c0 0a00 	rsb	sl, r0, #0
 80a8d54:	6062      	str	r2, [r4, #4]
 80a8d56:	60e3      	str	r3, [r4, #12]
 80a8d58:	e7a1      	b.n	80a8c9e <__ieee754_rem_pio2+0x66>
 80a8d5a:	f04f 0a00 	mov.w	sl, #0
 80a8d5e:	2200      	movs	r2, #0
 80a8d60:	2300      	movs	r3, #0
 80a8d62:	e9c4 0100 	strd	r0, r1, [r4]
 80a8d66:	4650      	mov	r0, sl
 80a8d68:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a8d6c:	b00d      	add	sp, #52	; 0x34
 80a8d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8d72:	4602      	mov	r2, r0
 80a8d74:	465b      	mov	r3, fp
 80a8d76:	f002 fa71 	bl	80ab25c <__aeabi_dsub>
 80a8d7a:	f04f 0a00 	mov.w	sl, #0
 80a8d7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a8d82:	e9c4 0100 	strd	r0, r1, [r4]
 80a8d86:	e78a      	b.n	80a8c9e <__ieee754_rem_pio2+0x66>
 80a8d88:	a333      	add	r3, pc, #204	; (adr r3, 80a8e58 <__ieee754_rem_pio2+0x220>)
 80a8d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8d8e:	f002 fa65 	bl	80ab25c <__aeabi_dsub>
 80a8d92:	a333      	add	r3, pc, #204	; (adr r3, 80a8e60 <__ieee754_rem_pio2+0x228>)
 80a8d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8d98:	4606      	mov	r6, r0
 80a8d9a:	460f      	mov	r7, r1
 80a8d9c:	f002 fa5e 	bl	80ab25c <__aeabi_dsub>
 80a8da0:	4602      	mov	r2, r0
 80a8da2:	460b      	mov	r3, r1
 80a8da4:	4630      	mov	r0, r6
 80a8da6:	e9c4 2300 	strd	r2, r3, [r4]
 80a8daa:	4639      	mov	r1, r7
 80a8dac:	f002 fa56 	bl	80ab25c <__aeabi_dsub>
 80a8db0:	a32b      	add	r3, pc, #172	; (adr r3, 80a8e60 <__ieee754_rem_pio2+0x228>)
 80a8db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8db6:	f002 fa51 	bl	80ab25c <__aeabi_dsub>
 80a8dba:	f04f 0a01 	mov.w	sl, #1
 80a8dbe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a8dc2:	4650      	mov	r0, sl
 80a8dc4:	b00d      	add	sp, #52	; 0x34
 80a8dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8dca:	f002 f80d 	bl	80aade8 <fabs>
 80a8dce:	a326      	add	r3, pc, #152	; (adr r3, 80a8e68 <__ieee754_rem_pio2+0x230>)
 80a8dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8dd4:	4606      	mov	r6, r0
 80a8dd6:	460f      	mov	r7, r1
 80a8dd8:	f002 fbf8 	bl	80ab5cc <__aeabi_dmul>
 80a8ddc:	2200      	movs	r2, #0
 80a8dde:	4b2b      	ldr	r3, [pc, #172]	; (80a8e8c <__ieee754_rem_pio2+0x254>)
 80a8de0:	f002 fa3e 	bl	80ab260 <__adddf3>
 80a8de4:	f002 fea2 	bl	80abb2c <__aeabi_d2iz>
 80a8de8:	4682      	mov	sl, r0
 80a8dea:	f002 fb85 	bl	80ab4f8 <__aeabi_i2d>
 80a8dee:	a316      	add	r3, pc, #88	; (adr r3, 80a8e48 <__ieee754_rem_pio2+0x210>)
 80a8df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8df4:	4680      	mov	r8, r0
 80a8df6:	4689      	mov	r9, r1
 80a8df8:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80a8dfc:	f002 fbe6 	bl	80ab5cc <__aeabi_dmul>
 80a8e00:	4602      	mov	r2, r0
 80a8e02:	460b      	mov	r3, r1
 80a8e04:	4630      	mov	r0, r6
 80a8e06:	4639      	mov	r1, r7
 80a8e08:	f002 fa28 	bl	80ab25c <__aeabi_dsub>
 80a8e0c:	a310      	add	r3, pc, #64	; (adr r3, 80a8e50 <__ieee754_rem_pio2+0x218>)
 80a8e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8e12:	4606      	mov	r6, r0
 80a8e14:	460f      	mov	r7, r1
 80a8e16:	4640      	mov	r0, r8
 80a8e18:	4649      	mov	r1, r9
 80a8e1a:	46b0      	mov	r8, r6
 80a8e1c:	46b9      	mov	r9, r7
 80a8e1e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80a8e22:	f002 fbd3 	bl	80ab5cc <__aeabi_dmul>
 80a8e26:	f1ba 0f1f 	cmp.w	sl, #31
 80a8e2a:	4606      	mov	r6, r0
 80a8e2c:	460f      	mov	r7, r1
 80a8e2e:	dc31      	bgt.n	80a8e94 <__ieee754_rem_pio2+0x25c>
 80a8e30:	4b17      	ldr	r3, [pc, #92]	; (80a8e90 <__ieee754_rem_pio2+0x258>)
 80a8e32:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80a8e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a8e3a:	42ab      	cmp	r3, r5
 80a8e3c:	d02a      	beq.n	80a8e94 <__ieee754_rem_pio2+0x25c>
 80a8e3e:	4602      	mov	r2, r0
 80a8e40:	460b      	mov	r3, r1
 80a8e42:	4640      	mov	r0, r8
 80a8e44:	4649      	mov	r1, r9
 80a8e46:	e09e      	b.n	80a8f86 <__ieee754_rem_pio2+0x34e>
 80a8e48:	54400000 	.word	0x54400000
 80a8e4c:	3ff921fb 	.word	0x3ff921fb
 80a8e50:	1a626331 	.word	0x1a626331
 80a8e54:	3dd0b461 	.word	0x3dd0b461
 80a8e58:	1a600000 	.word	0x1a600000
 80a8e5c:	3dd0b461 	.word	0x3dd0b461
 80a8e60:	2e037073 	.word	0x2e037073
 80a8e64:	3ba3198a 	.word	0x3ba3198a
 80a8e68:	6dc9c883 	.word	0x6dc9c883
 80a8e6c:	3fe45f30 	.word	0x3fe45f30
 80a8e70:	3fe921fb 	.word	0x3fe921fb
 80a8e74:	4002d97b 	.word	0x4002d97b
 80a8e78:	3ff921fb 	.word	0x3ff921fb
 80a8e7c:	413921fb 	.word	0x413921fb
 80a8e80:	7fefffff 	.word	0x7fefffff
 80a8e84:	41700000 	.word	0x41700000
 80a8e88:	080ad7c4 	.word	0x080ad7c4
 80a8e8c:	3fe00000 	.word	0x3fe00000
 80a8e90:	080ad744 	.word	0x080ad744
 80a8e94:	463b      	mov	r3, r7
 80a8e96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a8e9a:	4632      	mov	r2, r6
 80a8e9c:	f002 f9de 	bl	80ab25c <__aeabi_dsub>
 80a8ea0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a8ea4:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
 80a8ea8:	2b10      	cmp	r3, #16
 80a8eaa:	4689      	mov	r9, r1
 80a8eac:	4680      	mov	r8, r0
 80a8eae:	ea4f 5525 	mov.w	r5, r5, asr #20
 80a8eb2:	dd6c      	ble.n	80a8f8e <__ieee754_rem_pio2+0x356>
 80a8eb4:	a366      	add	r3, pc, #408	; (adr r3, 80a9050 <__ieee754_rem_pio2+0x418>)
 80a8eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8eba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a8ebe:	f002 fb85 	bl	80ab5cc <__aeabi_dmul>
 80a8ec2:	4606      	mov	r6, r0
 80a8ec4:	460f      	mov	r7, r1
 80a8ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a8eca:	4632      	mov	r2, r6
 80a8ecc:	463b      	mov	r3, r7
 80a8ece:	f002 f9c5 	bl	80ab25c <__aeabi_dsub>
 80a8ed2:	4680      	mov	r8, r0
 80a8ed4:	4689      	mov	r9, r1
 80a8ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a8eda:	4642      	mov	r2, r8
 80a8edc:	464b      	mov	r3, r9
 80a8ede:	f002 f9bd 	bl	80ab25c <__aeabi_dsub>
 80a8ee2:	4632      	mov	r2, r6
 80a8ee4:	463b      	mov	r3, r7
 80a8ee6:	f002 f9b9 	bl	80ab25c <__aeabi_dsub>
 80a8eea:	a35b      	add	r3, pc, #364	; (adr r3, 80a9058 <__ieee754_rem_pio2+0x420>)
 80a8eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8ef0:	4606      	mov	r6, r0
 80a8ef2:	460f      	mov	r7, r1
 80a8ef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a8ef8:	f002 fb68 	bl	80ab5cc <__aeabi_dmul>
 80a8efc:	4632      	mov	r2, r6
 80a8efe:	463b      	mov	r3, r7
 80a8f00:	f002 f9ac 	bl	80ab25c <__aeabi_dsub>
 80a8f04:	4606      	mov	r6, r0
 80a8f06:	460f      	mov	r7, r1
 80a8f08:	4640      	mov	r0, r8
 80a8f0a:	4649      	mov	r1, r9
 80a8f0c:	463b      	mov	r3, r7
 80a8f0e:	4632      	mov	r2, r6
 80a8f10:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80a8f14:	f002 f9a2 	bl	80ab25c <__aeabi_dsub>
 80a8f18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a8f1c:	1aed      	subs	r5, r5, r3
 80a8f1e:	2d31      	cmp	r5, #49	; 0x31
 80a8f20:	4689      	mov	r9, r1
 80a8f22:	4680      	mov	r8, r0
 80a8f24:	dd33      	ble.n	80a8f8e <__ieee754_rem_pio2+0x356>
 80a8f26:	a34e      	add	r3, pc, #312	; (adr r3, 80a9060 <__ieee754_rem_pio2+0x428>)
 80a8f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8f2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a8f30:	f002 fb4c 	bl	80ab5cc <__aeabi_dmul>
 80a8f34:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
 80a8f38:	4680      	mov	r8, r0
 80a8f3a:	4689      	mov	r9, r1
 80a8f3c:	4642      	mov	r2, r8
 80a8f3e:	4631      	mov	r1, r6
 80a8f40:	464b      	mov	r3, r9
 80a8f42:	4628      	mov	r0, r5
 80a8f44:	f002 f98a 	bl	80ab25c <__aeabi_dsub>
 80a8f48:	4602      	mov	r2, r0
 80a8f4a:	460b      	mov	r3, r1
 80a8f4c:	4628      	mov	r0, r5
 80a8f4e:	4631      	mov	r1, r6
 80a8f50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a8f54:	f002 f982 	bl	80ab25c <__aeabi_dsub>
 80a8f58:	4642      	mov	r2, r8
 80a8f5a:	464b      	mov	r3, r9
 80a8f5c:	f002 f97e 	bl	80ab25c <__aeabi_dsub>
 80a8f60:	a341      	add	r3, pc, #260	; (adr r3, 80a9068 <__ieee754_rem_pio2+0x430>)
 80a8f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8f66:	4606      	mov	r6, r0
 80a8f68:	460f      	mov	r7, r1
 80a8f6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a8f6e:	f002 fb2d 	bl	80ab5cc <__aeabi_dmul>
 80a8f72:	4632      	mov	r2, r6
 80a8f74:	463b      	mov	r3, r7
 80a8f76:	f002 f971 	bl	80ab25c <__aeabi_dsub>
 80a8f7a:	4606      	mov	r6, r0
 80a8f7c:	460f      	mov	r7, r1
 80a8f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a8f82:	4632      	mov	r2, r6
 80a8f84:	463b      	mov	r3, r7
 80a8f86:	f002 f969 	bl	80ab25c <__aeabi_dsub>
 80a8f8a:	4680      	mov	r8, r0
 80a8f8c:	4689      	mov	r9, r1
 80a8f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a8f92:	4642      	mov	r2, r8
 80a8f94:	464b      	mov	r3, r9
 80a8f96:	e9c4 2300 	strd	r2, r3, [r4]
 80a8f9a:	f002 f95f 	bl	80ab25c <__aeabi_dsub>
 80a8f9e:	4632      	mov	r2, r6
 80a8fa0:	463b      	mov	r3, r7
 80a8fa2:	f002 f95b 	bl	80ab25c <__aeabi_dsub>
 80a8fa6:	4602      	mov	r2, r0
 80a8fa8:	460b      	mov	r3, r1
 80a8faa:	f1bb 0f00 	cmp.w	fp, #0
 80a8fae:	4605      	mov	r5, r0
 80a8fb0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a8fb4:	f6bf ae73 	bge.w	80a8c9e <__ieee754_rem_pio2+0x66>
 80a8fb8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a8fbc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a8fc0:	e9c4 8300 	strd	r8, r3, [r4]
 80a8fc4:	e9c4 5102 	strd	r5, r1, [r4, #8]
 80a8fc8:	f1ca 0a00 	rsb	sl, sl, #0
 80a8fcc:	e667      	b.n	80a8c9e <__ieee754_rem_pio2+0x66>
 80a8fce:	2303      	movs	r3, #3
 80a8fd0:	e6ab      	b.n	80a8d2a <__ieee754_rem_pio2+0xf2>
 80a8fd2:	f002 f945 	bl	80ab260 <__adddf3>
 80a8fd6:	4b28      	ldr	r3, [pc, #160]	; (80a9078 <__ieee754_rem_pio2+0x440>)
 80a8fd8:	4606      	mov	r6, r0
 80a8fda:	429d      	cmp	r5, r3
 80a8fdc:	460f      	mov	r7, r1
 80a8fde:	d016      	beq.n	80a900e <__ieee754_rem_pio2+0x3d6>
 80a8fe0:	a323      	add	r3, pc, #140	; (adr r3, 80a9070 <__ieee754_rem_pio2+0x438>)
 80a8fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8fe6:	f002 f93b 	bl	80ab260 <__adddf3>
 80a8fea:	4602      	mov	r2, r0
 80a8fec:	460b      	mov	r3, r1
 80a8fee:	4630      	mov	r0, r6
 80a8ff0:	e9c4 2300 	strd	r2, r3, [r4]
 80a8ff4:	4639      	mov	r1, r7
 80a8ff6:	f002 f931 	bl	80ab25c <__aeabi_dsub>
 80a8ffa:	a31d      	add	r3, pc, #116	; (adr r3, 80a9070 <__ieee754_rem_pio2+0x438>)
 80a8ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9000:	f002 f92e 	bl	80ab260 <__adddf3>
 80a9004:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80a9008:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a900c:	e647      	b.n	80a8c9e <__ieee754_rem_pio2+0x66>
 80a900e:	a310      	add	r3, pc, #64	; (adr r3, 80a9050 <__ieee754_rem_pio2+0x418>)
 80a9010:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9014:	f002 f924 	bl	80ab260 <__adddf3>
 80a9018:	a30f      	add	r3, pc, #60	; (adr r3, 80a9058 <__ieee754_rem_pio2+0x420>)
 80a901a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a901e:	4606      	mov	r6, r0
 80a9020:	460f      	mov	r7, r1
 80a9022:	f002 f91d 	bl	80ab260 <__adddf3>
 80a9026:	4602      	mov	r2, r0
 80a9028:	460b      	mov	r3, r1
 80a902a:	4630      	mov	r0, r6
 80a902c:	e9c4 2300 	strd	r2, r3, [r4]
 80a9030:	4639      	mov	r1, r7
 80a9032:	f002 f913 	bl	80ab25c <__aeabi_dsub>
 80a9036:	a308      	add	r3, pc, #32	; (adr r3, 80a9058 <__ieee754_rem_pio2+0x420>)
 80a9038:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a903c:	f002 f910 	bl	80ab260 <__adddf3>
 80a9040:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80a9044:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a9048:	e629      	b.n	80a8c9e <__ieee754_rem_pio2+0x66>
 80a904a:	bf00      	nop
 80a904c:	f3af 8000 	nop.w
 80a9050:	1a600000 	.word	0x1a600000
 80a9054:	3dd0b461 	.word	0x3dd0b461
 80a9058:	2e037073 	.word	0x2e037073
 80a905c:	3ba3198a 	.word	0x3ba3198a
 80a9060:	2e000000 	.word	0x2e000000
 80a9064:	3ba3198a 	.word	0x3ba3198a
 80a9068:	252049c1 	.word	0x252049c1
 80a906c:	397b839a 	.word	0x397b839a
 80a9070:	1a626331 	.word	0x1a626331
 80a9074:	3dd0b461 	.word	0x3dd0b461
 80a9078:	3ff921fb 	.word	0x3ff921fb

080a907c <__ieee754_sqrt>:
 80a907c:	4a60      	ldr	r2, [pc, #384]	; (80a9200 <__ieee754_sqrt+0x184>)
 80a907e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a9082:	438a      	bics	r2, r1
 80a9084:	460e      	mov	r6, r1
 80a9086:	4605      	mov	r5, r0
 80a9088:	f000 8097 	beq.w	80a91ba <__ieee754_sqrt+0x13e>
 80a908c:	2900      	cmp	r1, #0
 80a908e:	460b      	mov	r3, r1
 80a9090:	4604      	mov	r4, r0
 80a9092:	dd4e      	ble.n	80a9132 <__ieee754_sqrt+0xb6>
 80a9094:	1509      	asrs	r1, r1, #20
 80a9096:	d05a      	beq.n	80a914e <__ieee754_sqrt+0xd2>
 80a9098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a909c:	07ca      	lsls	r2, r1, #31
 80a909e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a90a2:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
 80a90a6:	d403      	bmi.n	80a90b0 <__ieee754_sqrt+0x34>
 80a90a8:	005b      	lsls	r3, r3, #1
 80a90aa:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80a90ae:	0064      	lsls	r4, r4, #1
 80a90b0:	f04f 0c00 	mov.w	ip, #0
 80a90b4:	2516      	movs	r5, #22
 80a90b6:	4666      	mov	r6, ip
 80a90b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80a90bc:	0fe1      	lsrs	r1, r4, #31
 80a90be:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a90c2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80a90c6:	0064      	lsls	r4, r4, #1
 80a90c8:	18b1      	adds	r1, r6, r2
 80a90ca:	4299      	cmp	r1, r3
 80a90cc:	dc02      	bgt.n	80a90d4 <__ieee754_sqrt+0x58>
 80a90ce:	1a5b      	subs	r3, r3, r1
 80a90d0:	188e      	adds	r6, r1, r2
 80a90d2:	4494      	add	ip, r2
 80a90d4:	005b      	lsls	r3, r3, #1
 80a90d6:	3d01      	subs	r5, #1
 80a90d8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80a90dc:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a90e0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80a90e4:	d1f0      	bne.n	80a90c8 <__ieee754_sqrt+0x4c>
 80a90e6:	462f      	mov	r7, r5
 80a90e8:	2020      	movs	r0, #32
 80a90ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80a90ee:	e009      	b.n	80a9104 <__ieee754_sqrt+0x88>
 80a90f0:	d03d      	beq.n	80a916e <__ieee754_sqrt+0xf2>
 80a90f2:	0fe1      	lsrs	r1, r4, #31
 80a90f4:	3801      	subs	r0, #1
 80a90f6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a90fa:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80a90fe:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80a9102:	d03d      	beq.n	80a9180 <__ieee754_sqrt+0x104>
 80a9104:	42b3      	cmp	r3, r6
 80a9106:	eb02 0105 	add.w	r1, r2, r5
 80a910a:	ddf1      	ble.n	80a90f0 <__ieee754_sqrt+0x74>
 80a910c:	2900      	cmp	r1, #0
 80a910e:	eb01 0502 	add.w	r5, r1, r2
 80a9112:	db09      	blt.n	80a9128 <__ieee754_sqrt+0xac>
 80a9114:	46b0      	mov	r8, r6
 80a9116:	1b9b      	subs	r3, r3, r6
 80a9118:	42a1      	cmp	r1, r4
 80a911a:	bf88      	it	hi
 80a911c:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80a9120:	4646      	mov	r6, r8
 80a9122:	1a64      	subs	r4, r4, r1
 80a9124:	4417      	add	r7, r2
 80a9126:	e7e4      	b.n	80a90f2 <__ieee754_sqrt+0x76>
 80a9128:	2d00      	cmp	r5, #0
 80a912a:	dbf3      	blt.n	80a9114 <__ieee754_sqrt+0x98>
 80a912c:	f106 0801 	add.w	r8, r6, #1
 80a9130:	e7f1      	b.n	80a9116 <__ieee754_sqrt+0x9a>
 80a9132:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a9136:	4302      	orrs	r2, r0
 80a9138:	d057      	beq.n	80a91ea <__ieee754_sqrt+0x16e>
 80a913a:	2900      	cmp	r1, #0
 80a913c:	d14b      	bne.n	80a91d6 <__ieee754_sqrt+0x15a>
 80a913e:	0ae2      	lsrs	r2, r4, #11
 80a9140:	4613      	mov	r3, r2
 80a9142:	3915      	subs	r1, #21
 80a9144:	0564      	lsls	r4, r4, #21
 80a9146:	2a00      	cmp	r2, #0
 80a9148:	d0f9      	beq.n	80a913e <__ieee754_sqrt+0xc2>
 80a914a:	02d7      	lsls	r7, r2, #11
 80a914c:	d452      	bmi.n	80a91f4 <__ieee754_sqrt+0x178>
 80a914e:	2000      	movs	r0, #0
 80a9150:	005b      	lsls	r3, r3, #1
 80a9152:	02de      	lsls	r6, r3, #11
 80a9154:	4605      	mov	r5, r0
 80a9156:	f100 0001 	add.w	r0, r0, #1
 80a915a:	d5f9      	bpl.n	80a9150 <__ieee754_sqrt+0xd4>
 80a915c:	461a      	mov	r2, r3
 80a915e:	4623      	mov	r3, r4
 80a9160:	4084      	lsls	r4, r0
 80a9162:	f1c0 0020 	rsb	r0, r0, #32
 80a9166:	40c3      	lsrs	r3, r0
 80a9168:	4313      	orrs	r3, r2
 80a916a:	1b49      	subs	r1, r1, r5
 80a916c:	e794      	b.n	80a9098 <__ieee754_sqrt+0x1c>
 80a916e:	42a1      	cmp	r1, r4
 80a9170:	d8bf      	bhi.n	80a90f2 <__ieee754_sqrt+0x76>
 80a9172:	2900      	cmp	r1, #0
 80a9174:	eb01 0502 	add.w	r5, r1, r2
 80a9178:	dbd6      	blt.n	80a9128 <__ieee754_sqrt+0xac>
 80a917a:	4698      	mov	r8, r3
 80a917c:	2300      	movs	r3, #0
 80a917e:	e7cf      	b.n	80a9120 <__ieee754_sqrt+0xa4>
 80a9180:	4323      	orrs	r3, r4
 80a9182:	d113      	bne.n	80a91ac <__ieee754_sqrt+0x130>
 80a9184:	0878      	lsrs	r0, r7, #1
 80a9186:	ea4f 036c 	mov.w	r3, ip, asr #1
 80a918a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a918e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a9192:	f01c 0f01 	tst.w	ip, #1
 80a9196:	bf18      	it	ne
 80a9198:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
 80a919c:	eb03 550e 	add.w	r5, r3, lr, lsl #20
 80a91a0:	4602      	mov	r2, r0
 80a91a2:	462b      	mov	r3, r5
 80a91a4:	4610      	mov	r0, r2
 80a91a6:	4619      	mov	r1, r3
 80a91a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a91ac:	1c7b      	adds	r3, r7, #1
 80a91ae:	bf16      	itet	ne
 80a91b0:	1c78      	addne	r0, r7, #1
 80a91b2:	f10c 0c01 	addeq.w	ip, ip, #1
 80a91b6:	0840      	lsrne	r0, r0, #1
 80a91b8:	e7e5      	b.n	80a9186 <__ieee754_sqrt+0x10a>
 80a91ba:	4602      	mov	r2, r0
 80a91bc:	460b      	mov	r3, r1
 80a91be:	f002 fa05 	bl	80ab5cc <__aeabi_dmul>
 80a91c2:	462a      	mov	r2, r5
 80a91c4:	4633      	mov	r3, r6
 80a91c6:	f002 f84b 	bl	80ab260 <__adddf3>
 80a91ca:	4602      	mov	r2, r0
 80a91cc:	460b      	mov	r3, r1
 80a91ce:	4610      	mov	r0, r2
 80a91d0:	4619      	mov	r1, r3
 80a91d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a91d6:	4602      	mov	r2, r0
 80a91d8:	f002 f840 	bl	80ab25c <__aeabi_dsub>
 80a91dc:	4602      	mov	r2, r0
 80a91de:	460b      	mov	r3, r1
 80a91e0:	f002 fb1e 	bl	80ab820 <__aeabi_ddiv>
 80a91e4:	4602      	mov	r2, r0
 80a91e6:	460b      	mov	r3, r1
 80a91e8:	e7dc      	b.n	80a91a4 <__ieee754_sqrt+0x128>
 80a91ea:	4602      	mov	r2, r0
 80a91ec:	4619      	mov	r1, r3
 80a91ee:	4610      	mov	r0, r2
 80a91f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a91f4:	4623      	mov	r3, r4
 80a91f6:	2020      	movs	r0, #32
 80a91f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a91fc:	e7b3      	b.n	80a9166 <__ieee754_sqrt+0xea>
 80a91fe:	bf00      	nop
 80a9200:	7ff00000 	.word	0x7ff00000

080a9204 <__ieee754_fmodf>:
 80a9204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a9206:	f031 4700 	bics.w	r7, r1, #2147483648	; 0x80000000
 80a920a:	d041      	beq.n	80a9290 <__ieee754_fmodf+0x8c>
 80a920c:	f020 4c00 	bic.w	ip, r0, #2147483648	; 0x80000000
 80a9210:	f1bc 4fff 	cmp.w	ip, #2139095040	; 0x7f800000
 80a9214:	4603      	mov	r3, r0
 80a9216:	da3b      	bge.n	80a9290 <__ieee754_fmodf+0x8c>
 80a9218:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80a921c:	dc38      	bgt.n	80a9290 <__ieee754_fmodf+0x8c>
 80a921e:	45bc      	cmp	ip, r7
 80a9220:	db3b      	blt.n	80a929a <__ieee754_fmodf+0x96>
 80a9222:	f000 4600 	and.w	r6, r0, #2147483648	; 0x80000000
 80a9226:	d039      	beq.n	80a929c <__ieee754_fmodf+0x98>
 80a9228:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80a922c:	460c      	mov	r4, r1
 80a922e:	d14e      	bne.n	80a92ce <__ieee754_fmodf+0xca>
 80a9230:	ea4f 210c 	mov.w	r1, ip, lsl #8
 80a9234:	2900      	cmp	r1, #0
 80a9236:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 80a923a:	dd04      	ble.n	80a9246 <__ieee754_fmodf+0x42>
 80a923c:	0049      	lsls	r1, r1, #1
 80a923e:	2900      	cmp	r1, #0
 80a9240:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80a9244:	dcfa      	bgt.n	80a923c <__ieee754_fmodf+0x38>
 80a9246:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
 80a924a:	d150      	bne.n	80a92ee <__ieee754_fmodf+0xea>
 80a924c:	0239      	lsls	r1, r7, #8
 80a924e:	f06f 057d 	mvn.w	r5, #125	; 0x7d
 80a9252:	d403      	bmi.n	80a925c <__ieee754_fmodf+0x58>
 80a9254:	0049      	lsls	r1, r1, #1
 80a9256:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80a925a:	d5fb      	bpl.n	80a9254 <__ieee754_fmodf+0x50>
 80a925c:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80a9260:	db3f      	blt.n	80a92e2 <__ieee754_fmodf+0xde>
 80a9262:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80a9266:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80a926a:	f115 0f7e 	cmn.w	r5, #126	; 0x7e
 80a926e:	db32      	blt.n	80a92d6 <__ieee754_fmodf+0xd2>
 80a9270:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80a9274:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 80a9278:	1b52      	subs	r2, r2, r5
 80a927a:	d104      	bne.n	80a9286 <__ieee754_fmodf+0x82>
 80a927c:	e013      	b.n	80a92a6 <__ieee754_fmodf+0xa2>
 80a927e:	d00d      	beq.n	80a929c <__ieee754_fmodf+0x98>
 80a9280:	004b      	lsls	r3, r1, #1
 80a9282:	3a01      	subs	r2, #1
 80a9284:	d00f      	beq.n	80a92a6 <__ieee754_fmodf+0xa2>
 80a9286:	1b19      	subs	r1, r3, r4
 80a9288:	2900      	cmp	r1, #0
 80a928a:	daf8      	bge.n	80a927e <__ieee754_fmodf+0x7a>
 80a928c:	005b      	lsls	r3, r3, #1
 80a928e:	e7f8      	b.n	80a9282 <__ieee754_fmodf+0x7e>
 80a9290:	f002 fdf2 	bl	80abe78 <__aeabi_fmul>
 80a9294:	4601      	mov	r1, r0
 80a9296:	f002 fea3 	bl	80abfe0 <__aeabi_fdiv>
 80a929a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a929c:	4b19      	ldr	r3, [pc, #100]	; (80a9304 <__ieee754_fmodf+0x100>)
 80a929e:	0ff0      	lsrs	r0, r6, #31
 80a92a0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80a92a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a92a6:	1b1c      	subs	r4, r3, r4
 80a92a8:	bf58      	it	pl
 80a92aa:	4623      	movpl	r3, r4
 80a92ac:	b913      	cbnz	r3, 80a92b4 <__ieee754_fmodf+0xb0>
 80a92ae:	e7f5      	b.n	80a929c <__ieee754_fmodf+0x98>
 80a92b0:	005b      	lsls	r3, r3, #1
 80a92b2:	3d01      	subs	r5, #1
 80a92b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80a92b8:	dbfa      	blt.n	80a92b0 <__ieee754_fmodf+0xac>
 80a92ba:	f115 0f7e 	cmn.w	r5, #126	; 0x7e
 80a92be:	db19      	blt.n	80a92f4 <__ieee754_fmodf+0xf0>
 80a92c0:	f5a3 0000 	sub.w	r0, r3, #8388608	; 0x800000
 80a92c4:	4330      	orrs	r0, r6
 80a92c6:	357f      	adds	r5, #127	; 0x7f
 80a92c8:	ea40 50c5 	orr.w	r0, r0, r5, lsl #23
 80a92cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a92ce:	ea4f 52ec 	mov.w	r2, ip, asr #23
 80a92d2:	3a7f      	subs	r2, #127	; 0x7f
 80a92d4:	e7b7      	b.n	80a9246 <__ieee754_fmodf+0x42>
 80a92d6:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80a92da:	1b49      	subs	r1, r1, r5
 80a92dc:	fa07 f401 	lsl.w	r4, r7, r1
 80a92e0:	e7ca      	b.n	80a9278 <__ieee754_fmodf+0x74>
 80a92e2:	f06f 037d 	mvn.w	r3, #125	; 0x7d
 80a92e6:	1a9b      	subs	r3, r3, r2
 80a92e8:	fa0c f303 	lsl.w	r3, ip, r3
 80a92ec:	e7bd      	b.n	80a926a <__ieee754_fmodf+0x66>
 80a92ee:	15fd      	asrs	r5, r7, #23
 80a92f0:	3d7f      	subs	r5, #127	; 0x7f
 80a92f2:	e7b3      	b.n	80a925c <__ieee754_fmodf+0x58>
 80a92f4:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80a92f8:	1b40      	subs	r0, r0, r5
 80a92fa:	fa43 f000 	asr.w	r0, r3, r0
 80a92fe:	4330      	orrs	r0, r6
 80a9300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a9302:	bf00      	nop
 80a9304:	080ad8cc 	.word	0x080ad8cc

080a9308 <__ieee754_logf>:
 80a9308:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a930c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a9310:	d02b      	beq.n	80a936a <__ieee754_logf+0x62>
 80a9312:	2800      	cmp	r0, #0
 80a9314:	4601      	mov	r1, r0
 80a9316:	4603      	mov	r3, r0
 80a9318:	db40      	blt.n	80a939c <__ieee754_logf+0x94>
 80a931a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80a931e:	da39      	bge.n	80a9394 <__ieee754_logf+0x8c>
 80a9320:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a9324:	db41      	blt.n	80a93aa <__ieee754_logf+0xa2>
 80a9326:	2100      	movs	r1, #0
 80a9328:	4a8a      	ldr	r2, [pc, #552]	; (80a9554 <__ieee754_logf+0x24c>)
 80a932a:	f3c3 0616 	ubfx	r6, r3, #0, #23
 80a932e:	4432      	add	r2, r6
 80a9330:	15dc      	asrs	r4, r3, #23
 80a9332:	f402 0000 	and.w	r0, r2, #8388608	; 0x800000
 80a9336:	3c7f      	subs	r4, #127	; 0x7f
 80a9338:	f080 507e 	eor.w	r0, r0, #1065353216	; 0x3f800000
 80a933c:	440c      	add	r4, r1
 80a933e:	4330      	orrs	r0, r6
 80a9340:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a9344:	eb04 54d2 	add.w	r4, r4, r2, lsr #23
 80a9348:	f002 fc8c 	bl	80abc64 <__aeabi_fsub>
 80a934c:	4b82      	ldr	r3, [pc, #520]	; (80a9558 <__ieee754_logf+0x250>)
 80a934e:	f106 020f 	add.w	r2, r6, #15
 80a9352:	4013      	ands	r3, r2
 80a9354:	4605      	mov	r5, r0
 80a9356:	bb83      	cbnz	r3, 80a93ba <__ieee754_logf+0xb2>
 80a9358:	2100      	movs	r1, #0
 80a935a:	f002 ff21 	bl	80ac1a0 <__aeabi_fcmpeq>
 80a935e:	2800      	cmp	r0, #0
 80a9360:	f000 80a2 	beq.w	80a94a8 <__ieee754_logf+0x1a0>
 80a9364:	b944      	cbnz	r4, 80a9378 <__ieee754_logf+0x70>
 80a9366:	2000      	movs	r0, #0
 80a9368:	e004      	b.n	80a9374 <__ieee754_logf+0x6c>
 80a936a:	2100      	movs	r1, #0
 80a936c:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 80a9370:	f002 fe36 	bl	80abfe0 <__aeabi_fdiv>
 80a9374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a9378:	4620      	mov	r0, r4
 80a937a:	f002 fd29 	bl	80abdd0 <__aeabi_i2f>
 80a937e:	4977      	ldr	r1, [pc, #476]	; (80a955c <__ieee754_logf+0x254>)
 80a9380:	4605      	mov	r5, r0
 80a9382:	f002 fd79 	bl	80abe78 <__aeabi_fmul>
 80a9386:	4976      	ldr	r1, [pc, #472]	; (80a9560 <__ieee754_logf+0x258>)
 80a9388:	4604      	mov	r4, r0
 80a938a:	4628      	mov	r0, r5
 80a938c:	f002 fd74 	bl	80abe78 <__aeabi_fmul>
 80a9390:	4601      	mov	r1, r0
 80a9392:	4620      	mov	r0, r4
 80a9394:	f002 fc68 	bl	80abc68 <__addsf3>
 80a9398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a939c:	f002 fc62 	bl	80abc64 <__aeabi_fsub>
 80a93a0:	2100      	movs	r1, #0
 80a93a2:	f002 fe1d 	bl	80abfe0 <__aeabi_fdiv>
 80a93a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a93aa:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80a93ae:	f002 fd63 	bl	80abe78 <__aeabi_fmul>
 80a93b2:	f06f 0118 	mvn.w	r1, #24
 80a93b6:	4603      	mov	r3, r0
 80a93b8:	e7b6      	b.n	80a9328 <__ieee754_logf+0x20>
 80a93ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80a93be:	f002 fc53 	bl	80abc68 <__addsf3>
 80a93c2:	4601      	mov	r1, r0
 80a93c4:	4628      	mov	r0, r5
 80a93c6:	f002 fe0b 	bl	80abfe0 <__aeabi_fdiv>
 80a93ca:	4680      	mov	r8, r0
 80a93cc:	4620      	mov	r0, r4
 80a93ce:	f002 fcff 	bl	80abdd0 <__aeabi_i2f>
 80a93d2:	4641      	mov	r1, r8
 80a93d4:	4681      	mov	r9, r0
 80a93d6:	4640      	mov	r0, r8
 80a93d8:	f002 fd4e 	bl	80abe78 <__aeabi_fmul>
 80a93dc:	4601      	mov	r1, r0
 80a93de:	4682      	mov	sl, r0
 80a93e0:	f002 fd4a 	bl	80abe78 <__aeabi_fmul>
 80a93e4:	4607      	mov	r7, r0
 80a93e6:	495f      	ldr	r1, [pc, #380]	; (80a9564 <__ieee754_logf+0x25c>)
 80a93e8:	f002 fd46 	bl	80abe78 <__aeabi_fmul>
 80a93ec:	495e      	ldr	r1, [pc, #376]	; (80a9568 <__ieee754_logf+0x260>)
 80a93ee:	f002 fc3b 	bl	80abc68 <__addsf3>
 80a93f2:	4639      	mov	r1, r7
 80a93f4:	f002 fd40 	bl	80abe78 <__aeabi_fmul>
 80a93f8:	495c      	ldr	r1, [pc, #368]	; (80a956c <__ieee754_logf+0x264>)
 80a93fa:	f002 fc35 	bl	80abc68 <__addsf3>
 80a93fe:	4639      	mov	r1, r7
 80a9400:	f002 fd3a 	bl	80abe78 <__aeabi_fmul>
 80a9404:	495a      	ldr	r1, [pc, #360]	; (80a9570 <__ieee754_logf+0x268>)
 80a9406:	f002 fc2f 	bl	80abc68 <__addsf3>
 80a940a:	4651      	mov	r1, sl
 80a940c:	f002 fd34 	bl	80abe78 <__aeabi_fmul>
 80a9410:	4958      	ldr	r1, [pc, #352]	; (80a9574 <__ieee754_logf+0x26c>)
 80a9412:	4682      	mov	sl, r0
 80a9414:	4638      	mov	r0, r7
 80a9416:	f002 fd2f 	bl	80abe78 <__aeabi_fmul>
 80a941a:	4957      	ldr	r1, [pc, #348]	; (80a9578 <__ieee754_logf+0x270>)
 80a941c:	f002 fc24 	bl	80abc68 <__addsf3>
 80a9420:	4639      	mov	r1, r7
 80a9422:	f002 fd29 	bl	80abe78 <__aeabi_fmul>
 80a9426:	4955      	ldr	r1, [pc, #340]	; (80a957c <__ieee754_logf+0x274>)
 80a9428:	f002 fc1e 	bl	80abc68 <__addsf3>
 80a942c:	4639      	mov	r1, r7
 80a942e:	f002 fd23 	bl	80abe78 <__aeabi_fmul>
 80a9432:	4601      	mov	r1, r0
 80a9434:	4650      	mov	r0, sl
 80a9436:	f002 fc17 	bl	80abc68 <__addsf3>
 80a943a:	4a51      	ldr	r2, [pc, #324]	; (80a9580 <__ieee754_logf+0x278>)
 80a943c:	f5c6 1357 	rsb	r3, r6, #3522560	; 0x35c000
 80a9440:	4432      	add	r2, r6
 80a9442:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80a9446:	4313      	orrs	r3, r2
 80a9448:	2b00      	cmp	r3, #0
 80a944a:	4606      	mov	r6, r0
 80a944c:	dd4f      	ble.n	80a94ee <__ieee754_logf+0x1e6>
 80a944e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a9452:	4628      	mov	r0, r5
 80a9454:	f002 fd10 	bl	80abe78 <__aeabi_fmul>
 80a9458:	4629      	mov	r1, r5
 80a945a:	f002 fd0d 	bl	80abe78 <__aeabi_fmul>
 80a945e:	4607      	mov	r7, r0
 80a9460:	2c00      	cmp	r4, #0
 80a9462:	d051      	beq.n	80a9508 <__ieee754_logf+0x200>
 80a9464:	493d      	ldr	r1, [pc, #244]	; (80a955c <__ieee754_logf+0x254>)
 80a9466:	4648      	mov	r0, r9
 80a9468:	f002 fd06 	bl	80abe78 <__aeabi_fmul>
 80a946c:	4639      	mov	r1, r7
 80a946e:	4604      	mov	r4, r0
 80a9470:	4630      	mov	r0, r6
 80a9472:	f002 fbf9 	bl	80abc68 <__addsf3>
 80a9476:	4641      	mov	r1, r8
 80a9478:	f002 fcfe 	bl	80abe78 <__aeabi_fmul>
 80a947c:	4938      	ldr	r1, [pc, #224]	; (80a9560 <__ieee754_logf+0x258>)
 80a947e:	4606      	mov	r6, r0
 80a9480:	4648      	mov	r0, r9
 80a9482:	f002 fcf9 	bl	80abe78 <__aeabi_fmul>
 80a9486:	4601      	mov	r1, r0
 80a9488:	4630      	mov	r0, r6
 80a948a:	f002 fbed 	bl	80abc68 <__addsf3>
 80a948e:	4601      	mov	r1, r0
 80a9490:	4638      	mov	r0, r7
 80a9492:	f002 fbe7 	bl	80abc64 <__aeabi_fsub>
 80a9496:	4629      	mov	r1, r5
 80a9498:	f002 fbe4 	bl	80abc64 <__aeabi_fsub>
 80a949c:	4601      	mov	r1, r0
 80a949e:	4620      	mov	r0, r4
 80a94a0:	f002 fbe0 	bl	80abc64 <__aeabi_fsub>
 80a94a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a94a8:	4936      	ldr	r1, [pc, #216]	; (80a9584 <__ieee754_logf+0x27c>)
 80a94aa:	4628      	mov	r0, r5
 80a94ac:	f002 fce4 	bl	80abe78 <__aeabi_fmul>
 80a94b0:	4601      	mov	r1, r0
 80a94b2:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80a94b6:	f002 fbd5 	bl	80abc64 <__aeabi_fsub>
 80a94ba:	4629      	mov	r1, r5
 80a94bc:	4606      	mov	r6, r0
 80a94be:	4628      	mov	r0, r5
 80a94c0:	f002 fcda 	bl	80abe78 <__aeabi_fmul>
 80a94c4:	4601      	mov	r1, r0
 80a94c6:	4630      	mov	r0, r6
 80a94c8:	f002 fcd6 	bl	80abe78 <__aeabi_fmul>
 80a94cc:	4606      	mov	r6, r0
 80a94ce:	b35c      	cbz	r4, 80a9528 <__ieee754_logf+0x220>
 80a94d0:	4620      	mov	r0, r4
 80a94d2:	f002 fc7d 	bl	80abdd0 <__aeabi_i2f>
 80a94d6:	4921      	ldr	r1, [pc, #132]	; (80a955c <__ieee754_logf+0x254>)
 80a94d8:	4607      	mov	r7, r0
 80a94da:	f002 fccd 	bl	80abe78 <__aeabi_fmul>
 80a94de:	4604      	mov	r4, r0
 80a94e0:	4638      	mov	r0, r7
 80a94e2:	491f      	ldr	r1, [pc, #124]	; (80a9560 <__ieee754_logf+0x258>)
 80a94e4:	f002 fcc8 	bl	80abe78 <__aeabi_fmul>
 80a94e8:	4601      	mov	r1, r0
 80a94ea:	4630      	mov	r0, r6
 80a94ec:	e7d1      	b.n	80a9492 <__ieee754_logf+0x18a>
 80a94ee:	bb04      	cbnz	r4, 80a9532 <__ieee754_logf+0x22a>
 80a94f0:	4601      	mov	r1, r0
 80a94f2:	4628      	mov	r0, r5
 80a94f4:	f002 fbb6 	bl	80abc64 <__aeabi_fsub>
 80a94f8:	4641      	mov	r1, r8
 80a94fa:	f002 fcbd 	bl	80abe78 <__aeabi_fmul>
 80a94fe:	4601      	mov	r1, r0
 80a9500:	4628      	mov	r0, r5
 80a9502:	f002 fbaf 	bl	80abc64 <__aeabi_fsub>
 80a9506:	e735      	b.n	80a9374 <__ieee754_logf+0x6c>
 80a9508:	4639      	mov	r1, r7
 80a950a:	4630      	mov	r0, r6
 80a950c:	f002 fbac 	bl	80abc68 <__addsf3>
 80a9510:	4641      	mov	r1, r8
 80a9512:	f002 fcb1 	bl	80abe78 <__aeabi_fmul>
 80a9516:	4601      	mov	r1, r0
 80a9518:	4638      	mov	r0, r7
 80a951a:	f002 fba3 	bl	80abc64 <__aeabi_fsub>
 80a951e:	4601      	mov	r1, r0
 80a9520:	4628      	mov	r0, r5
 80a9522:	f002 fb9f 	bl	80abc64 <__aeabi_fsub>
 80a9526:	e725      	b.n	80a9374 <__ieee754_logf+0x6c>
 80a9528:	4601      	mov	r1, r0
 80a952a:	4628      	mov	r0, r5
 80a952c:	f002 fb9a 	bl	80abc64 <__aeabi_fsub>
 80a9530:	e720      	b.n	80a9374 <__ieee754_logf+0x6c>
 80a9532:	490a      	ldr	r1, [pc, #40]	; (80a955c <__ieee754_logf+0x254>)
 80a9534:	4648      	mov	r0, r9
 80a9536:	f002 fc9f 	bl	80abe78 <__aeabi_fmul>
 80a953a:	4631      	mov	r1, r6
 80a953c:	4604      	mov	r4, r0
 80a953e:	4628      	mov	r0, r5
 80a9540:	f002 fb90 	bl	80abc64 <__aeabi_fsub>
 80a9544:	4641      	mov	r1, r8
 80a9546:	f002 fc97 	bl	80abe78 <__aeabi_fmul>
 80a954a:	4905      	ldr	r1, [pc, #20]	; (80a9560 <__ieee754_logf+0x258>)
 80a954c:	4606      	mov	r6, r0
 80a954e:	4648      	mov	r0, r9
 80a9550:	e7c8      	b.n	80a94e4 <__ieee754_logf+0x1dc>
 80a9552:	bf00      	nop
 80a9554:	004afb20 	.word	0x004afb20
 80a9558:	007ffff0 	.word	0x007ffff0
 80a955c:	3f317180 	.word	0x3f317180
 80a9560:	3717f7d1 	.word	0x3717f7d1
 80a9564:	3e178897 	.word	0x3e178897
 80a9568:	3e3a3325 	.word	0x3e3a3325
 80a956c:	3e924925 	.word	0x3e924925
 80a9570:	3f2aaaab 	.word	0x3f2aaaab
 80a9574:	3e1cd04f 	.word	0x3e1cd04f
 80a9578:	3e638e29 	.word	0x3e638e29
 80a957c:	3ecccccd 	.word	0x3ecccccd
 80a9580:	ffcf5c30 	.word	0xffcf5c30
 80a9584:	3eaaaaab 	.word	0x3eaaaaab

080a9588 <__ieee754_rem_pio2f>:
 80a9588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a958c:	4aab      	ldr	r2, [pc, #684]	; (80a983c <__ieee754_rem_pio2f+0x2b4>)
 80a958e:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80a9592:	4294      	cmp	r4, r2
 80a9594:	460d      	mov	r5, r1
 80a9596:	b089      	sub	sp, #36	; 0x24
 80a9598:	dd6c      	ble.n	80a9674 <__ieee754_rem_pio2f+0xec>
 80a959a:	4aa9      	ldr	r2, [pc, #676]	; (80a9840 <__ieee754_rem_pio2f+0x2b8>)
 80a959c:	4607      	mov	r7, r0
 80a959e:	4294      	cmp	r4, r2
 80a95a0:	dc1c      	bgt.n	80a95dc <__ieee754_rem_pio2f+0x54>
 80a95a2:	2800      	cmp	r0, #0
 80a95a4:	49a7      	ldr	r1, [pc, #668]	; (80a9844 <__ieee754_rem_pio2f+0x2bc>)
 80a95a6:	f340 811e 	ble.w	80a97e6 <__ieee754_rem_pio2f+0x25e>
 80a95aa:	f002 fb5b 	bl	80abc64 <__aeabi_fsub>
 80a95ae:	4ba6      	ldr	r3, [pc, #664]	; (80a9848 <__ieee754_rem_pio2f+0x2c0>)
 80a95b0:	f024 040f 	bic.w	r4, r4, #15
 80a95b4:	429c      	cmp	r4, r3
 80a95b6:	4606      	mov	r6, r0
 80a95b8:	d06b      	beq.n	80a9692 <__ieee754_rem_pio2f+0x10a>
 80a95ba:	49a4      	ldr	r1, [pc, #656]	; (80a984c <__ieee754_rem_pio2f+0x2c4>)
 80a95bc:	f002 fb52 	bl	80abc64 <__aeabi_fsub>
 80a95c0:	4601      	mov	r1, r0
 80a95c2:	4630      	mov	r0, r6
 80a95c4:	6029      	str	r1, [r5, #0]
 80a95c6:	f002 fb4d 	bl	80abc64 <__aeabi_fsub>
 80a95ca:	49a0      	ldr	r1, [pc, #640]	; (80a984c <__ieee754_rem_pio2f+0x2c4>)
 80a95cc:	f002 fb4a 	bl	80abc64 <__aeabi_fsub>
 80a95d0:	2601      	movs	r6, #1
 80a95d2:	6068      	str	r0, [r5, #4]
 80a95d4:	4630      	mov	r0, r6
 80a95d6:	b009      	add	sp, #36	; 0x24
 80a95d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a95dc:	4a9c      	ldr	r2, [pc, #624]	; (80a9850 <__ieee754_rem_pio2f+0x2c8>)
 80a95de:	4294      	cmp	r4, r2
 80a95e0:	dd6c      	ble.n	80a96bc <__ieee754_rem_pio2f+0x134>
 80a95e2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80a95e6:	da4d      	bge.n	80a9684 <__ieee754_rem_pio2f+0xfc>
 80a95e8:	15e6      	asrs	r6, r4, #23
 80a95ea:	3e86      	subs	r6, #134	; 0x86
 80a95ec:	eba4 54c6 	sub.w	r4, r4, r6, lsl #23
 80a95f0:	4620      	mov	r0, r4
 80a95f2:	f002 fe1d 	bl	80ac230 <__aeabi_f2iz>
 80a95f6:	f002 fbeb 	bl	80abdd0 <__aeabi_i2f>
 80a95fa:	4601      	mov	r1, r0
 80a95fc:	4620      	mov	r0, r4
 80a95fe:	9105      	str	r1, [sp, #20]
 80a9600:	f002 fb30 	bl	80abc64 <__aeabi_fsub>
 80a9604:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a9608:	f002 fc36 	bl	80abe78 <__aeabi_fmul>
 80a960c:	4680      	mov	r8, r0
 80a960e:	f002 fe0f 	bl	80ac230 <__aeabi_f2iz>
 80a9612:	f002 fbdd 	bl	80abdd0 <__aeabi_i2f>
 80a9616:	4604      	mov	r4, r0
 80a9618:	4640      	mov	r0, r8
 80a961a:	4621      	mov	r1, r4
 80a961c:	9406      	str	r4, [sp, #24]
 80a961e:	f002 fb21 	bl	80abc64 <__aeabi_fsub>
 80a9622:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a9626:	f002 fc27 	bl	80abe78 <__aeabi_fmul>
 80a962a:	2100      	movs	r1, #0
 80a962c:	9007      	str	r0, [sp, #28]
 80a962e:	f002 fdb7 	bl	80ac1a0 <__aeabi_fcmpeq>
 80a9632:	2800      	cmp	r0, #0
 80a9634:	f000 80b8 	beq.w	80a97a8 <__ieee754_rem_pio2f+0x220>
 80a9638:	4620      	mov	r0, r4
 80a963a:	2100      	movs	r1, #0
 80a963c:	f002 fdb0 	bl	80ac1a0 <__aeabi_fcmpeq>
 80a9640:	2800      	cmp	r0, #0
 80a9642:	bf14      	ite	ne
 80a9644:	2301      	movne	r3, #1
 80a9646:	2302      	moveq	r3, #2
 80a9648:	2002      	movs	r0, #2
 80a964a:	4982      	ldr	r1, [pc, #520]	; (80a9854 <__ieee754_rem_pio2f+0x2cc>)
 80a964c:	4632      	mov	r2, r6
 80a964e:	e9cd 0100 	strd	r0, r1, [sp]
 80a9652:	4629      	mov	r1, r5
 80a9654:	a805      	add	r0, sp, #20
 80a9656:	f000 ffdf 	bl	80aa618 <__kernel_rem_pio2f>
 80a965a:	2f00      	cmp	r7, #0
 80a965c:	4606      	mov	r6, r0
 80a965e:	dab9      	bge.n	80a95d4 <__ieee754_rem_pio2f+0x4c>
 80a9660:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a9664:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a9668:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a966c:	4246      	negs	r6, r0
 80a966e:	602a      	str	r2, [r5, #0]
 80a9670:	606b      	str	r3, [r5, #4]
 80a9672:	e7af      	b.n	80a95d4 <__ieee754_rem_pio2f+0x4c>
 80a9674:	2600      	movs	r6, #0
 80a9676:	6028      	str	r0, [r5, #0]
 80a9678:	2200      	movs	r2, #0
 80a967a:	4630      	mov	r0, r6
 80a967c:	604a      	str	r2, [r1, #4]
 80a967e:	b009      	add	sp, #36	; 0x24
 80a9680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a9684:	4601      	mov	r1, r0
 80a9686:	f002 faed 	bl	80abc64 <__aeabi_fsub>
 80a968a:	2600      	movs	r6, #0
 80a968c:	6068      	str	r0, [r5, #4]
 80a968e:	6028      	str	r0, [r5, #0]
 80a9690:	e7a0      	b.n	80a95d4 <__ieee754_rem_pio2f+0x4c>
 80a9692:	4971      	ldr	r1, [pc, #452]	; (80a9858 <__ieee754_rem_pio2f+0x2d0>)
 80a9694:	f002 fae6 	bl	80abc64 <__aeabi_fsub>
 80a9698:	4970      	ldr	r1, [pc, #448]	; (80a985c <__ieee754_rem_pio2f+0x2d4>)
 80a969a:	4604      	mov	r4, r0
 80a969c:	f002 fae2 	bl	80abc64 <__aeabi_fsub>
 80a96a0:	4601      	mov	r1, r0
 80a96a2:	4620      	mov	r0, r4
 80a96a4:	6029      	str	r1, [r5, #0]
 80a96a6:	f002 fadd 	bl	80abc64 <__aeabi_fsub>
 80a96aa:	496c      	ldr	r1, [pc, #432]	; (80a985c <__ieee754_rem_pio2f+0x2d4>)
 80a96ac:	f002 fada 	bl	80abc64 <__aeabi_fsub>
 80a96b0:	2601      	movs	r6, #1
 80a96b2:	6068      	str	r0, [r5, #4]
 80a96b4:	4630      	mov	r0, r6
 80a96b6:	b009      	add	sp, #36	; 0x24
 80a96b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a96bc:	f001 fd2e 	bl	80ab11c <fabsf>
 80a96c0:	4967      	ldr	r1, [pc, #412]	; (80a9860 <__ieee754_rem_pio2f+0x2d8>)
 80a96c2:	4680      	mov	r8, r0
 80a96c4:	f002 fbd8 	bl	80abe78 <__aeabi_fmul>
 80a96c8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a96cc:	f002 facc 	bl	80abc68 <__addsf3>
 80a96d0:	f002 fdae 	bl	80ac230 <__aeabi_f2iz>
 80a96d4:	4606      	mov	r6, r0
 80a96d6:	f002 fb7b 	bl	80abdd0 <__aeabi_i2f>
 80a96da:	495a      	ldr	r1, [pc, #360]	; (80a9844 <__ieee754_rem_pio2f+0x2bc>)
 80a96dc:	4683      	mov	fp, r0
 80a96de:	f002 fbcb 	bl	80abe78 <__aeabi_fmul>
 80a96e2:	4601      	mov	r1, r0
 80a96e4:	4640      	mov	r0, r8
 80a96e6:	f002 fabd 	bl	80abc64 <__aeabi_fsub>
 80a96ea:	4958      	ldr	r1, [pc, #352]	; (80a984c <__ieee754_rem_pio2f+0x2c4>)
 80a96ec:	4682      	mov	sl, r0
 80a96ee:	4658      	mov	r0, fp
 80a96f0:	f002 fbc2 	bl	80abe78 <__aeabi_fmul>
 80a96f4:	2e1f      	cmp	r6, #31
 80a96f6:	4681      	mov	r9, r0
 80a96f8:	4601      	mov	r1, r0
 80a96fa:	4650      	mov	r0, sl
 80a96fc:	dc20      	bgt.n	80a9740 <__ieee754_rem_pio2f+0x1b8>
 80a96fe:	4b59      	ldr	r3, [pc, #356]	; (80a9864 <__ieee754_rem_pio2f+0x2dc>)
 80a9700:	1e72      	subs	r2, r6, #1
 80a9702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a9706:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80a970a:	429a      	cmp	r2, r3
 80a970c:	d018      	beq.n	80a9740 <__ieee754_rem_pio2f+0x1b8>
 80a970e:	f002 faa9 	bl	80abc64 <__aeabi_fsub>
 80a9712:	4680      	mov	r8, r0
 80a9714:	f8c5 8000 	str.w	r8, [r5]
 80a9718:	4641      	mov	r1, r8
 80a971a:	4650      	mov	r0, sl
 80a971c:	f002 faa2 	bl	80abc64 <__aeabi_fsub>
 80a9720:	4649      	mov	r1, r9
 80a9722:	f002 fa9f 	bl	80abc64 <__aeabi_fsub>
 80a9726:	2f00      	cmp	r7, #0
 80a9728:	6068      	str	r0, [r5, #4]
 80a972a:	f6bf af53 	bge.w	80a95d4 <__ieee754_rem_pio2f+0x4c>
 80a972e:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
 80a9732:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a9736:	f8c5 8000 	str.w	r8, [r5]
 80a973a:	6068      	str	r0, [r5, #4]
 80a973c:	4276      	negs	r6, r6
 80a973e:	e749      	b.n	80a95d4 <__ieee754_rem_pio2f+0x4c>
 80a9740:	f002 fa90 	bl	80abc64 <__aeabi_fsub>
 80a9744:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80a9748:	ebc3 53d4 	rsb	r3, r3, r4, lsr #23
 80a974c:	2b08      	cmp	r3, #8
 80a974e:	4680      	mov	r8, r0
 80a9750:	ea4f 52e4 	mov.w	r2, r4, asr #23
 80a9754:	ddde      	ble.n	80a9714 <__ieee754_rem_pio2f+0x18c>
 80a9756:	4940      	ldr	r1, [pc, #256]	; (80a9858 <__ieee754_rem_pio2f+0x2d0>)
 80a9758:	4658      	mov	r0, fp
 80a975a:	9203      	str	r2, [sp, #12]
 80a975c:	f002 fb8c 	bl	80abe78 <__aeabi_fmul>
 80a9760:	4680      	mov	r8, r0
 80a9762:	4650      	mov	r0, sl
 80a9764:	4641      	mov	r1, r8
 80a9766:	f002 fa7d 	bl	80abc64 <__aeabi_fsub>
 80a976a:	4604      	mov	r4, r0
 80a976c:	4650      	mov	r0, sl
 80a976e:	4621      	mov	r1, r4
 80a9770:	f002 fa78 	bl	80abc64 <__aeabi_fsub>
 80a9774:	4641      	mov	r1, r8
 80a9776:	f002 fa75 	bl	80abc64 <__aeabi_fsub>
 80a977a:	4680      	mov	r8, r0
 80a977c:	4937      	ldr	r1, [pc, #220]	; (80a985c <__ieee754_rem_pio2f+0x2d4>)
 80a977e:	4658      	mov	r0, fp
 80a9780:	f002 fb7a 	bl	80abe78 <__aeabi_fmul>
 80a9784:	4641      	mov	r1, r8
 80a9786:	f002 fa6d 	bl	80abc64 <__aeabi_fsub>
 80a978a:	4681      	mov	r9, r0
 80a978c:	4620      	mov	r0, r4
 80a978e:	4649      	mov	r1, r9
 80a9790:	f002 fa68 	bl	80abc64 <__aeabi_fsub>
 80a9794:	9a03      	ldr	r2, [sp, #12]
 80a9796:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80a979a:	1ad2      	subs	r2, r2, r3
 80a979c:	2a19      	cmp	r2, #25
 80a979e:	4680      	mov	r8, r0
 80a97a0:	dc04      	bgt.n	80a97ac <__ieee754_rem_pio2f+0x224>
 80a97a2:	46a2      	mov	sl, r4
 80a97a4:	6028      	str	r0, [r5, #0]
 80a97a6:	e7b7      	b.n	80a9718 <__ieee754_rem_pio2f+0x190>
 80a97a8:	2303      	movs	r3, #3
 80a97aa:	e74d      	b.n	80a9648 <__ieee754_rem_pio2f+0xc0>
 80a97ac:	492e      	ldr	r1, [pc, #184]	; (80a9868 <__ieee754_rem_pio2f+0x2e0>)
 80a97ae:	4658      	mov	r0, fp
 80a97b0:	f002 fb62 	bl	80abe78 <__aeabi_fmul>
 80a97b4:	4680      	mov	r8, r0
 80a97b6:	4620      	mov	r0, r4
 80a97b8:	4641      	mov	r1, r8
 80a97ba:	f002 fa53 	bl	80abc64 <__aeabi_fsub>
 80a97be:	4682      	mov	sl, r0
 80a97c0:	4620      	mov	r0, r4
 80a97c2:	4651      	mov	r1, sl
 80a97c4:	f002 fa4e 	bl	80abc64 <__aeabi_fsub>
 80a97c8:	4641      	mov	r1, r8
 80a97ca:	f002 fa4b 	bl	80abc64 <__aeabi_fsub>
 80a97ce:	4604      	mov	r4, r0
 80a97d0:	4926      	ldr	r1, [pc, #152]	; (80a986c <__ieee754_rem_pio2f+0x2e4>)
 80a97d2:	4658      	mov	r0, fp
 80a97d4:	f002 fb50 	bl	80abe78 <__aeabi_fmul>
 80a97d8:	4621      	mov	r1, r4
 80a97da:	f002 fa43 	bl	80abc64 <__aeabi_fsub>
 80a97de:	4681      	mov	r9, r0
 80a97e0:	4650      	mov	r0, sl
 80a97e2:	4649      	mov	r1, r9
 80a97e4:	e793      	b.n	80a970e <__ieee754_rem_pio2f+0x186>
 80a97e6:	f002 fa3f 	bl	80abc68 <__addsf3>
 80a97ea:	4b17      	ldr	r3, [pc, #92]	; (80a9848 <__ieee754_rem_pio2f+0x2c0>)
 80a97ec:	f024 040f 	bic.w	r4, r4, #15
 80a97f0:	429c      	cmp	r4, r3
 80a97f2:	4606      	mov	r6, r0
 80a97f4:	d00e      	beq.n	80a9814 <__ieee754_rem_pio2f+0x28c>
 80a97f6:	4915      	ldr	r1, [pc, #84]	; (80a984c <__ieee754_rem_pio2f+0x2c4>)
 80a97f8:	f002 fa36 	bl	80abc68 <__addsf3>
 80a97fc:	4601      	mov	r1, r0
 80a97fe:	4630      	mov	r0, r6
 80a9800:	6029      	str	r1, [r5, #0]
 80a9802:	f002 fa2f 	bl	80abc64 <__aeabi_fsub>
 80a9806:	4911      	ldr	r1, [pc, #68]	; (80a984c <__ieee754_rem_pio2f+0x2c4>)
 80a9808:	f002 fa2e 	bl	80abc68 <__addsf3>
 80a980c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a9810:	6068      	str	r0, [r5, #4]
 80a9812:	e6df      	b.n	80a95d4 <__ieee754_rem_pio2f+0x4c>
 80a9814:	4910      	ldr	r1, [pc, #64]	; (80a9858 <__ieee754_rem_pio2f+0x2d0>)
 80a9816:	f002 fa27 	bl	80abc68 <__addsf3>
 80a981a:	4910      	ldr	r1, [pc, #64]	; (80a985c <__ieee754_rem_pio2f+0x2d4>)
 80a981c:	4604      	mov	r4, r0
 80a981e:	f002 fa23 	bl	80abc68 <__addsf3>
 80a9822:	4601      	mov	r1, r0
 80a9824:	4620      	mov	r0, r4
 80a9826:	6029      	str	r1, [r5, #0]
 80a9828:	f002 fa1c 	bl	80abc64 <__aeabi_fsub>
 80a982c:	490b      	ldr	r1, [pc, #44]	; (80a985c <__ieee754_rem_pio2f+0x2d4>)
 80a982e:	f002 fa1b 	bl	80abc68 <__addsf3>
 80a9832:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a9836:	6068      	str	r0, [r5, #4]
 80a9838:	e6cc      	b.n	80a95d4 <__ieee754_rem_pio2f+0x4c>
 80a983a:	bf00      	nop
 80a983c:	3f490fd8 	.word	0x3f490fd8
 80a9840:	4016cbe3 	.word	0x4016cbe3
 80a9844:	3fc90f80 	.word	0x3fc90f80
 80a9848:	3fc90fd0 	.word	0x3fc90fd0
 80a984c:	37354443 	.word	0x37354443
 80a9850:	43490f80 	.word	0x43490f80
 80a9854:	080ad954 	.word	0x080ad954
 80a9858:	37354400 	.word	0x37354400
 80a985c:	2e85a308 	.word	0x2e85a308
 80a9860:	3f22f984 	.word	0x3f22f984
 80a9864:	080ad8d4 	.word	0x080ad8d4
 80a9868:	2e85a300 	.word	0x2e85a300
 80a986c:	248d3132 	.word	0x248d3132

080a9870 <__kernel_cos>:
 80a9870:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 80a9874:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80a9878:	b086      	sub	sp, #24
 80a987a:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80a987e:	4688      	mov	r8, r1
 80a9880:	4606      	mov	r6, r0
 80a9882:	e9cd 2300 	strd	r2, r3, [sp]
 80a9886:	da6c      	bge.n	80a9962 <__kernel_cos+0xf2>
 80a9888:	f002 f950 	bl	80abb2c <__aeabi_d2iz>
 80a988c:	2800      	cmp	r0, #0
 80a988e:	f000 80ed 	beq.w	80a9a6c <__kernel_cos+0x1fc>
 80a9892:	4632      	mov	r2, r6
 80a9894:	4643      	mov	r3, r8
 80a9896:	4630      	mov	r0, r6
 80a9898:	4641      	mov	r1, r8
 80a989a:	f001 fe97 	bl	80ab5cc <__aeabi_dmul>
 80a989e:	a376      	add	r3, pc, #472	; (adr r3, 80a9a78 <__kernel_cos+0x208>)
 80a98a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a98a4:	4604      	mov	r4, r0
 80a98a6:	460d      	mov	r5, r1
 80a98a8:	f001 fe90 	bl	80ab5cc <__aeabi_dmul>
 80a98ac:	a374      	add	r3, pc, #464	; (adr r3, 80a9a80 <__kernel_cos+0x210>)
 80a98ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a98b2:	f001 fcd5 	bl	80ab260 <__adddf3>
 80a98b6:	4622      	mov	r2, r4
 80a98b8:	462b      	mov	r3, r5
 80a98ba:	f001 fe87 	bl	80ab5cc <__aeabi_dmul>
 80a98be:	a372      	add	r3, pc, #456	; (adr r3, 80a9a88 <__kernel_cos+0x218>)
 80a98c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a98c4:	f001 fcca 	bl	80ab25c <__aeabi_dsub>
 80a98c8:	4622      	mov	r2, r4
 80a98ca:	462b      	mov	r3, r5
 80a98cc:	f001 fe7e 	bl	80ab5cc <__aeabi_dmul>
 80a98d0:	a36f      	add	r3, pc, #444	; (adr r3, 80a9a90 <__kernel_cos+0x220>)
 80a98d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a98d6:	f001 fcc3 	bl	80ab260 <__adddf3>
 80a98da:	4622      	mov	r2, r4
 80a98dc:	462b      	mov	r3, r5
 80a98de:	f001 fe75 	bl	80ab5cc <__aeabi_dmul>
 80a98e2:	a36d      	add	r3, pc, #436	; (adr r3, 80a9a98 <__kernel_cos+0x228>)
 80a98e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a98e8:	f001 fcb8 	bl	80ab25c <__aeabi_dsub>
 80a98ec:	4622      	mov	r2, r4
 80a98ee:	462b      	mov	r3, r5
 80a98f0:	f001 fe6c 	bl	80ab5cc <__aeabi_dmul>
 80a98f4:	a36a      	add	r3, pc, #424	; (adr r3, 80a9aa0 <__kernel_cos+0x230>)
 80a98f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a98fa:	f001 fcb1 	bl	80ab260 <__adddf3>
 80a98fe:	4622      	mov	r2, r4
 80a9900:	462b      	mov	r3, r5
 80a9902:	f001 fe63 	bl	80ab5cc <__aeabi_dmul>
 80a9906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a990a:	2200      	movs	r2, #0
 80a990c:	4620      	mov	r0, r4
 80a990e:	4629      	mov	r1, r5
 80a9910:	4b65      	ldr	r3, [pc, #404]	; (80a9aa8 <__kernel_cos+0x238>)
 80a9912:	f001 fe5b 	bl	80ab5cc <__aeabi_dmul>
 80a9916:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a991a:	4682      	mov	sl, r0
 80a991c:	468b      	mov	fp, r1
 80a991e:	4620      	mov	r0, r4
 80a9920:	4629      	mov	r1, r5
 80a9922:	f001 fe53 	bl	80ab5cc <__aeabi_dmul>
 80a9926:	4632      	mov	r2, r6
 80a9928:	460f      	mov	r7, r1
 80a992a:	4606      	mov	r6, r0
 80a992c:	4641      	mov	r1, r8
 80a992e:	4610      	mov	r0, r2
 80a9930:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a9934:	f001 fe4a 	bl	80ab5cc <__aeabi_dmul>
 80a9938:	4602      	mov	r2, r0
 80a993a:	460b      	mov	r3, r1
 80a993c:	4630      	mov	r0, r6
 80a993e:	4639      	mov	r1, r7
 80a9940:	f001 fc8c 	bl	80ab25c <__aeabi_dsub>
 80a9944:	4602      	mov	r2, r0
 80a9946:	460b      	mov	r3, r1
 80a9948:	4650      	mov	r0, sl
 80a994a:	4659      	mov	r1, fp
 80a994c:	f001 fc86 	bl	80ab25c <__aeabi_dsub>
 80a9950:	4602      	mov	r2, r0
 80a9952:	460b      	mov	r3, r1
 80a9954:	2000      	movs	r0, #0
 80a9956:	4955      	ldr	r1, [pc, #340]	; (80a9aac <__kernel_cos+0x23c>)
 80a9958:	f001 fc80 	bl	80ab25c <__aeabi_dsub>
 80a995c:	b006      	add	sp, #24
 80a995e:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80a9962:	4602      	mov	r2, r0
 80a9964:	460b      	mov	r3, r1
 80a9966:	f001 fe31 	bl	80ab5cc <__aeabi_dmul>
 80a996a:	a343      	add	r3, pc, #268	; (adr r3, 80a9a78 <__kernel_cos+0x208>)
 80a996c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9970:	4604      	mov	r4, r0
 80a9972:	460d      	mov	r5, r1
 80a9974:	f001 fe2a 	bl	80ab5cc <__aeabi_dmul>
 80a9978:	a341      	add	r3, pc, #260	; (adr r3, 80a9a80 <__kernel_cos+0x210>)
 80a997a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a997e:	f001 fc6f 	bl	80ab260 <__adddf3>
 80a9982:	4622      	mov	r2, r4
 80a9984:	462b      	mov	r3, r5
 80a9986:	f001 fe21 	bl	80ab5cc <__aeabi_dmul>
 80a998a:	a33f      	add	r3, pc, #252	; (adr r3, 80a9a88 <__kernel_cos+0x218>)
 80a998c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9990:	f001 fc64 	bl	80ab25c <__aeabi_dsub>
 80a9994:	4622      	mov	r2, r4
 80a9996:	462b      	mov	r3, r5
 80a9998:	f001 fe18 	bl	80ab5cc <__aeabi_dmul>
 80a999c:	a33c      	add	r3, pc, #240	; (adr r3, 80a9a90 <__kernel_cos+0x220>)
 80a999e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a99a2:	f001 fc5d 	bl	80ab260 <__adddf3>
 80a99a6:	4622      	mov	r2, r4
 80a99a8:	462b      	mov	r3, r5
 80a99aa:	f001 fe0f 	bl	80ab5cc <__aeabi_dmul>
 80a99ae:	a33a      	add	r3, pc, #232	; (adr r3, 80a9a98 <__kernel_cos+0x228>)
 80a99b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a99b4:	f001 fc52 	bl	80ab25c <__aeabi_dsub>
 80a99b8:	4622      	mov	r2, r4
 80a99ba:	462b      	mov	r3, r5
 80a99bc:	f001 fe06 	bl	80ab5cc <__aeabi_dmul>
 80a99c0:	a337      	add	r3, pc, #220	; (adr r3, 80a9aa0 <__kernel_cos+0x230>)
 80a99c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a99c6:	f001 fc4b 	bl	80ab260 <__adddf3>
 80a99ca:	462b      	mov	r3, r5
 80a99cc:	4622      	mov	r2, r4
 80a99ce:	f001 fdfd 	bl	80ab5cc <__aeabi_dmul>
 80a99d2:	4b37      	ldr	r3, [pc, #220]	; (80a9ab0 <__kernel_cos+0x240>)
 80a99d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a99d8:	429f      	cmp	r7, r3
 80a99da:	dd96      	ble.n	80a990a <__kernel_cos+0x9a>
 80a99dc:	4b35      	ldr	r3, [pc, #212]	; (80a9ab4 <__kernel_cos+0x244>)
 80a99de:	429f      	cmp	r7, r3
 80a99e0:	dc3b      	bgt.n	80a9a5a <__kernel_cos+0x1ea>
 80a99e2:	f04f 0a00 	mov.w	sl, #0
 80a99e6:	f5a7 1b00 	sub.w	fp, r7, #2097152	; 0x200000
 80a99ea:	2000      	movs	r0, #0
 80a99ec:	4652      	mov	r2, sl
 80a99ee:	465b      	mov	r3, fp
 80a99f0:	492e      	ldr	r1, [pc, #184]	; (80a9aac <__kernel_cos+0x23c>)
 80a99f2:	f001 fc33 	bl	80ab25c <__aeabi_dsub>
 80a99f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a99fa:	2200      	movs	r2, #0
 80a99fc:	4620      	mov	r0, r4
 80a99fe:	4629      	mov	r1, r5
 80a9a00:	4b29      	ldr	r3, [pc, #164]	; (80a9aa8 <__kernel_cos+0x238>)
 80a9a02:	f001 fde3 	bl	80ab5cc <__aeabi_dmul>
 80a9a06:	4652      	mov	r2, sl
 80a9a08:	465b      	mov	r3, fp
 80a9a0a:	f001 fc27 	bl	80ab25c <__aeabi_dsub>
 80a9a0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a9a12:	4682      	mov	sl, r0
 80a9a14:	468b      	mov	fp, r1
 80a9a16:	4620      	mov	r0, r4
 80a9a18:	4629      	mov	r1, r5
 80a9a1a:	f001 fdd7 	bl	80ab5cc <__aeabi_dmul>
 80a9a1e:	4632      	mov	r2, r6
 80a9a20:	460f      	mov	r7, r1
 80a9a22:	4606      	mov	r6, r0
 80a9a24:	4641      	mov	r1, r8
 80a9a26:	4610      	mov	r0, r2
 80a9a28:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a9a2c:	f001 fdce 	bl	80ab5cc <__aeabi_dmul>
 80a9a30:	4602      	mov	r2, r0
 80a9a32:	460b      	mov	r3, r1
 80a9a34:	4630      	mov	r0, r6
 80a9a36:	4639      	mov	r1, r7
 80a9a38:	f001 fc10 	bl	80ab25c <__aeabi_dsub>
 80a9a3c:	4602      	mov	r2, r0
 80a9a3e:	460b      	mov	r3, r1
 80a9a40:	4650      	mov	r0, sl
 80a9a42:	4659      	mov	r1, fp
 80a9a44:	f001 fc0a 	bl	80ab25c <__aeabi_dsub>
 80a9a48:	4602      	mov	r2, r0
 80a9a4a:	460b      	mov	r3, r1
 80a9a4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a9a50:	f001 fc04 	bl	80ab25c <__aeabi_dsub>
 80a9a54:	b006      	add	sp, #24
 80a9a56:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80a9a5a:	2200      	movs	r2, #0
 80a9a5c:	4b16      	ldr	r3, [pc, #88]	; (80a9ab8 <__kernel_cos+0x248>)
 80a9a5e:	f04f 0a00 	mov.w	sl, #0
 80a9a62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a9a66:	f8df b054 	ldr.w	fp, [pc, #84]	; 80a9abc <__kernel_cos+0x24c>
 80a9a6a:	e7c6      	b.n	80a99fa <__kernel_cos+0x18a>
 80a9a6c:	2000      	movs	r0, #0
 80a9a6e:	490f      	ldr	r1, [pc, #60]	; (80a9aac <__kernel_cos+0x23c>)
 80a9a70:	b006      	add	sp, #24
 80a9a72:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80a9a76:	bf00      	nop
 80a9a78:	be8838d4 	.word	0xbe8838d4
 80a9a7c:	bda8fae9 	.word	0xbda8fae9
 80a9a80:	bdb4b1c4 	.word	0xbdb4b1c4
 80a9a84:	3e21ee9e 	.word	0x3e21ee9e
 80a9a88:	809c52ad 	.word	0x809c52ad
 80a9a8c:	3e927e4f 	.word	0x3e927e4f
 80a9a90:	19cb1590 	.word	0x19cb1590
 80a9a94:	3efa01a0 	.word	0x3efa01a0
 80a9a98:	16c15177 	.word	0x16c15177
 80a9a9c:	3f56c16c 	.word	0x3f56c16c
 80a9aa0:	5555554c 	.word	0x5555554c
 80a9aa4:	3fa55555 	.word	0x3fa55555
 80a9aa8:	3fe00000 	.word	0x3fe00000
 80a9aac:	3ff00000 	.word	0x3ff00000
 80a9ab0:	3fd33332 	.word	0x3fd33332
 80a9ab4:	3fe90000 	.word	0x3fe90000
 80a9ab8:	3fe70000 	.word	0x3fe70000
 80a9abc:	3fd20000 	.word	0x3fd20000

080a9ac0 <__kernel_rem_pio2>:
 80a9ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a9ac4:	461c      	mov	r4, r3
 80a9ac6:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80a9aca:	910b      	str	r1, [sp, #44]	; 0x2c
 80a9acc:	1e61      	subs	r1, r4, #1
 80a9ace:	9308      	str	r3, [sp, #32]
 80a9ad0:	9103      	str	r1, [sp, #12]
 80a9ad2:	4bb8      	ldr	r3, [pc, #736]	; (80a9db4 <__kernel_rem_pio2+0x2f4>)
 80a9ad4:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80a9ad6:	f112 0f14 	cmn.w	r2, #20
 80a9ada:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80a9ade:	4607      	mov	r7, r0
 80a9ae0:	9305      	str	r3, [sp, #20]
 80a9ae2:	f2c0 8341 	blt.w	80aa168 <__kernel_rem_pio2+0x6a8>
 80a9ae6:	49b4      	ldr	r1, [pc, #720]	; (80a9db8 <__kernel_rem_pio2+0x2f8>)
 80a9ae8:	1ed3      	subs	r3, r2, #3
 80a9aea:	fb81 0103 	smull	r0, r1, r1, r3
 80a9aee:	17db      	asrs	r3, r3, #31
 80a9af0:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 80a9af4:	9307      	str	r3, [sp, #28]
 80a9af6:	3301      	adds	r3, #1
 80a9af8:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80a9afc:	00db      	lsls	r3, r3, #3
 80a9afe:	18d3      	adds	r3, r2, r3
 80a9b00:	9306      	str	r3, [sp, #24]
 80a9b02:	9a07      	ldr	r2, [sp, #28]
 80a9b04:	9b03      	ldr	r3, [sp, #12]
 80a9b06:	1ad6      	subs	r6, r2, r3
 80a9b08:	9a05      	ldr	r2, [sp, #20]
 80a9b0a:	eb12 0903 	adds.w	r9, r2, r3
 80a9b0e:	d41b      	bmi.n	80a9b48 <__kernel_rem_pio2+0x88>
 80a9b10:	f109 0901 	add.w	r9, r9, #1
 80a9b14:	2400      	movs	r4, #0
 80a9b16:	2500      	movs	r5, #0
 80a9b18:	f8dd a28c 	ldr.w	sl, [sp, #652]	; 0x28c
 80a9b1c:	44b1      	add	r9, r6
 80a9b1e:	f10d 0880 	add.w	r8, sp, #128	; 0x80
 80a9b22:	e008      	b.n	80a9b36 <__kernel_rem_pio2+0x76>
 80a9b24:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 80a9b28:	f001 fce6 	bl	80ab4f8 <__aeabi_i2d>
 80a9b2c:	3601      	adds	r6, #1
 80a9b2e:	454e      	cmp	r6, r9
 80a9b30:	e8e8 0102 	strd	r0, r1, [r8], #8
 80a9b34:	d008      	beq.n	80a9b48 <__kernel_rem_pio2+0x88>
 80a9b36:	2e00      	cmp	r6, #0
 80a9b38:	daf4      	bge.n	80a9b24 <__kernel_rem_pio2+0x64>
 80a9b3a:	4620      	mov	r0, r4
 80a9b3c:	4629      	mov	r1, r5
 80a9b3e:	3601      	adds	r6, #1
 80a9b40:	454e      	cmp	r6, r9
 80a9b42:	e8e8 0102 	strd	r0, r1, [r8], #8
 80a9b46:	d1f6      	bne.n	80a9b36 <__kernel_rem_pio2+0x76>
 80a9b48:	9b05      	ldr	r3, [sp, #20]
 80a9b4a:	2b00      	cmp	r3, #0
 80a9b4c:	f1a7 0308 	sub.w	r3, r7, #8
 80a9b50:	9304      	str	r3, [sp, #16]
 80a9b52:	f2c0 83b8 	blt.w	80aa2c6 <__kernel_rem_pio2+0x806>
 80a9b56:	4619      	mov	r1, r3
 80a9b58:	9b08      	ldr	r3, [sp, #32]
 80a9b5a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80a9b5e:	00da      	lsls	r2, r3, #3
 80a9b60:	9202      	str	r2, [sp, #8]
 80a9b62:	9a05      	ldr	r2, [sp, #20]
 80a9b64:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 80a9b68:	a920      	add	r1, sp, #128	; 0x80
 80a9b6a:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 80a9b6e:	18d3      	adds	r3, r2, r3
 80a9b70:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80a9b74:	9301      	str	r3, [sp, #4]
 80a9b76:	9b03      	ldr	r3, [sp, #12]
 80a9b78:	2b00      	cmp	r3, #0
 80a9b7a:	f2c0 81b0 	blt.w	80a9ede <__kernel_rem_pio2+0x41e>
 80a9b7e:	4657      	mov	r7, sl
 80a9b80:	2400      	movs	r4, #0
 80a9b82:	2500      	movs	r5, #0
 80a9b84:	9e04      	ldr	r6, [sp, #16]
 80a9b86:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 80a9b8a:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 80a9b8e:	f001 fd1d 	bl	80ab5cc <__aeabi_dmul>
 80a9b92:	4602      	mov	r2, r0
 80a9b94:	460b      	mov	r3, r1
 80a9b96:	4620      	mov	r0, r4
 80a9b98:	4629      	mov	r1, r5
 80a9b9a:	f001 fb61 	bl	80ab260 <__adddf3>
 80a9b9e:	4546      	cmp	r6, r8
 80a9ba0:	4604      	mov	r4, r0
 80a9ba2:	460d      	mov	r5, r1
 80a9ba4:	d1ef      	bne.n	80a9b86 <__kernel_rem_pio2+0xc6>
 80a9ba6:	9b01      	ldr	r3, [sp, #4]
 80a9ba8:	f109 0901 	add.w	r9, r9, #1
 80a9bac:	4599      	cmp	r9, r3
 80a9bae:	e8eb 4502 	strd	r4, r5, [fp], #8
 80a9bb2:	f10a 0a08 	add.w	sl, sl, #8
 80a9bb6:	d1de      	bne.n	80a9b76 <__kernel_rem_pio2+0xb6>
 80a9bb8:	9a05      	ldr	r2, [sp, #20]
 80a9bba:	a90c      	add	r1, sp, #48	; 0x30
 80a9bbc:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80a9bc0:	9804      	ldr	r0, [sp, #16]
 80a9bc2:	9902      	ldr	r1, [sp, #8]
 80a9bc4:	3b08      	subs	r3, #8
 80a9bc6:	4401      	add	r1, r0
 80a9bc8:	468b      	mov	fp, r1
 80a9bca:	9309      	str	r3, [sp, #36]	; 0x24
 80a9bcc:	ab0b      	add	r3, sp, #44	; 0x2c
 80a9bce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a9bd2:	9201      	str	r2, [sp, #4]
 80a9bd4:	930a      	str	r3, [sp, #40]	; 0x28
 80a9bd6:	9a01      	ldr	r2, [sp, #4]
 80a9bd8:	a998      	add	r1, sp, #608	; 0x260
 80a9bda:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 80a9bde:	2a00      	cmp	r2, #0
 80a9be0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80a9be4:	dd2a      	ble.n	80a9c3c <__kernel_rem_pio2+0x17c>
 80a9be6:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80a9bea:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80a9bee:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 80a9bf2:	2200      	movs	r2, #0
 80a9bf4:	4b71      	ldr	r3, [pc, #452]	; (80a9dbc <__kernel_rem_pio2+0x2fc>)
 80a9bf6:	4620      	mov	r0, r4
 80a9bf8:	4629      	mov	r1, r5
 80a9bfa:	f001 fce7 	bl	80ab5cc <__aeabi_dmul>
 80a9bfe:	f001 ff95 	bl	80abb2c <__aeabi_d2iz>
 80a9c02:	f001 fc79 	bl	80ab4f8 <__aeabi_i2d>
 80a9c06:	2200      	movs	r2, #0
 80a9c08:	4b6d      	ldr	r3, [pc, #436]	; (80a9dc0 <__kernel_rem_pio2+0x300>)
 80a9c0a:	4606      	mov	r6, r0
 80a9c0c:	460f      	mov	r7, r1
 80a9c0e:	f001 fcdd 	bl	80ab5cc <__aeabi_dmul>
 80a9c12:	4602      	mov	r2, r0
 80a9c14:	460b      	mov	r3, r1
 80a9c16:	4620      	mov	r0, r4
 80a9c18:	4629      	mov	r1, r5
 80a9c1a:	f001 fb1f 	bl	80ab25c <__aeabi_dsub>
 80a9c1e:	f001 ff85 	bl	80abb2c <__aeabi_d2iz>
 80a9c22:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80a9c26:	4604      	mov	r4, r0
 80a9c28:	4639      	mov	r1, r7
 80a9c2a:	f849 4b04 	str.w	r4, [r9], #4
 80a9c2e:	4630      	mov	r0, r6
 80a9c30:	f001 fb16 	bl	80ab260 <__adddf3>
 80a9c34:	45d0      	cmp	r8, sl
 80a9c36:	4604      	mov	r4, r0
 80a9c38:	460d      	mov	r5, r1
 80a9c3a:	d1da      	bne.n	80a9bf2 <__kernel_rem_pio2+0x132>
 80a9c3c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80a9c40:	4620      	mov	r0, r4
 80a9c42:	4629      	mov	r1, r5
 80a9c44:	464a      	mov	r2, r9
 80a9c46:	f001 f9ef 	bl	80ab028 <scalbn>
 80a9c4a:	2200      	movs	r2, #0
 80a9c4c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80a9c50:	4604      	mov	r4, r0
 80a9c52:	460d      	mov	r5, r1
 80a9c54:	f001 fcba 	bl	80ab5cc <__aeabi_dmul>
 80a9c58:	f001 f8d2 	bl	80aae00 <floor>
 80a9c5c:	2200      	movs	r2, #0
 80a9c5e:	4b59      	ldr	r3, [pc, #356]	; (80a9dc4 <__kernel_rem_pio2+0x304>)
 80a9c60:	f001 fcb4 	bl	80ab5cc <__aeabi_dmul>
 80a9c64:	4602      	mov	r2, r0
 80a9c66:	460b      	mov	r3, r1
 80a9c68:	4620      	mov	r0, r4
 80a9c6a:	4629      	mov	r1, r5
 80a9c6c:	f001 faf6 	bl	80ab25c <__aeabi_dsub>
 80a9c70:	4604      	mov	r4, r0
 80a9c72:	460d      	mov	r5, r1
 80a9c74:	f001 ff5a 	bl	80abb2c <__aeabi_d2iz>
 80a9c78:	4680      	mov	r8, r0
 80a9c7a:	f001 fc3d 	bl	80ab4f8 <__aeabi_i2d>
 80a9c7e:	4602      	mov	r2, r0
 80a9c80:	460b      	mov	r3, r1
 80a9c82:	4620      	mov	r0, r4
 80a9c84:	4629      	mov	r1, r5
 80a9c86:	464c      	mov	r4, r9
 80a9c88:	f001 fae8 	bl	80ab25c <__aeabi_dsub>
 80a9c8c:	2c00      	cmp	r4, #0
 80a9c8e:	4606      	mov	r6, r0
 80a9c90:	460f      	mov	r7, r1
 80a9c92:	f340 8099 	ble.w	80a9dc8 <__kernel_rem_pio2+0x308>
 80a9c96:	9b01      	ldr	r3, [sp, #4]
 80a9c98:	f1c9 0218 	rsb	r2, r9, #24
 80a9c9c:	1e58      	subs	r0, r3, #1
 80a9c9e:	ab0c      	add	r3, sp, #48	; 0x30
 80a9ca0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80a9ca4:	f1c9 0517 	rsb	r5, r9, #23
 80a9ca8:	fa43 f102 	asr.w	r1, r3, r2
 80a9cac:	fa01 f202 	lsl.w	r2, r1, r2
 80a9cb0:	1a9b      	subs	r3, r3, r2
 80a9cb2:	fa43 f505 	asr.w	r5, r3, r5
 80a9cb6:	aa0c      	add	r2, sp, #48	; 0x30
 80a9cb8:	2d00      	cmp	r5, #0
 80a9cba:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80a9cbe:	4488      	add	r8, r1
 80a9cc0:	f300 808c 	bgt.w	80a9ddc <__kernel_rem_pio2+0x31c>
 80a9cc4:	2200      	movs	r2, #0
 80a9cc6:	2300      	movs	r3, #0
 80a9cc8:	4630      	mov	r0, r6
 80a9cca:	4639      	mov	r1, r7
 80a9ccc:	f001 fee6 	bl	80aba9c <__aeabi_dcmpeq>
 80a9cd0:	2800      	cmp	r0, #0
 80a9cd2:	f000 8250 	beq.w	80aa176 <__kernel_rem_pio2+0x6b6>
 80a9cd6:	9b01      	ldr	r3, [sp, #4]
 80a9cd8:	9a05      	ldr	r2, [sp, #20]
 80a9cda:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80a9cde:	4552      	cmp	r2, sl
 80a9ce0:	dc10      	bgt.n	80a9d04 <__kernel_rem_pio2+0x244>
 80a9ce2:	2200      	movs	r2, #0
 80a9ce4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a9ce8:	3b01      	subs	r3, #1
 80a9cea:	a90c      	add	r1, sp, #48	; 0x30
 80a9cec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a9cee:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a9cf2:	f853 1904 	ldr.w	r1, [r3], #-4
 80a9cf6:	4283      	cmp	r3, r0
 80a9cf8:	ea42 0201 	orr.w	r2, r2, r1
 80a9cfc:	d1f9      	bne.n	80a9cf2 <__kernel_rem_pio2+0x232>
 80a9cfe:	2a00      	cmp	r2, #0
 80a9d00:	f040 80f0 	bne.w	80a9ee4 <__kernel_rem_pio2+0x424>
 80a9d04:	9b05      	ldr	r3, [sp, #20]
 80a9d06:	aa0c      	add	r2, sp, #48	; 0x30
 80a9d08:	3b01      	subs	r3, #1
 80a9d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a9d0e:	2b00      	cmp	r3, #0
 80a9d10:	f040 80e0 	bne.w	80a9ed4 <__kernel_rem_pio2+0x414>
 80a9d14:	2301      	movs	r3, #1
 80a9d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a9d18:	f852 1904 	ldr.w	r1, [r2], #-4
 80a9d1c:	3301      	adds	r3, #1
 80a9d1e:	2900      	cmp	r1, #0
 80a9d20:	d0fa      	beq.n	80a9d18 <__kernel_rem_pio2+0x258>
 80a9d22:	9901      	ldr	r1, [sp, #4]
 80a9d24:	1c4a      	adds	r2, r1, #1
 80a9d26:	4691      	mov	r9, r2
 80a9d28:	18cb      	adds	r3, r1, r3
 80a9d2a:	9302      	str	r3, [sp, #8]
 80a9d2c:	9b07      	ldr	r3, [sp, #28]
 80a9d2e:	9908      	ldr	r1, [sp, #32]
 80a9d30:	eb02 0a03 	add.w	sl, r2, r3
 80a9d34:	9b01      	ldr	r3, [sp, #4]
 80a9d36:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 80a9d3a:	440b      	add	r3, r1
 80a9d3c:	4698      	mov	r8, r3
 80a9d3e:	ab20      	add	r3, sp, #128	; 0x80
 80a9d40:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80a9d44:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80a9d46:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80a9d4a:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 80a9d4e:	ab70      	add	r3, sp, #448	; 0x1c0
 80a9d50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a9d54:	9301      	str	r3, [sp, #4]
 80a9d56:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80a9d5a:	f001 fbcd 	bl	80ab4f8 <__aeabi_i2d>
 80a9d5e:	9b03      	ldr	r3, [sp, #12]
 80a9d60:	4647      	mov	r7, r8
 80a9d62:	2b00      	cmp	r3, #0
 80a9d64:	e9c8 0100 	strd	r0, r1, [r8]
 80a9d68:	f108 0808 	add.w	r8, r8, #8
 80a9d6c:	db1f      	blt.n	80a9dae <__kernel_rem_pio2+0x2ee>
 80a9d6e:	2400      	movs	r4, #0
 80a9d70:	2500      	movs	r5, #0
 80a9d72:	9e04      	ldr	r6, [sp, #16]
 80a9d74:	3f08      	subs	r7, #8
 80a9d76:	e001      	b.n	80a9d7c <__kernel_rem_pio2+0x2bc>
 80a9d78:	e877 0102 	ldrd	r0, r1, [r7], #-8
 80a9d7c:	e9f6 2302 	ldrd	r2, r3, [r6, #8]!
 80a9d80:	f001 fc24 	bl	80ab5cc <__aeabi_dmul>
 80a9d84:	4602      	mov	r2, r0
 80a9d86:	460b      	mov	r3, r1
 80a9d88:	4620      	mov	r0, r4
 80a9d8a:	4629      	mov	r1, r5
 80a9d8c:	f001 fa68 	bl	80ab260 <__adddf3>
 80a9d90:	455e      	cmp	r6, fp
 80a9d92:	4604      	mov	r4, r0
 80a9d94:	460d      	mov	r5, r1
 80a9d96:	d1ef      	bne.n	80a9d78 <__kernel_rem_pio2+0x2b8>
 80a9d98:	9b01      	ldr	r3, [sp, #4]
 80a9d9a:	f109 0901 	add.w	r9, r9, #1
 80a9d9e:	e8e3 4502 	strd	r4, r5, [r3], #8
 80a9da2:	9301      	str	r3, [sp, #4]
 80a9da4:	9b02      	ldr	r3, [sp, #8]
 80a9da6:	4599      	cmp	r9, r3
 80a9da8:	ddd5      	ble.n	80a9d56 <__kernel_rem_pio2+0x296>
 80a9daa:	9301      	str	r3, [sp, #4]
 80a9dac:	e713      	b.n	80a9bd6 <__kernel_rem_pio2+0x116>
 80a9dae:	2400      	movs	r4, #0
 80a9db0:	2500      	movs	r5, #0
 80a9db2:	e7f1      	b.n	80a9d98 <__kernel_rem_pio2+0x2d8>
 80a9db4:	080adcb0 	.word	0x080adcb0
 80a9db8:	2aaaaaab 	.word	0x2aaaaaab
 80a9dbc:	3e700000 	.word	0x3e700000
 80a9dc0:	41700000 	.word	0x41700000
 80a9dc4:	40200000 	.word	0x40200000
 80a9dc8:	d16b      	bne.n	80a9ea2 <__kernel_rem_pio2+0x3e2>
 80a9dca:	9b01      	ldr	r3, [sp, #4]
 80a9dcc:	aa0c      	add	r2, sp, #48	; 0x30
 80a9dce:	3b01      	subs	r3, #1
 80a9dd0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80a9dd4:	15ed      	asrs	r5, r5, #23
 80a9dd6:	2d00      	cmp	r5, #0
 80a9dd8:	f77f af74 	ble.w	80a9cc4 <__kernel_rem_pio2+0x204>
 80a9ddc:	9b01      	ldr	r3, [sp, #4]
 80a9dde:	f108 0801 	add.w	r8, r8, #1
 80a9de2:	2b00      	cmp	r3, #0
 80a9de4:	f340 81c5 	ble.w	80aa172 <__kernel_rem_pio2+0x6b2>
 80a9de8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a9dea:	2c00      	cmp	r4, #0
 80a9dec:	d151      	bne.n	80a9e92 <__kernel_rem_pio2+0x3d2>
 80a9dee:	9b01      	ldr	r3, [sp, #4]
 80a9df0:	2b01      	cmp	r3, #1
 80a9df2:	d020      	beq.n	80a9e36 <__kernel_rem_pio2+0x376>
 80a9df4:	2201      	movs	r2, #1
 80a9df6:	ab0c      	add	r3, sp, #48	; 0x30
 80a9df8:	f853 4f04 	ldr.w	r4, [r3, #4]!
 80a9dfc:	2c00      	cmp	r4, #0
 80a9dfe:	d04b      	beq.n	80a9e98 <__kernel_rem_pio2+0x3d8>
 80a9e00:	1c53      	adds	r3, r2, #1
 80a9e02:	a90c      	add	r1, sp, #48	; 0x30
 80a9e04:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 80a9e08:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 80a9e0c:	9901      	ldr	r1, [sp, #4]
 80a9e0e:	4299      	cmp	r1, r3
 80a9e10:	dd10      	ble.n	80a9e34 <__kernel_rem_pio2+0x374>
 80a9e12:	ac0c      	add	r4, sp, #48	; 0x30
 80a9e14:	aa0c      	add	r2, sp, #48	; 0x30
 80a9e16:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80a9e1a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80a9e1e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80a9e22:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80a9e26:	e000      	b.n	80a9e2a <__kernel_rem_pio2+0x36a>
 80a9e28:	681a      	ldr	r2, [r3, #0]
 80a9e2a:	1a82      	subs	r2, r0, r2
 80a9e2c:	f843 2b04 	str.w	r2, [r3], #4
 80a9e30:	428b      	cmp	r3, r1
 80a9e32:	d1f9      	bne.n	80a9e28 <__kernel_rem_pio2+0x368>
 80a9e34:	2401      	movs	r4, #1
 80a9e36:	9b06      	ldr	r3, [sp, #24]
 80a9e38:	2b00      	cmp	r3, #0
 80a9e3a:	dd0e      	ble.n	80a9e5a <__kernel_rem_pio2+0x39a>
 80a9e3c:	2b01      	cmp	r3, #1
 80a9e3e:	f000 817a 	beq.w	80aa136 <__kernel_rem_pio2+0x676>
 80a9e42:	2b02      	cmp	r3, #2
 80a9e44:	d109      	bne.n	80a9e5a <__kernel_rem_pio2+0x39a>
 80a9e46:	9b01      	ldr	r3, [sp, #4]
 80a9e48:	a90c      	add	r1, sp, #48	; 0x30
 80a9e4a:	1e5a      	subs	r2, r3, #1
 80a9e4c:	ab0c      	add	r3, sp, #48	; 0x30
 80a9e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a9e52:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80a9e56:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a9e5a:	2d02      	cmp	r5, #2
 80a9e5c:	f47f af32 	bne.w	80a9cc4 <__kernel_rem_pio2+0x204>
 80a9e60:	4632      	mov	r2, r6
 80a9e62:	463b      	mov	r3, r7
 80a9e64:	2000      	movs	r0, #0
 80a9e66:	49bc      	ldr	r1, [pc, #752]	; (80aa158 <__kernel_rem_pio2+0x698>)
 80a9e68:	f001 f9f8 	bl	80ab25c <__aeabi_dsub>
 80a9e6c:	4606      	mov	r6, r0
 80a9e6e:	460f      	mov	r7, r1
 80a9e70:	2c00      	cmp	r4, #0
 80a9e72:	f43f af27 	beq.w	80a9cc4 <__kernel_rem_pio2+0x204>
 80a9e76:	9a06      	ldr	r2, [sp, #24]
 80a9e78:	2000      	movs	r0, #0
 80a9e7a:	49b7      	ldr	r1, [pc, #732]	; (80aa158 <__kernel_rem_pio2+0x698>)
 80a9e7c:	f001 f8d4 	bl	80ab028 <scalbn>
 80a9e80:	4602      	mov	r2, r0
 80a9e82:	460b      	mov	r3, r1
 80a9e84:	4630      	mov	r0, r6
 80a9e86:	4639      	mov	r1, r7
 80a9e88:	f001 f9e8 	bl	80ab25c <__aeabi_dsub>
 80a9e8c:	4606      	mov	r6, r0
 80a9e8e:	460f      	mov	r7, r1
 80a9e90:	e718      	b.n	80a9cc4 <__kernel_rem_pio2+0x204>
 80a9e92:	2301      	movs	r3, #1
 80a9e94:	2200      	movs	r2, #0
 80a9e96:	e7b4      	b.n	80a9e02 <__kernel_rem_pio2+0x342>
 80a9e98:	9901      	ldr	r1, [sp, #4]
 80a9e9a:	3201      	adds	r2, #1
 80a9e9c:	428a      	cmp	r2, r1
 80a9e9e:	d1ab      	bne.n	80a9df8 <__kernel_rem_pio2+0x338>
 80a9ea0:	e7c9      	b.n	80a9e36 <__kernel_rem_pio2+0x376>
 80a9ea2:	2200      	movs	r2, #0
 80a9ea4:	4bad      	ldr	r3, [pc, #692]	; (80aa15c <__kernel_rem_pio2+0x69c>)
 80a9ea6:	f001 fe17 	bl	80abad8 <__aeabi_dcmpge>
 80a9eaa:	4605      	mov	r5, r0
 80a9eac:	2800      	cmp	r0, #0
 80a9eae:	f43f af09 	beq.w	80a9cc4 <__kernel_rem_pio2+0x204>
 80a9eb2:	9b01      	ldr	r3, [sp, #4]
 80a9eb4:	f108 0801 	add.w	r8, r8, #1
 80a9eb8:	2b00      	cmp	r3, #0
 80a9eba:	bfc8      	it	gt
 80a9ebc:	2502      	movgt	r5, #2
 80a9ebe:	dc93      	bgt.n	80a9de8 <__kernel_rem_pio2+0x328>
 80a9ec0:	4632      	mov	r2, r6
 80a9ec2:	463b      	mov	r3, r7
 80a9ec4:	2000      	movs	r0, #0
 80a9ec6:	49a4      	ldr	r1, [pc, #656]	; (80aa158 <__kernel_rem_pio2+0x698>)
 80a9ec8:	f001 f9c8 	bl	80ab25c <__aeabi_dsub>
 80a9ecc:	2502      	movs	r5, #2
 80a9ece:	4606      	mov	r6, r0
 80a9ed0:	460f      	mov	r7, r1
 80a9ed2:	e6f7      	b.n	80a9cc4 <__kernel_rem_pio2+0x204>
 80a9ed4:	9b01      	ldr	r3, [sp, #4]
 80a9ed6:	1c5a      	adds	r2, r3, #1
 80a9ed8:	4691      	mov	r9, r2
 80a9eda:	9202      	str	r2, [sp, #8]
 80a9edc:	e726      	b.n	80a9d2c <__kernel_rem_pio2+0x26c>
 80a9ede:	2400      	movs	r4, #0
 80a9ee0:	2500      	movs	r5, #0
 80a9ee2:	e660      	b.n	80a9ba6 <__kernel_rem_pio2+0xe6>
 80a9ee4:	9a06      	ldr	r2, [sp, #24]
 80a9ee6:	ab0c      	add	r3, sp, #48	; 0x30
 80a9ee8:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 80a9eec:	3a18      	subs	r2, #24
 80a9eee:	f8cd 801c 	str.w	r8, [sp, #28]
 80a9ef2:	9503      	str	r5, [sp, #12]
 80a9ef4:	9206      	str	r2, [sp, #24]
 80a9ef6:	b973      	cbnz	r3, 80a9f16 <__kernel_rem_pio2+0x456>
 80a9ef8:	9b01      	ldr	r3, [sp, #4]
 80a9efa:	a90c      	add	r1, sp, #48	; 0x30
 80a9efc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a9f00:	3b02      	subs	r3, #2
 80a9f02:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a9f06:	f853 1904 	ldr.w	r1, [r3], #-4
 80a9f0a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80a9f0e:	3a18      	subs	r2, #24
 80a9f10:	2900      	cmp	r1, #0
 80a9f12:	d0f8      	beq.n	80a9f06 <__kernel_rem_pio2+0x446>
 80a9f14:	9206      	str	r2, [sp, #24]
 80a9f16:	2000      	movs	r0, #0
 80a9f18:	9a06      	ldr	r2, [sp, #24]
 80a9f1a:	498f      	ldr	r1, [pc, #572]	; (80aa158 <__kernel_rem_pio2+0x698>)
 80a9f1c:	f001 f884 	bl	80ab028 <scalbn>
 80a9f20:	f1ba 0f00 	cmp.w	sl, #0
 80a9f24:	4604      	mov	r4, r0
 80a9f26:	460d      	mov	r5, r1
 80a9f28:	f2c0 81d1 	blt.w	80aa2ce <__kernel_rem_pio2+0x80e>
 80a9f2c:	ab70      	add	r3, sp, #448	; 0x1c0
 80a9f2e:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 80a9f32:	aa0c      	add	r2, sp, #48	; 0x30
 80a9f34:	f10a 0301 	add.w	r3, sl, #1
 80a9f38:	9306      	str	r3, [sp, #24]
 80a9f3a:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 80a9f3e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80a9f42:	f10b 0908 	add.w	r9, fp, #8
 80a9f46:	9304      	str	r3, [sp, #16]
 80a9f48:	f858 0d04 	ldr.w	r0, [r8, #-4]!
 80a9f4c:	f001 fad4 	bl	80ab4f8 <__aeabi_i2d>
 80a9f50:	4622      	mov	r2, r4
 80a9f52:	462b      	mov	r3, r5
 80a9f54:	f001 fb3a 	bl	80ab5cc <__aeabi_dmul>
 80a9f58:	4606      	mov	r6, r0
 80a9f5a:	460f      	mov	r7, r1
 80a9f5c:	4620      	mov	r0, r4
 80a9f5e:	4629      	mov	r1, r5
 80a9f60:	4b7f      	ldr	r3, [pc, #508]	; (80aa160 <__kernel_rem_pio2+0x6a0>)
 80a9f62:	2200      	movs	r2, #0
 80a9f64:	e969 6702 	strd	r6, r7, [r9, #-8]!
 80a9f68:	f001 fb30 	bl	80ab5cc <__aeabi_dmul>
 80a9f6c:	ab0c      	add	r3, sp, #48	; 0x30
 80a9f6e:	4598      	cmp	r8, r3
 80a9f70:	4604      	mov	r4, r0
 80a9f72:	460d      	mov	r5, r1
 80a9f74:	d1e8      	bne.n	80a9f48 <__kernel_rem_pio2+0x488>
 80a9f76:	ab48      	add	r3, sp, #288	; 0x120
 80a9f78:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 80a9f7c:	f8dd a014 	ldr.w	sl, [sp, #20]
 80a9f80:	f04f 0900 	mov.w	r9, #0
 80a9f84:	f1ba 0f00 	cmp.w	sl, #0
 80a9f88:	db2c      	blt.n	80a9fe4 <__kernel_rem_pio2+0x524>
 80a9f8a:	a371      	add	r3, pc, #452	; (adr r3, 80aa150 <__kernel_rem_pio2+0x690>)
 80a9f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9f90:	465f      	mov	r7, fp
 80a9f92:	2400      	movs	r4, #0
 80a9f94:	2500      	movs	r5, #0
 80a9f96:	2600      	movs	r6, #0
 80a9f98:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80aa164 <__kernel_rem_pio2+0x6a4>
 80a9f9c:	e003      	b.n	80a9fa6 <__kernel_rem_pio2+0x4e6>
 80a9f9e:	45b1      	cmp	r9, r6
 80a9fa0:	db10      	blt.n	80a9fc4 <__kernel_rem_pio2+0x504>
 80a9fa2:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80a9fa6:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80a9faa:	f001 fb0f 	bl	80ab5cc <__aeabi_dmul>
 80a9fae:	4602      	mov	r2, r0
 80a9fb0:	460b      	mov	r3, r1
 80a9fb2:	4620      	mov	r0, r4
 80a9fb4:	4629      	mov	r1, r5
 80a9fb6:	f001 f953 	bl	80ab260 <__adddf3>
 80a9fba:	3601      	adds	r6, #1
 80a9fbc:	45b2      	cmp	sl, r6
 80a9fbe:	4604      	mov	r4, r0
 80a9fc0:	460d      	mov	r5, r1
 80a9fc2:	daec      	bge.n	80a9f9e <__kernel_rem_pio2+0x4de>
 80a9fc4:	9b01      	ldr	r3, [sp, #4]
 80a9fc6:	9a02      	ldr	r2, [sp, #8]
 80a9fc8:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80a9fcc:	4591      	cmp	r9, r2
 80a9fce:	e9c3 4500 	strd	r4, r5, [r3]
 80a9fd2:	f1ab 0b08 	sub.w	fp, fp, #8
 80a9fd6:	f109 0301 	add.w	r3, r9, #1
 80a9fda:	d006      	beq.n	80a9fea <__kernel_rem_pio2+0x52a>
 80a9fdc:	f1ba 0f00 	cmp.w	sl, #0
 80a9fe0:	4699      	mov	r9, r3
 80a9fe2:	dad2      	bge.n	80a9f8a <__kernel_rem_pio2+0x4ca>
 80a9fe4:	2400      	movs	r4, #0
 80a9fe6:	2500      	movs	r5, #0
 80a9fe8:	e7ec      	b.n	80a9fc4 <__kernel_rem_pio2+0x504>
 80a9fea:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a9fec:	f8dd a008 	ldr.w	sl, [sp, #8]
 80a9ff0:	2b02      	cmp	r3, #2
 80a9ff2:	dc23      	bgt.n	80aa03c <__kernel_rem_pio2+0x57c>
 80a9ff4:	2b00      	cmp	r3, #0
 80a9ff6:	f300 80f1 	bgt.w	80aa1dc <__kernel_rem_pio2+0x71c>
 80a9ffa:	d118      	bne.n	80aa02e <__kernel_rem_pio2+0x56e>
 80a9ffc:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a9ffe:	9d04      	ldr	r5, [sp, #16]
 80aa000:	461c      	mov	r4, r3
 80aa002:	9e01      	ldr	r6, [sp, #4]
 80aa004:	3508      	adds	r5, #8
 80aa006:	4435      	add	r5, r6
 80aa008:	4618      	mov	r0, r3
 80aa00a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80aa00e:	4621      	mov	r1, r4
 80aa010:	f001 f926 	bl	80ab260 <__adddf3>
 80aa014:	42ae      	cmp	r6, r5
 80aa016:	4603      	mov	r3, r0
 80aa018:	460c      	mov	r4, r1
 80aa01a:	d1f5      	bne.n	80aa008 <__kernel_rem_pio2+0x548>
 80aa01c:	9a03      	ldr	r2, [sp, #12]
 80aa01e:	b10a      	cbz	r2, 80aa024 <__kernel_rem_pio2+0x564>
 80aa020:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80aa024:	4618      	mov	r0, r3
 80aa026:	4621      	mov	r1, r4
 80aa028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80aa02a:	e9c3 0100 	strd	r0, r1, [r3]
 80aa02e:	9b07      	ldr	r3, [sp, #28]
 80aa030:	f003 0007 	and.w	r0, r3, #7
 80aa034:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80aa038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa03c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80aa03e:	2b03      	cmp	r3, #3
 80aa040:	d1f5      	bne.n	80aa02e <__kernel_rem_pio2+0x56e>
 80aa042:	f1ba 0f00 	cmp.w	sl, #0
 80aa046:	f000 8158 	beq.w	80aa2fa <__kernel_rem_pio2+0x83a>
 80aa04a:	9b01      	ldr	r3, [sp, #4]
 80aa04c:	9a04      	ldr	r2, [sp, #16]
 80aa04e:	4413      	add	r3, r2
 80aa050:	469b      	mov	fp, r3
 80aa052:	e9d3 4500 	ldrd	r4, r5, [r3]
 80aa056:	e95b 6702 	ldrd	r6, r7, [fp, #-8]
 80aa05a:	4620      	mov	r0, r4
 80aa05c:	4629      	mov	r1, r5
 80aa05e:	4632      	mov	r2, r6
 80aa060:	463b      	mov	r3, r7
 80aa062:	f001 f8fd 	bl	80ab260 <__adddf3>
 80aa066:	46a0      	mov	r8, r4
 80aa068:	46a9      	mov	r9, r5
 80aa06a:	4604      	mov	r4, r0
 80aa06c:	460d      	mov	r5, r1
 80aa06e:	4622      	mov	r2, r4
 80aa070:	462b      	mov	r3, r5
 80aa072:	4630      	mov	r0, r6
 80aa074:	4639      	mov	r1, r7
 80aa076:	f001 f8f1 	bl	80ab25c <__aeabi_dsub>
 80aa07a:	464b      	mov	r3, r9
 80aa07c:	4642      	mov	r2, r8
 80aa07e:	f001 f8ef 	bl	80ab260 <__adddf3>
 80aa082:	e9cb 0100 	strd	r0, r1, [fp]
 80aa086:	e96b 4502 	strd	r4, r5, [fp, #-8]!
 80aa08a:	9b01      	ldr	r3, [sp, #4]
 80aa08c:	455b      	cmp	r3, fp
 80aa08e:	d1e2      	bne.n	80aa056 <__kernel_rem_pio2+0x596>
 80aa090:	f1ba 0f01 	cmp.w	sl, #1
 80aa094:	f340 8131 	ble.w	80aa2fa <__kernel_rem_pio2+0x83a>
 80aa098:	9b04      	ldr	r3, [sp, #16]
 80aa09a:	9a01      	ldr	r2, [sp, #4]
 80aa09c:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 80aa0a0:	4413      	add	r3, r2
 80aa0a2:	469a      	mov	sl, r3
 80aa0a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80aa0a8:	9302      	str	r3, [sp, #8]
 80aa0aa:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80aa0ae:	4620      	mov	r0, r4
 80aa0b0:	4629      	mov	r1, r5
 80aa0b2:	4632      	mov	r2, r6
 80aa0b4:	463b      	mov	r3, r7
 80aa0b6:	f001 f8d3 	bl	80ab260 <__adddf3>
 80aa0ba:	46a0      	mov	r8, r4
 80aa0bc:	46a9      	mov	r9, r5
 80aa0be:	4604      	mov	r4, r0
 80aa0c0:	460d      	mov	r5, r1
 80aa0c2:	4622      	mov	r2, r4
 80aa0c4:	462b      	mov	r3, r5
 80aa0c6:	4630      	mov	r0, r6
 80aa0c8:	4639      	mov	r1, r7
 80aa0ca:	f001 f8c7 	bl	80ab25c <__aeabi_dsub>
 80aa0ce:	4642      	mov	r2, r8
 80aa0d0:	464b      	mov	r3, r9
 80aa0d2:	f001 f8c5 	bl	80ab260 <__adddf3>
 80aa0d6:	e9ca 0100 	strd	r0, r1, [sl]
 80aa0da:	e96a 4502 	strd	r4, r5, [sl, #-8]!
 80aa0de:	45d3      	cmp	fp, sl
 80aa0e0:	d1e3      	bne.n	80aa0aa <__kernel_rem_pio2+0x5ea>
 80aa0e2:	2300      	movs	r3, #0
 80aa0e4:	461e      	mov	r6, r3
 80aa0e6:	9c02      	ldr	r4, [sp, #8]
 80aa0e8:	9a01      	ldr	r2, [sp, #4]
 80aa0ea:	3408      	adds	r4, #8
 80aa0ec:	f102 0510 	add.w	r5, r2, #16
 80aa0f0:	4618      	mov	r0, r3
 80aa0f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80aa0f6:	4631      	mov	r1, r6
 80aa0f8:	f001 f8b2 	bl	80ab260 <__adddf3>
 80aa0fc:	42a5      	cmp	r5, r4
 80aa0fe:	4603      	mov	r3, r0
 80aa100:	460e      	mov	r6, r1
 80aa102:	d1f5      	bne.n	80aa0f0 <__kernel_rem_pio2+0x630>
 80aa104:	9a03      	ldr	r2, [sp, #12]
 80aa106:	2a00      	cmp	r2, #0
 80aa108:	f040 80b1 	bne.w	80aa26e <__kernel_rem_pio2+0x7ae>
 80aa10c:	4618      	mov	r0, r3
 80aa10e:	4631      	mov	r1, r6
 80aa110:	9a01      	ldr	r2, [sp, #4]
 80aa112:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80aa114:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 80aa118:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 80aa11c:	e9c6 2300 	strd	r2, r3, [r6]
 80aa120:	9b07      	ldr	r3, [sp, #28]
 80aa122:	e9c6 0104 	strd	r0, r1, [r6, #16]
 80aa126:	f003 0007 	and.w	r0, r3, #7
 80aa12a:	e9c6 4502 	strd	r4, r5, [r6, #8]
 80aa12e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80aa132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa136:	9b01      	ldr	r3, [sp, #4]
 80aa138:	a90c      	add	r1, sp, #48	; 0x30
 80aa13a:	1e5a      	subs	r2, r3, #1
 80aa13c:	ab0c      	add	r3, sp, #48	; 0x30
 80aa13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80aa142:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80aa146:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80aa14a:	e686      	b.n	80a9e5a <__kernel_rem_pio2+0x39a>
 80aa14c:	f3af 8000 	nop.w
 80aa150:	40000000 	.word	0x40000000
 80aa154:	3ff921fb 	.word	0x3ff921fb
 80aa158:	3ff00000 	.word	0x3ff00000
 80aa15c:	3fe00000 	.word	0x3fe00000
 80aa160:	3e700000 	.word	0x3e700000
 80aa164:	080adc78 	.word	0x080adc78
 80aa168:	2100      	movs	r1, #0
 80aa16a:	f06f 0317 	mvn.w	r3, #23
 80aa16e:	9107      	str	r1, [sp, #28]
 80aa170:	e4c5      	b.n	80a9afe <__kernel_rem_pio2+0x3e>
 80aa172:	2400      	movs	r4, #0
 80aa174:	e65f      	b.n	80a9e36 <__kernel_rem_pio2+0x376>
 80aa176:	4639      	mov	r1, r7
 80aa178:	9f06      	ldr	r7, [sp, #24]
 80aa17a:	4630      	mov	r0, r6
 80aa17c:	427a      	negs	r2, r7
 80aa17e:	9503      	str	r5, [sp, #12]
 80aa180:	f8cd 801c 	str.w	r8, [sp, #28]
 80aa184:	f000 ff50 	bl	80ab028 <scalbn>
 80aa188:	2200      	movs	r2, #0
 80aa18a:	4b5d      	ldr	r3, [pc, #372]	; (80aa300 <__kernel_rem_pio2+0x840>)
 80aa18c:	4604      	mov	r4, r0
 80aa18e:	460d      	mov	r5, r1
 80aa190:	f001 fca2 	bl	80abad8 <__aeabi_dcmpge>
 80aa194:	2800      	cmp	r0, #0
 80aa196:	d060      	beq.n	80aa25a <__kernel_rem_pio2+0x79a>
 80aa198:	2200      	movs	r2, #0
 80aa19a:	4b5a      	ldr	r3, [pc, #360]	; (80aa304 <__kernel_rem_pio2+0x844>)
 80aa19c:	4620      	mov	r0, r4
 80aa19e:	4629      	mov	r1, r5
 80aa1a0:	f001 fa14 	bl	80ab5cc <__aeabi_dmul>
 80aa1a4:	f001 fcc2 	bl	80abb2c <__aeabi_d2iz>
 80aa1a8:	4606      	mov	r6, r0
 80aa1aa:	f001 f9a5 	bl	80ab4f8 <__aeabi_i2d>
 80aa1ae:	2200      	movs	r2, #0
 80aa1b0:	4b53      	ldr	r3, [pc, #332]	; (80aa300 <__kernel_rem_pio2+0x840>)
 80aa1b2:	f001 fa0b 	bl	80ab5cc <__aeabi_dmul>
 80aa1b6:	4602      	mov	r2, r0
 80aa1b8:	460b      	mov	r3, r1
 80aa1ba:	4620      	mov	r0, r4
 80aa1bc:	4629      	mov	r1, r5
 80aa1be:	f001 f84d 	bl	80ab25c <__aeabi_dsub>
 80aa1c2:	f001 fcb3 	bl	80abb2c <__aeabi_d2iz>
 80aa1c6:	9b01      	ldr	r3, [sp, #4]
 80aa1c8:	aa0c      	add	r2, sp, #48	; 0x30
 80aa1ca:	f103 0a01 	add.w	sl, r3, #1
 80aa1ce:	3718      	adds	r7, #24
 80aa1d0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80aa1d4:	9706      	str	r7, [sp, #24]
 80aa1d6:	f842 602a 	str.w	r6, [r2, sl, lsl #2]
 80aa1da:	e69c      	b.n	80a9f16 <__kernel_rem_pio2+0x456>
 80aa1dc:	2600      	movs	r6, #0
 80aa1de:	9b01      	ldr	r3, [sp, #4]
 80aa1e0:	9906      	ldr	r1, [sp, #24]
 80aa1e2:	4698      	mov	r8, r3
 80aa1e4:	eb03 07c1 	add.w	r7, r3, r1, lsl #3
 80aa1e8:	4631      	mov	r1, r6
 80aa1ea:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 80aa1ee:	4630      	mov	r0, r6
 80aa1f0:	f001 f836 	bl	80ab260 <__adddf3>
 80aa1f4:	45b8      	cmp	r8, r7
 80aa1f6:	4606      	mov	r6, r0
 80aa1f8:	d1f7      	bne.n	80aa1ea <__kernel_rem_pio2+0x72a>
 80aa1fa:	9b03      	ldr	r3, [sp, #12]
 80aa1fc:	2b00      	cmp	r3, #0
 80aa1fe:	d151      	bne.n	80aa2a4 <__kernel_rem_pio2+0x7e4>
 80aa200:	4634      	mov	r4, r6
 80aa202:	460d      	mov	r5, r1
 80aa204:	4632      	mov	r2, r6
 80aa206:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80aa208:	460b      	mov	r3, r1
 80aa20a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80aa20e:	e9c6 4500 	strd	r4, r5, [r6]
 80aa212:	f001 f823 	bl	80ab25c <__aeabi_dsub>
 80aa216:	f1ba 0f00 	cmp.w	sl, #0
 80aa21a:	4603      	mov	r3, r0
 80aa21c:	460e      	mov	r6, r1
 80aa21e:	dd10      	ble.n	80aa242 <__kernel_rem_pio2+0x782>
 80aa220:	2401      	movs	r4, #1
 80aa222:	ad48      	add	r5, sp, #288	; 0x120
 80aa224:	4618      	mov	r0, r3
 80aa226:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80aa22a:	4631      	mov	r1, r6
 80aa22c:	f001 f818 	bl	80ab260 <__adddf3>
 80aa230:	3401      	adds	r4, #1
 80aa232:	45a2      	cmp	sl, r4
 80aa234:	4603      	mov	r3, r0
 80aa236:	460e      	mov	r6, r1
 80aa238:	daf4      	bge.n	80aa224 <__kernel_rem_pio2+0x764>
 80aa23a:	9a03      	ldr	r2, [sp, #12]
 80aa23c:	b10a      	cbz	r2, 80aa242 <__kernel_rem_pio2+0x782>
 80aa23e:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80aa242:	4618      	mov	r0, r3
 80aa244:	4631      	mov	r1, r6
 80aa246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80aa248:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80aa24c:	9b07      	ldr	r3, [sp, #28]
 80aa24e:	f003 0007 	and.w	r0, r3, #7
 80aa252:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80aa256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa25a:	4620      	mov	r0, r4
 80aa25c:	4629      	mov	r1, r5
 80aa25e:	f001 fc65 	bl	80abb2c <__aeabi_d2iz>
 80aa262:	9b01      	ldr	r3, [sp, #4]
 80aa264:	aa0c      	add	r2, sp, #48	; 0x30
 80aa266:	469a      	mov	sl, r3
 80aa268:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80aa26c:	e653      	b.n	80a9f16 <__kernel_rem_pio2+0x456>
 80aa26e:	9a01      	ldr	r2, [sp, #4]
 80aa270:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80aa272:	4615      	mov	r5, r2
 80aa274:	4604      	mov	r4, r0
 80aa276:	6103      	str	r3, [r0, #16]
 80aa278:	68ab      	ldr	r3, [r5, #8]
 80aa27a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80aa27e:	6146      	str	r6, [r0, #20]
 80aa280:	6851      	ldr	r1, [r2, #4]
 80aa282:	6828      	ldr	r0, [r5, #0]
 80aa284:	68d2      	ldr	r2, [r2, #12]
 80aa286:	60a3      	str	r3, [r4, #8]
 80aa288:	9b07      	ldr	r3, [sp, #28]
 80aa28a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80aa28e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80aa292:	6020      	str	r0, [r4, #0]
 80aa294:	f003 0007 	and.w	r0, r3, #7
 80aa298:	6061      	str	r1, [r4, #4]
 80aa29a:	60e2      	str	r2, [r4, #12]
 80aa29c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80aa2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa2a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80aa2a6:	f101 4400 	add.w	r4, r1, #2147483648	; 0x80000000
 80aa2aa:	460b      	mov	r3, r1
 80aa2ac:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80aa2b0:	4632      	mov	r2, r6
 80aa2b2:	e9c5 6400 	strd	r6, r4, [r5]
 80aa2b6:	f000 ffd1 	bl	80ab25c <__aeabi_dsub>
 80aa2ba:	f1ba 0f00 	cmp.w	sl, #0
 80aa2be:	4603      	mov	r3, r0
 80aa2c0:	460e      	mov	r6, r1
 80aa2c2:	dcad      	bgt.n	80aa220 <__kernel_rem_pio2+0x760>
 80aa2c4:	e7bb      	b.n	80aa23e <__kernel_rem_pio2+0x77e>
 80aa2c6:	9b08      	ldr	r3, [sp, #32]
 80aa2c8:	00db      	lsls	r3, r3, #3
 80aa2ca:	9302      	str	r3, [sp, #8]
 80aa2cc:	e474      	b.n	80a9bb8 <__kernel_rem_pio2+0xf8>
 80aa2ce:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80aa2d0:	2b02      	cmp	r3, #2
 80aa2d2:	dc06      	bgt.n	80aa2e2 <__kernel_rem_pio2+0x822>
 80aa2d4:	2b00      	cmp	r3, #0
 80aa2d6:	dc0d      	bgt.n	80aa2f4 <__kernel_rem_pio2+0x834>
 80aa2d8:	f47f aea9 	bne.w	80aa02e <__kernel_rem_pio2+0x56e>
 80aa2dc:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80aa2de:	461c      	mov	r4, r3
 80aa2e0:	e69c      	b.n	80aa01c <__kernel_rem_pio2+0x55c>
 80aa2e2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80aa2e4:	2b03      	cmp	r3, #3
 80aa2e6:	f47f aea2 	bne.w	80aa02e <__kernel_rem_pio2+0x56e>
 80aa2ea:	2300      	movs	r3, #0
 80aa2ec:	aa48      	add	r2, sp, #288	; 0x120
 80aa2ee:	461e      	mov	r6, r3
 80aa2f0:	9201      	str	r2, [sp, #4]
 80aa2f2:	e707      	b.n	80aa104 <__kernel_rem_pio2+0x644>
 80aa2f4:	2600      	movs	r6, #0
 80aa2f6:	4631      	mov	r1, r6
 80aa2f8:	e77f      	b.n	80aa1fa <__kernel_rem_pio2+0x73a>
 80aa2fa:	2300      	movs	r3, #0
 80aa2fc:	461e      	mov	r6, r3
 80aa2fe:	e701      	b.n	80aa104 <__kernel_rem_pio2+0x644>
 80aa300:	41700000 	.word	0x41700000
 80aa304:	3e700000 	.word	0x3e700000

080aa308 <__kernel_sin>:
 80aa308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80aa30c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80aa310:	b085      	sub	sp, #20
 80aa312:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80aa316:	4604      	mov	r4, r0
 80aa318:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80aa31c:	9101      	str	r1, [sp, #4]
 80aa31e:	da04      	bge.n	80aa32a <__kernel_sin+0x22>
 80aa320:	f001 fc04 	bl	80abb2c <__aeabi_d2iz>
 80aa324:	2800      	cmp	r0, #0
 80aa326:	f000 808f 	beq.w	80aa448 <__kernel_sin+0x140>
 80aa32a:	9b01      	ldr	r3, [sp, #4]
 80aa32c:	4622      	mov	r2, r4
 80aa32e:	4619      	mov	r1, r3
 80aa330:	4620      	mov	r0, r4
 80aa332:	f001 f94b 	bl	80ab5cc <__aeabi_dmul>
 80aa336:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80aa33a:	4606      	mov	r6, r0
 80aa33c:	460f      	mov	r7, r1
 80aa33e:	4602      	mov	r2, r0
 80aa340:	460b      	mov	r3, r1
 80aa342:	4620      	mov	r0, r4
 80aa344:	4649      	mov	r1, r9
 80aa346:	f001 f941 	bl	80ab5cc <__aeabi_dmul>
 80aa34a:	a343      	add	r3, pc, #268	; (adr r3, 80aa458 <__kernel_sin+0x150>)
 80aa34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa350:	4682      	mov	sl, r0
 80aa352:	468b      	mov	fp, r1
 80aa354:	4630      	mov	r0, r6
 80aa356:	4639      	mov	r1, r7
 80aa358:	f001 f938 	bl	80ab5cc <__aeabi_dmul>
 80aa35c:	a340      	add	r3, pc, #256	; (adr r3, 80aa460 <__kernel_sin+0x158>)
 80aa35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa362:	f000 ff7b 	bl	80ab25c <__aeabi_dsub>
 80aa366:	4632      	mov	r2, r6
 80aa368:	463b      	mov	r3, r7
 80aa36a:	f001 f92f 	bl	80ab5cc <__aeabi_dmul>
 80aa36e:	a33e      	add	r3, pc, #248	; (adr r3, 80aa468 <__kernel_sin+0x160>)
 80aa370:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa374:	f000 ff74 	bl	80ab260 <__adddf3>
 80aa378:	4632      	mov	r2, r6
 80aa37a:	463b      	mov	r3, r7
 80aa37c:	f001 f926 	bl	80ab5cc <__aeabi_dmul>
 80aa380:	a33b      	add	r3, pc, #236	; (adr r3, 80aa470 <__kernel_sin+0x168>)
 80aa382:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa386:	f000 ff69 	bl	80ab25c <__aeabi_dsub>
 80aa38a:	4632      	mov	r2, r6
 80aa38c:	463b      	mov	r3, r7
 80aa38e:	f001 f91d 	bl	80ab5cc <__aeabi_dmul>
 80aa392:	a339      	add	r3, pc, #228	; (adr r3, 80aa478 <__kernel_sin+0x170>)
 80aa394:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa398:	f000 ff62 	bl	80ab260 <__adddf3>
 80aa39c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80aa39e:	4680      	mov	r8, r0
 80aa3a0:	4689      	mov	r9, r1
 80aa3a2:	b3bb      	cbz	r3, 80aa414 <__kernel_sin+0x10c>
 80aa3a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80aa3a8:	2200      	movs	r2, #0
 80aa3aa:	4b37      	ldr	r3, [pc, #220]	; (80aa488 <__kernel_sin+0x180>)
 80aa3ac:	f001 f90e 	bl	80ab5cc <__aeabi_dmul>
 80aa3b0:	4642      	mov	r2, r8
 80aa3b2:	464b      	mov	r3, r9
 80aa3b4:	4680      	mov	r8, r0
 80aa3b6:	4689      	mov	r9, r1
 80aa3b8:	4650      	mov	r0, sl
 80aa3ba:	4659      	mov	r1, fp
 80aa3bc:	f001 f906 	bl	80ab5cc <__aeabi_dmul>
 80aa3c0:	4602      	mov	r2, r0
 80aa3c2:	460b      	mov	r3, r1
 80aa3c4:	4640      	mov	r0, r8
 80aa3c6:	4649      	mov	r1, r9
 80aa3c8:	f000 ff48 	bl	80ab25c <__aeabi_dsub>
 80aa3cc:	4632      	mov	r2, r6
 80aa3ce:	463b      	mov	r3, r7
 80aa3d0:	f001 f8fc 	bl	80ab5cc <__aeabi_dmul>
 80aa3d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80aa3d8:	f000 ff40 	bl	80ab25c <__aeabi_dsub>
 80aa3dc:	a328      	add	r3, pc, #160	; (adr r3, 80aa480 <__kernel_sin+0x178>)
 80aa3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa3e2:	4606      	mov	r6, r0
 80aa3e4:	460f      	mov	r7, r1
 80aa3e6:	4650      	mov	r0, sl
 80aa3e8:	4659      	mov	r1, fp
 80aa3ea:	f001 f8ef 	bl	80ab5cc <__aeabi_dmul>
 80aa3ee:	4602      	mov	r2, r0
 80aa3f0:	460b      	mov	r3, r1
 80aa3f2:	4630      	mov	r0, r6
 80aa3f4:	4639      	mov	r1, r7
 80aa3f6:	f000 ff33 	bl	80ab260 <__adddf3>
 80aa3fa:	4602      	mov	r2, r0
 80aa3fc:	460b      	mov	r3, r1
 80aa3fe:	4620      	mov	r0, r4
 80aa400:	9901      	ldr	r1, [sp, #4]
 80aa402:	f000 ff2b 	bl	80ab25c <__aeabi_dsub>
 80aa406:	4604      	mov	r4, r0
 80aa408:	460d      	mov	r5, r1
 80aa40a:	4620      	mov	r0, r4
 80aa40c:	4629      	mov	r1, r5
 80aa40e:	b005      	add	sp, #20
 80aa410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa414:	4602      	mov	r2, r0
 80aa416:	460b      	mov	r3, r1
 80aa418:	4630      	mov	r0, r6
 80aa41a:	4639      	mov	r1, r7
 80aa41c:	f001 f8d6 	bl	80ab5cc <__aeabi_dmul>
 80aa420:	a317      	add	r3, pc, #92	; (adr r3, 80aa480 <__kernel_sin+0x178>)
 80aa422:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa426:	f000 ff19 	bl	80ab25c <__aeabi_dsub>
 80aa42a:	4652      	mov	r2, sl
 80aa42c:	465b      	mov	r3, fp
 80aa42e:	f001 f8cd 	bl	80ab5cc <__aeabi_dmul>
 80aa432:	4622      	mov	r2, r4
 80aa434:	9b01      	ldr	r3, [sp, #4]
 80aa436:	f000 ff13 	bl	80ab260 <__adddf3>
 80aa43a:	4604      	mov	r4, r0
 80aa43c:	460d      	mov	r5, r1
 80aa43e:	4620      	mov	r0, r4
 80aa440:	4629      	mov	r1, r5
 80aa442:	b005      	add	sp, #20
 80aa444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa448:	9d01      	ldr	r5, [sp, #4]
 80aa44a:	4620      	mov	r0, r4
 80aa44c:	4629      	mov	r1, r5
 80aa44e:	b005      	add	sp, #20
 80aa450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa454:	f3af 8000 	nop.w
 80aa458:	5acfd57c 	.word	0x5acfd57c
 80aa45c:	3de5d93a 	.word	0x3de5d93a
 80aa460:	8a2b9ceb 	.word	0x8a2b9ceb
 80aa464:	3e5ae5e6 	.word	0x3e5ae5e6
 80aa468:	57b1fe7d 	.word	0x57b1fe7d
 80aa46c:	3ec71de3 	.word	0x3ec71de3
 80aa470:	19c161d5 	.word	0x19c161d5
 80aa474:	3f2a01a0 	.word	0x3f2a01a0
 80aa478:	1110f8a6 	.word	0x1110f8a6
 80aa47c:	3f811111 	.word	0x3f811111
 80aa480:	55555549 	.word	0x55555549
 80aa484:	3fc55555 	.word	0x3fc55555
 80aa488:	3fe00000 	.word	0x3fe00000

080aa48c <__kernel_cosf>:
 80aa48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80aa490:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80aa494:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 80aa498:	4606      	mov	r6, r0
 80aa49a:	4688      	mov	r8, r1
 80aa49c:	da4a      	bge.n	80aa534 <__kernel_cosf+0xa8>
 80aa49e:	f001 fec7 	bl	80ac230 <__aeabi_f2iz>
 80aa4a2:	2800      	cmp	r0, #0
 80aa4a4:	f000 809f 	beq.w	80aa5e6 <__kernel_cosf+0x15a>
 80aa4a8:	4631      	mov	r1, r6
 80aa4aa:	4630      	mov	r0, r6
 80aa4ac:	f001 fce4 	bl	80abe78 <__aeabi_fmul>
 80aa4b0:	4604      	mov	r4, r0
 80aa4b2:	494f      	ldr	r1, [pc, #316]	; (80aa5f0 <__kernel_cosf+0x164>)
 80aa4b4:	f001 fce0 	bl	80abe78 <__aeabi_fmul>
 80aa4b8:	494e      	ldr	r1, [pc, #312]	; (80aa5f4 <__kernel_cosf+0x168>)
 80aa4ba:	f001 fbd5 	bl	80abc68 <__addsf3>
 80aa4be:	4621      	mov	r1, r4
 80aa4c0:	f001 fcda 	bl	80abe78 <__aeabi_fmul>
 80aa4c4:	494c      	ldr	r1, [pc, #304]	; (80aa5f8 <__kernel_cosf+0x16c>)
 80aa4c6:	f001 fbcd 	bl	80abc64 <__aeabi_fsub>
 80aa4ca:	4621      	mov	r1, r4
 80aa4cc:	f001 fcd4 	bl	80abe78 <__aeabi_fmul>
 80aa4d0:	494a      	ldr	r1, [pc, #296]	; (80aa5fc <__kernel_cosf+0x170>)
 80aa4d2:	f001 fbc9 	bl	80abc68 <__addsf3>
 80aa4d6:	4621      	mov	r1, r4
 80aa4d8:	f001 fcce 	bl	80abe78 <__aeabi_fmul>
 80aa4dc:	4948      	ldr	r1, [pc, #288]	; (80aa600 <__kernel_cosf+0x174>)
 80aa4de:	f001 fbc1 	bl	80abc64 <__aeabi_fsub>
 80aa4e2:	4621      	mov	r1, r4
 80aa4e4:	f001 fcc8 	bl	80abe78 <__aeabi_fmul>
 80aa4e8:	4946      	ldr	r1, [pc, #280]	; (80aa604 <__kernel_cosf+0x178>)
 80aa4ea:	f001 fbbd 	bl	80abc68 <__addsf3>
 80aa4ee:	4621      	mov	r1, r4
 80aa4f0:	f001 fcc2 	bl	80abe78 <__aeabi_fmul>
 80aa4f4:	4607      	mov	r7, r0
 80aa4f6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80aa4fa:	4620      	mov	r0, r4
 80aa4fc:	f001 fcbc 	bl	80abe78 <__aeabi_fmul>
 80aa500:	4603      	mov	r3, r0
 80aa502:	4639      	mov	r1, r7
 80aa504:	4620      	mov	r0, r4
 80aa506:	461c      	mov	r4, r3
 80aa508:	f001 fcb6 	bl	80abe78 <__aeabi_fmul>
 80aa50c:	4641      	mov	r1, r8
 80aa50e:	4605      	mov	r5, r0
 80aa510:	4630      	mov	r0, r6
 80aa512:	f001 fcb1 	bl	80abe78 <__aeabi_fmul>
 80aa516:	4601      	mov	r1, r0
 80aa518:	4628      	mov	r0, r5
 80aa51a:	f001 fba3 	bl	80abc64 <__aeabi_fsub>
 80aa51e:	4601      	mov	r1, r0
 80aa520:	4620      	mov	r0, r4
 80aa522:	f001 fb9f 	bl	80abc64 <__aeabi_fsub>
 80aa526:	4601      	mov	r1, r0
 80aa528:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80aa52c:	f001 fb9a 	bl	80abc64 <__aeabi_fsub>
 80aa530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80aa534:	4601      	mov	r1, r0
 80aa536:	f001 fc9f 	bl	80abe78 <__aeabi_fmul>
 80aa53a:	4604      	mov	r4, r0
 80aa53c:	492c      	ldr	r1, [pc, #176]	; (80aa5f0 <__kernel_cosf+0x164>)
 80aa53e:	f001 fc9b 	bl	80abe78 <__aeabi_fmul>
 80aa542:	492c      	ldr	r1, [pc, #176]	; (80aa5f4 <__kernel_cosf+0x168>)
 80aa544:	f001 fb90 	bl	80abc68 <__addsf3>
 80aa548:	4621      	mov	r1, r4
 80aa54a:	f001 fc95 	bl	80abe78 <__aeabi_fmul>
 80aa54e:	492a      	ldr	r1, [pc, #168]	; (80aa5f8 <__kernel_cosf+0x16c>)
 80aa550:	f001 fb88 	bl	80abc64 <__aeabi_fsub>
 80aa554:	4621      	mov	r1, r4
 80aa556:	f001 fc8f 	bl	80abe78 <__aeabi_fmul>
 80aa55a:	4928      	ldr	r1, [pc, #160]	; (80aa5fc <__kernel_cosf+0x170>)
 80aa55c:	f001 fb84 	bl	80abc68 <__addsf3>
 80aa560:	4621      	mov	r1, r4
 80aa562:	f001 fc89 	bl	80abe78 <__aeabi_fmul>
 80aa566:	4926      	ldr	r1, [pc, #152]	; (80aa600 <__kernel_cosf+0x174>)
 80aa568:	f001 fb7c 	bl	80abc64 <__aeabi_fsub>
 80aa56c:	4621      	mov	r1, r4
 80aa56e:	f001 fc83 	bl	80abe78 <__aeabi_fmul>
 80aa572:	4924      	ldr	r1, [pc, #144]	; (80aa604 <__kernel_cosf+0x178>)
 80aa574:	f001 fb78 	bl	80abc68 <__addsf3>
 80aa578:	4621      	mov	r1, r4
 80aa57a:	f001 fc7d 	bl	80abe78 <__aeabi_fmul>
 80aa57e:	4b22      	ldr	r3, [pc, #136]	; (80aa608 <__kernel_cosf+0x17c>)
 80aa580:	4607      	mov	r7, r0
 80aa582:	429d      	cmp	r5, r3
 80aa584:	ddb7      	ble.n	80aa4f6 <__kernel_cosf+0x6a>
 80aa586:	4b21      	ldr	r3, [pc, #132]	; (80aa60c <__kernel_cosf+0x180>)
 80aa588:	429d      	cmp	r5, r3
 80aa58a:	dc28      	bgt.n	80aa5de <__kernel_cosf+0x152>
 80aa58c:	f105 457f 	add.w	r5, r5, #4278190080	; 0xff000000
 80aa590:	4629      	mov	r1, r5
 80aa592:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80aa596:	f001 fb65 	bl	80abc64 <__aeabi_fsub>
 80aa59a:	4681      	mov	r9, r0
 80aa59c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80aa5a0:	4620      	mov	r0, r4
 80aa5a2:	f001 fc69 	bl	80abe78 <__aeabi_fmul>
 80aa5a6:	4629      	mov	r1, r5
 80aa5a8:	f001 fb5c 	bl	80abc64 <__aeabi_fsub>
 80aa5ac:	4603      	mov	r3, r0
 80aa5ae:	4639      	mov	r1, r7
 80aa5b0:	4620      	mov	r0, r4
 80aa5b2:	461c      	mov	r4, r3
 80aa5b4:	f001 fc60 	bl	80abe78 <__aeabi_fmul>
 80aa5b8:	4641      	mov	r1, r8
 80aa5ba:	4605      	mov	r5, r0
 80aa5bc:	4630      	mov	r0, r6
 80aa5be:	f001 fc5b 	bl	80abe78 <__aeabi_fmul>
 80aa5c2:	4601      	mov	r1, r0
 80aa5c4:	4628      	mov	r0, r5
 80aa5c6:	f001 fb4d 	bl	80abc64 <__aeabi_fsub>
 80aa5ca:	4601      	mov	r1, r0
 80aa5cc:	4620      	mov	r0, r4
 80aa5ce:	f001 fb49 	bl	80abc64 <__aeabi_fsub>
 80aa5d2:	4601      	mov	r1, r0
 80aa5d4:	4648      	mov	r0, r9
 80aa5d6:	f001 fb45 	bl	80abc64 <__aeabi_fsub>
 80aa5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80aa5de:	f8df 9034 	ldr.w	r9, [pc, #52]	; 80aa614 <__kernel_cosf+0x188>
 80aa5e2:	4d0b      	ldr	r5, [pc, #44]	; (80aa610 <__kernel_cosf+0x184>)
 80aa5e4:	e7da      	b.n	80aa59c <__kernel_cosf+0x110>
 80aa5e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80aa5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80aa5ee:	bf00      	nop
 80aa5f0:	ad47d74e 	.word	0xad47d74e
 80aa5f4:	310f74f6 	.word	0x310f74f6
 80aa5f8:	3493f27c 	.word	0x3493f27c
 80aa5fc:	37d00d01 	.word	0x37d00d01
 80aa600:	3ab60b61 	.word	0x3ab60b61
 80aa604:	3d2aaaab 	.word	0x3d2aaaab
 80aa608:	3e999999 	.word	0x3e999999
 80aa60c:	3f480000 	.word	0x3f480000
 80aa610:	3e900000 	.word	0x3e900000
 80aa614:	3f380000 	.word	0x3f380000

080aa618 <__kernel_rem_pio2f>:
 80aa618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80aa61c:	461c      	mov	r4, r3
 80aa61e:	b0dd      	sub	sp, #372	; 0x174
 80aa620:	9109      	str	r1, [sp, #36]	; 0x24
 80aa622:	1e61      	subs	r1, r4, #1
 80aa624:	9306      	str	r3, [sp, #24]
 80aa626:	9101      	str	r1, [sp, #4]
 80aa628:	4bbe      	ldr	r3, [pc, #760]	; (80aa924 <__kernel_rem_pio2f+0x30c>)
 80aa62a:	9966      	ldr	r1, [sp, #408]	; 0x198
 80aa62c:	4605      	mov	r5, r0
 80aa62e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80aa632:	920b      	str	r2, [sp, #44]	; 0x2c
 80aa634:	9103      	str	r1, [sp, #12]
 80aa636:	1d11      	adds	r1, r2, #4
 80aa638:	f2c0 8301 	blt.w	80aac3e <__kernel_rem_pio2f+0x626>
 80aa63c:	1ed3      	subs	r3, r2, #3
 80aa63e:	bf44      	itt	mi
 80aa640:	4613      	movmi	r3, r2
 80aa642:	3304      	addmi	r3, #4
 80aa644:	10db      	asrs	r3, r3, #3
 80aa646:	9305      	str	r3, [sp, #20]
 80aa648:	3301      	adds	r3, #1
 80aa64a:	00db      	lsls	r3, r3, #3
 80aa64c:	930a      	str	r3, [sp, #40]	; 0x28
 80aa64e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80aa652:	1a9b      	subs	r3, r3, r2
 80aa654:	9304      	str	r3, [sp, #16]
 80aa656:	9a05      	ldr	r2, [sp, #20]
 80aa658:	9b01      	ldr	r3, [sp, #4]
 80aa65a:	1ad6      	subs	r6, r2, r3
 80aa65c:	9a03      	ldr	r2, [sp, #12]
 80aa65e:	eb12 0803 	adds.w	r8, r2, r3
 80aa662:	d418      	bmi.n	80aa696 <__kernel_rem_pio2f+0x7e>
 80aa664:	f108 0801 	add.w	r8, r8, #1
 80aa668:	2400      	movs	r4, #0
 80aa66a:	f8dd 919c 	ldr.w	r9, [sp, #412]	; 0x19c
 80aa66e:	44b0      	add	r8, r6
 80aa670:	af20      	add	r7, sp, #128	; 0x80
 80aa672:	e008      	b.n	80aa686 <__kernel_rem_pio2f+0x6e>
 80aa674:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 80aa678:	f001 fbaa 	bl	80abdd0 <__aeabi_i2f>
 80aa67c:	3601      	adds	r6, #1
 80aa67e:	4546      	cmp	r6, r8
 80aa680:	f847 0b04 	str.w	r0, [r7], #4
 80aa684:	d007      	beq.n	80aa696 <__kernel_rem_pio2f+0x7e>
 80aa686:	2e00      	cmp	r6, #0
 80aa688:	daf4      	bge.n	80aa674 <__kernel_rem_pio2f+0x5c>
 80aa68a:	4620      	mov	r0, r4
 80aa68c:	3601      	adds	r6, #1
 80aa68e:	4546      	cmp	r6, r8
 80aa690:	f847 0b04 	str.w	r0, [r7], #4
 80aa694:	d1f7      	bne.n	80aa686 <__kernel_rem_pio2f+0x6e>
 80aa696:	9b03      	ldr	r3, [sp, #12]
 80aa698:	2b00      	cmp	r3, #0
 80aa69a:	f1a5 0304 	sub.w	r3, r5, #4
 80aa69e:	9302      	str	r3, [sp, #8]
 80aa6a0:	f2c0 8313 	blt.w	80aacca <__kernel_rem_pio2f+0x6b2>
 80aa6a4:	4619      	mov	r1, r3
 80aa6a6:	9b06      	ldr	r3, [sp, #24]
 80aa6a8:	9e01      	ldr	r6, [sp, #4]
 80aa6aa:	009a      	lsls	r2, r3, #2
 80aa6ac:	9200      	str	r2, [sp, #0]
 80aa6ae:	9a03      	ldr	r2, [sp, #12]
 80aa6b0:	eb01 0583 	add.w	r5, r1, r3, lsl #2
 80aa6b4:	a920      	add	r1, sp, #128	; 0x80
 80aa6b6:	eb01 0783 	add.w	r7, r1, r3, lsl #2
 80aa6ba:	f50d 7890 	add.w	r8, sp, #288	; 0x120
 80aa6be:	eb02 0903 	add.w	r9, r2, r3
 80aa6c2:	9b01      	ldr	r3, [sp, #4]
 80aa6c4:	2b00      	cmp	r3, #0
 80aa6c6:	bfb8      	it	lt
 80aa6c8:	2400      	movlt	r4, #0
 80aa6ca:	db10      	blt.n	80aa6ee <__kernel_rem_pio2f+0xd6>
 80aa6cc:	46bb      	mov	fp, r7
 80aa6ce:	2400      	movs	r4, #0
 80aa6d0:	f8dd a008 	ldr.w	sl, [sp, #8]
 80aa6d4:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 80aa6d8:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80aa6dc:	f001 fbcc 	bl	80abe78 <__aeabi_fmul>
 80aa6e0:	4601      	mov	r1, r0
 80aa6e2:	4620      	mov	r0, r4
 80aa6e4:	f001 fac0 	bl	80abc68 <__addsf3>
 80aa6e8:	45aa      	cmp	sl, r5
 80aa6ea:	4604      	mov	r4, r0
 80aa6ec:	d1f2      	bne.n	80aa6d4 <__kernel_rem_pio2f+0xbc>
 80aa6ee:	3601      	adds	r6, #1
 80aa6f0:	454e      	cmp	r6, r9
 80aa6f2:	f848 4b04 	str.w	r4, [r8], #4
 80aa6f6:	f107 0704 	add.w	r7, r7, #4
 80aa6fa:	d1e2      	bne.n	80aa6c2 <__kernel_rem_pio2f+0xaa>
 80aa6fc:	9a03      	ldr	r2, [sp, #12]
 80aa6fe:	a90c      	add	r1, sp, #48	; 0x30
 80aa700:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80aa704:	9802      	ldr	r0, [sp, #8]
 80aa706:	9900      	ldr	r1, [sp, #0]
 80aa708:	4692      	mov	sl, r2
 80aa70a:	4401      	add	r1, r0
 80aa70c:	460d      	mov	r5, r1
 80aa70e:	3b08      	subs	r3, #8
 80aa710:	9307      	str	r3, [sp, #28]
 80aa712:	ab0b      	add	r3, sp, #44	; 0x2c
 80aa714:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80aa718:	9308      	str	r3, [sp, #32]
 80aa71a:	ab5c      	add	r3, sp, #368	; 0x170
 80aa71c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80aa720:	f1ba 0f00 	cmp.w	sl, #0
 80aa724:	f853 9c50 	ldr.w	r9, [r3, #-80]
 80aa728:	ea4f 088a 	mov.w	r8, sl, lsl #2
 80aa72c:	dd22      	ble.n	80aa774 <__kernel_rem_pio2f+0x15c>
 80aa72e:	af48      	add	r7, sp, #288	; 0x120
 80aa730:	ae0c      	add	r6, sp, #48	; 0x30
 80aa732:	eb07 048a 	add.w	r4, r7, sl, lsl #2
 80aa736:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80aa73a:	4648      	mov	r0, r9
 80aa73c:	f001 fb9c 	bl	80abe78 <__aeabi_fmul>
 80aa740:	f001 fd76 	bl	80ac230 <__aeabi_f2iz>
 80aa744:	f001 fb44 	bl	80abdd0 <__aeabi_i2f>
 80aa748:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80aa74c:	4683      	mov	fp, r0
 80aa74e:	f001 fb93 	bl	80abe78 <__aeabi_fmul>
 80aa752:	4601      	mov	r1, r0
 80aa754:	4648      	mov	r0, r9
 80aa756:	f001 fa85 	bl	80abc64 <__aeabi_fsub>
 80aa75a:	f001 fd69 	bl	80ac230 <__aeabi_f2iz>
 80aa75e:	4603      	mov	r3, r0
 80aa760:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80aa764:	4658      	mov	r0, fp
 80aa766:	f846 3b04 	str.w	r3, [r6], #4
 80aa76a:	f001 fa7d 	bl	80abc68 <__addsf3>
 80aa76e:	42bc      	cmp	r4, r7
 80aa770:	4681      	mov	r9, r0
 80aa772:	d1e0      	bne.n	80aa736 <__kernel_rem_pio2f+0x11e>
 80aa774:	9e04      	ldr	r6, [sp, #16]
 80aa776:	4648      	mov	r0, r9
 80aa778:	4631      	mov	r1, r6
 80aa77a:	f000 fd13 	bl	80ab1a4 <scalbnf>
 80aa77e:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80aa782:	4604      	mov	r4, r0
 80aa784:	f001 fb78 	bl	80abe78 <__aeabi_fmul>
 80aa788:	f000 fccc 	bl	80ab124 <floorf>
 80aa78c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80aa790:	f001 fb72 	bl	80abe78 <__aeabi_fmul>
 80aa794:	4601      	mov	r1, r0
 80aa796:	4620      	mov	r0, r4
 80aa798:	f001 fa64 	bl	80abc64 <__aeabi_fsub>
 80aa79c:	4604      	mov	r4, r0
 80aa79e:	f001 fd47 	bl	80ac230 <__aeabi_f2iz>
 80aa7a2:	4607      	mov	r7, r0
 80aa7a4:	f001 fb14 	bl	80abdd0 <__aeabi_i2f>
 80aa7a8:	4601      	mov	r1, r0
 80aa7aa:	4620      	mov	r0, r4
 80aa7ac:	f001 fa5a 	bl	80abc64 <__aeabi_fsub>
 80aa7b0:	2e00      	cmp	r6, #0
 80aa7b2:	4604      	mov	r4, r0
 80aa7b4:	f340 808a 	ble.w	80aa8cc <__kernel_rem_pio2f+0x2b4>
 80aa7b8:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 80aa7bc:	ab0c      	add	r3, sp, #48	; 0x30
 80aa7be:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80aa7c2:	f1c6 0208 	rsb	r2, r6, #8
 80aa7c6:	fa43 f102 	asr.w	r1, r3, r2
 80aa7ca:	fa01 f202 	lsl.w	r2, r1, r2
 80aa7ce:	1a9b      	subs	r3, r3, r2
 80aa7d0:	f1c6 0607 	rsb	r6, r6, #7
 80aa7d4:	fa43 f606 	asr.w	r6, r3, r6
 80aa7d8:	aa0c      	add	r2, sp, #48	; 0x30
 80aa7da:	2e00      	cmp	r6, #0
 80aa7dc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80aa7e0:	440f      	add	r7, r1
 80aa7e2:	dc7d      	bgt.n	80aa8e0 <__kernel_rem_pio2f+0x2c8>
 80aa7e4:	2100      	movs	r1, #0
 80aa7e6:	4620      	mov	r0, r4
 80aa7e8:	f001 fcda 	bl	80ac1a0 <__aeabi_fcmpeq>
 80aa7ec:	2800      	cmp	r0, #0
 80aa7ee:	f000 80d4 	beq.w	80aa99a <__kernel_rem_pio2f+0x382>
 80aa7f2:	9b03      	ldr	r3, [sp, #12]
 80aa7f4:	f10a 34ff 	add.w	r4, sl, #4294967295	; 0xffffffff
 80aa7f8:	42a3      	cmp	r3, r4
 80aa7fa:	dc10      	bgt.n	80aa81e <__kernel_rem_pio2f+0x206>
 80aa7fc:	2200      	movs	r2, #0
 80aa7fe:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 80aa802:	3b01      	subs	r3, #1
 80aa804:	a90c      	add	r1, sp, #48	; 0x30
 80aa806:	9808      	ldr	r0, [sp, #32]
 80aa808:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80aa80c:	f853 1904 	ldr.w	r1, [r3], #-4
 80aa810:	4283      	cmp	r3, r0
 80aa812:	ea42 0201 	orr.w	r2, r2, r1
 80aa816:	d1f9      	bne.n	80aa80c <__kernel_rem_pio2f+0x1f4>
 80aa818:	2a00      	cmp	r2, #0
 80aa81a:	f040 8117 	bne.w	80aaa4c <__kernel_rem_pio2f+0x434>
 80aa81e:	9b03      	ldr	r3, [sp, #12]
 80aa820:	aa0c      	add	r2, sp, #48	; 0x30
 80aa822:	3b01      	subs	r3, #1
 80aa824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80aa828:	2b00      	cmp	r3, #0
 80aa82a:	f040 810a 	bne.w	80aaa42 <__kernel_rem_pio2f+0x42a>
 80aa82e:	2701      	movs	r7, #1
 80aa830:	9b07      	ldr	r3, [sp, #28]
 80aa832:	f853 2904 	ldr.w	r2, [r3], #-4
 80aa836:	3701      	adds	r7, #1
 80aa838:	2a00      	cmp	r2, #0
 80aa83a:	d0fa      	beq.n	80aa832 <__kernel_rem_pio2f+0x21a>
 80aa83c:	f10a 0301 	add.w	r3, sl, #1
 80aa840:	4698      	mov	r8, r3
 80aa842:	eb0a 0207 	add.w	r2, sl, r7
 80aa846:	9200      	str	r2, [sp, #0]
 80aa848:	9a05      	ldr	r2, [sp, #20]
 80aa84a:	eb03 0902 	add.w	r9, r3, r2
 80aa84e:	9a06      	ldr	r2, [sp, #24]
 80aa850:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 80aa854:	eb02 060a 	add.w	r6, r2, sl
 80aa858:	aa20      	add	r2, sp, #128	; 0x80
 80aa85a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80aa85e:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 80aa860:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80aa864:	eb02 0989 	add.w	r9, r2, r9, lsl #2
 80aa868:	aa48      	add	r2, sp, #288	; 0x120
 80aa86a:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 80aa86e:	f859 0f04 	ldr.w	r0, [r9, #4]!
 80aa872:	f001 faad 	bl	80abdd0 <__aeabi_i2f>
 80aa876:	9b01      	ldr	r3, [sp, #4]
 80aa878:	4634      	mov	r4, r6
 80aa87a:	2b00      	cmp	r3, #0
 80aa87c:	6030      	str	r0, [r6, #0]
 80aa87e:	f106 0604 	add.w	r6, r6, #4
 80aa882:	db1a      	blt.n	80aa8ba <__kernel_rem_pio2f+0x2a2>
 80aa884:	2700      	movs	r7, #0
 80aa886:	f8dd b008 	ldr.w	fp, [sp, #8]
 80aa88a:	3c04      	subs	r4, #4
 80aa88c:	e001      	b.n	80aa892 <__kernel_rem_pio2f+0x27a>
 80aa88e:	f854 0904 	ldr.w	r0, [r4], #-4
 80aa892:	f85b 1f04 	ldr.w	r1, [fp, #4]!
 80aa896:	f001 faef 	bl	80abe78 <__aeabi_fmul>
 80aa89a:	4601      	mov	r1, r0
 80aa89c:	4638      	mov	r0, r7
 80aa89e:	f001 f9e3 	bl	80abc68 <__addsf3>
 80aa8a2:	45ab      	cmp	fp, r5
 80aa8a4:	4607      	mov	r7, r0
 80aa8a6:	d1f2      	bne.n	80aa88e <__kernel_rem_pio2f+0x276>
 80aa8a8:	9b00      	ldr	r3, [sp, #0]
 80aa8aa:	f108 0801 	add.w	r8, r8, #1
 80aa8ae:	4598      	cmp	r8, r3
 80aa8b0:	f84a 7b04 	str.w	r7, [sl], #4
 80aa8b4:	dddb      	ble.n	80aa86e <__kernel_rem_pio2f+0x256>
 80aa8b6:	469a      	mov	sl, r3
 80aa8b8:	e72f      	b.n	80aa71a <__kernel_rem_pio2f+0x102>
 80aa8ba:	2700      	movs	r7, #0
 80aa8bc:	9b00      	ldr	r3, [sp, #0]
 80aa8be:	f108 0801 	add.w	r8, r8, #1
 80aa8c2:	4598      	cmp	r8, r3
 80aa8c4:	f84a 7b04 	str.w	r7, [sl], #4
 80aa8c8:	ddd1      	ble.n	80aa86e <__kernel_rem_pio2f+0x256>
 80aa8ca:	e7f4      	b.n	80aa8b6 <__kernel_rem_pio2f+0x29e>
 80aa8cc:	f040 80a1 	bne.w	80aaa12 <__kernel_rem_pio2f+0x3fa>
 80aa8d0:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80aa8d4:	aa0c      	add	r2, sp, #48	; 0x30
 80aa8d6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80aa8da:	1236      	asrs	r6, r6, #8
 80aa8dc:	2e00      	cmp	r6, #0
 80aa8de:	dd81      	ble.n	80aa7e4 <__kernel_rem_pio2f+0x1cc>
 80aa8e0:	f1ba 0f00 	cmp.w	sl, #0
 80aa8e4:	f107 0701 	add.w	r7, r7, #1
 80aa8e8:	f340 81ae 	ble.w	80aac48 <__kernel_rem_pio2f+0x630>
 80aa8ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80aa8ee:	2a00      	cmp	r2, #0
 80aa8f0:	f040 8087 	bne.w	80aaa02 <__kernel_rem_pio2f+0x3ea>
 80aa8f4:	f1ba 0f01 	cmp.w	sl, #1
 80aa8f8:	d01e      	beq.n	80aa938 <__kernel_rem_pio2f+0x320>
 80aa8fa:	2101      	movs	r1, #1
 80aa8fc:	ab0c      	add	r3, sp, #48	; 0x30
 80aa8fe:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80aa902:	2a00      	cmp	r2, #0
 80aa904:	f000 8080 	beq.w	80aaa08 <__kernel_rem_pio2f+0x3f0>
 80aa908:	1c4b      	adds	r3, r1, #1
 80aa90a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80aa90e:	a80c      	add	r0, sp, #48	; 0x30
 80aa910:	459a      	cmp	sl, r3
 80aa912:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 80aa916:	dd0e      	ble.n	80aa936 <__kernel_rem_pio2f+0x31e>
 80aa918:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80aa91c:	4480      	add	r8, r0
 80aa91e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80aa922:	e002      	b.n	80aa92a <__kernel_rem_pio2f+0x312>
 80aa924:	080adcec 	.word	0x080adcec
 80aa928:	681a      	ldr	r2, [r3, #0]
 80aa92a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80aa92e:	f843 2b04 	str.w	r2, [r3], #4
 80aa932:	4543      	cmp	r3, r8
 80aa934:	d1f8      	bne.n	80aa928 <__kernel_rem_pio2f+0x310>
 80aa936:	2201      	movs	r2, #1
 80aa938:	9b04      	ldr	r3, [sp, #16]
 80aa93a:	2b00      	cmp	r3, #0
 80aa93c:	dd0e      	ble.n	80aa95c <__kernel_rem_pio2f+0x344>
 80aa93e:	2b01      	cmp	r3, #1
 80aa940:	f000 8172 	beq.w	80aac28 <__kernel_rem_pio2f+0x610>
 80aa944:	2b02      	cmp	r3, #2
 80aa946:	d109      	bne.n	80aa95c <__kernel_rem_pio2f+0x344>
 80aa948:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 80aa94c:	ab0c      	add	r3, sp, #48	; 0x30
 80aa94e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80aa952:	a80c      	add	r0, sp, #48	; 0x30
 80aa954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80aa958:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 80aa95c:	2e02      	cmp	r6, #2
 80aa95e:	f47f af41 	bne.w	80aa7e4 <__kernel_rem_pio2f+0x1cc>
 80aa962:	4621      	mov	r1, r4
 80aa964:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80aa968:	9200      	str	r2, [sp, #0]
 80aa96a:	f001 f97b 	bl	80abc64 <__aeabi_fsub>
 80aa96e:	9a00      	ldr	r2, [sp, #0]
 80aa970:	4604      	mov	r4, r0
 80aa972:	2a00      	cmp	r2, #0
 80aa974:	f43f af36 	beq.w	80aa7e4 <__kernel_rem_pio2f+0x1cc>
 80aa978:	9904      	ldr	r1, [sp, #16]
 80aa97a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80aa97e:	f000 fc11 	bl	80ab1a4 <scalbnf>
 80aa982:	4601      	mov	r1, r0
 80aa984:	4620      	mov	r0, r4
 80aa986:	f001 f96d 	bl	80abc64 <__aeabi_fsub>
 80aa98a:	4604      	mov	r4, r0
 80aa98c:	2100      	movs	r1, #0
 80aa98e:	4620      	mov	r0, r4
 80aa990:	f001 fc06 	bl	80ac1a0 <__aeabi_fcmpeq>
 80aa994:	2800      	cmp	r0, #0
 80aa996:	f47f af2c 	bne.w	80aa7f2 <__kernel_rem_pio2f+0x1da>
 80aa99a:	4620      	mov	r0, r4
 80aa99c:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 80aa9a0:	1a99      	subs	r1, r3, r2
 80aa9a2:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80aa9a6:	f000 fbfd 	bl	80ab1a4 <scalbnf>
 80aa9aa:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80aa9ae:	4604      	mov	r4, r0
 80aa9b0:	f001 fc14 	bl	80ac1dc <__aeabi_fcmpge>
 80aa9b4:	2800      	cmp	r0, #0
 80aa9b6:	f000 8172 	beq.w	80aac9e <__kernel_rem_pio2f+0x686>
 80aa9ba:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80aa9be:	4620      	mov	r0, r4
 80aa9c0:	f001 fa5a 	bl	80abe78 <__aeabi_fmul>
 80aa9c4:	f001 fc34 	bl	80ac230 <__aeabi_f2iz>
 80aa9c8:	f001 fa02 	bl	80abdd0 <__aeabi_i2f>
 80aa9cc:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80aa9d0:	4605      	mov	r5, r0
 80aa9d2:	f001 fa51 	bl	80abe78 <__aeabi_fmul>
 80aa9d6:	4601      	mov	r1, r0
 80aa9d8:	4620      	mov	r0, r4
 80aa9da:	f001 f943 	bl	80abc64 <__aeabi_fsub>
 80aa9de:	f001 fc27 	bl	80ac230 <__aeabi_f2iz>
 80aa9e2:	4603      	mov	r3, r0
 80aa9e4:	aa0c      	add	r2, sp, #48	; 0x30
 80aa9e6:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80aa9ea:	4628      	mov	r0, r5
 80aa9ec:	f001 fc20 	bl	80ac230 <__aeabi_f2iz>
 80aa9f0:	9b04      	ldr	r3, [sp, #16]
 80aa9f2:	f10a 0401 	add.w	r4, sl, #1
 80aa9f6:	3308      	adds	r3, #8
 80aa9f8:	9304      	str	r3, [sp, #16]
 80aa9fa:	ab0c      	add	r3, sp, #48	; 0x30
 80aa9fc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80aaa00:	e03a      	b.n	80aaa78 <__kernel_rem_pio2f+0x460>
 80aaa02:	2301      	movs	r3, #1
 80aaa04:	2100      	movs	r1, #0
 80aaa06:	e780      	b.n	80aa90a <__kernel_rem_pio2f+0x2f2>
 80aaa08:	3101      	adds	r1, #1
 80aaa0a:	4551      	cmp	r1, sl
 80aaa0c:	f47f af77 	bne.w	80aa8fe <__kernel_rem_pio2f+0x2e6>
 80aaa10:	e792      	b.n	80aa938 <__kernel_rem_pio2f+0x320>
 80aaa12:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80aaa16:	f001 fbe1 	bl	80ac1dc <__aeabi_fcmpge>
 80aaa1a:	4606      	mov	r6, r0
 80aaa1c:	2800      	cmp	r0, #0
 80aaa1e:	f43f aee1 	beq.w	80aa7e4 <__kernel_rem_pio2f+0x1cc>
 80aaa22:	f1ba 0f00 	cmp.w	sl, #0
 80aaa26:	bfc8      	it	gt
 80aaa28:	2602      	movgt	r6, #2
 80aaa2a:	f107 0701 	add.w	r7, r7, #1
 80aaa2e:	f73f af5d 	bgt.w	80aa8ec <__kernel_rem_pio2f+0x2d4>
 80aaa32:	4621      	mov	r1, r4
 80aaa34:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80aaa38:	f001 f914 	bl	80abc64 <__aeabi_fsub>
 80aaa3c:	2602      	movs	r6, #2
 80aaa3e:	4604      	mov	r4, r0
 80aaa40:	e6d0      	b.n	80aa7e4 <__kernel_rem_pio2f+0x1cc>
 80aaa42:	f10a 0301 	add.w	r3, sl, #1
 80aaa46:	4698      	mov	r8, r3
 80aaa48:	9300      	str	r3, [sp, #0]
 80aaa4a:	e6fd      	b.n	80aa848 <__kernel_rem_pio2f+0x230>
 80aaa4c:	9a04      	ldr	r2, [sp, #16]
 80aaa4e:	ab0c      	add	r3, sp, #48	; 0x30
 80aaa50:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80aaa54:	3a08      	subs	r2, #8
 80aaa56:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80aaa5a:	9204      	str	r2, [sp, #16]
 80aaa5c:	b963      	cbnz	r3, 80aaa78 <__kernel_rem_pio2f+0x460>
 80aaa5e:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 80aaa62:	3b02      	subs	r3, #2
 80aaa64:	a90c      	add	r1, sp, #48	; 0x30
 80aaa66:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80aaa6a:	f853 1904 	ldr.w	r1, [r3], #-4
 80aaa6e:	3c01      	subs	r4, #1
 80aaa70:	3a08      	subs	r2, #8
 80aaa72:	2900      	cmp	r1, #0
 80aaa74:	d0f9      	beq.n	80aaa6a <__kernel_rem_pio2f+0x452>
 80aaa76:	9204      	str	r2, [sp, #16]
 80aaa78:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80aaa7c:	9904      	ldr	r1, [sp, #16]
 80aaa7e:	f000 fb91 	bl	80ab1a4 <scalbnf>
 80aaa82:	2c00      	cmp	r4, #0
 80aaa84:	4607      	mov	r7, r0
 80aaa86:	f2c0 8124 	blt.w	80aacd2 <__kernel_rem_pio2f+0x6ba>
 80aaa8a:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 80aaa8e:	00a3      	lsls	r3, r4, #2
 80aaa90:	a948      	add	r1, sp, #288	; 0x120
 80aaa92:	1d1a      	adds	r2, r3, #4
 80aaa94:	eb01 0803 	add.w	r8, r1, r3
 80aaa98:	9304      	str	r3, [sp, #16]
 80aaa9a:	ab0c      	add	r3, sp, #48	; 0x30
 80aaa9c:	9205      	str	r2, [sp, #20]
 80aaa9e:	eb03 0902 	add.w	r9, r3, r2
 80aaaa2:	f108 0504 	add.w	r5, r8, #4
 80aaaa6:	f859 0d04 	ldr.w	r0, [r9, #-4]!
 80aaaaa:	f001 f991 	bl	80abdd0 <__aeabi_i2f>
 80aaaae:	4639      	mov	r1, r7
 80aaab0:	f001 f9e2 	bl	80abe78 <__aeabi_fmul>
 80aaab4:	4603      	mov	r3, r0
 80aaab6:	4631      	mov	r1, r6
 80aaab8:	4638      	mov	r0, r7
 80aaaba:	f845 3d04 	str.w	r3, [r5, #-4]!
 80aaabe:	f001 f9db 	bl	80abe78 <__aeabi_fmul>
 80aaac2:	ab0c      	add	r3, sp, #48	; 0x30
 80aaac4:	4599      	cmp	r9, r3
 80aaac6:	4607      	mov	r7, r0
 80aaac8:	d1ed      	bne.n	80aaaa6 <__kernel_rem_pio2f+0x48e>
 80aaaca:	2700      	movs	r7, #0
 80aaacc:	f04f 0900 	mov.w	r9, #0
 80aaad0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80aaad4:	f1a8 0804 	sub.w	r8, r8, #4
 80aaad8:	9400      	str	r4, [sp, #0]
 80aaada:	f1ba 0f00 	cmp.w	sl, #0
 80aaade:	bfb8      	it	lt
 80aaae0:	464d      	movlt	r5, r9
 80aaae2:	db15      	blt.n	80aab10 <__kernel_rem_pio2f+0x4f8>
 80aaae4:	46c3      	mov	fp, r8
 80aaae6:	464d      	mov	r5, r9
 80aaae8:	2600      	movs	r6, #0
 80aaaea:	4c82      	ldr	r4, [pc, #520]	; (80aacf4 <__kernel_rem_pio2f+0x6dc>)
 80aaaec:	4882      	ldr	r0, [pc, #520]	; (80aacf8 <__kernel_rem_pio2f+0x6e0>)
 80aaaee:	e003      	b.n	80aaaf8 <__kernel_rem_pio2f+0x4e0>
 80aaaf0:	42b7      	cmp	r7, r6
 80aaaf2:	db0d      	blt.n	80aab10 <__kernel_rem_pio2f+0x4f8>
 80aaaf4:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80aaaf8:	f85b 1f04 	ldr.w	r1, [fp, #4]!
 80aaafc:	f001 f9bc 	bl	80abe78 <__aeabi_fmul>
 80aab00:	4601      	mov	r1, r0
 80aab02:	4628      	mov	r0, r5
 80aab04:	f001 f8b0 	bl	80abc68 <__addsf3>
 80aab08:	3601      	adds	r6, #1
 80aab0a:	45b2      	cmp	sl, r6
 80aab0c:	4605      	mov	r5, r0
 80aab0e:	daef      	bge.n	80aaaf0 <__kernel_rem_pio2f+0x4d8>
 80aab10:	9a00      	ldr	r2, [sp, #0]
 80aab12:	ab5c      	add	r3, sp, #368	; 0x170
 80aab14:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80aab18:	42ba      	cmp	r2, r7
 80aab1a:	f843 5ca0 	str.w	r5, [r3, #-160]
 80aab1e:	f1a8 0804 	sub.w	r8, r8, #4
 80aab22:	f107 0301 	add.w	r3, r7, #1
 80aab26:	d001      	beq.n	80aab2c <__kernel_rem_pio2f+0x514>
 80aab28:	461f      	mov	r7, r3
 80aab2a:	e7d6      	b.n	80aaada <__kernel_rem_pio2f+0x4c2>
 80aab2c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80aab2e:	9c00      	ldr	r4, [sp, #0]
 80aab30:	2a02      	cmp	r2, #2
 80aab32:	dc1a      	bgt.n	80aab6a <__kernel_rem_pio2f+0x552>
 80aab34:	2a00      	cmp	r2, #0
 80aab36:	f300 8089 	bgt.w	80aac4c <__kernel_rem_pio2f+0x634>
 80aab3a:	d110      	bne.n	80aab5e <__kernel_rem_pio2f+0x546>
 80aab3c:	9b05      	ldr	r3, [sp, #20]
 80aab3e:	ad34      	add	r5, sp, #208	; 0xd0
 80aab40:	442b      	add	r3, r5
 80aab42:	2000      	movs	r0, #0
 80aab44:	461c      	mov	r4, r3
 80aab46:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80aab4a:	f001 f88d 	bl	80abc68 <__addsf3>
 80aab4e:	42a5      	cmp	r5, r4
 80aab50:	d1f9      	bne.n	80aab46 <__kernel_rem_pio2f+0x52e>
 80aab52:	9b01      	ldr	r3, [sp, #4]
 80aab54:	b10b      	cbz	r3, 80aab5a <__kernel_rem_pio2f+0x542>
 80aab56:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80aab5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80aab5c:	6018      	str	r0, [r3, #0]
 80aab5e:	9b02      	ldr	r3, [sp, #8]
 80aab60:	f003 0007 	and.w	r0, r3, #7
 80aab64:	b05d      	add	sp, #372	; 0x174
 80aab66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aab6a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80aab6c:	2b03      	cmp	r3, #3
 80aab6e:	d1f6      	bne.n	80aab5e <__kernel_rem_pio2f+0x546>
 80aab70:	2c00      	cmp	r4, #0
 80aab72:	f000 80bb 	beq.w	80aacec <__kernel_rem_pio2f+0x6d4>
 80aab76:	9a04      	ldr	r2, [sp, #16]
 80aab78:	ab5c      	add	r3, sp, #368	; 0x170
 80aab7a:	4413      	add	r3, r2
 80aab7c:	ad34      	add	r5, sp, #208	; 0xd0
 80aab7e:	f853 7ca0 	ldr.w	r7, [r3, #-160]
 80aab82:	18ae      	adds	r6, r5, r2
 80aab84:	f856 8c04 	ldr.w	r8, [r6, #-4]
 80aab88:	4638      	mov	r0, r7
 80aab8a:	4641      	mov	r1, r8
 80aab8c:	f001 f86c 	bl	80abc68 <__addsf3>
 80aab90:	46b9      	mov	r9, r7
 80aab92:	4607      	mov	r7, r0
 80aab94:	4640      	mov	r0, r8
 80aab96:	4639      	mov	r1, r7
 80aab98:	f001 f864 	bl	80abc64 <__aeabi_fsub>
 80aab9c:	4649      	mov	r1, r9
 80aab9e:	f001 f863 	bl	80abc68 <__addsf3>
 80aaba2:	6030      	str	r0, [r6, #0]
 80aaba4:	f846 7d04 	str.w	r7, [r6, #-4]!
 80aaba8:	42b5      	cmp	r5, r6
 80aabaa:	d1eb      	bne.n	80aab84 <__kernel_rem_pio2f+0x56c>
 80aabac:	2c01      	cmp	r4, #1
 80aabae:	f340 809d 	ble.w	80aacec <__kernel_rem_pio2f+0x6d4>
 80aabb2:	9b04      	ldr	r3, [sp, #16]
 80aabb4:	aa5c      	add	r2, sp, #368	; 0x170
 80aabb6:	18ee      	adds	r6, r5, r3
 80aabb8:	4637      	mov	r7, r6
 80aabba:	18d3      	adds	r3, r2, r3
 80aabbc:	f853 4ca0 	ldr.w	r4, [r3, #-160]
 80aabc0:	f10d 08d4 	add.w	r8, sp, #212	; 0xd4
 80aabc4:	f857 9c04 	ldr.w	r9, [r7, #-4]
 80aabc8:	4620      	mov	r0, r4
 80aabca:	4649      	mov	r1, r9
 80aabcc:	f001 f84c 	bl	80abc68 <__addsf3>
 80aabd0:	46a2      	mov	sl, r4
 80aabd2:	4604      	mov	r4, r0
 80aabd4:	4648      	mov	r0, r9
 80aabd6:	4621      	mov	r1, r4
 80aabd8:	f001 f844 	bl	80abc64 <__aeabi_fsub>
 80aabdc:	4651      	mov	r1, sl
 80aabde:	f001 f843 	bl	80abc68 <__addsf3>
 80aabe2:	6038      	str	r0, [r7, #0]
 80aabe4:	f847 4d04 	str.w	r4, [r7, #-4]!
 80aabe8:	45b8      	cmp	r8, r7
 80aabea:	d1eb      	bne.n	80aabc4 <__kernel_rem_pio2f+0x5ac>
 80aabec:	2000      	movs	r0, #0
 80aabee:	3604      	adds	r6, #4
 80aabf0:	3508      	adds	r5, #8
 80aabf2:	f856 1d04 	ldr.w	r1, [r6, #-4]!
 80aabf6:	f001 f837 	bl	80abc68 <__addsf3>
 80aabfa:	42b5      	cmp	r5, r6
 80aabfc:	d1f9      	bne.n	80aabf2 <__kernel_rem_pio2f+0x5da>
 80aabfe:	9b01      	ldr	r3, [sp, #4]
 80aac00:	2b00      	cmp	r3, #0
 80aac02:	d054      	beq.n	80aacae <__kernel_rem_pio2f+0x696>
 80aac04:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 80aac08:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80aac0c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80aac10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80aac14:	9909      	ldr	r1, [sp, #36]	; 0x24
 80aac16:	604b      	str	r3, [r1, #4]
 80aac18:	9b02      	ldr	r3, [sp, #8]
 80aac1a:	6088      	str	r0, [r1, #8]
 80aac1c:	f003 0007 	and.w	r0, r3, #7
 80aac20:	600a      	str	r2, [r1, #0]
 80aac22:	b05d      	add	sp, #372	; 0x174
 80aac24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aac28:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 80aac2c:	ab0c      	add	r3, sp, #48	; 0x30
 80aac2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80aac32:	a80c      	add	r0, sp, #48	; 0x30
 80aac34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80aac38:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 80aac3c:	e68e      	b.n	80aa95c <__kernel_rem_pio2f+0x344>
 80aac3e:	2308      	movs	r3, #8
 80aac40:	930a      	str	r3, [sp, #40]	; 0x28
 80aac42:	2300      	movs	r3, #0
 80aac44:	9305      	str	r3, [sp, #20]
 80aac46:	e502      	b.n	80aa64e <__kernel_rem_pio2f+0x36>
 80aac48:	2200      	movs	r2, #0
 80aac4a:	e675      	b.n	80aa938 <__kernel_rem_pio2f+0x320>
 80aac4c:	2000      	movs	r0, #0
 80aac4e:	ae34      	add	r6, sp, #208	; 0xd0
 80aac50:	eb06 0583 	add.w	r5, r6, r3, lsl #2
 80aac54:	f855 1d04 	ldr.w	r1, [r5, #-4]!
 80aac58:	f001 f806 	bl	80abc68 <__addsf3>
 80aac5c:	42ae      	cmp	r6, r5
 80aac5e:	d1f9      	bne.n	80aac54 <__kernel_rem_pio2f+0x63c>
 80aac60:	9b01      	ldr	r3, [sp, #4]
 80aac62:	bb3b      	cbnz	r3, 80aacb4 <__kernel_rem_pio2f+0x69c>
 80aac64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80aac66:	4601      	mov	r1, r0
 80aac68:	6018      	str	r0, [r3, #0]
 80aac6a:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80aac6c:	f000 fffa 	bl	80abc64 <__aeabi_fsub>
 80aac70:	2c00      	cmp	r4, #0
 80aac72:	dd0c      	ble.n	80aac8e <__kernel_rem_pio2f+0x676>
 80aac74:	2501      	movs	r5, #1
 80aac76:	ae34      	add	r6, sp, #208	; 0xd0
 80aac78:	f856 1f04 	ldr.w	r1, [r6, #4]!
 80aac7c:	3501      	adds	r5, #1
 80aac7e:	f000 fff3 	bl	80abc68 <__addsf3>
 80aac82:	42ac      	cmp	r4, r5
 80aac84:	daf8      	bge.n	80aac78 <__kernel_rem_pio2f+0x660>
 80aac86:	9b01      	ldr	r3, [sp, #4]
 80aac88:	b10b      	cbz	r3, 80aac8e <__kernel_rem_pio2f+0x676>
 80aac8a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80aac8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80aac90:	6058      	str	r0, [r3, #4]
 80aac92:	9b02      	ldr	r3, [sp, #8]
 80aac94:	f003 0007 	and.w	r0, r3, #7
 80aac98:	b05d      	add	sp, #372	; 0x174
 80aac9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aac9e:	4620      	mov	r0, r4
 80aaca0:	f001 fac6 	bl	80ac230 <__aeabi_f2iz>
 80aaca4:	ab0c      	add	r3, sp, #48	; 0x30
 80aaca6:	4654      	mov	r4, sl
 80aaca8:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 80aacac:	e6e4      	b.n	80aaa78 <__kernel_rem_pio2f+0x460>
 80aacae:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80aacb0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80aacb2:	e7af      	b.n	80aac14 <__kernel_rem_pio2f+0x5fc>
 80aacb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80aacb6:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80aacba:	4601      	mov	r1, r0
 80aacbc:	6013      	str	r3, [r2, #0]
 80aacbe:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80aacc0:	f000 ffd0 	bl	80abc64 <__aeabi_fsub>
 80aacc4:	2c00      	cmp	r4, #0
 80aacc6:	dcd5      	bgt.n	80aac74 <__kernel_rem_pio2f+0x65c>
 80aacc8:	e7df      	b.n	80aac8a <__kernel_rem_pio2f+0x672>
 80aacca:	9b06      	ldr	r3, [sp, #24]
 80aaccc:	009b      	lsls	r3, r3, #2
 80aacce:	9300      	str	r3, [sp, #0]
 80aacd0:	e514      	b.n	80aa6fc <__kernel_rem_pio2f+0xe4>
 80aacd2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80aacd4:	2b02      	cmp	r3, #2
 80aacd6:	dc05      	bgt.n	80aace4 <__kernel_rem_pio2f+0x6cc>
 80aacd8:	2b00      	cmp	r3, #0
 80aacda:	dc09      	bgt.n	80aacf0 <__kernel_rem_pio2f+0x6d8>
 80aacdc:	f47f af3f 	bne.w	80aab5e <__kernel_rem_pio2f+0x546>
 80aace0:	2000      	movs	r0, #0
 80aace2:	e736      	b.n	80aab52 <__kernel_rem_pio2f+0x53a>
 80aace4:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80aace6:	2b03      	cmp	r3, #3
 80aace8:	f47f af39 	bne.w	80aab5e <__kernel_rem_pio2f+0x546>
 80aacec:	2000      	movs	r0, #0
 80aacee:	e786      	b.n	80aabfe <__kernel_rem_pio2f+0x5e6>
 80aacf0:	2000      	movs	r0, #0
 80aacf2:	e7b5      	b.n	80aac60 <__kernel_rem_pio2f+0x648>
 80aacf4:	080adcc0 	.word	0x080adcc0
 80aacf8:	3fc90000 	.word	0x3fc90000

080aacfc <__kernel_sinf>:
 80aacfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80aad00:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80aad04:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80aad08:	4604      	mov	r4, r0
 80aad0a:	460e      	mov	r6, r1
 80aad0c:	4690      	mov	r8, r2
 80aad0e:	da03      	bge.n	80aad18 <__kernel_sinf+0x1c>
 80aad10:	f001 fa8e 	bl	80ac230 <__aeabi_f2iz>
 80aad14:	2800      	cmp	r0, #0
 80aad16:	d058      	beq.n	80aadca <__kernel_sinf+0xce>
 80aad18:	4621      	mov	r1, r4
 80aad1a:	4620      	mov	r0, r4
 80aad1c:	f001 f8ac 	bl	80abe78 <__aeabi_fmul>
 80aad20:	4605      	mov	r5, r0
 80aad22:	4620      	mov	r0, r4
 80aad24:	4629      	mov	r1, r5
 80aad26:	f001 f8a7 	bl	80abe78 <__aeabi_fmul>
 80aad2a:	4929      	ldr	r1, [pc, #164]	; (80aadd0 <__kernel_sinf+0xd4>)
 80aad2c:	4681      	mov	r9, r0
 80aad2e:	4628      	mov	r0, r5
 80aad30:	f001 f8a2 	bl	80abe78 <__aeabi_fmul>
 80aad34:	4927      	ldr	r1, [pc, #156]	; (80aadd4 <__kernel_sinf+0xd8>)
 80aad36:	f000 ff95 	bl	80abc64 <__aeabi_fsub>
 80aad3a:	4629      	mov	r1, r5
 80aad3c:	f001 f89c 	bl	80abe78 <__aeabi_fmul>
 80aad40:	4925      	ldr	r1, [pc, #148]	; (80aadd8 <__kernel_sinf+0xdc>)
 80aad42:	f000 ff91 	bl	80abc68 <__addsf3>
 80aad46:	4629      	mov	r1, r5
 80aad48:	f001 f896 	bl	80abe78 <__aeabi_fmul>
 80aad4c:	4923      	ldr	r1, [pc, #140]	; (80aaddc <__kernel_sinf+0xe0>)
 80aad4e:	f000 ff89 	bl	80abc64 <__aeabi_fsub>
 80aad52:	4629      	mov	r1, r5
 80aad54:	f001 f890 	bl	80abe78 <__aeabi_fmul>
 80aad58:	4921      	ldr	r1, [pc, #132]	; (80aade0 <__kernel_sinf+0xe4>)
 80aad5a:	f000 ff85 	bl	80abc68 <__addsf3>
 80aad5e:	4607      	mov	r7, r0
 80aad60:	f1b8 0f00 	cmp.w	r8, #0
 80aad64:	d022      	beq.n	80aadac <__kernel_sinf+0xb0>
 80aad66:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80aad6a:	4630      	mov	r0, r6
 80aad6c:	f001 f884 	bl	80abe78 <__aeabi_fmul>
 80aad70:	4639      	mov	r1, r7
 80aad72:	4607      	mov	r7, r0
 80aad74:	4648      	mov	r0, r9
 80aad76:	f001 f87f 	bl	80abe78 <__aeabi_fmul>
 80aad7a:	4601      	mov	r1, r0
 80aad7c:	4638      	mov	r0, r7
 80aad7e:	f000 ff71 	bl	80abc64 <__aeabi_fsub>
 80aad82:	4629      	mov	r1, r5
 80aad84:	f001 f878 	bl	80abe78 <__aeabi_fmul>
 80aad88:	4631      	mov	r1, r6
 80aad8a:	f000 ff6b 	bl	80abc64 <__aeabi_fsub>
 80aad8e:	4915      	ldr	r1, [pc, #84]	; (80aade4 <__kernel_sinf+0xe8>)
 80aad90:	4605      	mov	r5, r0
 80aad92:	4648      	mov	r0, r9
 80aad94:	f001 f870 	bl	80abe78 <__aeabi_fmul>
 80aad98:	4601      	mov	r1, r0
 80aad9a:	4628      	mov	r0, r5
 80aad9c:	f000 ff64 	bl	80abc68 <__addsf3>
 80aada0:	4601      	mov	r1, r0
 80aada2:	4620      	mov	r0, r4
 80aada4:	f000 ff5e 	bl	80abc64 <__aeabi_fsub>
 80aada8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80aadac:	4601      	mov	r1, r0
 80aadae:	4628      	mov	r0, r5
 80aadb0:	f001 f862 	bl	80abe78 <__aeabi_fmul>
 80aadb4:	490b      	ldr	r1, [pc, #44]	; (80aade4 <__kernel_sinf+0xe8>)
 80aadb6:	f000 ff55 	bl	80abc64 <__aeabi_fsub>
 80aadba:	4649      	mov	r1, r9
 80aadbc:	f001 f85c 	bl	80abe78 <__aeabi_fmul>
 80aadc0:	4621      	mov	r1, r4
 80aadc2:	f000 ff51 	bl	80abc68 <__addsf3>
 80aadc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80aadca:	4620      	mov	r0, r4
 80aadcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80aadd0:	2f2ec9d3 	.word	0x2f2ec9d3
 80aadd4:	32d72f34 	.word	0x32d72f34
 80aadd8:	3638ef1b 	.word	0x3638ef1b
 80aaddc:	39500d01 	.word	0x39500d01
 80aade0:	3c088889 	.word	0x3c088889
 80aade4:	3e2aaaab 	.word	0x3e2aaaab

080aade8 <fabs>:
 80aade8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80aadec:	4770      	bx	lr
 80aadee:	bf00      	nop

080aadf0 <finite>:
 80aadf0:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80aadf4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80aadf8:	0fc0      	lsrs	r0, r0, #31
 80aadfa:	4770      	bx	lr
 80aadfc:	0000      	movs	r0, r0
	...

080aae00 <floor>:
 80aae00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80aae02:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80aae06:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
 80aae0a:	2d13      	cmp	r5, #19
 80aae0c:	460b      	mov	r3, r1
 80aae0e:	460c      	mov	r4, r1
 80aae10:	4602      	mov	r2, r0
 80aae12:	4606      	mov	r6, r0
 80aae14:	dc20      	bgt.n	80aae58 <floor+0x58>
 80aae16:	2d00      	cmp	r5, #0
 80aae18:	db40      	blt.n	80aae9c <floor+0x9c>
 80aae1a:	4f35      	ldr	r7, [pc, #212]	; (80aaef0 <floor+0xf0>)
 80aae1c:	412f      	asrs	r7, r5
 80aae1e:	ea01 0c07 	and.w	ip, r1, r7
 80aae22:	ea5c 0c00 	orrs.w	ip, ip, r0
 80aae26:	d014      	beq.n	80aae52 <floor+0x52>
 80aae28:	a32f      	add	r3, pc, #188	; (adr r3, 80aaee8 <floor+0xe8>)
 80aae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aae2e:	f000 fa17 	bl	80ab260 <__adddf3>
 80aae32:	2200      	movs	r2, #0
 80aae34:	2300      	movs	r3, #0
 80aae36:	f000 fe59 	bl	80abaec <__aeabi_dcmpgt>
 80aae3a:	b140      	cbz	r0, 80aae4e <floor+0x4e>
 80aae3c:	2c00      	cmp	r4, #0
 80aae3e:	da03      	bge.n	80aae48 <floor+0x48>
 80aae40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80aae44:	412b      	asrs	r3, r5
 80aae46:	441c      	add	r4, r3
 80aae48:	2600      	movs	r6, #0
 80aae4a:	ea24 0407 	bic.w	r4, r4, r7
 80aae4e:	4632      	mov	r2, r6
 80aae50:	4623      	mov	r3, r4
 80aae52:	4610      	mov	r0, r2
 80aae54:	4619      	mov	r1, r3
 80aae56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80aae58:	2d33      	cmp	r5, #51	; 0x33
 80aae5a:	dd07      	ble.n	80aae6c <floor+0x6c>
 80aae5c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80aae60:	d1f7      	bne.n	80aae52 <floor+0x52>
 80aae62:	f000 f9fd 	bl	80ab260 <__adddf3>
 80aae66:	4602      	mov	r2, r0
 80aae68:	460b      	mov	r3, r1
 80aae6a:	e7f2      	b.n	80aae52 <floor+0x52>
 80aae6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80aae70:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80aae74:	fa2c f707 	lsr.w	r7, ip, r7
 80aae78:	4207      	tst	r7, r0
 80aae7a:	d0ea      	beq.n	80aae52 <floor+0x52>
 80aae7c:	a31a      	add	r3, pc, #104	; (adr r3, 80aaee8 <floor+0xe8>)
 80aae7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aae82:	f000 f9ed 	bl	80ab260 <__adddf3>
 80aae86:	2200      	movs	r2, #0
 80aae88:	2300      	movs	r3, #0
 80aae8a:	f000 fe2f 	bl	80abaec <__aeabi_dcmpgt>
 80aae8e:	2800      	cmp	r0, #0
 80aae90:	d0dd      	beq.n	80aae4e <floor+0x4e>
 80aae92:	2c00      	cmp	r4, #0
 80aae94:	db1b      	blt.n	80aaece <floor+0xce>
 80aae96:	ea26 0607 	bic.w	r6, r6, r7
 80aae9a:	e7d8      	b.n	80aae4e <floor+0x4e>
 80aae9c:	a312      	add	r3, pc, #72	; (adr r3, 80aaee8 <floor+0xe8>)
 80aae9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aaea2:	f000 f9dd 	bl	80ab260 <__adddf3>
 80aaea6:	2200      	movs	r2, #0
 80aaea8:	2300      	movs	r3, #0
 80aaeaa:	f000 fe1f 	bl	80abaec <__aeabi_dcmpgt>
 80aaeae:	2800      	cmp	r0, #0
 80aaeb0:	d0cd      	beq.n	80aae4e <floor+0x4e>
 80aaeb2:	2c00      	cmp	r4, #0
 80aaeb4:	db02      	blt.n	80aaebc <floor+0xbc>
 80aaeb6:	2600      	movs	r6, #0
 80aaeb8:	4634      	mov	r4, r6
 80aaeba:	e7c8      	b.n	80aae4e <floor+0x4e>
 80aaebc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80aaec0:	4a0c      	ldr	r2, [pc, #48]	; (80aaef4 <floor+0xf4>)
 80aaec2:	431e      	orrs	r6, r3
 80aaec4:	2e00      	cmp	r6, #0
 80aaec6:	bf18      	it	ne
 80aaec8:	4614      	movne	r4, r2
 80aaeca:	2600      	movs	r6, #0
 80aaecc:	e7bf      	b.n	80aae4e <floor+0x4e>
 80aaece:	2d14      	cmp	r5, #20
 80aaed0:	d008      	beq.n	80aaee4 <floor+0xe4>
 80aaed2:	2201      	movs	r2, #1
 80aaed4:	f1c5 0334 	rsb	r3, r5, #52	; 0x34
 80aaed8:	fa02 f303 	lsl.w	r3, r2, r3
 80aaedc:	199e      	adds	r6, r3, r6
 80aaede:	bf28      	it	cs
 80aaee0:	18a4      	addcs	r4, r4, r2
 80aaee2:	e7d8      	b.n	80aae96 <floor+0x96>
 80aaee4:	3401      	adds	r4, #1
 80aaee6:	e7d6      	b.n	80aae96 <floor+0x96>
 80aaee8:	8800759c 	.word	0x8800759c
 80aaeec:	7e37e43c 	.word	0x7e37e43c
 80aaef0:	000fffff 	.word	0x000fffff
 80aaef4:	bff00000 	.word	0xbff00000

080aaef8 <matherr>:
 80aaef8:	2000      	movs	r0, #0
 80aaefa:	4770      	bx	lr

080aaefc <nan>:
 80aaefc:	2000      	movs	r0, #0
 80aaefe:	4901      	ldr	r1, [pc, #4]	; (80aaf04 <nan+0x8>)
 80aaf00:	4770      	bx	lr
 80aaf02:	bf00      	nop
 80aaf04:	7ff80000 	.word	0x7ff80000

080aaf08 <rint>:
 80aaf08:	b5f0      	push	{r4, r5, r6, r7, lr}
 80aaf0a:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80aaf0e:	f2ac 36ff 	subw	r6, ip, #1023	; 0x3ff
 80aaf12:	2e13      	cmp	r6, #19
 80aaf14:	4602      	mov	r2, r0
 80aaf16:	460b      	mov	r3, r1
 80aaf18:	460d      	mov	r5, r1
 80aaf1a:	4607      	mov	r7, r0
 80aaf1c:	b083      	sub	sp, #12
 80aaf1e:	ea4f 74d1 	mov.w	r4, r1, lsr #31
 80aaf22:	dc2f      	bgt.n	80aaf84 <rint+0x7c>
 80aaf24:	2e00      	cmp	r6, #0
 80aaf26:	db4c      	blt.n	80aafc2 <rint+0xba>
 80aaf28:	493d      	ldr	r1, [pc, #244]	; (80ab020 <rint+0x118>)
 80aaf2a:	4131      	asrs	r1, r6
 80aaf2c:	ea03 0001 	and.w	r0, r3, r1
 80aaf30:	4310      	orrs	r0, r2
 80aaf32:	d02c      	beq.n	80aaf8e <rint+0x86>
 80aaf34:	ea03 0351 	and.w	r3, r3, r1, lsr #1
 80aaf38:	ea52 0703 	orrs.w	r7, r2, r3
 80aaf3c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80aaf40:	d00b      	beq.n	80aaf5a <rint+0x52>
 80aaf42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80aaf46:	2e13      	cmp	r6, #19
 80aaf48:	bf0c      	ite	eq
 80aaf4a:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80aaf4e:	2700      	movne	r7, #0
 80aaf50:	ea25 0101 	bic.w	r1, r5, r1
 80aaf54:	fa43 f506 	asr.w	r5, r3, r6
 80aaf58:	430d      	orrs	r5, r1
 80aaf5a:	4932      	ldr	r1, [pc, #200]	; (80ab024 <rint+0x11c>)
 80aaf5c:	462b      	mov	r3, r5
 80aaf5e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80aaf62:	e9d4 4500 	ldrd	r4, r5, [r4]
 80aaf66:	463a      	mov	r2, r7
 80aaf68:	4620      	mov	r0, r4
 80aaf6a:	4629      	mov	r1, r5
 80aaf6c:	f000 f978 	bl	80ab260 <__adddf3>
 80aaf70:	e9cd 0100 	strd	r0, r1, [sp]
 80aaf74:	e9dd 0100 	ldrd	r0, r1, [sp]
 80aaf78:	4622      	mov	r2, r4
 80aaf7a:	462b      	mov	r3, r5
 80aaf7c:	f000 f96e 	bl	80ab25c <__aeabi_dsub>
 80aaf80:	b003      	add	sp, #12
 80aaf82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80aaf84:	2e33      	cmp	r6, #51	; 0x33
 80aaf86:	dd06      	ble.n	80aaf96 <rint+0x8e>
 80aaf88:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80aaf8c:	d045      	beq.n	80ab01a <rint+0x112>
 80aaf8e:	4610      	mov	r0, r2
 80aaf90:	4619      	mov	r1, r3
 80aaf92:	b003      	add	sp, #12
 80aaf94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80aaf96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80aaf9a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80aaf9e:	fa21 f10c 	lsr.w	r1, r1, ip
 80aafa2:	4208      	tst	r0, r1
 80aafa4:	d0f3      	beq.n	80aaf8e <rint+0x86>
 80aafa6:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80aafaa:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80aafae:	d0d4      	beq.n	80aaf5a <rint+0x52>
 80aafb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80aafb4:	ea20 0703 	bic.w	r7, r0, r3
 80aafb8:	fa42 fc0c 	asr.w	ip, r2, ip
 80aafbc:	ea47 070c 	orr.w	r7, r7, ip
 80aafc0:	e7cb      	b.n	80aaf5a <rint+0x52>
 80aafc2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80aafc6:	4301      	orrs	r1, r0
 80aafc8:	4619      	mov	r1, r3
 80aafca:	d0e2      	beq.n	80aaf92 <rint+0x8a>
 80aafcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80aafd0:	431f      	orrs	r7, r3
 80aafd2:	427b      	negs	r3, r7
 80aafd4:	433b      	orrs	r3, r7
 80aafd6:	0c6d      	lsrs	r5, r5, #17
 80aafd8:	0b1b      	lsrs	r3, r3, #12
 80aafda:	046d      	lsls	r5, r5, #17
 80aafdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80aafe0:	ea43 0105 	orr.w	r1, r3, r5
 80aafe4:	460b      	mov	r3, r1
 80aafe6:	490f      	ldr	r1, [pc, #60]	; (80ab024 <rint+0x11c>)
 80aafe8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80aafec:	e9d1 6700 	ldrd	r6, r7, [r1]
 80aaff0:	4630      	mov	r0, r6
 80aaff2:	4639      	mov	r1, r7
 80aaff4:	f000 f934 	bl	80ab260 <__adddf3>
 80aaff8:	e9cd 0100 	strd	r0, r1, [sp]
 80aaffc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80ab000:	4632      	mov	r2, r6
 80ab002:	463b      	mov	r3, r7
 80ab004:	f000 f92a 	bl	80ab25c <__aeabi_dsub>
 80ab008:	4602      	mov	r2, r0
 80ab00a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80ab00e:	ea41 73c4 	orr.w	r3, r1, r4, lsl #31
 80ab012:	4610      	mov	r0, r2
 80ab014:	4619      	mov	r1, r3
 80ab016:	b003      	add	sp, #12
 80ab018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80ab01a:	f000 f921 	bl	80ab260 <__adddf3>
 80ab01e:	e7b8      	b.n	80aaf92 <rint+0x8a>
 80ab020:	000fffff 	.word	0x000fffff
 80ab024:	080adcf8 	.word	0x080adcf8

080ab028 <scalbn>:
 80ab028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80ab02a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80ab02e:	4604      	mov	r4, r0
 80ab030:	460d      	mov	r5, r1
 80ab032:	460e      	mov	r6, r1
 80ab034:	4617      	mov	r7, r2
 80ab036:	bb73      	cbnz	r3, 80ab096 <scalbn+0x6e>
 80ab038:	4603      	mov	r3, r0
 80ab03a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80ab03e:	4333      	orrs	r3, r6
 80ab040:	d028      	beq.n	80ab094 <scalbn+0x6c>
 80ab042:	4b31      	ldr	r3, [pc, #196]	; (80ab108 <scalbn+0xe0>)
 80ab044:	2200      	movs	r2, #0
 80ab046:	f000 fac1 	bl	80ab5cc <__aeabi_dmul>
 80ab04a:	4b30      	ldr	r3, [pc, #192]	; (80ab10c <scalbn+0xe4>)
 80ab04c:	4604      	mov	r4, r0
 80ab04e:	429f      	cmp	r7, r3
 80ab050:	460d      	mov	r5, r1
 80ab052:	db1a      	blt.n	80ab08a <scalbn+0x62>
 80ab054:	460e      	mov	r6, r1
 80ab056:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80ab05a:	3b36      	subs	r3, #54	; 0x36
 80ab05c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80ab060:	443b      	add	r3, r7
 80ab062:	4293      	cmp	r3, r2
 80ab064:	dc20      	bgt.n	80ab0a8 <scalbn+0x80>
 80ab066:	2b00      	cmp	r3, #0
 80ab068:	dc3c      	bgt.n	80ab0e4 <scalbn+0xbc>
 80ab06a:	f113 0f35 	cmn.w	r3, #53	; 0x35
 80ab06e:	da2c      	bge.n	80ab0ca <scalbn+0xa2>
 80ab070:	f24c 3350 	movw	r3, #50000	; 0xc350
 80ab074:	429f      	cmp	r7, r3
 80ab076:	dc17      	bgt.n	80ab0a8 <scalbn+0x80>
 80ab078:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80ab07c:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
 80ab080:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80ab084:	4822      	ldr	r0, [pc, #136]	; (80ab110 <scalbn+0xe8>)
 80ab086:	f041 011f 	orr.w	r1, r1, #31
 80ab08a:	a31b      	add	r3, pc, #108	; (adr r3, 80ab0f8 <scalbn+0xd0>)
 80ab08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab090:	f000 fa9c 	bl	80ab5cc <__aeabi_dmul>
 80ab094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab096:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80ab09a:	4293      	cmp	r3, r2
 80ab09c:	d1de      	bne.n	80ab05c <scalbn+0x34>
 80ab09e:	4602      	mov	r2, r0
 80ab0a0:	460b      	mov	r3, r1
 80ab0a2:	f000 f8dd 	bl	80ab260 <__adddf3>
 80ab0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab0a8:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80ab0ac:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80ab0b0:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80ab0b4:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80ab0b8:	a311      	add	r3, pc, #68	; (adr r3, 80ab100 <scalbn+0xd8>)
 80ab0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab0be:	4815      	ldr	r0, [pc, #84]	; (80ab114 <scalbn+0xec>)
 80ab0c0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80ab0c4:	f000 fa82 	bl	80ab5cc <__aeabi_dmul>
 80ab0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab0ca:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 80ab0ce:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 80ab0d2:	3336      	adds	r3, #54	; 0x36
 80ab0d4:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
 80ab0d8:	4620      	mov	r0, r4
 80ab0da:	2200      	movs	r2, #0
 80ab0dc:	4b0e      	ldr	r3, [pc, #56]	; (80ab118 <scalbn+0xf0>)
 80ab0de:	f000 fa75 	bl	80ab5cc <__aeabi_dmul>
 80ab0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab0e4:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 80ab0e8:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 80ab0ec:	4620      	mov	r0, r4
 80ab0ee:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
 80ab0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab0f4:	f3af 8000 	nop.w
 80ab0f8:	c2f8f359 	.word	0xc2f8f359
 80ab0fc:	01a56e1f 	.word	0x01a56e1f
 80ab100:	8800759c 	.word	0x8800759c
 80ab104:	7e37e43c 	.word	0x7e37e43c
 80ab108:	43500000 	.word	0x43500000
 80ab10c:	ffff3cb0 	.word	0xffff3cb0
 80ab110:	c2f8f359 	.word	0xc2f8f359
 80ab114:	8800759c 	.word	0x8800759c
 80ab118:	3c900000 	.word	0x3c900000

080ab11c <fabsf>:
 80ab11c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80ab120:	4770      	bx	lr
 80ab122:	bf00      	nop

080ab124 <floorf>:
 80ab124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80ab126:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80ab12a:	3d7f      	subs	r5, #127	; 0x7f
 80ab12c:	2d16      	cmp	r5, #22
 80ab12e:	4604      	mov	r4, r0
 80ab130:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 80ab134:	dc17      	bgt.n	80ab166 <floorf+0x42>
 80ab136:	2d00      	cmp	r5, #0
 80ab138:	4606      	mov	r6, r0
 80ab13a:	db1b      	blt.n	80ab174 <floorf+0x50>
 80ab13c:	4f16      	ldr	r7, [pc, #88]	; (80ab198 <floorf+0x74>)
 80ab13e:	412f      	asrs	r7, r5
 80ab140:	4238      	tst	r0, r7
 80ab142:	d01e      	beq.n	80ab182 <floorf+0x5e>
 80ab144:	4915      	ldr	r1, [pc, #84]	; (80ab19c <floorf+0x78>)
 80ab146:	f000 fd8f 	bl	80abc68 <__addsf3>
 80ab14a:	2100      	movs	r1, #0
 80ab14c:	f001 f850 	bl	80ac1f0 <__aeabi_fcmpgt>
 80ab150:	b1b8      	cbz	r0, 80ab182 <floorf+0x5e>
 80ab152:	2c00      	cmp	r4, #0
 80ab154:	da04      	bge.n	80ab160 <floorf+0x3c>
 80ab156:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80ab15a:	fa43 f505 	asr.w	r5, r3, r5
 80ab15e:	442e      	add	r6, r5
 80ab160:	ea26 0007 	bic.w	r0, r6, r7
 80ab164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab166:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80ab16a:	d30a      	bcc.n	80ab182 <floorf+0x5e>
 80ab16c:	4601      	mov	r1, r0
 80ab16e:	f000 fd7b 	bl	80abc68 <__addsf3>
 80ab172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab174:	4909      	ldr	r1, [pc, #36]	; (80ab19c <floorf+0x78>)
 80ab176:	f000 fd77 	bl	80abc68 <__addsf3>
 80ab17a:	2100      	movs	r1, #0
 80ab17c:	f001 f838 	bl	80ac1f0 <__aeabi_fcmpgt>
 80ab180:	b908      	cbnz	r0, 80ab186 <floorf+0x62>
 80ab182:	4620      	mov	r0, r4
 80ab184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab186:	2c00      	cmp	r4, #0
 80ab188:	db01      	blt.n	80ab18e <floorf+0x6a>
 80ab18a:	2000      	movs	r0, #0
 80ab18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab18e:	2f00      	cmp	r7, #0
 80ab190:	d0f7      	beq.n	80ab182 <floorf+0x5e>
 80ab192:	4803      	ldr	r0, [pc, #12]	; (80ab1a0 <floorf+0x7c>)
 80ab194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab196:	bf00      	nop
 80ab198:	007fffff 	.word	0x007fffff
 80ab19c:	7149f2ca 	.word	0x7149f2ca
 80ab1a0:	bf800000 	.word	0xbf800000

080ab1a4 <scalbnf>:
 80ab1a4:	b538      	push	{r3, r4, r5, lr}
 80ab1a6:	f030 4400 	bics.w	r4, r0, #2147483648	; 0x80000000
 80ab1aa:	4603      	mov	r3, r0
 80ab1ac:	d01d      	beq.n	80ab1ea <scalbnf+0x46>
 80ab1ae:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80ab1b2:	d21b      	bcs.n	80ab1ec <scalbnf+0x48>
 80ab1b4:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80ab1b8:	4602      	mov	r2, r0
 80ab1ba:	460d      	mov	r5, r1
 80ab1bc:	d11a      	bne.n	80ab1f4 <scalbnf+0x50>
 80ab1be:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80ab1c2:	f000 fe59 	bl	80abe78 <__aeabi_fmul>
 80ab1c6:	4a20      	ldr	r2, [pc, #128]	; (80ab248 <scalbnf+0xa4>)
 80ab1c8:	4603      	mov	r3, r0
 80ab1ca:	4295      	cmp	r5, r2
 80ab1cc:	db2c      	blt.n	80ab228 <scalbnf+0x84>
 80ab1ce:	f3c0 54c7 	ubfx	r4, r0, #23, #8
 80ab1d2:	4602      	mov	r2, r0
 80ab1d4:	f1a4 0019 	sub.w	r0, r4, #25
 80ab1d8:	1944      	adds	r4, r0, r5
 80ab1da:	2cfe      	cmp	r4, #254	; 0xfe
 80ab1dc:	dd0e      	ble.n	80ab1fc <scalbnf+0x58>
 80ab1de:	4618      	mov	r0, r3
 80ab1e0:	491a      	ldr	r1, [pc, #104]	; (80ab24c <scalbnf+0xa8>)
 80ab1e2:	f361 001e 	bfi	r0, r1, #0, #31
 80ab1e6:	f000 fe47 	bl	80abe78 <__aeabi_fmul>
 80ab1ea:	bd38      	pop	{r3, r4, r5, pc}
 80ab1ec:	4601      	mov	r1, r0
 80ab1ee:	f000 fd3b 	bl	80abc68 <__addsf3>
 80ab1f2:	bd38      	pop	{r3, r4, r5, pc}
 80ab1f4:	0de0      	lsrs	r0, r4, #23
 80ab1f6:	1944      	adds	r4, r0, r5
 80ab1f8:	2cfe      	cmp	r4, #254	; 0xfe
 80ab1fa:	dcf0      	bgt.n	80ab1de <scalbnf+0x3a>
 80ab1fc:	2c00      	cmp	r4, #0
 80ab1fe:	dc0e      	bgt.n	80ab21e <scalbnf+0x7a>
 80ab200:	f114 0f16 	cmn.w	r4, #22
 80ab204:	da14      	bge.n	80ab230 <scalbnf+0x8c>
 80ab206:	f24c 3250 	movw	r2, #50000	; 0xc350
 80ab20a:	4618      	mov	r0, r3
 80ab20c:	4295      	cmp	r5, r2
 80ab20e:	bfcc      	ite	gt
 80ab210:	490e      	ldrgt	r1, [pc, #56]	; (80ab24c <scalbnf+0xa8>)
 80ab212:	490f      	ldrle	r1, [pc, #60]	; (80ab250 <scalbnf+0xac>)
 80ab214:	f361 001e 	bfi	r0, r1, #0, #31
 80ab218:	f000 fe2e 	bl	80abe78 <__aeabi_fmul>
 80ab21c:	bd38      	pop	{r3, r4, r5, pc}
 80ab21e:	f022 40ff 	bic.w	r0, r2, #2139095040	; 0x7f800000
 80ab222:	ea40 50c4 	orr.w	r0, r0, r4, lsl #23
 80ab226:	bd38      	pop	{r3, r4, r5, pc}
 80ab228:	4909      	ldr	r1, [pc, #36]	; (80ab250 <scalbnf+0xac>)
 80ab22a:	f000 fe25 	bl	80abe78 <__aeabi_fmul>
 80ab22e:	bd38      	pop	{r3, r4, r5, pc}
 80ab230:	f104 0019 	add.w	r0, r4, #25
 80ab234:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80ab238:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80ab23c:	ea42 50c0 	orr.w	r0, r2, r0, lsl #23
 80ab240:	f000 fe1a 	bl	80abe78 <__aeabi_fmul>
 80ab244:	bd38      	pop	{r3, r4, r5, pc}
 80ab246:	bf00      	nop
 80ab248:	ffff3cb0 	.word	0xffff3cb0
 80ab24c:	7149f2ca 	.word	0x7149f2ca
 80ab250:	0da24260 	.word	0x0da24260

080ab254 <__aeabi_drsub>:
 80ab254:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80ab258:	e002      	b.n	80ab260 <__adddf3>
 80ab25a:	bf00      	nop

080ab25c <__aeabi_dsub>:
 80ab25c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080ab260 <__adddf3>:
 80ab260:	b530      	push	{r4, r5, lr}
 80ab262:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80ab266:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80ab26a:	ea94 0f05 	teq	r4, r5
 80ab26e:	bf08      	it	eq
 80ab270:	ea90 0f02 	teqeq	r0, r2
 80ab274:	bf1f      	itttt	ne
 80ab276:	ea54 0c00 	orrsne.w	ip, r4, r0
 80ab27a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80ab27e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80ab282:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80ab286:	f000 80e2 	beq.w	80ab44e <__adddf3+0x1ee>
 80ab28a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80ab28e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80ab292:	bfb8      	it	lt
 80ab294:	426d      	neglt	r5, r5
 80ab296:	dd0c      	ble.n	80ab2b2 <__adddf3+0x52>
 80ab298:	442c      	add	r4, r5
 80ab29a:	ea80 0202 	eor.w	r2, r0, r2
 80ab29e:	ea81 0303 	eor.w	r3, r1, r3
 80ab2a2:	ea82 0000 	eor.w	r0, r2, r0
 80ab2a6:	ea83 0101 	eor.w	r1, r3, r1
 80ab2aa:	ea80 0202 	eor.w	r2, r0, r2
 80ab2ae:	ea81 0303 	eor.w	r3, r1, r3
 80ab2b2:	2d36      	cmp	r5, #54	; 0x36
 80ab2b4:	bf88      	it	hi
 80ab2b6:	bd30      	pophi	{r4, r5, pc}
 80ab2b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80ab2bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80ab2c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80ab2c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80ab2c8:	d002      	beq.n	80ab2d0 <__adddf3+0x70>
 80ab2ca:	4240      	negs	r0, r0
 80ab2cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80ab2d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80ab2d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80ab2d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80ab2dc:	d002      	beq.n	80ab2e4 <__adddf3+0x84>
 80ab2de:	4252      	negs	r2, r2
 80ab2e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80ab2e4:	ea94 0f05 	teq	r4, r5
 80ab2e8:	f000 80a7 	beq.w	80ab43a <__adddf3+0x1da>
 80ab2ec:	f1a4 0401 	sub.w	r4, r4, #1
 80ab2f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80ab2f4:	db0d      	blt.n	80ab312 <__adddf3+0xb2>
 80ab2f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80ab2fa:	fa22 f205 	lsr.w	r2, r2, r5
 80ab2fe:	1880      	adds	r0, r0, r2
 80ab300:	f141 0100 	adc.w	r1, r1, #0
 80ab304:	fa03 f20e 	lsl.w	r2, r3, lr
 80ab308:	1880      	adds	r0, r0, r2
 80ab30a:	fa43 f305 	asr.w	r3, r3, r5
 80ab30e:	4159      	adcs	r1, r3
 80ab310:	e00e      	b.n	80ab330 <__adddf3+0xd0>
 80ab312:	f1a5 0520 	sub.w	r5, r5, #32
 80ab316:	f10e 0e20 	add.w	lr, lr, #32
 80ab31a:	2a01      	cmp	r2, #1
 80ab31c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80ab320:	bf28      	it	cs
 80ab322:	f04c 0c02 	orrcs.w	ip, ip, #2
 80ab326:	fa43 f305 	asr.w	r3, r3, r5
 80ab32a:	18c0      	adds	r0, r0, r3
 80ab32c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80ab330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80ab334:	d507      	bpl.n	80ab346 <__adddf3+0xe6>
 80ab336:	f04f 0e00 	mov.w	lr, #0
 80ab33a:	f1dc 0c00 	rsbs	ip, ip, #0
 80ab33e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80ab342:	eb6e 0101 	sbc.w	r1, lr, r1
 80ab346:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80ab34a:	d31b      	bcc.n	80ab384 <__adddf3+0x124>
 80ab34c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80ab350:	d30c      	bcc.n	80ab36c <__adddf3+0x10c>
 80ab352:	0849      	lsrs	r1, r1, #1
 80ab354:	ea5f 0030 	movs.w	r0, r0, rrx
 80ab358:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80ab35c:	f104 0401 	add.w	r4, r4, #1
 80ab360:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80ab364:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80ab368:	f080 809a 	bcs.w	80ab4a0 <__adddf3+0x240>
 80ab36c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80ab370:	bf08      	it	eq
 80ab372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80ab376:	f150 0000 	adcs.w	r0, r0, #0
 80ab37a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80ab37e:	ea41 0105 	orr.w	r1, r1, r5
 80ab382:	bd30      	pop	{r4, r5, pc}
 80ab384:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80ab388:	4140      	adcs	r0, r0
 80ab38a:	eb41 0101 	adc.w	r1, r1, r1
 80ab38e:	3c01      	subs	r4, #1
 80ab390:	bf28      	it	cs
 80ab392:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80ab396:	d2e9      	bcs.n	80ab36c <__adddf3+0x10c>
 80ab398:	f091 0f00 	teq	r1, #0
 80ab39c:	bf04      	itt	eq
 80ab39e:	4601      	moveq	r1, r0
 80ab3a0:	2000      	moveq	r0, #0
 80ab3a2:	fab1 f381 	clz	r3, r1
 80ab3a6:	bf08      	it	eq
 80ab3a8:	3320      	addeq	r3, #32
 80ab3aa:	f1a3 030b 	sub.w	r3, r3, #11
 80ab3ae:	f1b3 0220 	subs.w	r2, r3, #32
 80ab3b2:	da0c      	bge.n	80ab3ce <__adddf3+0x16e>
 80ab3b4:	320c      	adds	r2, #12
 80ab3b6:	dd08      	ble.n	80ab3ca <__adddf3+0x16a>
 80ab3b8:	f102 0c14 	add.w	ip, r2, #20
 80ab3bc:	f1c2 020c 	rsb	r2, r2, #12
 80ab3c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80ab3c4:	fa21 f102 	lsr.w	r1, r1, r2
 80ab3c8:	e00c      	b.n	80ab3e4 <__adddf3+0x184>
 80ab3ca:	f102 0214 	add.w	r2, r2, #20
 80ab3ce:	bfd8      	it	le
 80ab3d0:	f1c2 0c20 	rsble	ip, r2, #32
 80ab3d4:	fa01 f102 	lsl.w	r1, r1, r2
 80ab3d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80ab3dc:	bfdc      	itt	le
 80ab3de:	ea41 010c 	orrle.w	r1, r1, ip
 80ab3e2:	4090      	lslle	r0, r2
 80ab3e4:	1ae4      	subs	r4, r4, r3
 80ab3e6:	bfa2      	ittt	ge
 80ab3e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80ab3ec:	4329      	orrge	r1, r5
 80ab3ee:	bd30      	popge	{r4, r5, pc}
 80ab3f0:	ea6f 0404 	mvn.w	r4, r4
 80ab3f4:	3c1f      	subs	r4, #31
 80ab3f6:	da1c      	bge.n	80ab432 <__adddf3+0x1d2>
 80ab3f8:	340c      	adds	r4, #12
 80ab3fa:	dc0e      	bgt.n	80ab41a <__adddf3+0x1ba>
 80ab3fc:	f104 0414 	add.w	r4, r4, #20
 80ab400:	f1c4 0220 	rsb	r2, r4, #32
 80ab404:	fa20 f004 	lsr.w	r0, r0, r4
 80ab408:	fa01 f302 	lsl.w	r3, r1, r2
 80ab40c:	ea40 0003 	orr.w	r0, r0, r3
 80ab410:	fa21 f304 	lsr.w	r3, r1, r4
 80ab414:	ea45 0103 	orr.w	r1, r5, r3
 80ab418:	bd30      	pop	{r4, r5, pc}
 80ab41a:	f1c4 040c 	rsb	r4, r4, #12
 80ab41e:	f1c4 0220 	rsb	r2, r4, #32
 80ab422:	fa20 f002 	lsr.w	r0, r0, r2
 80ab426:	fa01 f304 	lsl.w	r3, r1, r4
 80ab42a:	ea40 0003 	orr.w	r0, r0, r3
 80ab42e:	4629      	mov	r1, r5
 80ab430:	bd30      	pop	{r4, r5, pc}
 80ab432:	fa21 f004 	lsr.w	r0, r1, r4
 80ab436:	4629      	mov	r1, r5
 80ab438:	bd30      	pop	{r4, r5, pc}
 80ab43a:	f094 0f00 	teq	r4, #0
 80ab43e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80ab442:	bf06      	itte	eq
 80ab444:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80ab448:	3401      	addeq	r4, #1
 80ab44a:	3d01      	subne	r5, #1
 80ab44c:	e74e      	b.n	80ab2ec <__adddf3+0x8c>
 80ab44e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80ab452:	bf18      	it	ne
 80ab454:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80ab458:	d029      	beq.n	80ab4ae <__adddf3+0x24e>
 80ab45a:	ea94 0f05 	teq	r4, r5
 80ab45e:	bf08      	it	eq
 80ab460:	ea90 0f02 	teqeq	r0, r2
 80ab464:	d005      	beq.n	80ab472 <__adddf3+0x212>
 80ab466:	ea54 0c00 	orrs.w	ip, r4, r0
 80ab46a:	bf04      	itt	eq
 80ab46c:	4619      	moveq	r1, r3
 80ab46e:	4610      	moveq	r0, r2
 80ab470:	bd30      	pop	{r4, r5, pc}
 80ab472:	ea91 0f03 	teq	r1, r3
 80ab476:	bf1e      	ittt	ne
 80ab478:	2100      	movne	r1, #0
 80ab47a:	2000      	movne	r0, #0
 80ab47c:	bd30      	popne	{r4, r5, pc}
 80ab47e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80ab482:	d105      	bne.n	80ab490 <__adddf3+0x230>
 80ab484:	0040      	lsls	r0, r0, #1
 80ab486:	4149      	adcs	r1, r1
 80ab488:	bf28      	it	cs
 80ab48a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80ab48e:	bd30      	pop	{r4, r5, pc}
 80ab490:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80ab494:	bf3c      	itt	cc
 80ab496:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80ab49a:	bd30      	popcc	{r4, r5, pc}
 80ab49c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80ab4a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80ab4a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80ab4a8:	f04f 0000 	mov.w	r0, #0
 80ab4ac:	bd30      	pop	{r4, r5, pc}
 80ab4ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80ab4b2:	bf1a      	itte	ne
 80ab4b4:	4619      	movne	r1, r3
 80ab4b6:	4610      	movne	r0, r2
 80ab4b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80ab4bc:	bf1c      	itt	ne
 80ab4be:	460b      	movne	r3, r1
 80ab4c0:	4602      	movne	r2, r0
 80ab4c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80ab4c6:	bf06      	itte	eq
 80ab4c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80ab4cc:	ea91 0f03 	teqeq	r1, r3
 80ab4d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80ab4d4:	bd30      	pop	{r4, r5, pc}
 80ab4d6:	bf00      	nop

080ab4d8 <__aeabi_ui2d>:
 80ab4d8:	f090 0f00 	teq	r0, #0
 80ab4dc:	bf04      	itt	eq
 80ab4de:	2100      	moveq	r1, #0
 80ab4e0:	4770      	bxeq	lr
 80ab4e2:	b530      	push	{r4, r5, lr}
 80ab4e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80ab4e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80ab4ec:	f04f 0500 	mov.w	r5, #0
 80ab4f0:	f04f 0100 	mov.w	r1, #0
 80ab4f4:	e750      	b.n	80ab398 <__adddf3+0x138>
 80ab4f6:	bf00      	nop

080ab4f8 <__aeabi_i2d>:
 80ab4f8:	f090 0f00 	teq	r0, #0
 80ab4fc:	bf04      	itt	eq
 80ab4fe:	2100      	moveq	r1, #0
 80ab500:	4770      	bxeq	lr
 80ab502:	b530      	push	{r4, r5, lr}
 80ab504:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80ab508:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80ab50c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80ab510:	bf48      	it	mi
 80ab512:	4240      	negmi	r0, r0
 80ab514:	f04f 0100 	mov.w	r1, #0
 80ab518:	e73e      	b.n	80ab398 <__adddf3+0x138>
 80ab51a:	bf00      	nop

080ab51c <__aeabi_f2d>:
 80ab51c:	0042      	lsls	r2, r0, #1
 80ab51e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80ab522:	ea4f 0131 	mov.w	r1, r1, rrx
 80ab526:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80ab52a:	bf1f      	itttt	ne
 80ab52c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80ab530:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80ab534:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80ab538:	4770      	bxne	lr
 80ab53a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80ab53e:	bf08      	it	eq
 80ab540:	4770      	bxeq	lr
 80ab542:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80ab546:	bf04      	itt	eq
 80ab548:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80ab54c:	4770      	bxeq	lr
 80ab54e:	b530      	push	{r4, r5, lr}
 80ab550:	f44f 7460 	mov.w	r4, #896	; 0x380
 80ab554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80ab558:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80ab55c:	e71c      	b.n	80ab398 <__adddf3+0x138>
 80ab55e:	bf00      	nop

080ab560 <__aeabi_ul2d>:
 80ab560:	ea50 0201 	orrs.w	r2, r0, r1
 80ab564:	bf08      	it	eq
 80ab566:	4770      	bxeq	lr
 80ab568:	b530      	push	{r4, r5, lr}
 80ab56a:	f04f 0500 	mov.w	r5, #0
 80ab56e:	e00a      	b.n	80ab586 <__aeabi_l2d+0x16>

080ab570 <__aeabi_l2d>:
 80ab570:	ea50 0201 	orrs.w	r2, r0, r1
 80ab574:	bf08      	it	eq
 80ab576:	4770      	bxeq	lr
 80ab578:	b530      	push	{r4, r5, lr}
 80ab57a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80ab57e:	d502      	bpl.n	80ab586 <__aeabi_l2d+0x16>
 80ab580:	4240      	negs	r0, r0
 80ab582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80ab586:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80ab58a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80ab58e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80ab592:	f43f aed8 	beq.w	80ab346 <__adddf3+0xe6>
 80ab596:	f04f 0203 	mov.w	r2, #3
 80ab59a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80ab59e:	bf18      	it	ne
 80ab5a0:	3203      	addne	r2, #3
 80ab5a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80ab5a6:	bf18      	it	ne
 80ab5a8:	3203      	addne	r2, #3
 80ab5aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80ab5ae:	f1c2 0320 	rsb	r3, r2, #32
 80ab5b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80ab5b6:	fa20 f002 	lsr.w	r0, r0, r2
 80ab5ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80ab5be:	ea40 000e 	orr.w	r0, r0, lr
 80ab5c2:	fa21 f102 	lsr.w	r1, r1, r2
 80ab5c6:	4414      	add	r4, r2
 80ab5c8:	e6bd      	b.n	80ab346 <__adddf3+0xe6>
 80ab5ca:	bf00      	nop

080ab5cc <__aeabi_dmul>:
 80ab5cc:	b570      	push	{r4, r5, r6, lr}
 80ab5ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80ab5d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80ab5d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80ab5da:	bf1d      	ittte	ne
 80ab5dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80ab5e0:	ea94 0f0c 	teqne	r4, ip
 80ab5e4:	ea95 0f0c 	teqne	r5, ip
 80ab5e8:	f000 f8de 	bleq	80ab7a8 <__aeabi_dmul+0x1dc>
 80ab5ec:	442c      	add	r4, r5
 80ab5ee:	ea81 0603 	eor.w	r6, r1, r3
 80ab5f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80ab5f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80ab5fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80ab5fe:	bf18      	it	ne
 80ab600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80ab604:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80ab608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80ab60c:	d038      	beq.n	80ab680 <__aeabi_dmul+0xb4>
 80ab60e:	fba0 ce02 	umull	ip, lr, r0, r2
 80ab612:	f04f 0500 	mov.w	r5, #0
 80ab616:	fbe1 e502 	umlal	lr, r5, r1, r2
 80ab61a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80ab61e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80ab622:	f04f 0600 	mov.w	r6, #0
 80ab626:	fbe1 5603 	umlal	r5, r6, r1, r3
 80ab62a:	f09c 0f00 	teq	ip, #0
 80ab62e:	bf18      	it	ne
 80ab630:	f04e 0e01 	orrne.w	lr, lr, #1
 80ab634:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80ab638:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80ab63c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80ab640:	d204      	bcs.n	80ab64c <__aeabi_dmul+0x80>
 80ab642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80ab646:	416d      	adcs	r5, r5
 80ab648:	eb46 0606 	adc.w	r6, r6, r6
 80ab64c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80ab650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80ab654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80ab658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80ab65c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80ab660:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80ab664:	bf88      	it	hi
 80ab666:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80ab66a:	d81e      	bhi.n	80ab6aa <__aeabi_dmul+0xde>
 80ab66c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80ab670:	bf08      	it	eq
 80ab672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80ab676:	f150 0000 	adcs.w	r0, r0, #0
 80ab67a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80ab67e:	bd70      	pop	{r4, r5, r6, pc}
 80ab680:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80ab684:	ea46 0101 	orr.w	r1, r6, r1
 80ab688:	ea40 0002 	orr.w	r0, r0, r2
 80ab68c:	ea81 0103 	eor.w	r1, r1, r3
 80ab690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80ab694:	bfc2      	ittt	gt
 80ab696:	ebd4 050c 	rsbsgt	r5, r4, ip
 80ab69a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80ab69e:	bd70      	popgt	{r4, r5, r6, pc}
 80ab6a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80ab6a4:	f04f 0e00 	mov.w	lr, #0
 80ab6a8:	3c01      	subs	r4, #1
 80ab6aa:	f300 80ab 	bgt.w	80ab804 <__aeabi_dmul+0x238>
 80ab6ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80ab6b2:	bfde      	ittt	le
 80ab6b4:	2000      	movle	r0, #0
 80ab6b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80ab6ba:	bd70      	pople	{r4, r5, r6, pc}
 80ab6bc:	f1c4 0400 	rsb	r4, r4, #0
 80ab6c0:	3c20      	subs	r4, #32
 80ab6c2:	da35      	bge.n	80ab730 <__aeabi_dmul+0x164>
 80ab6c4:	340c      	adds	r4, #12
 80ab6c6:	dc1b      	bgt.n	80ab700 <__aeabi_dmul+0x134>
 80ab6c8:	f104 0414 	add.w	r4, r4, #20
 80ab6cc:	f1c4 0520 	rsb	r5, r4, #32
 80ab6d0:	fa00 f305 	lsl.w	r3, r0, r5
 80ab6d4:	fa20 f004 	lsr.w	r0, r0, r4
 80ab6d8:	fa01 f205 	lsl.w	r2, r1, r5
 80ab6dc:	ea40 0002 	orr.w	r0, r0, r2
 80ab6e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80ab6e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80ab6e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80ab6ec:	fa21 f604 	lsr.w	r6, r1, r4
 80ab6f0:	eb42 0106 	adc.w	r1, r2, r6
 80ab6f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80ab6f8:	bf08      	it	eq
 80ab6fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80ab6fe:	bd70      	pop	{r4, r5, r6, pc}
 80ab700:	f1c4 040c 	rsb	r4, r4, #12
 80ab704:	f1c4 0520 	rsb	r5, r4, #32
 80ab708:	fa00 f304 	lsl.w	r3, r0, r4
 80ab70c:	fa20 f005 	lsr.w	r0, r0, r5
 80ab710:	fa01 f204 	lsl.w	r2, r1, r4
 80ab714:	ea40 0002 	orr.w	r0, r0, r2
 80ab718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80ab71c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80ab720:	f141 0100 	adc.w	r1, r1, #0
 80ab724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80ab728:	bf08      	it	eq
 80ab72a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80ab72e:	bd70      	pop	{r4, r5, r6, pc}
 80ab730:	f1c4 0520 	rsb	r5, r4, #32
 80ab734:	fa00 f205 	lsl.w	r2, r0, r5
 80ab738:	ea4e 0e02 	orr.w	lr, lr, r2
 80ab73c:	fa20 f304 	lsr.w	r3, r0, r4
 80ab740:	fa01 f205 	lsl.w	r2, r1, r5
 80ab744:	ea43 0302 	orr.w	r3, r3, r2
 80ab748:	fa21 f004 	lsr.w	r0, r1, r4
 80ab74c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80ab750:	fa21 f204 	lsr.w	r2, r1, r4
 80ab754:	ea20 0002 	bic.w	r0, r0, r2
 80ab758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80ab75c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80ab760:	bf08      	it	eq
 80ab762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80ab766:	bd70      	pop	{r4, r5, r6, pc}
 80ab768:	f094 0f00 	teq	r4, #0
 80ab76c:	d10f      	bne.n	80ab78e <__aeabi_dmul+0x1c2>
 80ab76e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80ab772:	0040      	lsls	r0, r0, #1
 80ab774:	eb41 0101 	adc.w	r1, r1, r1
 80ab778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80ab77c:	bf08      	it	eq
 80ab77e:	3c01      	subeq	r4, #1
 80ab780:	d0f7      	beq.n	80ab772 <__aeabi_dmul+0x1a6>
 80ab782:	ea41 0106 	orr.w	r1, r1, r6
 80ab786:	f095 0f00 	teq	r5, #0
 80ab78a:	bf18      	it	ne
 80ab78c:	4770      	bxne	lr
 80ab78e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80ab792:	0052      	lsls	r2, r2, #1
 80ab794:	eb43 0303 	adc.w	r3, r3, r3
 80ab798:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80ab79c:	bf08      	it	eq
 80ab79e:	3d01      	subeq	r5, #1
 80ab7a0:	d0f7      	beq.n	80ab792 <__aeabi_dmul+0x1c6>
 80ab7a2:	ea43 0306 	orr.w	r3, r3, r6
 80ab7a6:	4770      	bx	lr
 80ab7a8:	ea94 0f0c 	teq	r4, ip
 80ab7ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80ab7b0:	bf18      	it	ne
 80ab7b2:	ea95 0f0c 	teqne	r5, ip
 80ab7b6:	d00c      	beq.n	80ab7d2 <__aeabi_dmul+0x206>
 80ab7b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80ab7bc:	bf18      	it	ne
 80ab7be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80ab7c2:	d1d1      	bne.n	80ab768 <__aeabi_dmul+0x19c>
 80ab7c4:	ea81 0103 	eor.w	r1, r1, r3
 80ab7c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80ab7cc:	f04f 0000 	mov.w	r0, #0
 80ab7d0:	bd70      	pop	{r4, r5, r6, pc}
 80ab7d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80ab7d6:	bf06      	itte	eq
 80ab7d8:	4610      	moveq	r0, r2
 80ab7da:	4619      	moveq	r1, r3
 80ab7dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80ab7e0:	d019      	beq.n	80ab816 <__aeabi_dmul+0x24a>
 80ab7e2:	ea94 0f0c 	teq	r4, ip
 80ab7e6:	d102      	bne.n	80ab7ee <__aeabi_dmul+0x222>
 80ab7e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80ab7ec:	d113      	bne.n	80ab816 <__aeabi_dmul+0x24a>
 80ab7ee:	ea95 0f0c 	teq	r5, ip
 80ab7f2:	d105      	bne.n	80ab800 <__aeabi_dmul+0x234>
 80ab7f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80ab7f8:	bf1c      	itt	ne
 80ab7fa:	4610      	movne	r0, r2
 80ab7fc:	4619      	movne	r1, r3
 80ab7fe:	d10a      	bne.n	80ab816 <__aeabi_dmul+0x24a>
 80ab800:	ea81 0103 	eor.w	r1, r1, r3
 80ab804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80ab808:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80ab80c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80ab810:	f04f 0000 	mov.w	r0, #0
 80ab814:	bd70      	pop	{r4, r5, r6, pc}
 80ab816:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80ab81a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80ab81e:	bd70      	pop	{r4, r5, r6, pc}

080ab820 <__aeabi_ddiv>:
 80ab820:	b570      	push	{r4, r5, r6, lr}
 80ab822:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80ab826:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80ab82a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80ab82e:	bf1d      	ittte	ne
 80ab830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80ab834:	ea94 0f0c 	teqne	r4, ip
 80ab838:	ea95 0f0c 	teqne	r5, ip
 80ab83c:	f000 f8a7 	bleq	80ab98e <__aeabi_ddiv+0x16e>
 80ab840:	eba4 0405 	sub.w	r4, r4, r5
 80ab844:	ea81 0e03 	eor.w	lr, r1, r3
 80ab848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80ab84c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80ab850:	f000 8088 	beq.w	80ab964 <__aeabi_ddiv+0x144>
 80ab854:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80ab858:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80ab85c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80ab860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80ab864:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80ab868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80ab86c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80ab870:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80ab874:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80ab878:	429d      	cmp	r5, r3
 80ab87a:	bf08      	it	eq
 80ab87c:	4296      	cmpeq	r6, r2
 80ab87e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80ab882:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80ab886:	d202      	bcs.n	80ab88e <__aeabi_ddiv+0x6e>
 80ab888:	085b      	lsrs	r3, r3, #1
 80ab88a:	ea4f 0232 	mov.w	r2, r2, rrx
 80ab88e:	1ab6      	subs	r6, r6, r2
 80ab890:	eb65 0503 	sbc.w	r5, r5, r3
 80ab894:	085b      	lsrs	r3, r3, #1
 80ab896:	ea4f 0232 	mov.w	r2, r2, rrx
 80ab89a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80ab89e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80ab8a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80ab8a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80ab8aa:	bf22      	ittt	cs
 80ab8ac:	1ab6      	subcs	r6, r6, r2
 80ab8ae:	4675      	movcs	r5, lr
 80ab8b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80ab8b4:	085b      	lsrs	r3, r3, #1
 80ab8b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80ab8ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80ab8be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80ab8c2:	bf22      	ittt	cs
 80ab8c4:	1ab6      	subcs	r6, r6, r2
 80ab8c6:	4675      	movcs	r5, lr
 80ab8c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80ab8cc:	085b      	lsrs	r3, r3, #1
 80ab8ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80ab8d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80ab8d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80ab8da:	bf22      	ittt	cs
 80ab8dc:	1ab6      	subcs	r6, r6, r2
 80ab8de:	4675      	movcs	r5, lr
 80ab8e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80ab8e4:	085b      	lsrs	r3, r3, #1
 80ab8e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80ab8ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80ab8ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80ab8f2:	bf22      	ittt	cs
 80ab8f4:	1ab6      	subcs	r6, r6, r2
 80ab8f6:	4675      	movcs	r5, lr
 80ab8f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80ab8fc:	ea55 0e06 	orrs.w	lr, r5, r6
 80ab900:	d018      	beq.n	80ab934 <__aeabi_ddiv+0x114>
 80ab902:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80ab906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80ab90a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80ab90e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80ab912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80ab916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80ab91a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80ab91e:	d1c0      	bne.n	80ab8a2 <__aeabi_ddiv+0x82>
 80ab920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80ab924:	d10b      	bne.n	80ab93e <__aeabi_ddiv+0x11e>
 80ab926:	ea41 0100 	orr.w	r1, r1, r0
 80ab92a:	f04f 0000 	mov.w	r0, #0
 80ab92e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80ab932:	e7b6      	b.n	80ab8a2 <__aeabi_ddiv+0x82>
 80ab934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80ab938:	bf04      	itt	eq
 80ab93a:	4301      	orreq	r1, r0
 80ab93c:	2000      	moveq	r0, #0
 80ab93e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80ab942:	bf88      	it	hi
 80ab944:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80ab948:	f63f aeaf 	bhi.w	80ab6aa <__aeabi_dmul+0xde>
 80ab94c:	ebb5 0c03 	subs.w	ip, r5, r3
 80ab950:	bf04      	itt	eq
 80ab952:	ebb6 0c02 	subseq.w	ip, r6, r2
 80ab956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80ab95a:	f150 0000 	adcs.w	r0, r0, #0
 80ab95e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80ab962:	bd70      	pop	{r4, r5, r6, pc}
 80ab964:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80ab968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80ab96c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80ab970:	bfc2      	ittt	gt
 80ab972:	ebd4 050c 	rsbsgt	r5, r4, ip
 80ab976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80ab97a:	bd70      	popgt	{r4, r5, r6, pc}
 80ab97c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80ab980:	f04f 0e00 	mov.w	lr, #0
 80ab984:	3c01      	subs	r4, #1
 80ab986:	e690      	b.n	80ab6aa <__aeabi_dmul+0xde>
 80ab988:	ea45 0e06 	orr.w	lr, r5, r6
 80ab98c:	e68d      	b.n	80ab6aa <__aeabi_dmul+0xde>
 80ab98e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80ab992:	ea94 0f0c 	teq	r4, ip
 80ab996:	bf08      	it	eq
 80ab998:	ea95 0f0c 	teqeq	r5, ip
 80ab99c:	f43f af3b 	beq.w	80ab816 <__aeabi_dmul+0x24a>
 80ab9a0:	ea94 0f0c 	teq	r4, ip
 80ab9a4:	d10a      	bne.n	80ab9bc <__aeabi_ddiv+0x19c>
 80ab9a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80ab9aa:	f47f af34 	bne.w	80ab816 <__aeabi_dmul+0x24a>
 80ab9ae:	ea95 0f0c 	teq	r5, ip
 80ab9b2:	f47f af25 	bne.w	80ab800 <__aeabi_dmul+0x234>
 80ab9b6:	4610      	mov	r0, r2
 80ab9b8:	4619      	mov	r1, r3
 80ab9ba:	e72c      	b.n	80ab816 <__aeabi_dmul+0x24a>
 80ab9bc:	ea95 0f0c 	teq	r5, ip
 80ab9c0:	d106      	bne.n	80ab9d0 <__aeabi_ddiv+0x1b0>
 80ab9c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80ab9c6:	f43f aefd 	beq.w	80ab7c4 <__aeabi_dmul+0x1f8>
 80ab9ca:	4610      	mov	r0, r2
 80ab9cc:	4619      	mov	r1, r3
 80ab9ce:	e722      	b.n	80ab816 <__aeabi_dmul+0x24a>
 80ab9d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80ab9d4:	bf18      	it	ne
 80ab9d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80ab9da:	f47f aec5 	bne.w	80ab768 <__aeabi_dmul+0x19c>
 80ab9de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80ab9e2:	f47f af0d 	bne.w	80ab800 <__aeabi_dmul+0x234>
 80ab9e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80ab9ea:	f47f aeeb 	bne.w	80ab7c4 <__aeabi_dmul+0x1f8>
 80ab9ee:	e712      	b.n	80ab816 <__aeabi_dmul+0x24a>

080ab9f0 <__gedf2>:
 80ab9f0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80ab9f4:	e006      	b.n	80aba04 <__cmpdf2+0x4>
 80ab9f6:	bf00      	nop

080ab9f8 <__ledf2>:
 80ab9f8:	f04f 0c01 	mov.w	ip, #1
 80ab9fc:	e002      	b.n	80aba04 <__cmpdf2+0x4>
 80ab9fe:	bf00      	nop

080aba00 <__cmpdf2>:
 80aba00:	f04f 0c01 	mov.w	ip, #1
 80aba04:	f84d cd04 	str.w	ip, [sp, #-4]!
 80aba08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80aba0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80aba10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80aba14:	bf18      	it	ne
 80aba16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80aba1a:	d01b      	beq.n	80aba54 <__cmpdf2+0x54>
 80aba1c:	b001      	add	sp, #4
 80aba1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80aba22:	bf0c      	ite	eq
 80aba24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80aba28:	ea91 0f03 	teqne	r1, r3
 80aba2c:	bf02      	ittt	eq
 80aba2e:	ea90 0f02 	teqeq	r0, r2
 80aba32:	2000      	moveq	r0, #0
 80aba34:	4770      	bxeq	lr
 80aba36:	f110 0f00 	cmn.w	r0, #0
 80aba3a:	ea91 0f03 	teq	r1, r3
 80aba3e:	bf58      	it	pl
 80aba40:	4299      	cmppl	r1, r3
 80aba42:	bf08      	it	eq
 80aba44:	4290      	cmpeq	r0, r2
 80aba46:	bf2c      	ite	cs
 80aba48:	17d8      	asrcs	r0, r3, #31
 80aba4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80aba4e:	f040 0001 	orr.w	r0, r0, #1
 80aba52:	4770      	bx	lr
 80aba54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80aba58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80aba5c:	d102      	bne.n	80aba64 <__cmpdf2+0x64>
 80aba5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80aba62:	d107      	bne.n	80aba74 <__cmpdf2+0x74>
 80aba64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80aba68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80aba6c:	d1d6      	bne.n	80aba1c <__cmpdf2+0x1c>
 80aba6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80aba72:	d0d3      	beq.n	80aba1c <__cmpdf2+0x1c>
 80aba74:	f85d 0b04 	ldr.w	r0, [sp], #4
 80aba78:	4770      	bx	lr
 80aba7a:	bf00      	nop

080aba7c <__aeabi_cdrcmple>:
 80aba7c:	4684      	mov	ip, r0
 80aba7e:	4610      	mov	r0, r2
 80aba80:	4662      	mov	r2, ip
 80aba82:	468c      	mov	ip, r1
 80aba84:	4619      	mov	r1, r3
 80aba86:	4663      	mov	r3, ip
 80aba88:	e000      	b.n	80aba8c <__aeabi_cdcmpeq>
 80aba8a:	bf00      	nop

080aba8c <__aeabi_cdcmpeq>:
 80aba8c:	b501      	push	{r0, lr}
 80aba8e:	f7ff ffb7 	bl	80aba00 <__cmpdf2>
 80aba92:	2800      	cmp	r0, #0
 80aba94:	bf48      	it	mi
 80aba96:	f110 0f00 	cmnmi.w	r0, #0
 80aba9a:	bd01      	pop	{r0, pc}

080aba9c <__aeabi_dcmpeq>:
 80aba9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80abaa0:	f7ff fff4 	bl	80aba8c <__aeabi_cdcmpeq>
 80abaa4:	bf0c      	ite	eq
 80abaa6:	2001      	moveq	r0, #1
 80abaa8:	2000      	movne	r0, #0
 80abaaa:	f85d fb08 	ldr.w	pc, [sp], #8
 80abaae:	bf00      	nop

080abab0 <__aeabi_dcmplt>:
 80abab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80abab4:	f7ff ffea 	bl	80aba8c <__aeabi_cdcmpeq>
 80abab8:	bf34      	ite	cc
 80ababa:	2001      	movcc	r0, #1
 80ababc:	2000      	movcs	r0, #0
 80ababe:	f85d fb08 	ldr.w	pc, [sp], #8
 80abac2:	bf00      	nop

080abac4 <__aeabi_dcmple>:
 80abac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80abac8:	f7ff ffe0 	bl	80aba8c <__aeabi_cdcmpeq>
 80abacc:	bf94      	ite	ls
 80abace:	2001      	movls	r0, #1
 80abad0:	2000      	movhi	r0, #0
 80abad2:	f85d fb08 	ldr.w	pc, [sp], #8
 80abad6:	bf00      	nop

080abad8 <__aeabi_dcmpge>:
 80abad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80abadc:	f7ff ffce 	bl	80aba7c <__aeabi_cdrcmple>
 80abae0:	bf94      	ite	ls
 80abae2:	2001      	movls	r0, #1
 80abae4:	2000      	movhi	r0, #0
 80abae6:	f85d fb08 	ldr.w	pc, [sp], #8
 80abaea:	bf00      	nop

080abaec <__aeabi_dcmpgt>:
 80abaec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80abaf0:	f7ff ffc4 	bl	80aba7c <__aeabi_cdrcmple>
 80abaf4:	bf34      	ite	cc
 80abaf6:	2001      	movcc	r0, #1
 80abaf8:	2000      	movcs	r0, #0
 80abafa:	f85d fb08 	ldr.w	pc, [sp], #8
 80abafe:	bf00      	nop

080abb00 <__aeabi_dcmpun>:
 80abb00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80abb04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80abb08:	d102      	bne.n	80abb10 <__aeabi_dcmpun+0x10>
 80abb0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80abb0e:	d10a      	bne.n	80abb26 <__aeabi_dcmpun+0x26>
 80abb10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80abb14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80abb18:	d102      	bne.n	80abb20 <__aeabi_dcmpun+0x20>
 80abb1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80abb1e:	d102      	bne.n	80abb26 <__aeabi_dcmpun+0x26>
 80abb20:	f04f 0000 	mov.w	r0, #0
 80abb24:	4770      	bx	lr
 80abb26:	f04f 0001 	mov.w	r0, #1
 80abb2a:	4770      	bx	lr

080abb2c <__aeabi_d2iz>:
 80abb2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80abb30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80abb34:	d215      	bcs.n	80abb62 <__aeabi_d2iz+0x36>
 80abb36:	d511      	bpl.n	80abb5c <__aeabi_d2iz+0x30>
 80abb38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80abb3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80abb40:	d912      	bls.n	80abb68 <__aeabi_d2iz+0x3c>
 80abb42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80abb46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80abb4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80abb4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80abb52:	fa23 f002 	lsr.w	r0, r3, r2
 80abb56:	bf18      	it	ne
 80abb58:	4240      	negne	r0, r0
 80abb5a:	4770      	bx	lr
 80abb5c:	f04f 0000 	mov.w	r0, #0
 80abb60:	4770      	bx	lr
 80abb62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80abb66:	d105      	bne.n	80abb74 <__aeabi_d2iz+0x48>
 80abb68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80abb6c:	bf08      	it	eq
 80abb6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80abb72:	4770      	bx	lr
 80abb74:	f04f 0000 	mov.w	r0, #0
 80abb78:	4770      	bx	lr
 80abb7a:	bf00      	nop

080abb7c <__aeabi_d2uiz>:
 80abb7c:	004a      	lsls	r2, r1, #1
 80abb7e:	d211      	bcs.n	80abba4 <__aeabi_d2uiz+0x28>
 80abb80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80abb84:	d211      	bcs.n	80abbaa <__aeabi_d2uiz+0x2e>
 80abb86:	d50d      	bpl.n	80abba4 <__aeabi_d2uiz+0x28>
 80abb88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80abb8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80abb90:	d40e      	bmi.n	80abbb0 <__aeabi_d2uiz+0x34>
 80abb92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80abb96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80abb9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80abb9e:	fa23 f002 	lsr.w	r0, r3, r2
 80abba2:	4770      	bx	lr
 80abba4:	f04f 0000 	mov.w	r0, #0
 80abba8:	4770      	bx	lr
 80abbaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80abbae:	d102      	bne.n	80abbb6 <__aeabi_d2uiz+0x3a>
 80abbb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80abbb4:	4770      	bx	lr
 80abbb6:	f04f 0000 	mov.w	r0, #0
 80abbba:	4770      	bx	lr

080abbbc <__aeabi_d2f>:
 80abbbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80abbc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80abbc4:	bf24      	itt	cs
 80abbc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80abbca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80abbce:	d90d      	bls.n	80abbec <__aeabi_d2f+0x30>
 80abbd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80abbd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80abbd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80abbdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80abbe0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80abbe4:	bf08      	it	eq
 80abbe6:	f020 0001 	biceq.w	r0, r0, #1
 80abbea:	4770      	bx	lr
 80abbec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80abbf0:	d121      	bne.n	80abc36 <__aeabi_d2f+0x7a>
 80abbf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80abbf6:	bfbc      	itt	lt
 80abbf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80abbfc:	4770      	bxlt	lr
 80abbfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80abc02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80abc06:	f1c2 0218 	rsb	r2, r2, #24
 80abc0a:	f1c2 0c20 	rsb	ip, r2, #32
 80abc0e:	fa10 f30c 	lsls.w	r3, r0, ip
 80abc12:	fa20 f002 	lsr.w	r0, r0, r2
 80abc16:	bf18      	it	ne
 80abc18:	f040 0001 	orrne.w	r0, r0, #1
 80abc1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80abc20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80abc24:	fa03 fc0c 	lsl.w	ip, r3, ip
 80abc28:	ea40 000c 	orr.w	r0, r0, ip
 80abc2c:	fa23 f302 	lsr.w	r3, r3, r2
 80abc30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80abc34:	e7cc      	b.n	80abbd0 <__aeabi_d2f+0x14>
 80abc36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80abc3a:	d107      	bne.n	80abc4c <__aeabi_d2f+0x90>
 80abc3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80abc40:	bf1e      	ittt	ne
 80abc42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80abc46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80abc4a:	4770      	bxne	lr
 80abc4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80abc50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80abc54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80abc58:	4770      	bx	lr
 80abc5a:	bf00      	nop

080abc5c <__aeabi_frsub>:
 80abc5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80abc60:	e002      	b.n	80abc68 <__addsf3>
 80abc62:	bf00      	nop

080abc64 <__aeabi_fsub>:
 80abc64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080abc68 <__addsf3>:
 80abc68:	0042      	lsls	r2, r0, #1
 80abc6a:	bf1f      	itttt	ne
 80abc6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80abc70:	ea92 0f03 	teqne	r2, r3
 80abc74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80abc78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80abc7c:	d06a      	beq.n	80abd54 <__addsf3+0xec>
 80abc7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80abc82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80abc86:	bfc1      	itttt	gt
 80abc88:	18d2      	addgt	r2, r2, r3
 80abc8a:	4041      	eorgt	r1, r0
 80abc8c:	4048      	eorgt	r0, r1
 80abc8e:	4041      	eorgt	r1, r0
 80abc90:	bfb8      	it	lt
 80abc92:	425b      	neglt	r3, r3
 80abc94:	2b19      	cmp	r3, #25
 80abc96:	bf88      	it	hi
 80abc98:	4770      	bxhi	lr
 80abc9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80abc9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80abca2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80abca6:	bf18      	it	ne
 80abca8:	4240      	negne	r0, r0
 80abcaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80abcae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80abcb2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80abcb6:	bf18      	it	ne
 80abcb8:	4249      	negne	r1, r1
 80abcba:	ea92 0f03 	teq	r2, r3
 80abcbe:	d03f      	beq.n	80abd40 <__addsf3+0xd8>
 80abcc0:	f1a2 0201 	sub.w	r2, r2, #1
 80abcc4:	fa41 fc03 	asr.w	ip, r1, r3
 80abcc8:	eb10 000c 	adds.w	r0, r0, ip
 80abccc:	f1c3 0320 	rsb	r3, r3, #32
 80abcd0:	fa01 f103 	lsl.w	r1, r1, r3
 80abcd4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80abcd8:	d502      	bpl.n	80abce0 <__addsf3+0x78>
 80abcda:	4249      	negs	r1, r1
 80abcdc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80abce0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80abce4:	d313      	bcc.n	80abd0e <__addsf3+0xa6>
 80abce6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80abcea:	d306      	bcc.n	80abcfa <__addsf3+0x92>
 80abcec:	0840      	lsrs	r0, r0, #1
 80abcee:	ea4f 0131 	mov.w	r1, r1, rrx
 80abcf2:	f102 0201 	add.w	r2, r2, #1
 80abcf6:	2afe      	cmp	r2, #254	; 0xfe
 80abcf8:	d251      	bcs.n	80abd9e <__addsf3+0x136>
 80abcfa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80abcfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80abd02:	bf08      	it	eq
 80abd04:	f020 0001 	biceq.w	r0, r0, #1
 80abd08:	ea40 0003 	orr.w	r0, r0, r3
 80abd0c:	4770      	bx	lr
 80abd0e:	0049      	lsls	r1, r1, #1
 80abd10:	eb40 0000 	adc.w	r0, r0, r0
 80abd14:	3a01      	subs	r2, #1
 80abd16:	bf28      	it	cs
 80abd18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80abd1c:	d2ed      	bcs.n	80abcfa <__addsf3+0x92>
 80abd1e:	fab0 fc80 	clz	ip, r0
 80abd22:	f1ac 0c08 	sub.w	ip, ip, #8
 80abd26:	ebb2 020c 	subs.w	r2, r2, ip
 80abd2a:	fa00 f00c 	lsl.w	r0, r0, ip
 80abd2e:	bfaa      	itet	ge
 80abd30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80abd34:	4252      	neglt	r2, r2
 80abd36:	4318      	orrge	r0, r3
 80abd38:	bfbc      	itt	lt
 80abd3a:	40d0      	lsrlt	r0, r2
 80abd3c:	4318      	orrlt	r0, r3
 80abd3e:	4770      	bx	lr
 80abd40:	f092 0f00 	teq	r2, #0
 80abd44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80abd48:	bf06      	itte	eq
 80abd4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80abd4e:	3201      	addeq	r2, #1
 80abd50:	3b01      	subne	r3, #1
 80abd52:	e7b5      	b.n	80abcc0 <__addsf3+0x58>
 80abd54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80abd58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80abd5c:	bf18      	it	ne
 80abd5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80abd62:	d021      	beq.n	80abda8 <__addsf3+0x140>
 80abd64:	ea92 0f03 	teq	r2, r3
 80abd68:	d004      	beq.n	80abd74 <__addsf3+0x10c>
 80abd6a:	f092 0f00 	teq	r2, #0
 80abd6e:	bf08      	it	eq
 80abd70:	4608      	moveq	r0, r1
 80abd72:	4770      	bx	lr
 80abd74:	ea90 0f01 	teq	r0, r1
 80abd78:	bf1c      	itt	ne
 80abd7a:	2000      	movne	r0, #0
 80abd7c:	4770      	bxne	lr
 80abd7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80abd82:	d104      	bne.n	80abd8e <__addsf3+0x126>
 80abd84:	0040      	lsls	r0, r0, #1
 80abd86:	bf28      	it	cs
 80abd88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80abd8c:	4770      	bx	lr
 80abd8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80abd92:	bf3c      	itt	cc
 80abd94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80abd98:	4770      	bxcc	lr
 80abd9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80abd9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80abda2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80abda6:	4770      	bx	lr
 80abda8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80abdac:	bf16      	itet	ne
 80abdae:	4608      	movne	r0, r1
 80abdb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80abdb4:	4601      	movne	r1, r0
 80abdb6:	0242      	lsls	r2, r0, #9
 80abdb8:	bf06      	itte	eq
 80abdba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80abdbe:	ea90 0f01 	teqeq	r0, r1
 80abdc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80abdc6:	4770      	bx	lr

080abdc8 <__aeabi_ui2f>:
 80abdc8:	f04f 0300 	mov.w	r3, #0
 80abdcc:	e004      	b.n	80abdd8 <__aeabi_i2f+0x8>
 80abdce:	bf00      	nop

080abdd0 <__aeabi_i2f>:
 80abdd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80abdd4:	bf48      	it	mi
 80abdd6:	4240      	negmi	r0, r0
 80abdd8:	ea5f 0c00 	movs.w	ip, r0
 80abddc:	bf08      	it	eq
 80abdde:	4770      	bxeq	lr
 80abde0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80abde4:	4601      	mov	r1, r0
 80abde6:	f04f 0000 	mov.w	r0, #0
 80abdea:	e01c      	b.n	80abe26 <__aeabi_l2f+0x2a>

080abdec <__aeabi_ul2f>:
 80abdec:	ea50 0201 	orrs.w	r2, r0, r1
 80abdf0:	bf08      	it	eq
 80abdf2:	4770      	bxeq	lr
 80abdf4:	f04f 0300 	mov.w	r3, #0
 80abdf8:	e00a      	b.n	80abe10 <__aeabi_l2f+0x14>
 80abdfa:	bf00      	nop

080abdfc <__aeabi_l2f>:
 80abdfc:	ea50 0201 	orrs.w	r2, r0, r1
 80abe00:	bf08      	it	eq
 80abe02:	4770      	bxeq	lr
 80abe04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80abe08:	d502      	bpl.n	80abe10 <__aeabi_l2f+0x14>
 80abe0a:	4240      	negs	r0, r0
 80abe0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80abe10:	ea5f 0c01 	movs.w	ip, r1
 80abe14:	bf02      	ittt	eq
 80abe16:	4684      	moveq	ip, r0
 80abe18:	4601      	moveq	r1, r0
 80abe1a:	2000      	moveq	r0, #0
 80abe1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80abe20:	bf08      	it	eq
 80abe22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80abe26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80abe2a:	fabc f28c 	clz	r2, ip
 80abe2e:	3a08      	subs	r2, #8
 80abe30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80abe34:	db10      	blt.n	80abe58 <__aeabi_l2f+0x5c>
 80abe36:	fa01 fc02 	lsl.w	ip, r1, r2
 80abe3a:	4463      	add	r3, ip
 80abe3c:	fa00 fc02 	lsl.w	ip, r0, r2
 80abe40:	f1c2 0220 	rsb	r2, r2, #32
 80abe44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80abe48:	fa20 f202 	lsr.w	r2, r0, r2
 80abe4c:	eb43 0002 	adc.w	r0, r3, r2
 80abe50:	bf08      	it	eq
 80abe52:	f020 0001 	biceq.w	r0, r0, #1
 80abe56:	4770      	bx	lr
 80abe58:	f102 0220 	add.w	r2, r2, #32
 80abe5c:	fa01 fc02 	lsl.w	ip, r1, r2
 80abe60:	f1c2 0220 	rsb	r2, r2, #32
 80abe64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80abe68:	fa21 f202 	lsr.w	r2, r1, r2
 80abe6c:	eb43 0002 	adc.w	r0, r3, r2
 80abe70:	bf08      	it	eq
 80abe72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80abe76:	4770      	bx	lr

080abe78 <__aeabi_fmul>:
 80abe78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80abe7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80abe80:	bf1e      	ittt	ne
 80abe82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80abe86:	ea92 0f0c 	teqne	r2, ip
 80abe8a:	ea93 0f0c 	teqne	r3, ip
 80abe8e:	d06f      	beq.n	80abf70 <__aeabi_fmul+0xf8>
 80abe90:	441a      	add	r2, r3
 80abe92:	ea80 0c01 	eor.w	ip, r0, r1
 80abe96:	0240      	lsls	r0, r0, #9
 80abe98:	bf18      	it	ne
 80abe9a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80abe9e:	d01e      	beq.n	80abede <__aeabi_fmul+0x66>
 80abea0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80abea4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80abea8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80abeac:	fba0 3101 	umull	r3, r1, r0, r1
 80abeb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80abeb4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80abeb8:	bf3e      	ittt	cc
 80abeba:	0049      	lslcc	r1, r1, #1
 80abebc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80abec0:	005b      	lslcc	r3, r3, #1
 80abec2:	ea40 0001 	orr.w	r0, r0, r1
 80abec6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80abeca:	2afd      	cmp	r2, #253	; 0xfd
 80abecc:	d81d      	bhi.n	80abf0a <__aeabi_fmul+0x92>
 80abece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80abed2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80abed6:	bf08      	it	eq
 80abed8:	f020 0001 	biceq.w	r0, r0, #1
 80abedc:	4770      	bx	lr
 80abede:	f090 0f00 	teq	r0, #0
 80abee2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80abee6:	bf08      	it	eq
 80abee8:	0249      	lsleq	r1, r1, #9
 80abeea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80abeee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80abef2:	3a7f      	subs	r2, #127	; 0x7f
 80abef4:	bfc2      	ittt	gt
 80abef6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80abefa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80abefe:	4770      	bxgt	lr
 80abf00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80abf04:	f04f 0300 	mov.w	r3, #0
 80abf08:	3a01      	subs	r2, #1
 80abf0a:	dc5d      	bgt.n	80abfc8 <__aeabi_fmul+0x150>
 80abf0c:	f112 0f19 	cmn.w	r2, #25
 80abf10:	bfdc      	itt	le
 80abf12:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80abf16:	4770      	bxle	lr
 80abf18:	f1c2 0200 	rsb	r2, r2, #0
 80abf1c:	0041      	lsls	r1, r0, #1
 80abf1e:	fa21 f102 	lsr.w	r1, r1, r2
 80abf22:	f1c2 0220 	rsb	r2, r2, #32
 80abf26:	fa00 fc02 	lsl.w	ip, r0, r2
 80abf2a:	ea5f 0031 	movs.w	r0, r1, rrx
 80abf2e:	f140 0000 	adc.w	r0, r0, #0
 80abf32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80abf36:	bf08      	it	eq
 80abf38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80abf3c:	4770      	bx	lr
 80abf3e:	f092 0f00 	teq	r2, #0
 80abf42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80abf46:	bf02      	ittt	eq
 80abf48:	0040      	lsleq	r0, r0, #1
 80abf4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80abf4e:	3a01      	subeq	r2, #1
 80abf50:	d0f9      	beq.n	80abf46 <__aeabi_fmul+0xce>
 80abf52:	ea40 000c 	orr.w	r0, r0, ip
 80abf56:	f093 0f00 	teq	r3, #0
 80abf5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80abf5e:	bf02      	ittt	eq
 80abf60:	0049      	lsleq	r1, r1, #1
 80abf62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80abf66:	3b01      	subeq	r3, #1
 80abf68:	d0f9      	beq.n	80abf5e <__aeabi_fmul+0xe6>
 80abf6a:	ea41 010c 	orr.w	r1, r1, ip
 80abf6e:	e78f      	b.n	80abe90 <__aeabi_fmul+0x18>
 80abf70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80abf74:	ea92 0f0c 	teq	r2, ip
 80abf78:	bf18      	it	ne
 80abf7a:	ea93 0f0c 	teqne	r3, ip
 80abf7e:	d00a      	beq.n	80abf96 <__aeabi_fmul+0x11e>
 80abf80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80abf84:	bf18      	it	ne
 80abf86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80abf8a:	d1d8      	bne.n	80abf3e <__aeabi_fmul+0xc6>
 80abf8c:	ea80 0001 	eor.w	r0, r0, r1
 80abf90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80abf94:	4770      	bx	lr
 80abf96:	f090 0f00 	teq	r0, #0
 80abf9a:	bf17      	itett	ne
 80abf9c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80abfa0:	4608      	moveq	r0, r1
 80abfa2:	f091 0f00 	teqne	r1, #0
 80abfa6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80abfaa:	d014      	beq.n	80abfd6 <__aeabi_fmul+0x15e>
 80abfac:	ea92 0f0c 	teq	r2, ip
 80abfb0:	d101      	bne.n	80abfb6 <__aeabi_fmul+0x13e>
 80abfb2:	0242      	lsls	r2, r0, #9
 80abfb4:	d10f      	bne.n	80abfd6 <__aeabi_fmul+0x15e>
 80abfb6:	ea93 0f0c 	teq	r3, ip
 80abfba:	d103      	bne.n	80abfc4 <__aeabi_fmul+0x14c>
 80abfbc:	024b      	lsls	r3, r1, #9
 80abfbe:	bf18      	it	ne
 80abfc0:	4608      	movne	r0, r1
 80abfc2:	d108      	bne.n	80abfd6 <__aeabi_fmul+0x15e>
 80abfc4:	ea80 0001 	eor.w	r0, r0, r1
 80abfc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80abfcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80abfd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80abfd4:	4770      	bx	lr
 80abfd6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80abfda:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80abfde:	4770      	bx	lr

080abfe0 <__aeabi_fdiv>:
 80abfe0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80abfe4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80abfe8:	bf1e      	ittt	ne
 80abfea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80abfee:	ea92 0f0c 	teqne	r2, ip
 80abff2:	ea93 0f0c 	teqne	r3, ip
 80abff6:	d069      	beq.n	80ac0cc <__aeabi_fdiv+0xec>
 80abff8:	eba2 0203 	sub.w	r2, r2, r3
 80abffc:	ea80 0c01 	eor.w	ip, r0, r1
 80ac000:	0249      	lsls	r1, r1, #9
 80ac002:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80ac006:	d037      	beq.n	80ac078 <__aeabi_fdiv+0x98>
 80ac008:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80ac00c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80ac010:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80ac014:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80ac018:	428b      	cmp	r3, r1
 80ac01a:	bf38      	it	cc
 80ac01c:	005b      	lslcc	r3, r3, #1
 80ac01e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80ac022:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80ac026:	428b      	cmp	r3, r1
 80ac028:	bf24      	itt	cs
 80ac02a:	1a5b      	subcs	r3, r3, r1
 80ac02c:	ea40 000c 	orrcs.w	r0, r0, ip
 80ac030:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80ac034:	bf24      	itt	cs
 80ac036:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80ac03a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80ac03e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80ac042:	bf24      	itt	cs
 80ac044:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80ac048:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80ac04c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80ac050:	bf24      	itt	cs
 80ac052:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80ac056:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80ac05a:	011b      	lsls	r3, r3, #4
 80ac05c:	bf18      	it	ne
 80ac05e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80ac062:	d1e0      	bne.n	80ac026 <__aeabi_fdiv+0x46>
 80ac064:	2afd      	cmp	r2, #253	; 0xfd
 80ac066:	f63f af50 	bhi.w	80abf0a <__aeabi_fmul+0x92>
 80ac06a:	428b      	cmp	r3, r1
 80ac06c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80ac070:	bf08      	it	eq
 80ac072:	f020 0001 	biceq.w	r0, r0, #1
 80ac076:	4770      	bx	lr
 80ac078:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80ac07c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80ac080:	327f      	adds	r2, #127	; 0x7f
 80ac082:	bfc2      	ittt	gt
 80ac084:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80ac088:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80ac08c:	4770      	bxgt	lr
 80ac08e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80ac092:	f04f 0300 	mov.w	r3, #0
 80ac096:	3a01      	subs	r2, #1
 80ac098:	e737      	b.n	80abf0a <__aeabi_fmul+0x92>
 80ac09a:	f092 0f00 	teq	r2, #0
 80ac09e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80ac0a2:	bf02      	ittt	eq
 80ac0a4:	0040      	lsleq	r0, r0, #1
 80ac0a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80ac0aa:	3a01      	subeq	r2, #1
 80ac0ac:	d0f9      	beq.n	80ac0a2 <__aeabi_fdiv+0xc2>
 80ac0ae:	ea40 000c 	orr.w	r0, r0, ip
 80ac0b2:	f093 0f00 	teq	r3, #0
 80ac0b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80ac0ba:	bf02      	ittt	eq
 80ac0bc:	0049      	lsleq	r1, r1, #1
 80ac0be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80ac0c2:	3b01      	subeq	r3, #1
 80ac0c4:	d0f9      	beq.n	80ac0ba <__aeabi_fdiv+0xda>
 80ac0c6:	ea41 010c 	orr.w	r1, r1, ip
 80ac0ca:	e795      	b.n	80abff8 <__aeabi_fdiv+0x18>
 80ac0cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80ac0d0:	ea92 0f0c 	teq	r2, ip
 80ac0d4:	d108      	bne.n	80ac0e8 <__aeabi_fdiv+0x108>
 80ac0d6:	0242      	lsls	r2, r0, #9
 80ac0d8:	f47f af7d 	bne.w	80abfd6 <__aeabi_fmul+0x15e>
 80ac0dc:	ea93 0f0c 	teq	r3, ip
 80ac0e0:	f47f af70 	bne.w	80abfc4 <__aeabi_fmul+0x14c>
 80ac0e4:	4608      	mov	r0, r1
 80ac0e6:	e776      	b.n	80abfd6 <__aeabi_fmul+0x15e>
 80ac0e8:	ea93 0f0c 	teq	r3, ip
 80ac0ec:	d104      	bne.n	80ac0f8 <__aeabi_fdiv+0x118>
 80ac0ee:	024b      	lsls	r3, r1, #9
 80ac0f0:	f43f af4c 	beq.w	80abf8c <__aeabi_fmul+0x114>
 80ac0f4:	4608      	mov	r0, r1
 80ac0f6:	e76e      	b.n	80abfd6 <__aeabi_fmul+0x15e>
 80ac0f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80ac0fc:	bf18      	it	ne
 80ac0fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80ac102:	d1ca      	bne.n	80ac09a <__aeabi_fdiv+0xba>
 80ac104:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80ac108:	f47f af5c 	bne.w	80abfc4 <__aeabi_fmul+0x14c>
 80ac10c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80ac110:	f47f af3c 	bne.w	80abf8c <__aeabi_fmul+0x114>
 80ac114:	e75f      	b.n	80abfd6 <__aeabi_fmul+0x15e>
 80ac116:	bf00      	nop

080ac118 <__gesf2>:
 80ac118:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80ac11c:	e006      	b.n	80ac12c <__cmpsf2+0x4>
 80ac11e:	bf00      	nop

080ac120 <__lesf2>:
 80ac120:	f04f 0c01 	mov.w	ip, #1
 80ac124:	e002      	b.n	80ac12c <__cmpsf2+0x4>
 80ac126:	bf00      	nop

080ac128 <__cmpsf2>:
 80ac128:	f04f 0c01 	mov.w	ip, #1
 80ac12c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80ac130:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80ac134:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80ac138:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80ac13c:	bf18      	it	ne
 80ac13e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80ac142:	d011      	beq.n	80ac168 <__cmpsf2+0x40>
 80ac144:	b001      	add	sp, #4
 80ac146:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80ac14a:	bf18      	it	ne
 80ac14c:	ea90 0f01 	teqne	r0, r1
 80ac150:	bf58      	it	pl
 80ac152:	ebb2 0003 	subspl.w	r0, r2, r3
 80ac156:	bf88      	it	hi
 80ac158:	17c8      	asrhi	r0, r1, #31
 80ac15a:	bf38      	it	cc
 80ac15c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80ac160:	bf18      	it	ne
 80ac162:	f040 0001 	orrne.w	r0, r0, #1
 80ac166:	4770      	bx	lr
 80ac168:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80ac16c:	d102      	bne.n	80ac174 <__cmpsf2+0x4c>
 80ac16e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80ac172:	d105      	bne.n	80ac180 <__cmpsf2+0x58>
 80ac174:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80ac178:	d1e4      	bne.n	80ac144 <__cmpsf2+0x1c>
 80ac17a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80ac17e:	d0e1      	beq.n	80ac144 <__cmpsf2+0x1c>
 80ac180:	f85d 0b04 	ldr.w	r0, [sp], #4
 80ac184:	4770      	bx	lr
 80ac186:	bf00      	nop

080ac188 <__aeabi_cfrcmple>:
 80ac188:	4684      	mov	ip, r0
 80ac18a:	4608      	mov	r0, r1
 80ac18c:	4661      	mov	r1, ip
 80ac18e:	e7ff      	b.n	80ac190 <__aeabi_cfcmpeq>

080ac190 <__aeabi_cfcmpeq>:
 80ac190:	b50f      	push	{r0, r1, r2, r3, lr}
 80ac192:	f7ff ffc9 	bl	80ac128 <__cmpsf2>
 80ac196:	2800      	cmp	r0, #0
 80ac198:	bf48      	it	mi
 80ac19a:	f110 0f00 	cmnmi.w	r0, #0
 80ac19e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080ac1a0 <__aeabi_fcmpeq>:
 80ac1a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80ac1a4:	f7ff fff4 	bl	80ac190 <__aeabi_cfcmpeq>
 80ac1a8:	bf0c      	ite	eq
 80ac1aa:	2001      	moveq	r0, #1
 80ac1ac:	2000      	movne	r0, #0
 80ac1ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80ac1b2:	bf00      	nop

080ac1b4 <__aeabi_fcmplt>:
 80ac1b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80ac1b8:	f7ff ffea 	bl	80ac190 <__aeabi_cfcmpeq>
 80ac1bc:	bf34      	ite	cc
 80ac1be:	2001      	movcc	r0, #1
 80ac1c0:	2000      	movcs	r0, #0
 80ac1c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80ac1c6:	bf00      	nop

080ac1c8 <__aeabi_fcmple>:
 80ac1c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80ac1cc:	f7ff ffe0 	bl	80ac190 <__aeabi_cfcmpeq>
 80ac1d0:	bf94      	ite	ls
 80ac1d2:	2001      	movls	r0, #1
 80ac1d4:	2000      	movhi	r0, #0
 80ac1d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80ac1da:	bf00      	nop

080ac1dc <__aeabi_fcmpge>:
 80ac1dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80ac1e0:	f7ff ffd2 	bl	80ac188 <__aeabi_cfrcmple>
 80ac1e4:	bf94      	ite	ls
 80ac1e6:	2001      	movls	r0, #1
 80ac1e8:	2000      	movhi	r0, #0
 80ac1ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80ac1ee:	bf00      	nop

080ac1f0 <__aeabi_fcmpgt>:
 80ac1f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80ac1f4:	f7ff ffc8 	bl	80ac188 <__aeabi_cfrcmple>
 80ac1f8:	bf34      	ite	cc
 80ac1fa:	2001      	movcc	r0, #1
 80ac1fc:	2000      	movcs	r0, #0
 80ac1fe:	f85d fb08 	ldr.w	pc, [sp], #8
 80ac202:	bf00      	nop

080ac204 <__aeabi_fcmpun>:
 80ac204:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80ac208:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80ac20c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80ac210:	d102      	bne.n	80ac218 <__aeabi_fcmpun+0x14>
 80ac212:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80ac216:	d108      	bne.n	80ac22a <__aeabi_fcmpun+0x26>
 80ac218:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80ac21c:	d102      	bne.n	80ac224 <__aeabi_fcmpun+0x20>
 80ac21e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80ac222:	d102      	bne.n	80ac22a <__aeabi_fcmpun+0x26>
 80ac224:	f04f 0000 	mov.w	r0, #0
 80ac228:	4770      	bx	lr
 80ac22a:	f04f 0001 	mov.w	r0, #1
 80ac22e:	4770      	bx	lr

080ac230 <__aeabi_f2iz>:
 80ac230:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80ac234:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80ac238:	d30f      	bcc.n	80ac25a <__aeabi_f2iz+0x2a>
 80ac23a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80ac23e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80ac242:	d90d      	bls.n	80ac260 <__aeabi_f2iz+0x30>
 80ac244:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80ac248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80ac24c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80ac250:	fa23 f002 	lsr.w	r0, r3, r2
 80ac254:	bf18      	it	ne
 80ac256:	4240      	negne	r0, r0
 80ac258:	4770      	bx	lr
 80ac25a:	f04f 0000 	mov.w	r0, #0
 80ac25e:	4770      	bx	lr
 80ac260:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80ac264:	d101      	bne.n	80ac26a <__aeabi_f2iz+0x3a>
 80ac266:	0242      	lsls	r2, r0, #9
 80ac268:	d105      	bne.n	80ac276 <__aeabi_f2iz+0x46>
 80ac26a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80ac26e:	bf08      	it	eq
 80ac270:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80ac274:	4770      	bx	lr
 80ac276:	f04f 0000 	mov.w	r0, #0
 80ac27a:	4770      	bx	lr

080ac27c <__aeabi_f2uiz>:
 80ac27c:	0042      	lsls	r2, r0, #1
 80ac27e:	d20e      	bcs.n	80ac29e <__aeabi_f2uiz+0x22>
 80ac280:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80ac284:	d30b      	bcc.n	80ac29e <__aeabi_f2uiz+0x22>
 80ac286:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80ac28a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80ac28e:	d409      	bmi.n	80ac2a4 <__aeabi_f2uiz+0x28>
 80ac290:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80ac294:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80ac298:	fa23 f002 	lsr.w	r0, r3, r2
 80ac29c:	4770      	bx	lr
 80ac29e:	f04f 0000 	mov.w	r0, #0
 80ac2a2:	4770      	bx	lr
 80ac2a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80ac2a8:	d101      	bne.n	80ac2ae <__aeabi_f2uiz+0x32>
 80ac2aa:	0242      	lsls	r2, r0, #9
 80ac2ac:	d102      	bne.n	80ac2b4 <__aeabi_f2uiz+0x38>
 80ac2ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80ac2b2:	4770      	bx	lr
 80ac2b4:	f04f 0000 	mov.w	r0, #0
 80ac2b8:	4770      	bx	lr
 80ac2ba:	bf00      	nop

080ac2bc <__cxa_atexit>:
 80ac2bc:	b510      	push	{r4, lr}
 80ac2be:	4604      	mov	r4, r0
 80ac2c0:	4804      	ldr	r0, [pc, #16]	; (80ac2d4 <__cxa_atexit+0x18>)
 80ac2c2:	4613      	mov	r3, r2
 80ac2c4:	b120      	cbz	r0, 80ac2d0 <__cxa_atexit+0x14>
 80ac2c6:	460a      	mov	r2, r1
 80ac2c8:	2002      	movs	r0, #2
 80ac2ca:	4621      	mov	r1, r4
 80ac2cc:	f3af 8000 	nop.w
 80ac2d0:	bd10      	pop	{r4, pc}
 80ac2d2:	bf00      	nop
 80ac2d4:	00000000 	.word	0x00000000

080ac2d8 <memcpy>:
 80ac2d8:	440a      	add	r2, r1
 80ac2da:	4291      	cmp	r1, r2
 80ac2dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80ac2e0:	d100      	bne.n	80ac2e4 <memcpy+0xc>
 80ac2e2:	4770      	bx	lr
 80ac2e4:	b510      	push	{r4, lr}
 80ac2e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80ac2ea:	4291      	cmp	r1, r2
 80ac2ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80ac2f0:	d1f9      	bne.n	80ac2e6 <memcpy+0xe>
 80ac2f2:	bd10      	pop	{r4, pc}

080ac2f4 <memmove>:
 80ac2f4:	4288      	cmp	r0, r1
 80ac2f6:	b510      	push	{r4, lr}
 80ac2f8:	eb01 0402 	add.w	r4, r1, r2
 80ac2fc:	d902      	bls.n	80ac304 <memmove+0x10>
 80ac2fe:	4284      	cmp	r4, r0
 80ac300:	4623      	mov	r3, r4
 80ac302:	d807      	bhi.n	80ac314 <memmove+0x20>
 80ac304:	1e43      	subs	r3, r0, #1
 80ac306:	42a1      	cmp	r1, r4
 80ac308:	d008      	beq.n	80ac31c <memmove+0x28>
 80ac30a:	f811 2b01 	ldrb.w	r2, [r1], #1
 80ac30e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80ac312:	e7f8      	b.n	80ac306 <memmove+0x12>
 80ac314:	4601      	mov	r1, r0
 80ac316:	4402      	add	r2, r0
 80ac318:	428a      	cmp	r2, r1
 80ac31a:	d100      	bne.n	80ac31e <memmove+0x2a>
 80ac31c:	bd10      	pop	{r4, pc}
 80ac31e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80ac322:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80ac326:	e7f7      	b.n	80ac318 <memmove+0x24>

080ac328 <memset>:
 80ac328:	4603      	mov	r3, r0
 80ac32a:	4402      	add	r2, r0
 80ac32c:	4293      	cmp	r3, r2
 80ac32e:	d100      	bne.n	80ac332 <memset+0xa>
 80ac330:	4770      	bx	lr
 80ac332:	f803 1b01 	strb.w	r1, [r3], #1
 80ac336:	e7f9      	b.n	80ac32c <memset+0x4>

080ac338 <srand>:
 80ac338:	b538      	push	{r3, r4, r5, lr}
 80ac33a:	4b0d      	ldr	r3, [pc, #52]	; (80ac370 <srand+0x38>)
 80ac33c:	4604      	mov	r4, r0
 80ac33e:	681d      	ldr	r5, [r3, #0]
 80ac340:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80ac342:	b97b      	cbnz	r3, 80ac364 <srand+0x2c>
 80ac344:	2018      	movs	r0, #24
 80ac346:	f7f9 f9d9 	bl	80a56fc <malloc>
 80ac34a:	4a0a      	ldr	r2, [pc, #40]	; (80ac374 <srand+0x3c>)
 80ac34c:	4b0a      	ldr	r3, [pc, #40]	; (80ac378 <srand+0x40>)
 80ac34e:	63a8      	str	r0, [r5, #56]	; 0x38
 80ac350:	e9c0 2300 	strd	r2, r3, [r0]
 80ac354:	4b09      	ldr	r3, [pc, #36]	; (80ac37c <srand+0x44>)
 80ac356:	2201      	movs	r2, #1
 80ac358:	6083      	str	r3, [r0, #8]
 80ac35a:	230b      	movs	r3, #11
 80ac35c:	8183      	strh	r3, [r0, #12]
 80ac35e:	2300      	movs	r3, #0
 80ac360:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80ac364:	2200      	movs	r2, #0
 80ac366:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80ac368:	611c      	str	r4, [r3, #16]
 80ac36a:	615a      	str	r2, [r3, #20]
 80ac36c:	bd38      	pop	{r3, r4, r5, pc}
 80ac36e:	bf00      	nop
 80ac370:	20000008 	.word	0x20000008
 80ac374:	abcd330e 	.word	0xabcd330e
 80ac378:	e66d1234 	.word	0xe66d1234
 80ac37c:	0005deec 	.word	0x0005deec

080ac380 <rand>:
 80ac380:	4b13      	ldr	r3, [pc, #76]	; (80ac3d0 <rand+0x50>)
 80ac382:	b510      	push	{r4, lr}
 80ac384:	681c      	ldr	r4, [r3, #0]
 80ac386:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80ac388:	b97b      	cbnz	r3, 80ac3aa <rand+0x2a>
 80ac38a:	2018      	movs	r0, #24
 80ac38c:	f7f9 f9b6 	bl	80a56fc <malloc>
 80ac390:	4a10      	ldr	r2, [pc, #64]	; (80ac3d4 <rand+0x54>)
 80ac392:	4b11      	ldr	r3, [pc, #68]	; (80ac3d8 <rand+0x58>)
 80ac394:	63a0      	str	r0, [r4, #56]	; 0x38
 80ac396:	e9c0 2300 	strd	r2, r3, [r0]
 80ac39a:	4b10      	ldr	r3, [pc, #64]	; (80ac3dc <rand+0x5c>)
 80ac39c:	2201      	movs	r2, #1
 80ac39e:	6083      	str	r3, [r0, #8]
 80ac3a0:	230b      	movs	r3, #11
 80ac3a2:	8183      	strh	r3, [r0, #12]
 80ac3a4:	2300      	movs	r3, #0
 80ac3a6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80ac3aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80ac3ac:	480c      	ldr	r0, [pc, #48]	; (80ac3e0 <rand+0x60>)
 80ac3ae:	690a      	ldr	r2, [r1, #16]
 80ac3b0:	694b      	ldr	r3, [r1, #20]
 80ac3b2:	4350      	muls	r0, r2
 80ac3b4:	4c0b      	ldr	r4, [pc, #44]	; (80ac3e4 <rand+0x64>)
 80ac3b6:	fb04 0003 	mla	r0, r4, r3, r0
 80ac3ba:	fba2 3404 	umull	r3, r4, r2, r4
 80ac3be:	1c5a      	adds	r2, r3, #1
 80ac3c0:	4404      	add	r4, r0
 80ac3c2:	f144 0000 	adc.w	r0, r4, #0
 80ac3c6:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80ac3ca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80ac3ce:	bd10      	pop	{r4, pc}
 80ac3d0:	20000008 	.word	0x20000008
 80ac3d4:	abcd330e 	.word	0xabcd330e
 80ac3d8:	e66d1234 	.word	0xe66d1234
 80ac3dc:	0005deec 	.word	0x0005deec
 80ac3e0:	5851f42d 	.word	0x5851f42d
 80ac3e4:	4c957f2d 	.word	0x4c957f2d

080ac3e8 <strchr>:
 80ac3e8:	4603      	mov	r3, r0
 80ac3ea:	b2c9      	uxtb	r1, r1
 80ac3ec:	4618      	mov	r0, r3
 80ac3ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80ac3f2:	b112      	cbz	r2, 80ac3fa <strchr+0x12>
 80ac3f4:	428a      	cmp	r2, r1
 80ac3f6:	d1f9      	bne.n	80ac3ec <strchr+0x4>
 80ac3f8:	4770      	bx	lr
 80ac3fa:	2900      	cmp	r1, #0
 80ac3fc:	bf18      	it	ne
 80ac3fe:	2000      	movne	r0, #0
 80ac400:	4770      	bx	lr

080ac402 <strcmp>:
 80ac402:	f810 2b01 	ldrb.w	r2, [r0], #1
 80ac406:	f811 3b01 	ldrb.w	r3, [r1], #1
 80ac40a:	2a01      	cmp	r2, #1
 80ac40c:	bf28      	it	cs
 80ac40e:	429a      	cmpcs	r2, r3
 80ac410:	d0f7      	beq.n	80ac402 <strcmp>
 80ac412:	1ad0      	subs	r0, r2, r3
 80ac414:	4770      	bx	lr

080ac416 <strcpy>:
 80ac416:	4603      	mov	r3, r0
 80ac418:	f811 2b01 	ldrb.w	r2, [r1], #1
 80ac41c:	f803 2b01 	strb.w	r2, [r3], #1
 80ac420:	2a00      	cmp	r2, #0
 80ac422:	d1f9      	bne.n	80ac418 <strcpy+0x2>
 80ac424:	4770      	bx	lr
	...

080ac428 <strdup>:
 80ac428:	4b02      	ldr	r3, [pc, #8]	; (80ac434 <strdup+0xc>)
 80ac42a:	4601      	mov	r1, r0
 80ac42c:	6818      	ldr	r0, [r3, #0]
 80ac42e:	f000 b803 	b.w	80ac438 <_strdup_r>
 80ac432:	bf00      	nop
 80ac434:	20000008 	.word	0x20000008

080ac438 <_strdup_r>:
 80ac438:	b570      	push	{r4, r5, r6, lr}
 80ac43a:	4604      	mov	r4, r0
 80ac43c:	4608      	mov	r0, r1
 80ac43e:	460d      	mov	r5, r1
 80ac440:	f000 f80d 	bl	80ac45e <strlen>
 80ac444:	1c46      	adds	r6, r0, #1
 80ac446:	4631      	mov	r1, r6
 80ac448:	4620      	mov	r0, r4
 80ac44a:	f7f9 f97f 	bl	80a574c <_malloc_r>
 80ac44e:	4604      	mov	r4, r0
 80ac450:	b118      	cbz	r0, 80ac45a <_strdup_r+0x22>
 80ac452:	4632      	mov	r2, r6
 80ac454:	4629      	mov	r1, r5
 80ac456:	f7ff ff3f 	bl	80ac2d8 <memcpy>
 80ac45a:	4620      	mov	r0, r4
 80ac45c:	bd70      	pop	{r4, r5, r6, pc}

080ac45e <strlen>:
 80ac45e:	4603      	mov	r3, r0
 80ac460:	f813 2b01 	ldrb.w	r2, [r3], #1
 80ac464:	2a00      	cmp	r2, #0
 80ac466:	d1fb      	bne.n	80ac460 <strlen+0x2>
 80ac468:	1a18      	subs	r0, r3, r0
 80ac46a:	3801      	subs	r0, #1
 80ac46c:	4770      	bx	lr

080ac46e <strncmp>:
 80ac46e:	b510      	push	{r4, lr}
 80ac470:	b16a      	cbz	r2, 80ac48e <strncmp+0x20>
 80ac472:	3901      	subs	r1, #1
 80ac474:	1884      	adds	r4, r0, r2
 80ac476:	f810 3b01 	ldrb.w	r3, [r0], #1
 80ac47a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80ac47e:	4293      	cmp	r3, r2
 80ac480:	d103      	bne.n	80ac48a <strncmp+0x1c>
 80ac482:	42a0      	cmp	r0, r4
 80ac484:	d001      	beq.n	80ac48a <strncmp+0x1c>
 80ac486:	2b00      	cmp	r3, #0
 80ac488:	d1f5      	bne.n	80ac476 <strncmp+0x8>
 80ac48a:	1a98      	subs	r0, r3, r2
 80ac48c:	bd10      	pop	{r4, pc}
 80ac48e:	4610      	mov	r0, r2
 80ac490:	e7fc      	b.n	80ac48c <strncmp+0x1e>
	...

080ac494 <_strtol_l.isra.0>:
 80ac494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80ac498:	468c      	mov	ip, r1
 80ac49a:	4686      	mov	lr, r0
 80ac49c:	4e39      	ldr	r6, [pc, #228]	; (80ac584 <_strtol_l.isra.0+0xf0>)
 80ac49e:	4660      	mov	r0, ip
 80ac4a0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80ac4a4:	5da5      	ldrb	r5, [r4, r6]
 80ac4a6:	f015 0508 	ands.w	r5, r5, #8
 80ac4aa:	d1f8      	bne.n	80ac49e <_strtol_l.isra.0+0xa>
 80ac4ac:	2c2d      	cmp	r4, #45	; 0x2d
 80ac4ae:	d133      	bne.n	80ac518 <_strtol_l.isra.0+0x84>
 80ac4b0:	f04f 0801 	mov.w	r8, #1
 80ac4b4:	f89c 4000 	ldrb.w	r4, [ip]
 80ac4b8:	f100 0c02 	add.w	ip, r0, #2
 80ac4bc:	2b00      	cmp	r3, #0
 80ac4be:	d05c      	beq.n	80ac57a <_strtol_l.isra.0+0xe6>
 80ac4c0:	2b10      	cmp	r3, #16
 80ac4c2:	d10c      	bne.n	80ac4de <_strtol_l.isra.0+0x4a>
 80ac4c4:	2c30      	cmp	r4, #48	; 0x30
 80ac4c6:	d10a      	bne.n	80ac4de <_strtol_l.isra.0+0x4a>
 80ac4c8:	f89c 0000 	ldrb.w	r0, [ip]
 80ac4cc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80ac4d0:	2858      	cmp	r0, #88	; 0x58
 80ac4d2:	d14d      	bne.n	80ac570 <_strtol_l.isra.0+0xdc>
 80ac4d4:	2310      	movs	r3, #16
 80ac4d6:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80ac4da:	f10c 0c02 	add.w	ip, ip, #2
 80ac4de:	2600      	movs	r6, #0
 80ac4e0:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80ac4e4:	3f01      	subs	r7, #1
 80ac4e6:	fbb7 f9f3 	udiv	r9, r7, r3
 80ac4ea:	4630      	mov	r0, r6
 80ac4ec:	fb03 7a19 	mls	sl, r3, r9, r7
 80ac4f0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80ac4f4:	2d09      	cmp	r5, #9
 80ac4f6:	d818      	bhi.n	80ac52a <_strtol_l.isra.0+0x96>
 80ac4f8:	462c      	mov	r4, r5
 80ac4fa:	42a3      	cmp	r3, r4
 80ac4fc:	dd24      	ble.n	80ac548 <_strtol_l.isra.0+0xb4>
 80ac4fe:	1c75      	adds	r5, r6, #1
 80ac500:	d007      	beq.n	80ac512 <_strtol_l.isra.0+0x7e>
 80ac502:	4581      	cmp	r9, r0
 80ac504:	d31d      	bcc.n	80ac542 <_strtol_l.isra.0+0xae>
 80ac506:	d101      	bne.n	80ac50c <_strtol_l.isra.0+0x78>
 80ac508:	45a2      	cmp	sl, r4
 80ac50a:	db1a      	blt.n	80ac542 <_strtol_l.isra.0+0xae>
 80ac50c:	2601      	movs	r6, #1
 80ac50e:	fb00 4003 	mla	r0, r0, r3, r4
 80ac512:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80ac516:	e7eb      	b.n	80ac4f0 <_strtol_l.isra.0+0x5c>
 80ac518:	2c2b      	cmp	r4, #43	; 0x2b
 80ac51a:	bf08      	it	eq
 80ac51c:	f89c 4000 	ldrbeq.w	r4, [ip]
 80ac520:	46a8      	mov	r8, r5
 80ac522:	bf08      	it	eq
 80ac524:	f100 0c02 	addeq.w	ip, r0, #2
 80ac528:	e7c8      	b.n	80ac4bc <_strtol_l.isra.0+0x28>
 80ac52a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80ac52e:	2d19      	cmp	r5, #25
 80ac530:	d801      	bhi.n	80ac536 <_strtol_l.isra.0+0xa2>
 80ac532:	3c37      	subs	r4, #55	; 0x37
 80ac534:	e7e1      	b.n	80ac4fa <_strtol_l.isra.0+0x66>
 80ac536:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80ac53a:	2d19      	cmp	r5, #25
 80ac53c:	d804      	bhi.n	80ac548 <_strtol_l.isra.0+0xb4>
 80ac53e:	3c57      	subs	r4, #87	; 0x57
 80ac540:	e7db      	b.n	80ac4fa <_strtol_l.isra.0+0x66>
 80ac542:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80ac546:	e7e4      	b.n	80ac512 <_strtol_l.isra.0+0x7e>
 80ac548:	1c73      	adds	r3, r6, #1
 80ac54a:	d106      	bne.n	80ac55a <_strtol_l.isra.0+0xc6>
 80ac54c:	2322      	movs	r3, #34	; 0x22
 80ac54e:	4638      	mov	r0, r7
 80ac550:	f8ce 3000 	str.w	r3, [lr]
 80ac554:	b942      	cbnz	r2, 80ac568 <_strtol_l.isra.0+0xd4>
 80ac556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80ac55a:	f1b8 0f00 	cmp.w	r8, #0
 80ac55e:	d000      	beq.n	80ac562 <_strtol_l.isra.0+0xce>
 80ac560:	4240      	negs	r0, r0
 80ac562:	2a00      	cmp	r2, #0
 80ac564:	d0f7      	beq.n	80ac556 <_strtol_l.isra.0+0xc2>
 80ac566:	b10e      	cbz	r6, 80ac56c <_strtol_l.isra.0+0xd8>
 80ac568:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80ac56c:	6011      	str	r1, [r2, #0]
 80ac56e:	e7f2      	b.n	80ac556 <_strtol_l.isra.0+0xc2>
 80ac570:	2430      	movs	r4, #48	; 0x30
 80ac572:	2b00      	cmp	r3, #0
 80ac574:	d1b3      	bne.n	80ac4de <_strtol_l.isra.0+0x4a>
 80ac576:	2308      	movs	r3, #8
 80ac578:	e7b1      	b.n	80ac4de <_strtol_l.isra.0+0x4a>
 80ac57a:	2c30      	cmp	r4, #48	; 0x30
 80ac57c:	d0a4      	beq.n	80ac4c8 <_strtol_l.isra.0+0x34>
 80ac57e:	230a      	movs	r3, #10
 80ac580:	e7ad      	b.n	80ac4de <_strtol_l.isra.0+0x4a>
 80ac582:	bf00      	nop
 80ac584:	080add09 	.word	0x080add09

080ac588 <strtol>:
 80ac588:	4613      	mov	r3, r2
 80ac58a:	460a      	mov	r2, r1
 80ac58c:	4601      	mov	r1, r0
 80ac58e:	4802      	ldr	r0, [pc, #8]	; (80ac598 <strtol+0x10>)
 80ac590:	6800      	ldr	r0, [r0, #0]
 80ac592:	f7ff bf7f 	b.w	80ac494 <_strtol_l.isra.0>
 80ac596:	bf00      	nop
 80ac598:	20000008 	.word	0x20000008

080ac59c <_strtoul_l.isra.0>:
 80ac59c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80ac5a0:	468c      	mov	ip, r1
 80ac5a2:	4686      	mov	lr, r0
 80ac5a4:	4e3a      	ldr	r6, [pc, #232]	; (80ac690 <_strtoul_l.isra.0+0xf4>)
 80ac5a6:	4660      	mov	r0, ip
 80ac5a8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80ac5ac:	5da5      	ldrb	r5, [r4, r6]
 80ac5ae:	f015 0508 	ands.w	r5, r5, #8
 80ac5b2:	d1f8      	bne.n	80ac5a6 <_strtoul_l.isra.0+0xa>
 80ac5b4:	2c2d      	cmp	r4, #45	; 0x2d
 80ac5b6:	d134      	bne.n	80ac622 <_strtoul_l.isra.0+0x86>
 80ac5b8:	f04f 0801 	mov.w	r8, #1
 80ac5bc:	f89c 4000 	ldrb.w	r4, [ip]
 80ac5c0:	f100 0c02 	add.w	ip, r0, #2
 80ac5c4:	2b00      	cmp	r3, #0
 80ac5c6:	d05e      	beq.n	80ac686 <_strtoul_l.isra.0+0xea>
 80ac5c8:	2b10      	cmp	r3, #16
 80ac5ca:	d10c      	bne.n	80ac5e6 <_strtoul_l.isra.0+0x4a>
 80ac5cc:	2c30      	cmp	r4, #48	; 0x30
 80ac5ce:	d10a      	bne.n	80ac5e6 <_strtoul_l.isra.0+0x4a>
 80ac5d0:	f89c 0000 	ldrb.w	r0, [ip]
 80ac5d4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80ac5d8:	2858      	cmp	r0, #88	; 0x58
 80ac5da:	d14f      	bne.n	80ac67c <_strtoul_l.isra.0+0xe0>
 80ac5dc:	2310      	movs	r3, #16
 80ac5de:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80ac5e2:	f10c 0c02 	add.w	ip, ip, #2
 80ac5e6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80ac5ea:	fbb7 f7f3 	udiv	r7, r7, r3
 80ac5ee:	2500      	movs	r5, #0
 80ac5f0:	fb03 f907 	mul.w	r9, r3, r7
 80ac5f4:	4628      	mov	r0, r5
 80ac5f6:	ea6f 0909 	mvn.w	r9, r9
 80ac5fa:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80ac5fe:	2e09      	cmp	r6, #9
 80ac600:	d818      	bhi.n	80ac634 <_strtoul_l.isra.0+0x98>
 80ac602:	4634      	mov	r4, r6
 80ac604:	42a3      	cmp	r3, r4
 80ac606:	dd24      	ble.n	80ac652 <_strtoul_l.isra.0+0xb6>
 80ac608:	2d00      	cmp	r5, #0
 80ac60a:	db1f      	blt.n	80ac64c <_strtoul_l.isra.0+0xb0>
 80ac60c:	4287      	cmp	r7, r0
 80ac60e:	d31d      	bcc.n	80ac64c <_strtoul_l.isra.0+0xb0>
 80ac610:	d101      	bne.n	80ac616 <_strtoul_l.isra.0+0x7a>
 80ac612:	45a1      	cmp	r9, r4
 80ac614:	db1a      	blt.n	80ac64c <_strtoul_l.isra.0+0xb0>
 80ac616:	2501      	movs	r5, #1
 80ac618:	fb00 4003 	mla	r0, r0, r3, r4
 80ac61c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80ac620:	e7eb      	b.n	80ac5fa <_strtoul_l.isra.0+0x5e>
 80ac622:	2c2b      	cmp	r4, #43	; 0x2b
 80ac624:	bf08      	it	eq
 80ac626:	f89c 4000 	ldrbeq.w	r4, [ip]
 80ac62a:	46a8      	mov	r8, r5
 80ac62c:	bf08      	it	eq
 80ac62e:	f100 0c02 	addeq.w	ip, r0, #2
 80ac632:	e7c7      	b.n	80ac5c4 <_strtoul_l.isra.0+0x28>
 80ac634:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80ac638:	2e19      	cmp	r6, #25
 80ac63a:	d801      	bhi.n	80ac640 <_strtoul_l.isra.0+0xa4>
 80ac63c:	3c37      	subs	r4, #55	; 0x37
 80ac63e:	e7e1      	b.n	80ac604 <_strtoul_l.isra.0+0x68>
 80ac640:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80ac644:	2e19      	cmp	r6, #25
 80ac646:	d804      	bhi.n	80ac652 <_strtoul_l.isra.0+0xb6>
 80ac648:	3c57      	subs	r4, #87	; 0x57
 80ac64a:	e7db      	b.n	80ac604 <_strtoul_l.isra.0+0x68>
 80ac64c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80ac650:	e7e4      	b.n	80ac61c <_strtoul_l.isra.0+0x80>
 80ac652:	2d00      	cmp	r5, #0
 80ac654:	da07      	bge.n	80ac666 <_strtoul_l.isra.0+0xca>
 80ac656:	2322      	movs	r3, #34	; 0x22
 80ac658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80ac65c:	f8ce 3000 	str.w	r3, [lr]
 80ac660:	b942      	cbnz	r2, 80ac674 <_strtoul_l.isra.0+0xd8>
 80ac662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80ac666:	f1b8 0f00 	cmp.w	r8, #0
 80ac66a:	d000      	beq.n	80ac66e <_strtoul_l.isra.0+0xd2>
 80ac66c:	4240      	negs	r0, r0
 80ac66e:	2a00      	cmp	r2, #0
 80ac670:	d0f7      	beq.n	80ac662 <_strtoul_l.isra.0+0xc6>
 80ac672:	b10d      	cbz	r5, 80ac678 <_strtoul_l.isra.0+0xdc>
 80ac674:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80ac678:	6011      	str	r1, [r2, #0]
 80ac67a:	e7f2      	b.n	80ac662 <_strtoul_l.isra.0+0xc6>
 80ac67c:	2430      	movs	r4, #48	; 0x30
 80ac67e:	2b00      	cmp	r3, #0
 80ac680:	d1b1      	bne.n	80ac5e6 <_strtoul_l.isra.0+0x4a>
 80ac682:	2308      	movs	r3, #8
 80ac684:	e7af      	b.n	80ac5e6 <_strtoul_l.isra.0+0x4a>
 80ac686:	2c30      	cmp	r4, #48	; 0x30
 80ac688:	d0a2      	beq.n	80ac5d0 <_strtoul_l.isra.0+0x34>
 80ac68a:	230a      	movs	r3, #10
 80ac68c:	e7ab      	b.n	80ac5e6 <_strtoul_l.isra.0+0x4a>
 80ac68e:	bf00      	nop
 80ac690:	080add09 	.word	0x080add09

080ac694 <strtoul>:
 80ac694:	4613      	mov	r3, r2
 80ac696:	460a      	mov	r2, r1
 80ac698:	4601      	mov	r1, r0
 80ac69a:	4802      	ldr	r0, [pc, #8]	; (80ac6a4 <strtoul+0x10>)
 80ac69c:	6800      	ldr	r0, [r0, #0]
 80ac69e:	f7ff bf7d 	b.w	80ac59c <_strtoul_l.isra.0>
 80ac6a2:	bf00      	nop
 80ac6a4:	20000008 	.word	0x20000008

080ac6a8 <dynalib_user>:
 80ac6a8:	080a0021 080a0061 080a0089 080a008d     !...a...........
 80ac6b8:	00000000                                ....

080ac6bc <_ZL11COLOR_TABLE>:
 80ac6bc:	00000019 00000032 0000004b 00000032     ....2...K...2...
 80ac6cc:	00000064 00000096 0000004b 00000096     d.......K.......
 80ac6dc:	000000e1 00000064 000000c8 0000002e     ....d...........
 80ac6ec:	0000007d 000000fa 00000079 00000096     }.......y.......
 80ac6fc:	0000002e 000000c4 000000af 00000060     ............`...
 80ac70c:	00000011 000000c8 00000092 0000005c     ............\...
 80ac71c:	000000e1 000000c4 000000a7 000000fa     ................
 80ac72c:	000000f6 000000f2 00000015 0000002a     ............*...
 80ac73c:	0000003f 0000002e 0000005c 0000008a     ?.......\.......
 80ac74c:	00000047 0000008e 000000d5 00000060     G...........`...
 80ac75c:	000000c0 00000022 00000079 000000f2     ...."...y.......
 80ac76c:	0000006d 00000092 00000026 000000b8     m.......&.......
 80ac77c:	000000ab 00000058 00000005 000000c4     ....X...........
 80ac78c:	0000008a 00000050 000000dd 000000bc     ....P...........
 80ac79c:	0000009b 000000f6 000000ee 000000e6     ................
 80ac7ac:	00000011 00000022 00000033 0000002a     ...."...3...*...
 80ac7bc:	00000054 0000007e 00000043 00000086     T...~...C.......
 80ac7cc:	000000c9 0000005c 000000b8 00000016     ....\...........
 80ac7dc:	00000075 000000ea 00000061 0000008e     u.......a.......
 80ac7ec:	0000001e 000000ac 000000a7 00000050     ............P...
 80ac7fc:	000000f7 000000c0 00000082 00000044     ............D...
 80ac80c:	000000d9 000000b4 0000008f 000000f2     ................
 80ac81c:	000000e6 000000da 0000000d 0000001a     ................
 80ac82c:	00000027 00000026 0000004c 00000072     '...&...L...r...
 80ac83c:	0000003f 0000007e 000000bd 00000058     ?...~.......X...
 80ac84c:	000000b0 0000000a 00000071 000000e2     ........q.......
 80ac85c:	00000055 0000008a 00000016 000000a0     U...............
 80ac86c:	000000a3 00000048 000000eb 000000bc     ....H...........
 80ac87c:	0000007a 00000038 000000d5 000000ac     z...8...........
 80ac88c:	00000083 000000ee 000000de 000000ce     ................
 80ac89c:	00000009 00000012 0000001b 00000022     ............"...
 80ac8ac:	00000044 00000066 0000003b 00000076     D...f...;...v...
 80ac8bc:	000000b1 00000054 000000a8 000000fc     ....T...........
 80ac8cc:	0000006d 000000da 00000049 00000086     m.......I.......
 80ac8dc:	0000000e 00000094 0000009f 00000040     ............@...
 80ac8ec:	000000df 000000b8 00000072 0000002c     ........r...,...
 80ac8fc:	000000d1 000000a4 00000077 000000ea     ........w.......
 80ac90c:	000000d6 000000c2 61636f6c 6b4f006c     ........local.Ok
 80ac91c:	73756d00 69540065 31736b63 46007330     .muse.Ticks10s.F
 80ac92c:	656d6172 73303173 4c002e00 6c61636f     rames10s...Local
 80ac93c:	                                         IP.

080ac93f <_ZL11matrix_pins>:
 80ac93f:	06071213 02030405 65740001 682f7478     ..........text/h
 80ac94f:	3b6c6d74 61686320 74657372 6674753d     tml; charset=utf
 80ac95f:	7600382d 61757369 657a696c 746f0072     -8.visualizer.ot
 80ac96f:	00726568 65776f70 772f0072 695f6265     her.power./web_i
 80ac97f:	7475706e 41706900 65726464 25007373     nput.ipAddress.%
 80ac98f:	64252e64 2e64252e                        d.%d.%d.%d.

080ac99a <_ZL13control_panel>:
 80ac99a:	4f44213c 50595443 74682045 3c3e6c6d     <!DOCTYPE html><
 80ac9aa:	6c6d7468 65683c3e 3c3e6461 6c746974     html><head><titl
 80ac9ba:	554d3e65 43204553 72746e6f 50206c6f     e>MUSE Control P
 80ac9ca:	6c656e61 69742f3c 3e656c74 6e696c3c     anel</title><lin
 80ac9da:	7268206b 273d6665 70747468 612f2f3a     k href='http://a
 80ac9ea:	2e78616a 676f6f67 7061656c 632e7369     jax.googleapis.c
 80ac9fa:	612f6d6f 2f78616a 7362696c 75716a2f     om/ajax/libs/jqu
 80aca0a:	75797265 2e312f69 36312e38 6568742f     eryui/1.8.16/the
 80aca1a:	2f73656d 65736162 75716a2f 2d797265     mes/base/jquery-
 80aca2a:	632e6975 20277373 3d6c6572 6c797473     ui.css' rel=styl
 80aca3a:	65687365 2f207465 63733c3e 74706972     esheet /><script
 80aca4a:	63727320 7468273d 2f3a7074 616a612f      src='http://aja
 80aca5a:	6f672e78 656c676f 73697061 6d6f632e     x.googleapis.com
 80aca6a:	616a612f 696c2f78 6a2f7362 72657571     /ajax/libs/jquer
 80aca7a:	2e312f79 2f342e36 6575716a 6d2e7972     y/1.6.4/jquery.m
 80aca8a:	6a2e6e69 3c3e2773 7263732f 3e747069     in.js'></script>
 80aca9a:	7263733c 20747069 3d637273 74746827     <script src='htt
 80acaaa:	2f2f3a70 78616a61 6f6f672e 61656c67     p://ajax.googlea
 80acaba:	2e736970 2f6d6f63 78616a61 62696c2f     pis.com/ajax/lib
 80acaca:	716a2f73 79726575 312f6975 312e382e     s/jqueryui/1.8.1
 80acada:	716a2f36 79726575 2e69752d 2e6e696d     6/jquery-ui.min.
 80acaea:	3e27736a 63732f3c 74706972 74733c3e     js'></script><st
 80acafa:	3e656c79 79646f62 61627b20 72676b63     yle>body {backgr
 80acb0a:	646e756f 6c6f632d 203a726f 32303023     ound-color: #002
 80acb1a:	3b383530 746e6f66 6d61662d 3a796c69     058;font-family:
 80acb2a:	6e617320 65732d73 3b666972 74786574      sans-serif;text
 80acb3a:	696c612d 203a6e67 746e6563 7d3b7265     -align: center;}
 80acb4a:	7b203168 6f6c6f63 23203a72 37373845     h1 {color: #E877
 80acb5a:	743b3232 2d747865 67696c61 63203a6e     22;text-align: c
 80acb6a:	65746e65 647d3b72 7b207669 70736964     enter;}div {disp
 80acb7a:	3a79616c 6c6e6920 2d656e69 636f6c62     lay: inline-bloc
 80acb8a:	69773b6b 3a687464 25303620 75627d3b     k;width: 60%;}bu
 80acb9a:	6e6f7474 61627b20 72676b63 646e756f     tton {background
 80acbaa:	6c6f632d 203a726f 32303023 3b383530     -color: #002058;
 80acbba:	64726f62 632d7265 726f6c6f 3023203a     border-color: #0
 80acbca:	35303230 6f633b38 3a726f6c 38452320     02058;color: #E8
 80acbda:	32323737 6e6f663b 69732d74 203a657a     7722;font-size: 
 80acbea:	78703432 7865743b 6c612d74 3a6e6769     24px;text-align:
 80acbfa:	66656c20 627d3b74 6f747475 6f683a6e      left;}button:ho
 80acc0a:	20726576 6361627b 6f72676b 2d646e75     ver {background-
 80acc1a:	6f6c6f63 23203a72 45363036 623b3242     color: #606EB2;b
 80acc2a:	6564726f 6f632d72 3a726f6c 30362320     order-color: #60
 80acc3a:	32424536 2f3c7d3b 6c797473 6d3c3e65     6EB2;}</style><m
 80acc4a:	20617465 273d6469 6174656d 616e2027     eta id='meta' na
 80acc5a:	273d656d 77656976 74726f70 6f632027     me='viewport' co
 80acc6a:	6e65746e 68273d74 68676965 65643d74     ntent='height=de
 80acc7a:	65636976 6965682d 2c746867 696e6920     vice-height, ini
 80acc8a:	6c616974 6163732d 313d656c 2027302e     tial-scale=1.0' 
 80acc9a:	733c3e2f 70697263 28243e74 75636f64     /><script>$(docu
 80accaa:	746e656d 65722e29 28796461 636e7566     ment).ready(func
 80accba:	6e6f6974 7b202928 23272824 75736976     tion() {$('#visu
 80accca:	7a696c61 645f7265 623e7669 6f747475     alizer_div>butto
 80accda:	2e29276e 63696c63 7566286b 6974636e     n').click(functi
 80accea:	65286e6f 746e6576 2e247b29 74736f70     on(event){$.post
 80accfa:	772f2728 695f6265 7475706e 7b202c27     ('/web_input', {
 80acd0a:	75736976 7a696c61 203a7265 6e657665     visualizer: even
 80acd1a:	61742e74 74656772 6c61762e 297d6575     t.target.value})
 80acd2a:	2c297d3b 23272824 6568746f 69645f72     ;}),$('#other_di
 80acd3a:	75623e76 6e6f7474 632e2927 6b63696c     v>button').click
 80acd4a:	6e756628 6f697463 7665286e 29746e65     (function(event)
 80acd5a:	702e247b 2874736f 65772f27 6e695f62     {$.post('/web_in
 80acd6a:	27747570 6f7b202c 72656874 7665203a     put', {other: ev
 80acd7a:	2e746e65 67726174 762e7465 65756c61     ent.target.value
 80acd8a:	7d3b297d 28242c29 6f702327 5f726577     });}),$('#power_
 80acd9a:	3e766964 74747562 29276e6f 696c632e     div>button').cli
 80acdaa:	66286b63 74636e75 286e6f69 6e657665     ck(function(even
 80acdba:	247b2974 736f702e 2f272874 5f626577     t){$.post('/web_
 80acdca:	75706e69 202c2774 776f707b 203a7265     input', {power: 
 80acdda:	6e657665 61742e74 74656772 6c61762e     event.target.val
 80acdea:	297d6575 7d297d3b 2f3c3b29 69726373     ue});})});</scri
 80acdfa:	3c3e7470 6165682f 623c3e64 3e79646f     pt></head><body>
 80ace0a:	7669643c 3d646920 73697627 696c6175     <div id='visuali
 80ace1a:	5f72657a 27766964 31683c3e 7369563e     zer_div'><h1>Vis
 80ace2a:	696c6175 7372657a 31682f3c 75623c3e     ualizers</h1><bu
 80ace3a:	6e6f7474 6c617620 273d6575 423e2730     tton value='0'>B
 80ace4a:	3c737261 7475622f 3e6e6f74 7475623c     ars</button><but
 80ace5a:	206e6f74 756c6176 31273d65 61423e27     ton value='1'>Ba
 80ace6a:	4d207372 6c646469 622f3c65 6f747475     rs Middle</butto
 80ace7a:	623c3e6e 6f747475 6176206e 3d65756c     n><button value=
 80ace8a:	3e273227 73616c50 2f3c616d 74747562     '2'>Plasma</butt
 80ace9a:	3c3e6e6f 74747562 76206e6f 65756c61     on><button value
 80aceaa:	2733273d 6c75503e 2f3c6573 74747562     ='3'>Pulse</butt
 80aceba:	3c3e6e6f 74747562 76206e6f 65756c61     on><button value
 80aceca:	2734273d 6961523e 776f626e 75622f3c     ='4'>Rainbow</bu
 80aceda:	6e6f7474 75623c3e 6e6f7474 6c617620     tton><button val
 80aceea:	273d6575 573e2735 6c656568 75622f3c     ue='5'>Wheel</bu
 80acefa:	6e6f7474 642f3c3e 3c3e7669 3c3e7262     tton></div><br><
 80acf0a:	3c3e7262 20766964 273d6469 6568746f     br><div id='othe
 80acf1a:	69645f72 3c3e2776 4f3e3168 72656874     r_div'><h1>Other
 80acf2a:	682f3c73 623c3e31 6f747475 6176206e     s</h1><button va
 80acf3a:	3d65756c 27363627 626d413e 746e6569     lue='66'>Ambient
 80acf4a:	67694c20 2f3c7468 74747562 3c3e6e6f      Light</button><
 80acf5a:	74747562 76206e6f 65756c61 3737273d     button value='77
 80acf6a:	6f423e27 69636e75 4c20676e 73656e69     '>Bouncing Lines
 80acf7a:	75622f3c 6e6f7474 75623c3e 6e6f7474     </button><button
 80acf8a:	6c617620 273d6575 3e273838 20726142      value='88'>Bar 
 80acf9a:	74736554 75622f3c 6e6f7474 75623c3e     Test</button><bu
 80acfaa:	6e6f7474 6c617620 273d6575 3e273939     tton value='99'>
 80acfba:	65786950 6554206c 2f3c7473 74747562     Pixel Test</butt
 80acfca:	3c3e6e6f 7669642f 72623c3e 72623c3e     on></div><br><br
 80acfda:	69643c3e 64692076 6f70273d 5f726577     ><div id='power_
 80acfea:	27766964 31683c3e 776f503e 2f3c7265     div'><h1>Power</
 80acffa:	3c3e3168 74747562 76206e6f 65756c61     h1><button value
 80ad00a:	2731273d 776f503e 4f207265 622f3c6e     ='1'>Power On</b
 80ad01a:	6f747475 623c3e6e 6f747475 6176206e     utton><button va
 80ad02a:	3d65756c 3e273027 65776f50 664f2072     lue='0'>Power Of
 80ad03a:	622f3c66 6f747475 2f3c3e6e 3e766964     f</button></div>
 80ad04a:	6f622f3c 3c3e7964 6d74682f 00003e6c     </body></html>..
	...

080ad05c <_ZTV5Label>:
	...
 80ad064:	080a3def                                .=..

080ad068 <_ZTV9HostLabel>:
	...
 80ad070:	080a3df1 74636576 3a3a726f 725f4d5f     .=..vector::_M_r
 80ad080:	6c6c6165 695f636f 7265736e 6f480074     ealloc_insert.Ho
 80ad090:	616e7473 6120656d 6165726c 73207964     stname already s
 80ad0a0:	49007465 6c61766e 68206469 6e74736f     et.Invalid hostn
 80ad0b0:	00656d61 66667542 75207265 7265646e     ame.Buffer under
 80ad0c0:	776f6c66 20746120 65646e69 00002078     flow at index ..

080ad0d0 <_ZTV10NSECRecord>:
	...
 80ad0d8:	080a00a9                                ....

080ad0dc <_ZTV14HostNSECRecord>:
	...
 80ad0e4:	080a4871                                qH..

080ad0e8 <_ZTV7ARecord>:
	...
 80ad0f0:	080a48a5 74786574 616c702f 43006e69     .H..text/plain.C
 80ad100:	65686361 6e6f432d 6c6f7274 616d203a     ache-Control: ma
 80ad110:	67612d78 31333d65 30363335 0a0d3030     x-age=31536000..
 80ad120:	616d6900 782f6567 6f63692d 4547006e     .image/x-icon.GE
 80ad130:	48002054 20444145 534f5000 50002054     T .HEAD .POST .P
 80ad140:	00205455 454c4544 00204554 43544150     UT .DELETE .PATC
 80ad150:	43002048 65746e6f 4c2d746e 74676e65     H .Content-Lengt
 80ad160:	41003a68 6f687475 617a6972 6e6f6974     h:.Authorization
 80ad170:	0a0d003a 2f000a0d 6f626f72 742e7374     :....../robots.t
 80ad180:	2f007478 69766166 2e6e6f63 006f6369     xt./favicon.ico.

080ad190 <_ZL15webServerHeader>:
 80ad190:	76726553 203a7265 64626557 6f6e6975     Server: Webduino
 80ad1a0:	372e312f 00000a0d                       /1.7....

080ad1a8 <_ZTV9WebServer>:
	...
 80ad1b0:	080a3c71 080a3ca9 080a49ad 080a4a8d     q<...<...I...J..

080ad1c0 <_ZZN9WebServer11httpSuccessEPKcS1_E11successMsg1>:
 80ad1c0:	50545448 302e312f 30303220 0d4b4f20     HTTP/1.0 200 OK.
 80ad1d0:	                                         ..

080ad1d2 <_ZZN9WebServer11httpSuccessEPKcS1_E11successMsg2>:
 80ad1d2:	65636341 432d7373 72746e6f 412d6c6f     Access-Control-A
 80ad1e2:	776f6c6c 69724f2d 3a6e6967 0a0d2a20     llow-Origin: *..
 80ad1f2:	746e6f43 2d746e65 65707954               Content-Type: .

080ad201 <_ZZN9WebServer12httpSeeOtherEPKcE12seeOtherMsg1>:
 80ad201:	50545448 302e312f 33303320 65655320     HTTP/1.0 303 See
 80ad211:	68744f20 0a0d7265                         Other...

080ad21a <_ZZN9WebServer12httpSeeOtherEPKcE12seeOtherMsg2>:
 80ad21a:	61636f4c 6e6f6974                        Location: .

080ad225 <_ZZN9WebServer7faviconENS_14ConnectionTypeEE10faviconIco>:
 80ad225:	00010000 10100001 00010002 00b00001     ................
 80ad235:	00160000 00280000 00100000 00200000     ......(....... .
 80ad245:	00010000 00000001 00000000 00000000     ................
	...
 80ad265:	00ff0000 ffff0000 ffff0000 ffff0000     ................
 80ad275:	bfcf0000 bfc70000 bfc30000 bfc10000     ................
 80ad285:	bfc00000 00000000 bfc00000 bfc10000     ................
 80ad295:	bfc30000 bfc70000 bfcf0000 ffff0000     ................
 80ad2a5:	ffff0000 00000000 00000000 00000000     ................
	...

080ad2eb <_ZZN9WebServer8httpFailEvE8failMsg1>:
 80ad2eb:	50545448 302e312f 30303420 64614220     HTTP/1.0 400 Bad
 80ad2fb:	71655220 74736575                         Request...

080ad306 <_ZZN9WebServer8httpFailEvE8failMsg2>:
 80ad306:	746e6f43 2d746e65 65707954 6574203a     Content-Type: te
 80ad316:	682f7478 0d6c6d74 3c0a0d0a 453e3168     xt/html....<h1>E
 80ad326:	20434950 4c494146 31682f3c               PIC FAIL</h1>.

080ad334 <_ZZN9WebServer8noRobotsENS_14ConnectionTypeEE12allowNoneMsg>:
 80ad334:	72657355 6567612d 203a746e 440a0d2a     User-agent: *..D
 80ad344:	6c617369 3a776f6c 0a0d2f20 00000000     isallow: /......

080ad354 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80ad35c:	080a57ab 080a57b1 080a5801 080a57bf     .W...W...X...W..
 80ad36c:	080a57ad                                .W..

080ad370 <_ZTV7TwoWire>:
	...
 80ad378:	080a5d25 080a5d6f 080a5d47 080a5d27     %]..o]..G]..']..
 80ad388:	080a5d4f 080a5d57 080a5d5f 080a5d67     O]..W].._]..g]..

080ad398 <_ZTV9IPAddress>:
	...
 80ad3a0:	080a5da3 080a5da1 080a5dd5 00707061     .]...]...]..app.

080ad3b0 <_ZTVN5spark12NetworkClassE>:
	...
 80ad3b8:	080a5e95 080a5e9f 080a5ea9 080a5eb3     .^...^...^...^..
 80ad3c8:	080a5ebd 080a5ec9 080a5ed5 080a5edd     .^...^...^...^..
 80ad3d8:	080a5ee5 080a5ef1 080a5ef9 080a5f03     .^...^...^..._..
 80ad3e8:	080a5f0d 69726977 5400676e 6c435043     ._..wiring.TCPCl
 80ad3f8:	746e6569 636f7320 3d74656b 00007825     ient socket=%x..

080ad408 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80ad410:	080a635d 080a6385 080a67a7 080a6393     ]c...c...g...c..
 80ad420:	080a6361                                ac..

080ad424 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080ad42c <_ZTV9TCPClient>:
	...
 80ad434:	080a6399 080a63cd 080a6319 080a6333     .c...c...c..3c..
 80ad444:	080a65a9 080a642f 080a6401 080a635b     .e../d...d..[c..
 80ad454:	080a64c9 080a67ad 080a6463 080a661d     .d...g..cd...f..
 80ad464:	080a66cb 080a6683 080a6343 080a6691     .f...f..Cc...f..
 80ad474:	080a63e1                                .c..

080ad478 <_ZTV6Stream>:
	...
 80ad488:	080a00a9 080a5f89 080a00a9 080a00a9     ....._..........
 80ad498:	080a00a9 080a00a9                       ........

080ad4a0 <_ZTV15TCPServerClient>:
	...
 80ad4a8:	080a69f1 080a6a09 080a6319 080a6333     .i...j...c..3c..
 80ad4b8:	080a65a9 080a642f 080a6401 080a635b     .e../d...d..[c..
 80ad4c8:	080a64c9 080a67ad 080a6463 080a661d     .d...g..cd...f..
 80ad4d8:	080a66cb 080a6683 080a6343 080a6691     .f...f..Cc...f..
 80ad4e8:	080a686f                                oh..

080ad4ec <_ZTV9TCPServer>:
	...
 80ad4f4:	080a6ab5 080a6ad9 080a6831 080a6849     .j...j..1h..Ih..
 80ad504:	080a693d 080a6819 080a6859 252d5925     =i...h..Yh..%Y-%
 80ad514:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 80ad524:	74637361 00656d69                       asctime.

080ad52c <_ZTV3UDP>:
	...
 80ad534:	080a6fad 080a6fd1 080a6b93 080a6cbf     .o...o...k...l..
 80ad544:	080a6b8b 080a6bab 080a6bc9 080a6be3     .k...k...k...k..
 80ad554:	080a6c05 080a6c5d 080a6c7f 080a6e29     .l..]l...l..)n..
 80ad564:	080a6d25 080a6b75 080a6f41 080a6da1     %m..uk..Ao...m..
 80ad574:	080a6e61 080a6f6f 080a6ce9 080a6b81     an..oo...l...k..
 80ad584:	080a6e09 080a6b87 080a6be5 fffffff0     .n...k...k......
 80ad594:	00000000 080a6bfd                       .....k..

080ad59c <_ZTV11USARTSerial>:
	...
 80ad5a4:	080a7033 080a709b 080a7077 080a5f89     3p...p..wp..._..
 80ad5b4:	080a7047 080a7063 080a7055 080a7071     Gp..cp..Up..qp..
 80ad5c4:	080a7035 080a7039                       5p..9p..

080ad5cc <_ZTV9USBSerial>:
	...
 80ad5d4:	080a7129 080a718f 080a7167 080a5f89     )q...q..gq..._..
 80ad5e4:	080a7159 080a712b 080a713b 080a7189     Yq..+q..;q...q..
 80ad5f4:	080a714b 080a7125                       Kq..%q..

080ad5fc <_ZTVN5spark9WiFiClassE>:
	...
 80ad604:	080a735f 080a7355 080a734b 080a72bd     _s..Us..Ks...r..
 80ad614:	080a733f 080a7333 080a5ed5 080a5edd     ?s..3s...^...^..
 80ad624:	080a7327 080a731f 080a7315 080a730b     's...s...s...s..
 80ad634:	080a72c7                                .r..

080ad638 <_ZSt7nothrow>:
	...

080ad639 <_ZTSSt19_Sp_make_shared_tag>:
 80ad639:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 80ad649:	5f646572 00676174                        red_tag....

080ad654 <_ZTISt19_Sp_make_shared_tag>:
 80ad654:	080ad694 080ad639                       ....9...

080ad65c <_ZTIN10__cxxabiv117__class_type_infoE>:
 80ad65c:	080ad6f4 080ad668 080ad718              ....h.......

080ad668 <_ZTSN10__cxxabiv117__class_type_infoE>:
 80ad668:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 80ad678:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 80ad688:	00000045                                E...

080ad68c <_ZTVN10__cxxabiv117__class_type_infoE>:
 80ad68c:	00000000 080ad65c 080a7911 080a7925     ....\....y..%y..
 80ad69c:	080a7abd 080a7abd 080a798f 080a78d1     .z...z...y...x..
 80ad6ac:	080a7977 080a7939 080a7905              wy..9y...y..

080ad6b8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80ad6b8:	080ad6f4 080ad6c4 080ad65c              ........\...

080ad6c4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80ad6c4:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 80ad6d4:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 80ad6e4:	456f666e 00000000                       nfoE....

080ad6ec <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80ad6ec:	00000000 080ad6b8 080a79b9 080a79cd     .........y...y..
 80ad6fc:	080a7abd 080a7abd 080a798f 080a78d1     .z...z...y...x..
 80ad70c:	080a7a91 080a7a1d 080a79e1              .z...z...y..

080ad718 <_ZTISt9type_info>:
 80ad718:	080ad694 080ad720                       .... ...

080ad720 <_ZTSSt9type_info>:
 80ad720:	74397453 5f657079 6f666e69 00000000     St9type_info....
 80ad730:	00776f70 646f6d66 00000066 66676f6c     pow.fmodf...logf
 80ad740:	00000000                                ....

080ad744 <npio2_hw>:
 80ad744:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
 80ad754:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
 80ad764:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
 80ad774:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
 80ad784:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
 80ad794:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
 80ad7a4:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
 80ad7b4:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

080ad7c4 <two_over_pi>:
 80ad7c4:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
 80ad7d4:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
 80ad7e4:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
 80ad7f4:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
 80ad804:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
 80ad814:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
 80ad824:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
 80ad834:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
 80ad844:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
 80ad854:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
 80ad864:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
 80ad874:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
 80ad884:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
 80ad894:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
 80ad8a4:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
 80ad8b4:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
 80ad8c4:	0060e27b 00c08c6b                       {.`.k...

080ad8cc <Zero>:
 80ad8cc:	00000000 80000000                       ........

080ad8d4 <npio2_hw>:
 80ad8d4:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
 80ad8e4:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
 80ad8f4:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
 80ad904:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
 80ad914:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
 80ad924:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
 80ad934:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
 80ad944:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

080ad954 <two_over_pi>:
 80ad954:	000000a2 000000f9 00000083 0000006e     ............n...
 80ad964:	0000004e 00000044 00000015 00000029     N...D.......)...
 80ad974:	000000fc 00000027 00000057 000000d1     ....'...W.......
 80ad984:	000000f5 00000034 000000dd 000000c0     ....4...........
 80ad994:	000000db 00000062 00000095 00000099     ....b...........
 80ad9a4:	0000003c 00000043 00000090 00000041     <...C.......A...
 80ad9b4:	000000fe 00000051 00000063 000000ab     ....Q...c.......
 80ad9c4:	000000de 000000bb 000000c5 00000061     ............a...
 80ad9d4:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
 80ad9e4:	00000042 0000004d 000000d2 000000e0     B...M...........
 80ad9f4:	00000006 00000049 0000002e 000000ea     ....I...........
 80ada04:	00000009 000000d1 00000092 0000001c     ................
 80ada14:	000000fe 0000001d 000000eb 0000001c     ................
 80ada24:	000000b1 00000029 000000a7 0000003e     ....).......>...
 80ada34:	000000e8 00000082 00000035 000000f5     ........5.......
 80ada44:	0000002e 000000bb 00000044 00000084     ........D.......
 80ada54:	000000e9 0000009c 00000070 00000026     ........p...&...
 80ada64:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
 80ada74:	00000039 00000091 000000d6 00000039     9...........9...
 80ada84:	00000083 00000053 00000039 000000f4     ....S...9.......
 80ada94:	0000009c 00000084 0000005f 0000008b     ........_.......
 80adaa4:	000000bd 000000f9 00000028 0000003b     ........(...;...
 80adab4:	0000001f 000000f8 00000097 000000ff     ................
 80adac4:	000000de 00000005 00000098 0000000f     ................
 80adad4:	000000ef 0000002f 00000011 0000008b     ..../...........
 80adae4:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
 80adaf4:	0000006d 00000036 0000007e 000000cf     m...6...~.......
 80adb04:	00000027 000000cb 00000009 000000b7     '...............
 80adb14:	0000004f 00000046 0000003f 00000066     O...F...?...f...
 80adb24:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
 80adb34:	00000075 00000027 000000ba 000000c7     u...'...........
 80adb44:	000000eb 000000e5 000000f1 0000007b     ............{...
 80adb54:	0000003d 00000007 00000039 000000f7     =.......9.......
 80adb64:	0000008a 00000052 00000092 000000ea     ....R...........
 80adb74:	0000006b 000000fb 0000005f 000000b1     k......._.......
 80adb84:	0000001f 0000008d 0000005d 00000008     ........].......
 80adb94:	00000056 00000003 00000030 00000046     V.......0...F...
 80adba4:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
 80adbb4:	000000f0 000000cf 000000bc 00000020     ............ ...
 80adbc4:	0000009a 000000f4 00000036 0000001d     ........6.......
 80adbd4:	000000a9 000000e3 00000091 00000061     ............a...
 80adbe4:	0000005e 000000e6 0000001b 00000008     ^...............
 80adbf4:	00000065 00000099 00000085 0000005f     e..........._...
 80adc04:	00000014 000000a0 00000068 00000040     ........h...@...
 80adc14:	0000008d 000000ff 000000d8 00000080     ................
 80adc24:	0000004d 00000073 00000027 00000031     M...s...'...1...
 80adc34:	00000006 00000006 00000015 00000056     ............V...
 80adc44:	000000ca 00000073 000000a8 000000c9     ....s...........
 80adc54:	00000060 000000e2 0000007b 000000c0     `.......{.......
 80adc64:	0000008c 0000006b 00000000              ....k.......

080adc70 <PIo2>:
 80adc70:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
 80adc80:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
 80adc90:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
 80adca0:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

080adcb0 <init_jk>:
 80adcb0:	00000002 00000003 00000004 00000006     ................

080adcc0 <PIo2>:
 80adcc0:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
 80adcd0:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
 80adce0:	1fc40000 1bc60000 17440000              ..........D.

080adcec <init_jk>:
 80adcec:	00000004 00000007 00000009              ............

080adcf8 <TWO52>:
 80adcf8:	00000000 43300000 00000000 c3300000     ......0C......0.

080add08 <_ctype_>:
 80add08:	20202000 20202020 28282020 20282828     .         ((((( 
 80add18:	20202020 20202020 20202020 20202020                     
 80add28:	10108820 10101010 10101010 10101010      ...............
 80add38:	04040410 04040404 10040404 10101010     ................
 80add48:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80add58:	01010101 01010101 01010101 10101010     ................
 80add68:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80add78:	02020202 02020202 02020202 10101010     ................
 80add88:	00000020 00000000 00000000 00000000      ...............
	...

080ade09 <link_const_variable_data_end>:
 80ade09:	00          	.byte	0x00
	...

080ade0c <link_constructors_location>:
 80ade0c:	080a2725 	.word	0x080a2725
 80ade10:	080a37dd 	.word	0x080a37dd
 80ade14:	080a3cc1 	.word	0x080a3cc1
 80ade18:	080a5e85 	.word	0x080a5e85
 80ade1c:	080a5f75 	.word	0x080a5f75
 80ade20:	080a6055 	.word	0x080a6055
 80ade24:	080a62dd 	.word	0x080a62dd
 80ade28:	080a6b61 	.word	0x080a6b61
 80ade2c:	080a7369 	.word	0x080a7369
 80ade30:	080a76e9 	.word	0x080a76e9

080ade34 <link_constructors_end>:
	...
